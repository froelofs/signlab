// -------- setup-emcc-node.js --------
// Set up console as expected by CoffeeScript code
this.console = console;
var Module = {
'preRun': [
function () {
if (typeof ENV !== 'undefined') {
ENV.PWD = process.cwd();
}
},
function() {
if (typeof FS !== 'undefined' && typeof fs !== 'undefined') {
var rootents = fs.readdirSync("/");
rootents.forEach(
ent => {
var pat = "/"+ent;
if (fs.statSync(pat).isDirectory()) {
// console.warn("Entry: "+pat+" is a directory");
try {
FS.lookupPath(pat);
// console.warn("Skipping "+pat+" as exists already");
} catch (e) {
// console.warn("Mounting "+pat);
FS.mkdir(pat);
FS.mount(NODEFS, { root: pat }, pat);
}
}
});
cwd = process.cwd();
FS.chdir(cwd);
// console.warn("Tried to chdir to "+cwd);
} else {
console.warn("Either FS or fs or both are undefined");
}
}
]
};
// -------- CWAEnv.js --------
// Generated by CoffeeScript 2.5.1
(function() {
// CoffeeScript WebGL ARP Environment set up.
var CWAEnv, navigator;
navigator = this.navigator;
CWAEnv = (function() {
//-----------
class CWAEnv {
//-----------
constructor() {
throw "CWAEnv is not instantiatable.";
}
static add(cls, cname) {
var ref;
this._mod[cname] = cls;
if (cname === "Logger") {
this._lggr = cls.get("CWAEnv"); // , "trace", "stderr"
}
return (ref = this._lggr) != null ? typeof ref.trace === "function" ? ref.trace(`CWAEnv add for ${cname}`) : void 0 : void 0;
}
static get(cname) {
var ref, ref1, res;
if ((ref = this._lggr) != null) {
if (typeof ref.trace === "function") {
ref.trace(`CWAEnv get for ${cname}`);
}
}
res = this._mod[cname];
if (res != null) {
return res;
} else {
return (ref1 = this._lggr) != null ? ref1.warn(`No CWAEnv entry for ${cname}`) : void 0;
}
}
static fixRef(aname, bname) {
return this._mod[aname][`set${bname}`](this._mod[bname]);
}
static _setEnvTags() {
var avlc, ref, uaHas, ualc;
//---------
[avlc, ualc, this.platTag] = navigator != null ? [navigator.appVersion.toLowerCase(), navigator.userAgent.toLowerCase(), navigator.platform] : ["node", "node", "node"];
uaHas = function(str) {
return (ualc.indexOf(`${str}/`)) !== -1;
};
// OPR can be with Chrome
// Chrome can be with Safari
// iOS version of Opera has no browser except Mobile
this.browTag = uaHas("opr") ? "Opera" : (uaHas("edge")) || (uaHas("edgios")) ? "Edge" : (uaHas("firefox")) || (uaHas("fxios")) ? "Firefox" : (uaHas("chrome")) || (uaHas("crios")) ? "Chrome" : uaHas("safari") ? "Safari" : uaHas("trident") ? "IE" : uaHas("mobile") ? "Opera" : `Unknown browser \"${ualc}\"`;
// Seems javaEnabled is unreliable on IE and Edge
// Testing mime types works generally but not on IE
// IE and Edge always report javaEnabled so fail safe
if (this.browTag === "IE") {
// Was: @hasJava = do navigator?.javaEnabled
return this.hasJava = navigator != null ? navigator.javaEnabled() : void 0;
} else {
return this.hasJava = (navigator != null ? (ref = navigator.mimeTypes) != null ? ref['application/x-java-applet'] : void 0 : void 0) != null;
}
}
};
// Static
CWAEnv._mod = {};
CWAEnv._lggr = null;
CWAEnv.platTag = null;
CWAEnv.browTag = null;
CWAEnv.hasJava = false;
CWAEnv._setEnvTags();
return CWAEnv;
}).call(this);
// CWASA will report settings from environment
// Export
this.getCWAEnv = function() {
return CWAEnv;
};
// Make methods available in the normal way as well
CWAEnv.add(CWAEnv, "CWAEnv");
// (End CWAEnv.coffee)
}).call(this);
// -------- Logger.js --------
// Generated by CoffeeScript 2.5.1
(function() {
var Logger, console, cwaenv;
cwaenv = this.getCWAEnv();
console = this.console;
Logger = (function() {
var base;
class Logger {
// Class Statics
static _nullLogger() {}
static _baseLogger(lev) {
return console[lev].bind(console);
}
static _tagLogger(lev, nom, tag, force) {
var lfn, lgr, tagstr;
lgr = force === "stderr" ? this.OrigWarnLogger : this._defaultLogger[lev].logger;
while (nom.length < 6) {
nom += " ";
}
if (tag !== "") {
while (tag.length < 5) {
tag += " ";
}
nom += " " + tag;
}
tagstr = nom + ": ";
return lfn = (msg, ...args) => {
return lgr(`${((new Date()).toISOString()).substr(11, 12)} ${tagstr}${msg}`, ...args);
};
}
// List names of installed Loggers as string
static list() {
var i, ix, len, lgr, msg, ref;
msg = "";
ref = this._loggers;
for (ix = i = 0, len = ref.length; i < len; ix = ++i) {
lgr = ref[ix];
if (ix > 0) {
msg += ", ";
}
msg += lgr.modName;
}
return msg;
}
// Object Methods
_setLoggers(newMaxLog, force) {
var lgr, lgrObj, newMaxLogLev, ref, ref1, ref2, results;
newMaxLogLev = Logger._defaultLogger[newMaxLog].lev;
if (force === "noforce") {
newMaxLogLev = Math.min(newMaxLogLev, Logger._buildMaxLogLev);
}
this.maxLog = newMaxLog;
this.maxLogLev = newMaxLogLev;
this.force = force;
ref = Logger._defaultLogger;
results = [];
for (lgr in ref) {
lgrObj = ref[lgr];
if (lgrObj.lev > this.maxLogLev) {
if ((ref1 = Logger._modLogger) != null) {
if (typeof ref1.trace === "function") {
ref1.trace(`Ignoring ${lgr} (lev ${lgrObj.lev}) for ${this.modName}`);
}
}
results.push(this[lgr] = null);
} else {
if ((ref2 = Logger._modLogger) != null) {
if (typeof ref2.trace === "function") {
ref2.trace(`Setting ${lgr} (lev ${Logger._defaultLogger[lgr].lev}) for ${this.modName}`);
}
}
if (force === "stderr") {
// Tag all to stderr with class
results.push(this[lgr] = Logger._tagLogger(lgr, this.modName, lgr, force));
} else {
// Tag debug and trace with class
results.push(this[lgr] = Logger._tagLogger(lgr, this.modName, (lgrObj.lev > 500 ? lgr : ""), force));
}
}
}
return results;
}
// Constructor for Logger
constructor(modName = "anon", newMaxLog, force) {
var ref;
this.modName = modName;
this._setLoggers(newMaxLog, force);
// Note: Logger._modLogger will not be defined when this is first called by this module
if ((ref = Logger._modLogger) != null) {
if (typeof ref.trace === "function") {
ref.trace(`${this.modName} created: ${this.maxLog} (${this.maxLogLev}) ${this.force}`);
}
}
Logger._loggers.push(this);
}
// Find or create named Logger
// Uses Logger._defaultMaxLog if maxLog not set
static get(lgr = "anon", maxLog = "default", force = "default") {
var i, len, lg, ref, ref1, ref2, ref3, stat, theLogger;
theLogger = null;
ref = Logger._loggers;
for (i = 0, len = ref.length; i < len; i++) {
lg = ref[i];
if (lg.modName === lgr) {
if (theLogger == null) {
theLogger = lg;
}
}
}
stat = theLogger != null ? "Updated" : "Created";
if (theLogger != null) {
if (maxLog === "default") {
maxLog = theLogger.maxLog;
}
if (force === "default") {
force = theLogger.force;
}
if ((ref1 = Logger._modLogger) != null) {
if (typeof ref1.trace === "function") {
ref1.trace(`get: Updating ${theLogger.modName} Logger. MaxLog ${theLogger.maxLog} -> ${maxLog}`);
}
}
theLogger._setLoggers(maxLog, force);
} else {
if (maxLog === "default") {
maxLog = Logger._defaultMaxLog;
}
if (force === "default") {
force = "noforce";
}
if ((ref2 = Logger._modLogger) != null) {
if (typeof ref2.trace === "function") {
ref2.trace(`get: Create ${lgr} logger`);
}
}
theLogger = new Logger(lgr, maxLog, force);
}
if ((ref3 = Logger._modLogger) != null) {
if (typeof ref3.debug === "function") {
ref3.debug(`${theLogger.modName} ${stat}: ${theLogger.maxLog} (${theLogger.maxLogLev}) ${theLogger.force}`);
}
}
return theLogger;
}
static _listHooks() {
var base, base1, hk, i, j, len, len1, ref, rep, results, ty, typs;
typs = Object.keys(this._hooks);
if (typeof (base = this._hookLog).trace === "function") {
base.trace(`Listing hooks. Types ${typs}`);
}
results = [];
for (i = 0, len = typs.length; i < len; i++) {
ty = typs[i];
rep = `Hooks for ${ty} (${this._hooks[ty].length}):`;
ref = this._hooks[ty];
for (j = 0, len1 = ref.length; j < len1; j++) {
hk = ref[j];
rep += ` ${hk.typ}/${hk.av}`;
}
results.push(typeof (base1 = this._hookLog).trace === "function" ? base1.trace(rep) : void 0);
}
return results;
}
static addHook(typ, fun, av = "*") {
var base, base1, hook;
if ((base = Logger._hooks)[typ] == null) {
base[typ] = [];
}
hook = {
typ: typ,
fun: fun,
av: av
};
if (typeof (base1 = Logger._hookLog).trace === "function") {
base1.trace(`Adding ${hook.typ} hook [${hook.av}]`);
}
Logger._hooks[typ].push(hook);
return Logger._listHooks();
}
static callHook(typ, msg, av = "*") {
var base, base1, base2, doCall, evt, hk, i, len, ref, results;
if ((base = Logger._hooks)[typ] == null) {
base[typ] = [];
}
evt = {
typ: typ,
msg: msg,
av: av
};
if (typeof (base1 = Logger._hookLog).trace === "function") {
base1.trace(`Calling ${typ} hook for ${av} [${JSON.stringify(msg)}] (${Logger._hooks[typ].length} hooks)`);
}
ref = Logger._hooks[typ];
results = [];
for (i = 0, len = ref.length; i < len; i++) {
hk = ref[i];
doCall = av === "*" || hk.av === "*" || av === hk.av;
if (typeof (base2 = Logger._hookLog).trace === "function") {
base2.trace(`Try ${hk.typ} hook for ${hk.av}: ${doCall ? '' : 'No '}Match`);
}
if (doCall) {
results.push(hk.fun(evt));
} else {
results.push(void 0);
}
}
return results;
}
};
Logger.OrigErrorLogger = Logger._baseLogger("error");
Logger.OrigWarnLogger = Logger._baseLogger("warn");
Logger.OrigLogLogger = Logger._baseLogger("log");
Logger.OrigInfoLogger = Logger._baseLogger("info");
Logger._defaultLogger = {
error: {
lev: 200,
logger: Logger.OrigErrorLogger
},
warn: {
lev: 300,
logger: Logger.OrigWarnLogger
},
log: {
lev: 400,
logger: Logger.OrigLogLogger
},
info: {
lev: 500,
logger: Logger.OrigInfoLogger
},
debug: {
lev: 600,
logger: Logger.OrigInfoLogger
},
trace: {
lev: 700,
logger: Logger.OrigInfoLogger
}
};
// Absolute maximum and default set according to (last character of) version
Logger._buildVersion = "uva2021";
// Treat an unmapped parameter as a production release
[Logger._buildMaxLog, Logger._defaultMaxLog] = (function() {
switch (Logger._buildVersion.slice(-1)) {
case "t":
case "u":
case "v":
return ["trace", "debug"];
case "w":
case "x":
case "y":
return ["trace", "info"];
case "z":
return ["info", "info"];
default:
return ["log", "log"];
}
}).call(this);
Logger._buildMaxLogLev = Logger._defaultLogger[Logger._buildMaxLog].lev;
Logger._loggers = [];
// console.log "Logger testing with multiple arguments. First. %s. %s.", "Second", "Third"
// Override console logs to trap any remaining uses
console.error = function(msg, ...args) {
return Logger.OrigErrorLogger((((new Date()).toISOString()).substr(11, 12)) + " Error: " + msg, ...args);
};
console.warn = function(msg, ...args) {
return Logger.OrigWarnLogger((((new Date()).toISOString()).substr(11, 12)) + " Warn: " + msg, ...args);
};
console.log = function(msg, ...args) {
return Logger.OrigLogLogger((((new Date()).toISOString()).substr(11, 12)) + " Log: " + msg, ...args);
};
console.info = function(msg, ...args) {
return Logger.OrigInfoLogger((((new Date()).toISOString()).substr(11, 12)) + " Info: " + msg, ...args);
};
// Logger for the Logger module
Logger._modLogger = Logger.get("Logger"); // , "debug" # , "stderr"
// Hooks for status reporting
Logger._hookLog = Logger.get("Hooks");
Logger._hooks = {};
if (typeof (base = Logger._modLogger).info === "function") {
base.info(`Build Version ${Logger._buildVersion}. Build MaxLog ${Logger._buildMaxLog}. Build MaxLogLev ${Logger._buildMaxLogLev}. Default MaxLog ${Logger._defaultMaxLog}`);
}
return Logger;
}).call(this);
// Object Methods
// Export
cwaenv.add(Logger, "Logger");
// (End Logger.coffee)
}).call(this);
// -------- animgen.js --------
// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};
// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}
// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
if (Module.hasOwnProperty(key)) {
moduleOverrides[key] = Module[key];
}
}
Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];
// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
if (Module['ENVIRONMENT']) {
if (Module['ENVIRONMENT'] === 'WEB') {
ENVIRONMENT_IS_WEB = true;
} else if (Module['ENVIRONMENT'] === 'WORKER') {
ENVIRONMENT_IS_WORKER = true;
} else if (Module['ENVIRONMENT'] === 'NODE') {
ENVIRONMENT_IS_NODE = true;
} else if (Module['ENVIRONMENT'] === 'SHELL') {
ENVIRONMENT_IS_SHELL = true;
} else {
throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
}
} else {
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}
if (ENVIRONMENT_IS_NODE) {
// Expose functionality in the same simple way that the shells work
// Note that we pollute the global namespace here, otherwise we break in node
var nodeFS;
var nodePath;
Module['read'] = function shell_read(filename, binary) {
var ret;
ret = tryParseAsDataURI(filename);
if (!ret) {
if (!nodeFS) nodeFS = require('fs');
if (!nodePath) nodePath = require('path');
filename = nodePath['normalize'](filename);
ret = nodeFS['readFileSync'](filename);
}
return binary ? ret : ret.toString();
};
Module['readBinary'] = function readBinary(filename) {
var ret = Module['read'](filename, true);
if (!ret.buffer) {
ret = new Uint8Array(ret);
}
assert(ret.buffer);
return ret;
};
if (process['argv'].length > 1) {
Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
}
Module['arguments'] = process['argv'].slice(2);
if (typeof module !== 'undefined') {
module['exports'] = Module;
}
process['on']('uncaughtException', function(ex) {
// suppress ExitStatus exceptions from showing an error
if (!(ex instanceof ExitStatus)) {
throw ex;
}
});
// Currently node will swallow unhandled rejections, but this behavior is
// deprecated, and in the future it will exit with error status.
process['on']('unhandledRejection', function(reason, p) {
process['exit'](1);
});
Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
if (typeof read != 'undefined') {
Module['read'] = function shell_read(f) {
var data = tryParseAsDataURI(f);
if (data) {
return intArrayToString(data);
}
return read(f);
};
}
Module['readBinary'] = function readBinary(f) {
var data;
data = tryParseAsDataURI(f);
if (data) {
return data;
}
if (typeof readbuffer === 'function') {
return new Uint8Array(readbuffer(f));
}
data = read(f, 'binary');
assert(typeof data === 'object');
return data;
};
if (typeof scriptArgs != 'undefined') {
Module['arguments'] = scriptArgs;
} else if (typeof arguments != 'undefined') {
Module['arguments'] = arguments;
}
if (typeof quit === 'function') {
Module['quit'] = function(status, toThrow) {
quit(status);
}
}
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
Module['read'] = function shell_read(url) {
try {
var xhr = new XMLHttpRequest();
xhr.open('GET', url, false);
xhr.send(null);
return xhr.responseText;
} catch (err) {
var data = tryParseAsDataURI(url);
if (data) {
return intArrayToString(data);
}
throw err;
}
};
if (ENVIRONMENT_IS_WORKER) {
Module['readBinary'] = function readBinary(url) {
try {
var xhr = new XMLHttpRequest();
xhr.open('GET', url, false);
xhr.responseType = 'arraybuffer';
xhr.send(null);
return new Uint8Array(xhr.response);
} catch (err) {
var data = tryParseAsDataURI(url);
if (data) {
return data;
}
throw err;
}
};
}
Module['readAsync'] = function readAsync(url, onload, onerror) {
var xhr = new XMLHttpRequest();
xhr.open('GET', url, true);
xhr.responseType = 'arraybuffer';
xhr.onload = function xhr_onload() {
if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
onload(xhr.response);
return;
}
var data = tryParseAsDataURI(url);
if (data) {
onload(data.buffer);
return;
}
onerror();
};
xhr.onerror = onerror;
xhr.send(null);
};
if (typeof arguments != 'undefined') {
Module['arguments'] = arguments;
}
Module['setWindowTitle'] = function(title) { document.title = title };
}
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
Module['print'] = typeof console !== 'undefined' ? console.log : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn) || Module['print']);
// *** Environment setup code ***
// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];
// Merge back in the overrides
for (key in moduleOverrides) {
if (moduleOverrides.hasOwnProperty(key)) {
Module[key] = moduleOverrides[key];
}
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;
// {{PREAMBLE_ADDITIONS}}
var STACK_ALIGN = 16;
function staticAlloc(size) {
assert(!staticSealed);
var ret = STATICTOP;
STATICTOP = (STATICTOP + size + 15) & -16;
return ret;
}
function dynamicAlloc(size) {
assert(DYNAMICTOP_PTR);
var ret = HEAP32[DYNAMICTOP_PTR>>2];
var end = (ret + size + 15) & -16;
HEAP32[DYNAMICTOP_PTR>>2] = end;
if (end >= TOTAL_MEMORY) {
var success = enlargeMemory();
if (!success) {
HEAP32[DYNAMICTOP_PTR>>2] = ret;
return 0;
}
}
return ret;
}
function alignMemory(size, factor) {
if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
var ret = size = Math.ceil(size / factor) * factor;
return ret;
}
function getNativeTypeSize(type) {
switch (type) {
case 'i1': case 'i8': return 1;
case 'i16': return 2;
case 'i32': return 4;
case 'i64': return 8;
case 'float': return 4;
case 'double': return 8;
default: {
if (type[type.length-1] === '*') {
return 4; // A pointer
} else if (type[0] === 'i') {
var bits = parseInt(type.substr(1));
assert(bits % 8 === 0);
return bits / 8;
} else {
return 0;
}
}
}
}
function warnOnce(text) {
if (!warnOnce.shown) warnOnce.shown = {};
if (!warnOnce.shown[text]) {
warnOnce.shown[text] = 1;
Module.printErr(text);
}
}
var functionPointers = new Array(0);
function addFunction(func) {
for (var i = 0; i < functionPointers.length; i++) {
if (!functionPointers[i]) {
functionPointers[i] = func;
return 1 + i;
}
}
throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}
function removeFunction(index) {
functionPointers[index-1] = null;
}
var funcWrappers = {};
function getFuncWrapper(func, sig) {
if (!func) return; // on null pointer, return undefined
assert(sig);
if (!funcWrappers[sig]) {
funcWrappers[sig] = {};
}
var sigCache = funcWrappers[sig];
if (!sigCache[func]) {
// optimize away arguments usage in common cases
if (sig.length === 1) {
sigCache[func] = function dynCall_wrapper() {
return dynCall(sig, func);
};
} else if (sig.length === 2) {
sigCache[func] = function dynCall_wrapper(arg) {
return dynCall(sig, func, [arg]);
};
} else {
// general case
sigCache[func] = function dynCall_wrapper() {
return dynCall(sig, func, Array.prototype.slice.call(arguments));
};
}
}
return sigCache[func];
}
function makeBigInt(low, high, unsigned) {
return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}
function dynCall(sig, ptr, args) {
if (args && args.length) {
return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
} else {
return Module['dynCall_' + sig].call(null, ptr);
}
}
var Runtime = {
// FIXME backwards compatibility layer for ports. Support some Runtime.*
//       for now, fix it there, then remove it from here. That way we
//       can minimize any period of breakage.
dynCall: dynCall, // for SDL2 port
};
// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;
// === Preamble library stuff ===
// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html
//========================================
// Runtime essentials
//========================================
var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;
/** @type {function(*, string=)} */
function assert(condition, text) {
if (!condition) {
abort('Assertion failed: ' + text);
}
}
var globalScope = this;
// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
var func = Module['_' + ident]; // closure exported function
assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
return func;
}
var JSfuncs = {
// Helpers for cwrap -- it can't refer to Runtime directly because it might
// be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
// out what the minified function name is.
'stackSave': function() {
stackSave()
},
'stackRestore': function() {
stackRestore()
},
// type conversion from js to c
'arrayToC' : function(arr) {
var ret = stackAlloc(arr.length);
writeArrayToMemory(arr, ret);
return ret;
},
'stringToC' : function(str) {
var ret = 0;
if (str !== null && str !== undefined && str !== 0) { // null string
// at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
var len = (str.length << 2) + 1;
ret = stackAlloc(len);
stringToUTF8(str, ret, len);
}
return ret;
}
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};
// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
var func = getCFunc(ident);
var cArgs = [];
var stack = 0;
if (args) {
for (var i = 0; i < args.length; i++) {
var converter = toC[argTypes[i]];
if (converter) {
if (stack === 0) stack = stackSave();
cArgs[i] = converter(args[i]);
} else {
cArgs[i] = args[i];
}
}
}
var ret = func.apply(null, cArgs);
if (returnType === 'string') ret = Pointer_stringify(ret);
if (stack !== 0) {
stackRestore(stack);
}
return ret;
}
function cwrap (ident, returnType, argTypes) {
argTypes = argTypes || [];
var cfunc = getCFunc(ident);
// When the function takes numbers and returns a number, we can just return
// the original function
var numericArgs = argTypes.every(function(type){ return type === 'number'});
var numericRet = returnType !== 'string';
if (numericRet && numericArgs) {
return cfunc;
}
return function() {
return ccall(ident, returnType, argTypes, arguments);
}
}
/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
type = type || 'i8';
if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
switch(type) {
case 'i1': HEAP8[((ptr)>>0)]=value; break;
case 'i8': HEAP8[((ptr)>>0)]=value; break;
case 'i16': HEAP16[((ptr)>>1)]=value; break;
case 'i32': HEAP32[((ptr)>>2)]=value; break;
case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
case 'float': HEAPF32[((ptr)>>2)]=value; break;
case 'double': HEAPF64[((ptr)>>3)]=value; break;
default: abort('invalid type for setValue: ' + type);
}
}
/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
type = type || 'i8';
if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
switch(type) {
case 'i1': return HEAP8[((ptr)>>0)];
case 'i8': return HEAP8[((ptr)>>0)];
case 'i16': return HEAP16[((ptr)>>1)];
case 'i32': return HEAP32[((ptr)>>2)];
case 'i64': return HEAP32[((ptr)>>2)];
case 'float': return HEAPF32[((ptr)>>2)];
case 'double': return HEAPF64[((ptr)>>3)];
default: abort('invalid type for getValue: ' + type);
}
return null;
}
var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
var zeroinit, size;
if (typeof slab === 'number') {
zeroinit = true;
size = slab;
} else {
zeroinit = false;
size = slab.length;
}
var singleType = typeof types === 'string' ? types : null;
var ret;
if (allocator == ALLOC_NONE) {
ret = ptr;
} else {
ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
}
if (zeroinit) {
var stop;
ptr = ret;
assert((ret & 3) == 0);
stop = ret + (size & ~3);
for (; ptr < stop; ptr += 4) {
HEAP32[((ptr)>>2)]=0;
}
stop = ret + size;
while (ptr < stop) {
HEAP8[((ptr++)>>0)]=0;
}
return ret;
}
if (singleType === 'i8') {
if (slab.subarray || slab.slice) {
HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
} else {
HEAPU8.set(new Uint8Array(slab), ret);
}
return ret;
}
var i = 0, type, typeSize, previousType;
while (i < size) {
var curr = slab[i];
type = singleType || types[i];
if (type === 0) {
i++;
continue;
}
if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
setValue(ret+i, curr, type);
// no need to look up size unless type changes, so cache it
if (previousType !== type) {
typeSize = getNativeTypeSize(type);
previousType = type;
}
i += typeSize;
}
return ret;
}
// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
if (!staticSealed) return staticAlloc(size);
if (!runtimeInitialized) return dynamicAlloc(size);
return _malloc(size);
}
/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
if (length === 0 || !ptr) return '';
// TODO: use TextDecoder
// Find the length, and check for UTF while doing so
var hasUtf = 0;
var t;
var i = 0;
while (1) {
t = HEAPU8[(((ptr)+(i))>>0)];
hasUtf |= t;
if (t == 0 && !length) break;
i++;
if (length && i == length) break;
}
if (!length) length = i;
var ret = '';
if (hasUtf < 128) {
var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
var curr;
while (length > 0) {
curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
ret = ret ? ret + curr : curr;
ptr += MAX_CHUNK;
length -= MAX_CHUNK;
}
return ret;
}
return UTF8ToString(ptr);
}
// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function AsciiToString(ptr) {
var str = '';
while (1) {
var ch = HEAP8[((ptr++)>>0)];
if (!ch) return str;
str += String.fromCharCode(ch);
}
}
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.
function stringToAscii(str, outPtr) {
return writeAsciiToMemory(str, outPtr, false);
}
// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.
var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
var endPtr = idx;
// TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
// Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
while (u8Array[endPtr]) ++endPtr;
if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
} else {
var u0, u1, u2, u3, u4, u5;
var str = '';
while (1) {
// For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
u0 = u8Array[idx++];
if (!u0) return str;
if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
u1 = u8Array[idx++] & 63;
if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
u2 = u8Array[idx++] & 63;
if ((u0 & 0xF0) == 0xE0) {
u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
} else {
u3 = u8Array[idx++] & 63;
if ((u0 & 0xF8) == 0xF0) {
u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
} else {
u4 = u8Array[idx++] & 63;
if ((u0 & 0xFC) == 0xF8) {
u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
} else {
u5 = u8Array[idx++] & 63;
u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
}
}
}
if (u0 < 0x10000) {
str += String.fromCharCode(u0);
} else {
var ch = u0 - 0x10000;
str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
}
}
}
}
// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF8ToString(ptr) {
return UTF8ArrayToString(HEAPU8,ptr);
}
// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.
function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
return 0;
var startIdx = outIdx;
var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
for (var i = 0; i < str.length; ++i) {
// Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
// See http://unicode.org/faq/utf_bom.html#utf16-3
// For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
var u = str.charCodeAt(i); // possibly a lead surrogate
if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
if (u <= 0x7F) {
if (outIdx >= endIdx) break;
outU8Array[outIdx++] = u;
} else if (u <= 0x7FF) {
if (outIdx + 1 >= endIdx) break;
outU8Array[outIdx++] = 0xC0 | (u >> 6);
outU8Array[outIdx++] = 0x80 | (u & 63);
} else if (u <= 0xFFFF) {
if (outIdx + 2 >= endIdx) break;
outU8Array[outIdx++] = 0xE0 | (u >> 12);
outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
outU8Array[outIdx++] = 0x80 | (u & 63);
} else if (u <= 0x1FFFFF) {
if (outIdx + 3 >= endIdx) break;
outU8Array[outIdx++] = 0xF0 | (u >> 18);
outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
outU8Array[outIdx++] = 0x80 | (u & 63);
} else if (u <= 0x3FFFFFF) {
if (outIdx + 4 >= endIdx) break;
outU8Array[outIdx++] = 0xF8 | (u >> 24);
outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
outU8Array[outIdx++] = 0x80 | (u & 63);
} else {
if (outIdx + 5 >= endIdx) break;
outU8Array[outIdx++] = 0xFC | (u >> 30);
outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
outU8Array[outIdx++] = 0x80 | (u & 63);
}
}
// Null-terminate the pointer to the buffer.
outU8Array[outIdx] = 0;
return outIdx - startIdx;
}
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.
function stringToUTF8(str, outPtr, maxBytesToWrite) {
return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
var len = 0;
for (var i = 0; i < str.length; ++i) {
// Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
// See http://unicode.org/faq/utf_bom.html#utf16-3
var u = str.charCodeAt(i); // possibly a lead surrogate
if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
if (u <= 0x7F) {
++len;
} else if (u <= 0x7FF) {
len += 2;
} else if (u <= 0xFFFF) {
len += 3;
} else if (u <= 0x1FFFFF) {
len += 4;
} else if (u <= 0x3FFFFFF) {
len += 5;
} else {
len += 6;
}
}
return len;
}
// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
var endPtr = ptr;
// TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
// Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
var idx = endPtr >> 1;
while (HEAP16[idx]) ++idx;
endPtr = idx << 1;
if (endPtr - ptr > 32 && UTF16Decoder) {
return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
} else {
var i = 0;
var str = '';
while (1) {
var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
if (codeUnit == 0) return str;
++i;
// fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
str += String.fromCharCode(codeUnit);
}
}
}
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.
function stringToUTF16(str, outPtr, maxBytesToWrite) {
// Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
if (maxBytesToWrite === undefined) {
maxBytesToWrite = 0x7FFFFFFF;
}
if (maxBytesToWrite < 2) return 0;
maxBytesToWrite -= 2; // Null terminator.
var startPtr = outPtr;
var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
for (var i = 0; i < numCharsToWrite; ++i) {
// charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
HEAP16[((outPtr)>>1)]=codeUnit;
outPtr += 2;
}
// Null-terminate the pointer to the HEAP.
HEAP16[((outPtr)>>1)]=0;
return outPtr - startPtr;
}
// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF16(str) {
return str.length*2;
}
function UTF32ToString(ptr) {
var i = 0;
var str = '';
while (1) {
var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
if (utf32 == 0)
return str;
++i;
// Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
// See http://unicode.org/faq/utf_bom.html#utf16-3
if (utf32 >= 0x10000) {
var ch = utf32 - 0x10000;
str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
} else {
str += String.fromCharCode(utf32);
}
}
}
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.
function stringToUTF32(str, outPtr, maxBytesToWrite) {
// Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
if (maxBytesToWrite === undefined) {
maxBytesToWrite = 0x7FFFFFFF;
}
if (maxBytesToWrite < 4) return 0;
var startPtr = outPtr;
var endPtr = startPtr + maxBytesToWrite - 4;
for (var i = 0; i < str.length; ++i) {
// Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
// See http://unicode.org/faq/utf_bom.html#utf16-3
var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
var trailSurrogate = str.charCodeAt(++i);
codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
}
HEAP32[((outPtr)>>2)]=codeUnit;
outPtr += 4;
if (outPtr + 4 > endPtr) break;
}
// Null-terminate the pointer to the HEAP.
HEAP32[((outPtr)>>2)]=0;
return outPtr - startPtr;
}
// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF32(str) {
var len = 0;
for (var i = 0; i < str.length; ++i) {
// Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
// See http://unicode.org/faq/utf_bom.html#utf16-3
var codeUnit = str.charCodeAt(i);
if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
len += 4;
}
return len;
}
// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
var size = lengthBytesUTF8(str) + 1;
var ret = _malloc(size);
if (ret) stringToUTF8Array(str, HEAP8, ret, size);
return ret;
}
// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
var size = lengthBytesUTF8(str) + 1;
var ret = stackAlloc(size);
stringToUTF8Array(str, HEAP8, ret, size);
return ret;
}
function demangle(func) {
return func;
}
function demangleAll(text) {
var regex =
/__Z[\w\d_]+/g;
return text.replace(regex,
function(x) {
var y = demangle(x);
return x === y ? x : (x + ' [' + y + ']');
});
}
function jsStackTrace() {
var err = new Error();
if (!err.stack) {
// IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
// so try that as a special-case.
try {
throw new Error(0);
} catch(e) {
err = e;
}
if (!err.stack) {
return '(no stack trace available)';
}
}
return err.stack.toString();
}
function stackTrace() {
var js = jsStackTrace();
if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
return demangleAll(js);
}
// Memory management
var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;
function alignUp(x, multiple) {
if (x % multiple > 0) {
x += multiple - (x % multiple);
}
return x;
}
var HEAP,
/** @type {ArrayBuffer} */
buffer,
/** @type {Int8Array} */
HEAP8,
/** @type {Uint8Array} */
HEAPU8,
/** @type {Int16Array} */
HEAP16,
/** @type {Uint16Array} */
HEAPU16,
/** @type {Int32Array} */
HEAP32,
/** @type {Uint32Array} */
HEAPU32,
/** @type {Float32Array} */
HEAPF32,
/** @type {Float64Array} */
HEAPF64;
function updateGlobalBuffer(buf) {
Module['buffer'] = buffer = buf;
}
function updateGlobalBufferViews() {
Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}
var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk
STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
staticSealed = false;
function abortOnCannotGrowMemory() {
abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}
if (!Module['reallocBuffer']) Module['reallocBuffer'] = function(size) {
var ret;
try {
if (ArrayBuffer.transfer) {
ret = ArrayBuffer.transfer(buffer, size);
} else {
var oldHEAP8 = HEAP8;
ret = new ArrayBuffer(size);
var temp = new Int8Array(ret);
temp.set(oldHEAP8);
}
} catch(e) {
return false;
}
var success = _emscripten_replace_memory(ret);
if (!success) return false;
return ret;
};
function enlargeMemory() {
// TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.
var PAGE_MULTIPLE = Module["usingWasm"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.
var LIMIT = 2147483648 - PAGE_MULTIPLE; // We can do one page short of 2GB as theoretical maximum.
if (HEAP32[DYNAMICTOP_PTR>>2] > LIMIT) {
return false;
}
var OLD_TOTAL_MEMORY = TOTAL_MEMORY;
TOTAL_MEMORY = Math.max(TOTAL_MEMORY, MIN_TOTAL_MEMORY); // So the loop below will not be infinite, and minimum asm.js memory size is 16MB.
while (TOTAL_MEMORY < HEAP32[DYNAMICTOP_PTR>>2]) { // Keep incrementing the heap size as long as it's less than what is requested.
if (TOTAL_MEMORY <= 536870912) {
TOTAL_MEMORY = alignUp(2 * TOTAL_MEMORY, PAGE_MULTIPLE); // Simple heuristic: double until 1GB...
} else {
TOTAL_MEMORY = Math.min(alignUp((3 * TOTAL_MEMORY + 2147483648) / 4, PAGE_MULTIPLE), LIMIT); // ..., but after that, add smaller increments towards 2GB, which we cannot reach
}
}
var replacement = Module['reallocBuffer'](TOTAL_MEMORY);
if (!replacement || replacement.byteLength != TOTAL_MEMORY) {
// restore the state to before this call, we failed
TOTAL_MEMORY = OLD_TOTAL_MEMORY;
return false;
}
// everything worked
updateGlobalBuffer(replacement);
updateGlobalBufferViews();
return true;
}
var byteLength;
try {
byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
byteLength(new ArrayBuffer(4)); // can fail on older ie
} catch(e) { // can fail on older node/v8
byteLength = function(buffer) { return buffer.byteLength; };
}
var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');
// Initialize the runtime's memory
// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
buffer = Module['buffer'];
} else {
// Use a WebAssembly memory where available
{
buffer = new ArrayBuffer(TOTAL_MEMORY);
}
Module['buffer'] = buffer;
}
updateGlobalBufferViews();
function getTotalMemory() {
return TOTAL_MEMORY;
}
// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
function callRuntimeCallbacks(callbacks) {
while(callbacks.length > 0) {
var callback = callbacks.shift();
if (typeof callback == 'function') {
callback();
continue;
}
var func = callback.func;
if (typeof func === 'number') {
if (callback.arg === undefined) {
Module['dynCall_v'](func);
} else {
Module['dynCall_vi'](func, callback.arg);
}
} else {
func(callback.arg === undefined ? null : callback.arg);
}
}
}
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited
var runtimeInitialized = false;
var runtimeExited = false;
function preRun() {
// compatibility - merge in anything from Module['preRun'] at this time
if (Module['preRun']) {
if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
while (Module['preRun'].length) {
addOnPreRun(Module['preRun'].shift());
}
}
callRuntimeCallbacks(__ATPRERUN__);
}
function ensureInitRuntime() {
if (runtimeInitialized) return;
runtimeInitialized = true;
callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
callRuntimeCallbacks(__ATEXIT__);
runtimeExited = true;
}
function postRun() {
// compatibility - merge in anything from Module['postRun'] at this time
if (Module['postRun']) {
if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
while (Module['postRun'].length) {
addOnPostRun(Module['postRun'].shift());
}
}
callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
__ATPRERUN__.unshift(cb);
}
function addOnInit(cb) {
__ATINIT__.unshift(cb);
}
function addOnPreMain(cb) {
__ATMAIN__.unshift(cb);
}
function addOnExit(cb) {
__ATEXIT__.unshift(cb);
}
function addOnPostRun(cb) {
__ATPOSTRUN__.unshift(cb);
}
// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');
var /** @type {number} */ lastChar, /** @type {number} */ end;
if (dontAddNull) {
// stringToUTF8Array always appends null. If we don't want to do that, remember the
// character that existed at the location where the null will be placed, and restore
// that after the write (below).
end = buffer + lengthBytesUTF8(string);
lastChar = HEAP8[end];
}
stringToUTF8(string, buffer, Infinity);
if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
function writeArrayToMemory(array, buffer) {
HEAP8.set(array, buffer);
}
function writeAsciiToMemory(str, buffer, dontAddNull) {
for (var i = 0; i < str.length; ++i) {
HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
}
// Null-terminate the pointer to the HEAP.
if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
function unSign(value, bits, ignore) {
if (value >= 0) {
return value;
}
return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
: Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
if (value <= 0) {
return value;
}
var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
: Math.pow(2, bits-1);
if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
// but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
// TODO: In i64 mode 1, resign the two parts separately and safely
value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
}
return value;
}
var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
function getUniqueRunDependency(id) {
return id;
}
function addRunDependency(id) {
runDependencies++;
if (Module['monitorRunDependencies']) {
Module['monitorRunDependencies'](runDependencies);
}
}
function removeRunDependency(id) {
runDependencies--;
if (Module['monitorRunDependencies']) {
Module['monitorRunDependencies'](runDependencies);
}
if (runDependencies == 0) {
if (runDependencyWatcher !== null) {
clearInterval(runDependencyWatcher);
runDependencyWatcher = null;
}
if (dependenciesFulfilled) {
var callback = dependenciesFulfilled;
dependenciesFulfilled = null;
callback(); // can add another dependenciesFulfilled
}
}
}
Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data
var memoryInitializer = null;
// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';
// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
return String.prototype.startsWith ?
filename.startsWith(dataURIPrefix) :
filename.indexOf(dataURIPrefix) === 0;
}
// === Body ===
var ASM_CONSTS = [function($0) { jName = Module.Pointer_stringify($0); console.log('buildFromXMLCell: filename '+jName+'. Found no avatarStaticData'); },
function($0) { jName = Module.Pointer_stringify($0); console.log('buildFromXMLCell: filename '+jName+'. Found no avatar'); },
function($0) { jName = Module.Pointer_stringify($0); console.log('buildFromXMLCell: filename '+jName+'. Found no skeleton'); },
function($0) { jName = Module.Pointer_stringify($0); console.log('buildFromXMLCell: filename '+jName+'. Found no joint'); },
function($0, $1, $2) { Module.CB_SeqStart($0, $1, $2); },
function($0, $1, $2, $3) { jGloss = Module.Pointer_stringify($1); Module.CB_SignStart($0, jGloss, $2, $3); },
function($0) { Module.Util_Debug('Test Debug in AGIPostMortem'); Module.CB_SeqEnd($0); },
function($0, $1, $2, $3, $4) { Module.CB_FrameStart($0,$1,$2,$3,$4); },
function($0, $1, $2) { fourCC = Module.Pointer_stringify($1); newMorph = {id4cc:fourCC}; newMorph.amount = $2; Module.CB_Morph($0, newMorph); },
function($0, $1, $2, $3, $4, $5, $6, $7, $8) { fourCC = Module.Pointer_stringify($1); transArray = [$6]; transArray.push($7); transArray.push($8); newBone = {id4cc:fourCC}; newBone.trans = transArray; rotArray = [$2]; rotArray.push($3); rotArray.push($4); rotArray.push($5); newBone.rot = rotArray; Module.CB_Bone($0, newBone); },
function($0) { jName = Module.Pointer_stringify($0); console.log('animgen_lite_initialise: avatar '+jName+'. Caught AnimgenError'); },
function($0) { jName = Module.Pointer_stringify($0); console.log('animgen_lite_initialise: avatar '+jName+'. Caught GeneralError'); },
function($0) { jName = Module.Pointer_stringify($0); console.log('animgen_lite_initialise: avatar '+jName+'. Caught unknown exception'); }];
function _emscripten_asm_const_iiiidd(code, a0, a1, a2, a3, a4) {
return ASM_CONSTS[code](a0, a1, a2, a3, a4);
}
function _emscripten_asm_const_iiii(code, a0, a1, a2) {
return ASM_CONSTS[code](a0, a1, a2);
}
function _emscripten_asm_const_ii(code, a0) {
return ASM_CONSTS[code](a0);
}
function _emscripten_asm_const_iiid(code, a0, a1, a2) {
return ASM_CONSTS[code](a0, a1, a2);
}
function _emscripten_asm_const_iiiddddddd(code, a0, a1, a2, a3, a4, a5, a6, a7, a8) {
return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5, a6, a7, a8);
}
function _emscripten_asm_const_iiiii(code, a0, a1, a2, a3) {
return ASM_CONSTS[code](a0, a1, a2, a3);
}
STATIC_BASE = GLOBAL_BASE;
STATICTOP = STATIC_BASE + 73360;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_Humanoid_cpp() } }, { func: function() { __GLOBAL__sub_I_Vector_cpp() } }, { func: function() { __GLOBAL__sub_I_SkelTopology_cpp() } }, { func: function() { __GLOBAL__sub_I_Tables_cpp() } }, { func: function() { __GLOBAL__sub_I_SiGML_cpp() } });
memoryInitializer = "data:application/octet-stream;base64,";
/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
HEAP8[tempDoublePtr] = HEAP8[ptr];
HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
HEAP8[tempDoublePtr] = HEAP8[ptr];
HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}
// {{PRE_LIBRARY}}
function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
return !!__ZSt18uncaught_exceptionv.uncaught_exception;
}
function ___assert_fail(condition, filename, line, func) {
abort('Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function']);
}
function ___cxa_allocate_exception(size) {
return _malloc(size);
}
var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
for (var ptr in EXCEPTIONS.infos) {
var info = EXCEPTIONS.infos[ptr];
if (info.adjusted === adjusted) {
return ptr;
}
}
return adjusted;
},addRef:function (ptr) {
if (!ptr) return;
var info = EXCEPTIONS.infos[ptr];
info.refcount++;
},decRef:function (ptr) {
if (!ptr) return;
var info = EXCEPTIONS.infos[ptr];
assert(info.refcount > 0);
info.refcount--;
// A rethrown exception can reach refcount 0; it must not be discarded
// Its next handler will clear the rethrown flag and addRef it, prior to
// final decRef and destruction here
if (info.refcount === 0 && !info.rethrown) {
if (info.destructor) {
Module['dynCall_vi'](info.destructor, ptr);
}
delete EXCEPTIONS.infos[ptr];
___cxa_free_exception(ptr);
}
},clearRef:function (ptr) {
if (!ptr) return;
var info = EXCEPTIONS.infos[ptr];
info.refcount = 0;
}};function ___cxa_begin_catch(ptr) {
var info = EXCEPTIONS.infos[ptr];
if (info && !info.caught) {
info.caught = true;
__ZSt18uncaught_exceptionv.uncaught_exception--;
}
if (info) info.rethrown = false;
EXCEPTIONS.caught.push(ptr);
EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
return ptr;
}
function ___cxa_free_exception(ptr) {
try {
return _free(ptr);
} catch(e) { // XXX FIXME
}
}function ___cxa_end_catch() {
// Clear state flag.
Module['setThrew'](0);
// Call destructor if one is registered then clear it.
var ptr = EXCEPTIONS.caught.pop();
if (ptr) {
EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
EXCEPTIONS.last = 0; // XXX in decRef?
}
}
function ___cxa_find_matching_catch_2() {
return ___cxa_find_matching_catch.apply(null, arguments);
}
function ___cxa_find_matching_catch_3() {
return ___cxa_find_matching_catch.apply(null, arguments);
}
function ___cxa_find_matching_catch_5() {
return ___cxa_find_matching_catch.apply(null, arguments);
}
function ___cxa_pure_virtual() {
ABORT = true;
throw 'Pure virtual function called!';
}
function ___cxa_rethrow() {
var ptr = EXCEPTIONS.caught.pop();
if (!EXCEPTIONS.infos[ptr].rethrown) {
// Only pop if the corresponding push was through rethrow_primary_exception
EXCEPTIONS.caught.push(ptr)
EXCEPTIONS.infos[ptr].rethrown = true;
}
EXCEPTIONS.last = ptr;
throw ptr;
}
function ___resumeException(ptr) {
if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
throw ptr;
}function ___cxa_find_matching_catch() {
var thrown = EXCEPTIONS.last;
if (!thrown) {
// just pass through the null ptr
return ((setTempRet0(0),0)|0);
}
var info = EXCEPTIONS.infos[thrown];
var throwntype = info.type;
if (!throwntype) {
// just pass through the thrown ptr
return ((setTempRet0(0),thrown)|0);
}
var typeArray = Array.prototype.slice.call(arguments);
var pointer = Module['___cxa_is_pointer_type'](throwntype);
// can_catch receives a **, add indirection
if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
thrown = ___cxa_find_matching_catch.buffer;
// The different catch blocks are denoted by different types.
// Due to inheritance, those types may not precisely match the
// type of the thrown object. Find one which matches, and
// return the type of the catch block which should be called.
for (var i = 0; i < typeArray.length; i++) {
if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
thrown = HEAP32[((thrown)>>2)]; // undo indirection
info.adjusted = thrown;
return ((setTempRet0(typeArray[i]),thrown)|0);
}
}
// Shouldn't happen unless we have bogus data in typeArray
// or encounter a type for which emscripten doesn't have suitable
// typeinfo defined. Best-efforts match just in case.
thrown = HEAP32[((thrown)>>2)]; // undo indirection
return ((setTempRet0(throwntype),thrown)|0);
}function ___cxa_throw(ptr, type, destructor) {
EXCEPTIONS.infos[ptr] = {
ptr: ptr,
adjusted: ptr,
type: type,
destructor: destructor,
refcount: 0,
caught: false,
rethrown: false
};
EXCEPTIONS.last = ptr;
if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
__ZSt18uncaught_exceptionv.uncaught_exception = 1;
} else {
__ZSt18uncaught_exceptionv.uncaught_exception++;
}
throw ptr;
}
function ___gxx_personality_v0() {
}
function ___lock() {}
var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
function ___setErrNo(value) {
if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
return value;
}
var PATH={splitPath:function (filename) {
var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
return splitPathRe.exec(filename).slice(1);
},normalizeArray:function (parts, allowAboveRoot) {
// if the path tries to go above the root, `up` ends up > 0
var up = 0;
for (var i = parts.length - 1; i >= 0; i--) {
var last = parts[i];
if (last === '.') {
parts.splice(i, 1);
} else if (last === '..') {
parts.splice(i, 1);
up++;
} else if (up) {
parts.splice(i, 1);
up--;
}
}
// if the path is allowed to go above the root, restore leading ..s
if (allowAboveRoot) {
for (; up; up--) {
parts.unshift('..');
}
}
return parts;
},normalize:function (path) {
var isAbsolute = path.charAt(0) === '/',
trailingSlash = path.substr(-1) === '/';
// Normalize the path
path = PATH.normalizeArray(path.split('/').filter(function(p) {
return !!p;
}), !isAbsolute).join('/');
if (!path && !isAbsolute) {
path = '.';
}
if (path && trailingSlash) {
path += '/';
}
return (isAbsolute ? '/' : '') + path;
},dirname:function (path) {
var result = PATH.splitPath(path),
root = result[0],
dir = result[1];
if (!root && !dir) {
// No dirname whatsoever
return '.';
}
if (dir) {
// It has a dirname, strip trailing slash
dir = dir.substr(0, dir.length - 1);
}
return root + dir;
},basename:function (path) {
// EMSCRIPTEN return '/'' for '/', not an empty string
if (path === '/') return '/';
var lastSlash = path.lastIndexOf('/');
if (lastSlash === -1) return path;
return path.substr(lastSlash+1);
},extname:function (path) {
return PATH.splitPath(path)[3];
},join:function () {
var paths = Array.prototype.slice.call(arguments, 0);
return PATH.normalize(paths.join('/'));
},join2:function (l, r) {
return PATH.normalize(l + '/' + r);
},resolve:function () {
var resolvedPath = '',
resolvedAbsolute = false;
for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
var path = (i >= 0) ? arguments[i] : FS.cwd();
// Skip empty and invalid entries
if (typeof path !== 'string') {
throw new TypeError('Arguments to path.resolve must be strings');
} else if (!path) {
return ''; // an invalid portion invalidates the whole thing
}
resolvedPath = path + '/' + resolvedPath;
resolvedAbsolute = path.charAt(0) === '/';
}
// At this point the path should be resolved to a full absolute path, but
// handle relative paths to be safe (might happen when process.cwd() fails)
resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
return !!p;
}), !resolvedAbsolute).join('/');
return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
},relative:function (from, to) {
from = PATH.resolve(from).substr(1);
to = PATH.resolve(to).substr(1);
function trim(arr) {
var start = 0;
for (; start < arr.length; start++) {
if (arr[start] !== '') break;
}
var end = arr.length - 1;
for (; end >= 0; end--) {
if (arr[end] !== '') break;
}
if (start > end) return [];
return arr.slice(start, end - start + 1);
}
var fromParts = trim(from.split('/'));
var toParts = trim(to.split('/'));
var length = Math.min(fromParts.length, toParts.length);
var samePartsLength = length;
for (var i = 0; i < length; i++) {
if (fromParts[i] !== toParts[i]) {
samePartsLength = i;
break;
}
}
var outputParts = [];
for (var i = samePartsLength; i < fromParts.length; i++) {
outputParts.push('..');
}
outputParts = outputParts.concat(toParts.slice(samePartsLength));
return outputParts.join('/');
}};
var TTY={ttys:[],init:function () {
// https://github.com/kripken/emscripten/pull/1555
// if (ENVIRONMENT_IS_NODE) {
//   // currently, FS.init does not distinguish if process.stdin is a file or TTY
//   // device, it always assumes it's a TTY device. because of this, we're forcing
//   // process.stdin to UTF8 encoding to at least make stdin reading compatible
//   // with text files until FS.init can be refactored.
//   process['stdin']['setEncoding']('utf8');
// }
},shutdown:function () {
// https://github.com/kripken/emscripten/pull/1555
// if (ENVIRONMENT_IS_NODE) {
//   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
//   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
//   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
//   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
//   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
//   process['stdin']['pause']();
// }
},register:function (dev, ops) {
TTY.ttys[dev] = { input: [], output: [], ops: ops };
FS.registerDevice(dev, TTY.stream_ops);
},stream_ops:{open:function (stream) {
var tty = TTY.ttys[stream.node.rdev];
if (!tty) {
throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
}
stream.tty = tty;
stream.seekable = false;
},close:function (stream) {
// flush any pending line data
stream.tty.ops.flush(stream.tty);
},flush:function (stream) {
stream.tty.ops.flush(stream.tty);
},read:function (stream, buffer, offset, length, pos /* ignored */) {
if (!stream.tty || !stream.tty.ops.get_char) {
throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
}
var bytesRead = 0;
for (var i = 0; i < length; i++) {
var result;
try {
result = stream.tty.ops.get_char(stream.tty);
} catch (e) {
throw new FS.ErrnoError(ERRNO_CODES.EIO);
}
if (result === undefined && bytesRead === 0) {
throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
}
if (result === null || result === undefined) break;
bytesRead++;
buffer[offset+i] = result;
}
if (bytesRead) {
stream.node.timestamp = Date.now();
}
return bytesRead;
},write:function (stream, buffer, offset, length, pos) {
if (!stream.tty || !stream.tty.ops.put_char) {
throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
}
for (var i = 0; i < length; i++) {
try {
stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
} catch (e) {
throw new FS.ErrnoError(ERRNO_CODES.EIO);
}
}
if (length) {
stream.node.timestamp = Date.now();
}
return i;
}},default_tty_ops:{get_char:function (tty) {
if (!tty.input.length) {
var result = null;
if (ENVIRONMENT_IS_NODE) {
// we will read data by chunks of BUFSIZE
var BUFSIZE = 256;
var buf = new Buffer(BUFSIZE);
var bytesRead = 0;
var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
var fd = process.stdin.fd;
if (isPosixPlatform) {
// Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
var usingDevice = false;
try {
fd = fs.openSync('/dev/stdin', 'r');
usingDevice = true;
} catch (e) {}
}
try {
bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
} catch(e) {
// Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
// reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
else throw e;
}
if (usingDevice) { fs.closeSync(fd); }
if (bytesRead > 0) {
result = buf.slice(0, bytesRead).toString('utf-8');
} else {
result = null;
}
} else if (typeof window != 'undefined' &&
typeof window.prompt == 'function') {
// Browser.
result = window.prompt('Input: ');  // returns null on cancel
if (result !== null) {
result += '\n';
}
} else if (typeof readline == 'function') {
// Command line.
result = readline();
if (result !== null) {
result += '\n';
}
}
if (!result) {
return null;
}
tty.input = intArrayFromString(result, true);
}
return tty.input.shift();
},put_char:function (tty, val) {
if (val === null || val === 10) {
Module['print'](UTF8ArrayToString(tty.output, 0));
tty.output = [];
} else {
if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
}
},flush:function (tty) {
if (tty.output && tty.output.length > 0) {
Module['print'](UTF8ArrayToString(tty.output, 0));
tty.output = [];
}
}},default_tty1_ops:{put_char:function (tty, val) {
if (val === null || val === 10) {
Module['printErr'](UTF8ArrayToString(tty.output, 0));
tty.output = [];
} else {
if (val != 0) tty.output.push(val);
}
},flush:function (tty) {
if (tty.output && tty.output.length > 0) {
Module['printErr'](UTF8ArrayToString(tty.output, 0));
tty.output = [];
}
}}};
var MEMFS={ops_table:null,mount:function (mount) {
return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
},createNode:function (parent, name, mode, dev) {
if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
// no supported
throw new FS.ErrnoError(ERRNO_CODES.EPERM);
}
if (!MEMFS.ops_table) {
MEMFS.ops_table = {
dir: {
node: {
getattr: MEMFS.node_ops.getattr,
setattr: MEMFS.node_ops.setattr,
lookup: MEMFS.node_ops.lookup,
mknod: MEMFS.node_ops.mknod,
rename: MEMFS.node_ops.rename,
unlink: MEMFS.node_ops.unlink,
rmdir: MEMFS.node_ops.rmdir,
readdir: MEMFS.node_ops.readdir,
symlink: MEMFS.node_ops.symlink
},
stream: {
llseek: MEMFS.stream_ops.llseek
}
},
file: {
node: {
getattr: MEMFS.node_ops.getattr,
setattr: MEMFS.node_ops.setattr
},
stream: {
llseek: MEMFS.stream_ops.llseek,
read: MEMFS.stream_ops.read,
write: MEMFS.stream_ops.write,
allocate: MEMFS.stream_ops.allocate,
mmap: MEMFS.stream_ops.mmap,
msync: MEMFS.stream_ops.msync
}
},
link: {
node: {
getattr: MEMFS.node_ops.getattr,
setattr: MEMFS.node_ops.setattr,
readlink: MEMFS.node_ops.readlink
},
stream: {}
},
chrdev: {
node: {
getattr: MEMFS.node_ops.getattr,
setattr: MEMFS.node_ops.setattr
},
stream: FS.chrdev_stream_ops
}
};
}
var node = FS.createNode(parent, name, mode, dev);
if (FS.isDir(node.mode)) {
node.node_ops = MEMFS.ops_table.dir.node;
node.stream_ops = MEMFS.ops_table.dir.stream;
node.contents = {};
} else if (FS.isFile(node.mode)) {
node.node_ops = MEMFS.ops_table.file.node;
node.stream_ops = MEMFS.ops_table.file.stream;
node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
// When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
// for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
// penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
node.contents = null; 
} else if (FS.isLink(node.mode)) {
node.node_ops = MEMFS.ops_table.link.node;
node.stream_ops = MEMFS.ops_table.link.stream;
} else if (FS.isChrdev(node.mode)) {
node.node_ops = MEMFS.ops_table.chrdev.node;
node.stream_ops = MEMFS.ops_table.chrdev.stream;
}
node.timestamp = Date.now();
// add the new node to the parent
if (parent) {
parent.contents[name] = node;
}
return node;
},getFileDataAsRegularArray:function (node) {
if (node.contents && node.contents.subarray) {
var arr = [];
for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
return arr; // Returns a copy of the original data.
}
return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
},getFileDataAsTypedArray:function (node) {
if (!node.contents) return new Uint8Array;
if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
return new Uint8Array(node.contents);
},expandFileStorage:function (node, newCapacity) {
// If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
// instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
// increase the size.
if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
node.contents = MEMFS.getFileDataAsRegularArray(node);
node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
}
if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
var prevCapacity = node.contents ? node.contents.length : 0;
if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
// Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
// For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
// avoid overshooting the allocation cap by a very large margin.
var CAPACITY_DOUBLING_MAX = 1024 * 1024;
newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
var oldContents = node.contents;
node.contents = new Uint8Array(newCapacity); // Allocate new storage.
if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
return;
}
// Not using a typed array to back the file storage. Use a standard JS array instead.
if (!node.contents && newCapacity > 0) node.contents = [];
while (node.contents.length < newCapacity) node.contents.push(0);
},resizeFileStorage:function (node, newSize) {
if (node.usedBytes == newSize) return;
if (newSize == 0) {
node.contents = null; // Fully decommit when requesting a resize to zero.
node.usedBytes = 0;
return;
}
if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
var oldContents = node.contents;
node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
if (oldContents) {
node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
}
node.usedBytes = newSize;
return;
}
// Backing with a JS array.
if (!node.contents) node.contents = [];
if (node.contents.length > newSize) node.contents.length = newSize;
else while (node.contents.length < newSize) node.contents.push(0);
node.usedBytes = newSize;
},node_ops:{getattr:function (node) {
var attr = {};
// device numbers reuse inode numbers.
attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
attr.ino = node.id;
attr.mode = node.mode;
attr.nlink = 1;
attr.uid = 0;
attr.gid = 0;
attr.rdev = node.rdev;
if (FS.isDir(node.mode)) {
attr.size = 4096;
} else if (FS.isFile(node.mode)) {
attr.size = node.usedBytes;
} else if (FS.isLink(node.mode)) {
attr.size = node.link.length;
} else {
attr.size = 0;
}
attr.atime = new Date(node.timestamp);
attr.mtime = new Date(node.timestamp);
attr.ctime = new Date(node.timestamp);
// NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
//       but this is not required by the standard.
attr.blksize = 4096;
attr.blocks = Math.ceil(attr.size / attr.blksize);
return attr;
},setattr:function (node, attr) {
if (attr.mode !== undefined) {
node.mode = attr.mode;
}
if (attr.timestamp !== undefined) {
node.timestamp = attr.timestamp;
}
if (attr.size !== undefined) {
MEMFS.resizeFileStorage(node, attr.size);
}
},lookup:function (parent, name) {
throw FS.genericErrors[ERRNO_CODES.ENOENT];
},mknod:function (parent, name, mode, dev) {
return MEMFS.createNode(parent, name, mode, dev);
},rename:function (old_node, new_dir, new_name) {
// if we're overwriting a directory at new_name, make sure it's empty.
if (FS.isDir(old_node.mode)) {
var new_node;
try {
new_node = FS.lookupNode(new_dir, new_name);
} catch (e) {
}
if (new_node) {
for (var i in new_node.contents) {
throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
}
}
}
// do the internal rewiring
delete old_node.parent.contents[old_node.name];
old_node.name = new_name;
new_dir.contents[new_name] = old_node;
old_node.parent = new_dir;
},unlink:function (parent, name) {
delete parent.contents[name];
},rmdir:function (parent, name) {
var node = FS.lookupNode(parent, name);
for (var i in node.contents) {
throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
}
delete parent.contents[name];
},readdir:function (node) {
var entries = ['.', '..']
for (var key in node.contents) {
if (!node.contents.hasOwnProperty(key)) {
continue;
}
entries.push(key);
}
return entries;
},symlink:function (parent, newname, oldpath) {
var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
node.link = oldpath;
return node;
},readlink:function (node) {
if (!FS.isLink(node.mode)) {
throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
}
return node.link;
}},stream_ops:{read:function (stream, buffer, offset, length, position) {
var contents = stream.node.contents;
if (position >= stream.node.usedBytes) return 0;
var size = Math.min(stream.node.usedBytes - position, length);
assert(size >= 0);
if (size > 8 && contents.subarray) { // non-trivial, and typed array
buffer.set(contents.subarray(position, position + size), offset);
} else {
for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
}
return size;
},write:function (stream, buffer, offset, length, position, canOwn) {
if (!length) return 0;
var node = stream.node;
node.timestamp = Date.now();
if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
if (canOwn) {
node.contents = buffer.subarray(offset, offset + length);
node.usedBytes = length;
return length;
} else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
node.usedBytes = length;
return length;
} else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
node.contents.set(buffer.subarray(offset, offset + length), position);
return length;
}
}
// Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
MEMFS.expandFileStorage(node, position+length);
if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
else {
for (var i = 0; i < length; i++) {
node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
}
}
node.usedBytes = Math.max(node.usedBytes, position+length);
return length;
},llseek:function (stream, offset, whence) {
var position = offset;
if (whence === 1) {  // SEEK_CUR.
position += stream.position;
} else if (whence === 2) {  // SEEK_END.
if (FS.isFile(stream.node.mode)) {
position += stream.node.usedBytes;
}
}
if (position < 0) {
throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
}
return position;
},allocate:function (stream, offset, length) {
MEMFS.expandFileStorage(stream.node, offset + length);
stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
},mmap:function (stream, buffer, offset, length, position, prot, flags) {
if (!FS.isFile(stream.node.mode)) {
throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
}
var ptr;
var allocated;
var contents = stream.node.contents;
// Only make a new copy when MAP_PRIVATE is specified.
if ( !(flags & 2) &&
(contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
// We can't emulate MAP_SHARED when the file is not backed by the buffer
// we're mapping to (e.g. the HEAP buffer).
allocated = false;
ptr = contents.byteOffset;
} else {
// Try to avoid unnecessary slices.
if (position > 0 || position + length < stream.node.usedBytes) {
if (contents.subarray) {
contents = contents.subarray(position, position + length);
} else {
contents = Array.prototype.slice.call(contents, position, position + length);
}
}
allocated = true;
ptr = _malloc(length);
if (!ptr) {
throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
}
buffer.set(contents, ptr);
}
return { ptr: ptr, allocated: allocated };
},msync:function (stream, buffer, offset, length, mmapFlags) {
if (!FS.isFile(stream.node.mode)) {
throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
}
if (mmapFlags & 2) {
// MAP_PRIVATE calls need not to be synced back to underlying fs
return 0;
}
var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
// should we check if bytesWritten and length are the same?
return 0;
}}};
var IDBFS={dbs:{},indexedDB:function () {
if (typeof indexedDB !== 'undefined') return indexedDB;
var ret = null;
if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
assert(ret, 'IDBFS used, but indexedDB not supported');
return ret;
},DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
// reuse all of the core MEMFS functionality
return MEMFS.mount.apply(null, arguments);
},syncfs:function (mount, populate, callback) {
IDBFS.getLocalSet(mount, function(err, local) {
if (err) return callback(err);
IDBFS.getRemoteSet(mount, function(err, remote) {
if (err) return callback(err);
var src = populate ? remote : local;
var dst = populate ? local : remote;
IDBFS.reconcile(src, dst, callback);
});
});
},getDB:function (name, callback) {
// check the cache first
var db = IDBFS.dbs[name];
if (db) {
return callback(null, db);
}
var req;
try {
req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
} catch (e) {
return callback(e);
}
if (!req) {
return callback("Unable to connect to IndexedDB");
}
req.onupgradeneeded = function(e) {
var db = e.target.result;
var transaction = e.target.transaction;
var fileStore;
if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
} else {
fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
}
if (!fileStore.indexNames.contains('timestamp')) {
fileStore.createIndex('timestamp', 'timestamp', { unique: false });
}
};
req.onsuccess = function() {
db = req.result;
// add to the cache
IDBFS.dbs[name] = db;
callback(null, db);
};
req.onerror = function(e) {
callback(this.error);
e.preventDefault();
};
},getLocalSet:function (mount, callback) {
var entries = {};
function isRealDir(p) {
return p !== '.' && p !== '..';
};
function toAbsolute(root) {
return function(p) {
return PATH.join2(root, p);
}
};
var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
while (check.length) {
var path = check.pop();
var stat;
try {
stat = FS.stat(path);
} catch (e) {
return callback(e);
}
if (FS.isDir(stat.mode)) {
check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
}
entries[path] = { timestamp: stat.mtime };
}
return callback(null, { type: 'local', entries: entries });
},getRemoteSet:function (mount, callback) {
var entries = {};
IDBFS.getDB(mount.mountpoint, function(err, db) {
if (err) return callback(err);
try {
var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
transaction.onerror = function(e) {
callback(this.error);
e.preventDefault();
};
var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
var index = store.index('timestamp');
index.openKeyCursor().onsuccess = function(event) {
var cursor = event.target.result;
if (!cursor) {
return callback(null, { type: 'remote', db: db, entries: entries });
}
entries[cursor.primaryKey] = { timestamp: cursor.key };
cursor.continue();
};
} catch (e) {
return callback(e);
}
});
},loadLocalEntry:function (path, callback) {
var stat, node;
try {
var lookup = FS.lookupPath(path);
node = lookup.node;
stat = FS.stat(path);
} catch (e) {
return callback(e);
}
if (FS.isDir(stat.mode)) {
return callback(null, { timestamp: stat.mtime, mode: stat.mode });
} else if (FS.isFile(stat.mode)) {
// Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
// Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
node.contents = MEMFS.getFileDataAsTypedArray(node);
return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
} else {
return callback(new Error('node type not supported'));
}
},storeLocalEntry:function (path, entry, callback) {
try {
if (FS.isDir(entry.mode)) {
FS.mkdir(path, entry.mode);
} else if (FS.isFile(entry.mode)) {
FS.writeFile(path, entry.contents, { canOwn: true });
} else {
return callback(new Error('node type not supported'));
}
FS.chmod(path, entry.mode);
FS.utime(path, entry.timestamp, entry.timestamp);
} catch (e) {
return callback(e);
}
callback(null);
},removeLocalEntry:function (path, callback) {
try {
var lookup = FS.lookupPath(path);
var stat = FS.stat(path);
if (FS.isDir(stat.mode)) {
FS.rmdir(path);
} else if (FS.isFile(stat.mode)) {
FS.unlink(path);
}
} catch (e) {
return callback(e);
}
callback(null);
},loadRemoteEntry:function (store, path, callback) {
var req = store.get(path);
req.onsuccess = function(event) { callback(null, event.target.result); };
req.onerror = function(e) {
callback(this.error);
e.preventDefault();
};
},storeRemoteEntry:function (store, path, entry, callback) {
var req = store.put(entry, path);
req.onsuccess = function() { callback(null); };
req.onerror = function(e) {
callback(this.error);
e.preventDefault();
};
},removeRemoteEntry:function (store, path, callback) {
var req = store.delete(path);
req.onsuccess = function() { callback(null); };
req.onerror = function(e) {
callback(this.error);
e.preventDefault();
};
},reconcile:function (src, dst, callback) {
var total = 0;
var create = [];
Object.keys(src.entries).forEach(function (key) {
var e = src.entries[key];
var e2 = dst.entries[key];
if (!e2 || e.timestamp > e2.timestamp) {
create.push(key);
total++;
}
});
var remove = [];
Object.keys(dst.entries).forEach(function (key) {
var e = dst.entries[key];
var e2 = src.entries[key];
if (!e2) {
remove.push(key);
total++;
}
});
if (!total) {
return callback(null);
}
var errored = false;
var completed = 0;
var db = src.type === 'remote' ? src.db : dst.db;
var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
function done(err) {
if (err) {
if (!done.errored) {
done.errored = true;
return callback(err);
}
return;
}
if (++completed >= total) {
return callback(null);
}
};
transaction.onerror = function(e) {
done(this.error);
e.preventDefault();
};
// sort paths in ascending order so directory entries are created
// before the files inside them
create.sort().forEach(function (path) {
if (dst.type === 'local') {
IDBFS.loadRemoteEntry(store, path, function (err, entry) {
if (err) return done(err);
IDBFS.storeLocalEntry(path, entry, done);
});
} else {
IDBFS.loadLocalEntry(path, function (err, entry) {
if (err) return done(err);
IDBFS.storeRemoteEntry(store, path, entry, done);
});
}
});
// sort paths in descending order so files are deleted before their
// parent directories
remove.sort().reverse().forEach(function(path) {
if (dst.type === 'local') {
IDBFS.removeLocalEntry(path, done);
} else {
IDBFS.removeRemoteEntry(store, path, done);
}
});
}};
var NODEFS={isWindows:false,staticInit:function () {
NODEFS.isWindows = !!process.platform.match(/^win/);
var flags = process["binding"]("constants");
// Node.js 4 compatibility: it has no namespaces for constants
if (flags["fs"]) {
flags = flags["fs"];
}
NODEFS.flagsForNodeMap = {
"1024": flags["O_APPEND"],
"64": flags["O_CREAT"],
"128": flags["O_EXCL"],
"0": flags["O_RDONLY"],
"2": flags["O_RDWR"],
"4096": flags["O_SYNC"],
"512": flags["O_TRUNC"],
"1": flags["O_WRONLY"]
};
},bufferFrom:function (arrayBuffer) {
// Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
// Buffer.from before 4.5 was just a method inherited from Uint8Array
// Buffer.alloc has been added with Buffer.from together, so check it instead
return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
},mount:function (mount) {
assert(ENVIRONMENT_IS_NODE);
return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
},createNode:function (parent, name, mode, dev) {
if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
}
var node = FS.createNode(parent, name, mode);
node.node_ops = NODEFS.node_ops;
node.stream_ops = NODEFS.stream_ops;
return node;
},getMode:function (path) {
var stat;
try {
stat = fs.lstatSync(path);
if (NODEFS.isWindows) {
// Node.js on Windows never represents permission bit 'x', so
// propagate read bits to execute bits
stat.mode = stat.mode | ((stat.mode & 292) >> 2);
}
} catch (e) {
if (!e.code) throw e;
throw new FS.ErrnoError(ERRNO_CODES[e.code]);
}
return stat.mode;
},realPath:function (node) {
var parts = [];
while (node.parent !== node) {
parts.push(node.name);
node = node.parent;
}
parts.push(node.mount.opts.root);
parts.reverse();
return PATH.join.apply(null, parts);
},flagsForNode:function (flags) {
flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
var newFlags = 0;
for (var k in NODEFS.flagsForNodeMap) {
if (flags & k) {
newFlags |= NODEFS.flagsForNodeMap[k];
flags ^= k;
}
}
if (!flags) {
return newFlags;
} else {
throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
}
},node_ops:{getattr:function (node) {
var path = NODEFS.realPath(node);
var stat;
try {
stat = fs.lstatSync(path);
} catch (e) {
if (!e.code) throw e;
throw new FS.ErrnoError(ERRNO_CODES[e.code]);
}
// node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
// See http://support.microsoft.com/kb/140365
if (NODEFS.isWindows && !stat.blksize) {
stat.blksize = 4096;
}
if (NODEFS.isWindows && !stat.blocks) {
stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
}
return {
dev: stat.dev,
ino: stat.ino,
mode: stat.mode,
nlink: stat.nlink,
uid: stat.uid,
gid: stat.gid,
rdev: stat.rdev,
size: stat.size,
atime: stat.atime,
mtime: stat.mtime,
ctime: stat.ctime,
blksize: stat.blksize,
blocks: stat.blocks
};
},setattr:function (node, attr) {
var path = NODEFS.realPath(node);
try {
if (attr.mode !== undefined) {
fs.chmodSync(path, attr.mode);
// update the common node structure mode as well
node.mode = attr.mode;
}
if (attr.timestamp !== undefined) {
var date = new Date(attr.timestamp);
fs.utimesSync(path, date, date);
}
if (attr.size !== undefined) {
fs.truncateSync(path, attr.size);
}
} catch (e) {
if (!e.code) throw e;
throw new FS.ErrnoError(ERRNO_CODES[e.code]);
}
},lookup:function (parent, name) {
var path = PATH.join2(NODEFS.realPath(parent), name);
var mode = NODEFS.getMode(path);
return NODEFS.createNode(parent, name, mode);
},mknod:function (parent, name, mode, dev) {
var node = NODEFS.createNode(parent, name, mode, dev);
// create the backing node for this in the fs root as well
var path = NODEFS.realPath(node);
try {
if (FS.isDir(node.mode)) {
fs.mkdirSync(path, node.mode);
} else {
fs.writeFileSync(path, '', { mode: node.mode });
}
} catch (e) {
if (!e.code) throw e;
throw new FS.ErrnoError(ERRNO_CODES[e.code]);
}
return node;
},rename:function (oldNode, newDir, newName) {
var oldPath = NODEFS.realPath(oldNode);
var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
try {
fs.renameSync(oldPath, newPath);
} catch (e) {
if (!e.code) throw e;
throw new FS.ErrnoError(ERRNO_CODES[e.code]);
}
},unlink:function (parent, name) {
var path = PATH.join2(NODEFS.realPath(parent), name);
try {
fs.unlinkSync(path);
} catch (e) {
if (!e.code) throw e;
throw new FS.ErrnoError(ERRNO_CODES[e.code]);
}
},rmdir:function (parent, name) {
var path = PATH.join2(NODEFS.realPath(parent), name);
try {
fs.rmdirSync(path);
} catch (e) {
if (!e.code) throw e;
throw new FS.ErrnoError(ERRNO_CODES[e.code]);
}
},readdir:function (node) {
var path = NODEFS.realPath(node);
try {
return fs.readdirSync(path);
} catch (e) {
if (!e.code) throw e;
throw new FS.ErrnoError(ERRNO_CODES[e.code]);
}
},symlink:function (parent, newName, oldPath) {
var newPath = PATH.join2(NODEFS.realPath(parent), newName);
try {
fs.symlinkSync(oldPath, newPath);
} catch (e) {
if (!e.code) throw e;
throw new FS.ErrnoError(ERRNO_CODES[e.code]);
}
},readlink:function (node) {
var path = NODEFS.realPath(node);
try {
path = fs.readlinkSync(path);
path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
return path;
} catch (e) {
if (!e.code) throw e;
throw new FS.ErrnoError(ERRNO_CODES[e.code]);
}
}},stream_ops:{open:function (stream) {
var path = NODEFS.realPath(stream.node);
try {
if (FS.isFile(stream.node.mode)) {
stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
}
} catch (e) {
if (!e.code) throw e;
throw new FS.ErrnoError(ERRNO_CODES[e.code]);
}
},close:function (stream) {
try {
if (FS.isFile(stream.node.mode) && stream.nfd) {
fs.closeSync(stream.nfd);
}
} catch (e) {
if (!e.code) throw e;
throw new FS.ErrnoError(ERRNO_CODES[e.code]);
}
},read:function (stream, buffer, offset, length, position) {
// Node.js < 6 compatibility: node errors on 0 length reads
if (length === 0) return 0;
try {
return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
} catch (e) {
throw new FS.ErrnoError(ERRNO_CODES[e.code]);
}
},write:function (stream, buffer, offset, length, position) {
try {
return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
} catch (e) {
throw new FS.ErrnoError(ERRNO_CODES[e.code]);
}
},llseek:function (stream, offset, whence) {
var position = offset;
if (whence === 1) {  // SEEK_CUR.
position += stream.position;
} else if (whence === 2) {  // SEEK_END.
if (FS.isFile(stream.node.mode)) {
try {
var stat = fs.fstatSync(stream.nfd);
position += stat.size;
} catch (e) {
throw new FS.ErrnoError(ERRNO_CODES[e.code]);
}
}
}
if (position < 0) {
throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
}
return position;
}}};
var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
assert(ENVIRONMENT_IS_WORKER);
if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
var createdParents = {};
function ensureParent(path) {
// return the parent node, creating subdirs as necessary
var parts = path.split('/');
var parent = root;
for (var i = 0; i < parts.length-1; i++) {
var curr = parts.slice(0, i+1).join('/');
// Issue 4254: Using curr as a node name will prevent the node
// from being found in FS.nameTable when FS.open is called on
// a path which holds a child of this node,
// given that all FS functions assume node names
// are just their corresponding parts within their given path,
// rather than incremental aggregates which include their parent's
// directories.
if (!createdParents[curr]) {
createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
}
parent = createdParents[curr];
}
return parent;
}
function base(path) {
var parts = path.split('/');
return parts[parts.length-1];
}
// We also accept FileList here, by using Array.prototype
Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
});
(mount.opts["blobs"] || []).forEach(function(obj) {
WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
});
(mount.opts["packages"] || []).forEach(function(pack) {
pack['metadata'].files.forEach(function(file) {
var name = file.filename.substr(1); // remove initial slash
WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
});
});
return root;
},createNode:function (parent, name, mode, dev, contents, mtime) {
var node = FS.createNode(parent, name, mode);
node.mode = mode;
node.node_ops = WORKERFS.node_ops;
node.stream_ops = WORKERFS.stream_ops;
node.timestamp = (mtime || new Date).getTime();
assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
if (mode === WORKERFS.FILE_MODE) {
node.size = contents.size;
node.contents = contents;
} else {
node.size = 4096;
node.contents = {};
}
if (parent) {
parent.contents[name] = node;
}
return node;
},node_ops:{getattr:function (node) {
return {
dev: 1,
ino: undefined,
mode: node.mode,
nlink: 1,
uid: 0,
gid: 0,
rdev: undefined,
size: node.size,
atime: new Date(node.timestamp),
mtime: new Date(node.timestamp),
ctime: new Date(node.timestamp),
blksize: 4096,
blocks: Math.ceil(node.size / 4096),
};
},setattr:function (node, attr) {
if (attr.mode !== undefined) {
node.mode = attr.mode;
}
if (attr.timestamp !== undefined) {
node.timestamp = attr.timestamp;
}
},lookup:function (parent, name) {
throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
},mknod:function (parent, name, mode, dev) {
throw new FS.ErrnoError(ERRNO_CODES.EPERM);
},rename:function (oldNode, newDir, newName) {
throw new FS.ErrnoError(ERRNO_CODES.EPERM);
},unlink:function (parent, name) {
throw new FS.ErrnoError(ERRNO_CODES.EPERM);
},rmdir:function (parent, name) {
throw new FS.ErrnoError(ERRNO_CODES.EPERM);
},readdir:function (node) {
var entries = ['.', '..'];
for (var key in node.contents) {
if (!node.contents.hasOwnProperty(key)) {
continue;
}
entries.push(key);
}
return entries;
},symlink:function (parent, newName, oldPath) {
throw new FS.ErrnoError(ERRNO_CODES.EPERM);
},readlink:function (node) {
throw new FS.ErrnoError(ERRNO_CODES.EPERM);
}},stream_ops:{read:function (stream, buffer, offset, length, position) {
if (position >= stream.node.size) return 0;
var chunk = stream.node.contents.slice(position, position + length);
var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
buffer.set(new Uint8Array(ab), offset);
return chunk.size;
},write:function (stream, buffer, offset, length, position) {
throw new FS.ErrnoError(ERRNO_CODES.EIO);
},llseek:function (stream, offset, whence) {
var position = offset;
if (whence === 1) {  // SEEK_CUR.
position += stream.position;
} else if (whence === 2) {  // SEEK_END.
if (FS.isFile(stream.node.mode)) {
position += stream.node.size;
}
}
if (position < 0) {
throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
}
return position;
}}};
var _stdin=STATICTOP; STATICTOP += 16;;
var _stdout=STATICTOP; STATICTOP += 16;;
var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
return ___setErrNo(e.errno);
},lookupPath:function (path, opts) {
path = PATH.resolve(FS.cwd(), path);
opts = opts || {};
if (!path) return { path: '', node: null };
var defaults = {
follow_mount: true,
recurse_count: 0
};
for (var key in defaults) {
if (opts[key] === undefined) {
opts[key] = defaults[key];
}
}
if (opts.recurse_count > 8) {  // max recursive lookup of 8
throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
}
// split the path
var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
return !!p;
}), false);
// start at the root
var current = FS.root;
var current_path = '/';
for (var i = 0; i < parts.length; i++) {
var islast = (i === parts.length-1);
if (islast && opts.parent) {
// stop resolving
break;
}
current = FS.lookupNode(current, parts[i]);
current_path = PATH.join2(current_path, parts[i]);
// jump to the mount's root node if this is a mountpoint
if (FS.isMountpoint(current)) {
if (!islast || (islast && opts.follow_mount)) {
current = current.mounted.root;
}
}
// by default, lookupPath will not follow a symlink if it is the final path component.
// setting opts.follow = true will override this behavior.
if (!islast || opts.follow) {
var count = 0;
while (FS.isLink(current.mode)) {
var link = FS.readlink(current_path);
current_path = PATH.resolve(PATH.dirname(current_path), link);
var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
current = lookup.node;
if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
}
}
}
}
return { path: current_path, node: current };
},getPath:function (node) {
var path;
while (true) {
if (FS.isRoot(node)) {
var mount = node.mount.mountpoint;
if (!path) return mount;
return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
}
path = path ? node.name + '/' + path : node.name;
node = node.parent;
}
},hashName:function (parentid, name) {
var hash = 0;
for (var i = 0; i < name.length; i++) {
hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
}
return ((parentid + hash) >>> 0) % FS.nameTable.length;
},hashAddNode:function (node) {
var hash = FS.hashName(node.parent.id, node.name);
node.name_next = FS.nameTable[hash];
FS.nameTable[hash] = node;
},hashRemoveNode:function (node) {
var hash = FS.hashName(node.parent.id, node.name);
if (FS.nameTable[hash] === node) {
FS.nameTable[hash] = node.name_next;
} else {
var current = FS.nameTable[hash];
while (current) {
if (current.name_next === node) {
current.name_next = node.name_next;
break;
}
current = current.name_next;
}
}
},lookupNode:function (parent, name) {
var err = FS.mayLookup(parent);
if (err) {
throw new FS.ErrnoError(err, parent);
}
var hash = FS.hashName(parent.id, name);
for (var node = FS.nameTable[hash]; node; node = node.name_next) {
var nodeName = node.name;
if (node.parent.id === parent.id && nodeName === name) {
return node;
}
}
// if we failed to find it in the cache, call into the VFS
return FS.lookup(parent, name);
},createNode:function (parent, name, mode, rdev) {
if (!FS.FSNode) {
FS.FSNode = function(parent, name, mode, rdev) {
if (!parent) {
parent = this;  // root node sets parent to itself
}
this.parent = parent;
this.mount = parent.mount;
this.mounted = null;
this.id = FS.nextInode++;
this.name = name;
this.mode = mode;
this.node_ops = {};
this.stream_ops = {};
this.rdev = rdev;
};
FS.FSNode.prototype = {};
// compatibility
var readMode = 292 | 73;
var writeMode = 146;
// NOTE we must use Object.defineProperties instead of individual calls to
// Object.defineProperty in order to make closure compiler happy
Object.defineProperties(FS.FSNode.prototype, {
read: {
get: function() { return (this.mode & readMode) === readMode; },
set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
},
write: {
get: function() { return (this.mode & writeMode) === writeMode; },
set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
},
isFolder: {
get: function() { return FS.isDir(this.mode); }
},
isDevice: {
get: function() { return FS.isChrdev(this.mode); }
}
});
}
var node = new FS.FSNode(parent, name, mode, rdev);
FS.hashAddNode(node);
return node;
},destroyNode:function (node) {
FS.hashRemoveNode(node);
},isRoot:function (node) {
return node === node.parent;
},isMountpoint:function (node) {
return !!node.mounted;
},isFile:function (mode) {
return (mode & 61440) === 32768;
},isDir:function (mode) {
return (mode & 61440) === 16384;
},isLink:function (mode) {
return (mode & 61440) === 40960;
},isChrdev:function (mode) {
return (mode & 61440) === 8192;
},isBlkdev:function (mode) {
return (mode & 61440) === 24576;
},isFIFO:function (mode) {
return (mode & 61440) === 4096;
},isSocket:function (mode) {
return (mode & 49152) === 49152;
},flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
var flags = FS.flagModes[str];
if (typeof flags === 'undefined') {
throw new Error('Unknown file open mode: ' + str);
}
return flags;
},flagsToPermissionString:function (flag) {
var perms = ['r', 'w', 'rw'][flag & 3];
if ((flag & 512)) {
perms += 'w';
}
return perms;
},nodePermissions:function (node, perms) {
if (FS.ignorePermissions) {
return 0;
}
// return 0 if any user, group or owner bits are set.
if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
return ERRNO_CODES.EACCES;
} else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
return ERRNO_CODES.EACCES;
} else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
return ERRNO_CODES.EACCES;
}
return 0;
},mayLookup:function (dir) {
var err = FS.nodePermissions(dir, 'x');
if (err) return err;
if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
return 0;
},mayCreate:function (dir, name) {
try {
var node = FS.lookupNode(dir, name);
return ERRNO_CODES.EEXIST;
} catch (e) {
}
return FS.nodePermissions(dir, 'wx');
},mayDelete:function (dir, name, isdir) {
var node;
try {
node = FS.lookupNode(dir, name);
} catch (e) {
return e.errno;
}
var err = FS.nodePermissions(dir, 'wx');
if (err) {
return err;
}
if (isdir) {
if (!FS.isDir(node.mode)) {
return ERRNO_CODES.ENOTDIR;
}
if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
return ERRNO_CODES.EBUSY;
}
} else {
if (FS.isDir(node.mode)) {
return ERRNO_CODES.EISDIR;
}
}
return 0;
},mayOpen:function (node, flags) {
if (!node) {
return ERRNO_CODES.ENOENT;
}
if (FS.isLink(node.mode)) {
return ERRNO_CODES.ELOOP;
} else if (FS.isDir(node.mode)) {
if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
(flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
return ERRNO_CODES.EISDIR;
}
}
return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
},MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
fd_start = fd_start || 0;
fd_end = fd_end || FS.MAX_OPEN_FDS;
for (var fd = fd_start; fd <= fd_end; fd++) {
if (!FS.streams[fd]) {
return fd;
}
}
throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
},getStream:function (fd) {
return FS.streams[fd];
},createStream:function (stream, fd_start, fd_end) {
if (!FS.FSStream) {
FS.FSStream = function(){};
FS.FSStream.prototype = {};
// compatibility
Object.defineProperties(FS.FSStream.prototype, {
object: {
get: function() { return this.node; },
set: function(val) { this.node = val; }
},
isRead: {
get: function() { return (this.flags & 2097155) !== 1; }
},
isWrite: {
get: function() { return (this.flags & 2097155) !== 0; }
},
isAppend: {
get: function() { return (this.flags & 1024); }
}
});
}
// clone it, so we can return an instance of FSStream
var newStream = new FS.FSStream();
for (var p in stream) {
newStream[p] = stream[p];
}
stream = newStream;
var fd = FS.nextfd(fd_start, fd_end);
stream.fd = fd;
FS.streams[fd] = stream;
return stream;
},closeStream:function (fd) {
FS.streams[fd] = null;
},chrdev_stream_ops:{open:function (stream) {
var device = FS.getDevice(stream.node.rdev);
// override node's stream ops with the device's
stream.stream_ops = device.stream_ops;
// forward the open call
if (stream.stream_ops.open) {
stream.stream_ops.open(stream);
}
},llseek:function () {
throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
}},major:function (dev) {
return ((dev) >> 8);
},minor:function (dev) {
return ((dev) & 0xff);
},makedev:function (ma, mi) {
return ((ma) << 8 | (mi));
},registerDevice:function (dev, ops) {
FS.devices[dev] = { stream_ops: ops };
},getDevice:function (dev) {
return FS.devices[dev];
},getMounts:function (mount) {
var mounts = [];
var check = [mount];
while (check.length) {
var m = check.pop();
mounts.push(m);
check.push.apply(check, m.mounts);
}
return mounts;
},syncfs:function (populate, callback) {
if (typeof(populate) === 'function') {
callback = populate;
populate = false;
}
FS.syncFSRequests++;
if (FS.syncFSRequests > 1) {
console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
}
var mounts = FS.getMounts(FS.root.mount);
var completed = 0;
function doCallback(err) {
assert(FS.syncFSRequests > 0);
FS.syncFSRequests--;
return callback(err);
}
function done(err) {
if (err) {
if (!done.errored) {
done.errored = true;
return doCallback(err);
}
return;
}
if (++completed >= mounts.length) {
doCallback(null);
}
};
// sync all mounts
mounts.forEach(function (mount) {
if (!mount.type.syncfs) {
return done(null);
}
mount.type.syncfs(mount, populate, done);
});
},mount:function (type, opts, mountpoint) {
var root = mountpoint === '/';
var pseudo = !mountpoint;
var node;
if (root && FS.root) {
throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
} else if (!root && !pseudo) {
var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
mountpoint = lookup.path;  // use the absolute path
node = lookup.node;
if (FS.isMountpoint(node)) {
throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
}
if (!FS.isDir(node.mode)) {
throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
}
}
var mount = {
type: type,
opts: opts,
mountpoint: mountpoint,
mounts: []
};
// create a root node for the fs
var mountRoot = type.mount(mount);
mountRoot.mount = mount;
mount.root = mountRoot;
if (root) {
FS.root = mountRoot;
} else if (node) {
// set as a mountpoint
node.mounted = mount;
// add the new mount to the current mount's children
if (node.mount) {
node.mount.mounts.push(mount);
}
}
return mountRoot;
},unmount:function (mountpoint) {
var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
if (!FS.isMountpoint(lookup.node)) {
throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
}
// destroy the nodes for this mount, and all its child mounts
var node = lookup.node;
var mount = node.mounted;
var mounts = FS.getMounts(mount);
Object.keys(FS.nameTable).forEach(function (hash) {
var current = FS.nameTable[hash];
while (current) {
var next = current.name_next;
if (mounts.indexOf(current.mount) !== -1) {
FS.destroyNode(current);
}
current = next;
}
});
// no longer a mountpoint
node.mounted = null;
// remove this mount from the child mounts
var idx = node.mount.mounts.indexOf(mount);
assert(idx !== -1);
node.mount.mounts.splice(idx, 1);
},lookup:function (parent, name) {
return parent.node_ops.lookup(parent, name);
},mknod:function (path, mode, dev) {
var lookup = FS.lookupPath(path, { parent: true });
var parent = lookup.node;
var name = PATH.basename(path);
if (!name || name === '.' || name === '..') {
throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
}
var err = FS.mayCreate(parent, name);
if (err) {
throw new FS.ErrnoError(err);
}
if (!parent.node_ops.mknod) {
throw new FS.ErrnoError(ERRNO_CODES.EPERM);
}
return parent.node_ops.mknod(parent, name, mode, dev);
},create:function (path, mode) {
mode = mode !== undefined ? mode : 438 /* 0666 */;
mode &= 4095;
mode |= 32768;
return FS.mknod(path, mode, 0);
},mkdir:function (path, mode) {
mode = mode !== undefined ? mode : 511 /* 0777 */;
mode &= 511 | 512;
mode |= 16384;
return FS.mknod(path, mode, 0);
},mkdirTree:function (path, mode) {
var dirs = path.split('/');
var d = '';
for (var i = 0; i < dirs.length; ++i) {
if (!dirs[i]) continue;
d += '/' + dirs[i];
try {
FS.mkdir(d, mode);
} catch(e) {
if (e.errno != ERRNO_CODES.EEXIST) throw e;
}
}
},mkdev:function (path, mode, dev) {
if (typeof(dev) === 'undefined') {
dev = mode;
mode = 438 /* 0666 */;
}
mode |= 8192;
return FS.mknod(path, mode, dev);
},symlink:function (oldpath, newpath) {
if (!PATH.resolve(oldpath)) {
throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
}
var lookup = FS.lookupPath(newpath, { parent: true });
var parent = lookup.node;
if (!parent) {
throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
}
var newname = PATH.basename(newpath);
var err = FS.mayCreate(parent, newname);
if (err) {
throw new FS.ErrnoError(err);
}
if (!parent.node_ops.symlink) {
throw new FS.ErrnoError(ERRNO_CODES.EPERM);
}
return parent.node_ops.symlink(parent, newname, oldpath);
},rename:function (old_path, new_path) {
var old_dirname = PATH.dirname(old_path);
var new_dirname = PATH.dirname(new_path);
var old_name = PATH.basename(old_path);
var new_name = PATH.basename(new_path);
// parents must exist
var lookup, old_dir, new_dir;
try {
lookup = FS.lookupPath(old_path, { parent: true });
old_dir = lookup.node;
lookup = FS.lookupPath(new_path, { parent: true });
new_dir = lookup.node;
} catch (e) {
throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
}
if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
// need to be part of the same mount
if (old_dir.mount !== new_dir.mount) {
throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
}
// source must exist
var old_node = FS.lookupNode(old_dir, old_name);
// old path should not be an ancestor of the new path
var relative = PATH.relative(old_path, new_dirname);
if (relative.charAt(0) !== '.') {
throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
}
// new path should not be an ancestor of the old path
relative = PATH.relative(new_path, old_dirname);
if (relative.charAt(0) !== '.') {
throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
}
// see if the new path already exists
var new_node;
try {
new_node = FS.lookupNode(new_dir, new_name);
} catch (e) {
// not fatal
}
// early out if nothing needs to change
if (old_node === new_node) {
return;
}
// we'll need to delete the old entry
var isdir = FS.isDir(old_node.mode);
var err = FS.mayDelete(old_dir, old_name, isdir);
if (err) {
throw new FS.ErrnoError(err);
}
// need delete permissions if we'll be overwriting.
// need create permissions if new doesn't already exist.
err = new_node ?
FS.mayDelete(new_dir, new_name, isdir) :
FS.mayCreate(new_dir, new_name);
if (err) {
throw new FS.ErrnoError(err);
}
if (!old_dir.node_ops.rename) {
throw new FS.ErrnoError(ERRNO_CODES.EPERM);
}
if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
}
// if we are going to change the parent, check write permissions
if (new_dir !== old_dir) {
err = FS.nodePermissions(old_dir, 'w');
if (err) {
throw new FS.ErrnoError(err);
}
}
try {
if (FS.trackingDelegate['willMovePath']) {
FS.trackingDelegate['willMovePath'](old_path, new_path);
}
} catch(e) {
console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
}
// remove the node from the lookup hash
FS.hashRemoveNode(old_node);
// do the underlying fs rename
try {
old_dir.node_ops.rename(old_node, new_dir, new_name);
} catch (e) {
throw e;
} finally {
// add the node back to the hash (in case node_ops.rename
// changed its name)
FS.hashAddNode(old_node);
}
try {
if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
} catch(e) {
console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
}
},rmdir:function (path) {
var lookup = FS.lookupPath(path, { parent: true });
var parent = lookup.node;
var name = PATH.basename(path);
var node = FS.lookupNode(parent, name);
var err = FS.mayDelete(parent, name, true);
if (err) {
throw new FS.ErrnoError(err);
}
if (!parent.node_ops.rmdir) {
throw new FS.ErrnoError(ERRNO_CODES.EPERM);
}
if (FS.isMountpoint(node)) {
throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
}
try {
if (FS.trackingDelegate['willDeletePath']) {
FS.trackingDelegate['willDeletePath'](path);
}
} catch(e) {
console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
}
parent.node_ops.rmdir(parent, name);
FS.destroyNode(node);
try {
if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
} catch(e) {
console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
}
},readdir:function (path) {
var lookup = FS.lookupPath(path, { follow: true });
var node = lookup.node;
if (!node.node_ops.readdir) {
throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
}
return node.node_ops.readdir(node);
},unlink:function (path) {
var lookup = FS.lookupPath(path, { parent: true });
var parent = lookup.node;
var name = PATH.basename(path);
var node = FS.lookupNode(parent, name);
var err = FS.mayDelete(parent, name, false);
if (err) {
// According to POSIX, we should map EISDIR to EPERM, but
// we instead do what Linux does (and we must, as we use
// the musl linux libc).
throw new FS.ErrnoError(err);
}
if (!parent.node_ops.unlink) {
throw new FS.ErrnoError(ERRNO_CODES.EPERM);
}
if (FS.isMountpoint(node)) {
throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
}
try {
if (FS.trackingDelegate['willDeletePath']) {
FS.trackingDelegate['willDeletePath'](path);
}
} catch(e) {
console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
}
parent.node_ops.unlink(parent, name);
FS.destroyNode(node);
try {
if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
} catch(e) {
console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
}
},readlink:function (path) {
var lookup = FS.lookupPath(path);
var link = lookup.node;
if (!link) {
throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
}
if (!link.node_ops.readlink) {
throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
}
return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
},stat:function (path, dontFollow) {
var lookup = FS.lookupPath(path, { follow: !dontFollow });
var node = lookup.node;
if (!node) {
throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
}
if (!node.node_ops.getattr) {
throw new FS.ErrnoError(ERRNO_CODES.EPERM);
}
return node.node_ops.getattr(node);
},lstat:function (path) {
return FS.stat(path, true);
},chmod:function (path, mode, dontFollow) {
var node;
if (typeof path === 'string') {
var lookup = FS.lookupPath(path, { follow: !dontFollow });
node = lookup.node;
} else {
node = path;
}
if (!node.node_ops.setattr) {
throw new FS.ErrnoError(ERRNO_CODES.EPERM);
}
node.node_ops.setattr(node, {
mode: (mode & 4095) | (node.mode & ~4095),
timestamp: Date.now()
});
},lchmod:function (path, mode) {
FS.chmod(path, mode, true);
},fchmod:function (fd, mode) {
var stream = FS.getStream(fd);
if (!stream) {
throw new FS.ErrnoError(ERRNO_CODES.EBADF);
}
FS.chmod(stream.node, mode);
},chown:function (path, uid, gid, dontFollow) {
var node;
if (typeof path === 'string') {
var lookup = FS.lookupPath(path, { follow: !dontFollow });
node = lookup.node;
} else {
node = path;
}
if (!node.node_ops.setattr) {
throw new FS.ErrnoError(ERRNO_CODES.EPERM);
}
node.node_ops.setattr(node, {
timestamp: Date.now()
// we ignore the uid / gid for now
});
},lchown:function (path, uid, gid) {
FS.chown(path, uid, gid, true);
},fchown:function (fd, uid, gid) {
var stream = FS.getStream(fd);
if (!stream) {
throw new FS.ErrnoError(ERRNO_CODES.EBADF);
}
FS.chown(stream.node, uid, gid);
},truncate:function (path, len) {
if (len < 0) {
throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
}
var node;
if (typeof path === 'string') {
var lookup = FS.lookupPath(path, { follow: true });
node = lookup.node;
} else {
node = path;
}
if (!node.node_ops.setattr) {
throw new FS.ErrnoError(ERRNO_CODES.EPERM);
}
if (FS.isDir(node.mode)) {
throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
}
if (!FS.isFile(node.mode)) {
throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
}
var err = FS.nodePermissions(node, 'w');
if (err) {
throw new FS.ErrnoError(err);
}
node.node_ops.setattr(node, {
size: len,
timestamp: Date.now()
});
},ftruncate:function (fd, len) {
var stream = FS.getStream(fd);
if (!stream) {
throw new FS.ErrnoError(ERRNO_CODES.EBADF);
}
if ((stream.flags & 2097155) === 0) {
throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
}
FS.truncate(stream.node, len);
},utime:function (path, atime, mtime) {
var lookup = FS.lookupPath(path, { follow: true });
var node = lookup.node;
node.node_ops.setattr(node, {
timestamp: Math.max(atime, mtime)
});
},open:function (path, flags, mode, fd_start, fd_end) {
if (path === "") {
throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
}
flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
if ((flags & 64)) {
mode = (mode & 4095) | 32768;
} else {
mode = 0;
}
var node;
if (typeof path === 'object') {
node = path;
} else {
path = PATH.normalize(path);
try {
var lookup = FS.lookupPath(path, {
follow: !(flags & 131072)
});
node = lookup.node;
} catch (e) {
// ignore
}
}
// perhaps we need to create the node
var created = false;
if ((flags & 64)) {
if (node) {
// if O_CREAT and O_EXCL are set, error out if the node already exists
if ((flags & 128)) {
throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
}
} else {
// node doesn't exist, try to create it
node = FS.mknod(path, mode, 0);
created = true;
}
}
if (!node) {
throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
}
// can't truncate a device
if (FS.isChrdev(node.mode)) {
flags &= ~512;
}
// if asked only for a directory, then this must be one
if ((flags & 65536) && !FS.isDir(node.mode)) {
throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
}
// check permissions, if this is not a file we just created now (it is ok to
// create and write to a file with read-only permissions; it is read-only
// for later use)
if (!created) {
var err = FS.mayOpen(node, flags);
if (err) {
throw new FS.ErrnoError(err);
}
}
// do truncation if necessary
if ((flags & 512)) {
FS.truncate(node, 0);
}
// we've already handled these, don't pass down to the underlying vfs
flags &= ~(128 | 512);
// register the stream with the filesystem
var stream = FS.createStream({
node: node,
path: FS.getPath(node),  // we want the absolute path to the node
flags: flags,
seekable: true,
position: 0,
stream_ops: node.stream_ops,
// used by the file family libc calls (fopen, fwrite, ferror, etc.)
ungotten: [],
error: false
}, fd_start, fd_end);
// call the new stream's open function
if (stream.stream_ops.open) {
stream.stream_ops.open(stream);
}
if (Module['logReadFiles'] && !(flags & 1)) {
if (!FS.readFiles) FS.readFiles = {};
if (!(path in FS.readFiles)) {
FS.readFiles[path] = 1;
Module['printErr']('read file: ' + path);
}
}
try {
if (FS.trackingDelegate['onOpenFile']) {
var trackingFlags = 0;
if ((flags & 2097155) !== 1) {
trackingFlags |= FS.tracking.openFlags.READ;
}
if ((flags & 2097155) !== 0) {
trackingFlags |= FS.tracking.openFlags.WRITE;
}
FS.trackingDelegate['onOpenFile'](path, trackingFlags);
}
} catch(e) {
console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
}
return stream;
},close:function (stream) {
if (stream.getdents) stream.getdents = null; // free readdir state
try {
if (stream.stream_ops.close) {
stream.stream_ops.close(stream);
}
} catch (e) {
throw e;
} finally {
FS.closeStream(stream.fd);
}
},llseek:function (stream, offset, whence) {
if (!stream.seekable || !stream.stream_ops.llseek) {
throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
}
stream.position = stream.stream_ops.llseek(stream, offset, whence);
stream.ungotten = [];
return stream.position;
},read:function (stream, buffer, offset, length, position) {
if (length < 0 || position < 0) {
throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
}
if ((stream.flags & 2097155) === 1) {
throw new FS.ErrnoError(ERRNO_CODES.EBADF);
}
if (FS.isDir(stream.node.mode)) {
throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
}
if (!stream.stream_ops.read) {
throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
}
var seeking = typeof position !== 'undefined';
if (!seeking) {
position = stream.position;
} else if (!stream.seekable) {
throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
}
var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
if (!seeking) stream.position += bytesRead;
return bytesRead;
},write:function (stream, buffer, offset, length, position, canOwn) {
if (length < 0 || position < 0) {
throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
}
if ((stream.flags & 2097155) === 0) {
throw new FS.ErrnoError(ERRNO_CODES.EBADF);
}
if (FS.isDir(stream.node.mode)) {
throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
}
if (!stream.stream_ops.write) {
throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
}
if (stream.flags & 1024) {
// seek to the end before writing in append mode
FS.llseek(stream, 0, 2);
}
var seeking = typeof position !== 'undefined';
if (!seeking) {
position = stream.position;
} else if (!stream.seekable) {
throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
}
var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
if (!seeking) stream.position += bytesWritten;
try {
if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
} catch(e) {
console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
}
return bytesWritten;
},allocate:function (stream, offset, length) {
if (offset < 0 || length <= 0) {
throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
}
if ((stream.flags & 2097155) === 0) {
throw new FS.ErrnoError(ERRNO_CODES.EBADF);
}
if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
}
if (!stream.stream_ops.allocate) {
throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
}
stream.stream_ops.allocate(stream, offset, length);
},mmap:function (stream, buffer, offset, length, position, prot, flags) {
// TODO if PROT is PROT_WRITE, make sure we have write access
if ((stream.flags & 2097155) === 1) {
throw new FS.ErrnoError(ERRNO_CODES.EACCES);
}
if (!stream.stream_ops.mmap) {
throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
}
return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
},msync:function (stream, buffer, offset, length, mmapFlags) {
if (!stream || !stream.stream_ops.msync) {
return 0;
}
return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
},munmap:function (stream) {
return 0;
},ioctl:function (stream, cmd, arg) {
if (!stream.stream_ops.ioctl) {
throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
}
return stream.stream_ops.ioctl(stream, cmd, arg);
},readFile:function (path, opts) {
opts = opts || {};
opts.flags = opts.flags || 'r';
opts.encoding = opts.encoding || 'binary';
if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
throw new Error('Invalid encoding type "' + opts.encoding + '"');
}
var ret;
var stream = FS.open(path, opts.flags);
var stat = FS.stat(path);
var length = stat.size;
var buf = new Uint8Array(length);
FS.read(stream, buf, 0, length, 0);
if (opts.encoding === 'utf8') {
ret = UTF8ArrayToString(buf, 0);
} else if (opts.encoding === 'binary') {
ret = buf;
}
FS.close(stream);
return ret;
},writeFile:function (path, data, opts) {
opts = opts || {};
opts.flags = opts.flags || 'w';
var stream = FS.open(path, opts.flags, opts.mode);
if (typeof data === 'string') {
var buf = new Uint8Array(lengthBytesUTF8(data)+1);
var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
} else if (ArrayBuffer.isView(data)) {
FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
} else {
throw new Error('Unsupported data type');
}
FS.close(stream);
},cwd:function () {
return FS.currentPath;
},chdir:function (path) {
var lookup = FS.lookupPath(path, { follow: true });
if (lookup.node === null) {
throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
}
if (!FS.isDir(lookup.node.mode)) {
throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
}
var err = FS.nodePermissions(lookup.node, 'x');
if (err) {
throw new FS.ErrnoError(err);
}
FS.currentPath = lookup.path;
},createDefaultDirectories:function () {
FS.mkdir('/tmp');
FS.mkdir('/home');
FS.mkdir('/home/web_user');
},createDefaultDevices:function () {
// create /dev
FS.mkdir('/dev');
// setup /dev/null
FS.registerDevice(FS.makedev(1, 3), {
read: function() { return 0; },
write: function(stream, buffer, offset, length, pos) { return length; }
});
FS.mkdev('/dev/null', FS.makedev(1, 3));
// setup /dev/tty and /dev/tty1
// stderr needs to print output using Module['printErr']
// so we register a second tty just for it.
TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
FS.mkdev('/dev/tty', FS.makedev(5, 0));
FS.mkdev('/dev/tty1', FS.makedev(6, 0));
// setup /dev/[u]random
var random_device;
if (typeof crypto !== 'undefined') {
// for modern web browsers
var randomBuffer = new Uint8Array(1);
random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
} else if (ENVIRONMENT_IS_NODE) {
// for nodejs
random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
} else {
// default for ES5 platforms
random_device = function() { return (Math.random()*256)|0; };
}
FS.createDevice('/dev', 'random', random_device);
FS.createDevice('/dev', 'urandom', random_device);
// we're not going to emulate the actual shm device,
// just create the tmp dirs that reside in it commonly
FS.mkdir('/dev/shm');
FS.mkdir('/dev/shm/tmp');
},createSpecialDirectories:function () {
// create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
FS.mkdir('/proc');
FS.mkdir('/proc/self');
FS.mkdir('/proc/self/fd');
FS.mount({
mount: function() {
var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
node.node_ops = {
lookup: function(parent, name) {
var fd = +name;
var stream = FS.getStream(fd);
if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
var ret = {
parent: null,
mount: { mountpoint: 'fake' },
node_ops: { readlink: function() { return stream.path } }
};
ret.parent = ret; // make it look like a simple root node
return ret;
}
};
return node;
}
}, {}, '/proc/self/fd');
},createStandardStreams:function () {
// TODO deprecate the old functionality of a single
// input / output callback and that utilizes FS.createDevice
// and instead require a unique set of stream ops
// by default, we symlink the standard streams to the
// default tty devices. however, if the standard streams
// have been overwritten we create a unique device for
// them instead.
if (Module['stdin']) {
FS.createDevice('/dev', 'stdin', Module['stdin']);
} else {
FS.symlink('/dev/tty', '/dev/stdin');
}
if (Module['stdout']) {
FS.createDevice('/dev', 'stdout', null, Module['stdout']);
} else {
FS.symlink('/dev/tty', '/dev/stdout');
}
if (Module['stderr']) {
FS.createDevice('/dev', 'stderr', null, Module['stderr']);
} else {
FS.symlink('/dev/tty1', '/dev/stderr');
}
// open default streams for the stdin, stdout and stderr devices
var stdin = FS.open('/dev/stdin', 'r');
assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
var stdout = FS.open('/dev/stdout', 'w');
assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
var stderr = FS.open('/dev/stderr', 'w');
assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
},ensureErrnoError:function () {
if (FS.ErrnoError) return;
FS.ErrnoError = function ErrnoError(errno, node) {
//Module.printErr(stackTrace()); // useful for debugging
this.node = node;
this.setErrno = function(errno) {
this.errno = errno;
for (var key in ERRNO_CODES) {
if (ERRNO_CODES[key] === errno) {
this.code = key;
break;
}
}
};
this.setErrno(errno);
this.message = ERRNO_MESSAGES[errno];
// Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
};
FS.ErrnoError.prototype = new Error();
FS.ErrnoError.prototype.constructor = FS.ErrnoError;
// Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
[ERRNO_CODES.ENOENT].forEach(function(code) {
FS.genericErrors[code] = new FS.ErrnoError(code);
FS.genericErrors[code].stack = '<generic error, no stack>';
});
},staticInit:function () {
FS.ensureErrnoError();
FS.nameTable = new Array(4096);
FS.mount(MEMFS, {}, '/');
FS.createDefaultDirectories();
FS.createDefaultDevices();
FS.createSpecialDirectories();
FS.filesystems = {
'MEMFS': MEMFS,
'IDBFS': IDBFS,
'NODEFS': NODEFS,
'WORKERFS': WORKERFS,
};
},init:function (input, output, error) {
assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
FS.init.initialized = true;
FS.ensureErrnoError();
// Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
Module['stdin'] = input || Module['stdin'];
Module['stdout'] = output || Module['stdout'];
Module['stderr'] = error || Module['stderr'];
FS.createStandardStreams();
},quit:function () {
FS.init.initialized = false;
// force-flush all streams, so we get musl std streams printed out
var fflush = Module['_fflush'];
if (fflush) fflush(0);
// close all of our streams
for (var i = 0; i < FS.streams.length; i++) {
var stream = FS.streams[i];
if (!stream) {
continue;
}
FS.close(stream);
}
},getMode:function (canRead, canWrite) {
var mode = 0;
if (canRead) mode |= 292 | 73;
if (canWrite) mode |= 146;
return mode;
},joinPath:function (parts, forceRelative) {
var path = PATH.join.apply(null, parts);
if (forceRelative && path[0] == '/') path = path.substr(1);
return path;
},absolutePath:function (relative, base) {
return PATH.resolve(base, relative);
},standardizePath:function (path) {
return PATH.normalize(path);
},findObject:function (path, dontResolveLastLink) {
var ret = FS.analyzePath(path, dontResolveLastLink);
if (ret.exists) {
return ret.object;
} else {
___setErrNo(ret.error);
return null;
}
},analyzePath:function (path, dontResolveLastLink) {
// operate from within the context of the symlink's target
try {
var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
path = lookup.path;
} catch (e) {
}
var ret = {
isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
parentExists: false, parentPath: null, parentObject: null
};
try {
var lookup = FS.lookupPath(path, { parent: true });
ret.parentExists = true;
ret.parentPath = lookup.path;
ret.parentObject = lookup.node;
ret.name = PATH.basename(path);
lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
ret.exists = true;
ret.path = lookup.path;
ret.object = lookup.node;
ret.name = lookup.node.name;
ret.isRoot = lookup.path === '/';
} catch (e) {
ret.error = e.errno;
};
return ret;
},createFolder:function (parent, name, canRead, canWrite) {
var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
var mode = FS.getMode(canRead, canWrite);
return FS.mkdir(path, mode);
},createPath:function (parent, path, canRead, canWrite) {
parent = typeof parent === 'string' ? parent : FS.getPath(parent);
var parts = path.split('/').reverse();
while (parts.length) {
var part = parts.pop();
if (!part) continue;
var current = PATH.join2(parent, part);
try {
FS.mkdir(current);
} catch (e) {
// ignore EEXIST
}
parent = current;
}
return current;
},createFile:function (parent, name, properties, canRead, canWrite) {
var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
var mode = FS.getMode(canRead, canWrite);
return FS.create(path, mode);
},createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
var mode = FS.getMode(canRead, canWrite);
var node = FS.create(path, mode);
if (data) {
if (typeof data === 'string') {
var arr = new Array(data.length);
for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
data = arr;
}
// make sure we can write to the file
FS.chmod(node, mode | 146);
var stream = FS.open(node, 'w');
FS.write(stream, data, 0, data.length, 0, canOwn);
FS.close(stream);
FS.chmod(node, mode);
}
return node;
},createDevice:function (parent, name, input, output) {
var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
var mode = FS.getMode(!!input, !!output);
if (!FS.createDevice.major) FS.createDevice.major = 64;
var dev = FS.makedev(FS.createDevice.major++, 0);
// Create a fake device that a set of stream ops to emulate
// the old behavior.
FS.registerDevice(dev, {
open: function(stream) {
stream.seekable = false;
},
close: function(stream) {
// flush any pending line data
if (output && output.buffer && output.buffer.length) {
output(10);
}
},
read: function(stream, buffer, offset, length, pos /* ignored */) {
var bytesRead = 0;
for (var i = 0; i < length; i++) {
var result;
try {
result = input();
} catch (e) {
throw new FS.ErrnoError(ERRNO_CODES.EIO);
}
if (result === undefined && bytesRead === 0) {
throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
}
if (result === null || result === undefined) break;
bytesRead++;
buffer[offset+i] = result;
}
if (bytesRead) {
stream.node.timestamp = Date.now();
}
return bytesRead;
},
write: function(stream, buffer, offset, length, pos) {
for (var i = 0; i < length; i++) {
try {
output(buffer[offset+i]);
} catch (e) {
throw new FS.ErrnoError(ERRNO_CODES.EIO);
}
}
if (length) {
stream.node.timestamp = Date.now();
}
return i;
}
});
return FS.mkdev(path, mode, dev);
},createLink:function (parent, name, target, canRead, canWrite) {
var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
return FS.symlink(target, path);
},forceLoadFile:function (obj) {
if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
var success = true;
if (typeof XMLHttpRequest !== 'undefined') {
throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
} else if (Module['read']) {
// Command-line.
try {
// WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
//          read() will try to parse UTF8.
obj.contents = intArrayFromString(Module['read'](obj.url), true);
obj.usedBytes = obj.contents.length;
} catch (e) {
success = false;
}
} else {
throw new Error('Cannot load without read() or XMLHttpRequest.');
}
if (!success) ___setErrNo(ERRNO_CODES.EIO);
return success;
},createLazyFile:function (parent, name, url, canRead, canWrite) {
// Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
function LazyUint8Array() {
this.lengthKnown = false;
this.chunks = []; // Loaded chunks. Index is the chunk number
}
LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
if (idx > this.length-1 || idx < 0) {
return undefined;
}
var chunkOffset = idx % this.chunkSize;
var chunkNum = (idx / this.chunkSize)|0;
return this.getter(chunkNum)[chunkOffset];
}
LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
this.getter = getter;
}
LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
// Find length
var xhr = new XMLHttpRequest();
xhr.open('HEAD', url, false);
xhr.send(null);
if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
var datalength = Number(xhr.getResponseHeader("Content-length"));
var header;
var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
var chunkSize = 1024*1024; // Chunk size in bytes
if (!hasByteServing) chunkSize = datalength;
// Function to get a range from the remote URL.
var doXHR = (function(from, to) {
if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
// TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
var xhr = new XMLHttpRequest();
xhr.open('GET', url, false);
if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
// Some hints to the browser that we want binary data.
if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
if (xhr.overrideMimeType) {
xhr.overrideMimeType('text/plain; charset=x-user-defined');
}
xhr.send(null);
if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
if (xhr.response !== undefined) {
return new Uint8Array(xhr.response || []);
} else {
return intArrayFromString(xhr.responseText || '', true);
}
});
var lazyArray = this;
lazyArray.setDataGetter(function(chunkNum) {
var start = chunkNum * chunkSize;
var end = (chunkNum+1) * chunkSize - 1; // including this byte
end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
lazyArray.chunks[chunkNum] = doXHR(start, end);
}
if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
return lazyArray.chunks[chunkNum];
});
if (usesGzip || !datalength) {
// if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
datalength = this.getter(0).length;
chunkSize = datalength;
console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
}
this._length = datalength;
this._chunkSize = chunkSize;
this.lengthKnown = true;
}
if (typeof XMLHttpRequest !== 'undefined') {
if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
var lazyArray = new LazyUint8Array();
Object.defineProperties(lazyArray, {
length: {
get: function() {
if(!this.lengthKnown) {
this.cacheLength();
}
return this._length;
}
},
chunkSize: {
get: function() {
if(!this.lengthKnown) {
this.cacheLength();
}
return this._chunkSize;
}
}
});
var properties = { isDevice: false, contents: lazyArray };
} else {
var properties = { isDevice: false, url: url };
}
var node = FS.createFile(parent, name, properties, canRead, canWrite);
// This is a total hack, but I want to get this lazy file code out of the
// core of MEMFS. If we want to keep this lazy file concept I feel it should
// be its own thin LAZYFS proxying calls to MEMFS.
if (properties.contents) {
node.contents = properties.contents;
} else if (properties.url) {
node.contents = null;
node.url = properties.url;
}
// Add a function that defers querying the file size until it is asked the first time.
Object.defineProperties(node, {
usedBytes: {
get: function() { return this.contents.length; }
}
});
// override each stream op with one that tries to force load the lazy file first
var stream_ops = {};
var keys = Object.keys(node.stream_ops);
keys.forEach(function(key) {
var fn = node.stream_ops[key];
stream_ops[key] = function forceLoadLazyFile() {
if (!FS.forceLoadFile(node)) {
throw new FS.ErrnoError(ERRNO_CODES.EIO);
}
return fn.apply(null, arguments);
};
});
// use a custom read function
stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
if (!FS.forceLoadFile(node)) {
throw new FS.ErrnoError(ERRNO_CODES.EIO);
}
var contents = stream.node.contents;
if (position >= contents.length)
return 0;
var size = Math.min(contents.length - position, length);
assert(size >= 0);
if (contents.slice) { // normal array
for (var i = 0; i < size; i++) {
buffer[offset + i] = contents[position + i];
}
} else {
for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
buffer[offset + i] = contents.get(position + i);
}
}
return size;
};
node.stream_ops = stream_ops;
return node;
},createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
Browser.init(); // XXX perhaps this method should move onto Browser?
// TODO we should allow people to just pass in a complete filename instead
// of parent and name being that we just join them anyways
var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
function processData(byteArray) {
function finish(byteArray) {
if (preFinish) preFinish();
if (!dontCreateFile) {
FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
}
if (onload) onload();
removeRunDependency(dep);
}
var handled = false;
Module['preloadPlugins'].forEach(function(plugin) {
if (handled) return;
if (plugin['canHandle'](fullname)) {
plugin['handle'](byteArray, fullname, finish, function() {
if (onerror) onerror();
removeRunDependency(dep);
});
handled = true;
}
});
if (!handled) finish(byteArray);
}
addRunDependency(dep);
if (typeof url == 'string') {
Browser.asyncLoad(url, function(byteArray) {
processData(byteArray);
}, onerror);
} else {
processData(url);
}
},indexedDB:function () {
return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
},DB_NAME:function () {
return 'EM_FS_' + window.location.pathname;
},DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
onload = onload || function(){};
onerror = onerror || function(){};
var indexedDB = FS.indexedDB();
try {
var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
} catch (e) {
return onerror(e);
}
openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
console.log('creating db');
var db = openRequest.result;
db.createObjectStore(FS.DB_STORE_NAME);
};
openRequest.onsuccess = function openRequest_onsuccess() {
var db = openRequest.result;
var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
var files = transaction.objectStore(FS.DB_STORE_NAME);
var ok = 0, fail = 0, total = paths.length;
function finish() {
if (fail == 0) onload(); else onerror();
}
paths.forEach(function(path) {
var putRequest = files.put(FS.analyzePath(path).object.contents, path);
putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
});
transaction.onerror = onerror;
};
openRequest.onerror = onerror;
},loadFilesFromDB:function (paths, onload, onerror) {
onload = onload || function(){};
onerror = onerror || function(){};
var indexedDB = FS.indexedDB();
try {
var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
} catch (e) {
return onerror(e);
}
openRequest.onupgradeneeded = onerror; // no database to load from
openRequest.onsuccess = function openRequest_onsuccess() {
var db = openRequest.result;
try {
var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
} catch(e) {
onerror(e);
return;
}
var files = transaction.objectStore(FS.DB_STORE_NAME);
var ok = 0, fail = 0, total = paths.length;
function finish() {
if (fail == 0) onload(); else onerror();
}
paths.forEach(function(path) {
var getRequest = files.get(path);
getRequest.onsuccess = function getRequest_onsuccess() {
if (FS.analyzePath(path).exists) {
FS.unlink(path);
}
FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
ok++;
if (ok + fail == total) finish();
};
getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
});
transaction.onerror = onerror;
};
openRequest.onerror = onerror;
}};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
if (path[0] !== '/') {
// relative path
var dir;
if (dirfd === -100) {
dir = FS.cwd();
} else {
var dirstream = FS.getStream(dirfd);
if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
dir = dirstream.path;
}
path = PATH.join2(dir, path);
}
return path;
},doStat:function (func, path, buf) {
try {
var stat = func(path);
} catch (e) {
if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
// an error occurred while trying to look up the path; we should just report ENOTDIR
return -ERRNO_CODES.ENOTDIR;
}
throw e;
}
HEAP32[((buf)>>2)]=stat.dev;
HEAP32[(((buf)+(4))>>2)]=0;
HEAP32[(((buf)+(8))>>2)]=stat.ino;
HEAP32[(((buf)+(12))>>2)]=stat.mode;
HEAP32[(((buf)+(16))>>2)]=stat.nlink;
HEAP32[(((buf)+(20))>>2)]=stat.uid;
HEAP32[(((buf)+(24))>>2)]=stat.gid;
HEAP32[(((buf)+(28))>>2)]=stat.rdev;
HEAP32[(((buf)+(32))>>2)]=0;
HEAP32[(((buf)+(36))>>2)]=stat.size;
HEAP32[(((buf)+(40))>>2)]=4096;
HEAP32[(((buf)+(44))>>2)]=stat.blocks;
HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
HEAP32[(((buf)+(52))>>2)]=0;
HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
HEAP32[(((buf)+(60))>>2)]=0;
HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
HEAP32[(((buf)+(68))>>2)]=0;
HEAP32[(((buf)+(72))>>2)]=stat.ino;
return 0;
},doMsync:function (addr, stream, len, flags) {
var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
FS.msync(stream, buffer, 0, len, flags);
},doMkdir:function (path, mode) {
// remove a trailing slash, if one - /a/b/ has basename of '', but
// we want to create b in the context of this function
path = PATH.normalize(path);
if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
FS.mkdir(path, mode, 0);
return 0;
},doMknod:function (path, mode, dev) {
// we don't want this in the JS API as it uses mknod to create all nodes.
switch (mode & 61440) {
case 32768:
case 8192:
case 24576:
case 4096:
case 49152:
break;
default: return -ERRNO_CODES.EINVAL;
}
FS.mknod(path, mode, dev);
return 0;
},doReadlink:function (path, buf, bufsize) {
if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
var ret = FS.readlink(path);
var len = Math.min(bufsize, lengthBytesUTF8(ret));
var endChar = HEAP8[buf+len];
stringToUTF8(ret, buf, bufsize+1);
// readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
// stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
HEAP8[buf+len] = endChar;
return len;
},doAccess:function (path, amode) {
if (amode & ~7) {
// need a valid mode
return -ERRNO_CODES.EINVAL;
}
var node;
var lookup = FS.lookupPath(path, { follow: true });
node = lookup.node;
var perms = '';
if (amode & 4) perms += 'r';
if (amode & 2) perms += 'w';
if (amode & 1) perms += 'x';
if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
return -ERRNO_CODES.EACCES;
}
return 0;
},doDup:function (path, flags, suggestFD) {
var suggest = FS.getStream(suggestFD);
if (suggest) FS.close(suggest);
return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
},doReadv:function (stream, iov, iovcnt, offset) {
var ret = 0;
for (var i = 0; i < iovcnt; i++) {
var ptr = HEAP32[(((iov)+(i*8))>>2)];
var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
var curr = FS.read(stream, HEAP8,ptr, len, offset);
if (curr < 0) return -1;
ret += curr;
if (curr < len) break; // nothing more to read
}
return ret;
},doWritev:function (stream, iov, iovcnt, offset) {
var ret = 0;
for (var i = 0; i < iovcnt; i++) {
var ptr = HEAP32[(((iov)+(i*8))>>2)];
var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
var curr = FS.write(stream, HEAP8,ptr, len, offset);
if (curr < 0) return -1;
ret += curr;
}
return ret;
},varargs:0,get:function (varargs) {
SYSCALLS.varargs += 4;
var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
return ret;
},getStr:function () {
var ret = Pointer_stringify(SYSCALLS.get());
return ret;
},getStreamFromFD:function () {
var stream = FS.getStream(SYSCALLS.get());
if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
return stream;
},getSocketFromFD:function () {
var socket = SOCKFS.getSocket(SYSCALLS.get());
if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
return socket;
},getSocketAddress:function (allowNull) {
var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
if (allowNull && addrp === 0) return null;
var info = __read_sockaddr(addrp, addrlen);
if (info.errno) throw new FS.ErrnoError(info.errno);
info.addr = DNS.lookup_addr(info.addr) || info.addr;
return info;
},get64:function () {
var low = SYSCALLS.get(), high = SYSCALLS.get();
if (low >= 0) assert(high === 0);
else assert(high === -1);
return low;
},getZero:function () {
assert(SYSCALLS.get() === 0);
}};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
try {
// llseek
var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
// NOTE: offset_high is unused - Emscripten's off_t is 32-bit
var offset = offset_low;
FS.llseek(stream, offset, whence);
HEAP32[((result)>>2)]=stream.position;
if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
return 0;
} catch (e) {
if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
return -e.errno;
}
}
function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
try {
// readv
var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
return SYSCALLS.doReadv(stream, iov, iovcnt);
} catch (e) {
if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
return -e.errno;
}
}
function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
try {
// writev
var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
return SYSCALLS.doWritev(stream, iov, iovcnt);
} catch (e) {
if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
return -e.errno;
}
}
function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
try {
// SYS_stat64
var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
return SYSCALLS.doStat(FS.stat, path, buf);
} catch (e) {
if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
return -e.errno;
}
}
function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
try {
// fcntl64
var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
switch (cmd) {
case 0: {
var arg = SYSCALLS.get();
if (arg < 0) {
return -ERRNO_CODES.EINVAL;
}
var newStream;
newStream = FS.open(stream.path, stream.flags, 0, arg);
return newStream.fd;
}
case 1:
case 2:
return 0;  // FD_CLOEXEC makes no sense for a single process.
case 3:
return stream.flags;
case 4: {
var arg = SYSCALLS.get();
stream.flags |= arg;
return 0;
}
case 12:
case 12: {
var arg = SYSCALLS.get();
var offset = 0;
// We're always unlocked.
HEAP16[(((arg)+(offset))>>1)]=2;
return 0;
}
case 13:
case 14:
case 13:
case 14:
return 0; // Pretend that the locking is successful.
case 16:
case 8:
return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
case 9:
// musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
___setErrNo(ERRNO_CODES.EINVAL);
return -1;
default: {
return -ERRNO_CODES.EINVAL;
}
}
} catch (e) {
if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
return -e.errno;
}
}
function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
try {
// open
var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
var stream = FS.open(pathname, flags, mode);
return stream.fd;
} catch (e) {
if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
return -e.errno;
}
}
function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
try {
// ioctl
var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
switch (op) {
case 21509:
case 21505: {
if (!stream.tty) return -ERRNO_CODES.ENOTTY;
return 0;
}
case 21510:
case 21511:
case 21512:
case 21506:
case 21507:
case 21508: {
if (!stream.tty) return -ERRNO_CODES.ENOTTY;
return 0; // no-op, not actually adjusting terminal settings
}
case 21519: {
if (!stream.tty) return -ERRNO_CODES.ENOTTY;
var argp = SYSCALLS.get();
HEAP32[((argp)>>2)]=0;
return 0;
}
case 21520: {
if (!stream.tty) return -ERRNO_CODES.ENOTTY;
return -ERRNO_CODES.EINVAL; // not supported
}
case 21531: {
var argp = SYSCALLS.get();
return FS.ioctl(stream, op, argp);
}
case 21523: {
// TODO: in theory we should write to the winsize struct that gets
// passed in, but for now musl doesn't read anything on it
if (!stream.tty) return -ERRNO_CODES.ENOTTY;
return 0;
}
default: abort('bad ioctl syscall ' + op);
}
} catch (e) {
if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
return -e.errno;
}
}
function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
try {
// close
var stream = SYSCALLS.getStreamFromFD();
FS.close(stream);
return 0;
} catch (e) {
if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
return -e.errno;
}
}
var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   
function ___unlock() {}
function _abort() {
Module['abort']();
}
function _clock() {
if (_clock.start === undefined) _clock.start = Date.now();
return ((Date.now() - _clock.start) * (1000000 / 1000))|0;
}
var _emscripten_asm_const_int=true;
function __exit(status) {
// void _exit(int status);
// http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
Module['exit'](status);
}function _exit(status) {
__exit(status);
}
function _llvm_eh_typeid_for(type) {
return type;
}
var _llvm_fabs_f32=Math_abs;
var _llvm_fabs_f64=Math_abs;
function _llvm_trap() {
abort('trap!');
}
var ___tm_current=STATICTOP; STATICTOP += 48;;
var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);
var _tzname=STATICTOP; STATICTOP += 16;;
var _daylight=STATICTOP; STATICTOP += 16;;
var _timezone=STATICTOP; STATICTOP += 16;;function _tzset() {
// TODO: Use (malleable) environment variables instead of system settings.
if (_tzset.called) return;
_tzset.called = true;
// timezone is specified as seconds west of UTC ("The external variable
// `timezone` shall be set to the difference, in seconds, between
// Coordinated Universal Time (UTC) and local standard time."), the same
// as returned by getTimezoneOffset().
// See http://pubs.opengroup.org/onlinepubs/009695399/functions/tzset.html
HEAP32[((_timezone)>>2)]=(new Date()).getTimezoneOffset() * 60;
var winter = new Date(2000, 0, 1);
var summer = new Date(2000, 6, 1);
HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
function extractZone(date) {
var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
return match ? match[1] : "GMT";
};
var winterName = extractZone(winter);
var summerName = extractZone(summer);
var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
// Northern hemisphere
HEAP32[((_tzname)>>2)]=winterNamePtr;
HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
} else {
HEAP32[((_tzname)>>2)]=summerNamePtr;
HEAP32[(((_tzname)+(4))>>2)]=winterNamePtr;
}
}function _localtime_r(time, tmPtr) {
_tzset();
var date = new Date(HEAP32[((time)>>2)]*1000);
HEAP32[((tmPtr)>>2)]=date.getSeconds();
HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
var start = new Date(date.getFullYear(), 0, 1);
var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
HEAP32[(((tmPtr)+(28))>>2)]=yday;
HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
// Attention: DST is in December in South, and some regions don't have DST at all.
var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
var winterOffset = start.getTimezoneOffset();
var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
HEAP32[(((tmPtr)+(32))>>2)]=dst;
var zonePtr = HEAP32[(((_tzname)+(dst ? 4 : 0))>>2)];
HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
return tmPtr;
}function _localtime(time) {
return _localtime_r(time, ___tm_current);
}
function _emscripten_memcpy_big(dest, src, num) {
HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
return dest;
} 
function _pthread_cond_wait() { return 0; }
var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
return PTHREAD_SPECIFIC[key] || 0;
}
var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
if (key == 0) {
return ERRNO_CODES.EINVAL;
}
HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
// values start at 0
PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
PTHREAD_SPECIFIC_NEXT_KEY++;
return 0;
}
function _pthread_once(ptr, func) {
if (!_pthread_once.seen) _pthread_once.seen = {};
if (ptr in _pthread_once.seen) return;
Module['dynCall_v'](func);
_pthread_once.seen[ptr] = 1;
}
function _pthread_setspecific(key, value) {
if (!(key in PTHREAD_SPECIFIC)) {
return ERRNO_CODES.EINVAL;
}
PTHREAD_SPECIFIC[key] = value;
return 0;
}
function __isLeapYear(year) {
return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
}
function __arraySum(array, index) {
var sum = 0;
for (var i = 0; i <= index; sum += array[i++]);
return sum;
}
var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
var newDate = new Date(date.getTime());
while(days > 0) {
var leap = __isLeapYear(newDate.getFullYear());
var currentMonth = newDate.getMonth();
var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
if (days > daysInCurrentMonth-newDate.getDate()) {
// we spill over to next month
days -= (daysInCurrentMonth-newDate.getDate()+1);
newDate.setDate(1);
if (currentMonth < 11) {
newDate.setMonth(currentMonth+1)
} else {
newDate.setMonth(0);
newDate.setFullYear(newDate.getFullYear()+1);
}
} else {
// we stay in current month 
newDate.setDate(newDate.getDate()+days);
return newDate;
}
}
return newDate;
}function _strftime(s, maxsize, format, tm) {
// size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
// http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
var tm_zone = HEAP32[(((tm)+(40))>>2)];
var date = {
tm_sec: HEAP32[((tm)>>2)],
tm_min: HEAP32[(((tm)+(4))>>2)],
tm_hour: HEAP32[(((tm)+(8))>>2)],
tm_mday: HEAP32[(((tm)+(12))>>2)],
tm_mon: HEAP32[(((tm)+(16))>>2)],
tm_year: HEAP32[(((tm)+(20))>>2)],
tm_wday: HEAP32[(((tm)+(24))>>2)],
tm_yday: HEAP32[(((tm)+(28))>>2)],
tm_isdst: HEAP32[(((tm)+(32))>>2)],
tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
};
var pattern = Pointer_stringify(format);
// expand format
var EXPANSION_RULES_1 = {
'%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
'%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
'%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
'%h': '%b',                       // Equivalent to %b
'%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
'%R': '%H:%M',                    // Replaced by the time in 24-hour notation
'%T': '%H:%M:%S',                 // Replaced by the time
'%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
'%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
};
for (var rule in EXPANSION_RULES_1) {
pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
}
var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
function leadingSomething(value, digits, character) {
var str = typeof value === 'number' ? value.toString() : (value || '');
while (str.length < digits) {
str = character[0]+str;
}
return str;
};
function leadingNulls(value, digits) {
return leadingSomething(value, digits, '0');
};
function compareByDay(date1, date2) {
function sgn(value) {
return value < 0 ? -1 : (value > 0 ? 1 : 0);
};
var compare;
if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
compare = sgn(date1.getDate()-date2.getDate());
}
}
return compare;
};
function getFirstWeekStartDate(janFourth) {
switch (janFourth.getDay()) {
case 0: // Sunday
return new Date(janFourth.getFullYear()-1, 11, 29);
case 1: // Monday
return janFourth;
case 2: // Tuesday
return new Date(janFourth.getFullYear(), 0, 3);
case 3: // Wednesday
return new Date(janFourth.getFullYear(), 0, 2);
case 4: // Thursday
return new Date(janFourth.getFullYear(), 0, 1);
case 5: // Friday
return new Date(janFourth.getFullYear()-1, 11, 31);
case 6: // Saturday
return new Date(janFourth.getFullYear()-1, 11, 30);
}
};
function getWeekBasedYear(date) {
var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
// this date is after the start of the first week of this year
if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
return thisDate.getFullYear()+1;
} else {
return thisDate.getFullYear();
}
} else { 
return thisDate.getFullYear()-1;
}
};
var EXPANSION_RULES_2 = {
'%a': function(date) {
return WEEKDAYS[date.tm_wday].substring(0,3);
},
'%A': function(date) {
return WEEKDAYS[date.tm_wday];
},
'%b': function(date) {
return MONTHS[date.tm_mon].substring(0,3);
},
'%B': function(date) {
return MONTHS[date.tm_mon];
},
'%C': function(date) {
var year = date.tm_year+1900;
return leadingNulls((year/100)|0,2);
},
'%d': function(date) {
return leadingNulls(date.tm_mday, 2);
},
'%e': function(date) {
return leadingSomething(date.tm_mday, 2, ' ');
},
'%g': function(date) {
// %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
// In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
// January 4th, which is also the week that includes the first Thursday of the year, and 
// is also the first week that contains at least four days in the year. 
// If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
// the last week of the preceding year; thus, for Saturday 2nd January 1999, 
// %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
// or 31st is a Monday, it and any following days are part of week 1 of the following year. 
// Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
return getWeekBasedYear(date).toString().substring(2);
},
'%G': function(date) {
return getWeekBasedYear(date);
},
'%H': function(date) {
return leadingNulls(date.tm_hour, 2);
},
'%I': function(date) {
var twelveHour = date.tm_hour;
if (twelveHour == 0) twelveHour = 12;
else if (twelveHour > 12) twelveHour -= 12;
return leadingNulls(twelveHour, 2);
},
'%j': function(date) {
// Day of the year (001-366)
return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
},
'%m': function(date) {
return leadingNulls(date.tm_mon+1, 2);
},
'%M': function(date) {
return leadingNulls(date.tm_min, 2);
},
'%n': function() {
return '\n';
},
'%p': function(date) {
if (date.tm_hour >= 0 && date.tm_hour < 12) {
return 'AM';
} else {
return 'PM';
}
},
'%S': function(date) {
return leadingNulls(date.tm_sec, 2);
},
'%t': function() {
return '\t';
},
'%u': function(date) {
var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
return day.getDay() || 7;
},
'%U': function(date) {
// Replaced by the week number of the year as a decimal number [00,53]. 
// The first Sunday of January is the first day of week 1; 
// days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
var janFirst = new Date(date.tm_year+1900, 0, 1);
var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
// is target date after the first Sunday?
if (compareByDay(firstSunday, endDate) < 0) {
// calculate difference in days between first Sunday and endDate
var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
return leadingNulls(Math.ceil(days/7), 2);
}
return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
},
'%V': function(date) {
// Replaced by the week number of the year (Monday as the first day of the week) 
// as a decimal number [01,53]. If the week containing 1 January has four 
// or more days in the new year, then it is considered week 1. 
// Otherwise, it is the last week of the previous year, and the next week is week 1. 
// Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
// if given date is before this years first week, then it belongs to the 53rd week of last year
return '53';
} 
if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
// if given date is after next years first week, then it belongs to the 01th week of next year
return '01';
}
// given date is in between CW 01..53 of this calendar year
var daysDifference;
if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
// first CW of this year starts last year
daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
} else {
// first CW of this year starts this year
daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
}
return leadingNulls(Math.ceil(daysDifference/7), 2);
},
'%w': function(date) {
var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
return day.getDay();
},
'%W': function(date) {
// Replaced by the week number of the year as a decimal number [00,53]. 
// The first Monday of January is the first day of week 1; 
// days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
var janFirst = new Date(date.tm_year, 0, 1);
var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
// is target date after the first Monday?
if (compareByDay(firstMonday, endDate) < 0) {
var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
return leadingNulls(Math.ceil(days/7), 2);
}
return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
},
'%y': function(date) {
// Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
return (date.tm_year+1900).toString().substring(2);
},
'%Y': function(date) {
// Replaced by the year as a decimal number (for example, 1997). [ tm_year]
return date.tm_year+1900;
},
'%z': function(date) {
// Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
// For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
var off = date.tm_gmtoff;
var ahead = off >= 0;
off = Math.abs(off) / 60;
// convert from minutes into hhmm format (which means 60 minutes = 100 units)
off = (off / 60)*100 + (off % 60);
return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
},
'%Z': function(date) {
return date.tm_zone;
},
'%%': function() {
return '%';
}
};
for (var rule in EXPANSION_RULES_2) {
if (pattern.indexOf(rule) >= 0) {
pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
}
}
var bytes = intArrayFromString(pattern, false);
if (bytes.length > maxsize) {
return 0;
} 
writeArrayToMemory(bytes, s);
return bytes.length-1;
}
function _time(ptr) {
var ret = (Date.now()/1000)|0;
if (ptr) {
HEAP32[((ptr)>>2)]=ret;
}
return ret;
}
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
DYNAMICTOP_PTR = staticAlloc(4);
STACK_BASE = STACKTOP = alignMemory(STATICTOP);
STACK_MAX = STACK_BASE + TOTAL_STACK;
DYNAMIC_BASE = alignMemory(STACK_MAX);
HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;
staticSealed = true; // seal the static portion of memory
var ASSERTIONS = false;
/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
var u8array = new Array(len);
var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
if (dontAddNull) u8array.length = numBytesWritten;
return u8array;
}
function intArrayToString(array) {
var ret = [];
for (var i = 0; i < array.length; i++) {
var chr = array[i];
if (chr > 0xFF) {
if (ASSERTIONS) {
assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
}
chr &= 0xFF;
}
ret.push(String.fromCharCode(chr));
}
return ret.join('');
}
// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149
// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com
/**
* Decodes a base64 string.
* @param {String} input The string to decode.
*/
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
var output = '';
var chr1, chr2, chr3;
var enc1, enc2, enc3, enc4;
var i = 0;
// remove all characters that are not A-Z, a-z, 0-9, +, /, or =
input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
do {
enc1 = keyStr.indexOf(input.charAt(i++));
enc2 = keyStr.indexOf(input.charAt(i++));
enc3 = keyStr.indexOf(input.charAt(i++));
enc4 = keyStr.indexOf(input.charAt(i++));
chr1 = (enc1 << 2) | (enc2 >> 4);
chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
chr3 = ((enc3 & 3) << 6) | enc4;
output = output + String.fromCharCode(chr1);
if (enc3 !== 64) {
output = output + String.fromCharCode(chr2);
}
if (enc4 !== 64) {
output = output + String.fromCharCode(chr3);
}
} while (i < input.length);
return output;
};
// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
var buf;
try {
buf = Buffer.from(s, 'base64');
} catch (_) {
buf = new Buffer(s, 'base64');
}
return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
}
try {
var decoded = decodeBase64(s);
var bytes = new Uint8Array(decoded.length);
for (var i = 0 ; i < decoded.length ; ++i) {
bytes[i] = decoded.charCodeAt(i);
}
return bytes;
} catch (_) {
throw new Error('Converting base64 string to bytes failed.');
}
}
// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
if (!isDataURI(filename)) {
return;
}
return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}
function invoke_fi(index,a1) {
try {
return Module["dynCall_fi"](index,a1);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_fii(index,a1,a2) {
try {
return Module["dynCall_fii"](index,a1,a2);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_fiif(index,a1,a2,a3) {
try {
return Module["dynCall_fiif"](index,a1,a2,a3);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_i(index) {
try {
return Module["dynCall_i"](index);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_ii(index,a1) {
try {
return Module["dynCall_ii"](index,a1);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_iii(index,a1,a2) {
try {
return Module["dynCall_iii"](index,a1,a2);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_iiii(index,a1,a2,a3) {
try {
return Module["dynCall_iiii"](index,a1,a2,a3);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_iiiii(index,a1,a2,a3,a4) {
try {
return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_iiiiid(index,a1,a2,a3,a4,a5) {
try {
return Module["dynCall_iiiiid"](index,a1,a2,a3,a4,a5);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
try {
return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
try {
return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_v(index) {
try {
Module["dynCall_v"](index);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_vi(index,a1) {
try {
Module["dynCall_vi"](index,a1);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_vif(index,a1,a2) {
try {
Module["dynCall_vif"](index,a1,a2);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_vifff(index,a1,a2,a3,a4) {
try {
Module["dynCall_vifff"](index,a1,a2,a3,a4);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_vifi(index,a1,a2,a3) {
try {
Module["dynCall_vifi"](index,a1,a2,a3);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_vififfi(index,a1,a2,a3,a4,a5,a6) {
try {
Module["dynCall_vififfi"](index,a1,a2,a3,a4,a5,a6);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_vifii(index,a1,a2,a3,a4) {
try {
Module["dynCall_vifii"](index,a1,a2,a3,a4);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_vii(index,a1,a2) {
try {
Module["dynCall_vii"](index,a1,a2);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_viif(index,a1,a2,a3) {
try {
Module["dynCall_viif"](index,a1,a2,a3);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_viifffffff(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
try {
Module["dynCall_viifffffff"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_viifffi(index,a1,a2,a3,a4,a5,a6) {
try {
Module["dynCall_viifffi"](index,a1,a2,a3,a4,a5,a6);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_viifi(index,a1,a2,a3,a4) {
try {
Module["dynCall_viifi"](index,a1,a2,a3,a4);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_viifii(index,a1,a2,a3,a4,a5) {
try {
Module["dynCall_viifii"](index,a1,a2,a3,a4,a5);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_viii(index,a1,a2,a3) {
try {
Module["dynCall_viii"](index,a1,a2,a3);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_viiif(index,a1,a2,a3,a4) {
try {
Module["dynCall_viiif"](index,a1,a2,a3,a4);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_viiii(index,a1,a2,a3,a4) {
try {
Module["dynCall_viiii"](index,a1,a2,a3,a4);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_viiiii(index,a1,a2,a3,a4,a5) {
try {
Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
try {
Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_viiiiiiff(index,a1,a2,a3,a4,a5,a6,a7,a8) {
try {
Module["dynCall_viiiiiiff"](index,a1,a2,a3,a4,a5,a6,a7,a8);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
try {
Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
try {
Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
} catch(e) {
if (typeof e !== 'number' && e !== 'longjmp') throw e;
Module["setThrew"](1, 0);
}
}
Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity, "byteLength": byteLength };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "invoke_fi": invoke_fi, "invoke_fii": invoke_fii, "invoke_fiif": invoke_fiif, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiid": invoke_iiiiid, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vif": invoke_vif, "invoke_vifff": invoke_vifff, "invoke_vifi": invoke_vifi, "invoke_vififfi": invoke_vififfi, "invoke_vifii": invoke_vifii, "invoke_vii": invoke_vii, "invoke_viif": invoke_viif, "invoke_viifffffff": invoke_viifffffff, "invoke_viifffi": invoke_viifffi, "invoke_viifi": invoke_viifi, "invoke_viifii": invoke_viifii, "invoke_viii": invoke_viii, "invoke_viiif": invoke_viiif, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiiff": invoke_viiiiiiff, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___assert_fail": ___assert_fail, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_end_catch": ___cxa_end_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "___cxa_find_matching_catch_3": ___cxa_find_matching_catch_3, "___cxa_find_matching_catch_5": ___cxa_find_matching_catch_5, "___cxa_free_exception": ___cxa_free_exception, "___cxa_pure_virtual": ___cxa_pure_virtual, "___cxa_rethrow": ___cxa_rethrow, "___cxa_throw": ___cxa_throw, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall195": ___syscall195, "___syscall221": ___syscall221, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "__addDays": __addDays, "__arraySum": __arraySum, "__exit": __exit, "__isLeapYear": __isLeapYear, "_abort": _abort, "_clock": _clock, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iiid": _emscripten_asm_const_iiid, "_emscripten_asm_const_iiiddddddd": _emscripten_asm_const_iiiddddddd, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_asm_const_iiiidd": _emscripten_asm_const_iiiidd, "_emscripten_asm_const_iiiii": _emscripten_asm_const_iiiii, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_exit": _exit, "_llvm_eh_typeid_for": _llvm_eh_typeid_for, "_llvm_fabs_f32": _llvm_fabs_f32, "_llvm_fabs_f64": _llvm_fabs_f64, "_llvm_trap": _llvm_trap, "_localtime": _localtime, "_localtime_r": _localtime_r, "_pthread_cond_wait": _pthread_cond_wait, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "_strftime": _strftime, "_time": _time, "_tzset": _tzset, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';
var Int8View = global.Int8Array;
var HEAP8 = new Int8View(buffer);
var Int16View = global.Int16Array;
var HEAP16 = new Int16View(buffer);
var Int32View = global.Int32Array;
var HEAP32 = new Int32View(buffer);
var Uint8View = global.Uint8Array;
var HEAPU8 = new Uint8View(buffer);
var Uint16View = global.Uint16Array;
var HEAPU16 = new Uint16View(buffer);
var Uint32View = global.Uint32Array;
var HEAPU32 = new Uint32View(buffer);
var Float32View = global.Float32Array;
var HEAPF32 = new Float32View(buffer);
var Float64View = global.Float64Array;
var HEAPF64 = new Float64View(buffer);
var byteLength = global.byteLength;
var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
var tempDoublePtr=env.tempDoublePtr|0;
var ABORT=env.ABORT|0;
var STACKTOP=env.STACKTOP|0;
var STACK_MAX=env.STACK_MAX|0;
var cttz_i8=env.cttz_i8|0;
var __THREW__ = 0;
var threwValue = 0;
var setjmpId = 0;
var undef = 0;
var nan = global.NaN, inf = global.Infinity;
var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
var tempRet0 = 0;
var Math_floor=global.Math.floor;
var Math_abs=global.Math.abs;
var Math_sqrt=global.Math.sqrt;
var Math_pow=global.Math.pow;
var Math_cos=global.Math.cos;
var Math_sin=global.Math.sin;
var Math_tan=global.Math.tan;
var Math_acos=global.Math.acos;
var Math_asin=global.Math.asin;
var Math_atan=global.Math.atan;
var Math_atan2=global.Math.atan2;
var Math_exp=global.Math.exp;
var Math_log=global.Math.log;
var Math_ceil=global.Math.ceil;
var Math_imul=global.Math.imul;
var Math_min=global.Math.min;
var Math_max=global.Math.max;
var Math_clz32=global.Math.clz32;
var Math_fround=global.Math.fround;
var abort=env.abort;
var assert=env.assert;
var enlargeMemory=env.enlargeMemory;
var getTotalMemory=env.getTotalMemory;
var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
var invoke_fi=env.invoke_fi;
var invoke_fii=env.invoke_fii;
var invoke_fiif=env.invoke_fiif;
var invoke_i=env.invoke_i;
var invoke_ii=env.invoke_ii;
var invoke_iii=env.invoke_iii;
var invoke_iiii=env.invoke_iiii;
var invoke_iiiii=env.invoke_iiiii;
var invoke_iiiiid=env.invoke_iiiiid;
var invoke_iiiiii=env.invoke_iiiiii;
var invoke_iiiiiii=env.invoke_iiiiiii;
var invoke_v=env.invoke_v;
var invoke_vi=env.invoke_vi;
var invoke_vif=env.invoke_vif;
var invoke_vifff=env.invoke_vifff;
var invoke_vifi=env.invoke_vifi;
var invoke_vififfi=env.invoke_vififfi;
var invoke_vifii=env.invoke_vifii;
var invoke_vii=env.invoke_vii;
var invoke_viif=env.invoke_viif;
var invoke_viifffffff=env.invoke_viifffffff;
var invoke_viifffi=env.invoke_viifffi;
var invoke_viifi=env.invoke_viifi;
var invoke_viifii=env.invoke_viifii;
var invoke_viii=env.invoke_viii;
var invoke_viiif=env.invoke_viiif;
var invoke_viiii=env.invoke_viiii;
var invoke_viiiii=env.invoke_viiiii;
var invoke_viiiiii=env.invoke_viiiiii;
var invoke_viiiiiiff=env.invoke_viiiiiiff;
var invoke_viiiiiii=env.invoke_viiiiiii;
var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
var ___assert_fail=env.___assert_fail;
var ___cxa_allocate_exception=env.___cxa_allocate_exception;
var ___cxa_begin_catch=env.___cxa_begin_catch;
var ___cxa_end_catch=env.___cxa_end_catch;
var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
var ___cxa_find_matching_catch_2=env.___cxa_find_matching_catch_2;
var ___cxa_find_matching_catch_3=env.___cxa_find_matching_catch_3;
var ___cxa_find_matching_catch_5=env.___cxa_find_matching_catch_5;
var ___cxa_free_exception=env.___cxa_free_exception;
var ___cxa_pure_virtual=env.___cxa_pure_virtual;
var ___cxa_rethrow=env.___cxa_rethrow;
var ___cxa_throw=env.___cxa_throw;
var ___gxx_personality_v0=env.___gxx_personality_v0;
var ___lock=env.___lock;
var ___resumeException=env.___resumeException;
var ___setErrNo=env.___setErrNo;
var ___syscall140=env.___syscall140;
var ___syscall145=env.___syscall145;
var ___syscall146=env.___syscall146;
var ___syscall195=env.___syscall195;
var ___syscall221=env.___syscall221;
var ___syscall5=env.___syscall5;
var ___syscall54=env.___syscall54;
var ___syscall6=env.___syscall6;
var ___unlock=env.___unlock;
var __addDays=env.__addDays;
var __arraySum=env.__arraySum;
var __exit=env.__exit;
var __isLeapYear=env.__isLeapYear;
var _abort=env._abort;
var _clock=env._clock;
var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
var _emscripten_asm_const_iiid=env._emscripten_asm_const_iiid;
var _emscripten_asm_const_iiiddddddd=env._emscripten_asm_const_iiiddddddd;
var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
var _emscripten_asm_const_iiiidd=env._emscripten_asm_const_iiiidd;
var _emscripten_asm_const_iiiii=env._emscripten_asm_const_iiiii;
var _emscripten_memcpy_big=env._emscripten_memcpy_big;
var _exit=env._exit;
var _llvm_eh_typeid_for=env._llvm_eh_typeid_for;
var _llvm_fabs_f32=env._llvm_fabs_f32;
var _llvm_fabs_f64=env._llvm_fabs_f64;
var _llvm_trap=env._llvm_trap;
var _localtime=env._localtime;
var _localtime_r=env._localtime_r;
var _pthread_cond_wait=env._pthread_cond_wait;
var _pthread_getspecific=env._pthread_getspecific;
var _pthread_key_create=env._pthread_key_create;
var _pthread_once=env._pthread_once;
var _pthread_setspecific=env._pthread_setspecific;
var _strftime=env._strftime;
var _time=env._time;
var _tzset=env._tzset;
var tempFloat = Math_fround(0);
const f0 = Math_fround(0);
function _emscripten_replace_memory(newBuffer) {
if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
HEAP8 = new Int8View(newBuffer);
HEAP16 = new Int16View(newBuffer);
HEAP32 = new Int32View(newBuffer);
HEAPU8 = new Uint8View(newBuffer);
HEAPU16 = new Uint16View(newBuffer);
HEAPU32 = new Uint32View(newBuffer);
HEAPF32 = new Float32View(newBuffer);
HEAPF64 = new Float64View(newBuffer);
buffer = newBuffer;
return true;
}
// EMSCRIPTEN_START_FUNCS
function __ZN11HanimAvatarC2EPK7ASDdata($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0$i = 0, $$0$i$1 = 0, $$011$i$i = 0, $$01115$i$i = 0, $$01116$i$i = 0, $$012$i$i = 0, $$012$i$i$1 = 0, $$012$i$i$i = 0, $$012$i$i$i$1 = 0, $$012$i$i398 = 0, $$012$i$i398$1 = 0, $$012$i$i408 = 0, $$01215$i$i = 0, $$01215$i$i$1 = 0, $$01215$i$i$i = 0, $$01215$i$i$i$1 = 0, $$01215$i$i395 = 0, $$01215$i$i395$1 = 0, $$01215$i$i405 = 0, $$01216$i$i = 0, $$01216$i$i$1 = 0, $$01216$i$i$i = 0, $$01216$i$i$i$1 = 0, $$01216$i$i396 = 0, $$01216$i$i396$1 = 0, $$01216$i$i406 = 0, $$0322 = 0, $$0323563 = 0, $$0329555 = 0, $$0332542 = 0, $$0334549 = 0, $$13 = 0, $$1325 = 0, $$1325$1 = 0, $$13308 = 0, $$18 = 0, $$18313 = 0, $$19 = 0, $$19314 = 0, $$20 = 0, $$20315 = 0, $$21 = 0, $$21316 = 0, $$22 = 0, $$22317 = 0, $$23 = 0, $$23318 = 0, $$24 = 0, $$24319 = 0, $$4 = 0, $$4299 = 0, $$byval_copy68 = 0, $$byval_copy88 = 0, $$in = 0, $$lcssa588 = 0, $$ph = 0, $$sink$i$i = 0, $$sink$i$i$i = 0, $$sink$i$i$i$1 = 0, $$sink$i$i374 = 0, $$sink$i$i374$1 = 0, $$sink$i$i386 = 0, $$sink$i$i386$1 = 0, $$sink$i$i400 = 0, $$sink$i$i400$1 = 0, $$sink$i$i410 = 0, $$sink$i$i418 = 0, $$sink$i$i429 = 0, $$sink$i$i438 = 0, $$sink$i$i452 = 0, $$sink1$i = 0, $$sink1$i$1 = 0, $$sroa$0$0$extract$trunc = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1003 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1009 = 0, $1011 = 0, $1013 = 0, $1015 = 0, $1016 = 0, $1018 = 0, $1024 = 0, $1026 = 0, $1028 = 0, $1034 = 0, $1037 = 0, $1039 = 0, $1041 = 0, $1043 = 0, $1044 = 0, $1046 = 0, $1053 = 0, $1054 = 0, $1059 = 0, $106 = 0, $1062 = 0, $1073 = 0, $1078 = 0, $108 = 0, $1080 = 0, $1082 = 0, $1084 = 0, $1086 = 0, $1088 = 0, $109 = 0, $1090 = 0, $1092 = 0, $1094 = 0, $1096 = 0, $1098 = 0, $11 = 0, $110 = 0, $1100 = 0, $1102 = 0, $1104 = 0, $1106 = 0, $1108 = 0, $111 = 0, $1110 = 0, $1112 = 0, $1114 = 0, $1116 = 0, $1118 = 0, $112 = 0, $1120 = 0, $1122 = 0, $1124 = 0, $1126 = 0, $1128 = 0, $1130 = 0, $1132 = 0, $1134 = 0, $1136 = 0, $1138 = 0, $114 = 0, $1141 = 0, $1142 = 0, $1145 = 0, $1148 = 0, $115 = 0, $1151 = 0, $1152 = 0, $1154 = 0, $1161 = 0, $1162 = 0, $1167 = 0, $117 = 0, $1173 = 0, $1176 = 0, $1180 = 0, $1182 = 0, $1189 = 0, $1190 = 0, $1198 = 0, $1199 = 0, $12 = 0, $1201 = 0, $1202 = 0, $1204 = 0, $1205 = 0, $1207 = 0, $1213 = 0, $1218 = 0, $1220 = 0, $1227 = 0, $1228 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1236 = 0, $1237 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1246 = 0, $1247 = 0, $128 = 0, $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $200 = 0, $203 = 0, $204 = 0, $205 = 0, $209 = 0, $21 = 0, $210 = 0, $212 = 0, $214 = 0, $215 = 0, $22 = 0, $226 = 0, $227 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $236 = 0, $237 = 0, $238 = 0, $24 = 0, $243 = 0, $244 = 0, $245 = 0, $25 = 0, $250 = 0, $252 = 0, $254 = 0, $255 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $264 = 0, $266 = 0, $268 = 0, $27 = 0, $270 = 0, $272 = 0, $274 = 0, $277 = 0, $278 = 0, $28 = 0, $280 = 0, $281 = 0, $283 = 0, $284 = 0, $286 = 0, $288 = 0, $293 = 0, $298 = 0, $3 = 0, $30 = 0, $300 = 0, $307 = 0, $308 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $314 = 0, $315 = 0, $323 = 0, $324 = 0, $325 = 0, $328 = 0, $329 = 0, $33 = 0, $339 = 0, $341 = 0, $343 = 0, $344 = 0, $345 = 0, $347 = 0, $348 = 0, $350 = 0, $357 = 0, $358 = 0, $366 = 0, $367 = 0, $369 = 0, $370 = 0, $372 = 0, $373 = 0, $375 = 0, $381 = 0, $386 = 0, $388 = 0, $395 = 0, $396 = 0, $398 = 0, $399 = 0, $4 = 0, $400 = 0, $402 = 0, $403 = 0, $410 = 0, $411 = 0, $412 = 0, $414 = 0, $415 = 0, $424 = 0, $426 = 0, $428 = 0, $429 = 0, $431 = 0, $432 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $44 = 0, $441 = 0, $443 = 0, $448 = 0, $454 = 0, $456 = 0, $461 = 0, $463 = 0, $466 = 0, $468 = 0, $471 = 0, $473 = 0, $474 = 0, $478 = 0, $482 = 0, $484 = 0, $488 = 0, $497 = 0, $5 = 0, $50 = 0, $501 = 0, $503 = 0, $505 = 0, $506 = 0, $507 = 0, $509 = 0, $51 = 0, $514 = 0, $517 = 0, $518 = 0, $52 = 0, $520 = 0, $527 = 0, $528 = 0, $53 = 0, $533 = 0, $539 = 0, $54 = 0, $542 = 0, $544 = 0, $547 = 0, $55 = 0, $550 = 0, $554 = 0, $555 = 0, $557 = 0, $56 = 0, $564 = 0, $565 = 0, $570 = 0, $571 = 0, $578 = 0, $58 = 0, $580 = 0, $583 = 0, $585 = 0, $587 = 0, $589 = 0, $59 = 0, $590 = 0, $593 = 0, $594 = 0, $595 = 0, $597 = 0, $6 = 0, $600 = 0, $601 = 0, $603 = 0, $604 = 0, $606 = 0, $607 = 0, $609 = 0, $61 = 0, $611 = 0, $617 = 0, $618 = 0, $619 = 0, $626 = 0, $628 = 0, $630 = 0, $632 = 0, $634 = 0, $636 = 0, $638 = 0, $639 = 0, $640 = 0, $642 = 0, $643 = 0, $644 = 0, $647 = 0, $648 = 0, $650 = 0, $657 = 0, $658 = 0, $664 = 0, $666 = 0, $669 = 0, $671 = 0, $676 = 0, $679 = 0, $681 = 0, $689 = 0, $694 = 0, $699 = 0, $7 = 0, $701 = 0, $708 = 0, $709 = 0, $711 = 0, $712 = 0, $713 = 0, $715 = 0, $716 = 0, $72 = 0, $724 = 0, $725 = 0, $726 = 0, $729 = 0, $730 = 0, $738 = 0, $742 = 0, $743 = 0, $744 = 0, $746 = 0, $747 = 0, $748 = 0, $750 = 0, $751 = 0, $759 = 0, $760 = 0, $761 = 0, $764 = 0, $765 = 0, $773 = 0, $776 = 0, $78 = 0, $780 = 0, $784 = 0, $786 = 0, $788 = 0, $795 = 0, $798 = 0, $8 = 0, $80 = 0, $800 = 0, $803 = 0, $805 = 0, $807 = 0, $81 = 0, $811 = 0, $813 = 0, $818 = 0, $82 = 0, $821 = 0, $822 = 0, $824 = 0, $826 = 0, $828 = 0, $83 = 0, $830 = 0, $832 = 0, $834 = 0, $836 = 0, $838 = 0, $84 = 0, $840 = 0, $842 = 0, $844 = 0, $846 = 0, $848 = 0, $850 = 0, $852 = 0, $854 = 0, $856 = 0, $86 = 0, $862 = 0, $865 = 0, $866 = 0, $868 = 0, $869 = 0, $87 = 0, $871 = 0, $873 = 0, $878 = 0, $883 = 0, $885 = 0, $89 = 0, $892 = 0, $893 = 0, $895 = 0, $896 = 0, $897 = 0, $899 = 0, $9 = 0, $900 = 0, $908 = 0, $909 = 0, $910 = 0, $913 = 0, $914 = 0, $924 = 0, $926 = 0, $928 = 0, $929 = 0, $932 = 0, $934 = 0, $935 = 0, $941 = 0, $943 = 0, $945 = 0, $951 = 0, $954 = 0, $956 = 0, $958 = 0, $960 = 0, $961 = 0, $963 = 0, $970 = 0, $971 = 0, $976 = 0, $979 = 0, $989 = 0, $993 = 0, $995 = 0, $998 = 0, $indvars$iv = 0, $indvars$iv$1 = 0, $indvars$iv613 = 0, $sext = 0, $vararg_buffer = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer22 = 0, $vararg_buffer26 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer36 = 0, $vararg_buffer39 = 0, $vararg_buffer41 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer51 = 0, $vararg_buffer56 = 0, $vararg_buffer61 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 368 | 0;
$$byval_copy88 = sp + 256 | 0;
$$byval_copy68 = sp + 232 | 0;
$vararg_buffer61 = sp + 136 | 0;
$vararg_buffer56 = sp + 120 | 0;
$vararg_buffer51 = sp + 104 | 0;
$vararg_buffer46 = sp + 88 | 0;
$vararg_buffer43 = sp + 80 | 0;
$vararg_buffer41 = sp + 72 | 0;
$vararg_buffer39 = sp + 64 | 0;
$vararg_buffer36 = sp + 56 | 0;
$vararg_buffer33 = sp + 48 | 0;
$vararg_buffer30 = sp + 40 | 0;
$vararg_buffer26 = sp + 32 | 0;
$vararg_buffer22 = sp + 24 | 0;
$vararg_buffer18 = sp + 16 | 0;
$vararg_buffer14 = sp + 8 | 0;
$vararg_buffer = sp;
$2 = sp + 184 | 0;
$3 = sp + 152 | 0;
$4 = sp + 252 | 0;
$5 = sp + 248 | 0;
$6 = sp + 228 | 0;
$7 = sp + 224 | 0;
$8 = sp + 220 | 0;
$9 = sp + 216 | 0;
$10 = sp + 212 | 0;
$11 = sp + 208 | 0;
HEAP8[$0 >> 0] = 1;
$12 = $0 + 4 | 0;
HEAP32[$12 >> 2] = 0;
HEAP32[$12 + 4 >> 2] = 0;
HEAP32[$12 + 8 >> 2] = 0;
HEAP32[$12 + 12 >> 2] = 0;
HEAP32[$12 + 16 >> 2] = 0;
HEAP32[$12 + 20 >> 2] = 0;
HEAP8[$0 + 28 >> 0] = 1;
$14 = $0 + 32 | 0;
$15 = $0 + 56 | 0;
$16 = $0 + 60 | 0;
$17 = $0 + 80 | 0;
$18 = $0 + 84 | 0;
$19 = $0 + 88 | 0;
$20 = $0 + 92 | 0;
$21 = $0 + 96 | 0;
$22 = $0 + 116 | 0;
$23 = $0 + 136 | 0;
HEAP32[$14 >> 2] = 0;
HEAP32[$14 + 4 >> 2] = 0;
HEAP32[$14 + 8 >> 2] = 0;
HEAP32[$14 + 12 >> 2] = 0;
HEAP32[$14 + 16 >> 2] = 0;
HEAP32[$14 + 20 >> 2] = 0;
HEAP32[$14 + 24 >> 2] = 0;
HEAP32[$14 + 28 >> 2] = 0;
HEAP32[$17 >> 2] = 0;
HEAP32[$17 + 4 >> 2] = 0;
HEAP32[$17 + 8 >> 2] = 0;
HEAP32[$17 + 12 >> 2] = 0;
HEAP32[$17 + 16 >> 2] = 0;
HEAP32[$23 >> 2] = -1;
$24 = $0 + 140 | 0;
HEAP32[$24 >> 2] = 0;
$25 = $0 + 124 | 0;
HEAP32[$25 >> 2] = 0;
$26 = $0 + 132 | 0;
HEAP32[$26 >> 2] = 0;
$27 = $0 + 128 | 0;
HEAP32[$27 >> 2] = 171;
$28 = _malloc(1368) | 0;
HEAP32[$22 >> 2] = $28;
$30 = $0 + 120 | 0;
if (!$28) {
HEAP32[$30 >> 2] = 0;
__THREW__ = 0;
HEAP32[$vararg_buffer >> 2] = 171;
HEAP32[$vararg_buffer + 4 >> 2] = 8;
invoke_vii(115, 57708, $vararg_buffer | 0);
$31 = __THREW__;
__THREW__ = 0;
if (!($31 & 1)) {
$33 = ___cxa_allocate_exception(4) | 0;
HEAP32[$33 >> 2] = 1;
__THREW__ = 0;
invoke_viii(75, $33 | 0, 32, 0);
__THREW__ = 0;
}
$260 = ___cxa_find_matching_catch_2() | 0;
$$24 = $260;
$$24319 = tempRet0;
___resumeException($$24 | 0);
}
HEAP32[$30 >> 2] = 171;
HEAP32[$28 >> 2] = 0;
HEAP16[$28 + 4 >> 1] = 0;
HEAP32[$28 + 8 >> 2] = 0;
HEAP16[$28 + 12 >> 1] = 0;
HEAP32[$28 + 16 >> 2] = 0;
HEAP16[(HEAP32[$22 >> 2] | 0) + 20 >> 1] = 0;
if ((HEAP32[$30 >> 2] | 0) > 3) {
$44 = 3;
do {
HEAP32[(HEAP32[$22 >> 2] | 0) + ($44 << 3) >> 2] = 0;
HEAP16[(HEAP32[$22 >> 2] | 0) + ($44 << 3) + 4 >> 1] = 0;
$44 = $44 + 1 | 0;
} while (($44 | 0) < (HEAP32[$30 >> 2] | 0));
}
$50 = $0 + 144 | 0;
$51 = $0 + 164 | 0;
HEAP32[$51 >> 2] = -1;
$52 = $0 + 168 | 0;
HEAP32[$52 >> 2] = 0;
$53 = $0 + 152 | 0;
HEAP32[$53 >> 2] = 0;
$54 = $0 + 160 | 0;
HEAP32[$54 >> 2] = 0;
$55 = $0 + 156 | 0;
HEAP32[$55 >> 2] = 341;
$56 = _malloc(2728) | 0;
HEAP32[$50 >> 2] = $56;
$58 = $0 + 148 | 0;
if (!$56) {
HEAP32[$58 >> 2] = 0;
__THREW__ = 0;
HEAP32[$vararg_buffer14 >> 2] = 341;
HEAP32[$vararg_buffer14 + 4 >> 2] = 8;
invoke_vii(115, 57708, $vararg_buffer14 | 0);
$59 = __THREW__;
__THREW__ = 0;
if (!($59 & 1)) {
$61 = ___cxa_allocate_exception(4) | 0;
HEAP32[$61 >> 2] = 1;
__THREW__ = 0;
invoke_viii(75, $61 | 0, 32, 0);
__THREW__ = 0;
}
$262 = ___cxa_find_matching_catch_2() | 0;
$$23 = $262;
$$23318 = tempRet0;
} else {
HEAP32[$58 >> 2] = 341;
HEAP32[$56 >> 2] = 0;
HEAP16[$56 + 4 >> 1] = 0;
HEAP32[$56 + 8 >> 2] = 0;
HEAP16[$56 + 12 >> 1] = 0;
HEAP32[$56 + 16 >> 2] = 0;
HEAP16[(HEAP32[$50 >> 2] | 0) + 20 >> 1] = 0;
if ((HEAP32[$58 >> 2] | 0) > 3) {
$72 = 3;
do {
HEAP32[(HEAP32[$50 >> 2] | 0) + ($72 << 3) >> 2] = 0;
HEAP16[(HEAP32[$50 >> 2] | 0) + ($72 << 3) + 4 >> 1] = 0;
$72 = $72 + 1 | 0;
} while (($72 | 0) < (HEAP32[$58 >> 2] | 0));
}
$78 = $0 + 172 | 0;
HEAP32[$0 + 192 >> 2] = 0;
$80 = $0 + 196 | 0;
HEAP32[$80 >> 2] = 0;
$81 = $0 + 180 | 0;
HEAP32[$81 >> 2] = 0;
$82 = $0 + 188 | 0;
HEAP32[$82 >> 2] = 0;
$83 = $0 + 184 | 0;
HEAP32[$83 >> 2] = 341;
$84 = _malloc(2728) | 0;
HEAP32[$78 >> 2] = $84;
$86 = $0 + 176 | 0;
if (!$84) {
HEAP32[$86 >> 2] = 0;
__THREW__ = 0;
HEAP32[$vararg_buffer18 >> 2] = 341;
HEAP32[$vararg_buffer18 + 4 >> 2] = 8;
invoke_vii(115, 57708, $vararg_buffer18 | 0);
$87 = __THREW__;
__THREW__ = 0;
if (!($87 & 1)) {
$89 = ___cxa_allocate_exception(4) | 0;
HEAP32[$89 >> 2] = 1;
__THREW__ = 0;
invoke_viii(75, $89 | 0, 32, 0);
__THREW__ = 0;
}
$264 = ___cxa_find_matching_catch_2() | 0;
$$22 = $264;
$$22317 = tempRet0;
} else {
HEAP32[$86 >> 2] = 341;
HEAP32[$84 >> 2] = 0;
HEAP16[$84 + 4 >> 1] = 0;
HEAP32[$84 + 8 >> 2] = 0;
HEAP16[$84 + 12 >> 1] = 0;
HEAP32[$84 + 16 >> 2] = 0;
HEAP16[(HEAP32[$78 >> 2] | 0) + 20 >> 1] = 0;
if ((HEAP32[$86 >> 2] | 0) > 3) {
$100 = 3;
do {
HEAP32[(HEAP32[$78 >> 2] | 0) + ($100 << 3) >> 2] = 0;
HEAP16[(HEAP32[$78 >> 2] | 0) + ($100 << 3) + 4 >> 1] = 0;
$100 = $100 + 1 | 0;
} while (($100 | 0) < (HEAP32[$86 >> 2] | 0));
}
$106 = $0 + 200 | 0;
HEAP32[$0 + 220 >> 2] = -1;
$108 = $0 + 224 | 0;
HEAP32[$108 >> 2] = 0;
$109 = $0 + 208 | 0;
HEAP32[$109 >> 2] = 0;
$110 = $0 + 216 | 0;
HEAP32[$110 >> 2] = 0;
$111 = $0 + 212 | 0;
HEAP32[$111 >> 2] = 171;
$112 = _malloc(1368) | 0;
HEAP32[$106 >> 2] = $112;
$114 = $0 + 204 | 0;
if (!$112) {
HEAP32[$114 >> 2] = 0;
__THREW__ = 0;
HEAP32[$vararg_buffer22 >> 2] = 171;
HEAP32[$vararg_buffer22 + 4 >> 2] = 8;
invoke_vii(115, 57708, $vararg_buffer22 | 0);
$115 = __THREW__;
__THREW__ = 0;
if (!($115 & 1)) {
$117 = ___cxa_allocate_exception(4) | 0;
HEAP32[$117 >> 2] = 1;
__THREW__ = 0;
invoke_viii(75, $117 | 0, 32, 0);
__THREW__ = 0;
}
$266 = ___cxa_find_matching_catch_2() | 0;
$$21 = $266;
$$21316 = tempRet0;
} else {
HEAP32[$114 >> 2] = 171;
HEAP32[$112 >> 2] = 0;
HEAP16[$112 + 4 >> 1] = 0;
HEAP32[$112 + 8 >> 2] = 0;
HEAP16[$112 + 12 >> 1] = 0;
HEAP32[$112 + 16 >> 2] = 0;
HEAP16[(HEAP32[$106 >> 2] | 0) + 20 >> 1] = 0;
if ((HEAP32[$114 >> 2] | 0) > 3) {
$128 = 3;
do {
HEAP32[(HEAP32[$106 >> 2] | 0) + ($128 << 3) >> 2] = 0;
HEAP16[(HEAP32[$106 >> 2] | 0) + ($128 << 3) + 4 >> 1] = 0;
$128 = $128 + 1 | 0;
} while (($128 | 0) < (HEAP32[$114 >> 2] | 0));
}
$134 = $0 + 228 | 0;
HEAP32[$134 >> 2] = 0;
$135 = $0 + 232 | 0;
HEAPF32[$135 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 236 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 240 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 244 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 248 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 252 >> 2] = Math_fround(.75);
HEAPF32[$0 + 256 >> 2] = Math_fround(.5);
HEAPF32[$0 + 260 >> 2] = Math_fround(2.0);
HEAPF32[$0 + 264 >> 2] = Math_fround(.5);
HEAPF32[$0 + 268 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 272 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 276 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 280 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 284 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 288 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 292 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 296 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 300 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 304 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 308 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 312 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 316 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 320 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 324 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 328 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 332 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 336 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 340 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 344 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 348 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 352 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 356 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 360 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 364 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 368 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 372 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 376 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 380 >> 2] = Math_fround(.0500000007);
HEAPF32[$0 + 384 >> 2] = Math_fround(1.79999995);
HEAPF32[$0 + 388 >> 2] = Math_fround(.0900000035);
HEAPF32[$0 + 392 >> 2] = Math_fround(.0170000009);
HEAPF32[$0 + 396 >> 2] = Math_fround(.400000006);
HEAPF32[$0 + 400 >> 2] = Math_fround(.419999987);
HEAPF32[$0 + 404 >> 2] = Math_fround(.400000006);
HEAPF32[$0 + 408 >> 2] = Math_fround(.00249999994);
HEAPF32[$0 + 412 >> 2] = Math_fround(.00499999989);
HEAPF32[$0 + 416 >> 2] = Math_fround(.00650000013);
HEAPF32[$0 + 420 >> 2] = Math_fround(.00650000013);
HEAPF32[$0 + 424 >> 2] = Math_fround(.00200000009);
HEAPF32[$0 + 428 >> 2] = Math_fround(.00400000019);
HEAPF32[$0 + 432 >> 2] = Math_fround(1.14999998);
HEAPF32[$0 + 436 >> 2] = Math_fround(.00999999977);
HEAPF32[$0 + 440 >> 2] = Math_fround(.0199999996);
HEAPF32[$0 + 444 >> 2] = Math_fround(1.10000002);
HEAPF32[$0 + 448 >> 2] = Math_fround(.5);
HEAPF32[$0 + 452 >> 2] = Math_fround(2.0);
HEAPF32[$0 + 456 >> 2] = Math_fround(.00499999989);
HEAPF32[$0 + 460 >> 2] = Math_fround(1.10000002);
HEAPF32[$0 + 464 >> 2] = Math_fround(.0199999996);
HEAPF32[$0 + 468 >> 2] = Math_fround(.0299999993);
HEAPF32[$0 + 472 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 476 >> 2] = Math_fround(1.14999998);
HEAPF32[$0 + 480 >> 2] = Math_fround(.00999999977);
HEAPF32[$0 + 484 >> 2] = Math_fround(.00200000009);
$200 = HEAP32[$1 + 8 >> 2] | 0;
$203 = (_strncmp($200, 20549, 3) | 0) == 0 & 1;
HEAP8[72207] = $203;
__THREW__ = 0;
$204 = invoke_ii(21, $200 | 0) | 0;
$205 = __THREW__;
__THREW__ = 0;
if ($205 & 1) label = 35; else {
HEAP32[$15 >> 2] = $204;
__THREW__ = 0;
$209 = invoke_ii(21, HEAP32[$1 + 4 >> 2] | 0) | 0;
$210 = __THREW__;
__THREW__ = 0;
if ($210 & 1) label = 35; else {
HEAP32[$16 >> 2] = $209;
__THREW__ = 0;
invoke_vifff(2, $2 | 0, .0253999997, -.0253999997, .0126999998);
$212 = __THREW__;
__THREW__ = 0;
if ($212 & 1) label = 36; else {
$214 = $2 + 12 | 0;
__THREW__ = 0;
invoke_vifff(2, $214 | 0, .0253999997, .0253999997, .0126999998);
$215 = __THREW__;
__THREW__ = 0;
if ($215 & 1) label = 36; else {
HEAPF32[$3 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 4 >> 2] = Math_fround(-.707000017);
HEAPF32[$3 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 12 >> 2] = Math_fround(.707000017);
HEAPF32[$3 + 16 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 20 >> 2] = Math_fround(-.707000017);
HEAPF32[$3 + 24 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 28 >> 2] = Math_fround(.707000017);
HEAP32[$0 + 64 >> 2] = HEAP32[425];
$226 = $0 + 68 | 0;
HEAP32[$226 >> 2] = 0;
$227 = $0 + 72 | 0;
HEAP32[$227 >> 2] = 0;
HEAP32[$0 + 76 >> 2] = 0;
$229 = $0 + 100 | 0;
HEAP32[$229 >> 2] = 0;
__THREW__ = 0;
$230 = invoke_ii(20, 16) | 0;
$231 = __THREW__;
__THREW__ = 0;
L48 : do if ($231 & 1) label = 37; else {
HEAP32[$230 + 4 >> 2] = 10;
HEAP32[$230 + 12 >> 2] = 0;
HEAP32[$230 >> 2] = 0;
HEAP32[$230 + 8 >> 2] = 0;
$236 = $0 + 104 | 0;
HEAP32[$236 >> 2] = $230;
__THREW__ = 0;
$237 = invoke_ii(20, 16) | 0;
$238 = __THREW__;
__THREW__ = 0;
if ($238 & 1) label = 37; else {
HEAP32[$237 + 4 >> 2] = 10;
HEAP32[$237 + 12 >> 2] = 0;
HEAP32[$237 >> 2] = 0;
HEAP32[$237 + 8 >> 2] = 0;
$243 = $0 + 108 | 0;
HEAP32[$243 >> 2] = $237;
__THREW__ = 0;
$244 = invoke_ii(20, 16) | 0;
$245 = __THREW__;
__THREW__ = 0;
if ($245 & 1) {
label = 37;
break;
}
HEAP32[$244 + 4 >> 2] = 10;
HEAP32[$244 + 12 >> 2] = 0;
HEAP32[$244 >> 2] = 0;
HEAP32[$244 + 8 >> 2] = 0;
$250 = $0 + 112 | 0;
HEAP32[$250 >> 2] = $244;
HEAP32[$0 + 488 >> 2] = 0;
_memcpy($135 | 0, 64676, 148) | 0;
HEAP32[$20 >> 2] = 65420;
HEAP32[$21 >> 2] = 65760;
HEAP32[$18 >> 2] = 65420;
HEAP32[$19 >> 2] = 65760;
$252 = $1 + 12 | 0;
__THREW__ = 0;
$254 = invoke_ii(23, HEAP32[$252 >> 2] | 0) | 0;
$255 = __THREW__;
__THREW__ = 0;
if ($255 & 1) {
$274 = ___cxa_find_matching_catch_2() | 0;
$$18 = $274;
$$18313 = tempRet0;
break;
}
$257 = ($254 | 0) > 0;
L55 : do if ($257) {
$$0323563 = 0;
L56 : while (1) {
__THREW__ = 0;
$277 = invoke_iii(24, HEAP32[$252 >> 2] | 0, $$0323563 | 0) | 0;
$278 = __THREW__;
__THREW__ = 0;
if ($278 & 1) {
label = 55;
break;
}
__THREW__ = 0;
$280 = invoke_ii(21, $277 | 0) | 0;
$281 = __THREW__;
__THREW__ = 0;
if ($281 & 1) {
label = 55;
break;
}
__THREW__ = 0;
$283 = invoke_ii(20, 104) | 0;
$284 = __THREW__;
__THREW__ = 0;
if ($284 & 1) {
label = 56;
break;
}
__THREW__ = 0;
invoke_viiiiii(4, $283 | 0, $280 | 0, $$0323563 | 0, 0, 0, 0);
$286 = __THREW__;
__THREW__ = 0;
if ($286 & 1) {
label = 57;
break;
}
$288 = HEAP32[$236 >> 2] | 0;
if ((HEAP32[$288 + 8 >> 2] | 0) <= ($$0323563 | 0)) {
$293 = HEAP32[$288 + 4 >> 2] | 0;
__THREW__ = 0;
invoke_vii(125, $288 | 0, (($293 | 0) > ($$0323563 | 0) ? $293 : $$0323563 + 1 + ($$0323563 >>> 1) | 0) | 0);
$298 = __THREW__;
__THREW__ = 0;
if ($298 & 1) {
label = 56;
break;
}
}
$300 = $288 + 12 | 0;
if ((HEAP32[$300 >> 2] | 0) <= ($$0323563 | 0)) HEAP32[$300 >> 2] = $$0323563 + 1;
HEAP32[(HEAP32[$288 >> 2] | 0) + ($$0323563 << 2) >> 2] = $283;
__THREW__ = 0;
$307 = invoke_iii(22, $280 | 0, HEAP32[$30 >> 2] | 0) | 0;
$308 = __THREW__;
__THREW__ = 0;
if ($308 & 1) {
label = 56;
break;
}
$310 = HEAP32[$22 >> 2] | 0;
$311 = $310 + ($307 << 3) | 0;
$312 = $310 + ($307 << 3) + 4 | 0;
switch (HEAP16[$312 >> 1] | 0) {
case 0:
{
__THREW__ = 0;
$314 = invoke_ii(20, 12) | 0;
$315 = __THREW__;
__THREW__ = 0;
if ($315 & 1) {
label = 56;
break L56;
}
HEAP32[$314 >> 2] = $280;
HEAP32[$314 + 4 >> 2] = $$0323563;
HEAP32[$314 + 8 >> 2] = 0;
HEAP32[$311 >> 2] = $314;
HEAP32[$27 >> 2] = (HEAP32[$27 >> 2] | 0) + -1;
$$sink$i$i = $26;
break;
}
case 1:
{
HEAP32[$26 >> 2] = (HEAP32[$26 >> 2] | 0) + -1;
label = 52;
break;
}
default:
label = 52;
}
if ((label | 0) == 52) {
label = 0;
$323 = HEAP32[$311 >> 2] | 0;
__THREW__ = 0;
$324 = invoke_ii(20, 12) | 0;
$325 = __THREW__;
__THREW__ = 0;
if ($325 & 1) {
label = 56;
break;
}
$328 = $323 + 8 | 0;
$329 = HEAP32[$328 >> 2] | 0;
HEAP32[$324 >> 2] = $280;
HEAP32[$324 + 4 >> 2] = $$0323563;
HEAP32[$324 + 8 >> 2] = $329;
HEAP32[$328 >> 2] = $324;
$$sink$i$i = $25;
}
HEAP32[$$sink$i$i >> 2] = (HEAP32[$$sink$i$i >> 2] | 0) + 1;
HEAP16[$312 >> 1] = (HEAP16[$312 >> 1] | 0) + 1 << 16 >> 16;
HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 1;
$$0323563 = $$0323563 + 1 | 0;
if (($$0323563 | 0) >= ($254 | 0)) break L55;
}
if ((label | 0) == 55) {
$339 = ___cxa_find_matching_catch_2() | 0;
$$18 = $339;
$$18313 = tempRet0;
break L48;
} else if ((label | 0) == 56) {
$341 = ___cxa_find_matching_catch_2() | 0;
$$18 = $341;
$$18313 = tempRet0;
break L48;
} else if ((label | 0) == 57) {
$343 = ___cxa_find_matching_catch_2() | 0;
$344 = tempRet0;
__ZdlPv($283);
$$18 = $343;
$$18313 = $344;
break L48;
}
} while (0);
L82 : do if (!(HEAP8[72207] | 0)) $$0322 = $254; else {
$345 = $254 & 65535;
__THREW__ = 0;
$347 = invoke_iii(22, 18647, HEAP32[$30 >> 2] | 0) | 0;
$348 = __THREW__;
__THREW__ = 0;
L84 : do if (!($348 & 1)) {
$350 = HEAP32[$22 >> 2] | 0;
L86 : do if ((HEAP16[$350 + ($347 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i = HEAP32[$350 + ($347 << 3) >> 2] | 0;
if (!$$01215$i$i) {
$$sink$i$i374 = $23;
break;
} else $$01216$i$i = $$01215$i$i;
while (1) {
__THREW__ = 0;
$357 = invoke_iii(23, 18647, HEAP32[$$01216$i$i >> 2] | 0) | 0;
$358 = __THREW__;
__THREW__ = 0;
if ($358 & 1) break L84;
if ($357) break;
$$012$i$i = HEAP32[$$01216$i$i + 8 >> 2] | 0;
if (!$$012$i$i) {
$$sink$i$i374 = $23;
break L86;
} else $$01216$i$i = $$012$i$i;
}
$$sink$i$i374 = $$01216$i$i + 4 | 0;
} else $$sink$i$i374 = $23; while (0);
L94 : do if ((HEAP32[$$sink$i$i374 >> 2] | 0) == (HEAP32[$23 >> 2] | 0)) {
__THREW__ = 0;
$366 = invoke_ii(20, 104) | 0;
$367 = __THREW__;
__THREW__ = 0;
if ($367 & 1) {
label = 84;
break;
}
__THREW__ = 0;
$369 = invoke_ii(21, 18647) | 0;
$370 = __THREW__;
__THREW__ = 0;
if ($370 & 1) {
$$lcssa588 = $366;
label = 85;
break;
}
$372 = $254 << 16 >> 16;
__THREW__ = 0;
invoke_viiiiii(4, $366 | 0, $369 | 0, $372 | 0, 0, 0, 0);
$373 = __THREW__;
__THREW__ = 0;
if ($373 & 1) {
$$lcssa588 = $366;
label = 85;
break;
}
$375 = HEAP32[$236 >> 2] | 0;
if ($345 << 16 >> 16 >= 0) {
if ((HEAP32[$375 + 8 >> 2] | 0) <= ($372 | 0)) {
$381 = HEAP32[$375 + 4 >> 2] | 0;
__THREW__ = 0;
invoke_vii(125, $375 | 0, (($381 | 0) > ($372 | 0) ? $381 : $372 + 1 + ($372 >>> 1) | 0) | 0);
$386 = __THREW__;
__THREW__ = 0;
if ($386 & 1) {
label = 84;
break;
}
}
$388 = $375 + 12 | 0;
if ((HEAP32[$388 >> 2] | 0) <= ($372 | 0)) HEAP32[$388 >> 2] = $372 + 1;
HEAP32[(HEAP32[$375 >> 2] | 0) + ($372 << 2) >> 2] = $366;
}
__THREW__ = 0;
$395 = invoke_iii(22, 18647, HEAP32[$30 >> 2] | 0) | 0;
$396 = __THREW__;
__THREW__ = 0;
if ($396 & 1) {
label = 84;
break;
}
$398 = HEAP32[$22 >> 2] | 0;
$399 = $398 + ($395 << 3) | 0;
$400 = $398 + ($395 << 3) + 4 | 0;
switch (HEAP16[$400 >> 1] | 0) {
case 0:
{
__THREW__ = 0;
$402 = invoke_ii(20, 12) | 0;
$403 = __THREW__;
__THREW__ = 0;
if ($403 & 1) {
label = 84;
break L94;
}
HEAP32[$402 >> 2] = 18647;
HEAP32[$402 + 4 >> 2] = $372;
HEAP32[$402 + 8 >> 2] = 0;
HEAP32[$399 >> 2] = $402;
HEAP32[$27 >> 2] = (HEAP32[$27 >> 2] | 0) + -1;
$$sink$i$i386 = $26;
break;
}
case 1:
{
HEAP32[$26 >> 2] = (HEAP32[$26 >> 2] | 0) + -1;
label = 80;
break;
}
default:
label = 80;
}
if ((label | 0) == 80) {
$410 = HEAP32[$399 >> 2] | 0;
__THREW__ = 0;
$411 = invoke_ii(20, 12) | 0;
$412 = __THREW__;
__THREW__ = 0;
if ($412 & 1) {
label = 84;
break;
}
$414 = $410 + 8 | 0;
$415 = HEAP32[$414 >> 2] | 0;
HEAP32[$411 >> 2] = 18647;
HEAP32[$411 + 4 >> 2] = $372;
HEAP32[$411 + 8 >> 2] = $415;
HEAP32[$414 >> 2] = $411;
$$sink$i$i386 = $25;
}
HEAP32[$$sink$i$i386 >> 2] = (HEAP32[$$sink$i$i386 >> 2] | 0) + 1;
HEAP16[$400 >> 1] = (HEAP16[$400 >> 1] | 0) + 1 << 16 >> 16;
HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 1;
$$1325 = $345 + 1 << 16 >> 16;
label = 86;
} else {
$$1325 = $345;
label = 86;
} while (0);
L117 : do if ((label | 0) == 86) {
__THREW__ = 0;
$431 = invoke_iii(22, 18652, HEAP32[$30 >> 2] | 0) | 0;
$432 = __THREW__;
__THREW__ = 0;
if ($432 & 1) break L84;
$1182 = HEAP32[$22 >> 2] | 0;
L120 : do if ((HEAP16[$1182 + ($431 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$1 = HEAP32[$1182 + ($431 << 3) >> 2] | 0;
if (!$$01215$i$i$1) {
$$sink$i$i374$1 = $23;
break;
} else $$01216$i$i$1 = $$01215$i$i$1;
while (1) {
__THREW__ = 0;
$1189 = invoke_iii(23, 18652, HEAP32[$$01216$i$i$1 >> 2] | 0) | 0;
$1190 = __THREW__;
__THREW__ = 0;
if ($1190 & 1) break L84;
if ($1189) break;
$$012$i$i$1 = HEAP32[$$01216$i$i$1 + 8 >> 2] | 0;
if (!$$012$i$i$1) {
$$sink$i$i374$1 = $23;
break L120;
} else $$01216$i$i$1 = $$012$i$i$1;
}
$$sink$i$i374$1 = $$01216$i$i$1 + 4 | 0;
} else $$sink$i$i374$1 = $23; while (0);
if ((HEAP32[$$sink$i$i374$1 >> 2] | 0) == (HEAP32[$23 >> 2] | 0)) {
__THREW__ = 0;
$1198 = invoke_ii(20, 104) | 0;
$1199 = __THREW__;
__THREW__ = 0;
if ($1199 & 1) {
label = 84;
break;
}
__THREW__ = 0;
$1201 = invoke_ii(21, 18652) | 0;
$1202 = __THREW__;
__THREW__ = 0;
if ($1202 & 1) {
$$lcssa588 = $1198;
label = 85;
break;
}
$1204 = $$1325 << 16 >> 16;
__THREW__ = 0;
invoke_viiiiii(4, $1198 | 0, $1201 | 0, $1204 | 0, 0, 0, 0);
$1205 = __THREW__;
__THREW__ = 0;
if ($1205 & 1) {
$$lcssa588 = $1198;
label = 85;
break;
}
$1207 = HEAP32[$236 >> 2] | 0;
if ($$1325 << 16 >> 16 >= 0) {
if ((HEAP32[$1207 + 8 >> 2] | 0) <= ($1204 | 0)) {
$1213 = HEAP32[$1207 + 4 >> 2] | 0;
__THREW__ = 0;
invoke_vii(125, $1207 | 0, (($1213 | 0) > ($1204 | 0) ? $1213 : $1204 + 1 + ($1204 >>> 1) | 0) | 0);
$1218 = __THREW__;
__THREW__ = 0;
if ($1218 & 1) {
label = 84;
break;
}
}
$1220 = $1207 + 12 | 0;
if ((HEAP32[$1220 >> 2] | 0) <= ($1204 | 0)) HEAP32[$1220 >> 2] = $1204 + 1;
HEAP32[(HEAP32[$1207 >> 2] | 0) + ($1204 << 2) >> 2] = $1198;
}
__THREW__ = 0;
$1227 = invoke_iii(22, 18652, HEAP32[$30 >> 2] | 0) | 0;
$1228 = __THREW__;
__THREW__ = 0;
if ($1228 & 1) {
label = 84;
break;
}
$1230 = HEAP32[$22 >> 2] | 0;
$1231 = $1230 + ($1227 << 3) | 0;
$1232 = $1230 + ($1227 << 3) + 4 | 0;
switch (HEAP16[$1232 >> 1] | 0) {
case 0:
{
__THREW__ = 0;
$1236 = invoke_ii(20, 12) | 0;
$1237 = __THREW__;
__THREW__ = 0;
if ($1237 & 1) {
label = 84;
break L117;
}
HEAP32[$1236 >> 2] = 18652;
HEAP32[$1236 + 4 >> 2] = $1204;
HEAP32[$1236 + 8 >> 2] = 0;
HEAP32[$1231 >> 2] = $1236;
HEAP32[$27 >> 2] = (HEAP32[$27 >> 2] | 0) + -1;
$$sink$i$i386$1 = $26;
break;
}
case 1:
{
HEAP32[$26 >> 2] = (HEAP32[$26 >> 2] | 0) + -1;
label = 387;
break;
}
default:
label = 387;
}
if ((label | 0) == 387) {
$1242 = HEAP32[$1231 >> 2] | 0;
__THREW__ = 0;
$1243 = invoke_ii(20, 12) | 0;
$1244 = __THREW__;
__THREW__ = 0;
if ($1244 & 1) {
label = 84;
break;
}
$1246 = $1242 + 8 | 0;
$1247 = HEAP32[$1246 >> 2] | 0;
HEAP32[$1243 >> 2] = 18652;
HEAP32[$1243 + 4 >> 2] = $1204;
HEAP32[$1243 + 8 >> 2] = $1247;
HEAP32[$1246 >> 2] = $1243;
$$sink$i$i386$1 = $25;
}
HEAP32[$$sink$i$i386$1 >> 2] = (HEAP32[$$sink$i$i386$1 >> 2] | 0) + 1;
HEAP16[$1232 >> 1] = (HEAP16[$1232 >> 1] | 0) + 1 << 16 >> 16;
HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 1;
$$1325$1 = $$1325 + 1 << 16 >> 16;
} else $$1325$1 = $$1325;
$$0322 = $$1325$1 << 16 >> 16;
break L82;
} while (0);
if ((label | 0) == 84) {
$426 = ___cxa_find_matching_catch_2() | 0;
$$18 = $426;
$$18313 = tempRet0;
break L48;
} else if ((label | 0) == 85) {
$428 = ___cxa_find_matching_catch_2() | 0;
$429 = tempRet0;
__ZdlPv($$lcssa588);
$$18 = $428;
$$18313 = $429;
break L48;
}
} while (0);
$424 = ___cxa_find_matching_catch_2() | 0;
$$18 = $424;
$$18313 = tempRet0;
break L48;
} while (0);
L157 : do if ($257) {
$434 = $$byval_copy68 + 4 | 0;
$435 = $$byval_copy68 + 8 | 0;
$436 = $$byval_copy68 + 12 | 0;
$$in = $1 + 24 | 0;
$437 = $1 + 16 | 0;
$438 = $1 + 20 | 0;
$$0329555 = 0;
L159 : while (1) {
$441 = HEAP32[$236 >> 2] | 0;
$443 = HEAP32[$441 + 12 >> 2] | 0;
if (($443 | 0) > ($$0329555 | 0)) $$ph = HEAP32[(HEAP32[$441 >> 2] | 0) + ($$0329555 << 2) >> 2] | 0; else $$ph = 0;
$448 = HEAP32[$437 >> 2] | 0;
if ((HEAP32[$448 + 12 >> 2] | 0) > ($$0329555 | 0)) {
$454 = HEAP16[(HEAP32[$448 >> 2] | 0) + ($$0329555 << 1) >> 1] | 0;
L166 : do if ($454 << 16 >> 16 != -1) {
$456 = $454 << 16 >> 16;
do if ($454 << 16 >> 16 > -1 & ($443 | 0) > ($456 | 0)) {
$461 = HEAP32[(HEAP32[$441 >> 2] | 0) + ($456 << 2) >> 2] | 0;
if (!$461) break;
HEAP32[$$ph + 8 >> 2] = $461;
__THREW__ = 0;
invoke_vii(130, $461 | 0, $$ph | 0);
$471 = __THREW__;
__THREW__ = 0;
if ($471 & 1) {
label = 98;
break L159;
} else break L166;
} while (0);
__THREW__ = 0;
invoke_i(1) | 0;
$463 = __THREW__;
__THREW__ = 0;
if ($463 & 1) {
label = 98;
break L159;
}
__THREW__ = 0;
HEAP32[$vararg_buffer26 >> 2] = HEAP32[$$ph >> 2];
HEAP32[$vararg_buffer26 + 4 >> 2] = $$0329555;
invoke_vii(115, 20553, $vararg_buffer26 | 0);
$466 = __THREW__;
__THREW__ = 0;
if ($466 & 1) {
label = 98;
break L159;
}
} while (0);
} else {}
$473 = $$ph + 40 | 0;
$474 = HEAP32[$438 >> 2] | 0;
if ((HEAP32[$474 + 12 >> 2] | 0) > ($$0329555 | 0)) {
__THREW__ = 0;
invoke_vii(120, $$byval_copy88 | 0, (HEAP32[$474 >> 2] | 0) + ($$0329555 * 12 | 0) | 0);
$482 = __THREW__;
__THREW__ = 0;
if ($482 & 1) {
label = 112;
break;
}
} else {
__THREW__ = 0;
invoke_vi(98, $$byval_copy88 | 0);
$478 = __THREW__;
__THREW__ = 0;
if ($478 & 1) {
label = 112;
break;
}
}
$484 = HEAP32[$$in >> 2] | 0;
if ((HEAP32[$484 + 12 >> 2] | 0) > ($$0329555 | 0)) {
$488 = HEAP32[$484 >> 2] | 0;
HEAP32[$$byval_copy68 >> 2] = HEAP32[$488 + ($$0329555 << 4) >> 2];
HEAP32[$434 >> 2] = HEAP32[$488 + ($$0329555 << 4) + 4 >> 2];
HEAP32[$435 >> 2] = HEAP32[$488 + ($$0329555 << 4) + 8 >> 2];
HEAP32[$436 >> 2] = HEAP32[$488 + ($$0329555 << 4) + 12 >> 2];
} else {
HEAPF32[$$byval_copy68 >> 2] = Math_fround(0.0);
HEAPF32[$434 >> 2] = Math_fround(0.0);
HEAPF32[$435 >> 2] = Math_fround(0.0);
HEAPF32[$436 >> 2] = Math_fround(1.0);
}
__THREW__ = 0;
invoke_viii(81, $473 | 0, $$byval_copy88 | 0, $$byval_copy68 | 0);
$497 = __THREW__;
__THREW__ = 0;
if ($497 & 1) {
label = 113;
break;
}
$$0329555 = $$0329555 + 1 | 0;
if (($$0329555 | 0) >= ($254 | 0)) break L157;
}
if ((label | 0) == 98) {
$468 = ___cxa_find_matching_catch_2() | 0;
$$18 = $468;
$$18313 = tempRet0;
break L48;
} else if ((label | 0) == 112) {
$501 = ___cxa_find_matching_catch_2() | 0;
$$4 = $501;
$$4299 = tempRet0;
} else if ((label | 0) == 113) {
$503 = ___cxa_find_matching_catch_2() | 0;
$$4 = $503;
$$4299 = tempRet0;
}
$$18 = $$4;
$$18313 = $$4299;
break L48;
} while (0);
L193 : do if (HEAP8[72207] | 0) {
$505 = $254 & 65535;
$506 = HEAP32[$236 >> 2] | 0;
$507 = $254 << 16 >> 16;
if ($505 << 16 >> 16 < 0) break;
$509 = $506 + 12 | 0;
L196 : do if ((HEAP32[$509 >> 2] | 0) > ($507 | 0)) {
$514 = HEAP32[(HEAP32[$506 >> 2] | 0) + ($507 << 2) >> 2] | 0;
if (!$514) {
label = 131;
break;
}
__THREW__ = 0;
$517 = invoke_iii(22, 18079, HEAP32[$30 >> 2] | 0) | 0;
$518 = __THREW__;
__THREW__ = 0;
if ($518 & 1) break;
$520 = HEAP32[$22 >> 2] | 0;
L200 : do if ((HEAP16[$520 + ($517 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i395 = HEAP32[$520 + ($517 << 3) >> 2] | 0;
if (!$$01215$i$i395) {
$$sink$i$i400 = $23;
break;
} else $$01216$i$i396 = $$01215$i$i395;
while (1) {
__THREW__ = 0;
$527 = invoke_iii(23, 18079, HEAP32[$$01216$i$i396 >> 2] | 0) | 0;
$528 = __THREW__;
__THREW__ = 0;
if ($528 & 1) break L196;
if ($527) break;
$$012$i$i398 = HEAP32[$$01216$i$i396 + 8 >> 2] | 0;
if (!$$012$i$i398) {
$$sink$i$i400 = $23;
break L200;
} else $$01216$i$i396 = $$012$i$i398;
}
$$sink$i$i400 = $$01216$i$i396 + 4 | 0;
} else $$sink$i$i400 = $23; while (0);
$533 = HEAP32[$$sink$i$i400 >> 2] | 0;
do if (($533 | 0) >= 0) {
if ((HEAP32[$509 >> 2] | 0) <= ($533 | 0)) break;
$539 = HEAP32[(HEAP32[$506 >> 2] | 0) + ($533 << 2) >> 2] | 0;
if (!$539) break;
HEAP32[$514 + 8 >> 2] = $539;
__THREW__ = 0;
invoke_vii(130, $539 | 0, $514 | 0);
$542 = __THREW__;
__THREW__ = 0;
if ($542 & 1) break L196;
} while (0);
__THREW__ = 0;
invoke_viii(81, $514 + 40 | 0, $2 | 0, $3 | 0);
$547 = __THREW__;
__THREW__ = 0;
if ($547 & 1) break;
$550 = $505 + 1 << 16 >> 16;
if ($550 << 16 >> 16 < 0) break L193; else {
$1142 = HEAP32[$236 >> 2] | 0;
$1145 = $550 << 16 >> 16;
label = 352;
}
} else label = 131; while (0);
if ((label | 0) == 131) {
$1142 = $506;
$1145 = $254 << 16 >> 16;
label = 352;
}
L216 : do if ((label | 0) == 352) {
$1141 = $1142 + 12 | 0;
if ((HEAP32[$1141 >> 2] | 0) <= ($1145 | 0)) break L193;
$1148 = HEAP32[(HEAP32[$1142 >> 2] | 0) + ($1145 << 2) >> 2] | 0;
if (!$1148) break L193;
__THREW__ = 0;
$1151 = invoke_iii(22, 18079, HEAP32[$30 >> 2] | 0) | 0;
$1152 = __THREW__;
__THREW__ = 0;
if ($1152 & 1) break;
$1154 = HEAP32[$22 >> 2] | 0;
L221 : do if ((HEAP16[$1154 + ($1151 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i395$1 = HEAP32[$1154 + ($1151 << 3) >> 2] | 0;
if (!$$01215$i$i395$1) {
$$sink$i$i400$1 = $23;
break;
} else $$01216$i$i396$1 = $$01215$i$i395$1;
while (1) {
__THREW__ = 0;
$1161 = invoke_iii(23, 18079, HEAP32[$$01216$i$i396$1 >> 2] | 0) | 0;
$1162 = __THREW__;
__THREW__ = 0;
if ($1162 & 1) break L216;
if ($1161) break;
$$012$i$i398$1 = HEAP32[$$01216$i$i396$1 + 8 >> 2] | 0;
if (!$$012$i$i398$1) {
$$sink$i$i400$1 = $23;
break L221;
} else $$01216$i$i396$1 = $$012$i$i398$1;
}
$$sink$i$i400$1 = $$01216$i$i396$1 + 4 | 0;
} else $$sink$i$i400$1 = $23; while (0);
$1167 = HEAP32[$$sink$i$i400$1 >> 2] | 0;
do if (($1167 | 0) >= 0) {
if ((HEAP32[$1141 >> 2] | 0) <= ($1167 | 0)) break;
$1173 = HEAP32[(HEAP32[$1142 >> 2] | 0) + ($1167 << 2) >> 2] | 0;
if (!$1173) break;
HEAP32[$1148 + 8 >> 2] = $1173;
__THREW__ = 0;
invoke_vii(130, $1173 | 0, $1148 | 0);
$1176 = __THREW__;
__THREW__ = 0;
if ($1176 & 1) break L216;
} while (0);
__THREW__ = 0;
invoke_viii(81, $1148 + 40 | 0, $214 | 0, $3 + 16 | 0);
$1180 = __THREW__;
__THREW__ = 0;
if (!($1180 & 1)) break L193;
} while (0);
$544 = ___cxa_find_matching_catch_2() | 0;
$$18 = $544;
$$18313 = tempRet0;
break L48;
} while (0);
__THREW__ = 0;
$554 = invoke_iii(22, 18047, HEAP32[$30 >> 2] | 0) | 0;
$555 = __THREW__;
__THREW__ = 0;
L236 : do if (!($555 & 1)) {
$557 = HEAP32[$22 >> 2] | 0;
L238 : do if ((HEAP16[$557 + ($554 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i405 = HEAP32[$557 + ($554 << 3) >> 2] | 0;
if (!$$01215$i$i405) {
$$sink$i$i410 = $23;
break;
} else $$01216$i$i406 = $$01215$i$i405;
while (1) {
__THREW__ = 0;
$564 = invoke_iii(23, 18047, HEAP32[$$01216$i$i406 >> 2] | 0) | 0;
$565 = __THREW__;
__THREW__ = 0;
if ($565 & 1) break L236;
if ($564) break;
$$012$i$i408 = HEAP32[$$01216$i$i406 + 8 >> 2] | 0;
if (!$$012$i$i408) {
$$sink$i$i410 = $23;
break L238;
} else $$01216$i$i406 = $$012$i$i408;
}
$$sink$i$i410 = $$01216$i$i406 + 4 | 0;
} else $$sink$i$i410 = $23; while (0);
$570 = HEAP32[$$sink$i$i410 >> 2] | 0;
$571 = HEAP32[$236 >> 2] | 0;
do if (($570 | 0) < 0) label = 142; else {
if ((HEAP32[$571 + 12 >> 2] | 0) <= ($570 | 0)) {
label = 142;
break;
}
$578 = HEAP32[(HEAP32[$571 >> 2] | 0) + ($570 << 2) >> 2] | 0;
HEAP32[$229 >> 2] = $578;
if (!$578) break;
__THREW__ = 0;
invoke_vi(120, $578 | 0);
$585 = __THREW__;
__THREW__ = 0;
if ($585 & 1) break L236;
$587 = $1 + 28 | 0;
__THREW__ = 0;
$589 = invoke_ii(23, HEAP32[$587 >> 2] | 0) | 0;
$590 = __THREW__;
__THREW__ = 0;
do if (!($590 & 1)) {
L253 : do if (($589 | 0) > 0) {
$593 = $1 + 32 | 0;
$594 = $1 + 36 | 0;
$$0334549 = 0;
L255 : while (1) {
__THREW__ = 0;
$600 = invoke_iii(24, HEAP32[$587 >> 2] | 0, $$0334549 | 0) | 0;
$601 = __THREW__;
__THREW__ = 0;
if ($601 & 1) {
label = 165;
break;
}
__THREW__ = 0;
$603 = invoke_ii(21, $600 | 0) | 0;
$604 = __THREW__;
__THREW__ = 0;
if ($604 & 1) {
label = 165;
break;
}
__THREW__ = 0;
$606 = invoke_ii(20, 56) | 0;
$607 = __THREW__;
__THREW__ = 0;
if ($607 & 1) {
label = 166;
break;
}
__THREW__ = 0;
invoke_viii(82, $606 | 0, $603 | 0, $$0334549 | 0);
$609 = __THREW__;
__THREW__ = 0;
if ($609 & 1) {
label = 167;
break;
}
$611 = HEAP32[$593 >> 2] | 0;
do if ((HEAP32[$611 + 12 >> 2] | 0) > ($$0334549 | 0)) {
$617 = HEAP16[(HEAP32[$611 >> 2] | 0) + ($$0334549 << 1) >> 1] | 0;
$618 = $617 << 16 >> 16;
$619 = HEAP32[$236 >> 2] | 0;
if ($617 << 16 >> 16 < 0) {
label = 161;
break;
}
if ((HEAP32[$619 + 12 >> 2] | 0) <= ($618 | 0)) {
label = 161;
break;
}
$626 = HEAP32[(HEAP32[$619 >> 2] | 0) + ($618 << 2) >> 2] | 0;
if (!$626) {
label = 161;
break;
}
$644 = HEAP32[16535] | 0;
__THREW__ = 0;
$647 = invoke_iii(22, $603 | 0, HEAP32[$644 + 4 >> 2] | 0) | 0;
$648 = __THREW__;
__THREW__ = 0;
if ($648 & 1) {
label = 185;
break L255;
}
$650 = HEAP32[$644 >> 2] | 0;
L267 : do if ((HEAP16[$650 + ($647 << 3) + 4 >> 1] | 0) > 0) {
$$01115$i$i = HEAP32[$650 + ($647 << 3) >> 2] | 0;
if (!$$01115$i$i) {
label = 177;
break;
} else $$01116$i$i = $$01115$i$i;
while (1) {
__THREW__ = 0;
$657 = invoke_iii(23, $603 | 0, HEAP32[$$01116$i$i >> 2] | 0) | 0;
$658 = __THREW__;
__THREW__ = 0;
if ($658 & 1) {
label = 185;
break L255;
}
if ($657) break;
$$011$i$i = HEAP32[$$01116$i$i + 8 >> 2] | 0;
if (!$$011$i$i) {
label = 177;
break L267;
} else $$01116$i$i = $$011$i$i;
}
$$sink$i$i418 = $$01116$i$i + 4 | 0;
} else label = 177; while (0);
if ((label | 0) == 177) {
label = 0;
$$sink$i$i418 = $644 + 20 | 0;
}
$$sroa$0$0$extract$trunc = HEAP32[$$sink$i$i418 >> 2] | 0;
$664 = $606 + 12 | 0;
HEAP16[$664 >> 1] = $$sroa$0$0$extract$trunc;
HEAP8[$664 + 2 >> 0] = $$sroa$0$0$extract$trunc >>> 16;
do if (0) {
__THREW__ = 0;
HEAP32[$vararg_buffer36 >> 2] = $603;
invoke_vii(115, 20666, $vararg_buffer36 | 0);
$666 = __THREW__;
__THREW__ = 0;
if ($666 & 1) {
label = 168;
break L255;
}
__THREW__ = 0;
invoke_vii(127, $664 | 0, HEAP32[16082] | 0);
$669 = __THREW__;
__THREW__ = 0;
if ($669 & 1) {
label = 168;
break L255;
}
__THREW__ = 0;
invoke_vi(122, 10);
$671 = __THREW__;
__THREW__ = 0;
if ($671 & 1) {
label = 168;
break L255;
}
if (((HEAPU16[$664 >> 1] | HEAPU8[$664 + 2 >> 0] << 16) & 255 | 0) != 44) break;
__THREW__ = 0;
invoke_vii(115, 20691, $vararg_buffer39 | 0);
$676 = __THREW__;
__THREW__ = 0;
if ($676 & 1) {
label = 168;
break L255;
}
__THREW__ = 0;
invoke_vii(131, $606 | 0, HEAP32[16082] | 0);
$679 = __THREW__;
__THREW__ = 0;
if ($679 & 1) {
label = 168;
break L255;
}
} while (0);
HEAP32[$606 + 8 >> 2] = ((HEAP32[16607] ^ HEAP32[$664 >> 2]) & 16777215 | 0) == 0 ? 3 : 1;
$689 = HEAP32[$243 >> 2] | 0;
if ((HEAP32[$689 + 8 >> 2] | 0) <= ($$0334549 | 0)) {
$694 = HEAP32[$689 + 4 >> 2] | 0;
__THREW__ = 0;
invoke_vii(132, $689 | 0, (($694 | 0) > ($$0334549 | 0) ? $694 : $$0334549 + 1 + ($$0334549 >>> 1) | 0) | 0);
$699 = __THREW__;
__THREW__ = 0;
if ($699 & 1) {
label = 168;
break L255;
}
}
$701 = $689 + 12 | 0;
if ((HEAP32[$701 >> 2] | 0) <= ($$0334549 | 0)) HEAP32[$701 >> 2] = $$0334549 + 1;
HEAP32[(HEAP32[$689 >> 2] | 0) + ($$0334549 << 2) >> 2] = $606;
__THREW__ = 0;
$708 = invoke_iii(22, $603 | 0, HEAP32[$58 >> 2] | 0) | 0;
$709 = __THREW__;
__THREW__ = 0;
if ($709 & 1) {
label = 168;
break L255;
}
$711 = HEAP32[$50 >> 2] | 0;
$712 = $711 + ($708 << 3) | 0;
$713 = $711 + ($708 << 3) + 4 | 0;
switch (HEAP16[$713 >> 1] | 0) {
case 0:
{
__THREW__ = 0;
$715 = invoke_ii(20, 12) | 0;
$716 = __THREW__;
__THREW__ = 0;
if ($716 & 1) {
label = 168;
break L255;
}
HEAP32[$715 >> 2] = $603;
HEAP32[$715 + 4 >> 2] = $$0334549;
HEAP32[$715 + 8 >> 2] = 0;
HEAP32[$712 >> 2] = $715;
HEAP32[$55 >> 2] = (HEAP32[$55 >> 2] | 0) + -1;
$$sink$i$i429 = $54;
break;
}
case 1:
{
HEAP32[$54 >> 2] = (HEAP32[$54 >> 2] | 0) + -1;
label = 195;
break;
}
default:
label = 195;
}
if ((label | 0) == 195) {
label = 0;
$724 = HEAP32[$712 >> 2] | 0;
__THREW__ = 0;
$725 = invoke_ii(20, 12) | 0;
$726 = __THREW__;
__THREW__ = 0;
if ($726 & 1) {
label = 168;
break L255;
}
$729 = $724 + 8 | 0;
$730 = HEAP32[$729 >> 2] | 0;
HEAP32[$725 >> 2] = $603;
HEAP32[$725 + 4 >> 2] = $$0334549;
HEAP32[$725 + 8 >> 2] = $730;
HEAP32[$729 >> 2] = $725;
$$sink$i$i429 = $53;
}
HEAP32[$$sink$i$i429 >> 2] = (HEAP32[$$sink$i$i429 >> 2] | 0) + 1;
HEAP16[$713 >> 1] = (HEAP16[$713 >> 1] | 0) + 1 << 16 >> 16;
HEAP32[$52 >> 2] = (HEAP32[$52 >> 2] | 0) + 1;
$738 = HEAP32[$664 >> 2] | 0;
if ((HEAP32[16607] ^ $738) & 16777215 | 0) {
HEAP32[$$byval_copy68 >> 2] = $738;
$742 = HEAP32[$86 >> 2] | 0;
__THREW__ = 0;
HEAP8[$$byval_copy88 >> 0] = HEAP8[$$byval_copy68 >> 0] | 0;
HEAP8[$$byval_copy88 + 1 >> 0] = HEAP8[$$byval_copy68 + 1 >> 0] | 0;
HEAP8[$$byval_copy88 + 2 >> 0] = HEAP8[$$byval_copy68 + 2 >> 0] | 0;
HEAP8[$$byval_copy88 + 3 >> 0] = HEAP8[$$byval_copy68 + 3 >> 0] | 0;
$743 = invoke_iii(25, $$byval_copy88 | 0, $742 | 0) | 0;
$744 = __THREW__;
__THREW__ = 0;
if ($744 & 1) {
label = 168;
break L255;
}
$746 = HEAP32[$78 >> 2] | 0;
$747 = $746 + ($743 << 3) | 0;
$748 = $746 + ($743 << 3) + 4 | 0;
switch (HEAP16[$748 >> 1] | 0) {
case 0:
{
__THREW__ = 0;
$750 = invoke_ii(20, 12) | 0;
$751 = __THREW__;
__THREW__ = 0;
if ($751 & 1) {
label = 168;
break L255;
}
HEAP32[$750 >> 2] = $738;
HEAP32[$750 + 4 >> 2] = $606;
HEAP32[$750 + 8 >> 2] = 0;
HEAP32[$747 >> 2] = $750;
HEAP32[$83 >> 2] = (HEAP32[$83 >> 2] | 0) + -1;
$$sink$i$i438 = $82;
break;
}
case 1:
{
HEAP32[$82 >> 2] = (HEAP32[$82 >> 2] | 0) + -1;
label = 203;
break;
}
default:
label = 203;
}
if ((label | 0) == 203) {
label = 0;
$759 = HEAP32[$747 >> 2] | 0;
__THREW__ = 0;
$760 = invoke_ii(20, 12) | 0;
$761 = __THREW__;
__THREW__ = 0;
if ($761 & 1) {
label = 168;
break L255;
}
$764 = $759 + 8 | 0;
$765 = HEAP32[$764 >> 2] | 0;
HEAP32[$760 >> 2] = $738;
HEAP32[$760 + 4 >> 2] = $606;
HEAP32[$760 + 8 >> 2] = $765;
HEAP32[$764 >> 2] = $760;
$$sink$i$i438 = $81;
}
HEAP32[$$sink$i$i438 >> 2] = (HEAP32[$$sink$i$i438 >> 2] | 0) + 1;
HEAP16[$748 >> 1] = (HEAP16[$748 >> 1] | 0) + 1 << 16 >> 16;
HEAP32[$80 >> 2] = (HEAP32[$80 >> 2] | 0) + 1;
}
__THREW__ = 0;
invoke_vii(133, $626 | 0, $606 | 0);
$773 = __THREW__;
__THREW__ = 0;
if ($773 & 1) {
label = 168;
break L255;
}
HEAP32[$606 + 16 >> 2] = $626;
$776 = HEAP32[$594 >> 2] | 0;
if ((HEAP32[$776 + 12 >> 2] | 0) > ($$0334549 | 0)) {
__THREW__ = 0;
invoke_vii(120, $$byval_copy88 | 0, (HEAP32[$776 >> 2] | 0) + ($$0334549 * 12 | 0) | 0);
$784 = __THREW__;
__THREW__ = 0;
if ($784 & 1) {
label = 219;
break L255;
}
} else {
__THREW__ = 0;
invoke_vi(98, $$byval_copy88 | 0);
$780 = __THREW__;
__THREW__ = 0;
if ($780 & 1) {
label = 219;
break L255;
}
}
__THREW__ = 0;
invoke_vii(134, $606 | 0, $$byval_copy88 | 0);
$786 = __THREW__;
__THREW__ = 0;
if ($786 & 1) {
label = 219;
break L255;
}
__THREW__ = 0;
$788 = __THREW__;
__THREW__ = 0;
if ($788 & 1) {
label = 168;
break L255;
}
HEAPF32[$606 + 20 >> 2] = Math_fround(.0500000007);
if (!0) break;
if (_strcmp(HEAP32[$626 >> 2] | 0, 18079) | 0) break;
__THREW__ = 0;
invoke_vii(115, 20766, $vararg_buffer41 | 0);
$795 = __THREW__;
__THREW__ = 0;
if ($795 & 1) {
label = 168;
break L255;
}
__THREW__ = 0;
invoke_vii(135, $606 | 0, HEAP32[16082] | 0);
$798 = __THREW__;
__THREW__ = 0;
if ($798 & 1) {
label = 168;
break L255;
}
__THREW__ = 0;
invoke_vi(122, 32);
$800 = __THREW__;
__THREW__ = 0;
if ($800 & 1) {
label = 168;
break L255;
}
__THREW__ = 0;
invoke_vii(127, $664 | 0, HEAP32[16082] | 0);
$803 = __THREW__;
__THREW__ = 0;
if ($803 & 1) {
label = 168;
break L255;
}
__THREW__ = 0;
invoke_vi(122, 10);
$805 = __THREW__;
__THREW__ = 0;
if ($805 & 1) {
label = 168;
break L255;
}
} else label = 161; while (0);
if ((label | 0) == 161) {
label = 0;
__THREW__ = 0;
invoke_i(1) | 0;
$628 = __THREW__;
__THREW__ = 0;
if ($628 & 1) {
label = 168;
break;
}
__THREW__ = 0;
HEAP32[$vararg_buffer33 >> 2] = $603;
invoke_vii(115, 20625, $vararg_buffer33 | 0);
$630 = __THREW__;
__THREW__ = 0;
if ($630 & 1) {
label = 168;
break;
}
__THREW__ = 0;
invoke_vi(121, $606 | 0);
$632 = __THREW__;
__THREW__ = 0;
if ($632 & 1) {
label = 169;
break;
}
__ZdlPv($606);
}
$$0334549 = $$0334549 + 1 | 0;
if (($$0334549 | 0) >= ($589 | 0)) break L253;
}
if ((label | 0) == 165) {
$634 = ___cxa_find_matching_catch_2() | 0;
$$18 = $634;
$$18313 = tempRet0;
break L48;
} else if ((label | 0) == 166) {
$636 = ___cxa_find_matching_catch_2() | 0;
$$18 = $636;
$$18313 = tempRet0;
break L48;
} else if ((label | 0) == 167) {
$638 = ___cxa_find_matching_catch_2() | 0;
$639 = tempRet0;
__ZdlPv($606);
$$18 = $638;
$$18313 = $639;
break L48;
} else if ((label | 0) == 168) {
$640 = ___cxa_find_matching_catch_2() | 0;
$$18 = $640;
$$18313 = tempRet0;
break L48;
} else if ((label | 0) == 169) {
$642 = ___cxa_find_matching_catch_2() | 0;
$643 = tempRet0;
__ZdlPv($606);
$$18 = $642;
$$18313 = $643;
break L48;
} else if ((label | 0) == 185) {
$681 = ___cxa_find_matching_catch_2() | 0;
$$18 = $681;
$$18313 = tempRet0;
break L48;
} else if ((label | 0) == 219) {
$807 = ___cxa_find_matching_catch_2() | 0;
$$18 = $807;
$$18313 = tempRet0;
break L48;
}
} while (0);
__THREW__ = 0;
invoke_viiiii(13, $0 | 0, 20601, 20607, 20613, 20619);
$595 = __THREW__;
__THREW__ = 0;
if ($595 & 1) break;
__THREW__ = 0;
invoke_viiiii(13, $0 | 0, 20790, 20796, 20802, 20808);
$811 = __THREW__;
__THREW__ = 0;
if ($811 & 1) break;
__THREW__ = 0;
invoke_vi(123, $0 | 0);
$813 = __THREW__;
__THREW__ = 0;
if ($813 & 1) break; else $indvars$iv613 = 0;
while (1) {
$821 = HEAP32[1744 + ($indvars$iv613 << 2) >> 2] | 0;
__THREW__ = 0;
invoke_viiiiiii(1, $4 | 0, 6, $821 | 0, 0, 0, 1, 0);
$822 = __THREW__;
__THREW__ = 0;
if ($822 & 1) {
label = 239;
break;
}
__THREW__ = 0;
HEAP8[$$byval_copy88 >> 0] = HEAP8[$4 >> 0] | 0;
HEAP8[$$byval_copy88 + 1 >> 0] = HEAP8[$4 + 1 >> 0] | 0;
HEAP8[$$byval_copy88 + 2 >> 0] = HEAP8[$4 + 2 >> 0] | 0;
HEAP8[$$byval_copy88 + 3 >> 0] = HEAP8[$4 + 3 >> 0] | 0;
invoke_vii(136, $0 | 0, $$byval_copy88 | 0);
$824 = __THREW__;
__THREW__ = 0;
if ($824 & 1) {
label = 239;
break;
}
__THREW__ = 0;
invoke_viiiiiii(1, $5 | 0, 1, $821 | 0, 1, 0, 1, 0);
$826 = __THREW__;
__THREW__ = 0;
if ($826 & 1) {
label = 239;
break;
}
__THREW__ = 0;
invoke_viiiiiii(1, $6 | 0, 1, $821 | 0, 0, 0, 1, 0);
$828 = __THREW__;
__THREW__ = 0;
if ($828 & 1) {
label = 239;
break;
}
__THREW__ = 0;
HEAP32[$$byval_copy68 >> 2] = HEAP32[$5 >> 2];
HEAP8[$$byval_copy88 >> 0] = HEAP8[$6 >> 0] | 0;
HEAP8[$$byval_copy88 + 1 >> 0] = HEAP8[$6 + 1 >> 0] | 0;
HEAP8[$$byval_copy88 + 2 >> 0] = HEAP8[$6 + 2 >> 0] | 0;
HEAP8[$$byval_copy88 + 3 >> 0] = HEAP8[$6 + 3 >> 0] | 0;
invoke_iiii(16, $0 | 0, $$byval_copy68 | 0, $$byval_copy88 | 0) | 0;
$830 = __THREW__;
__THREW__ = 0;
if ($830 & 1) {
label = 239;
break;
}
__THREW__ = 0;
invoke_viiiiiii(1, $7 | 0, 1, $821 | 0, 2, 0, 1, 0);
$832 = __THREW__;
__THREW__ = 0;
if ($832 & 1) {
label = 239;
break;
}
__THREW__ = 0;
invoke_viiiiiii(1, $8 | 0, 3, $821 | 0, 0, 0, 1, 0);
$834 = __THREW__;
__THREW__ = 0;
if ($834 & 1) {
label = 239;
break;
}
__THREW__ = 0;
HEAP32[$$byval_copy68 >> 2] = HEAP32[$7 >> 2];
HEAP8[$$byval_copy88 >> 0] = HEAP8[$8 >> 0] | 0;
HEAP8[$$byval_copy88 + 1 >> 0] = HEAP8[$8 + 1 >> 0] | 0;
HEAP8[$$byval_copy88 + 2 >> 0] = HEAP8[$8 + 2 >> 0] | 0;
HEAP8[$$byval_copy88 + 3 >> 0] = HEAP8[$8 + 3 >> 0] | 0;
invoke_iiii(16, $0 | 0, $$byval_copy68 | 0, $$byval_copy88 | 0) | 0;
$836 = __THREW__;
__THREW__ = 0;
if ($836 & 1) {
label = 239;
break;
}
__THREW__ = 0;
invoke_viiiiiii(1, $9 | 0, 15, $821 | 0, 0, 0, 1, 0);
$838 = __THREW__;
__THREW__ = 0;
if ($838 & 1) {
label = 239;
break;
}
__THREW__ = 0;
HEAP8[$$byval_copy88 >> 0] = HEAP8[$9 >> 0] | 0;
HEAP8[$$byval_copy88 + 1 >> 0] = HEAP8[$9 + 1 >> 0] | 0;
HEAP8[$$byval_copy88 + 2 >> 0] = HEAP8[$9 + 2 >> 0] | 0;
HEAP8[$$byval_copy88 + 3 >> 0] = HEAP8[$9 + 3 >> 0] | 0;
invoke_vii(136, $0 | 0, $$byval_copy88 | 0);
$840 = __THREW__;
__THREW__ = 0;
if ($840 & 1) {
label = 239;
break;
}
__THREW__ = 0;
invoke_viiiiiii(1, $9 | 0, 13, $821 | 0, 0, 0, 1, 0);
$842 = __THREW__;
__THREW__ = 0;
if ($842 & 1) {
label = 239;
break;
}
__THREW__ = 0;
HEAP8[$$byval_copy88 >> 0] = HEAP8[$9 >> 0] | 0;
HEAP8[$$byval_copy88 + 1 >> 0] = HEAP8[$9 + 1 >> 0] | 0;
HEAP8[$$byval_copy88 + 2 >> 0] = HEAP8[$9 + 2 >> 0] | 0;
HEAP8[$$byval_copy88 + 3 >> 0] = HEAP8[$9 + 3 >> 0] | 0;
invoke_vii(136, $0 | 0, $$byval_copy88 | 0);
$1078 = __THREW__;
__THREW__ = 0;
if ($1078 & 1) {
label = 239;
break;
}
__THREW__ = 0;
invoke_viiiiiii(1, $9 | 0, 12, $821 | 0, 0, 0, 1, 0);
$1080 = __THREW__;
__THREW__ = 0;
if ($1080 & 1) {
label = 239;
break;
}
__THREW__ = 0;
HEAP8[$$byval_copy88 >> 0] = HEAP8[$9 >> 0] | 0;
HEAP8[$$byval_copy88 + 1 >> 0] = HEAP8[$9 + 1 >> 0] | 0;
HEAP8[$$byval_copy88 + 2 >> 0] = HEAP8[$9 + 2 >> 0] | 0;
HEAP8[$$byval_copy88 + 3 >> 0] = HEAP8[$9 + 3 >> 0] | 0;
invoke_vii(136, $0 | 0, $$byval_copy88 | 0);
$1082 = __THREW__;
__THREW__ = 0;
if ($1082 & 1) {
label = 239;
break;
}
__THREW__ = 0;
invoke_viiiiiii(1, $10 | 0, 6, $821 | 0, 0, 0, 1, 0);
$1084 = __THREW__;
__THREW__ = 0;
if ($1084 & 1) {
label = 239;
break;
}
__THREW__ = 0;
HEAP8[$$byval_copy88 >> 0] = HEAP8[$10 >> 0] | 0;
HEAP8[$$byval_copy88 + 1 >> 0] = HEAP8[$10 + 1 >> 0] | 0;
HEAP8[$$byval_copy88 + 2 >> 0] = HEAP8[$10 + 2 >> 0] | 0;
HEAP8[$$byval_copy88 + 3 >> 0] = HEAP8[$10 + 3 >> 0] | 0;
invoke_vii(136, $0 | 0, $$byval_copy88 | 0);
$844 = __THREW__;
__THREW__ = 0;
if ($844 & 1) {
label = 239;
break;
}
__THREW__ = 0;
invoke_viiiiiii(1, $11 | 0, 10, $821 | 0, 0, 1, 1, 0);
$846 = __THREW__;
__THREW__ = 0;
if ($846 & 1) {
label = 239;
break;
}
__THREW__ = 0;
HEAP8[$$byval_copy88 >> 0] = HEAP8[$11 >> 0] | 0;
HEAP8[$$byval_copy88 + 1 >> 0] = HEAP8[$11 + 1 >> 0] | 0;
HEAP8[$$byval_copy88 + 2 >> 0] = HEAP8[$11 + 2 >> 0] | 0;
HEAP8[$$byval_copy88 + 3 >> 0] = HEAP8[$11 + 3 >> 0] | 0;
invoke_vii(136, $0 | 0, $$byval_copy88 | 0);
$848 = __THREW__;
__THREW__ = 0;
if ($848 & 1) {
label = 239;
break;
}
__THREW__ = 0;
invoke_viiiiiii(1, $11 | 0, 9, $821 | 0, 0, 1, 1, 0);
$850 = __THREW__;
__THREW__ = 0;
if ($850 & 1) {
label = 239;
break;
}
__THREW__ = 0;
HEAP8[$$byval_copy88 >> 0] = HEAP8[$11 >> 0] | 0;
HEAP8[$$byval_copy88 + 1 >> 0] = HEAP8[$11 + 1 >> 0] | 0;
HEAP8[$$byval_copy88 + 2 >> 0] = HEAP8[$11 + 2 >> 0] | 0;
HEAP8[$$byval_copy88 + 3 >> 0] = HEAP8[$11 + 3 >> 0] | 0;
invoke_vii(136, $0 | 0, $$byval_copy88 | 0);
$1086 = __THREW__;
__THREW__ = 0;
if ($1086 & 1) {
label = 239;
break;
}
__THREW__ = 0;
invoke_viiiiiii(1, $11 | 0, 8, $821 | 0, 0, 1, 1, 0);
$1088 = __THREW__;
__THREW__ = 0;
if ($1088 & 1) {
label = 239;
break;
}
__THREW__ = 0;
HEAP8[$$byval_copy88 >> 0] = HEAP8[$11 >> 0] | 0;
HEAP8[$$byval_copy88 + 1 >> 0] = HEAP8[$11 + 1 >> 0] | 0;
HEAP8[$$byval_copy88 + 2 >> 0] = HEAP8[$11 + 2 >> 0] | 0;
HEAP8[$$byval_copy88 + 3 >> 0] = HEAP8[$11 + 3 >> 0] | 0;
invoke_vii(136, $0 | 0, $$byval_copy88 | 0);
$1090 = __THREW__;
__THREW__ = 0;
if ($1090 & 1) {
label = 239;
break;
}
__THREW__ = 0;
invoke_viiiiiii(1, $11 | 0, 10, $821 | 0, 0, 2, 1, 0);
$1092 = __THREW__;
__THREW__ = 0;
if ($1092 & 1) {
label = 239;
break;
}
__THREW__ = 0;
HEAP8[$$byval_copy88 >> 0] = HEAP8[$11 >> 0] | 0;
HEAP8[$$byval_copy88 + 1 >> 0] = HEAP8[$11 + 1 >> 0] | 0;
HEAP8[$$byval_copy88 + 2 >> 0] = HEAP8[$11 + 2 >> 0] | 0;
HEAP8[$$byval_copy88 + 3 >> 0] = HEAP8[$11 + 3 >> 0] | 0;
invoke_vii(136, $0 | 0, $$byval_copy88 | 0);
$1094 = __THREW__;
__THREW__ = 0;
if ($1094 & 1) {
label = 239;
break;
}
__THREW__ = 0;
invoke_viiiiiii(1, $11 | 0, 9, $821 | 0, 0, 2, 1, 0);
$1096 = __THREW__;
__THREW__ = 0;
if ($1096 & 1) {
label = 239;
break;
}
__THREW__ = 0;
HEAP8[$$byval_copy88 >> 0] = HEAP8[$11 >> 0] | 0;
HEAP8[$$byval_copy88 + 1 >> 0] = HEAP8[$11 + 1 >> 0] | 0;
HEAP8[$$byval_copy88 + 2 >> 0] = HEAP8[$11 + 2 >> 0] | 0;
HEAP8[$$byval_copy88 + 3 >> 0] = HEAP8[$11 + 3 >> 0] | 0;
invoke_vii(136, $0 | 0, $$byval_copy88 | 0);
$1098 = __THREW__;
__THREW__ = 0;
if ($1098 & 1) {
label = 239;
break;
}
__THREW__ = 0;
invoke_viiiiiii(1, $11 | 0, 8, $821 | 0, 0, 2, 1, 0);
$1100 = __THREW__;
__THREW__ = 0;
if ($1100 & 1) {
label = 239;
break;
}
__THREW__ = 0;
HEAP8[$$byval_copy88 >> 0] = HEAP8[$11 >> 0] | 0;
HEAP8[$$byval_copy88 + 1 >> 0] = HEAP8[$11 + 1 >> 0] | 0;
HEAP8[$$byval_copy88 + 2 >> 0] = HEAP8[$11 + 2 >> 0] | 0;
HEAP8[$$byval_copy88 + 3 >> 0] = HEAP8[$11 + 3 >> 0] | 0;
invoke_vii(136, $0 | 0, $$byval_copy88 | 0);
$1102 = __THREW__;
__THREW__ = 0;
if ($1102 & 1) {
label = 239;
break;
}
__THREW__ = 0;
invoke_viiiiiii(1, $11 | 0, 10, $821 | 0, 0, 4, 1, 0);
$1104 = __THREW__;
__THREW__ = 0;
if ($1104 & 1) {
label = 239;
break;
}
__THREW__ = 0;
HEAP8[$$byval_copy88 >> 0] = HEAP8[$11 >> 0] | 0;
HEAP8[$$byval_copy88 + 1 >> 0] = HEAP8[$11 + 1 >> 0] | 0;
HEAP8[$$byval_copy88 + 2 >> 0] = HEAP8[$11 + 2 >> 0] | 0;
HEAP8[$$byval_copy88 + 3 >> 0] = HEAP8[$11 + 3 >> 0] | 0;
invoke_vii(136, $0 | 0, $$byval_copy88 | 0);
$1106 = __THREW__;
__THREW__ = 0;
if ($1106 & 1) {
label = 239;
break;
}
__THREW__ = 0;
invoke_viiiiiii(1, $11 | 0, 9, $821 | 0, 0, 4, 1, 0);
$1108 = __THREW__;
__THREW__ = 0;
if ($1108 & 1) {
label = 239;
break;
}
__THREW__ = 0;
HEAP8[$$byval_copy88 >> 0] = HEAP8[$11 >> 0] | 0;
HEAP8[$$byval_copy88 + 1 >> 0] = HEAP8[$11 + 1 >> 0] | 0;
HEAP8[$$byval_copy88 + 2 >> 0] = HEAP8[$11 + 2 >> 0] | 0;
HEAP8[$$byval_copy88 + 3 >> 0] = HEAP8[$11 + 3 >> 0] | 0;
invoke_vii(136, $0 | 0, $$byval_copy88 | 0);
$1110 = __THREW__;
__THREW__ = 0;
if ($1110 & 1) {
label = 239;
break;
}
__THREW__ = 0;
invoke_viiiiiii(1, $11 | 0, 8, $821 | 0, 0, 4, 1, 0);
$1112 = __THREW__;
__THREW__ = 0;
if ($1112 & 1) {
label = 239;
break;
}
__THREW__ = 0;
HEAP8[$$byval_copy88 >> 0] = HEAP8[$11 >> 0] | 0;
HEAP8[$$byval_copy88 + 1 >> 0] = HEAP8[$11 + 1 >> 0] | 0;
HEAP8[$$byval_copy88 + 2 >> 0] = HEAP8[$11 + 2 >> 0] | 0;
HEAP8[$$byval_copy88 + 3 >> 0] = HEAP8[$11 + 3 >> 0] | 0;
invoke_vii(136, $0 | 0, $$byval_copy88 | 0);
$1114 = __THREW__;
__THREW__ = 0;
if ($1114 & 1) {
label = 239;
break;
}
__THREW__ = 0;
invoke_viiiiiii(1, $11 | 0, 10, $821 | 0, 0, 8, 1, 0);
$1116 = __THREW__;
__THREW__ = 0;
if ($1116 & 1) {
label = 239;
break;
}
__THREW__ = 0;
HEAP8[$$byval_copy88 >> 0] = HEAP8[$11 >> 0] | 0;
HEAP8[$$byval_copy88 + 1 >> 0] = HEAP8[$11 + 1 >> 0] | 0;
HEAP8[$$byval_copy88 + 2 >> 0] = HEAP8[$11 + 2 >> 0] | 0;
HEAP8[$$byval_copy88 + 3 >> 0] = HEAP8[$11 + 3 >> 0] | 0;
invoke_vii(136, $0 | 0, $$byval_copy88 | 0);
$1118 = __THREW__;
__THREW__ = 0;
if ($1118 & 1) {
label = 239;
break;
}
__THREW__ = 0;
invoke_viiiiiii(1, $11 | 0, 9, $821 | 0, 0, 8, 1, 0);
$1120 = __THREW__;
__THREW__ = 0;
if ($1120 & 1) {
label = 239;
break;
}
__THREW__ = 0;
HEAP8[$$byval_copy88 >> 0] = HEAP8[$11 >> 0] | 0;
HEAP8[$$byval_copy88 + 1 >> 0] = HEAP8[$11 + 1 >> 0] | 0;
HEAP8[$$byval_copy88 + 2 >> 0] = HEAP8[$11 + 2 >> 0] | 0;
HEAP8[$$byval_copy88 + 3 >> 0] = HEAP8[$11 + 3 >> 0] | 0;
invoke_vii(136, $0 | 0, $$byval_copy88 | 0);
$1122 = __THREW__;
__THREW__ = 0;
if ($1122 & 1) {
label = 239;
break;
}
__THREW__ = 0;
invoke_viiiiiii(1, $11 | 0, 8, $821 | 0, 0, 8, 1, 0);
$1124 = __THREW__;
__THREW__ = 0;
if ($1124 & 1) {
label = 239;
break;
}
__THREW__ = 0;
HEAP8[$$byval_copy88 >> 0] = HEAP8[$11 >> 0] | 0;
HEAP8[$$byval_copy88 + 1 >> 0] = HEAP8[$11 + 1 >> 0] | 0;
HEAP8[$$byval_copy88 + 2 >> 0] = HEAP8[$11 + 2 >> 0] | 0;
HEAP8[$$byval_copy88 + 3 >> 0] = HEAP8[$11 + 3 >> 0] | 0;
invoke_vii(136, $0 | 0, $$byval_copy88 | 0);
$1126 = __THREW__;
__THREW__ = 0;
if ($1126 & 1) {
label = 239;
break;
}
__THREW__ = 0;
invoke_viiiiiii(1, $11 | 0, 10, $821 | 0, 0, 16, 1, 0);
$1128 = __THREW__;
__THREW__ = 0;
if ($1128 & 1) {
label = 239;
break;
}
__THREW__ = 0;
HEAP8[$$byval_copy88 >> 0] = HEAP8[$11 >> 0] | 0;
HEAP8[$$byval_copy88 + 1 >> 0] = HEAP8[$11 + 1 >> 0] | 0;
HEAP8[$$byval_copy88 + 2 >> 0] = HEAP8[$11 + 2 >> 0] | 0;
HEAP8[$$byval_copy88 + 3 >> 0] = HEAP8[$11 + 3 >> 0] | 0;
invoke_vii(136, $0 | 0, $$byval_copy88 | 0);
$1130 = __THREW__;
__THREW__ = 0;
if ($1130 & 1) {
label = 239;
break;
}
__THREW__ = 0;
invoke_viiiiiii(1, $11 | 0, 9, $821 | 0, 0, 16, 1, 0);
$1132 = __THREW__;
__THREW__ = 0;
if ($1132 & 1) {
label = 239;
break;
}
__THREW__ = 0;
HEAP8[$$byval_copy88 >> 0] = HEAP8[$11 >> 0] | 0;
HEAP8[$$byval_copy88 + 1 >> 0] = HEAP8[$11 + 1 >> 0] | 0;
HEAP8[$$byval_copy88 + 2 >> 0] = HEAP8[$11 + 2 >> 0] | 0;
HEAP8[$$byval_copy88 + 3 >> 0] = HEAP8[$11 + 3 >> 0] | 0;
invoke_vii(136, $0 | 0, $$byval_copy88 | 0);
$1134 = __THREW__;
__THREW__ = 0;
if ($1134 & 1) {
label = 239;
break;
}
__THREW__ = 0;
invoke_viiiiiii(1, $11 | 0, 8, $821 | 0, 0, 16, 1, 0);
$1136 = __THREW__;
__THREW__ = 0;
if ($1136 & 1) {
label = 239;
break;
}
__THREW__ = 0;
HEAP8[$$byval_copy88 >> 0] = HEAP8[$11 >> 0] | 0;
HEAP8[$$byval_copy88 + 1 >> 0] = HEAP8[$11 + 1 >> 0] | 0;
HEAP8[$$byval_copy88 + 2 >> 0] = HEAP8[$11 + 2 >> 0] | 0;
HEAP8[$$byval_copy88 + 3 >> 0] = HEAP8[$11 + 3 >> 0] | 0;
invoke_vii(136, $0 | 0, $$byval_copy88 | 0);
$1138 = __THREW__;
__THREW__ = 0;
if ($1138 & 1) {
label = 239;
break;
}
if (($indvars$iv613 | 0) < 1) $indvars$iv613 = $indvars$iv613 + 1 | 0; else break;
}
if ((label | 0) == 239) {
$852 = ___cxa_find_matching_catch_2() | 0;
$$18 = $852;
$$18313 = tempRet0;
break L48;
}
$sext = (HEAP8[72207] | 0 ? $$0322 : $254) << 16;
$818 = $sext >> 16;
L393 : do if (($sext | 0) > 0) {
$$0332542 = 0;
L394 : while (1) {
$856 = HEAP32[$236 >> 2] | 0;
do if ((HEAP32[$856 + 12 >> 2] | 0) > ($$0332542 | 0)) {
$862 = HEAP32[(HEAP32[$856 >> 2] | 0) + ($$0332542 << 2) >> 2] | 0;
if (!$862) break;
HEAP32[$vararg_buffer43 >> 2] = HEAP32[$862 >> 2];
_snprintf($$byval_copy88, 100, 20814, $vararg_buffer43) | 0;
__THREW__ = 0;
$865 = invoke_ii(21, $$byval_copy88 | 0) | 0;
$866 = __THREW__;
__THREW__ = 0;
if ($866 & 1) {
label = 258;
break L394;
}
__THREW__ = 0;
$868 = invoke_ii(20, 48) | 0;
$869 = __THREW__;
__THREW__ = 0;
if ($869 & 1) {
label = 259;
break L394;
}
__THREW__ = 0;
invoke_viii(83, $868 | 0, $865 | 0, $$0332542 | 0);
$871 = __THREW__;
__THREW__ = 0;
if ($871 & 1) {
label = 260;
break L394;
}
$873 = HEAP32[$250 >> 2] | 0;
if ((HEAP32[$873 + 8 >> 2] | 0) <= ($$0332542 | 0)) {
$878 = HEAP32[$873 + 4 >> 2] | 0;
__THREW__ = 0;
invoke_vii(137, $873 | 0, (($878 | 0) > ($$0332542 | 0) ? $878 : $$0332542 + 1 + ($$0332542 >>> 1) | 0) | 0);
$883 = __THREW__;
__THREW__ = 0;
if ($883 & 1) {
label = 259;
break L394;
}
}
$885 = $873 + 12 | 0;
if ((HEAP32[$885 >> 2] | 0) <= ($$0332542 | 0)) HEAP32[$885 >> 2] = $$0332542 + 1;
HEAP32[(HEAP32[$873 >> 2] | 0) + ($$0332542 << 2) >> 2] = $868;
__THREW__ = 0;
$892 = invoke_iii(22, $865 | 0, HEAP32[$114 >> 2] | 0) | 0;
$893 = __THREW__;
__THREW__ = 0;
if ($893 & 1) {
label = 259;
break L394;
}
$895 = HEAP32[$106 >> 2] | 0;
$896 = $895 + ($892 << 3) | 0;
$897 = $895 + ($892 << 3) + 4 | 0;
switch (HEAP16[$897 >> 1] | 0) {
case 0:
{
__THREW__ = 0;
$899 = invoke_ii(20, 12) | 0;
$900 = __THREW__;
__THREW__ = 0;
if ($900 & 1) {
label = 259;
break L394;
}
HEAP32[$899 >> 2] = $865;
HEAP32[$899 + 4 >> 2] = $$0332542;
HEAP32[$899 + 8 >> 2] = 0;
HEAP32[$896 >> 2] = $899;
HEAP32[$111 >> 2] = (HEAP32[$111 >> 2] | 0) + -1;
$$sink$i$i452 = $110;
break;
}
case 1:
{
HEAP32[$110 >> 2] = (HEAP32[$110 >> 2] | 0) + -1;
label = 255;
break;
}
default:
label = 255;
}
if ((label | 0) == 255) {
label = 0;
$908 = HEAP32[$896 >> 2] | 0;
__THREW__ = 0;
$909 = invoke_ii(20, 12) | 0;
$910 = __THREW__;
__THREW__ = 0;
if ($910 & 1) {
label = 259;
break L394;
}
$913 = $908 + 8 | 0;
$914 = HEAP32[$913 >> 2] | 0;
HEAP32[$909 >> 2] = $865;
HEAP32[$909 + 4 >> 2] = $$0332542;
HEAP32[$909 + 8 >> 2] = $914;
HEAP32[$913 >> 2] = $909;
$$sink$i$i452 = $109;
}
HEAP32[$$sink$i$i452 >> 2] = (HEAP32[$$sink$i$i452 >> 2] | 0) + 1;
HEAP16[$897 >> 1] = (HEAP16[$897 >> 1] | 0) + 1 << 16 >> 16;
HEAP32[$108 >> 2] = (HEAP32[$108 >> 2] | 0) + 1;
HEAP32[$868 + 8 >> 2] = $862;
HEAP32[$862 + 20 >> 2] = $868;
} while (0);
$$0332542 = $$0332542 + 1 | 0;
if (($$0332542 | 0) >= ($818 | 0)) {
label = 240;
break L393;
}
}
if ((label | 0) == 258) {
$924 = ___cxa_find_matching_catch_2() | 0;
$$13 = $924;
$$13308 = tempRet0;
break;
} else if ((label | 0) == 259) {
$926 = ___cxa_find_matching_catch_2() | 0;
$$13 = $926;
$$13308 = tempRet0;
break;
} else if ((label | 0) == 260) {
$928 = ___cxa_find_matching_catch_2() | 0;
$929 = tempRet0;
__ZdlPv($868);
$$13 = $928;
$$13308 = $929;
break;
}
} else label = 240; while (0);
L422 : do if ((label | 0) == 240) {
__THREW__ = 0;
invoke_vi(124, $0 | 0);
$854 = __THREW__;
__THREW__ = 0;
L424 : do if (!($854 & 1)) {
__THREW__ = 0;
invoke_vi(125, $0 | 0);
$932 = __THREW__;
__THREW__ = 0;
if ($932 & 1) break;
$934 = $0 + 144 | 0;
$indvars$iv = 0;
L427 : while (1) {
$941 = HEAP32[(HEAP32[(HEAP32[$227 >> 2] | 0) + 52 + ($indvars$iv * 12 | 0) + 8 >> 2] | 0) + 20 >> 2] | 0;
if ($941 | 0) {
$943 = HEAP32[$226 >> 2] | 0;
$945 = HEAP32[$943 + 128 >> 2] | 0;
do if (!$945) $$sink1$i = 72208; else {
$951 = HEAP32[$943 + 48 >> 2] | 0;
if (!(HEAP8[$943 + 132 >> 0] | 0)) {
$956 = HEAP32[$943 + 56 + ($indvars$iv << 2) >> 2] | 0;
$958 = HEAP32[$943 + 88 >> 2] | 0;
HEAP32[$vararg_buffer51 >> 2] = $951;
HEAP32[$vararg_buffer51 + 4 >> 2] = $956;
HEAP32[$vararg_buffer51 + 8 >> 2] = $958;
_snprintf(72208, 100, $945, $vararg_buffer51) | 0;
$$sink1$i = 72307;
break;
} else {
$954 = HEAP32[$943 + 88 >> 2] | 0;
HEAP32[$vararg_buffer46 >> 2] = $951;
HEAP32[$vararg_buffer46 + 4 >> 2] = $indvars$iv + 1;
HEAP32[$vararg_buffer46 + 8 >> 2] = $954;
_snprintf(72208, 100, $945, $vararg_buffer46) | 0;
$$sink1$i = 72307;
break;
}
} while (0);
HEAP8[$$sink1$i >> 0] = 0;
__THREW__ = 0;
$960 = invoke_iii(22, 72208, HEAP32[$58 >> 2] | 0) | 0;
$961 = __THREW__;
__THREW__ = 0;
if ($961 & 1) break;
$963 = HEAP32[$934 >> 2] | 0;
L438 : do if ((HEAP16[$963 + ($960 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i = HEAP32[$963 + ($960 << 3) >> 2] | 0;
if (!$$01215$i$i$i) {
$$sink$i$i$i = $51;
break;
} else $$01216$i$i$i = $$01215$i$i$i;
while (1) {
__THREW__ = 0;
$970 = invoke_iii(23, 72208, HEAP32[$$01216$i$i$i >> 2] | 0) | 0;
$971 = __THREW__;
__THREW__ = 0;
if ($971 & 1) break L427;
if ($970) break;
$$012$i$i$i = HEAP32[$$01216$i$i$i + 8 >> 2] | 0;
if (!$$012$i$i$i) {
$$sink$i$i$i = $51;
break L438;
} else $$01216$i$i$i = $$012$i$i$i;
}
$$sink$i$i$i = $$01216$i$i$i + 4 | 0;
} else $$sink$i$i$i = $51; while (0);
$976 = HEAP32[$$sink$i$i$i >> 2] | 0;
do if (($976 | 0) == (HEAP32[$51 >> 2] | 0)) $$0$i = 0; else {
$979 = HEAP32[$243 >> 2] | 0;
if (($976 | 0) < 0) {
$$0$i = 0;
break;
}
if ((HEAP32[$979 + 12 >> 2] | 0) <= ($976 | 0)) {
$$0$i = 0;
break;
}
$$0$i = HEAP32[(HEAP32[$979 >> 2] | 0) + ($976 << 2) >> 2] | 0;
} while (0);
HEAP32[$941 + 20 >> 2] = $$0$i;
HEAP32[$941 + 12 >> 2] = 2;
}
if (($indvars$iv | 0) < 4) $indvars$iv = $indvars$iv + 1 | 0; else {
$indvars$iv$1 = 0;
label = 301;
break;
}
}
L452 : do if ((label | 0) == 301) {
while (1) {
label = 0;
$1024 = HEAP32[(HEAP32[(HEAP32[$227 >> 2] | 0) + 112 + ($indvars$iv$1 * 12 | 0) + 8 >> 2] | 0) + 20 >> 2] | 0;
if ($1024 | 0) {
$1026 = HEAP32[$226 >> 2] | 0;
$1028 = HEAP32[$1026 + 128 >> 2] | 0;
do if (!$1028) $$sink1$i$1 = 72208; else {
$1034 = HEAP32[$1026 + 52 >> 2] | 0;
if (!(HEAP8[$1026 + 132 >> 0] | 0)) {
$1039 = HEAP32[$1026 + 56 + ($indvars$iv$1 << 2) >> 2] | 0;
$1041 = HEAP32[$1026 + 88 >> 2] | 0;
HEAP32[$vararg_buffer61 >> 2] = $1034;
HEAP32[$vararg_buffer61 + 4 >> 2] = $1039;
HEAP32[$vararg_buffer61 + 8 >> 2] = $1041;
_snprintf(72208, 100, $1028, $vararg_buffer61) | 0;
$$sink1$i$1 = 72307;
break;
} else {
$1037 = HEAP32[$1026 + 88 >> 2] | 0;
HEAP32[$vararg_buffer56 >> 2] = $1034;
HEAP32[$vararg_buffer56 + 4 >> 2] = $indvars$iv$1 + 1;
HEAP32[$vararg_buffer56 + 8 >> 2] = $1037;
_snprintf(72208, 100, $1028, $vararg_buffer56) | 0;
$$sink1$i$1 = 72307;
break;
}
} while (0);
HEAP8[$$sink1$i$1 >> 0] = 0;
__THREW__ = 0;
$1043 = invoke_iii(22, 72208, HEAP32[$58 >> 2] | 0) | 0;
$1044 = __THREW__;
__THREW__ = 0;
if ($1044 & 1) break L452;
$1046 = HEAP32[$934 >> 2] | 0;
L464 : do if ((HEAP16[$1046 + ($1043 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i$1 = HEAP32[$1046 + ($1043 << 3) >> 2] | 0;
if (!$$01215$i$i$i$1) {
$$sink$i$i$i$1 = $51;
break;
} else $$01216$i$i$i$1 = $$01215$i$i$i$1;
while (1) {
__THREW__ = 0;
$1053 = invoke_iii(23, 72208, HEAP32[$$01216$i$i$i$1 >> 2] | 0) | 0;
$1054 = __THREW__;
__THREW__ = 0;
if ($1054 & 1) break L452;
if ($1053) break;
$$012$i$i$i$1 = HEAP32[$$01216$i$i$i$1 + 8 >> 2] | 0;
if (!$$012$i$i$i$1) {
$$sink$i$i$i$1 = $51;
break L464;
} else $$01216$i$i$i$1 = $$012$i$i$i$1;
}
$$sink$i$i$i$1 = $$01216$i$i$i$1 + 4 | 0;
} else $$sink$i$i$i$1 = $51; while (0);
$1059 = HEAP32[$$sink$i$i$i$1 >> 2] | 0;
do if (($1059 | 0) == (HEAP32[$51 >> 2] | 0)) $$0$i$1 = 0; else {
$1062 = HEAP32[$243 >> 2] | 0;
if (($1059 | 0) < 0) {
$$0$i$1 = 0;
break;
}
if ((HEAP32[$1062 + 12 >> 2] | 0) <= ($1059 | 0)) {
$$0$i$1 = 0;
break;
}
$$0$i$1 = HEAP32[(HEAP32[$1062 >> 2] | 0) + ($1059 << 2) >> 2] | 0;
} while (0);
HEAP32[$1024 + 20 >> 2] = $$0$i$1;
HEAP32[$1024 + 12 >> 2] = 2;
}
if (($indvars$iv$1 | 0) < 4) {
$indvars$iv$1 = $indvars$iv$1 + 1 | 0;
label = 301;
} else break;
}
$1073 = HEAP32[$227 >> 2] | 0;
$993 = HEAP32[(HEAP32[$1073 + 12 >> 2] | 0) + 20 >> 2] | 0;
if (!$993) $995 = $1073; else {
HEAP32[$993 + 12 >> 2] = 3;
$995 = HEAP32[$227 >> 2] | 0;
}
$998 = HEAP32[(HEAP32[$995 + 16 >> 2] | 0) + 20 >> 2] | 0;
if ($998 | 0) HEAP32[$998 + 12 >> 2] = 3;
__THREW__ = 0;
$1000 = invoke_ii(20, 104) | 0;
$1018 = __THREW__;
__THREW__ = 0;
if ($1018 & 1) break L424;
__THREW__ = 0;
invoke_vi(126, $1000 | 0);
$1001 = __THREW__;
__THREW__ = 0;
if ($1001 & 1) {
$1005 = ___cxa_find_matching_catch_2() | 0;
$1006 = tempRet0;
__ZdlPv($1000);
$$13 = $1005;
$$13308 = $1006;
break L422;
}
HEAP32[$134 >> 2] = $1000;
__THREW__ = 0;
invoke_vii(138, $1000 | 0, $0 | 0);
$1003 = __THREW__;
__THREW__ = 0;
if ($1003 & 1) break L424;
STACKTOP = sp;
return;
} while (0);
$989 = ___cxa_find_matching_catch_2() | 0;
$$13 = $989;
$$13308 = tempRet0;
break L422;
} while (0);
$935 = ___cxa_find_matching_catch_2() | 0;
$$13 = $935;
$$13308 = tempRet0;
} while (0);
$$18 = $$13;
$$18313 = $$13308;
break L48;
} while (0);
$597 = ___cxa_find_matching_catch_2() | 0;
$$18 = $597;
$$18313 = tempRet0;
break L48;
} while (0);
if ((label | 0) == 142) HEAP32[$229 >> 2] = 0;
__THREW__ = 0;
HEAP32[$vararg_buffer30 >> 2] = $570;
invoke_vii(115, 20581, $vararg_buffer30 | 0);
$580 = __THREW__;
__THREW__ = 0;
if ($580 & 1) break;
__THREW__ = 0;
invoke_vi(119, 1);
__THREW__ = 0;
} while (0);
$583 = ___cxa_find_matching_catch_2() | 0;
$$18 = $583;
$$18313 = tempRet0;
}
} while (0);
if ((label | 0) == 37) {
$272 = ___cxa_find_matching_catch_2() | 0;
$$18 = $272;
$$18313 = tempRet0;
}
$$19 = $$18;
$$19314 = $$18313;
}
}
if ((label | 0) == 36) {
$270 = ___cxa_find_matching_catch_2() | 0;
$$19 = $270;
$$19314 = tempRet0;
}
$$20 = $$19;
$$20315 = $$19314;
}
}
if ((label | 0) == 35) {
$268 = ___cxa_find_matching_catch_2() | 0;
$$20 = $268;
$$20315 = tempRet0;
}
__THREW__ = 0;
invoke_vi(93, $106 | 0);
$1007 = __THREW__;
__THREW__ = 0;
if ($1007 & 1) {
$1015 = ___cxa_find_matching_catch_3(0) | 0;
$1016 = tempRet0;
___clang_call_terminate($1015);
} else {
$$21 = $$20;
$$21316 = $$20315;
}
}
__THREW__ = 0;
invoke_vi(127, $78 | 0);
$1009 = __THREW__;
__THREW__ = 0;
if ($1009 & 1) {
$1015 = ___cxa_find_matching_catch_3(0) | 0;
$1016 = tempRet0;
___clang_call_terminate($1015);
} else {
$$22 = $$21;
$$22317 = $$21316;
}
}
__THREW__ = 0;
invoke_vi(93, $50 | 0);
$1011 = __THREW__;
__THREW__ = 0;
if ($1011 & 1) {
$1015 = ___cxa_find_matching_catch_3(0) | 0;
$1016 = tempRet0;
___clang_call_terminate($1015);
} else {
$$23 = $$22;
$$23318 = $$22317;
}
}
__THREW__ = 0;
invoke_vi(93, $22 | 0);
$1013 = __THREW__;
__THREW__ = 0;
if ($1013 & 1) {
$1015 = ___cxa_find_matching_catch_3(0) | 0;
$1016 = tempRet0;
___clang_call_terminate($1015);
} else {
$$24 = $$23;
$$24319 = $$23318;
___resumeException($$24 | 0);
}
}
function __Z17CreateNameIndexesv() {
var $$088 = 0, $$089 = 0, $$lcssa = 0, $$lcssa377 = 0, $$pre = 0, $$pre368 = 0, $$pre370 = 0, $$sink$i$i = 0, $$sink$i$i$i = 0, $$sink$i$i104$i = 0, $$sink$i$i112$i = 0, $$sink$i$i120$i = 0, $$sink$i$i128$i = 0, $$sink$i$i132 = 0, $$sink$i$i136$i = 0, $$sink$i$i140 = 0, $$sink$i$i144$i = 0, $$sink$i$i148 = 0, $$sink$i$i148$1 = 0, $$sink$i$i157 = 0, $$sink$i$i16$i = 0, $$sink$i$i169 = 0, $$sink$i$i178 = 0, $$sink$i$i178$1 = 0, $$sink$i$i178$2 = 0, $$sink$i$i178$3 = 0, $$sink$i$i187 = 0, $$sink$i$i196 = 0, $$sink$i$i205 = 0, $$sink$i$i205$1 = 0, $$sink$i$i205$2 = 0, $$sink$i$i215 = 0, $$sink$i$i215$1 = 0, $$sink$i$i215$2 = 0, $$sink$i$i225 = 0, $$sink$i$i234 = 0, $$sink$i$i24$i = 0, $$sink$i$i240 = 0, $$sink$i$i247 = 0, $$sink$i$i256 = 0, $$sink$i$i265 = 0, $$sink$i$i32$i = 0, $$sink$i$i40$i = 0, $$sink$i$i48$i = 0, $$sink$i$i56$i = 0, $$sink$i$i64$i = 0, $$sink$i$i72$i = 0, $$sink$i$i8$i = 0, $$sink$i$i80$i = 0, $$sink$i$i88$i = 0, $$sink$i$i96$i = 0, $$sink1$i = 0, $$sink1$i$1 = 0, $$sink19$i$i = 0, $$sroa$0$0$copyload = 0, $$sroa$0$015$i = 0, $$sroa$0$1$i = 0, $$sroa$0$2$i = 0, $$sroa$0$3$i = 0, $$sroa$0287$0$copyload = 0, $$sroa$0289$0$copyload = 0, $$sroa$0291$0$copyload = 0, $$sroa$0291$0$copyload$1 = 0, $$sroa$6$014$i = 0, $0 = 0, $1 = 0, $10 = 0, $1001 = 0, $1005 = 0, $1008 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1019 = 0, $102 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $1030 = 0, $1032 = 0, $1035 = 0, $1039 = 0, $1042 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $105 = 0, $1053 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $106 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1066 = 0, $1069 = 0, $107 = 0, $1073 = 0, $1076 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1087 = 0, $1090 = 0, $1093 = 0, $1097 = 0, $11 = 0, $1100 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1111 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1119 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1126 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $1140 = 0, $1142 = 0, $1144 = 0, $1145 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1153 = 0, $1156 = 0, $1158 = 0, $1159 = 0, $1160 = 0, $1166 = 0, $1168 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1184 = 0, $1187 = 0, $1191 = 0, $1194 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $12 = 0, $1205 = 0, $1208 = 0, $121 = 0, $1211 = 0, $1215 = 0, $1218 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1229 = 0, $123 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1255 = 0, $1258 = 0, $126 = 0, $1262 = 0, $1265 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $1276 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $1300 = 0, $1302 = 0, $1305 = 0, $1309 = 0, $1312 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $132 = 0, $1323 = 0, $1326 = 0, $1328 = 0, $1330 = 0, $1331 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1338 = 0, $1342 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $135 = 0, $1350 = 0, $1352 = 0, $1354 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1362 = 0, $1363 = 0, $1365 = 0, $137 = 0, $1373 = 0, $1376 = 0, $138 = 0, $1380 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1389 = 0, $1396 = 0, $1398 = 0, $1399 = 0, $14 = 0, $1400 = 0, $1408 = 0, $1410 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1418 = 0, $1421 = 0, $1425 = 0, $1428 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1439 = 0, $1442 = 0, $1444 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1452 = 0, $1455 = 0, $1459 = 0, $1462 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1469 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1487 = 0, $1490 = 0, $1494 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $15 = 0, $1505 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1518 = 0, $152 = 0, $1521 = 0, $1524 = 0, $1528 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1539 = 0, $154 = 0, $1544 = 0, $1545 = 0, $1547 = 0, $1550 = 0, $1553 = 0, $1557 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1568 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1581 = 0, $1584 = 0, $1587 = 0, $1591 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1602 = 0, $1605 = 0, $1608 = 0, $1611 = 0, $1615 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1626 = 0, $1629 = 0, $1630 = 0, $1631 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1639 = 0, $1642 = 0, $1645 = 0, $1649 = 0, $165 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $166 = 0, $1660 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1673 = 0, $1676 = 0, $1679 = 0, $168 = 0, $1683 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1694 = 0, $1697 = 0, $1699 = 0, $17 = 0, $1705 = 0, $1708 = 0, $1710 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1719 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1724 = 0, $1727 = 0, $1730 = 0, $1734 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1745 = 0, $1748 = 0, $175 = 0, $178 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $186 = 0, $188 = 0, $192 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $205 = 0, $208 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $216 = 0, $218 = 0, $222 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $235 = 0, $238 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $246 = 0, $248 = 0, $252 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $265 = 0, $268 = 0, $27 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $276 = 0, $278 = 0, $282 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $295 = 0, $298 = 0, $3 = 0, $30 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $306 = 0, $308 = 0, $312 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $325 = 0, $328 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $336 = 0, $338 = 0, $34 = 0, $342 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $355 = 0, $358 = 0, $36 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $366 = 0, $368 = 0, $37 = 0, $372 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $38 = 0, $385 = 0, $388 = 0, $39 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $396 = 0, $398 = 0, $4 = 0, $402 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $41 = 0, $415 = 0, $418 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $426 = 0, $428 = 0, $432 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $445 = 0, $448 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $456 = 0, $458 = 0, $462 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $47 = 0, $475 = 0, $478 = 0, $48 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $486 = 0, $488 = 0, $49 = 0, $492 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $5 = 0, $50 = 0, $505 = 0, $508 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $516 = 0, $518 = 0, $522 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $535 = 0, $538 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $546 = 0, $548 = 0, $552 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $565 = 0, $568 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $576 = 0, $578 = 0, $58 = 0, $582 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $591 = 0, $592 = 0, $597 = 0, $6 = 0, $600 = 0, $602 = 0, $61 = 0, $62 = 0, $63 = 0, $637 = 0, $638 = 0, $64 = 0, $66 = 0, $664 = 0, $68 = 0, $699 = 0, $706 = 0, $708 = 0, $709 = 0, $711 = 0, $72 = 0, $722 = 0, $728 = 0, $734 = 0, $736 = 0, $737 = 0, $739 = 0, $75 = 0, $750 = 0, $756 = 0, $76 = 0, $762 = 0, $764 = 0, $765 = 0, $767 = 0, $77 = 0, $778 = 0, $78 = 0, $784 = 0, $785 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $793 = 0, $796 = 0, $8 = 0, $800 = 0, $803 = 0, $805 = 0, $806 = 0, $807 = 0, $814 = 0, $817 = 0, $818 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $826 = 0, $829 = 0, $833 = 0, $836 = 0, $838 = 0, $839 = 0, $840 = 0, $847 = 0, $85 = 0, $850 = 0, $851 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $859 = 0, $862 = 0, $866 = 0, $869 = 0, $871 = 0, $872 = 0, $873 = 0, $88 = 0, $880 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $891 = 0, $897 = 0, $9 = 0, $900 = 0, $902 = 0, $904 = 0, $905 = 0, $906 = 0, $91 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $916 = 0, $919 = 0, $92 = 0, $923 = 0, $926 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $937 = 0, $94 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $949 = 0, $950 = 0, $951 = 0, $952 = 0, $954 = 0, $955 = 0, $956 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $964 = 0, $967 = 0, $971 = 0, $974 = 0, $976 = 0, $977 = 0, $978 = 0, $98 = 0, $985 = 0, $988 = 0, $989 = 0, $990 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $998 = 0, $indvars$iv = 0, $indvars$iv343 = 0, $indvars$iv346 = 0, $indvars$iv349 = 0, $indvars$iv355 = 0, $indvars$iv358 = 0, $indvars$iv358$1 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer19 = 0, $vararg_buffer2 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer32 = 0, $vararg_buffer37 = 0, $vararg_buffer41 = 0, $vararg_buffer46 = 0, $vararg_buffer52 = 0, $vararg_buffer58 = 0, $vararg_buffer6 = 0, $vararg_buffer62 = 0, $vararg_buffer65 = 0, $vararg_buffer69 = 0, $vararg_buffer74 = 0, $vararg_buffer79 = 0, $vararg_buffer85 = 0, $vararg_buffer89 = 0, $vararg_buffer93 = 0, $vararg_buffer98 = 0, label = 0, sp = 0, $indvars$iv346$looptemp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 304 | 0;
$vararg_buffer98 = sp + 256 | 0;
$vararg_buffer93 = sp + 240 | 0;
$vararg_buffer89 = sp + 232 | 0;
$vararg_buffer85 = sp + 224 | 0;
$vararg_buffer79 = sp + 208 | 0;
$vararg_buffer74 = sp + 192 | 0;
$vararg_buffer69 = sp + 176 | 0;
$vararg_buffer65 = sp + 168 | 0;
$vararg_buffer62 = sp + 160 | 0;
$vararg_buffer58 = sp + 152 | 0;
$vararg_buffer52 = sp + 136 | 0;
$vararg_buffer46 = sp + 120 | 0;
$vararg_buffer41 = sp + 104 | 0;
$vararg_buffer37 = sp + 96 | 0;
$vararg_buffer32 = sp + 80 | 0;
$vararg_buffer28 = sp + 72 | 0;
$vararg_buffer24 = sp + 64 | 0;
$vararg_buffer19 = sp + 48 | 0;
$vararg_buffer14 = sp + 32 | 0;
$vararg_buffer10 = sp + 24 | 0;
$vararg_buffer6 = sp + 16 | 0;
$vararg_buffer2 = sp + 8 | 0;
$vararg_buffer = sp;
$0 = sp + 284 | 0;
$1 = sp + 280 | 0;
$2 = sp + 276 | 0;
$3 = sp + 272 | 0;
$4 = sp + 288 | 0;
$5 = sp + 268 | 0;
$6 = __Znwj(28) | 0;
HEAP32[$6 + 20 >> 2] = 0;
$8 = $6 + 24 | 0;
HEAP32[$8 >> 2] = 0;
$9 = $6 + 8 | 0;
HEAP32[$9 >> 2] = 0;
$10 = $6 + 16 | 0;
HEAP32[$10 >> 2] = 0;
$11 = $6 + 12 | 0;
HEAP32[$11 >> 2] = 30;
$12 = _malloc(240) | 0;
HEAP32[$6 >> 2] = $12;
$14 = $6 + 4 | 0;
if (!$12) {
HEAP32[$14 >> 2] = 0;
__THREW__ = 0;
HEAP32[$vararg_buffer >> 2] = 30;
HEAP32[$vararg_buffer + 4 >> 2] = 8;
invoke_vii(115, 57708, $vararg_buffer | 0);
$15 = __THREW__;
__THREW__ = 0;
if ($15 & 1) {
$591 = ___cxa_find_matching_catch_2() | 0;
$592 = tempRet0;
__ZdlPv($6);
___resumeException($591 | 0);
}
$17 = ___cxa_allocate_exception(4) | 0;
HEAP32[$17 >> 2] = 1;
__THREW__ = 0;
invoke_viii(75, $17 | 0, 32, 0);
__THREW__ = 0;
$591 = ___cxa_find_matching_catch_2() | 0;
$592 = tempRet0;
__ZdlPv($6);
___resumeException($591 | 0);
}
HEAP32[$14 >> 2] = 30;
HEAP32[$12 >> 2] = 0;
HEAP16[$12 + 4 >> 1] = 0;
HEAP32[$12 + 8 >> 2] = 0;
HEAP16[$12 + 12 >> 1] = 0;
HEAP32[$12 + 16 >> 2] = 0;
HEAP16[$12 + 20 >> 1] = 0;
HEAP32[$12 + 24 >> 2] = 0;
HEAP16[(HEAP32[$6 >> 2] | 0) + 28 >> 1] = 0;
$27 = HEAP32[$14 >> 2] | 0;
if (($27 | 0) > 4) {
$30 = 4;
do {
HEAP32[(HEAP32[$6 >> 2] | 0) + ($30 << 3) >> 2] = 0;
HEAP16[(HEAP32[$6 >> 2] | 0) + ($30 << 3) + 4 >> 1] = 0;
$30 = $30 + 1 | 0;
$34 = HEAP32[$14 >> 2] | 0;
} while (($30 | 0) < ($34 | 0));
$$lcssa377 = $34;
} else $$lcssa377 = $27;
HEAP32[16540] = $6;
$36 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(18047, $$lcssa377) | 0;
$37 = HEAP32[$6 >> 2] | 0;
$38 = $37 + ($36 << 3) | 0;
$39 = $37 + ($36 << 3) + 4 | 0;
switch (HEAP16[$39 >> 1] | 0) {
case 0:
{
$41 = __Znwj(12) | 0;
HEAP32[$41 >> 2] = 18047;
HEAP32[$41 + 4 >> 2] = 18052;
HEAP32[$41 + 8 >> 2] = 0;
HEAP32[$38 >> 2] = $41;
HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + -1;
$$sink$i$i$i = $10;
break;
}
case 1:
{
HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + -1;
label = 9;
break;
}
default:
label = 9;
}
if ((label | 0) == 9) {
$47 = HEAP32[$38 >> 2] | 0;
$48 = __Znwj(12) | 0;
$49 = $47 + 8 | 0;
$50 = HEAP32[$49 >> 2] | 0;
HEAP32[$48 >> 2] = 18047;
HEAP32[$48 + 4 >> 2] = 18052;
HEAP32[$48 + 8 >> 2] = $50;
HEAP32[$49 >> 2] = $48;
$$sink$i$i$i = $9;
}
HEAP32[$$sink$i$i$i >> 2] = (HEAP32[$$sink$i$i$i >> 2] | 0) + 1;
HEAP16[$39 >> 1] = (HEAP16[$39 >> 1] | 0) + 1 << 16 >> 16;
HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1;
$58 = HEAP32[16540] | 0;
$61 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(18056, HEAP32[$58 + 4 >> 2] | 0) | 0;
$62 = HEAP32[$58 >> 2] | 0;
$63 = $62 + ($61 << 3) | 0;
$64 = $62 + ($61 << 3) + 4 | 0;
switch (HEAP16[$64 >> 1] | 0) {
case 0:
{
$66 = __Znwj(12) | 0;
HEAP32[$66 >> 2] = 18056;
HEAP32[$66 + 4 >> 2] = 18061;
HEAP32[$66 + 8 >> 2] = 0;
HEAP32[$63 >> 2] = $66;
$68 = $58 + 12 | 0;
HEAP32[$68 >> 2] = (HEAP32[$68 >> 2] | 0) + -1;
$$sink$i$i8$i = $58 + 16 | 0;
break;
}
case 1:
{
$72 = $58 + 16 | 0;
HEAP32[$72 >> 2] = (HEAP32[$72 >> 2] | 0) + -1;
label = 13;
break;
}
default:
label = 13;
}
if ((label | 0) == 13) {
$75 = HEAP32[$63 >> 2] | 0;
$76 = __Znwj(12) | 0;
$77 = $75 + 8 | 0;
$78 = HEAP32[$77 >> 2] | 0;
HEAP32[$76 >> 2] = 18056;
HEAP32[$76 + 4 >> 2] = 18061;
HEAP32[$76 + 8 >> 2] = $78;
HEAP32[$77 >> 2] = $76;
$$sink$i$i8$i = $58 + 8 | 0;
}
HEAP32[$$sink$i$i8$i >> 2] = (HEAP32[$$sink$i$i8$i >> 2] | 0) + 1;
HEAP16[$64 >> 1] = (HEAP16[$64 >> 1] | 0) + 1 << 16 >> 16;
$85 = $58 + 24 | 0;
HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + 1;
$88 = HEAP32[16540] | 0;
$91 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(18069, HEAP32[$88 + 4 >> 2] | 0) | 0;
$92 = HEAP32[$88 >> 2] | 0;
$93 = $92 + ($91 << 3) | 0;
$94 = $92 + ($91 << 3) + 4 | 0;
switch (HEAP16[$94 >> 1] | 0) {
case 0:
{
$96 = __Znwj(12) | 0;
HEAP32[$96 >> 2] = 18069;
HEAP32[$96 + 4 >> 2] = 52104;
HEAP32[$96 + 8 >> 2] = 0;
HEAP32[$93 >> 2] = $96;
$98 = $88 + 12 | 0;
HEAP32[$98 >> 2] = (HEAP32[$98 >> 2] | 0) + -1;
$$sink$i$i16$i = $88 + 16 | 0;
break;
}
case 1:
{
$102 = $88 + 16 | 0;
HEAP32[$102 >> 2] = (HEAP32[$102 >> 2] | 0) + -1;
label = 17;
break;
}
default:
label = 17;
}
if ((label | 0) == 17) {
$105 = HEAP32[$93 >> 2] | 0;
$106 = __Znwj(12) | 0;
$107 = $105 + 8 | 0;
$108 = HEAP32[$107 >> 2] | 0;
HEAP32[$106 >> 2] = 18069;
HEAP32[$106 + 4 >> 2] = 52104;
HEAP32[$106 + 8 >> 2] = $108;
HEAP32[$107 >> 2] = $106;
$$sink$i$i16$i = $88 + 8 | 0;
}
HEAP32[$$sink$i$i16$i >> 2] = (HEAP32[$$sink$i$i16$i >> 2] | 0) + 1;
HEAP16[$94 >> 1] = (HEAP16[$94 >> 1] | 0) + 1 << 16 >> 16;
$115 = $88 + 24 | 0;
HEAP32[$115 >> 2] = (HEAP32[$115 >> 2] | 0) + 1;
$118 = HEAP32[16540] | 0;
$121 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(18074, HEAP32[$118 + 4 >> 2] | 0) | 0;
$122 = HEAP32[$118 >> 2] | 0;
$123 = $122 + ($121 << 3) | 0;
$124 = $122 + ($121 << 3) + 4 | 0;
switch (HEAP16[$124 >> 1] | 0) {
case 0:
{
$126 = __Znwj(12) | 0;
HEAP32[$126 >> 2] = 18074;
HEAP32[$126 + 4 >> 2] = 52077;
HEAP32[$126 + 8 >> 2] = 0;
HEAP32[$123 >> 2] = $126;
$128 = $118 + 12 | 0;
HEAP32[$128 >> 2] = (HEAP32[$128 >> 2] | 0) + -1;
$$sink$i$i24$i = $118 + 16 | 0;
break;
}
case 1:
{
$132 = $118 + 16 | 0;
HEAP32[$132 >> 2] = (HEAP32[$132 >> 2] | 0) + -1;
label = 21;
break;
}
default:
label = 21;
}
if ((label | 0) == 21) {
$135 = HEAP32[$123 >> 2] | 0;
$136 = __Znwj(12) | 0;
$137 = $135 + 8 | 0;
$138 = HEAP32[$137 >> 2] | 0;
HEAP32[$136 >> 2] = 18074;
HEAP32[$136 + 4 >> 2] = 52077;
HEAP32[$136 + 8 >> 2] = $138;
HEAP32[$137 >> 2] = $136;
$$sink$i$i24$i = $118 + 8 | 0;
}
HEAP32[$$sink$i$i24$i >> 2] = (HEAP32[$$sink$i$i24$i >> 2] | 0) + 1;
HEAP16[$124 >> 1] = (HEAP16[$124 >> 1] | 0) + 1 << 16 >> 16;
$145 = $118 + 24 | 0;
HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + 1;
$148 = HEAP32[16540] | 0;
$151 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(18079, HEAP32[$148 + 4 >> 2] | 0) | 0;
$152 = HEAP32[$148 >> 2] | 0;
$153 = $152 + ($151 << 3) | 0;
$154 = $152 + ($151 << 3) + 4 | 0;
switch (HEAP16[$154 >> 1] | 0) {
case 0:
{
$156 = __Znwj(12) | 0;
HEAP32[$156 >> 2] = 18079;
HEAP32[$156 + 4 >> 2] = 52072;
HEAP32[$156 + 8 >> 2] = 0;
HEAP32[$153 >> 2] = $156;
$158 = $148 + 12 | 0;
HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + -1;
$$sink$i$i32$i = $148 + 16 | 0;
break;
}
case 1:
{
$162 = $148 + 16 | 0;
HEAP32[$162 >> 2] = (HEAP32[$162 >> 2] | 0) + -1;
label = 25;
break;
}
default:
label = 25;
}
if ((label | 0) == 25) {
$165 = HEAP32[$153 >> 2] | 0;
$166 = __Znwj(12) | 0;
$167 = $165 + 8 | 0;
$168 = HEAP32[$167 >> 2] | 0;
HEAP32[$166 >> 2] = 18079;
HEAP32[$166 + 4 >> 2] = 52072;
HEAP32[$166 + 8 >> 2] = $168;
HEAP32[$167 >> 2] = $166;
$$sink$i$i32$i = $148 + 8 | 0;
}
HEAP32[$$sink$i$i32$i >> 2] = (HEAP32[$$sink$i$i32$i >> 2] | 0) + 1;
HEAP16[$154 >> 1] = (HEAP16[$154 >> 1] | 0) + 1 << 16 >> 16;
$175 = $148 + 24 | 0;
HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + 1;
$178 = HEAP32[16540] | 0;
$181 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(18084, HEAP32[$178 + 4 >> 2] | 0) | 0;
$182 = HEAP32[$178 >> 2] | 0;
$183 = $182 + ($181 << 3) | 0;
$184 = $182 + ($181 << 3) + 4 | 0;
switch (HEAP16[$184 >> 1] | 0) {
case 0:
{
$186 = __Znwj(12) | 0;
HEAP32[$186 >> 2] = 18084;
HEAP32[$186 + 4 >> 2] = 18089;
HEAP32[$186 + 8 >> 2] = 0;
HEAP32[$183 >> 2] = $186;
$188 = $178 + 12 | 0;
HEAP32[$188 >> 2] = (HEAP32[$188 >> 2] | 0) + -1;
$$sink$i$i40$i = $178 + 16 | 0;
break;
}
case 1:
{
$192 = $178 + 16 | 0;
HEAP32[$192 >> 2] = (HEAP32[$192 >> 2] | 0) + -1;
label = 29;
break;
}
default:
label = 29;
}
if ((label | 0) == 29) {
$195 = HEAP32[$183 >> 2] | 0;
$196 = __Znwj(12) | 0;
$197 = $195 + 8 | 0;
$198 = HEAP32[$197 >> 2] | 0;
HEAP32[$196 >> 2] = 18084;
HEAP32[$196 + 4 >> 2] = 18089;
HEAP32[$196 + 8 >> 2] = $198;
HEAP32[$197 >> 2] = $196;
$$sink$i$i40$i = $178 + 8 | 0;
}
HEAP32[$$sink$i$i40$i >> 2] = (HEAP32[$$sink$i$i40$i >> 2] | 0) + 1;
HEAP16[$184 >> 1] = (HEAP16[$184 >> 1] | 0) + 1 << 16 >> 16;
$205 = $178 + 24 | 0;
HEAP32[$205 >> 2] = (HEAP32[$205 >> 2] | 0) + 1;
$208 = HEAP32[16540] | 0;
$211 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(18097, HEAP32[$208 + 4 >> 2] | 0) | 0;
$212 = HEAP32[$208 >> 2] | 0;
$213 = $212 + ($211 << 3) | 0;
$214 = $212 + ($211 << 3) + 4 | 0;
switch (HEAP16[$214 >> 1] | 0) {
case 0:
{
$216 = __Znwj(12) | 0;
HEAP32[$216 >> 2] = 18097;
HEAP32[$216 + 4 >> 2] = 18102;
HEAP32[$216 + 8 >> 2] = 0;
HEAP32[$213 >> 2] = $216;
$218 = $208 + 12 | 0;
HEAP32[$218 >> 2] = (HEAP32[$218 >> 2] | 0) + -1;
$$sink$i$i48$i = $208 + 16 | 0;
break;
}
case 1:
{
$222 = $208 + 16 | 0;
HEAP32[$222 >> 2] = (HEAP32[$222 >> 2] | 0) + -1;
label = 33;
break;
}
default:
label = 33;
}
if ((label | 0) == 33) {
$225 = HEAP32[$213 >> 2] | 0;
$226 = __Znwj(12) | 0;
$227 = $225 + 8 | 0;
$228 = HEAP32[$227 >> 2] | 0;
HEAP32[$226 >> 2] = 18097;
HEAP32[$226 + 4 >> 2] = 18102;
HEAP32[$226 + 8 >> 2] = $228;
HEAP32[$227 >> 2] = $226;
$$sink$i$i48$i = $208 + 8 | 0;
}
HEAP32[$$sink$i$i48$i >> 2] = (HEAP32[$$sink$i$i48$i >> 2] | 0) + 1;
HEAP16[$214 >> 1] = (HEAP16[$214 >> 1] | 0) + 1 << 16 >> 16;
$235 = $208 + 24 | 0;
HEAP32[$235 >> 2] = (HEAP32[$235 >> 2] | 0) + 1;
$238 = HEAP32[16540] | 0;
$241 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(18109, HEAP32[$238 + 4 >> 2] | 0) | 0;
$242 = HEAP32[$238 >> 2] | 0;
$243 = $242 + ($241 << 3) | 0;
$244 = $242 + ($241 << 3) + 4 | 0;
switch (HEAP16[$244 >> 1] | 0) {
case 0:
{
$246 = __Znwj(12) | 0;
HEAP32[$246 >> 2] = 18109;
HEAP32[$246 + 4 >> 2] = 18114;
HEAP32[$246 + 8 >> 2] = 0;
HEAP32[$243 >> 2] = $246;
$248 = $238 + 12 | 0;
HEAP32[$248 >> 2] = (HEAP32[$248 >> 2] | 0) + -1;
$$sink$i$i56$i = $238 + 16 | 0;
break;
}
case 1:
{
$252 = $238 + 16 | 0;
HEAP32[$252 >> 2] = (HEAP32[$252 >> 2] | 0) + -1;
label = 37;
break;
}
default:
label = 37;
}
if ((label | 0) == 37) {
$255 = HEAP32[$243 >> 2] | 0;
$256 = __Znwj(12) | 0;
$257 = $255 + 8 | 0;
$258 = HEAP32[$257 >> 2] | 0;
HEAP32[$256 >> 2] = 18109;
HEAP32[$256 + 4 >> 2] = 18114;
HEAP32[$256 + 8 >> 2] = $258;
HEAP32[$257 >> 2] = $256;
$$sink$i$i56$i = $238 + 8 | 0;
}
HEAP32[$$sink$i$i56$i >> 2] = (HEAP32[$$sink$i$i56$i >> 2] | 0) + 1;
HEAP16[$244 >> 1] = (HEAP16[$244 >> 1] | 0) + 1 << 16 >> 16;
$265 = $238 + 24 | 0;
HEAP32[$265 >> 2] = (HEAP32[$265 >> 2] | 0) + 1;
$268 = HEAP32[16540] | 0;
$271 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(18123, HEAP32[$268 + 4 >> 2] | 0) | 0;
$272 = HEAP32[$268 >> 2] | 0;
$273 = $272 + ($271 << 3) | 0;
$274 = $272 + ($271 << 3) + 4 | 0;
switch (HEAP16[$274 >> 1] | 0) {
case 0:
{
$276 = __Znwj(12) | 0;
HEAP32[$276 >> 2] = 18123;
HEAP32[$276 + 4 >> 2] = 18128;
HEAP32[$276 + 8 >> 2] = 0;
HEAP32[$273 >> 2] = $276;
$278 = $268 + 12 | 0;
HEAP32[$278 >> 2] = (HEAP32[$278 >> 2] | 0) + -1;
$$sink$i$i64$i = $268 + 16 | 0;
break;
}
case 1:
{
$282 = $268 + 16 | 0;
HEAP32[$282 >> 2] = (HEAP32[$282 >> 2] | 0) + -1;
label = 41;
break;
}
default:
label = 41;
}
if ((label | 0) == 41) {
$285 = HEAP32[$273 >> 2] | 0;
$286 = __Znwj(12) | 0;
$287 = $285 + 8 | 0;
$288 = HEAP32[$287 >> 2] | 0;
HEAP32[$286 >> 2] = 18123;
HEAP32[$286 + 4 >> 2] = 18128;
HEAP32[$286 + 8 >> 2] = $288;
HEAP32[$287 >> 2] = $286;
$$sink$i$i64$i = $268 + 8 | 0;
}
HEAP32[$$sink$i$i64$i >> 2] = (HEAP32[$$sink$i$i64$i >> 2] | 0) + 1;
HEAP16[$274 >> 1] = (HEAP16[$274 >> 1] | 0) + 1 << 16 >> 16;
$295 = $268 + 24 | 0;
HEAP32[$295 >> 2] = (HEAP32[$295 >> 2] | 0) + 1;
$298 = HEAP32[16540] | 0;
$301 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(18134, HEAP32[$298 + 4 >> 2] | 0) | 0;
$302 = HEAP32[$298 >> 2] | 0;
$303 = $302 + ($301 << 3) | 0;
$304 = $302 + ($301 << 3) + 4 | 0;
switch (HEAP16[$304 >> 1] | 0) {
case 0:
{
$306 = __Znwj(12) | 0;
HEAP32[$306 >> 2] = 18134;
HEAP32[$306 + 4 >> 2] = 18139;
HEAP32[$306 + 8 >> 2] = 0;
HEAP32[$303 >> 2] = $306;
$308 = $298 + 12 | 0;
HEAP32[$308 >> 2] = (HEAP32[$308 >> 2] | 0) + -1;
$$sink$i$i72$i = $298 + 16 | 0;
break;
}
case 1:
{
$312 = $298 + 16 | 0;
HEAP32[$312 >> 2] = (HEAP32[$312 >> 2] | 0) + -1;
label = 45;
break;
}
default:
label = 45;
}
if ((label | 0) == 45) {
$315 = HEAP32[$303 >> 2] | 0;
$316 = __Znwj(12) | 0;
$317 = $315 + 8 | 0;
$318 = HEAP32[$317 >> 2] | 0;
HEAP32[$316 >> 2] = 18134;
HEAP32[$316 + 4 >> 2] = 18139;
HEAP32[$316 + 8 >> 2] = $318;
HEAP32[$317 >> 2] = $316;
$$sink$i$i72$i = $298 + 8 | 0;
}
HEAP32[$$sink$i$i72$i >> 2] = (HEAP32[$$sink$i$i72$i >> 2] | 0) + 1;
HEAP16[$304 >> 1] = (HEAP16[$304 >> 1] | 0) + 1 << 16 >> 16;
$325 = $298 + 24 | 0;
HEAP32[$325 >> 2] = (HEAP32[$325 >> 2] | 0) + 1;
$328 = HEAP32[16540] | 0;
$331 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(18147, HEAP32[$328 + 4 >> 2] | 0) | 0;
$332 = HEAP32[$328 >> 2] | 0;
$333 = $332 + ($331 << 3) | 0;
$334 = $332 + ($331 << 3) + 4 | 0;
switch (HEAP16[$334 >> 1] | 0) {
case 0:
{
$336 = __Znwj(12) | 0;
HEAP32[$336 >> 2] = 18147;
HEAP32[$336 + 4 >> 2] = 18152;
HEAP32[$336 + 8 >> 2] = 0;
HEAP32[$333 >> 2] = $336;
$338 = $328 + 12 | 0;
HEAP32[$338 >> 2] = (HEAP32[$338 >> 2] | 0) + -1;
$$sink$i$i80$i = $328 + 16 | 0;
break;
}
case 1:
{
$342 = $328 + 16 | 0;
HEAP32[$342 >> 2] = (HEAP32[$342 >> 2] | 0) + -1;
label = 49;
break;
}
default:
label = 49;
}
if ((label | 0) == 49) {
$345 = HEAP32[$333 >> 2] | 0;
$346 = __Znwj(12) | 0;
$347 = $345 + 8 | 0;
$348 = HEAP32[$347 >> 2] | 0;
HEAP32[$346 >> 2] = 18147;
HEAP32[$346 + 4 >> 2] = 18152;
HEAP32[$346 + 8 >> 2] = $348;
HEAP32[$347 >> 2] = $346;
$$sink$i$i80$i = $328 + 8 | 0;
}
HEAP32[$$sink$i$i80$i >> 2] = (HEAP32[$$sink$i$i80$i >> 2] | 0) + 1;
HEAP16[$334 >> 1] = (HEAP16[$334 >> 1] | 0) + 1 << 16 >> 16;
$355 = $328 + 24 | 0;
HEAP32[$355 >> 2] = (HEAP32[$355 >> 2] | 0) + 1;
$358 = HEAP32[16540] | 0;
$361 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(18159, HEAP32[$358 + 4 >> 2] | 0) | 0;
$362 = HEAP32[$358 >> 2] | 0;
$363 = $362 + ($361 << 3) | 0;
$364 = $362 + ($361 << 3) + 4 | 0;
switch (HEAP16[$364 >> 1] | 0) {
case 0:
{
$366 = __Znwj(12) | 0;
HEAP32[$366 >> 2] = 18159;
HEAP32[$366 + 4 >> 2] = 18164;
HEAP32[$366 + 8 >> 2] = 0;
HEAP32[$363 >> 2] = $366;
$368 = $358 + 12 | 0;
HEAP32[$368 >> 2] = (HEAP32[$368 >> 2] | 0) + -1;
$$sink$i$i88$i = $358 + 16 | 0;
break;
}
case 1:
{
$372 = $358 + 16 | 0;
HEAP32[$372 >> 2] = (HEAP32[$372 >> 2] | 0) + -1;
label = 53;
break;
}
default:
label = 53;
}
if ((label | 0) == 53) {
$375 = HEAP32[$363 >> 2] | 0;
$376 = __Znwj(12) | 0;
$377 = $375 + 8 | 0;
$378 = HEAP32[$377 >> 2] | 0;
HEAP32[$376 >> 2] = 18159;
HEAP32[$376 + 4 >> 2] = 18164;
HEAP32[$376 + 8 >> 2] = $378;
HEAP32[$377 >> 2] = $376;
$$sink$i$i88$i = $358 + 8 | 0;
}
HEAP32[$$sink$i$i88$i >> 2] = (HEAP32[$$sink$i$i88$i >> 2] | 0) + 1;
HEAP16[$364 >> 1] = (HEAP16[$364 >> 1] | 0) + 1 << 16 >> 16;
$385 = $358 + 24 | 0;
HEAP32[$385 >> 2] = (HEAP32[$385 >> 2] | 0) + 1;
$388 = HEAP32[16540] | 0;
$391 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(18173, HEAP32[$388 + 4 >> 2] | 0) | 0;
$392 = HEAP32[$388 >> 2] | 0;
$393 = $392 + ($391 << 3) | 0;
$394 = $392 + ($391 << 3) + 4 | 0;
switch (HEAP16[$394 >> 1] | 0) {
case 0:
{
$396 = __Znwj(12) | 0;
HEAP32[$396 >> 2] = 18173;
HEAP32[$396 + 4 >> 2] = 18178;
HEAP32[$396 + 8 >> 2] = 0;
HEAP32[$393 >> 2] = $396;
$398 = $388 + 12 | 0;
HEAP32[$398 >> 2] = (HEAP32[$398 >> 2] | 0) + -1;
$$sink$i$i96$i = $388 + 16 | 0;
break;
}
case 1:
{
$402 = $388 + 16 | 0;
HEAP32[$402 >> 2] = (HEAP32[$402 >> 2] | 0) + -1;
label = 57;
break;
}
default:
label = 57;
}
if ((label | 0) == 57) {
$405 = HEAP32[$393 >> 2] | 0;
$406 = __Znwj(12) | 0;
$407 = $405 + 8 | 0;
$408 = HEAP32[$407 >> 2] | 0;
HEAP32[$406 >> 2] = 18173;
HEAP32[$406 + 4 >> 2] = 18178;
HEAP32[$406 + 8 >> 2] = $408;
HEAP32[$407 >> 2] = $406;
$$sink$i$i96$i = $388 + 8 | 0;
}
HEAP32[$$sink$i$i96$i >> 2] = (HEAP32[$$sink$i$i96$i >> 2] | 0) + 1;
HEAP16[$394 >> 1] = (HEAP16[$394 >> 1] | 0) + 1 << 16 >> 16;
$415 = $388 + 24 | 0;
HEAP32[$415 >> 2] = (HEAP32[$415 >> 2] | 0) + 1;
$418 = HEAP32[16540] | 0;
$421 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(18184, HEAP32[$418 + 4 >> 2] | 0) | 0;
$422 = HEAP32[$418 >> 2] | 0;
$423 = $422 + ($421 << 3) | 0;
$424 = $422 + ($421 << 3) + 4 | 0;
switch (HEAP16[$424 >> 1] | 0) {
case 0:
{
$426 = __Znwj(12) | 0;
HEAP32[$426 >> 2] = 18184;
HEAP32[$426 + 4 >> 2] = 18189;
HEAP32[$426 + 8 >> 2] = 0;
HEAP32[$423 >> 2] = $426;
$428 = $418 + 12 | 0;
HEAP32[$428 >> 2] = (HEAP32[$428 >> 2] | 0) + -1;
$$sink$i$i104$i = $418 + 16 | 0;
break;
}
case 1:
{
$432 = $418 + 16 | 0;
HEAP32[$432 >> 2] = (HEAP32[$432 >> 2] | 0) + -1;
label = 61;
break;
}
default:
label = 61;
}
if ((label | 0) == 61) {
$435 = HEAP32[$423 >> 2] | 0;
$436 = __Znwj(12) | 0;
$437 = $435 + 8 | 0;
$438 = HEAP32[$437 >> 2] | 0;
HEAP32[$436 >> 2] = 18184;
HEAP32[$436 + 4 >> 2] = 18189;
HEAP32[$436 + 8 >> 2] = $438;
HEAP32[$437 >> 2] = $436;
$$sink$i$i104$i = $418 + 8 | 0;
}
HEAP32[$$sink$i$i104$i >> 2] = (HEAP32[$$sink$i$i104$i >> 2] | 0) + 1;
HEAP16[$424 >> 1] = (HEAP16[$424 >> 1] | 0) + 1 << 16 >> 16;
$445 = $418 + 24 | 0;
HEAP32[$445 >> 2] = (HEAP32[$445 >> 2] | 0) + 1;
$448 = HEAP32[16540] | 0;
$451 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(18196, HEAP32[$448 + 4 >> 2] | 0) | 0;
$452 = HEAP32[$448 >> 2] | 0;
$453 = $452 + ($451 << 3) | 0;
$454 = $452 + ($451 << 3) + 4 | 0;
switch (HEAP16[$454 >> 1] | 0) {
case 0:
{
$456 = __Znwj(12) | 0;
HEAP32[$456 >> 2] = 18196;
HEAP32[$456 + 4 >> 2] = 18201;
HEAP32[$456 + 8 >> 2] = 0;
HEAP32[$453 >> 2] = $456;
$458 = $448 + 12 | 0;
HEAP32[$458 >> 2] = (HEAP32[$458 >> 2] | 0) + -1;
$$sink$i$i112$i = $448 + 16 | 0;
break;
}
case 1:
{
$462 = $448 + 16 | 0;
HEAP32[$462 >> 2] = (HEAP32[$462 >> 2] | 0) + -1;
label = 65;
break;
}
default:
label = 65;
}
if ((label | 0) == 65) {
$465 = HEAP32[$453 >> 2] | 0;
$466 = __Znwj(12) | 0;
$467 = $465 + 8 | 0;
$468 = HEAP32[$467 >> 2] | 0;
HEAP32[$466 >> 2] = 18196;
HEAP32[$466 + 4 >> 2] = 18201;
HEAP32[$466 + 8 >> 2] = $468;
HEAP32[$467 >> 2] = $466;
$$sink$i$i112$i = $448 + 8 | 0;
}
HEAP32[$$sink$i$i112$i >> 2] = (HEAP32[$$sink$i$i112$i >> 2] | 0) + 1;
HEAP16[$454 >> 1] = (HEAP16[$454 >> 1] | 0) + 1 << 16 >> 16;
$475 = $448 + 24 | 0;
HEAP32[$475 >> 2] = (HEAP32[$475 >> 2] | 0) + 1;
$478 = HEAP32[16540] | 0;
$481 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(18207, HEAP32[$478 + 4 >> 2] | 0) | 0;
$482 = HEAP32[$478 >> 2] | 0;
$483 = $482 + ($481 << 3) | 0;
$484 = $482 + ($481 << 3) + 4 | 0;
switch (HEAP16[$484 >> 1] | 0) {
case 0:
{
$486 = __Znwj(12) | 0;
HEAP32[$486 >> 2] = 18207;
HEAP32[$486 + 4 >> 2] = 18212;
HEAP32[$486 + 8 >> 2] = 0;
HEAP32[$483 >> 2] = $486;
$488 = $478 + 12 | 0;
HEAP32[$488 >> 2] = (HEAP32[$488 >> 2] | 0) + -1;
$$sink$i$i120$i = $478 + 16 | 0;
break;
}
case 1:
{
$492 = $478 + 16 | 0;
HEAP32[$492 >> 2] = (HEAP32[$492 >> 2] | 0) + -1;
label = 69;
break;
}
default:
label = 69;
}
if ((label | 0) == 69) {
$495 = HEAP32[$483 >> 2] | 0;
$496 = __Znwj(12) | 0;
$497 = $495 + 8 | 0;
$498 = HEAP32[$497 >> 2] | 0;
HEAP32[$496 >> 2] = 18207;
HEAP32[$496 + 4 >> 2] = 18212;
HEAP32[$496 + 8 >> 2] = $498;
HEAP32[$497 >> 2] = $496;
$$sink$i$i120$i = $478 + 8 | 0;
}
HEAP32[$$sink$i$i120$i >> 2] = (HEAP32[$$sink$i$i120$i >> 2] | 0) + 1;
HEAP16[$484 >> 1] = (HEAP16[$484 >> 1] | 0) + 1 << 16 >> 16;
$505 = $478 + 24 | 0;
HEAP32[$505 >> 2] = (HEAP32[$505 >> 2] | 0) + 1;
$508 = HEAP32[16540] | 0;
$511 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(18218, HEAP32[$508 + 4 >> 2] | 0) | 0;
$512 = HEAP32[$508 >> 2] | 0;
$513 = $512 + ($511 << 3) | 0;
$514 = $512 + ($511 << 3) + 4 | 0;
switch (HEAP16[$514 >> 1] | 0) {
case 0:
{
$516 = __Znwj(12) | 0;
HEAP32[$516 >> 2] = 18218;
HEAP32[$516 + 4 >> 2] = 18223;
HEAP32[$516 + 8 >> 2] = 0;
HEAP32[$513 >> 2] = $516;
$518 = $508 + 12 | 0;
HEAP32[$518 >> 2] = (HEAP32[$518 >> 2] | 0) + -1;
$$sink$i$i128$i = $508 + 16 | 0;
break;
}
case 1:
{
$522 = $508 + 16 | 0;
HEAP32[$522 >> 2] = (HEAP32[$522 >> 2] | 0) + -1;
label = 73;
break;
}
default:
label = 73;
}
if ((label | 0) == 73) {
$525 = HEAP32[$513 >> 2] | 0;
$526 = __Znwj(12) | 0;
$527 = $525 + 8 | 0;
$528 = HEAP32[$527 >> 2] | 0;
HEAP32[$526 >> 2] = 18218;
HEAP32[$526 + 4 >> 2] = 18223;
HEAP32[$526 + 8 >> 2] = $528;
HEAP32[$527 >> 2] = $526;
$$sink$i$i128$i = $508 + 8 | 0;
}
HEAP32[$$sink$i$i128$i >> 2] = (HEAP32[$$sink$i$i128$i >> 2] | 0) + 1;
HEAP16[$514 >> 1] = (HEAP16[$514 >> 1] | 0) + 1 << 16 >> 16;
$535 = $508 + 24 | 0;
HEAP32[$535 >> 2] = (HEAP32[$535 >> 2] | 0) + 1;
$538 = HEAP32[16540] | 0;
$541 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(18230, HEAP32[$538 + 4 >> 2] | 0) | 0;
$542 = HEAP32[$538 >> 2] | 0;
$543 = $542 + ($541 << 3) | 0;
$544 = $542 + ($541 << 3) + 4 | 0;
switch (HEAP16[$544 >> 1] | 0) {
case 0:
{
$546 = __Znwj(12) | 0;
HEAP32[$546 >> 2] = 18230;
HEAP32[$546 + 4 >> 2] = 18235;
HEAP32[$546 + 8 >> 2] = 0;
HEAP32[$543 >> 2] = $546;
$548 = $538 + 12 | 0;
HEAP32[$548 >> 2] = (HEAP32[$548 >> 2] | 0) + -1;
$$sink$i$i136$i = $538 + 16 | 0;
break;
}
case 1:
{
$552 = $538 + 16 | 0;
HEAP32[$552 >> 2] = (HEAP32[$552 >> 2] | 0) + -1;
label = 77;
break;
}
default:
label = 77;
}
if ((label | 0) == 77) {
$555 = HEAP32[$543 >> 2] | 0;
$556 = __Znwj(12) | 0;
$557 = $555 + 8 | 0;
$558 = HEAP32[$557 >> 2] | 0;
HEAP32[$556 >> 2] = 18230;
HEAP32[$556 + 4 >> 2] = 18235;
HEAP32[$556 + 8 >> 2] = $558;
HEAP32[$557 >> 2] = $556;
$$sink$i$i136$i = $538 + 8 | 0;
}
HEAP32[$$sink$i$i136$i >> 2] = (HEAP32[$$sink$i$i136$i >> 2] | 0) + 1;
HEAP16[$544 >> 1] = (HEAP16[$544 >> 1] | 0) + 1 << 16 >> 16;
$565 = $538 + 24 | 0;
HEAP32[$565 >> 2] = (HEAP32[$565 >> 2] | 0) + 1;
$568 = HEAP32[16540] | 0;
$571 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(18241, HEAP32[$568 + 4 >> 2] | 0) | 0;
$572 = HEAP32[$568 >> 2] | 0;
$573 = $572 + ($571 << 3) | 0;
$574 = $572 + ($571 << 3) + 4 | 0;
switch (HEAP16[$574 >> 1] | 0) {
case 0:
{
$576 = __Znwj(12) | 0;
HEAP32[$576 >> 2] = 18241;
HEAP32[$576 + 4 >> 2] = 18246;
HEAP32[$576 + 8 >> 2] = 0;
HEAP32[$573 >> 2] = $576;
$578 = $568 + 12 | 0;
HEAP32[$578 >> 2] = (HEAP32[$578 >> 2] | 0) + -1;
$$sink$i$i144$i = $568 + 16 | 0;
break;
}
case 1:
{
$582 = $568 + 16 | 0;
HEAP32[$582 >> 2] = (HEAP32[$582 >> 2] | 0) + -1;
label = 81;
break;
}
default:
label = 81;
}
if ((label | 0) == 81) {
$585 = HEAP32[$573 >> 2] | 0;
$586 = __Znwj(12) | 0;
$587 = $585 + 8 | 0;
$588 = HEAP32[$587 >> 2] | 0;
HEAP32[$586 >> 2] = 18241;
HEAP32[$586 + 4 >> 2] = 18246;
HEAP32[$586 + 8 >> 2] = $588;
HEAP32[$587 >> 2] = $586;
$$sink$i$i144$i = $568 + 8 | 0;
}
HEAP32[$$sink$i$i144$i >> 2] = (HEAP32[$$sink$i$i144$i >> 2] | 0) + 1;
HEAP16[$574 >> 1] = (HEAP16[$574 >> 1] | 0) + 1 << 16 >> 16;
$597 = $568 + 24 | 0;
HEAP32[$597 >> 2] = (HEAP32[$597 >> 2] | 0) + 1;
$600 = __Znwj(136) | 0;
$602 = $600 + 116 | 0;
HEAP32[$602 >> 2] = 0;
HEAP32[$602 + 4 >> 2] = 0;
HEAP32[16526] = $600;
HEAP32[$600 >> 2] = 18252;
HEAP32[$600 + 4 >> 2] = 18271;
HEAP32[$600 + 8 >> 2] = 18287;
HEAP32[$600 + 12 >> 2] = 18309;
HEAP32[$600 + 48 >> 2] = 18331;
HEAP32[$600 + 52 >> 2] = 54169;
HEAP32[$600 + 56 >> 2] = 33358;
HEAP32[$600 + 60 >> 2] = 32865;
HEAP32[$600 + 64 >> 2] = 33151;
HEAP32[$600 + 68 >> 2] = 33158;
HEAP32[$600 + 72 >> 2] = 33163;
HEAP32[$600 + 76 >> 2] = 18333;
HEAP32[$600 + 80 >> 2] = 18335;
HEAP32[$600 + 84 >> 2] = 18337;
HEAP32[$600 + 88 >> 2] = 18339;
HEAP32[$600 + 124 >> 2] = 18351;
HEAP32[$600 + 128 >> 2] = 18351;
HEAP8[$600 + 132 >> 0] = 0;
HEAP32[$600 + 16 >> 2] = 18365;
HEAP32[$600 + 20 >> 2] = 18390;
HEAP32[$600 + 24 >> 2] = 18407;
HEAP32[$600 + 28 >> 2] = 18421;
HEAP32[$600 + 32 >> 2] = 18435;
HEAP32[$600 + 36 >> 2] = 18460;
HEAP32[$600 + 40 >> 2] = 18477;
HEAP32[$600 + 44 >> 2] = 18491;
HEAP32[$600 + 92 >> 2] = 18505;
HEAP32[$600 + 96 >> 2] = 18517;
HEAP32[$600 + 100 >> 2] = 18529;
HEAP32[$600 + 104 >> 2] = 18542;
HEAP32[$600 + 108 >> 2] = 18555;
HEAP32[$600 + 112 >> 2] = 18569;
$637 = __Znwj(136) | 0;
$638 = $637 + 92 | 0;
HEAP32[$638 >> 2] = 0;
HEAP32[$638 + 4 >> 2] = 0;
HEAP32[$638 + 8 >> 2] = 0;
HEAP32[$638 + 12 >> 2] = 0;
HEAP32[$638 + 16 >> 2] = 0;
HEAP32[$638 + 20 >> 2] = 0;
HEAP32[$638 + 24 >> 2] = 0;
HEAP32[$638 + 28 >> 2] = 0;
HEAP32[16527] = $637;
HEAP32[$637 >> 2] = 18052;
HEAP32[$637 + 4 >> 2] = 52072;
HEAP32[$637 + 8 >> 2] = 18583;
HEAP32[$637 + 12 >> 2] = 18591;
HEAP32[$637 + 48 >> 2] = 18331;
HEAP32[$637 + 52 >> 2] = 54169;
HEAP32[$637 + 56 >> 2] = 18600;
HEAP32[$637 + 60 >> 2] = 18606;
HEAP32[$637 + 64 >> 2] = 18612;
HEAP32[$637 + 68 >> 2] = 18616;
HEAP32[$637 + 72 >> 2] = 18621;
HEAP32[$637 + 76 >> 2] = 18333;
HEAP32[$637 + 80 >> 2] = 18335;
HEAP32[$637 + 84 >> 2] = 18337;
HEAP32[$637 + 88 >> 2] = 18627;
HEAP32[$637 + 124 >> 2] = 18632;
HEAP32[$637 + 128 >> 2] = 18632;
HEAP8[$637 + 132 >> 0] = 0;
HEAP32[$637 + 16 >> 2] = 18089;
HEAP32[$637 + 20 >> 2] = 18102;
HEAP32[$637 + 24 >> 2] = 18114;
HEAP32[$637 + 28 >> 2] = 18128;
HEAP32[$637 + 32 >> 2] = 18139;
HEAP32[$637 + 36 >> 2] = 18152;
HEAP32[$637 + 40 >> 2] = 18164;
HEAP32[$637 + 44 >> 2] = 18178;
$664 = __Znwj(136) | 0;
HEAP32[$664 + 112 >> 2] = 0;
HEAP32[16528] = $664;
HEAP32[$664 >> 2] = 18047;
HEAP32[$664 + 4 >> 2] = 18079;
HEAP32[$664 + 116 >> 2] = 18639;
HEAP32[$664 + 120 >> 2] = 18643;
HEAP32[$664 + 8 >> 2] = 18647;
HEAP32[$664 + 12 >> 2] = 18652;
HEAP32[$664 + 48 >> 2] = 18657;
HEAP32[$664 + 52 >> 2] = 24771;
HEAP32[$664 + 56 >> 2] = 18659;
HEAP32[$664 + 60 >> 2] = 18662;
HEAP32[$664 + 64 >> 2] = 18665;
HEAP32[$664 + 68 >> 2] = 18668;
HEAP32[$664 + 72 >> 2] = 18671;
HEAP32[$664 + 76 >> 2] = 18333;
HEAP32[$664 + 80 >> 2] = 18335;
HEAP32[$664 + 84 >> 2] = 18337;
HEAP32[$664 + 88 >> 2] = 18674;
HEAP32[$664 + 124 >> 2] = 18632;
HEAP32[$664 + 128 >> 2] = 18678;
HEAP8[$664 + 132 >> 0] = 1;
HEAP32[$664 + 16 >> 2] = 18084;
HEAP32[$664 + 20 >> 2] = 18097;
HEAP32[$664 + 24 >> 2] = 18109;
HEAP32[$664 + 28 >> 2] = 18123;
HEAP32[$664 + 32 >> 2] = 18134;
HEAP32[$664 + 36 >> 2] = 18147;
HEAP32[$664 + 40 >> 2] = 18159;
HEAP32[$664 + 44 >> 2] = 18173;
HEAP32[$664 + 92 >> 2] = 18184;
HEAP32[$664 + 96 >> 2] = 18218;
HEAP32[$664 + 100 >> 2] = 18688;
HEAP32[$664 + 104 >> 2] = 18693;
HEAP32[$664 + 108 >> 2] = 18207;
HEAP32[$664 + 112 >> 2] = 18241;
$699 = __Znwj(28) | 0;
HEAP32[$699 + 20 >> 2] = HEAP32[16607];
HEAP32[$699 + 24 >> 2] = 0;
HEAP32[$699 + 8 >> 2] = 0;
HEAP32[$699 + 16 >> 2] = 0;
HEAP32[$699 + 12 >> 2] = 171;
$706 = _malloc(1368) | 0;
HEAP32[$699 >> 2] = $706;
$708 = $699 + 4 | 0;
if (!$706) {
HEAP32[$708 >> 2] = 0;
__THREW__ = 0;
HEAP32[$vararg_buffer2 >> 2] = 171;
HEAP32[$vararg_buffer2 + 4 >> 2] = 8;
invoke_vii(115, 57708, $vararg_buffer2 | 0);
$709 = __THREW__;
__THREW__ = 0;
if (!($709 & 1)) {
$711 = ___cxa_allocate_exception(4) | 0;
HEAP32[$711 >> 2] = 1;
__THREW__ = 0;
invoke_viii(75, $711 | 0, 32, 0);
__THREW__ = 0;
}
$883 = ___cxa_find_matching_catch_2() | 0;
$884 = tempRet0;
__ZdlPv($699);
$$088 = $883;
$$089 = $884;
___resumeException($$088 | 0);
}
HEAP32[$708 >> 2] = 171;
HEAP32[$706 >> 2] = 0;
HEAP16[$706 + 4 >> 1] = 0;
HEAP32[$706 + 8 >> 2] = 0;
HEAP16[$706 + 12 >> 1] = 0;
HEAP32[$706 + 16 >> 2] = 0;
HEAP16[(HEAP32[$699 >> 2] | 0) + 20 >> 1] = 0;
if ((HEAP32[$708 >> 2] | 0) > 3) {
$722 = 3;
do {
HEAP32[(HEAP32[$699 >> 2] | 0) + ($722 << 3) >> 2] = 0;
HEAP16[(HEAP32[$699 >> 2] | 0) + ($722 << 3) + 4 >> 1] = 0;
$722 = $722 + 1 | 0;
} while (($722 | 0) < (HEAP32[$708 >> 2] | 0));
}
$$pre = HEAP32[16607] | 0;
HEAP32[16533] = $699;
$728 = __Znwj(28) | 0;
HEAP32[$728 + 20 >> 2] = $$pre;
HEAP32[$728 + 24 >> 2] = 0;
HEAP32[$728 + 8 >> 2] = 0;
HEAP32[$728 + 16 >> 2] = 0;
HEAP32[$728 + 12 >> 2] = 171;
$734 = _malloc(1368) | 0;
HEAP32[$728 >> 2] = $734;
$736 = $728 + 4 | 0;
if (!$734) {
HEAP32[$736 >> 2] = 0;
__THREW__ = 0;
HEAP32[$vararg_buffer6 >> 2] = 171;
HEAP32[$vararg_buffer6 + 4 >> 2] = 8;
invoke_vii(115, 57708, $vararg_buffer6 | 0);
$737 = __THREW__;
__THREW__ = 0;
if (!($737 & 1)) {
$739 = ___cxa_allocate_exception(4) | 0;
HEAP32[$739 >> 2] = 1;
__THREW__ = 0;
invoke_viii(75, $739 | 0, 32, 0);
__THREW__ = 0;
}
$885 = ___cxa_find_matching_catch_2() | 0;
$886 = tempRet0;
__ZdlPv($728);
$$088 = $885;
$$089 = $886;
___resumeException($$088 | 0);
}
HEAP32[$736 >> 2] = 171;
HEAP32[$734 >> 2] = 0;
HEAP16[$734 + 4 >> 1] = 0;
HEAP32[$734 + 8 >> 2] = 0;
HEAP16[$734 + 12 >> 1] = 0;
HEAP32[$734 + 16 >> 2] = 0;
HEAP16[(HEAP32[$728 >> 2] | 0) + 20 >> 1] = 0;
if ((HEAP32[$736 >> 2] | 0) > 3) {
$750 = 3;
do {
HEAP32[(HEAP32[$728 >> 2] | 0) + ($750 << 3) >> 2] = 0;
HEAP16[(HEAP32[$728 >> 2] | 0) + ($750 << 3) + 4 >> 1] = 0;
$750 = $750 + 1 | 0;
} while (($750 | 0) < (HEAP32[$736 >> 2] | 0));
}
$$pre368 = HEAP32[16607] | 0;
HEAP32[16534] = $728;
$756 = __Znwj(28) | 0;
HEAP32[$756 + 20 >> 2] = $$pre368;
HEAP32[$756 + 24 >> 2] = 0;
HEAP32[$756 + 8 >> 2] = 0;
HEAP32[$756 + 16 >> 2] = 0;
HEAP32[$756 + 12 >> 2] = 171;
$762 = _malloc(1368) | 0;
HEAP32[$756 >> 2] = $762;
$764 = $756 + 4 | 0;
if (!$762) {
HEAP32[$764 >> 2] = 0;
__THREW__ = 0;
HEAP32[$vararg_buffer10 >> 2] = 171;
HEAP32[$vararg_buffer10 + 4 >> 2] = 8;
invoke_vii(115, 57708, $vararg_buffer10 | 0);
$765 = __THREW__;
__THREW__ = 0;
if (!($765 & 1)) {
$767 = ___cxa_allocate_exception(4) | 0;
HEAP32[$767 >> 2] = 1;
__THREW__ = 0;
invoke_viii(75, $767 | 0, 32, 0);
__THREW__ = 0;
}
$887 = ___cxa_find_matching_catch_2() | 0;
$888 = tempRet0;
__ZdlPv($756);
$$088 = $887;
$$089 = $888;
___resumeException($$088 | 0);
}
HEAP32[$764 >> 2] = 171;
HEAP32[$762 >> 2] = 0;
HEAP16[$762 + 4 >> 1] = 0;
HEAP32[$762 + 8 >> 2] = 0;
HEAP16[$762 + 12 >> 1] = 0;
HEAP32[$762 + 16 >> 2] = 0;
HEAP16[(HEAP32[$756 >> 2] | 0) + 20 >> 1] = 0;
if ((HEAP32[$764 >> 2] | 0) > 3) {
$778 = 3;
do {
HEAP32[(HEAP32[$756 >> 2] | 0) + ($778 << 3) >> 2] = 0;
HEAP16[(HEAP32[$756 >> 2] | 0) + ($778 << 3) + 4 >> 1] = 0;
$778 = $778 + 1 | 0;
} while (($778 | 0) < (HEAP32[$764 >> 2] | 0));
}
HEAP32[16535] = $756;
$784 = HEAP32[16533] | 0;
$785 = __Z10copyStringPKc(18698) | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($0, 22, 0, 0, 0, 1, 0);
$$sroa$0$0$copyload = HEAP32[$0 >> 2] | 0;
$788 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($785, HEAP32[$784 + 4 >> 2] | 0) | 0;
$789 = HEAP32[$784 >> 2] | 0;
$790 = $789 + ($788 << 3) | 0;
$791 = $789 + ($788 << 3) + 4 | 0;
switch (HEAP16[$791 >> 1] | 0) {
case 0:
{
$793 = __Znwj(12) | 0;
HEAP32[$793 >> 2] = $785;
HEAP32[$793 + 4 >> 2] = $$sroa$0$0$copyload;
HEAP32[$793 + 8 >> 2] = 0;
HEAP32[$790 >> 2] = $793;
$796 = $784 + 12 | 0;
HEAP32[$796 >> 2] = (HEAP32[$796 >> 2] | 0) + -1;
$$sink$i$i = $784 + 16 | 0;
break;
}
case 1:
{
$800 = $784 + 16 | 0;
HEAP32[$800 >> 2] = (HEAP32[$800 >> 2] | 0) + -1;
label = 101;
break;
}
default:
label = 101;
}
if ((label | 0) == 101) {
$803 = HEAP32[$790 >> 2] | 0;
$805 = __Znwj(12) | 0;
$806 = $803 + 8 | 0;
$807 = HEAP32[$806 >> 2] | 0;
HEAP32[$805 >> 2] = $785;
HEAP32[$805 + 4 >> 2] = $$sroa$0$0$copyload;
HEAP32[$805 + 8 >> 2] = $807;
HEAP32[$806 >> 2] = $805;
$$sink$i$i = $784 + 8 | 0;
}
HEAP32[$$sink$i$i >> 2] = (HEAP32[$$sink$i$i >> 2] | 0) + 1;
HEAP16[$791 >> 1] = (HEAP16[$791 >> 1] | 0) + 1 << 16 >> 16;
$814 = $784 + 24 | 0;
HEAP32[$814 >> 2] = (HEAP32[$814 >> 2] | 0) + 1;
$817 = HEAP32[16533] | 0;
$818 = __Z10copyStringPKc(18710) | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($1, 16, 0, 0, 0, 1, 0);
$$sroa$0287$0$copyload = HEAP32[$1 >> 2] | 0;
$821 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($818, HEAP32[$817 + 4 >> 2] | 0) | 0;
$822 = HEAP32[$817 >> 2] | 0;
$823 = $822 + ($821 << 3) | 0;
$824 = $822 + ($821 << 3) + 4 | 0;
switch (HEAP16[$824 >> 1] | 0) {
case 0:
{
$826 = __Znwj(12) | 0;
HEAP32[$826 >> 2] = $818;
HEAP32[$826 + 4 >> 2] = $$sroa$0287$0$copyload;
HEAP32[$826 + 8 >> 2] = 0;
HEAP32[$823 >> 2] = $826;
$829 = $817 + 12 | 0;
HEAP32[$829 >> 2] = (HEAP32[$829 >> 2] | 0) + -1;
$$sink$i$i132 = $817 + 16 | 0;
break;
}
case 1:
{
$833 = $817 + 16 | 0;
HEAP32[$833 >> 2] = (HEAP32[$833 >> 2] | 0) + -1;
label = 105;
break;
}
default:
label = 105;
}
if ((label | 0) == 105) {
$836 = HEAP32[$823 >> 2] | 0;
$838 = __Znwj(12) | 0;
$839 = $836 + 8 | 0;
$840 = HEAP32[$839 >> 2] | 0;
HEAP32[$838 >> 2] = $818;
HEAP32[$838 + 4 >> 2] = $$sroa$0287$0$copyload;
HEAP32[$838 + 8 >> 2] = $840;
HEAP32[$839 >> 2] = $838;
$$sink$i$i132 = $817 + 8 | 0;
}
HEAP32[$$sink$i$i132 >> 2] = (HEAP32[$$sink$i$i132 >> 2] | 0) + 1;
HEAP16[$824 >> 1] = (HEAP16[$824 >> 1] | 0) + 1 << 16 >> 16;
$847 = $817 + 24 | 0;
HEAP32[$847 >> 2] = (HEAP32[$847 >> 2] | 0) + 1;
$850 = HEAP32[16533] | 0;
$851 = __Z10copyStringPKc(18726) | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($2, 39, 0, 0, 0, 1, 0);
$$sroa$0289$0$copyload = HEAP32[$2 >> 2] | 0;
$854 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($851, HEAP32[$850 + 4 >> 2] | 0) | 0;
$855 = HEAP32[$850 >> 2] | 0;
$856 = $855 + ($854 << 3) | 0;
$857 = $855 + ($854 << 3) + 4 | 0;
switch (HEAP16[$857 >> 1] | 0) {
case 0:
{
$859 = __Znwj(12) | 0;
HEAP32[$859 >> 2] = $851;
HEAP32[$859 + 4 >> 2] = $$sroa$0289$0$copyload;
HEAP32[$859 + 8 >> 2] = 0;
HEAP32[$856 >> 2] = $859;
$862 = $850 + 12 | 0;
HEAP32[$862 >> 2] = (HEAP32[$862 >> 2] | 0) + -1;
$$sink$i$i140 = $850 + 16 | 0;
break;
}
case 1:
{
$866 = $850 + 16 | 0;
HEAP32[$866 >> 2] = (HEAP32[$866 >> 2] | 0) + -1;
label = 109;
break;
}
default:
label = 109;
}
if ((label | 0) == 109) {
$869 = HEAP32[$856 >> 2] | 0;
$871 = __Znwj(12) | 0;
$872 = $869 + 8 | 0;
$873 = HEAP32[$872 >> 2] | 0;
HEAP32[$871 >> 2] = $851;
HEAP32[$871 + 4 >> 2] = $$sroa$0289$0$copyload;
HEAP32[$871 + 8 >> 2] = $873;
HEAP32[$872 >> 2] = $871;
$$sink$i$i140 = $850 + 8 | 0;
}
HEAP32[$$sink$i$i140 >> 2] = (HEAP32[$$sink$i$i140 >> 2] | 0) + 1;
HEAP16[$857 >> 1] = (HEAP16[$857 >> 1] | 0) + 1 << 16 >> 16;
$880 = $850 + 24 | 0;
HEAP32[$880 >> 2] = (HEAP32[$880 >> 2] | 0) + 1;
$indvars$iv358 = 0;
while (1) {
$889 = HEAP32[16526] | 0;
$891 = HEAP32[$889 + 128 >> 2] | 0;
do if (!$891) $$sink1$i = 72208; else {
$897 = HEAP32[$889 + 48 >> 2] | 0;
if (!(HEAP8[$889 + 132 >> 0] | 0)) {
$902 = HEAP32[$889 + 56 + ($indvars$iv358 << 2) >> 2] | 0;
$904 = HEAP32[$889 + 88 >> 2] | 0;
HEAP32[$vararg_buffer19 >> 2] = $897;
HEAP32[$vararg_buffer19 + 4 >> 2] = $902;
HEAP32[$vararg_buffer19 + 8 >> 2] = $904;
_snprintf(72208, 100, $891, $vararg_buffer19) | 0;
$$sink1$i = 72307;
break;
} else {
$900 = HEAP32[$889 + 88 >> 2] | 0;
HEAP32[$vararg_buffer14 >> 2] = $897;
HEAP32[$vararg_buffer14 + 4 >> 2] = $indvars$iv358 + 1;
HEAP32[$vararg_buffer14 + 8 >> 2] = $900;
_snprintf(72208, 100, $891, $vararg_buffer14) | 0;
$$sink1$i = 72307;
break;
}
} while (0);
HEAP8[$$sink1$i >> 0] = 0;
$905 = HEAP32[16533] | 0;
$906 = __Z10copyStringPKc(72208) | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($3, 7, 2, 0, 1 << $indvars$iv358 & 65535, 1, 0);
$$sroa$0291$0$copyload = HEAP32[$3 >> 2] | 0;
$911 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($906, HEAP32[$905 + 4 >> 2] | 0) | 0;
$912 = HEAP32[$905 >> 2] | 0;
$913 = $912 + ($911 << 3) | 0;
$914 = $912 + ($911 << 3) + 4 | 0;
switch (HEAP16[$914 >> 1] | 0) {
case 0:
{
$916 = __Znwj(12) | 0;
HEAP32[$916 >> 2] = $906;
HEAP32[$916 + 4 >> 2] = $$sroa$0291$0$copyload;
HEAP32[$916 + 8 >> 2] = 0;
HEAP32[$913 >> 2] = $916;
$919 = $905 + 12 | 0;
HEAP32[$919 >> 2] = (HEAP32[$919 >> 2] | 0) + -1;
$$sink$i$i148 = $905 + 16 | 0;
break;
}
case 1:
{
$923 = $905 + 16 | 0;
HEAP32[$923 >> 2] = (HEAP32[$923 >> 2] | 0) + -1;
label = 121;
break;
}
default:
label = 121;
}
if ((label | 0) == 121) {
label = 0;
$926 = HEAP32[$913 >> 2] | 0;
$928 = __Znwj(12) | 0;
$929 = $926 + 8 | 0;
$930 = HEAP32[$929 >> 2] | 0;
HEAP32[$928 >> 2] = $906;
HEAP32[$928 + 4 >> 2] = $$sroa$0291$0$copyload;
HEAP32[$928 + 8 >> 2] = $930;
HEAP32[$929 >> 2] = $928;
$$sink$i$i148 = $905 + 8 | 0;
}
HEAP32[$$sink$i$i148 >> 2] = (HEAP32[$$sink$i$i148 >> 2] | 0) + 1;
HEAP16[$914 >> 1] = (HEAP16[$914 >> 1] | 0) + 1 << 16 >> 16;
$937 = $905 + 24 | 0;
HEAP32[$937 >> 2] = (HEAP32[$937 >> 2] | 0) + 1;
$indvars$iv358 = $indvars$iv358 + 1 | 0;
if (($indvars$iv358 | 0) == 5) {
$indvars$iv358$1 = 0;
break;
}
}
do {
$1697 = HEAP32[16526] | 0;
$1699 = HEAP32[$1697 + 128 >> 2] | 0;
do if (!$1699) $$sink1$i$1 = 72208; else {
$1705 = HEAP32[$1697 + 52 >> 2] | 0;
if (!(HEAP8[$1697 + 132 >> 0] | 0)) {
$1710 = HEAP32[$1697 + 56 + ($indvars$iv358$1 << 2) >> 2] | 0;
$1712 = HEAP32[$1697 + 88 >> 2] | 0;
HEAP32[$vararg_buffer98 >> 2] = $1705;
HEAP32[$vararg_buffer98 + 4 >> 2] = $1710;
HEAP32[$vararg_buffer98 + 8 >> 2] = $1712;
_snprintf(72208, 100, $1699, $vararg_buffer98) | 0;
$$sink1$i$1 = 72307;
break;
} else {
$1708 = HEAP32[$1697 + 88 >> 2] | 0;
HEAP32[$vararg_buffer93 >> 2] = $1705;
HEAP32[$vararg_buffer93 + 4 >> 2] = $indvars$iv358$1 + 1;
HEAP32[$vararg_buffer93 + 8 >> 2] = $1708;
_snprintf(72208, 100, $1699, $vararg_buffer93) | 0;
$$sink1$i$1 = 72307;
break;
}
} while (0);
HEAP8[$$sink1$i$1 >> 0] = 0;
$1713 = HEAP32[16533] | 0;
$1714 = __Z10copyStringPKc(72208) | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($3, 7, 1, 0, 1 << $indvars$iv358$1 & 65535, 1, 0);
$$sroa$0291$0$copyload$1 = HEAP32[$3 >> 2] | 0;
$1719 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($1714, HEAP32[$1713 + 4 >> 2] | 0) | 0;
$1720 = HEAP32[$1713 >> 2] | 0;
$1721 = $1720 + ($1719 << 3) | 0;
$1722 = $1720 + ($1719 << 3) + 4 | 0;
switch (HEAP16[$1722 >> 1] | 0) {
case 0:
{
$1727 = __Znwj(12) | 0;
HEAP32[$1727 >> 2] = $1714;
HEAP32[$1727 + 4 >> 2] = $$sroa$0291$0$copyload$1;
HEAP32[$1727 + 8 >> 2] = 0;
HEAP32[$1721 >> 2] = $1727;
$1730 = $1713 + 12 | 0;
HEAP32[$1730 >> 2] = (HEAP32[$1730 >> 2] | 0) + -1;
$$sink$i$i148$1 = $1713 + 16 | 0;
break;
}
case 1:
{
$1724 = $1713 + 16 | 0;
HEAP32[$1724 >> 2] = (HEAP32[$1724 >> 2] | 0) + -1;
label = 243;
break;
}
default:
label = 243;
}
if ((label | 0) == 243) {
label = 0;
$1734 = HEAP32[$1721 >> 2] | 0;
$1736 = __Znwj(12) | 0;
$1737 = $1734 + 8 | 0;
$1738 = HEAP32[$1737 >> 2] | 0;
HEAP32[$1736 >> 2] = $1714;
HEAP32[$1736 + 4 >> 2] = $$sroa$0291$0$copyload$1;
HEAP32[$1736 + 8 >> 2] = $1738;
HEAP32[$1737 >> 2] = $1736;
$$sink$i$i148$1 = $1713 + 8 | 0;
}
HEAP32[$$sink$i$i148$1 >> 2] = (HEAP32[$$sink$i$i148$1 >> 2] | 0) + 1;
HEAP16[$1722 >> 1] = (HEAP16[$1722 >> 1] | 0) + 1 << 16 >> 16;
$1745 = $1713 + 24 | 0;
HEAP32[$1745 >> 2] = (HEAP32[$1745 >> 2] | 0) + 1;
$indvars$iv358$1 = $indvars$iv358$1 + 1 | 0;
} while (($indvars$iv358$1 | 0) != 5);
$indvars$iv355 = 0;
do {
$942 = HEAP32[1704 + ($indvars$iv355 << 2) >> 2] | 0;
HEAP32[$vararg_buffer24 >> 2] = $942;
HEAP32[$vararg_buffer24 + 4 >> 2] = 83;
_snprintf($4, 11, 18744, $vararg_buffer24) | 0;
$943 = HEAP32[1724 + ($indvars$iv355 << 2) >> 2] | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($5, 20, $943, 0, 0, 1, 0);
$944 = HEAP32[16535] | 0;
$945 = __Z10copyStringPKc($4) | 0;
$946 = HEAP32[$5 >> 2] | 0;
$949 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($945, HEAP32[$944 + 4 >> 2] | 0) | 0;
$950 = HEAP32[$944 >> 2] | 0;
$951 = $950 + ($949 << 3) | 0;
$952 = $950 + ($949 << 3) + 4 | 0;
switch (HEAP16[$952 >> 1] | 0) {
case 0:
{
$1090 = __Znwj(12) | 0;
HEAP32[$1090 >> 2] = $945;
HEAP32[$1090 + 4 >> 2] = $946;
HEAP32[$1090 + 8 >> 2] = 0;
HEAP32[$951 >> 2] = $1090;
$1093 = $944 + 12 | 0;
HEAP32[$1093 >> 2] = (HEAP32[$1093 >> 2] | 0) + -1;
$$sink$i$i178 = $944 + 16 | 0;
break;
}
case 1:
{
$1097 = $944 + 16 | 0;
HEAP32[$1097 >> 2] = (HEAP32[$1097 >> 2] | 0) + -1;
label = 143;
break;
}
default:
label = 143;
}
if ((label | 0) == 143) {
label = 0;
$1100 = HEAP32[$951 >> 2] | 0;
$1102 = __Znwj(12) | 0;
$1103 = $1100 + 8 | 0;
$1104 = HEAP32[$1103 >> 2] | 0;
HEAP32[$1102 >> 2] = $945;
HEAP32[$1102 + 4 >> 2] = $946;
HEAP32[$1102 + 8 >> 2] = $1104;
HEAP32[$1103 >> 2] = $1102;
$$sink$i$i178 = $944 + 8 | 0;
}
HEAP32[$$sink$i$i178 >> 2] = (HEAP32[$$sink$i$i178 >> 2] | 0) + 1;
HEAP16[$952 >> 1] = (HEAP16[$952 >> 1] | 0) + 1 << 16 >> 16;
$1111 = $944 + 24 | 0;
HEAP32[$1111 >> 2] = (HEAP32[$1111 >> 2] | 0) + 1;
HEAP32[$vararg_buffer28 >> 2] = $942;
HEAP32[$vararg_buffer28 + 4 >> 2] = 67;
_snprintf($4, 11, 18744, $vararg_buffer28) | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($5, 21, $943, 0, 0, 1, 0);
$1114 = HEAP32[16535] | 0;
$1115 = __Z10copyStringPKc($4) | 0;
$1116 = HEAP32[$5 >> 2] | 0;
$1119 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($1115, HEAP32[$1114 + 4 >> 2] | 0) | 0;
$1120 = HEAP32[$1114 >> 2] | 0;
$1121 = $1120 + ($1119 << 3) | 0;
$1122 = $1120 + ($1119 << 3) + 4 | 0;
switch (HEAP16[$1122 >> 1] | 0) {
case 0:
{
$1608 = __Znwj(12) | 0;
HEAP32[$1608 >> 2] = $1115;
HEAP32[$1608 + 4 >> 2] = $1116;
HEAP32[$1608 + 8 >> 2] = 0;
HEAP32[$1121 >> 2] = $1608;
$1611 = $1114 + 12 | 0;
HEAP32[$1611 >> 2] = (HEAP32[$1611 >> 2] | 0) + -1;
$$sink$i$i178$1 = $1114 + 16 | 0;
break;
}
case 1:
{
$1605 = $1114 + 16 | 0;
HEAP32[$1605 >> 2] = (HEAP32[$1605 >> 2] | 0) + -1;
label = 226;
break;
}
default:
label = 226;
}
if ((label | 0) == 226) {
label = 0;
$1615 = HEAP32[$1121 >> 2] | 0;
$1617 = __Znwj(12) | 0;
$1618 = $1615 + 8 | 0;
$1619 = HEAP32[$1618 >> 2] | 0;
HEAP32[$1617 >> 2] = $1115;
HEAP32[$1617 + 4 >> 2] = $1116;
HEAP32[$1617 + 8 >> 2] = $1619;
HEAP32[$1618 >> 2] = $1617;
$$sink$i$i178$1 = $1114 + 8 | 0;
}
HEAP32[$$sink$i$i178$1 >> 2] = (HEAP32[$$sink$i$i178$1 >> 2] | 0) + 1;
HEAP16[$1122 >> 1] = (HEAP16[$1122 >> 1] | 0) + 1 << 16 >> 16;
$1626 = $1114 + 24 | 0;
HEAP32[$1626 >> 2] = (HEAP32[$1626 >> 2] | 0) + 1;
HEAP32[$vararg_buffer85 >> 2] = $942;
HEAP32[$vararg_buffer85 + 4 >> 2] = 65;
_snprintf($4, 11, 18744, $vararg_buffer85) | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($5, 22, $943, 0, 0, 1, 0);
$1629 = HEAP32[16535] | 0;
$1630 = __Z10copyStringPKc($4) | 0;
$1631 = HEAP32[$5 >> 2] | 0;
$1634 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($1630, HEAP32[$1629 + 4 >> 2] | 0) | 0;
$1635 = HEAP32[$1629 >> 2] | 0;
$1636 = $1635 + ($1634 << 3) | 0;
$1637 = $1635 + ($1634 << 3) + 4 | 0;
switch (HEAP16[$1637 >> 1] | 0) {
case 0:
{
$1642 = __Znwj(12) | 0;
HEAP32[$1642 >> 2] = $1630;
HEAP32[$1642 + 4 >> 2] = $1631;
HEAP32[$1642 + 8 >> 2] = 0;
HEAP32[$1636 >> 2] = $1642;
$1645 = $1629 + 12 | 0;
HEAP32[$1645 >> 2] = (HEAP32[$1645 >> 2] | 0) + -1;
$$sink$i$i178$2 = $1629 + 16 | 0;
break;
}
case 1:
{
$1639 = $1629 + 16 | 0;
HEAP32[$1639 >> 2] = (HEAP32[$1639 >> 2] | 0) + -1;
label = 230;
break;
}
default:
label = 230;
}
if ((label | 0) == 230) {
label = 0;
$1649 = HEAP32[$1636 >> 2] | 0;
$1651 = __Znwj(12) | 0;
$1652 = $1649 + 8 | 0;
$1653 = HEAP32[$1652 >> 2] | 0;
HEAP32[$1651 >> 2] = $1630;
HEAP32[$1651 + 4 >> 2] = $1631;
HEAP32[$1651 + 8 >> 2] = $1653;
HEAP32[$1652 >> 2] = $1651;
$$sink$i$i178$2 = $1629 + 8 | 0;
}
HEAP32[$$sink$i$i178$2 >> 2] = (HEAP32[$$sink$i$i178$2 >> 2] | 0) + 1;
HEAP16[$1637 >> 1] = (HEAP16[$1637 >> 1] | 0) + 1 << 16 >> 16;
$1660 = $1629 + 24 | 0;
HEAP32[$1660 >> 2] = (HEAP32[$1660 >> 2] | 0) + 1;
HEAP32[$vararg_buffer89 >> 2] = $942;
HEAP32[$vararg_buffer89 + 4 >> 2] = 66;
_snprintf($4, 11, 18744, $vararg_buffer89) | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($5, 23, $943, 0, 0, 1, 0);
$1663 = HEAP32[16535] | 0;
$1664 = __Z10copyStringPKc($4) | 0;
$1665 = HEAP32[$5 >> 2] | 0;
$1668 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($1664, HEAP32[$1663 + 4 >> 2] | 0) | 0;
$1669 = HEAP32[$1663 >> 2] | 0;
$1670 = $1669 + ($1668 << 3) | 0;
$1671 = $1669 + ($1668 << 3) + 4 | 0;
switch (HEAP16[$1671 >> 1] | 0) {
case 0:
{
$1676 = __Znwj(12) | 0;
HEAP32[$1676 >> 2] = $1664;
HEAP32[$1676 + 4 >> 2] = $1665;
HEAP32[$1676 + 8 >> 2] = 0;
HEAP32[$1670 >> 2] = $1676;
$1679 = $1663 + 12 | 0;
HEAP32[$1679 >> 2] = (HEAP32[$1679 >> 2] | 0) + -1;
$$sink$i$i178$3 = $1663 + 16 | 0;
break;
}
case 1:
{
$1673 = $1663 + 16 | 0;
HEAP32[$1673 >> 2] = (HEAP32[$1673 >> 2] | 0) + -1;
label = 234;
break;
}
default:
label = 234;
}
if ((label | 0) == 234) {
label = 0;
$1683 = HEAP32[$1670 >> 2] | 0;
$1685 = __Znwj(12) | 0;
$1686 = $1683 + 8 | 0;
$1687 = HEAP32[$1686 >> 2] | 0;
HEAP32[$1685 >> 2] = $1664;
HEAP32[$1685 + 4 >> 2] = $1665;
HEAP32[$1685 + 8 >> 2] = $1687;
HEAP32[$1686 >> 2] = $1685;
$$sink$i$i178$3 = $1663 + 8 | 0;
}
HEAP32[$$sink$i$i178$3 >> 2] = (HEAP32[$$sink$i$i178$3 >> 2] | 0) + 1;
HEAP16[$1671 >> 1] = (HEAP16[$1671 >> 1] | 0) + 1 << 16 >> 16;
$1694 = $1663 + 24 | 0;
HEAP32[$1694 >> 2] = (HEAP32[$1694 >> 2] | 0) + 1;
$indvars$iv355 = $indvars$iv355 + 1 | 0;
} while (($indvars$iv355 | 0) != 5);
__ZL17AddToARPSiteIndexPKc8Locationbb(18751, 44, 0, 1);
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($vararg_buffer89, 44, 4, 0, 0, 1, 0);
$954 = HEAP32[16535] | 0;
$955 = _concatStrings(18751, 18761) | 0;
$956 = HEAP32[$vararg_buffer89 >> 2] | 0;
$959 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($955, HEAP32[$954 + 4 >> 2] | 0) | 0;
$960 = HEAP32[$954 >> 2] | 0;
$961 = $960 + ($959 << 3) | 0;
$962 = $960 + ($959 << 3) + 4 | 0;
switch (HEAP16[$962 >> 1] | 0) {
case 0:
{
$964 = __Znwj(12) | 0;
HEAP32[$964 >> 2] = $955;
HEAP32[$964 + 4 >> 2] = $956;
HEAP32[$964 + 8 >> 2] = 0;
HEAP32[$961 >> 2] = $964;
$967 = $954 + 12 | 0;
HEAP32[$967 >> 2] = (HEAP32[$967 >> 2] | 0) + -1;
$$sink$i$i256 = $954 + 16 | 0;
break;
}
case 1:
{
$971 = $954 + 16 | 0;
HEAP32[$971 >> 2] = (HEAP32[$971 >> 2] | 0) + -1;
label = 127;
break;
}
default:
label = 127;
}
if ((label | 0) == 127) {
$974 = HEAP32[$961 >> 2] | 0;
$976 = __Znwj(12) | 0;
$977 = $974 + 8 | 0;
$978 = HEAP32[$977 >> 2] | 0;
HEAP32[$976 >> 2] = $955;
HEAP32[$976 + 4 >> 2] = $956;
HEAP32[$976 + 8 >> 2] = $978;
HEAP32[$977 >> 2] = $976;
$$sink$i$i256 = $954 + 8 | 0;
}
HEAP32[$$sink$i$i256 >> 2] = (HEAP32[$$sink$i$i256 >> 2] | 0) + 1;
HEAP16[$962 >> 1] = (HEAP16[$962 >> 1] | 0) + 1 << 16 >> 16;
$985 = $954 + 24 | 0;
HEAP32[$985 >> 2] = (HEAP32[$985 >> 2] | 0) + 1;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($vararg_buffer85, 44, 3, 0, 0, 1, 0);
HEAP16[$vararg_buffer89 >> 1] = HEAP16[$vararg_buffer85 >> 1] | 0;
HEAP8[$vararg_buffer89 + 2 >> 0] = HEAP8[$vararg_buffer85 + 2 >> 0] | 0;
$988 = HEAP32[16535] | 0;
$989 = _concatStrings(18751, 18765) | 0;
$990 = HEAP32[$vararg_buffer89 >> 2] | 0;
$993 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($989, HEAP32[$988 + 4 >> 2] | 0) | 0;
$994 = HEAP32[$988 >> 2] | 0;
$995 = $994 + ($993 << 3) | 0;
$996 = $994 + ($993 << 3) + 4 | 0;
switch (HEAP16[$996 >> 1] | 0) {
case 0:
{
$998 = __Znwj(12) | 0;
HEAP32[$998 >> 2] = $989;
HEAP32[$998 + 4 >> 2] = $990;
HEAP32[$998 + 8 >> 2] = 0;
HEAP32[$995 >> 2] = $998;
$1001 = $988 + 12 | 0;
HEAP32[$1001 >> 2] = (HEAP32[$1001 >> 2] | 0) + -1;
$$sink$i$i157 = $988 + 16 | 0;
break;
}
case 1:
{
$1005 = $988 + 16 | 0;
HEAP32[$1005 >> 2] = (HEAP32[$1005 >> 2] | 0) + -1;
label = 131;
break;
}
default:
label = 131;
}
if ((label | 0) == 131) {
$1008 = HEAP32[$995 >> 2] | 0;
$1010 = __Znwj(12) | 0;
$1011 = $1008 + 8 | 0;
$1012 = HEAP32[$1011 >> 2] | 0;
HEAP32[$1010 >> 2] = $989;
HEAP32[$1010 + 4 >> 2] = $990;
HEAP32[$1010 + 8 >> 2] = $1012;
HEAP32[$1011 >> 2] = $1010;
$$sink$i$i157 = $988 + 8 | 0;
}
HEAP32[$$sink$i$i157 >> 2] = (HEAP32[$$sink$i$i157 >> 2] | 0) + 1;
HEAP16[$996 >> 1] = (HEAP16[$996 >> 1] | 0) + 1 << 16 >> 16;
$1019 = $988 + 24 | 0;
HEAP32[$1019 >> 2] = (HEAP32[$1019 >> 2] | 0) + 1;
__ZL17AddToARPSiteIndexPKc8Locationbb(18769, 16, 1, 0);
__ZL17AddToARPSiteIndexPKc8Locationbb(18779, 25, 1, 1);
__ZL17AddToARPSiteIndexPKc8Locationbb(18790, 26, 1, 1);
__ZL17AddToARPSiteIndexPKc8Locationbb(18801, 27, 0, 1);
__ZL17AddToARPSiteIndexPKc8Locationbb(18810, 27, 1, 1);
__ZL17AddToARPSiteIndexPKc8Locationbb(18817, 28, 0, 1);
__ZL17AddToARPSiteIndexPKc8Locationbb(18831, 29, 0, 1);
__ZL17AddToARPSiteIndexPKc8Locationbb(18845, 30, 1, 1);
__ZL17AddToARPSiteIndexPKc8Locationbb(18852, 31, 1, 1);
__ZL17AddToARPSiteIndexPKc8Locationbb(18863, 32, 1, 1);
__ZL17AddToARPSiteIndexPKc8Locationbb(18870, 33, 1, 1);
__ZL17AddToARPSiteIndexPKc8Locationbb(18881, 34, 1, 1);
__ZL17AddToARPSiteIndexPKc8Locationbb(18892, 35, 1, 0);
__ZL17AddToARPSiteIndexPKc8Locationbb(18901, 36, 1, 0);
__ZL17AddToARPSiteIndexPKc8Locationbb(18909, 37, 1, 0);
__ZL17AddToARPSiteIndexPKc8Locationbb(18922, 38, 1, 0);
__ZL17AddToARPSiteIndexPKc8Locationbb(18935, 39, 1, 1);
__ZL17AddToARPSiteIndexPKc8Locationbb(18942, 40, 1, 0);
__ZL17AddToARPSiteIndexPKc8Locationbb(18954, 41, 0, 1);
__ZL17AddToARPSiteIndexPKc8Locationbb(18960, 42, 0, 1);
__ZL17AddToARPSiteIndexPKc8Locationbb(18970, 43, 0, 1);
__ZL17AddToARPSiteIndexPKc8Locationbb(18978, 18, 1, 1);
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($vararg_buffer89, 18, 4, 0, 0, 1, 0);
$1022 = HEAP32[16535] | 0;
$1023 = _concatStrings(18978, 18761) | 0;
$1024 = HEAP32[$vararg_buffer89 >> 2] | 0;
$1027 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($1023, HEAP32[$1022 + 4 >> 2] | 0) | 0;
$1028 = HEAP32[$1022 >> 2] | 0;
$1029 = $1028 + ($1027 << 3) | 0;
$1030 = $1028 + ($1027 << 3) + 4 | 0;
switch (HEAP16[$1030 >> 1] | 0) {
case 0:
{
$1032 = __Znwj(12) | 0;
HEAP32[$1032 >> 2] = $1023;
HEAP32[$1032 + 4 >> 2] = $1024;
HEAP32[$1032 + 8 >> 2] = 0;
HEAP32[$1029 >> 2] = $1032;
$1035 = $1022 + 12 | 0;
HEAP32[$1035 >> 2] = (HEAP32[$1035 >> 2] | 0) + -1;
$$sink$i$i265 = $1022 + 16 | 0;
break;
}
case 1:
{
$1039 = $1022 + 16 | 0;
HEAP32[$1039 >> 2] = (HEAP32[$1039 >> 2] | 0) + -1;
label = 135;
break;
}
default:
label = 135;
}
if ((label | 0) == 135) {
$1042 = HEAP32[$1029 >> 2] | 0;
$1044 = __Znwj(12) | 0;
$1045 = $1042 + 8 | 0;
$1046 = HEAP32[$1045 >> 2] | 0;
HEAP32[$1044 >> 2] = $1023;
HEAP32[$1044 + 4 >> 2] = $1024;
HEAP32[$1044 + 8 >> 2] = $1046;
HEAP32[$1045 >> 2] = $1044;
$$sink$i$i265 = $1022 + 8 | 0;
}
HEAP32[$$sink$i$i265 >> 2] = (HEAP32[$$sink$i$i265 >> 2] | 0) + 1;
HEAP16[$1030 >> 1] = (HEAP16[$1030 >> 1] | 0) + 1 << 16 >> 16;
$1053 = $1022 + 24 | 0;
HEAP32[$1053 >> 2] = (HEAP32[$1053 >> 2] | 0) + 1;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($vararg_buffer85, 18, 3, 0, 0, 1, 0);
HEAP16[$vararg_buffer89 >> 1] = HEAP16[$vararg_buffer85 >> 1] | 0;
HEAP8[$vararg_buffer89 + 2 >> 0] = HEAP8[$vararg_buffer85 + 2 >> 0] | 0;
$1056 = HEAP32[16535] | 0;
$1057 = _concatStrings(18978, 18765) | 0;
$1058 = HEAP32[$vararg_buffer89 >> 2] | 0;
$1061 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($1057, HEAP32[$1056 + 4 >> 2] | 0) | 0;
$1062 = HEAP32[$1056 >> 2] | 0;
$1063 = $1062 + ($1061 << 3) | 0;
$1064 = $1062 + ($1061 << 3) + 4 | 0;
switch (HEAP16[$1064 >> 1] | 0) {
case 0:
{
$1066 = __Znwj(12) | 0;
HEAP32[$1066 >> 2] = $1057;
HEAP32[$1066 + 4 >> 2] = $1058;
HEAP32[$1066 + 8 >> 2] = 0;
HEAP32[$1063 >> 2] = $1066;
$1069 = $1056 + 12 | 0;
HEAP32[$1069 >> 2] = (HEAP32[$1069 >> 2] | 0) + -1;
$$sink$i$i169 = $1056 + 16 | 0;
break;
}
case 1:
{
$1073 = $1056 + 16 | 0;
HEAP32[$1073 >> 2] = (HEAP32[$1073 >> 2] | 0) + -1;
label = 139;
break;
}
default:
label = 139;
}
if ((label | 0) == 139) {
$1076 = HEAP32[$1063 >> 2] | 0;
$1078 = __Znwj(12) | 0;
$1079 = $1076 + 8 | 0;
$1080 = HEAP32[$1079 >> 2] | 0;
HEAP32[$1078 >> 2] = $1057;
HEAP32[$1078 + 4 >> 2] = $1058;
HEAP32[$1078 + 8 >> 2] = $1080;
HEAP32[$1079 >> 2] = $1078;
$$sink$i$i169 = $1056 + 8 | 0;
}
HEAP32[$$sink$i$i169 >> 2] = (HEAP32[$$sink$i$i169 >> 2] | 0) + 1;
HEAP16[$1064 >> 1] = (HEAP16[$1064 >> 1] | 0) + 1 << 16 >> 16;
$1087 = $1056 + 24 | 0;
HEAP32[$1087 >> 2] = (HEAP32[$1087 >> 2] | 0) + 1;
$indvars$iv349 = 0;
do {
$1126 = HEAP8[18985 + $indvars$iv349 >> 0] | 0;
$$pre370 = HEAP32[1744 + ($indvars$iv349 << 2) >> 2] | 0;
$indvars$iv343 = 1;
while (1) {
$1131 = HEAP8[18987 + $indvars$iv343 >> 0] | 0;
HEAP32[$vararg_buffer32 >> 2] = $1126;
HEAP32[$vararg_buffer32 + 4 >> 2] = 85;
HEAP32[$vararg_buffer32 + 8 >> 2] = $1131;
_snprintf($4, 11, 18992, $vararg_buffer32) | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($vararg_buffer89, 15, $$pre370, $indvars$iv343, 0, 1, 0);
$1132 = HEAP32[16535] | 0;
$1133 = __Z10copyStringPKc($4) | 0;
$1134 = HEAP32[$vararg_buffer89 >> 2] | 0;
$1137 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($1133, HEAP32[$1132 + 4 >> 2] | 0) | 0;
$1138 = HEAP32[$1132 >> 2] | 0;
$1139 = $1138 + ($1137 << 3) | 0;
$1140 = $1138 + ($1137 << 3) + 4 | 0;
switch (HEAP16[$1140 >> 1] | 0) {
case 0:
{
$1208 = __Znwj(12) | 0;
HEAP32[$1208 >> 2] = $1133;
HEAP32[$1208 + 4 >> 2] = $1134;
HEAP32[$1208 + 8 >> 2] = 0;
HEAP32[$1139 >> 2] = $1208;
$1211 = $1132 + 12 | 0;
HEAP32[$1211 >> 2] = (HEAP32[$1211 >> 2] | 0) + -1;
$$sink$i$i205 = $1132 + 16 | 0;
break;
}
case 1:
{
$1215 = $1132 + 16 | 0;
HEAP32[$1215 >> 2] = (HEAP32[$1215 >> 2] | 0) + -1;
label = 158;
break;
}
default:
label = 158;
}
if ((label | 0) == 158) {
label = 0;
$1218 = HEAP32[$1139 >> 2] | 0;
$1220 = __Znwj(12) | 0;
$1221 = $1218 + 8 | 0;
$1222 = HEAP32[$1221 >> 2] | 0;
HEAP32[$1220 >> 2] = $1133;
HEAP32[$1220 + 4 >> 2] = $1134;
HEAP32[$1220 + 8 >> 2] = $1222;
HEAP32[$1221 >> 2] = $1220;
$$sink$i$i205 = $1132 + 8 | 0;
}
HEAP32[$$sink$i$i205 >> 2] = (HEAP32[$$sink$i$i205 >> 2] | 0) + 1;
HEAP16[$1140 >> 1] = (HEAP16[$1140 >> 1] | 0) + 1 << 16 >> 16;
$1229 = $1132 + 24 | 0;
HEAP32[$1229 >> 2] = (HEAP32[$1229 >> 2] | 0) + 1;
HEAP32[$vararg_buffer41 >> 2] = $1126;
HEAP32[$vararg_buffer41 + 4 >> 2] = 69;
HEAP32[$vararg_buffer41 + 8 >> 2] = $1131;
_snprintf($4, 11, 18992, $vararg_buffer41) | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($vararg_buffer89, 13, $$pre370, $indvars$iv343, 0, 1, 0);
$1232 = HEAP32[16535] | 0;
$1233 = __Z10copyStringPKc($4) | 0;
$1234 = HEAP32[$vararg_buffer89 >> 2] | 0;
$1237 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($1233, HEAP32[$1232 + 4 >> 2] | 0) | 0;
$1238 = HEAP32[$1232 >> 2] | 0;
$1239 = $1238 + ($1237 << 3) | 0;
$1240 = $1238 + ($1237 << 3) + 4 | 0;
switch (HEAP16[$1240 >> 1] | 0) {
case 0:
{
$1487 = __Znwj(12) | 0;
HEAP32[$1487 >> 2] = $1233;
HEAP32[$1487 + 4 >> 2] = $1234;
HEAP32[$1487 + 8 >> 2] = 0;
HEAP32[$1239 >> 2] = $1487;
$1490 = $1232 + 12 | 0;
HEAP32[$1490 >> 2] = (HEAP32[$1490 >> 2] | 0) + -1;
$$sink$i$i205$1 = $1232 + 16 | 0;
break;
}
case 1:
{
$1484 = $1232 + 16 | 0;
HEAP32[$1484 >> 2] = (HEAP32[$1484 >> 2] | 0) + -1;
label = 210;
break;
}
default:
label = 210;
}
if ((label | 0) == 210) {
label = 0;
$1494 = HEAP32[$1239 >> 2] | 0;
$1496 = __Znwj(12) | 0;
$1497 = $1494 + 8 | 0;
$1498 = HEAP32[$1497 >> 2] | 0;
HEAP32[$1496 >> 2] = $1233;
HEAP32[$1496 + 4 >> 2] = $1234;
HEAP32[$1496 + 8 >> 2] = $1498;
HEAP32[$1497 >> 2] = $1496;
$$sink$i$i205$1 = $1232 + 8 | 0;
}
HEAP32[$$sink$i$i205$1 >> 2] = (HEAP32[$$sink$i$i205$1 >> 2] | 0) + 1;
HEAP16[$1240 >> 1] = (HEAP16[$1240 >> 1] | 0) + 1 << 16 >> 16;
$1505 = $1232 + 24 | 0;
HEAP32[$1505 >> 2] = (HEAP32[$1505 >> 2] | 0) + 1;
HEAP32[$vararg_buffer69 >> 2] = $1126;
HEAP32[$vararg_buffer69 + 4 >> 2] = 76;
HEAP32[$vararg_buffer69 + 8 >> 2] = $1131;
_snprintf($4, 11, 18992, $vararg_buffer69) | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($vararg_buffer89, 12, $$pre370, $indvars$iv343, 0, 1, 0);
$1508 = HEAP32[16535] | 0;
$1509 = __Z10copyStringPKc($4) | 0;
$1510 = HEAP32[$vararg_buffer89 >> 2] | 0;
$1513 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($1509, HEAP32[$1508 + 4 >> 2] | 0) | 0;
$1514 = HEAP32[$1508 >> 2] | 0;
$1515 = $1514 + ($1513 << 3) | 0;
$1516 = $1514 + ($1513 << 3) + 4 | 0;
switch (HEAP16[$1516 >> 1] | 0) {
case 0:
{
$1521 = __Znwj(12) | 0;
HEAP32[$1521 >> 2] = $1509;
HEAP32[$1521 + 4 >> 2] = $1510;
HEAP32[$1521 + 8 >> 2] = 0;
HEAP32[$1515 >> 2] = $1521;
$1524 = $1508 + 12 | 0;
HEAP32[$1524 >> 2] = (HEAP32[$1524 >> 2] | 0) + -1;
$$sink$i$i205$2 = $1508 + 16 | 0;
break;
}
case 1:
{
$1518 = $1508 + 16 | 0;
HEAP32[$1518 >> 2] = (HEAP32[$1518 >> 2] | 0) + -1;
label = 214;
break;
}
default:
label = 214;
}
if ((label | 0) == 214) {
label = 0;
$1528 = HEAP32[$1515 >> 2] | 0;
$1530 = __Znwj(12) | 0;
$1531 = $1528 + 8 | 0;
$1532 = HEAP32[$1531 >> 2] | 0;
HEAP32[$1530 >> 2] = $1509;
HEAP32[$1530 + 4 >> 2] = $1510;
HEAP32[$1530 + 8 >> 2] = $1532;
HEAP32[$1531 >> 2] = $1530;
$$sink$i$i205$2 = $1508 + 8 | 0;
}
HEAP32[$$sink$i$i205$2 >> 2] = (HEAP32[$$sink$i$i205$2 >> 2] | 0) + 1;
HEAP16[$1516 >> 1] = (HEAP16[$1516 >> 1] | 0) + 1 << 16 >> 16;
$1539 = $1508 + 24 | 0;
HEAP32[$1539 >> 2] = (HEAP32[$1539 >> 2] | 0) + 1;
HEAP32[$vararg_buffer74 >> 2] = $1126;
HEAP32[$vararg_buffer74 + 4 >> 2] = 87;
HEAP32[$vararg_buffer74 + 8 >> 2] = $1131;
_snprintf($4, 11, 18992, $vararg_buffer74) | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($vararg_buffer89, 6, $$pre370, $indvars$iv343, 0, 1, 0);
$1149 = HEAP32[16535] | 0;
$1144 = __Z10copyStringPKc($4) | 0;
$1145 = HEAP32[$vararg_buffer89 >> 2] | 0;
$1544 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($1144, HEAP32[$1149 + 4 >> 2] | 0) | 0;
$1545 = HEAP32[$1149 >> 2] | 0;
$1147 = $1545 + ($1544 << 3) | 0;
$1166 = $1545 + ($1544 << 3) + 4 | 0;
switch (HEAP16[$1166 >> 1] | 0) {
case 0:
{
$1142 = __Znwj(12) | 0;
HEAP32[$1142 >> 2] = $1144;
HEAP32[$1142 + 4 >> 2] = $1145;
HEAP32[$1142 + 8 >> 2] = 0;
HEAP32[$1147 >> 2] = $1142;
$1148 = $1149 + 12 | 0;
HEAP32[$1148 >> 2] = (HEAP32[$1148 >> 2] | 0) + -1;
$$sink$i$i187 = $1149 + 16 | 0;
break;
}
case 1:
{
$1153 = $1149 + 16 | 0;
HEAP32[$1153 >> 2] = (HEAP32[$1153 >> 2] | 0) + -1;
label = 150;
break;
}
default:
label = 150;
}
if ((label | 0) == 150) {
label = 0;
$1156 = HEAP32[$1147 >> 2] | 0;
$1158 = __Znwj(12) | 0;
$1159 = $1156 + 8 | 0;
$1160 = HEAP32[$1159 >> 2] | 0;
HEAP32[$1158 >> 2] = $1144;
HEAP32[$1158 + 4 >> 2] = $1145;
HEAP32[$1158 + 8 >> 2] = $1160;
HEAP32[$1159 >> 2] = $1158;
$$sink$i$i187 = $1149 + 8 | 0;
}
HEAP32[$$sink$i$i187 >> 2] = (HEAP32[$$sink$i$i187 >> 2] | 0) + 1;
HEAP16[$1166 >> 1] = (HEAP16[$1166 >> 1] | 0) + 1 << 16 >> 16;
$1168 = $1149 + 24 | 0;
HEAP32[$1168 >> 2] = (HEAP32[$1168 >> 2] | 0) + 1;
$1173 = HEAP8[19001 + $indvars$iv343 >> 0] | 0;
HEAP32[$vararg_buffer37 >> 2] = $1126;
HEAP32[$vararg_buffer37 + 4 >> 2] = $1173;
_snprintf($4, 11, 19006, $vararg_buffer37) | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($vararg_buffer89, 1, $$pre370, $indvars$iv343, 0, 1, 0);
$1174 = HEAP32[16535] | 0;
$1175 = __Z10copyStringPKc($4) | 0;
$1176 = HEAP32[$vararg_buffer89 >> 2] | 0;
$1179 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($1175, HEAP32[$1174 + 4 >> 2] | 0) | 0;
$1180 = HEAP32[$1174 >> 2] | 0;
$1181 = $1180 + ($1179 << 3) | 0;
$1182 = $1180 + ($1179 << 3) + 4 | 0;
switch (HEAP16[$1182 >> 1] | 0) {
case 0:
{
$1184 = __Znwj(12) | 0;
HEAP32[$1184 >> 2] = $1175;
HEAP32[$1184 + 4 >> 2] = $1176;
HEAP32[$1184 + 8 >> 2] = 0;
HEAP32[$1181 >> 2] = $1184;
$1187 = $1174 + 12 | 0;
HEAP32[$1187 >> 2] = (HEAP32[$1187 >> 2] | 0) + -1;
$$sink$i$i196 = $1174 + 16 | 0;
break;
}
case 1:
{
$1191 = $1174 + 16 | 0;
HEAP32[$1191 >> 2] = (HEAP32[$1191 >> 2] | 0) + -1;
label = 154;
break;
}
default:
label = 154;
}
if ((label | 0) == 154) {
label = 0;
$1194 = HEAP32[$1181 >> 2] | 0;
$1196 = __Znwj(12) | 0;
$1197 = $1194 + 8 | 0;
$1198 = HEAP32[$1197 >> 2] | 0;
HEAP32[$1196 >> 2] = $1175;
HEAP32[$1196 + 4 >> 2] = $1176;
HEAP32[$1196 + 8 >> 2] = $1198;
HEAP32[$1197 >> 2] = $1196;
$$sink$i$i196 = $1174 + 8 | 0;
}
HEAP32[$$sink$i$i196 >> 2] = (HEAP32[$$sink$i$i196 >> 2] | 0) + 1;
HEAP16[$1182 >> 1] = (HEAP16[$1182 >> 1] | 0) + 1 << 16 >> 16;
$1205 = $1174 + 24 | 0;
HEAP32[$1205 >> 2] = (HEAP32[$1205 >> 2] | 0) + 1;
$indvars$iv = 0;
do {
$1244 = 1 << $indvars$iv & 65535;
$indvars$iv = $indvars$iv + 1 | 0;
HEAP32[$vararg_buffer46 >> 2] = $1126;
HEAP32[$vararg_buffer46 + 4 >> 2] = $indvars$iv;
HEAP32[$vararg_buffer46 + 8 >> 2] = 19026;
HEAP32[$vararg_buffer46 + 12 >> 2] = $1173;
_snprintf($4, 11, 19013, $vararg_buffer46) | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($vararg_buffer89, 10, $$pre370, $indvars$iv343, $1244, 1, 0);
$1245 = HEAP32[16535] | 0;
$1246 = __Z10copyStringPKc($4) | 0;
$1247 = HEAP32[$vararg_buffer89 >> 2] | 0;
$1250 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($1246, HEAP32[$1245 + 4 >> 2] | 0) | 0;
$1251 = HEAP32[$1245 >> 2] | 0;
$1252 = $1251 + ($1250 << 3) | 0;
$1253 = $1251 + ($1250 << 3) + 4 | 0;
switch (HEAP16[$1253 >> 1] | 0) {
case 0:
{
$1255 = __Znwj(12) | 0;
HEAP32[$1255 >> 2] = $1246;
HEAP32[$1255 + 4 >> 2] = $1247;
HEAP32[$1255 + 8 >> 2] = 0;
HEAP32[$1252 >> 2] = $1255;
$1258 = $1245 + 12 | 0;
HEAP32[$1258 >> 2] = (HEAP32[$1258 >> 2] | 0) + -1;
$$sink$i$i215 = $1245 + 16 | 0;
break;
}
case 1:
{
$1262 = $1245 + 16 | 0;
HEAP32[$1262 >> 2] = (HEAP32[$1262 >> 2] | 0) + -1;
label = 164;
break;
}
default:
label = 164;
}
if ((label | 0) == 164) {
label = 0;
$1265 = HEAP32[$1252 >> 2] | 0;
$1267 = __Znwj(12) | 0;
$1268 = $1265 + 8 | 0;
$1269 = HEAP32[$1268 >> 2] | 0;
HEAP32[$1267 >> 2] = $1246;
HEAP32[$1267 + 4 >> 2] = $1247;
HEAP32[$1267 + 8 >> 2] = $1269;
HEAP32[$1268 >> 2] = $1267;
$$sink$i$i215 = $1245 + 8 | 0;
}
HEAP32[$$sink$i$i215 >> 2] = (HEAP32[$$sink$i$i215 >> 2] | 0) + 1;
HEAP16[$1253 >> 1] = (HEAP16[$1253 >> 1] | 0) + 1 << 16 >> 16;
$1276 = $1245 + 24 | 0;
HEAP32[$1276 >> 2] = (HEAP32[$1276 >> 2] | 0) + 1;
HEAP32[$vararg_buffer52 >> 2] = $1126;
HEAP32[$vararg_buffer52 + 4 >> 2] = $indvars$iv;
HEAP32[$vararg_buffer52 + 8 >> 2] = 19029;
HEAP32[$vararg_buffer52 + 12 >> 2] = $1173;
_snprintf($4, 11, 19013, $vararg_buffer52) | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($vararg_buffer89, 9, $$pre370, $indvars$iv343, $1244, 1, 0);
$1279 = HEAP32[16535] | 0;
$1280 = __Z10copyStringPKc($4) | 0;
$1281 = HEAP32[$vararg_buffer89 >> 2] | 0;
$1284 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($1280, HEAP32[$1279 + 4 >> 2] | 0) | 0;
$1285 = HEAP32[$1279 >> 2] | 0;
$1286 = $1285 + ($1284 << 3) | 0;
$1287 = $1285 + ($1284 << 3) + 4 | 0;
switch (HEAP16[$1287 >> 1] | 0) {
case 0:
{
$1550 = __Znwj(12) | 0;
HEAP32[$1550 >> 2] = $1280;
HEAP32[$1550 + 4 >> 2] = $1281;
HEAP32[$1550 + 8 >> 2] = 0;
HEAP32[$1286 >> 2] = $1550;
$1553 = $1279 + 12 | 0;
HEAP32[$1553 >> 2] = (HEAP32[$1553 >> 2] | 0) + -1;
$$sink$i$i215$1 = $1279 + 16 | 0;
break;
}
case 1:
{
$1547 = $1279 + 16 | 0;
HEAP32[$1547 >> 2] = (HEAP32[$1547 >> 2] | 0) + -1;
label = 218;
break;
}
default:
label = 218;
}
if ((label | 0) == 218) {
label = 0;
$1557 = HEAP32[$1286 >> 2] | 0;
$1559 = __Znwj(12) | 0;
$1560 = $1557 + 8 | 0;
$1561 = HEAP32[$1560 >> 2] | 0;
HEAP32[$1559 >> 2] = $1280;
HEAP32[$1559 + 4 >> 2] = $1281;
HEAP32[$1559 + 8 >> 2] = $1561;
HEAP32[$1560 >> 2] = $1559;
$$sink$i$i215$1 = $1279 + 8 | 0;
}
HEAP32[$$sink$i$i215$1 >> 2] = (HEAP32[$$sink$i$i215$1 >> 2] | 0) + 1;
HEAP16[$1287 >> 1] = (HEAP16[$1287 >> 1] | 0) + 1 << 16 >> 16;
$1568 = $1279 + 24 | 0;
HEAP32[$1568 >> 2] = (HEAP32[$1568 >> 2] | 0) + 1;
HEAP32[$vararg_buffer79 >> 2] = $1126;
HEAP32[$vararg_buffer79 + 4 >> 2] = $indvars$iv;
HEAP32[$vararg_buffer79 + 8 >> 2] = 19043;
HEAP32[$vararg_buffer79 + 12 >> 2] = $1173;
_snprintf($4, 11, 19013, $vararg_buffer79) | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($vararg_buffer89, 8, $$pre370, $indvars$iv343, $1244, 1, 0);
$1571 = HEAP32[16535] | 0;
$1572 = __Z10copyStringPKc($4) | 0;
$1573 = HEAP32[$vararg_buffer89 >> 2] | 0;
$1576 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($1572, HEAP32[$1571 + 4 >> 2] | 0) | 0;
$1577 = HEAP32[$1571 >> 2] | 0;
$1578 = $1577 + ($1576 << 3) | 0;
$1579 = $1577 + ($1576 << 3) + 4 | 0;
switch (HEAP16[$1579 >> 1] | 0) {
case 0:
{
$1584 = __Znwj(12) | 0;
HEAP32[$1584 >> 2] = $1572;
HEAP32[$1584 + 4 >> 2] = $1573;
HEAP32[$1584 + 8 >> 2] = 0;
HEAP32[$1578 >> 2] = $1584;
$1587 = $1571 + 12 | 0;
HEAP32[$1587 >> 2] = (HEAP32[$1587 >> 2] | 0) + -1;
$$sink$i$i215$2 = $1571 + 16 | 0;
break;
}
case 1:
{
$1581 = $1571 + 16 | 0;
HEAP32[$1581 >> 2] = (HEAP32[$1581 >> 2] | 0) + -1;
label = 222;
break;
}
default:
label = 222;
}
if ((label | 0) == 222) {
label = 0;
$1591 = HEAP32[$1578 >> 2] | 0;
$1593 = __Znwj(12) | 0;
$1594 = $1591 + 8 | 0;
$1595 = HEAP32[$1594 >> 2] | 0;
HEAP32[$1593 >> 2] = $1572;
HEAP32[$1593 + 4 >> 2] = $1573;
HEAP32[$1593 + 8 >> 2] = $1595;
HEAP32[$1594 >> 2] = $1593;
$$sink$i$i215$2 = $1571 + 8 | 0;
}
HEAP32[$$sink$i$i215$2 >> 2] = (HEAP32[$$sink$i$i215$2 >> 2] | 0) + 1;
HEAP16[$1579 >> 1] = (HEAP16[$1579 >> 1] | 0) + 1 << 16 >> 16;
$1602 = $1571 + 24 | 0;
HEAP32[$1602 >> 2] = (HEAP32[$1602 >> 2] | 0) + 1;
} while (($indvars$iv | 0) != 5);
$indvars$iv343 = $indvars$iv343 + 1 | 0;
if (($indvars$iv343 | 0) == 5) {
$indvars$iv346 = 0;
break;
}
}
do {
$indvars$iv346$looptemp = $indvars$iv346;
$indvars$iv346 = $indvars$iv346 + 1 | 0;
HEAP32[$vararg_buffer58 >> 2] = $1126;
HEAP32[$vararg_buffer58 + 4 >> 2] = $indvars$iv346;
_snprintf($4, 11, 19032, $vararg_buffer58) | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($vararg_buffer89, 7, $$pre370, 0, 1 << $indvars$iv346$looptemp & 65535, 1, 0);
$1292 = HEAP32[16535] | 0;
$1293 = __Z10copyStringPKc($4) | 0;
$1294 = HEAP32[$vararg_buffer89 >> 2] | 0;
$1297 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($1293, HEAP32[$1292 + 4 >> 2] | 0) | 0;
$1298 = HEAP32[$1292 >> 2] | 0;
$1299 = $1298 + ($1297 << 3) | 0;
$1300 = $1298 + ($1297 << 3) + 4 | 0;
switch (HEAP16[$1300 >> 1] | 0) {
case 0:
{
$1302 = __Znwj(12) | 0;
HEAP32[$1302 >> 2] = $1293;
HEAP32[$1302 + 4 >> 2] = $1294;
HEAP32[$1302 + 8 >> 2] = 0;
HEAP32[$1299 >> 2] = $1302;
$1305 = $1292 + 12 | 0;
HEAP32[$1305 >> 2] = (HEAP32[$1305 >> 2] | 0) + -1;
$$sink$i$i225 = $1292 + 16 | 0;
break;
}
case 1:
{
$1309 = $1292 + 16 | 0;
HEAP32[$1309 >> 2] = (HEAP32[$1309 >> 2] | 0) + -1;
label = 170;
break;
}
default:
label = 170;
}
if ((label | 0) == 170) {
label = 0;
$1312 = HEAP32[$1299 >> 2] | 0;
$1314 = __Znwj(12) | 0;
$1315 = $1312 + 8 | 0;
$1316 = HEAP32[$1315 >> 2] | 0;
HEAP32[$1314 >> 2] = $1293;
HEAP32[$1314 + 4 >> 2] = $1294;
HEAP32[$1314 + 8 >> 2] = $1316;
HEAP32[$1315 >> 2] = $1314;
$$sink$i$i225 = $1292 + 8 | 0;
}
HEAP32[$$sink$i$i225 >> 2] = (HEAP32[$$sink$i$i225 >> 2] | 0) + 1;
HEAP16[$1300 >> 1] = (HEAP16[$1300 >> 1] | 0) + 1 << 16 >> 16;
$1323 = $1292 + 24 | 0;
HEAP32[$1323 >> 2] = (HEAP32[$1323 >> 2] | 0) + 1;
} while (($indvars$iv346 | 0) != 5);
$indvars$iv349 = $indvars$iv349 + 1 | 0;
} while (($indvars$iv349 | 0) != 2);
do if (0) {
$1326 = HEAP32[16535] | 0;
if (!$1326) {
__Z5eputsPKc(61277);
break;
}
$1328 = HEAP32[16082] | 0;
if ($1328 | 0) {
HEAP16[$vararg_buffer89 >> 1] = 0;
HEAP8[$vararg_buffer89 + 2 >> 0] = 0;
$1330 = $1326 + 4 | 0;
$1331 = HEAP32[$1330 >> 2] | 0;
L328 : do if (($1331 | 0) > -1) {
$$sroa$0$015$i = -1;
$$sroa$6$014$i = 0;
$1338 = $1331;
while (1) {
$$sroa$0$1$i = $$sroa$0$015$i;
$1334 = $$sroa$6$014$i;
$1336 = $$sroa$0$015$i;
while (1) {
if (!$1334) {
$1335 = $1336 + 1 | 0;
if (($1335 | 0) < ($1338 | 0)) {
$$sink19$i$i = (HEAP32[$1326 >> 2] | 0) + ($1335 << 3) | 0;
$$sroa$0$2$i = $1335;
$1748 = $1335;
label = 182;
} else {
$$sroa$0$3$i = $1335;
$1345 = $1335;
}
} else {
$$sink19$i$i = $1334 + 8 | 0;
$$sroa$0$2$i = $$sroa$0$1$i;
$1748 = $1336;
label = 182;
}
if ((label | 0) == 182) {
label = 0;
$1342 = HEAP32[$$sink19$i$i >> 2] | 0;
if (!$1342) {
$$sroa$0$3$i = $$sroa$0$2$i;
$1345 = $1748;
} else break;
}
if (($1345 | 0) < ($1338 | 0)) {
$$sroa$0$1$i = $$sroa$0$3$i;
$1334 = 0;
$1336 = $1345;
} else break L328;
}
$1346 = HEAP32[$1342 >> 2] | 0;
$1347 = $1342 + 4 | 0;
HEAP16[$vararg_buffer89 >> 1] = HEAP16[$1347 >> 1] | 0;
HEAP8[$vararg_buffer89 + 2 >> 0] = HEAP8[$1347 + 2 >> 0] | 0;
HEAP32[$vararg_buffer62 >> 2] = $1346;
_fprintf($1328, 18040, $vararg_buffer62) | 0;
__THREW__ = 0;
invoke_vii(127, $vararg_buffer89 | 0, $1328 | 0);
$1348 = __THREW__;
__THREW__ = 0;
if ($1348 & 1) break;
_fputc(10, $1328) | 0;
$1350 = HEAP32[$1330 >> 2] | 0;
if (($$sroa$0$2$i | 0) < ($1350 | 0)) {
$$sroa$0$015$i = $$sroa$0$2$i;
$$sroa$6$014$i = $1342;
$1338 = $1350;
} else break L328;
}
$1352 = ___cxa_find_matching_catch_2() | 0;
___resumeException($1352 | 0);
} while (0);
}
} while (0);
$1354 = __Znwj(28) | 0;
HEAP32[$1354 + 20 >> 2] = 0;
$1356 = $1354 + 24 | 0;
HEAP32[$1356 >> 2] = 0;
$1357 = $1354 + 8 | 0;
HEAP32[$1357 >> 2] = 0;
$1358 = $1354 + 16 | 0;
HEAP32[$1358 >> 2] = 0;
$1359 = $1354 + 12 | 0;
HEAP32[$1359 >> 2] = 13;
$1360 = _malloc(104) | 0;
HEAP32[$1354 >> 2] = $1360;
$1362 = $1354 + 4 | 0;
if (!$1360) {
HEAP32[$1362 >> 2] = 0;
__THREW__ = 0;
HEAP32[$vararg_buffer65 >> 2] = 13;
HEAP32[$vararg_buffer65 + 4 >> 2] = 8;
invoke_vii(115, 57708, $vararg_buffer65 | 0);
$1363 = __THREW__;
__THREW__ = 0;
if (!($1363 & 1)) {
$1365 = ___cxa_allocate_exception(4) | 0;
HEAP32[$1365 >> 2] = 1;
__THREW__ = 0;
invoke_viii(75, $1365 | 0, 32, 0);
__THREW__ = 0;
}
$1482 = ___cxa_find_matching_catch_2() | 0;
$1483 = tempRet0;
__ZdlPv($1354);
$$088 = $1482;
$$089 = $1483;
___resumeException($$088 | 0);
}
HEAP32[$1362 >> 2] = 13;
HEAP32[$1360 >> 2] = 0;
HEAP16[$1360 + 4 >> 1] = 0;
HEAP32[$1360 + 8 >> 2] = 0;
HEAP16[$1360 + 12 >> 1] = 0;
HEAP32[$1360 + 16 >> 2] = 0;
HEAP16[(HEAP32[$1354 >> 2] | 0) + 20 >> 1] = 0;
$1373 = HEAP32[$1362 >> 2] | 0;
if (($1373 | 0) > 3) {
$1376 = 3;
do {
HEAP32[(HEAP32[$1354 >> 2] | 0) + ($1376 << 3) >> 2] = 0;
HEAP16[(HEAP32[$1354 >> 2] | 0) + ($1376 << 3) + 4 >> 1] = 0;
$1376 = $1376 + 1 | 0;
$1380 = HEAP32[$1362 >> 2] | 0;
} while (($1376 | 0) < ($1380 | 0));
$$lcssa = $1380;
} else $$lcssa = $1373;
HEAP32[16525] = $1354;
$1383 = HEAP32[HEAP32[16526] >> 2] | 0;
$1384 = __ZN6KeyOpsIKPKcE12hashFunctionES1_i($1383, $$lcssa) | 0;
$1385 = HEAP32[$1354 >> 2] | 0;
$1386 = $1385 + ($1384 << 3) | 0;
$1387 = $1385 + ($1384 << 3) + 4 | 0;
switch (HEAP16[$1387 >> 1] | 0) {
case 0:
{
$1389 = __Znwj(12) | 0;
HEAP32[$1389 >> 2] = $1383;
HEAP32[$1389 + 4 >> 2] = 1;
HEAP32[$1389 + 8 >> 2] = 0;
HEAP32[$1386 >> 2] = $1389;
HEAP32[$1359 >> 2] = (HEAP32[$1359 >> 2] | 0) + -1;
$$sink$i$i234 = $1358;
break;
}
case 1:
{
HEAP32[$1358 >> 2] = (HEAP32[$1358 >> 2] | 0) + -1;
label = 196;
break;
}
default:
label = 196;
}
if ((label | 0) == 196) {
$1396 = HEAP32[$1386 >> 2] | 0;
$1398 = __Znwj(12) | 0;
$1399 = $1396 + 8 | 0;
$1400 = HEAP32[$1399 >> 2] | 0;
HEAP32[$1398 >> 2] = $1383;
HEAP32[$1398 + 4 >> 2] = 1;
HEAP32[$1398 + 8 >> 2] = $1400;
HEAP32[$1399 >> 2] = $1398;
$$sink$i$i234 = $1357;
}
HEAP32[$$sink$i$i234 >> 2] = (HEAP32[$$sink$i$i234 >> 2] | 0) + 1;
HEAP16[$1387 >> 1] = (HEAP16[$1387 >> 1] | 0) + 1 << 16 >> 16;
HEAP32[$1356 >> 2] = (HEAP32[$1356 >> 2] | 0) + 1;
$1408 = HEAP32[16525] | 0;
$1410 = HEAP32[HEAP32[16527] >> 2] | 0;
$1413 = __ZN6KeyOpsIKPKcE12hashFunctionES1_i($1410, HEAP32[$1408 + 4 >> 2] | 0) | 0;
$1414 = HEAP32[$1408 >> 2] | 0;
$1415 = $1414 + ($1413 << 3) | 0;
$1416 = $1414 + ($1413 << 3) + 4 | 0;
switch (HEAP16[$1416 >> 1] | 0) {
case 0:
{
$1418 = __Znwj(12) | 0;
HEAP32[$1418 >> 2] = $1410;
HEAP32[$1418 + 4 >> 2] = 2;
HEAP32[$1418 + 8 >> 2] = 0;
HEAP32[$1415 >> 2] = $1418;
$1421 = $1408 + 12 | 0;
HEAP32[$1421 >> 2] = (HEAP32[$1421 >> 2] | 0) + -1;
$$sink$i$i240 = $1408 + 16 | 0;
break;
}
case 1:
{
$1425 = $1408 + 16 | 0;
HEAP32[$1425 >> 2] = (HEAP32[$1425 >> 2] | 0) + -1;
label = 200;
break;
}
default:
label = 200;
}
if ((label | 0) == 200) {
$1428 = HEAP32[$1415 >> 2] | 0;
$1430 = __Znwj(12) | 0;
$1431 = $1428 + 8 | 0;
$1432 = HEAP32[$1431 >> 2] | 0;
HEAP32[$1430 >> 2] = $1410;
HEAP32[$1430 + 4 >> 2] = 2;
HEAP32[$1430 + 8 >> 2] = $1432;
HEAP32[$1431 >> 2] = $1430;
$$sink$i$i240 = $1408 + 8 | 0;
}
HEAP32[$$sink$i$i240 >> 2] = (HEAP32[$$sink$i$i240 >> 2] | 0) + 1;
HEAP16[$1416 >> 1] = (HEAP16[$1416 >> 1] | 0) + 1 << 16 >> 16;
$1439 = $1408 + 24 | 0;
HEAP32[$1439 >> 2] = (HEAP32[$1439 >> 2] | 0) + 1;
$1442 = HEAP32[16525] | 0;
$1444 = HEAP32[HEAP32[16528] >> 2] | 0;
$1447 = __ZN6KeyOpsIKPKcE12hashFunctionES1_i($1444, HEAP32[$1442 + 4 >> 2] | 0) | 0;
$1448 = HEAP32[$1442 >> 2] | 0;
$1449 = $1448 + ($1447 << 3) | 0;
$1450 = $1448 + ($1447 << 3) + 4 | 0;
switch (HEAP16[$1450 >> 1] | 0) {
case 0:
{
$1452 = __Znwj(12) | 0;
HEAP32[$1452 >> 2] = $1444;
HEAP32[$1452 + 4 >> 2] = 3;
HEAP32[$1452 + 8 >> 2] = 0;
HEAP32[$1449 >> 2] = $1452;
$1455 = $1442 + 12 | 0;
HEAP32[$1455 >> 2] = (HEAP32[$1455 >> 2] | 0) + -1;
$$sink$i$i247 = $1442 + 16 | 0;
$1469 = HEAP32[$$sink$i$i247 >> 2] | 0;
$1470 = $1469 + 1 | 0;
HEAP32[$$sink$i$i247 >> 2] = $1470;
$1471 = HEAP16[$1450 >> 1] | 0;
$1472 = $1471 + 1 << 16 >> 16;
HEAP16[$1450 >> 1] = $1472;
$1473 = $1442 + 24 | 0;
$1474 = HEAP32[$1473 >> 2] | 0;
$1475 = $1474 + 1 | 0;
HEAP32[$1473 >> 2] = $1475;
HEAP32[16529] = 0;
$1476 = HEAP32[16526] | 0;
HEAP32[16530] = $1476;
$1477 = HEAP32[16527] | 0;
HEAP32[16531] = $1477;
$1478 = HEAP32[16528] | 0;
HEAP32[16532] = $1478;
HEAP32[16536] = 0;
$1479 = HEAP32[16533] | 0;
HEAP32[16537] = $1479;
$1480 = HEAP32[16534] | 0;
HEAP32[16538] = $1480;
$1481 = HEAP32[16535] | 0;
HEAP32[16539] = $1481;
STACKTOP = sp;
return;
}
case 1:
{
$1459 = $1442 + 16 | 0;
HEAP32[$1459 >> 2] = (HEAP32[$1459 >> 2] | 0) + -1;
break;
}
default:
{}
}
$1462 = HEAP32[$1449 >> 2] | 0;
$1464 = __Znwj(12) | 0;
$1465 = $1462 + 8 | 0;
$1466 = HEAP32[$1465 >> 2] | 0;
HEAP32[$1464 >> 2] = $1444;
HEAP32[$1464 + 4 >> 2] = 3;
HEAP32[$1464 + 8 >> 2] = $1466;
HEAP32[$1465 >> 2] = $1464;
$$sink$i$i247 = $1442 + 8 | 0;
$1469 = HEAP32[$$sink$i$i247 >> 2] | 0;
$1470 = $1469 + 1 | 0;
HEAP32[$$sink$i$i247 >> 2] = $1470;
$1471 = HEAP16[$1450 >> 1] | 0;
$1472 = $1471 + 1 << 16 >> 16;
HEAP16[$1450 >> 1] = $1472;
$1473 = $1442 + 24 | 0;
$1474 = HEAP32[$1473 >> 2] | 0;
$1475 = $1474 + 1 | 0;
HEAP32[$1473 >> 2] = $1475;
HEAP32[16529] = 0;
$1476 = HEAP32[16526] | 0;
HEAP32[16530] = $1476;
$1477 = HEAP32[16527] | 0;
HEAP32[16531] = $1477;
$1478 = HEAP32[16528] | 0;
HEAP32[16532] = $1478;
HEAP32[16536] = 0;
$1479 = HEAP32[16533] | 0;
HEAP32[16537] = $1479;
$1480 = HEAP32[16534] | 0;
HEAP32[16538] = $1480;
$1481 = HEAP32[16535] | 0;
HEAP32[16539] = $1481;
STACKTOP = sp;
return;
}
function __Z17CreateSiGMLTablesv() {
var $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$$sroa_idx13 = 0, $$sroa$0$0$$sroa_idx16 = 0, $$sroa$019$0$$sroa_idx = 0, $$sroa$019$0$$sroa_idx22 = 0, $$sroa$019$0$$sroa_idx25 = 0, $$sroa$029$0$$sroa_idx = 0, $$sroa$029$0$$sroa_idx32 = 0, $$sroa$029$0$$sroa_idx35 = 0, $$sroa$039$0$$sroa_idx = 0, $$sroa$039$0$$sroa_idx42 = 0, $$sroa$045$0$$sroa_idx = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $27 = 0, $32 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1000 = 0, $vararg_buffer1012 = 0, $vararg_buffer1016 = 0, $vararg_buffer104 = 0, $vararg_buffer1096 = 0, $vararg_buffer1102 = 0, $vararg_buffer1108 = 0, $vararg_buffer1122 = 0, $vararg_buffer1156 = 0, $vararg_buffer1164 = 0, $vararg_buffer1168 = 0, $vararg_buffer1174 = 0, $vararg_buffer1180 = 0, $vararg_buffer1192 = 0, $vararg_buffer1196 = 0, $vararg_buffer12 = 0, $vararg_buffer18 = 0, $vararg_buffer192 = 0, $vararg_buffer24 = 0, $vararg_buffer310 = 0, $vararg_buffer338 = 0, $vararg_buffer362 = 0, $vararg_buffer378 = 0, $vararg_buffer386 = 0, $vararg_buffer46 = 0, $vararg_buffer476 = 0, $vararg_buffer486 = 0, $vararg_buffer508 = 0, $vararg_buffer530 = 0, $vararg_buffer544 = 0, $vararg_buffer550 = 0, $vararg_buffer56 = 0, $vararg_buffer564 = 0, $vararg_buffer580 = 0, $vararg_buffer592 = 0, $vararg_buffer618 = 0, $vararg_buffer632 = 0, $vararg_buffer638 = 0, $vararg_buffer644 = 0, $vararg_buffer74 = 0, $vararg_buffer754 = 0, $vararg_buffer782 = 0, $vararg_buffer792 = 0, $vararg_buffer796 = 0, $vararg_buffer806 = 0, $vararg_buffer818 = 0, $vararg_buffer830 = 0, $vararg_buffer842 = 0, $vararg_buffer858 = 0, $vararg_buffer86 = 0, $vararg_buffer870 = 0, $vararg_buffer884 = 0, $vararg_buffer888 = 0, $vararg_buffer892 = 0, $vararg_buffer910 = 0, $vararg_buffer92 = 0, $vararg_buffer922 = 0, $vararg_buffer926 = 0, $vararg_buffer932 = 0, $vararg_buffer940 = 0, $vararg_buffer944 = 0, $vararg_buffer98 = 0, $vararg_buffer986 = 0, $vararg_buffer992 = 0, $vararg_buffer996 = 0, dest = 0, sp = 0, stop = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 4752 | 0;
$vararg_buffer1196 = sp + 4328 | 0;
$vararg_buffer1192 = sp + 4320 | 0;
$vararg_buffer1180 = sp + 4280 | 0;
$vararg_buffer1174 = sp + 4264 | 0;
$vararg_buffer1168 = sp + 4248 | 0;
$vararg_buffer1164 = sp + 4240 | 0;
$vararg_buffer1156 = sp + 4216 | 0;
$vararg_buffer1122 = sp + 4088 | 0;
$vararg_buffer1108 = sp + 4040 | 0;
$vararg_buffer1102 = sp + 4024 | 0;
$vararg_buffer1096 = sp + 4008 | 0;
$vararg_buffer1016 = sp + 3696 | 0;
$vararg_buffer1012 = sp + 3688 | 0;
$vararg_buffer1000 = sp + 3648 | 0;
$vararg_buffer996 = sp + 3640 | 0;
$vararg_buffer992 = sp + 3632 | 0;
$vararg_buffer986 = sp + 3616 | 0;
$vararg_buffer944 = sp + 3456 | 0;
$vararg_buffer940 = sp + 3448 | 0;
$vararg_buffer932 = sp + 3424 | 0;
$vararg_buffer926 = sp + 3408 | 0;
$vararg_buffer922 = sp + 3400 | 0;
$vararg_buffer910 = sp + 3360 | 0;
$vararg_buffer892 = sp + 3296 | 0;
$vararg_buffer888 = sp + 3288 | 0;
$vararg_buffer884 = sp + 3280 | 0;
$vararg_buffer870 = sp + 3232 | 0;
$vararg_buffer858 = sp + 3192 | 0;
$vararg_buffer842 = sp + 3136 | 0;
$vararg_buffer830 = sp + 3096 | 0;
$vararg_buffer818 = sp + 3056 | 0;
$vararg_buffer806 = sp + 3016 | 0;
$vararg_buffer796 = sp + 2984 | 0;
$vararg_buffer792 = sp + 2976 | 0;
$vararg_buffer782 = sp + 2944 | 0;
$vararg_buffer754 = sp + 2840 | 0;
$vararg_buffer644 = sp + 2408 | 0;
$vararg_buffer638 = sp + 2392 | 0;
$vararg_buffer632 = sp + 2376 | 0;
$vararg_buffer618 = sp + 2328 | 0;
$vararg_buffer592 = sp + 2232 | 0;
$vararg_buffer580 = sp + 2192 | 0;
$vararg_buffer564 = sp + 2136 | 0;
$vararg_buffer550 = sp + 2088 | 0;
$vararg_buffer544 = sp + 2072 | 0;
$vararg_buffer530 = sp + 2024 | 0;
$vararg_buffer508 = sp + 1944 | 0;
$vararg_buffer486 = sp + 1864 | 0;
$vararg_buffer476 = sp + 1832 | 0;
$vararg_buffer386 = sp + 1480 | 0;
$vararg_buffer378 = sp + 1456 | 0;
$vararg_buffer362 = sp + 1344 | 0;
$vararg_buffer338 = sp + 1256 | 0;
$vararg_buffer310 = sp + 1152 | 0;
$vararg_buffer192 = sp + 688 | 0;
$vararg_buffer104 = sp + 344 | 0;
$vararg_buffer98 = sp + 328 | 0;
$vararg_buffer92 = sp + 312 | 0;
$vararg_buffer86 = sp + 296 | 0;
$vararg_buffer74 = sp + 256 | 0;
$vararg_buffer56 = sp + 192 | 0;
$vararg_buffer46 = sp + 160 | 0;
$vararg_buffer24 = sp + 80 | 0;
$vararg_buffer18 = sp + 64 | 0;
$vararg_buffer12 = sp + 48 | 0;
$vararg_buffer = sp;
$0 = __Znwj(16) | 0;
HEAP32[$0 + 4 >> 2] = 10;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[17837] = $0;
HEAP32[17839] = $0;
$4 = __Znwj(16) | 0;
HEAP32[$4 + 4 >> 2] = 10;
HEAP32[$4 + 12 >> 2] = 0;
HEAP32[$4 >> 2] = 0;
HEAP32[$4 + 8 >> 2] = 0;
HEAP32[17838] = $4;
HEAP32[17840] = $4;
HEAP32[$vararg_buffer >> 2] = 1;
HEAP32[$vararg_buffer + 4 >> 2] = 50455;
HEAP32[$vararg_buffer + 8 >> 2] = 2;
HEAP32[$vararg_buffer + 12 >> 2] = 50466;
HEAP32[$vararg_buffer + 16 >> 2] = 3;
HEAP32[$vararg_buffer + 20 >> 2] = 57777;
HEAP32[$vararg_buffer + 24 >> 2] = 4;
HEAP32[$vararg_buffer + 28 >> 2] = 50486;
HEAP32[$vararg_buffer + 32 >> 2] = 5;
HEAP32[$vararg_buffer + 36 >> 2] = 50497;
HEAP32[$vararg_buffer + 40 >> 2] = 6;
HEAP32[$vararg_buffer + 44 >> 2] = 0;
$8 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 57271, $vararg_buffer) | 0;
HEAP32[17756] = $8;
HEAP32[$vararg_buffer12 >> 2] = 1;
HEAP32[$vararg_buffer12 + 4 >> 2] = 50528;
HEAP32[$vararg_buffer12 + 8 >> 2] = 2;
HEAP32[$vararg_buffer12 + 12 >> 2] = 0;
$9 = __ZN21InvertibleStringArray19NewInvertibleArrayHEPKcz(50517, $vararg_buffer12) | 0;
HEAP32[17759] = $9;
HEAP32[$vararg_buffer18 >> 2] = 1;
HEAP32[$vararg_buffer18 + 4 >> 2] = 50546;
HEAP32[$vararg_buffer18 + 8 >> 2] = 2;
HEAP32[$vararg_buffer18 + 12 >> 2] = 0;
$10 = __ZN21InvertibleStringArray19NewInvertibleArrayHEPKcz(50539, $vararg_buffer18) | 0;
HEAP32[17760] = $10;
HEAP32[$vararg_buffer24 >> 2] = 50551;
HEAP32[$vararg_buffer24 + 4 >> 2] = 4;
HEAP32[$vararg_buffer24 + 8 >> 2] = 50561;
HEAP32[$vararg_buffer24 + 12 >> 2] = 5;
HEAP32[$vararg_buffer24 + 16 >> 2] = 50566;
HEAP32[$vararg_buffer24 + 20 >> 2] = 6;
HEAP32[$vararg_buffer24 + 24 >> 2] = 50571;
HEAP32[$vararg_buffer24 + 28 >> 2] = 7;
HEAP32[$vararg_buffer24 + 32 >> 2] = 50577;
HEAP32[$vararg_buffer24 + 36 >> 2] = 8;
HEAP32[$vararg_buffer24 + 40 >> 2] = 50582;
HEAP32[$vararg_buffer24 + 44 >> 2] = 1;
HEAP32[$vararg_buffer24 + 48 >> 2] = 50587;
HEAP32[$vararg_buffer24 + 52 >> 2] = 9;
HEAP32[$vararg_buffer24 + 56 >> 2] = 50591;
HEAP32[$vararg_buffer24 + 60 >> 2] = 10;
HEAP32[$vararg_buffer24 + 64 >> 2] = 50603;
HEAP32[$vararg_buffer24 + 68 >> 2] = 11;
HEAP32[$vararg_buffer24 + 72 >> 2] = 57284;
HEAP32[$vararg_buffer24 + 76 >> 2] = 0;
$11 = __ZN21InvertibleStringArray19NewInvertibleArrayAEssz(0, 3, $vararg_buffer24) | 0;
HEAP32[17761] = $11;
HEAP32[$vararg_buffer46 >> 2] = 1;
HEAP32[$vararg_buffer46 + 4 >> 2] = 50625;
HEAP32[$vararg_buffer46 + 8 >> 2] = 2;
HEAP32[$vararg_buffer46 + 12 >> 2] = 50631;
HEAP32[$vararg_buffer46 + 16 >> 2] = 3;
HEAP32[$vararg_buffer46 + 20 >> 2] = 50638;
HEAP32[$vararg_buffer46 + 24 >> 2] = 4;
HEAP32[$vararg_buffer46 + 28 >> 2] = 0;
$12 = __ZN21InvertibleStringArray19NewInvertibleArrayHEPKcz(50615, $vararg_buffer46) | 0;
HEAP32[17762] = $12;
HEAP32[$vararg_buffer56 >> 2] = 1;
HEAP32[$vararg_buffer56 + 4 >> 2] = 50652;
HEAP32[$vararg_buffer56 + 8 >> 2] = 2;
HEAP32[$vararg_buffer56 + 12 >> 2] = 50670;
HEAP32[$vararg_buffer56 + 16 >> 2] = 3;
HEAP32[$vararg_buffer56 + 20 >> 2] = 50678;
HEAP32[$vararg_buffer56 + 24 >> 2] = 7;
HEAP32[$vararg_buffer56 + 28 >> 2] = 50689;
HEAP32[$vararg_buffer56 + 32 >> 2] = 5;
HEAP32[$vararg_buffer56 + 36 >> 2] = 50698;
HEAP32[$vararg_buffer56 + 40 >> 2] = 6;
HEAP32[$vararg_buffer56 + 44 >> 2] = 50715;
HEAP32[$vararg_buffer56 + 48 >> 2] = 4;
HEAP32[$vararg_buffer56 + 52 >> 2] = 50723;
HEAP32[$vararg_buffer56 + 56 >> 2] = 8;
HEAP32[$vararg_buffer56 + 60 >> 2] = 0;
$13 = __ZN21InvertibleStringArray19NewInvertibleArrayHEPKcz(50642, $vararg_buffer56) | 0;
HEAP32[17763] = $13;
HEAP32[$vararg_buffer74 >> 2] = 1;
HEAP32[$vararg_buffer74 + 4 >> 2] = 50736;
HEAP32[$vararg_buffer74 + 8 >> 2] = 2;
HEAP32[$vararg_buffer74 + 12 >> 2] = 50745;
HEAP32[$vararg_buffer74 + 16 >> 2] = 3;
HEAP32[$vararg_buffer74 + 20 >> 2] = 50754;
HEAP32[$vararg_buffer74 + 24 >> 2] = 4;
HEAP32[$vararg_buffer74 + 28 >> 2] = 50761;
HEAP32[$vararg_buffer74 + 32 >> 2] = 5;
HEAP32[$vararg_buffer74 + 36 >> 2] = 0;
$14 = __ZN21InvertibleStringArray19NewInvertibleArrayHEPKcz(50728, $vararg_buffer74) | 0;
HEAP32[17764] = $14;
HEAP32[$vararg_buffer86 >> 2] = 1;
HEAP32[$vararg_buffer86 + 4 >> 2] = 50777;
HEAP32[$vararg_buffer86 + 8 >> 2] = 2;
HEAP32[$vararg_buffer86 + 12 >> 2] = 0;
$15 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 50769, $vararg_buffer86) | 0;
HEAP32[17765] = $15;
HEAP32[$vararg_buffer92 >> 2] = 1;
HEAP32[$vararg_buffer92 + 4 >> 2] = 50798;
HEAP32[$vararg_buffer92 + 8 >> 2] = 2;
HEAP32[$vararg_buffer92 + 12 >> 2] = 0;
$16 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 50785, $vararg_buffer92) | 0;
HEAP32[17768] = $16;
HEAP32[$vararg_buffer98 >> 2] = 1;
HEAP32[$vararg_buffer98 + 4 >> 2] = 50832;
HEAP32[$vararg_buffer98 + 8 >> 2] = 2;
HEAP32[$vararg_buffer98 + 12 >> 2] = 0;
$17 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 50819, $vararg_buffer98) | 0;
HEAP32[17769] = $17;
HEAP32[$vararg_buffer104 >> 2] = 2;
HEAP32[$vararg_buffer104 + 4 >> 2] = 50850;
HEAP32[$vararg_buffer104 + 8 >> 2] = 1;
HEAP32[$vararg_buffer104 + 12 >> 2] = 50859;
HEAP32[$vararg_buffer104 + 16 >> 2] = 7;
HEAP32[$vararg_buffer104 + 20 >> 2] = 50870;
HEAP32[$vararg_buffer104 + 24 >> 2] = 6;
HEAP32[$vararg_buffer104 + 28 >> 2] = 50888;
HEAP32[$vararg_buffer104 + 32 >> 2] = 8;
HEAP32[$vararg_buffer104 + 36 >> 2] = 50906;
HEAP32[$vararg_buffer104 + 40 >> 2] = 9;
HEAP32[$vararg_buffer104 + 44 >> 2] = 50913;
HEAP32[$vararg_buffer104 + 48 >> 2] = 5;
HEAP32[$vararg_buffer104 + 52 >> 2] = 50924;
HEAP32[$vararg_buffer104 + 56 >> 2] = 16;
HEAP32[$vararg_buffer104 + 60 >> 2] = 50938;
HEAP32[$vararg_buffer104 + 64 >> 2] = 15;
HEAP32[$vararg_buffer104 + 68 >> 2] = 50947;
HEAP32[$vararg_buffer104 + 72 >> 2] = 17;
HEAP32[$vararg_buffer104 + 76 >> 2] = 50967;
HEAP32[$vararg_buffer104 + 80 >> 2] = 18;
HEAP32[$vararg_buffer104 + 84 >> 2] = 50992;
HEAP32[$vararg_buffer104 + 88 >> 2] = 19;
HEAP32[$vararg_buffer104 + 92 >> 2] = 51013;
HEAP32[$vararg_buffer104 + 96 >> 2] = 20;
HEAP32[$vararg_buffer104 + 100 >> 2] = 51028;
HEAP32[$vararg_buffer104 + 104 >> 2] = 21;
HEAP32[$vararg_buffer104 + 108 >> 2] = 51047;
HEAP32[$vararg_buffer104 + 112 >> 2] = 22;
HEAP32[$vararg_buffer104 + 116 >> 2] = 51071;
HEAP32[$vararg_buffer104 + 120 >> 2] = 23;
HEAP32[$vararg_buffer104 + 124 >> 2] = 51083;
HEAP32[$vararg_buffer104 + 128 >> 2] = 24;
HEAP32[$vararg_buffer104 + 132 >> 2] = 51093;
HEAP32[$vararg_buffer104 + 136 >> 2] = 26;
HEAP32[$vararg_buffer104 + 140 >> 2] = 51098;
HEAP32[$vararg_buffer104 + 144 >> 2] = 27;
HEAP32[$vararg_buffer104 + 148 >> 2] = 51116;
HEAP32[$vararg_buffer104 + 152 >> 2] = 28;
HEAP32[$vararg_buffer104 + 156 >> 2] = 51129;
HEAP32[$vararg_buffer104 + 160 >> 2] = 29;
HEAP32[$vararg_buffer104 + 164 >> 2] = 51150;
HEAP32[$vararg_buffer104 + 168 >> 2] = 25;
HEAP32[$vararg_buffer104 + 172 >> 2] = 51167;
HEAP32[$vararg_buffer104 + 176 >> 2] = 30;
HEAP32[$vararg_buffer104 + 180 >> 2] = 51179;
HEAP32[$vararg_buffer104 + 184 >> 2] = 33;
HEAP32[$vararg_buffer104 + 188 >> 2] = 51183;
HEAP32[$vararg_buffer104 + 192 >> 2] = 34;
HEAP32[$vararg_buffer104 + 196 >> 2] = 51189;
HEAP32[$vararg_buffer104 + 200 >> 2] = 31;
HEAP32[$vararg_buffer104 + 204 >> 2] = 51205;
HEAP32[$vararg_buffer104 + 208 >> 2] = 32;
HEAP32[$vararg_buffer104 + 212 >> 2] = 51218;
HEAP32[$vararg_buffer104 + 216 >> 2] = 35;
HEAP32[$vararg_buffer104 + 220 >> 2] = 51223;
HEAP32[$vararg_buffer104 + 224 >> 2] = 36;
HEAP32[$vararg_buffer104 + 228 >> 2] = 51229;
HEAP32[$vararg_buffer104 + 232 >> 2] = 37;
HEAP32[$vararg_buffer104 + 236 >> 2] = 51246;
HEAP32[$vararg_buffer104 + 240 >> 2] = 38;
HEAP32[$vararg_buffer104 + 244 >> 2] = 49714;
HEAP32[$vararg_buffer104 + 248 >> 2] = 39;
HEAP32[$vararg_buffer104 + 252 >> 2] = 51252;
HEAP32[$vararg_buffer104 + 256 >> 2] = 40;
HEAP32[$vararg_buffer104 + 260 >> 2] = 51263;
HEAP32[$vararg_buffer104 + 264 >> 2] = 41;
HEAP32[$vararg_buffer104 + 268 >> 2] = 51275;
HEAP32[$vararg_buffer104 + 272 >> 2] = 42;
HEAP32[$vararg_buffer104 + 276 >> 2] = 50561;
HEAP32[$vararg_buffer104 + 280 >> 2] = 10;
HEAP32[$vararg_buffer104 + 284 >> 2] = 50566;
HEAP32[$vararg_buffer104 + 288 >> 2] = 11;
HEAP32[$vararg_buffer104 + 292 >> 2] = 50571;
HEAP32[$vararg_buffer104 + 296 >> 2] = 12;
HEAP32[$vararg_buffer104 + 300 >> 2] = 50577;
HEAP32[$vararg_buffer104 + 304 >> 2] = 13;
HEAP32[$vararg_buffer104 + 308 >> 2] = 50582;
HEAP32[$vararg_buffer104 + 312 >> 2] = 14;
HEAP32[$vararg_buffer104 + 316 >> 2] = 51282;
HEAP32[$vararg_buffer104 + 320 >> 2] = 43;
HEAP32[$vararg_buffer104 + 324 >> 2] = 51291;
HEAP32[$vararg_buffer104 + 328 >> 2] = 44;
HEAP32[$vararg_buffer104 + 332 >> 2] = 51301;
HEAP32[$vararg_buffer104 + 336 >> 2] = 45;
HEAP32[$vararg_buffer104 + 340 >> 2] = 0;
$18 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 50844, $vararg_buffer104) | 0;
HEAP32[17758] = $18;
HEAP32[$vararg_buffer192 >> 2] = 1;
HEAP32[$vararg_buffer192 + 4 >> 2] = 57271;
HEAP32[$vararg_buffer192 + 8 >> 2] = 2;
HEAP32[$vararg_buffer192 + 12 >> 2] = 50455;
HEAP32[$vararg_buffer192 + 16 >> 2] = 3;
HEAP32[$vararg_buffer192 + 20 >> 2] = 50466;
HEAP32[$vararg_buffer192 + 24 >> 2] = 4;
HEAP32[$vararg_buffer192 + 28 >> 2] = 57777;
HEAP32[$vararg_buffer192 + 32 >> 2] = 5;
HEAP32[$vararg_buffer192 + 36 >> 2] = 50486;
HEAP32[$vararg_buffer192 + 40 >> 2] = 6;
HEAP32[$vararg_buffer192 + 44 >> 2] = 50497;
HEAP32[$vararg_buffer192 + 48 >> 2] = 7;
HEAP32[$vararg_buffer192 + 52 >> 2] = 51313;
HEAP32[$vararg_buffer192 + 56 >> 2] = 8;
HEAP32[$vararg_buffer192 + 60 >> 2] = 51325;
HEAP32[$vararg_buffer192 + 64 >> 2] = 9;
HEAP32[$vararg_buffer192 + 68 >> 2] = 51336;
HEAP32[$vararg_buffer192 + 72 >> 2] = 10;
HEAP32[$vararg_buffer192 + 76 >> 2] = 51353;
HEAP32[$vararg_buffer192 + 80 >> 2] = 11;
HEAP32[$vararg_buffer192 + 84 >> 2] = 51362;
HEAP32[$vararg_buffer192 + 88 >> 2] = 12;
HEAP32[$vararg_buffer192 + 92 >> 2] = 51376;
HEAP32[$vararg_buffer192 + 96 >> 2] = 13;
HEAP32[$vararg_buffer192 + 100 >> 2] = 51393;
HEAP32[$vararg_buffer192 + 104 >> 2] = 14;
HEAP32[$vararg_buffer192 + 108 >> 2] = 51405;
HEAP32[$vararg_buffer192 + 112 >> 2] = 15;
HEAP32[$vararg_buffer192 + 116 >> 2] = 51420;
HEAP32[$vararg_buffer192 + 120 >> 2] = 16;
HEAP32[$vararg_buffer192 + 124 >> 2] = 51438;
HEAP32[$vararg_buffer192 + 128 >> 2] = 18;
HEAP32[$vararg_buffer192 + 132 >> 2] = 51451;
HEAP32[$vararg_buffer192 + 136 >> 2] = 19;
HEAP32[$vararg_buffer192 + 140 >> 2] = 51462;
HEAP32[$vararg_buffer192 + 144 >> 2] = 20;
HEAP32[$vararg_buffer192 + 148 >> 2] = 51473;
HEAP32[$vararg_buffer192 + 152 >> 2] = 21;
HEAP32[$vararg_buffer192 + 156 >> 2] = 51484;
HEAP32[$vararg_buffer192 + 160 >> 2] = 22;
HEAP32[$vararg_buffer192 + 164 >> 2] = 51495;
HEAP32[$vararg_buffer192 + 168 >> 2] = 17;
HEAP32[$vararg_buffer192 + 172 >> 2] = 51511;
HEAP32[$vararg_buffer192 + 176 >> 2] = 23;
HEAP32[$vararg_buffer192 + 180 >> 2] = 51526;
HEAP32[$vararg_buffer192 + 184 >> 2] = 24;
HEAP32[$vararg_buffer192 + 188 >> 2] = 51541;
HEAP32[$vararg_buffer192 + 192 >> 2] = 25;
HEAP32[$vararg_buffer192 + 196 >> 2] = 51553;
HEAP32[$vararg_buffer192 + 200 >> 2] = 26;
HEAP32[$vararg_buffer192 + 204 >> 2] = 51565;
HEAP32[$vararg_buffer192 + 208 >> 2] = 27;
HEAP32[$vararg_buffer192 + 212 >> 2] = 51576;
HEAP32[$vararg_buffer192 + 216 >> 2] = 28;
HEAP32[$vararg_buffer192 + 220 >> 2] = 51590;
HEAP32[$vararg_buffer192 + 224 >> 2] = 29;
HEAP32[$vararg_buffer192 + 228 >> 2] = 51604;
HEAP32[$vararg_buffer192 + 232 >> 2] = 30;
HEAP32[$vararg_buffer192 + 236 >> 2] = 51613;
HEAP32[$vararg_buffer192 + 240 >> 2] = 31;
HEAP32[$vararg_buffer192 + 244 >> 2] = 51628;
HEAP32[$vararg_buffer192 + 248 >> 2] = 32;
HEAP32[$vararg_buffer192 + 252 >> 2] = 51642;
HEAP32[$vararg_buffer192 + 256 >> 2] = 39;
HEAP32[$vararg_buffer192 + 260 >> 2] = 51655;
HEAP32[$vararg_buffer192 + 264 >> 2] = 46;
HEAP32[$vararg_buffer192 + 268 >> 2] = 51673;
HEAP32[$vararg_buffer192 + 272 >> 2] = 33;
HEAP32[$vararg_buffer192 + 276 >> 2] = 51683;
HEAP32[$vararg_buffer192 + 280 >> 2] = 40;
HEAP32[$vararg_buffer192 + 284 >> 2] = 51692;
HEAP32[$vararg_buffer192 + 288 >> 2] = 47;
HEAP32[$vararg_buffer192 + 292 >> 2] = 51706;
HEAP32[$vararg_buffer192 + 296 >> 2] = 34;
HEAP32[$vararg_buffer192 + 300 >> 2] = 51716;
HEAP32[$vararg_buffer192 + 304 >> 2] = 41;
HEAP32[$vararg_buffer192 + 308 >> 2] = 51725;
HEAP32[$vararg_buffer192 + 312 >> 2] = 48;
HEAP32[$vararg_buffer192 + 316 >> 2] = 51739;
HEAP32[$vararg_buffer192 + 320 >> 2] = 35;
HEAP32[$vararg_buffer192 + 324 >> 2] = 51752;
HEAP32[$vararg_buffer192 + 328 >> 2] = 42;
HEAP32[$vararg_buffer192 + 332 >> 2] = 51760;
HEAP32[$vararg_buffer192 + 336 >> 2] = 49;
HEAP32[$vararg_buffer192 + 340 >> 2] = 51769;
HEAP32[$vararg_buffer192 + 344 >> 2] = 50;
HEAP32[$vararg_buffer192 + 348 >> 2] = 51779;
HEAP32[$vararg_buffer192 + 352 >> 2] = 51;
HEAP32[$vararg_buffer192 + 356 >> 2] = 51788;
HEAP32[$vararg_buffer192 + 360 >> 2] = 36;
HEAP32[$vararg_buffer192 + 364 >> 2] = 51804;
HEAP32[$vararg_buffer192 + 368 >> 2] = 43;
HEAP32[$vararg_buffer192 + 372 >> 2] = 51820;
HEAP32[$vararg_buffer192 + 376 >> 2] = 52;
HEAP32[$vararg_buffer192 + 380 >> 2] = 51825;
HEAP32[$vararg_buffer192 + 384 >> 2] = 37;
HEAP32[$vararg_buffer192 + 388 >> 2] = 51839;
HEAP32[$vararg_buffer192 + 392 >> 2] = 44;
HEAP32[$vararg_buffer192 + 396 >> 2] = 51852;
HEAP32[$vararg_buffer192 + 400 >> 2] = 53;
HEAP32[$vararg_buffer192 + 404 >> 2] = 51866;
HEAP32[$vararg_buffer192 + 408 >> 2] = 54;
HEAP32[$vararg_buffer192 + 412 >> 2] = 51880;
HEAP32[$vararg_buffer192 + 416 >> 2] = 55;
HEAP32[$vararg_buffer192 + 420 >> 2] = 51891;
HEAP32[$vararg_buffer192 + 424 >> 2] = 38;
HEAP32[$vararg_buffer192 + 428 >> 2] = 51902;
HEAP32[$vararg_buffer192 + 432 >> 2] = 45;
HEAP32[$vararg_buffer192 + 436 >> 2] = 51912;
HEAP32[$vararg_buffer192 + 440 >> 2] = 58;
HEAP32[$vararg_buffer192 + 444 >> 2] = 51927;
HEAP32[$vararg_buffer192 + 448 >> 2] = 56;
HEAP32[$vararg_buffer192 + 452 >> 2] = 51935;
HEAP32[$vararg_buffer192 + 456 >> 2] = 57;
HEAP32[$vararg_buffer192 + 460 >> 2] = 0;
$19 = __ZN21InvertibleStringArray19NewInvertibleArrayHEPKcz(51307, $vararg_buffer192) | 0;
HEAP32[17757] = $19;
$20 = _malloc(13) | 0;
HEAP32[17187] = $20;
HEAP32[$vararg_buffer310 >> 2] = 0;
HEAP32[$vararg_buffer310 + 4 >> 2] = 1;
HEAP32[$vararg_buffer310 + 8 >> 2] = 1;
HEAP32[$vararg_buffer310 + 12 >> 2] = 2;
HEAP32[$vararg_buffer310 + 16 >> 2] = 1;
HEAP32[$vararg_buffer310 + 20 >> 2] = 3;
HEAP32[$vararg_buffer310 + 24 >> 2] = 0;
HEAP32[$vararg_buffer310 + 28 >> 2] = 4;
HEAP32[$vararg_buffer310 + 32 >> 2] = 0;
HEAP32[$vararg_buffer310 + 36 >> 2] = 5;
HEAP32[$vararg_buffer310 + 40 >> 2] = 0;
HEAP32[$vararg_buffer310 + 44 >> 2] = 6;
HEAP32[$vararg_buffer310 + 48 >> 2] = 1;
HEAP32[$vararg_buffer310 + 52 >> 2] = 8;
HEAP32[$vararg_buffer310 + 56 >> 2] = 0;
HEAP32[$vararg_buffer310 + 60 >> 2] = 7;
HEAP32[$vararg_buffer310 + 64 >> 2] = 0;
HEAP32[$vararg_buffer310 + 68 >> 2] = 9;
HEAP32[$vararg_buffer310 + 72 >> 2] = 0;
HEAP32[$vararg_buffer310 + 76 >> 2] = 11;
HEAP32[$vararg_buffer310 + 80 >> 2] = 0;
HEAP32[$vararg_buffer310 + 84 >> 2] = 10;
HEAP32[$vararg_buffer310 + 88 >> 2] = 0;
HEAP32[$vararg_buffer310 + 92 >> 2] = 12;
HEAP32[$vararg_buffer310 + 96 >> 2] = 0;
HEAP32[$vararg_buffer310 + 100 >> 2] = -1;
__Z9SetArrayXIbEvPT_sz($20, 0, $vararg_buffer310);
$21 = _malloc(52) | 0;
HEAP32[17188] = $21;
HEAP32[$vararg_buffer338 >> 2] = 0;
HEAP32[$vararg_buffer338 + 4 >> 2] = 1;
HEAP32[$vararg_buffer338 + 8 >> 2] = 3;
HEAP32[$vararg_buffer338 + 12 >> 2] = 2;
HEAP32[$vararg_buffer338 + 16 >> 2] = 11;
HEAP32[$vararg_buffer338 + 20 >> 2] = 3;
HEAP32[$vararg_buffer338 + 24 >> 2] = 11;
HEAP32[$vararg_buffer338 + 28 >> 2] = 4;
HEAP32[$vararg_buffer338 + 32 >> 2] = 11;
HEAP32[$vararg_buffer338 + 36 >> 2] = 5;
HEAP32[$vararg_buffer338 + 40 >> 2] = 11;
HEAP32[$vararg_buffer338 + 44 >> 2] = 6;
HEAP32[$vararg_buffer338 + 48 >> 2] = 11;
HEAP32[$vararg_buffer338 + 52 >> 2] = 7;
HEAP32[$vararg_buffer338 + 56 >> 2] = 11;
HEAP32[$vararg_buffer338 + 60 >> 2] = 8;
HEAP32[$vararg_buffer338 + 64 >> 2] = 11;
HEAP32[$vararg_buffer338 + 68 >> 2] = 9;
HEAP32[$vararg_buffer338 + 72 >> 2] = 3;
HEAP32[$vararg_buffer338 + 76 >> 2] = 10;
HEAP32[$vararg_buffer338 + 80 >> 2] = 11;
HEAP32[$vararg_buffer338 + 84 >> 2] = -1;
__Z9SetArrayXI6MannerEvPT_sz($21, 0, $vararg_buffer338);
$22 = _malloc(52) | 0;
HEAP32[17189] = $22;
$27 = ((__Z10MakeDigitsPKc(51948) | 0) & 31) << 15 | 1048583;
$32 = ((__Z10MakeDigitsPKc(51951) | 0) & 31) << 15 | 1048583;
$37 = ((__Z10MakeDigitsPKc(51951) | 0) & 31) << 15 | 1056776;
$38 = HEAP32[17189] | 0;
HEAP16[$38 >> 1] = HEAP16[33214] | 0;
HEAP8[$38 + 2 >> 0] = HEAP8[66430] | 0;
$39 = HEAP32[17189] | 0;
$$sroa$0$0$$sroa_idx16 = $39 + 4 | 0;
HEAP16[$$sroa$0$0$$sroa_idx16 >> 1] = 1;
HEAP8[$$sroa$0$0$$sroa_idx16 + 2 >> 0] = 16;
$$sroa$0$0$$sroa_idx13 = $39 + 8 | 0;
HEAP16[$$sroa$0$0$$sroa_idx13 >> 1] = 1;
HEAP8[$$sroa$0$0$$sroa_idx13 + 2 >> 0] = 16;
$$sroa$045$0$$sroa_idx = $39 + 12 | 0;
HEAP16[$$sroa$045$0$$sroa_idx >> 1] = 7;
HEAP8[$$sroa$045$0$$sroa_idx + 2 >> 0] = 17;
$$sroa$039$0$$sroa_idx42 = $39 + 16 | 0;
HEAP16[$$sroa$039$0$$sroa_idx42 >> 1] = $27;
HEAP8[$$sroa$039$0$$sroa_idx42 + 2 >> 0] = $27 >>> 16;
$$sroa$039$0$$sroa_idx = $39 + 20 | 0;
HEAP16[$$sroa$039$0$$sroa_idx >> 1] = $27;
HEAP8[$$sroa$039$0$$sroa_idx + 2 >> 0] = $27 >>> 16;
$$sroa$0$0$$sroa_idx = $39 + 24 | 0;
HEAP16[$$sroa$0$0$$sroa_idx >> 1] = 1;
HEAP8[$$sroa$0$0$$sroa_idx + 2 >> 0] = 16;
$$sroa$019$0$$sroa_idx25 = $39 + 32 | 0;
HEAP16[$$sroa$019$0$$sroa_idx25 >> 1] = $37;
HEAP8[$$sroa$019$0$$sroa_idx25 + 2 >> 0] = $37 >>> 16;
$$sroa$019$0$$sroa_idx22 = $39 + 28 | 0;
HEAP16[$$sroa$019$0$$sroa_idx22 >> 1] = $37;
HEAP8[$$sroa$019$0$$sroa_idx22 + 2 >> 0] = $37 >>> 16;
$$sroa$019$0$$sroa_idx = $39 + 36 | 0;
HEAP16[$$sroa$019$0$$sroa_idx >> 1] = $37;
HEAP8[$$sroa$019$0$$sroa_idx + 2 >> 0] = $37 >>> 16;
$$sroa$029$0$$sroa_idx35 = $39 + 44 | 0;
HEAP16[$$sroa$029$0$$sroa_idx35 >> 1] = $32;
HEAP8[$$sroa$029$0$$sroa_idx35 + 2 >> 0] = $32 >>> 16;
$$sroa$029$0$$sroa_idx32 = $39 + 40 | 0;
HEAP16[$$sroa$029$0$$sroa_idx32 >> 1] = $32;
HEAP8[$$sroa$029$0$$sroa_idx32 + 2 >> 0] = $32 >>> 16;
$$sroa$029$0$$sroa_idx = $39 + 48 | 0;
HEAP16[$$sroa$029$0$$sroa_idx >> 1] = $32;
HEAP8[$$sroa$029$0$$sroa_idx + 2 >> 0] = $32 >>> 16;
$40 = _malloc(28) | 0;
HEAP32[17190] = $40;
HEAPF64[$vararg_buffer362 >> 3] = 0.0;
HEAP32[$vararg_buffer362 + 8 >> 2] = 5;
HEAPF64[$vararg_buffer362 + 16 >> 3] = 0.0;
HEAP32[$vararg_buffer362 + 24 >> 2] = 6;
HEAPF64[$vararg_buffer362 + 32 >> 3] = 0.0;
HEAP32[$vararg_buffer362 + 40 >> 2] = 1;
HEAPF64[$vararg_buffer362 + 48 >> 3] = 0.0;
HEAP32[$vararg_buffer362 + 56 >> 2] = 2;
HEAPF64[$vararg_buffer362 + 64 >> 3] = .5;
HEAP32[$vararg_buffer362 + 72 >> 2] = 3;
HEAPF64[$vararg_buffer362 + 80 >> 3] = 1.0;
HEAP32[$vararg_buffer362 + 88 >> 2] = 4;
HEAPF64[$vararg_buffer362 + 96 >> 3] = 2.0;
HEAP32[$vararg_buffer362 + 104 >> 2] = -1;
__Z12SetREALArrayPfiz($40, 0, $vararg_buffer362);
HEAP32[$vararg_buffer378 >> 2] = 1;
HEAP32[$vararg_buffer378 + 4 >> 2] = 51376;
HEAP32[$vararg_buffer378 + 8 >> 2] = 2;
HEAP32[$vararg_buffer378 + 12 >> 2] = 51362;
HEAP32[$vararg_buffer378 + 16 >> 2] = 3;
HEAP32[$vararg_buffer378 + 20 >> 2] = 0;
$41 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 51353, $vararg_buffer378) | 0;
HEAP32[17191] = $41;
HEAP32[$vararg_buffer386 >> 2] = 6;
HEAP32[$vararg_buffer386 + 4 >> 2] = 51964;
HEAP32[$vararg_buffer386 + 8 >> 2] = 2;
HEAP32[$vararg_buffer386 + 12 >> 2] = 51974;
HEAP32[$vararg_buffer386 + 16 >> 2] = 1;
HEAP32[$vararg_buffer386 + 20 >> 2] = 51979;
HEAP32[$vararg_buffer386 + 24 >> 2] = 3;
HEAP32[$vararg_buffer386 + 28 >> 2] = 51988;
HEAP32[$vararg_buffer386 + 32 >> 2] = 4;
HEAP32[$vararg_buffer386 + 36 >> 2] = 51998;
HEAP32[$vararg_buffer386 + 40 >> 2] = 5;
HEAP32[$vararg_buffer386 + 44 >> 2] = 52008;
HEAP32[$vararg_buffer386 + 48 >> 2] = 7;
HEAP32[$vararg_buffer386 + 52 >> 2] = 52012;
HEAP32[$vararg_buffer386 + 56 >> 2] = 8;
HEAP32[$vararg_buffer386 + 60 >> 2] = 52017;
HEAP32[$vararg_buffer386 + 64 >> 2] = 9;
HEAP32[$vararg_buffer386 + 68 >> 2] = 52026;
HEAP32[$vararg_buffer386 + 72 >> 2] = 10;
HEAP32[$vararg_buffer386 + 76 >> 2] = 52031;
HEAP32[$vararg_buffer386 + 80 >> 2] = 11;
HEAP32[$vararg_buffer386 + 84 >> 2] = 52036;
HEAP32[$vararg_buffer386 + 88 >> 2] = 12;
HEAP32[$vararg_buffer386 + 92 >> 2] = 52045;
HEAP32[$vararg_buffer386 + 96 >> 2] = 13;
HEAP32[$vararg_buffer386 + 100 >> 2] = 52051;
HEAP32[$vararg_buffer386 + 104 >> 2] = 14;
HEAP32[$vararg_buffer386 + 108 >> 2] = 52063;
HEAP32[$vararg_buffer386 + 112 >> 2] = 15;
HEAP32[$vararg_buffer386 + 116 >> 2] = 52072;
HEAP32[$vararg_buffer386 + 120 >> 2] = 17;
HEAP32[$vararg_buffer386 + 124 >> 2] = 52077;
HEAP32[$vararg_buffer386 + 128 >> 2] = 18;
HEAP32[$vararg_buffer386 + 132 >> 2] = 52082;
HEAP32[$vararg_buffer386 + 136 >> 2] = 19;
HEAP32[$vararg_buffer386 + 140 >> 2] = 52094;
HEAP32[$vararg_buffer386 + 144 >> 2] = 20;
HEAP32[$vararg_buffer386 + 148 >> 2] = 52104;
HEAP32[$vararg_buffer386 + 152 >> 2] = 21;
HEAP32[$vararg_buffer386 + 156 >> 2] = 52110;
HEAP32[$vararg_buffer386 + 160 >> 2] = 22;
HEAP32[$vararg_buffer386 + 164 >> 2] = 52118;
HEAP32[$vararg_buffer386 + 168 >> 2] = 23;
HEAP32[$vararg_buffer386 + 172 >> 2] = 52131;
HEAP32[$vararg_buffer386 + 176 >> 2] = 24;
HEAP32[$vararg_buffer386 + 180 >> 2] = 52137;
HEAP32[$vararg_buffer386 + 184 >> 2] = 16;
HEAP32[$vararg_buffer386 + 188 >> 2] = 52145;
HEAP32[$vararg_buffer386 + 192 >> 2] = 25;
HEAP32[$vararg_buffer386 + 196 >> 2] = 52154;
HEAP32[$vararg_buffer386 + 200 >> 2] = 26;
HEAP32[$vararg_buffer386 + 204 >> 2] = 52163;
HEAP32[$vararg_buffer386 + 208 >> 2] = 27;
HEAP32[$vararg_buffer386 + 212 >> 2] = 52168;
HEAP32[$vararg_buffer386 + 216 >> 2] = 28;
HEAP32[$vararg_buffer386 + 220 >> 2] = 52180;
HEAP32[$vararg_buffer386 + 224 >> 2] = 29;
HEAP32[$vararg_buffer386 + 228 >> 2] = 51820;
HEAP32[$vararg_buffer386 + 232 >> 2] = 30;
HEAP32[$vararg_buffer386 + 236 >> 2] = 52192;
HEAP32[$vararg_buffer386 + 240 >> 2] = 31;
HEAP32[$vararg_buffer386 + 244 >> 2] = 52201;
HEAP32[$vararg_buffer386 + 248 >> 2] = 32;
HEAP32[$vararg_buffer386 + 252 >> 2] = 52206;
HEAP32[$vararg_buffer386 + 256 >> 2] = 33;
HEAP32[$vararg_buffer386 + 260 >> 2] = 52215;
HEAP32[$vararg_buffer386 + 264 >> 2] = 34;
HEAP32[$vararg_buffer386 + 268 >> 2] = 52224;
HEAP32[$vararg_buffer386 + 272 >> 2] = 35;
HEAP32[$vararg_buffer386 + 276 >> 2] = 52231;
HEAP32[$vararg_buffer386 + 280 >> 2] = 36;
HEAP32[$vararg_buffer386 + 284 >> 2] = 52237;
HEAP32[$vararg_buffer386 + 288 >> 2] = 37;
HEAP32[$vararg_buffer386 + 292 >> 2] = 52248;
HEAP32[$vararg_buffer386 + 296 >> 2] = 38;
HEAP32[$vararg_buffer386 + 300 >> 2] = 52259;
HEAP32[$vararg_buffer386 + 304 >> 2] = 39;
HEAP32[$vararg_buffer386 + 308 >> 2] = 52264;
HEAP32[$vararg_buffer386 + 312 >> 2] = 40;
HEAP32[$vararg_buffer386 + 316 >> 2] = 52274;
HEAP32[$vararg_buffer386 + 320 >> 2] = 41;
HEAP32[$vararg_buffer386 + 324 >> 2] = 52278;
HEAP32[$vararg_buffer386 + 328 >> 2] = 42;
HEAP32[$vararg_buffer386 + 332 >> 2] = 52286;
HEAP32[$vararg_buffer386 + 336 >> 2] = 43;
HEAP32[$vararg_buffer386 + 340 >> 2] = 52292;
HEAP32[$vararg_buffer386 + 344 >> 2] = 44;
HEAP32[$vararg_buffer386 + 348 >> 2] = 0;
$42 = __ZN21InvertibleStringArray19NewInvertibleArrayHEPKcz(51954, $vararg_buffer386) | 0;
HEAP32[17192] = $42;
HEAP32[$vararg_buffer476 >> 2] = 2;
HEAP32[$vararg_buffer476 + 4 >> 2] = 52308;
HEAP32[$vararg_buffer476 + 8 >> 2] = 1;
HEAP32[$vararg_buffer476 + 12 >> 2] = 52317;
HEAP32[$vararg_buffer476 + 16 >> 2] = 4;
HEAP32[$vararg_buffer476 + 20 >> 2] = 52329;
HEAP32[$vararg_buffer476 + 24 >> 2] = 3;
HEAP32[$vararg_buffer476 + 28 >> 2] = 0;
$43 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 52300, $vararg_buffer476) | 0;
HEAP32[17193] = $43;
HEAP32[$vararg_buffer486 >> 2] = 1;
HEAP32[$vararg_buffer486 + 4 >> 2] = 52348;
HEAP32[$vararg_buffer486 + 8 >> 2] = 2;
HEAP32[$vararg_buffer486 + 12 >> 2] = 52353;
HEAP32[$vararg_buffer486 + 16 >> 2] = 1;
HEAP32[$vararg_buffer486 + 20 >> 2] = 52360;
HEAP32[$vararg_buffer486 + 24 >> 2] = 2;
HEAP32[$vararg_buffer486 + 28 >> 2] = 52367;
HEAP32[$vararg_buffer486 + 32 >> 2] = 3;
HEAP32[$vararg_buffer486 + 36 >> 2] = 52374;
HEAP32[$vararg_buffer486 + 40 >> 2] = 4;
HEAP32[$vararg_buffer486 + 44 >> 2] = 52300;
HEAP32[$vararg_buffer486 + 48 >> 2] = 3;
HEAP32[$vararg_buffer486 + 52 >> 2] = 52308;
HEAP32[$vararg_buffer486 + 56 >> 2] = 4;
HEAP32[$vararg_buffer486 + 60 >> 2] = 52317;
HEAP32[$vararg_buffer486 + 64 >> 2] = 3;
HEAP32[$vararg_buffer486 + 68 >> 2] = 52329;
HEAP32[$vararg_buffer486 + 72 >> 2] = 4;
HEAP32[$vararg_buffer486 + 76 >> 2] = 0;
$44 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 52342, $vararg_buffer486) | 0;
HEAP32[17194] = $44;
HEAP32[$vararg_buffer508 >> 2] = 1;
HEAP32[$vararg_buffer508 + 4 >> 2] = 52348;
HEAP32[$vararg_buffer508 + 8 >> 2] = 2;
HEAP32[$vararg_buffer508 + 12 >> 2] = 52353;
HEAP32[$vararg_buffer508 + 16 >> 2] = 1;
HEAP32[$vararg_buffer508 + 20 >> 2] = 52360;
HEAP32[$vararg_buffer508 + 24 >> 2] = 2;
HEAP32[$vararg_buffer508 + 28 >> 2] = 52367;
HEAP32[$vararg_buffer508 + 32 >> 2] = 3;
HEAP32[$vararg_buffer508 + 36 >> 2] = 52374;
HEAP32[$vararg_buffer508 + 40 >> 2] = 4;
HEAP32[$vararg_buffer508 + 44 >> 2] = 52300;
HEAP32[$vararg_buffer508 + 48 >> 2] = 4;
HEAP32[$vararg_buffer508 + 52 >> 2] = 52308;
HEAP32[$vararg_buffer508 + 56 >> 2] = 3;
HEAP32[$vararg_buffer508 + 60 >> 2] = 52317;
HEAP32[$vararg_buffer508 + 64 >> 2] = 4;
HEAP32[$vararg_buffer508 + 68 >> 2] = 52329;
HEAP32[$vararg_buffer508 + 72 >> 2] = 3;
HEAP32[$vararg_buffer508 + 76 >> 2] = 0;
$45 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 52342, $vararg_buffer508) | 0;
HEAP32[17195] = $45;
$46 = _malloc(180) | 0;
HEAP32[17196] = $46;
_memset($46 | 0, 0, 136) | 0;
$48 = $46 + 28 | 0;
dest = $46 + 136 | 0;
stop = dest + 44 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[$48 >> 2] = 1;
HEAP32[$46 + 32 >> 2] = 2;
HEAP32[$46 + 36 >> 2] = 2;
HEAP32[$46 + 40 >> 2] = 2;
HEAP32[$vararg_buffer530 >> 2] = 5;
HEAP32[$vararg_buffer530 + 4 >> 2] = 51223;
HEAP32[$vararg_buffer530 + 8 >> 2] = 6;
HEAP32[$vararg_buffer530 + 12 >> 2] = 52390;
HEAP32[$vararg_buffer530 + 16 >> 2] = 1;
HEAP32[$vararg_buffer530 + 20 >> 2] = 52396;
HEAP32[$vararg_buffer530 + 24 >> 2] = 2;
HEAP32[$vararg_buffer530 + 28 >> 2] = 50631;
HEAP32[$vararg_buffer530 + 32 >> 2] = 3;
HEAP32[$vararg_buffer530 + 36 >> 2] = 52402;
HEAP32[$vararg_buffer530 + 40 >> 2] = 4;
HEAP32[$vararg_buffer530 + 44 >> 2] = 0;
$52 = __ZN21InvertibleStringArray19NewInvertibleArrayHEPKcz(52380, $vararg_buffer530) | 0;
HEAP32[17197] = $52;
HEAP32[$vararg_buffer544 >> 2] = 1;
HEAP32[$vararg_buffer544 + 4 >> 2] = 52419;
HEAP32[$vararg_buffer544 + 8 >> 2] = 0;
HEAP32[$vararg_buffer544 + 12 >> 2] = 0;
$53 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 52414, $vararg_buffer544) | 0;
HEAP32[17198] = $53;
HEAP32[$vararg_buffer550 >> 2] = 51526;
HEAP32[$vararg_buffer550 + 4 >> 2] = 51541;
HEAP32[$vararg_buffer550 + 8 >> 2] = 51553;
HEAP32[$vararg_buffer550 + 12 >> 2] = 51565;
HEAP32[$vararg_buffer550 + 16 >> 2] = 51576;
HEAP32[$vararg_buffer550 + 20 >> 2] = 51604;
HEAP32[$vararg_buffer550 + 24 >> 2] = 51451;
HEAP32[$vararg_buffer550 + 28 >> 2] = 51462;
HEAP32[$vararg_buffer550 + 32 >> 2] = 51438;
HEAP32[$vararg_buffer550 + 36 >> 2] = 51484;
HEAP32[$vararg_buffer550 + 40 >> 2] = 51473;
HEAP32[$vararg_buffer550 + 44 >> 2] = 0;
$54 = __ZN7HashAnyIPKciE7makeSetES1_z(51511, $vararg_buffer550) | 0;
HEAP32[17199] = $54;
HEAP32[$vararg_buffer564 >> 2] = 1;
HEAP32[$vararg_buffer564 + 4 >> 2] = 52434;
HEAP32[$vararg_buffer564 + 8 >> 2] = 2;
HEAP32[$vararg_buffer564 + 12 >> 2] = 52439;
HEAP32[$vararg_buffer564 + 16 >> 2] = 3;
HEAP32[$vararg_buffer564 + 20 >> 2] = 52445;
HEAP32[$vararg_buffer564 + 24 >> 2] = 4;
HEAP32[$vararg_buffer564 + 28 >> 2] = 52452;
HEAP32[$vararg_buffer564 + 32 >> 2] = 5;
HEAP32[$vararg_buffer564 + 36 >> 2] = 52460;
HEAP32[$vararg_buffer564 + 40 >> 2] = 6;
HEAP32[$vararg_buffer564 + 44 >> 2] = 52470;
HEAP32[$vararg_buffer564 + 48 >> 2] = 7;
HEAP32[$vararg_buffer564 + 52 >> 2] = 0;
$55 = __ZN21InvertibleStringArray19NewInvertibleArrayHEPKcz(52425, $vararg_buffer564) | 0;
HEAP32[17200] = $55;
HEAP32[$vararg_buffer580 >> 2] = 1;
HEAP32[$vararg_buffer580 + 4 >> 2] = 52489;
HEAP32[$vararg_buffer580 + 8 >> 2] = 2;
HEAP32[$vararg_buffer580 + 12 >> 2] = 52493;
HEAP32[$vararg_buffer580 + 16 >> 2] = 3;
HEAP32[$vararg_buffer580 + 20 >> 2] = 52500;
HEAP32[$vararg_buffer580 + 24 >> 2] = 4;
HEAP32[$vararg_buffer580 + 28 >> 2] = 52508;
HEAP32[$vararg_buffer580 + 32 >> 2] = 5;
HEAP32[$vararg_buffer580 + 36 >> 2] = 0;
$56 = __ZN21InvertibleStringArray19NewInvertibleArrayHEPKcz(52479, $vararg_buffer580) | 0;
HEAP32[17201] = $56;
HEAP32[$vararg_buffer592 >> 2] = 1;
HEAP32[$vararg_buffer592 + 4 >> 2] = 52523;
HEAP32[$vararg_buffer592 + 8 >> 2] = 2;
HEAP32[$vararg_buffer592 + 12 >> 2] = 52528;
HEAP32[$vararg_buffer592 + 16 >> 2] = 3;
HEAP32[$vararg_buffer592 + 20 >> 2] = 52536;
HEAP32[$vararg_buffer592 + 24 >> 2] = 4;
HEAP32[$vararg_buffer592 + 28 >> 2] = 52545;
HEAP32[$vararg_buffer592 + 32 >> 2] = 5;
HEAP32[$vararg_buffer592 + 36 >> 2] = 52560;
HEAP32[$vararg_buffer592 + 40 >> 2] = 6;
HEAP32[$vararg_buffer592 + 44 >> 2] = 52571;
HEAP32[$vararg_buffer592 + 48 >> 2] = 8;
HEAP32[$vararg_buffer592 + 52 >> 2] = 52579;
HEAP32[$vararg_buffer592 + 56 >> 2] = 7;
HEAP32[$vararg_buffer592 + 60 >> 2] = 52588;
HEAP32[$vararg_buffer592 + 64 >> 2] = 9;
HEAP32[$vararg_buffer592 + 68 >> 2] = 52600;
HEAP32[$vararg_buffer592 + 72 >> 2] = 11;
HEAP32[$vararg_buffer592 + 76 >> 2] = 52606;
HEAP32[$vararg_buffer592 + 80 >> 2] = 10;
HEAP32[$vararg_buffer592 + 84 >> 2] = 52613;
HEAP32[$vararg_buffer592 + 88 >> 2] = 12;
HEAP32[$vararg_buffer592 + 92 >> 2] = 0;
$57 = __ZN21InvertibleStringArray19NewInvertibleArrayHEPKcz(52518, $vararg_buffer592) | 0;
HEAP32[17751] = $57;
HEAP32[$vararg_buffer618 >> 2] = 1;
HEAP32[$vararg_buffer618 + 4 >> 2] = 52523;
HEAP32[$vararg_buffer618 + 8 >> 2] = 2;
HEAP32[$vararg_buffer618 + 12 >> 2] = 52571;
HEAP32[$vararg_buffer618 + 16 >> 2] = 5;
HEAP32[$vararg_buffer618 + 20 >> 2] = 52579;
HEAP32[$vararg_buffer618 + 24 >> 2] = 4;
HEAP32[$vararg_buffer618 + 28 >> 2] = 52600;
HEAP32[$vararg_buffer618 + 32 >> 2] = 7;
HEAP32[$vararg_buffer618 + 36 >> 2] = 52606;
HEAP32[$vararg_buffer618 + 40 >> 2] = 6;
HEAP32[$vararg_buffer618 + 44 >> 2] = 0;
$58 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 52518, $vararg_buffer618) | 0;
HEAP32[17752] = $58;
HEAP32[$vararg_buffer632 >> 2] = 1;
HEAP32[$vararg_buffer632 + 4 >> 2] = 52629;
HEAP32[$vararg_buffer632 + 8 >> 2] = 2;
HEAP32[$vararg_buffer632 + 12 >> 2] = 0;
$59 = __ZN21InvertibleStringArray19NewInvertibleArrayHEPKcz(52623, $vararg_buffer632) | 0;
HEAP32[17753] = $59;
HEAP32[$vararg_buffer638 >> 2] = 1;
HEAP32[$vararg_buffer638 + 4 >> 2] = 52649;
HEAP32[$vararg_buffer638 + 8 >> 2] = 2;
HEAP32[$vararg_buffer638 + 12 >> 2] = 0;
$60 = __ZN21InvertibleStringArray19NewInvertibleArrayHEPKcz(52635, $vararg_buffer638) | 0;
HEAP32[17754] = $60;
$61 = __Znwj(264) | 0;
HEAPF32[$61 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 4 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 8 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 12 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 16 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 20 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 24 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 28 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 32 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 36 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 40 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 44 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 48 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 52 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 56 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 60 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 64 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 68 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 72 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 76 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 80 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 84 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 88 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 92 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 96 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 100 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 104 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 108 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 112 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 116 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 120 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 124 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 128 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 132 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 136 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 140 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 144 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 148 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 152 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 156 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 160 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 164 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 168 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 172 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 176 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 180 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 184 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 188 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 192 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 196 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 200 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 204 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 208 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 212 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 216 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 220 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 224 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 228 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 232 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 236 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 240 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 244 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 248 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 252 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 256 >> 2] = Math_fround(-100.0);
HEAPF32[$61 + 260 >> 2] = Math_fround(-100.0);
HEAP32[17755] = $61;
HEAP32[$vararg_buffer644 >> 2] = 1;
HEAP32[$vararg_buffer644 + 4 >> 2] = 51376;
HEAP32[$vararg_buffer644 + 8 >> 2] = 1;
HEAP32[$vararg_buffer644 + 12 >> 2] = 50486;
HEAP32[$vararg_buffer644 + 16 >> 2] = 1;
HEAP32[$vararg_buffer644 + 20 >> 2] = 51613;
HEAP32[$vararg_buffer644 + 24 >> 2] = 1;
HEAP32[$vararg_buffer644 + 28 >> 2] = 51760;
HEAP32[$vararg_buffer644 + 32 >> 2] = 0;
HEAP32[$vararg_buffer644 + 36 >> 2] = 57777;
HEAP32[$vararg_buffer644 + 40 >> 2] = 1;
HEAP32[$vararg_buffer644 + 44 >> 2] = 51565;
HEAP32[$vararg_buffer644 + 48 >> 2] = 0;
HEAP32[$vararg_buffer644 + 52 >> 2] = 50455;
HEAP32[$vararg_buffer644 + 56 >> 2] = 1;
HEAP32[$vararg_buffer644 + 60 >> 2] = 51752;
HEAP32[$vararg_buffer644 + 64 >> 2] = 0;
HEAP32[$vararg_buffer644 + 68 >> 2] = 51642;
HEAP32[$vararg_buffer644 + 72 >> 2] = 0;
HEAP32[$vararg_buffer644 + 76 >> 2] = 50466;
HEAP32[$vararg_buffer644 + 80 >> 2] = 0;
HEAP32[$vararg_buffer644 + 84 >> 2] = 51484;
HEAP32[$vararg_buffer644 + 88 >> 2] = 1;
HEAP32[$vararg_buffer644 + 92 >> 2] = 51438;
HEAP32[$vararg_buffer644 + 96 >> 2] = 1;
HEAP32[$vararg_buffer644 + 100 >> 2] = 51313;
HEAP32[$vararg_buffer644 + 104 >> 2] = 1;
HEAP32[$vararg_buffer644 + 108 >> 2] = 51779;
HEAP32[$vararg_buffer644 + 112 >> 2] = 0;
HEAP32[$vararg_buffer644 + 116 >> 2] = 51769;
HEAP32[$vararg_buffer644 + 120 >> 2] = 1;
HEAP32[$vararg_buffer644 + 124 >> 2] = 51804;
HEAP32[$vararg_buffer644 + 128 >> 2] = 0;
HEAP32[$vararg_buffer644 + 132 >> 2] = 51576;
HEAP32[$vararg_buffer644 + 136 >> 2] = 1;
HEAP32[$vararg_buffer644 + 140 >> 2] = 51655;
HEAP32[$vararg_buffer644 + 144 >> 2] = 0;
HEAP32[$vararg_buffer644 + 148 >> 2] = 52663;
HEAP32[$vararg_buffer644 + 152 >> 2] = 0;
HEAP32[$vararg_buffer644 + 156 >> 2] = 51473;
HEAP32[$vararg_buffer644 + 160 >> 2] = 1;
HEAP32[$vararg_buffer644 + 164 >> 2] = 51405;
HEAP32[$vararg_buffer644 + 168 >> 2] = 1;
HEAP32[$vararg_buffer644 + 172 >> 2] = 51927;
HEAP32[$vararg_buffer644 + 176 >> 2] = 0;
HEAP32[$vararg_buffer644 + 180 >> 2] = 51880;
HEAP32[$vararg_buffer644 + 184 >> 2] = 0;
HEAP32[$vararg_buffer644 + 188 >> 2] = 51628;
HEAP32[$vararg_buffer644 + 192 >> 2] = 0;
HEAP32[$vararg_buffer644 + 196 >> 2] = 51495;
HEAP32[$vararg_buffer644 + 200 >> 2] = 1;
HEAP32[$vararg_buffer644 + 204 >> 2] = 50497;
HEAP32[$vararg_buffer644 + 208 >> 2] = 0;
HEAP32[$vararg_buffer644 + 212 >> 2] = 51725;
HEAP32[$vararg_buffer644 + 216 >> 2] = 0;
HEAP32[$vararg_buffer644 + 220 >> 2] = 51526;
HEAP32[$vararg_buffer644 + 224 >> 2] = 1;
HEAP32[$vararg_buffer644 + 228 >> 2] = 51336;
HEAP32[$vararg_buffer644 + 232 >> 2] = 1;
HEAP32[$vararg_buffer644 + 236 >> 2] = 51673;
HEAP32[$vararg_buffer644 + 240 >> 2] = 0;
HEAP32[$vararg_buffer644 + 244 >> 2] = 51820;
HEAP32[$vararg_buffer644 + 248 >> 2] = 0;
HEAP32[$vararg_buffer644 + 252 >> 2] = 51420;
HEAP32[$vararg_buffer644 + 256 >> 2] = 1;
HEAP32[$vararg_buffer644 + 260 >> 2] = 51451;
HEAP32[$vararg_buffer644 + 264 >> 2] = 1;
HEAP32[$vararg_buffer644 + 268 >> 2] = 51604;
HEAP32[$vararg_buffer644 + 272 >> 2] = 1;
HEAP32[$vararg_buffer644 + 276 >> 2] = 51866;
HEAP32[$vararg_buffer644 + 280 >> 2] = 0;
HEAP32[$vararg_buffer644 + 284 >> 2] = 51839;
HEAP32[$vararg_buffer644 + 288 >> 2] = 0;
HEAP32[$vararg_buffer644 + 292 >> 2] = 51325;
HEAP32[$vararg_buffer644 + 296 >> 2] = 1;
HEAP32[$vararg_buffer644 + 300 >> 2] = 51739;
HEAP32[$vararg_buffer644 + 304 >> 2] = 0;
HEAP32[$vararg_buffer644 + 308 >> 2] = 51683;
HEAP32[$vararg_buffer644 + 312 >> 2] = 0;
HEAP32[$vararg_buffer644 + 316 >> 2] = 51307;
HEAP32[$vararg_buffer644 + 320 >> 2] = 1;
HEAP32[$vararg_buffer644 + 324 >> 2] = 51706;
HEAP32[$vararg_buffer644 + 328 >> 2] = 0;
HEAP32[$vararg_buffer644 + 332 >> 2] = 51553;
HEAP32[$vararg_buffer644 + 336 >> 2] = 0;
HEAP32[$vararg_buffer644 + 340 >> 2] = 51511;
HEAP32[$vararg_buffer644 + 344 >> 2] = 1;
HEAP32[$vararg_buffer644 + 348 >> 2] = 51825;
HEAP32[$vararg_buffer644 + 352 >> 2] = 0;
HEAP32[$vararg_buffer644 + 356 >> 2] = 51716;
HEAP32[$vararg_buffer644 + 360 >> 2] = 0;
HEAP32[$vararg_buffer644 + 364 >> 2] = 51692;
HEAP32[$vararg_buffer644 + 368 >> 2] = 0;
HEAP32[$vararg_buffer644 + 372 >> 2] = 51788;
HEAP32[$vararg_buffer644 + 376 >> 2] = 1;
HEAP32[$vararg_buffer644 + 380 >> 2] = 51891;
HEAP32[$vararg_buffer644 + 384 >> 2] = 1;
HEAP32[$vararg_buffer644 + 388 >> 2] = 51902;
HEAP32[$vararg_buffer644 + 392 >> 2] = 1;
HEAP32[$vararg_buffer644 + 396 >> 2] = 57271;
HEAP32[$vararg_buffer644 + 400 >> 2] = 0;
HEAP32[$vararg_buffer644 + 404 >> 2] = 51362;
HEAP32[$vararg_buffer644 + 408 >> 2] = 1;
HEAP32[$vararg_buffer644 + 412 >> 2] = 51462;
HEAP32[$vararg_buffer644 + 416 >> 2] = 1;
HEAP32[$vararg_buffer644 + 420 >> 2] = 51852;
HEAP32[$vararg_buffer644 + 424 >> 2] = 0;
HEAP32[$vararg_buffer644 + 428 >> 2] = 0;
$127 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 51353, $vararg_buffer644) | 0;
HEAP32[17766] = $127;
HEAP32[$vararg_buffer754 >> 2] = 1;
HEAP32[$vararg_buffer754 + 4 >> 2] = 52031;
HEAP32[$vararg_buffer754 + 8 >> 2] = 1;
HEAP32[$vararg_buffer754 + 12 >> 2] = 52677;
HEAP32[$vararg_buffer754 + 16 >> 2] = 1;
HEAP32[$vararg_buffer754 + 20 >> 2] = 52686;
HEAP32[$vararg_buffer754 + 24 >> 2] = 1;
HEAP32[$vararg_buffer754 + 28 >> 2] = 52700;
HEAP32[$vararg_buffer754 + 32 >> 2] = 0;
HEAP32[$vararg_buffer754 + 36 >> 2] = 52716;
HEAP32[$vararg_buffer754 + 40 >> 2] = 1;
HEAP32[$vararg_buffer754 + 44 >> 2] = 52732;
HEAP32[$vararg_buffer754 + 48 >> 2] = 1;
HEAP32[$vararg_buffer754 + 52 >> 2] = 52744;
HEAP32[$vararg_buffer754 + 56 >> 2] = 1;
HEAP32[$vararg_buffer754 + 60 >> 2] = 52760;
HEAP32[$vararg_buffer754 + 64 >> 2] = 1;
HEAP32[$vararg_buffer754 + 68 >> 2] = 52781;
HEAP32[$vararg_buffer754 + 72 >> 2] = 0;
HEAP32[$vararg_buffer754 + 76 >> 2] = 52804;
HEAP32[$vararg_buffer754 + 80 >> 2] = 0;
HEAP32[$vararg_buffer754 + 84 >> 2] = 52811;
HEAP32[$vararg_buffer754 + 88 >> 2] = 1;
HEAP32[$vararg_buffer754 + 92 >> 2] = 52819;
HEAP32[$vararg_buffer754 + 96 >> 2] = 1;
HEAP32[$vararg_buffer754 + 100 >> 2] = 0;
$128 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 51353, $vararg_buffer754) | 0;
HEAP32[17770] = $128;
HEAP32[$vararg_buffer782 >> 2] = 1;
HEAP32[$vararg_buffer782 + 4 >> 2] = 51301;
HEAP32[$vararg_buffer782 + 8 >> 2] = 0;
HEAP32[$vararg_buffer782 + 12 >> 2] = 52840;
HEAP32[$vararg_buffer782 + 16 >> 2] = 1;
HEAP32[$vararg_buffer782 + 20 >> 2] = 52854;
HEAP32[$vararg_buffer782 + 24 >> 2] = 1;
HEAP32[$vararg_buffer782 + 28 >> 2] = 0;
$129 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 52834, $vararg_buffer782) | 0;
HEAP32[17771] = $129;
$130 = __ZN7HashAnyIPKciE9emptyHashEi(0) | 0;
HEAP32[17772] = $130;
HEAP32[$vararg_buffer792 >> 2] = 0;
HEAP32[$vararg_buffer792 + 4 >> 2] = 0;
$131 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 49714, $vararg_buffer792) | 0;
HEAP32[17773] = $131;
HEAP32[$vararg_buffer796 >> 2] = 1;
HEAP32[$vararg_buffer796 + 4 >> 2] = 51301;
HEAP32[$vararg_buffer796 + 8 >> 2] = 0;
HEAP32[$vararg_buffer796 + 12 >> 2] = 52840;
HEAP32[$vararg_buffer796 + 16 >> 2] = 1;
HEAP32[$vararg_buffer796 + 20 >> 2] = 52854;
HEAP32[$vararg_buffer796 + 24 >> 2] = 1;
HEAP32[$vararg_buffer796 + 28 >> 2] = 0;
$132 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 52834, $vararg_buffer796) | 0;
HEAP32[17774] = $132;
HEAP32[$vararg_buffer806 >> 2] = 0;
HEAP32[$vararg_buffer806 + 4 >> 2] = 50850;
HEAP32[$vararg_buffer806 + 8 >> 2] = 0;
HEAP32[$vararg_buffer806 + 12 >> 2] = 52869;
HEAP32[$vararg_buffer806 + 16 >> 2] = 0;
HEAP32[$vararg_buffer806 + 20 >> 2] = 50906;
HEAP32[$vararg_buffer806 + 24 >> 2] = 0;
HEAP32[$vararg_buffer806 + 28 >> 2] = 50913;
HEAP32[$vararg_buffer806 + 32 >> 2] = 0;
HEAP32[$vararg_buffer806 + 36 >> 2] = 0;
$133 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 50844, $vararg_buffer806) | 0;
HEAP32[17775] = $133;
HEAP32[$vararg_buffer818 >> 2] = 1;
HEAP32[$vararg_buffer818 + 4 >> 2] = 51301;
HEAP32[$vararg_buffer818 + 8 >> 2] = 0;
HEAP32[$vararg_buffer818 + 12 >> 2] = 52878;
HEAP32[$vararg_buffer818 + 16 >> 2] = 0;
HEAP32[$vararg_buffer818 + 20 >> 2] = 52840;
HEAP32[$vararg_buffer818 + 24 >> 2] = 1;
HEAP32[$vararg_buffer818 + 28 >> 2] = 52854;
HEAP32[$vararg_buffer818 + 32 >> 2] = 1;
HEAP32[$vararg_buffer818 + 36 >> 2] = 0;
$134 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 52834, $vararg_buffer818) | 0;
HEAP32[17776] = $134;
$135 = __ZN7HashAnyIPKciE9emptyHashEi(0) | 0;
HEAP32[17777] = $135;
$136 = __ZN7HashAnyIPKciE9emptyHashEi(0) | 0;
HEAP32[17778] = $136;
HEAP32[$vararg_buffer830 >> 2] = 1;
HEAP32[$vararg_buffer830 + 4 >> 2] = 52888;
HEAP32[$vararg_buffer830 + 8 >> 2] = 0;
HEAP32[$vararg_buffer830 + 12 >> 2] = 51301;
HEAP32[$vararg_buffer830 + 16 >> 2] = 0;
HEAP32[$vararg_buffer830 + 20 >> 2] = 52840;
HEAP32[$vararg_buffer830 + 24 >> 2] = 1;
HEAP32[$vararg_buffer830 + 28 >> 2] = 52854;
HEAP32[$vararg_buffer830 + 32 >> 2] = 1;
HEAP32[$vararg_buffer830 + 36 >> 2] = 0;
$137 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 52834, $vararg_buffer830) | 0;
HEAP32[17779] = $137;
HEAP32[$vararg_buffer842 >> 2] = 0;
HEAP32[$vararg_buffer842 + 4 >> 2] = 50850;
HEAP32[$vararg_buffer842 + 8 >> 2] = 0;
HEAP32[$vararg_buffer842 + 12 >> 2] = 50859;
HEAP32[$vararg_buffer842 + 16 >> 2] = 1;
HEAP32[$vararg_buffer842 + 20 >> 2] = 52869;
HEAP32[$vararg_buffer842 + 24 >> 2] = 0;
HEAP32[$vararg_buffer842 + 28 >> 2] = 50888;
HEAP32[$vararg_buffer842 + 32 >> 2] = 1;
HEAP32[$vararg_buffer842 + 36 >> 2] = 50906;
HEAP32[$vararg_buffer842 + 40 >> 2] = 0;
HEAP32[$vararg_buffer842 + 44 >> 2] = 50913;
HEAP32[$vararg_buffer842 + 48 >> 2] = 0;
HEAP32[$vararg_buffer842 + 52 >> 2] = 0;
$138 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 50844, $vararg_buffer842) | 0;
HEAP32[17780] = $138;
HEAP32[$vararg_buffer858 >> 2] = 0;
HEAP32[$vararg_buffer858 + 4 >> 2] = 50850;
HEAP32[$vararg_buffer858 + 8 >> 2] = 0;
HEAP32[$vararg_buffer858 + 12 >> 2] = 52869;
HEAP32[$vararg_buffer858 + 16 >> 2] = 0;
HEAP32[$vararg_buffer858 + 20 >> 2] = 50906;
HEAP32[$vararg_buffer858 + 24 >> 2] = 0;
HEAP32[$vararg_buffer858 + 28 >> 2] = 50913;
HEAP32[$vararg_buffer858 + 32 >> 2] = 0;
HEAP32[$vararg_buffer858 + 36 >> 2] = 0;
$139 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 50844, $vararg_buffer858) | 0;
HEAP32[17781] = $139;
HEAP32[$vararg_buffer870 >> 2] = 1;
HEAP32[$vararg_buffer870 + 4 >> 2] = 52910;
HEAP32[$vararg_buffer870 + 8 >> 2] = 0;
HEAP32[$vararg_buffer870 + 12 >> 2] = 52920;
HEAP32[$vararg_buffer870 + 16 >> 2] = 1;
HEAP32[$vararg_buffer870 + 20 >> 2] = 52928;
HEAP32[$vararg_buffer870 + 24 >> 2] = 1;
HEAP32[$vararg_buffer870 + 28 >> 2] = 52939;
HEAP32[$vararg_buffer870 + 32 >> 2] = 0;
HEAP32[$vararg_buffer870 + 36 >> 2] = 52950;
HEAP32[$vararg_buffer870 + 40 >> 2] = 1;
HEAP32[$vararg_buffer870 + 44 >> 2] = 0;
$140 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 52902, $vararg_buffer870) | 0;
HEAP32[17782] = $140;
HEAP32[$vararg_buffer884 >> 2] = 0;
HEAP32[$vararg_buffer884 + 4 >> 2] = 0;
$141 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 49705, $vararg_buffer884) | 0;
HEAP32[17783] = $141;
HEAP32[$vararg_buffer888 >> 2] = 1;
HEAP32[$vararg_buffer888 + 4 >> 2] = 0;
$142 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 49705, $vararg_buffer888) | 0;
HEAP32[17784] = $142;
$143 = __ZN7HashAnyIPKciE9emptyHashEi(0) | 0;
HEAP32[17785] = $143;
$144 = __ZN7HashAnyIPKciE9emptyHashEi(0) | 0;
HEAP32[17786] = $144;
$145 = __ZN7HashAnyIPKciE9emptyHashEi(0) | 0;
HEAP32[17787] = $145;
HEAP32[$vararg_buffer892 >> 2] = 0;
HEAP32[$vararg_buffer892 + 4 >> 2] = 52869;
HEAP32[$vararg_buffer892 + 8 >> 2] = 0;
HEAP32[$vararg_buffer892 + 12 >> 2] = 50924;
HEAP32[$vararg_buffer892 + 16 >> 2] = 0;
HEAP32[$vararg_buffer892 + 20 >> 2] = 50906;
HEAP32[$vararg_buffer892 + 24 >> 2] = 0;
HEAP32[$vararg_buffer892 + 28 >> 2] = 50938;
HEAP32[$vararg_buffer892 + 32 >> 2] = 0;
HEAP32[$vararg_buffer892 + 36 >> 2] = 52958;
HEAP32[$vararg_buffer892 + 40 >> 2] = 0;
HEAP32[$vararg_buffer892 + 44 >> 2] = 50844;
HEAP32[$vararg_buffer892 + 48 >> 2] = 0;
HEAP32[$vararg_buffer892 + 52 >> 2] = 50913;
HEAP32[$vararg_buffer892 + 56 >> 2] = 0;
HEAP32[$vararg_buffer892 + 60 >> 2] = 0;
$146 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 50850, $vararg_buffer892) | 0;
HEAP32[17788] = $146;
HEAP32[$vararg_buffer910 >> 2] = 0;
HEAP32[$vararg_buffer910 + 4 >> 2] = 50850;
HEAP32[$vararg_buffer910 + 8 >> 2] = 0;
HEAP32[$vararg_buffer910 + 12 >> 2] = 52869;
HEAP32[$vararg_buffer910 + 16 >> 2] = 0;
HEAP32[$vararg_buffer910 + 20 >> 2] = 50906;
HEAP32[$vararg_buffer910 + 24 >> 2] = 0;
HEAP32[$vararg_buffer910 + 28 >> 2] = 50913;
HEAP32[$vararg_buffer910 + 32 >> 2] = 0;
HEAP32[$vararg_buffer910 + 36 >> 2] = 0;
$147 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 50844, $vararg_buffer910) | 0;
HEAP32[17789] = $147;
$148 = __ZN7HashAnyIPKciE9emptyHashEi(0) | 0;
HEAP32[17790] = $148;
$149 = __ZN7HashAnyIPKciE9emptyHashEi(0) | 0;
HEAP32[17791] = $149;
HEAP32[$vararg_buffer922 >> 2] = 0;
HEAP32[$vararg_buffer922 + 4 >> 2] = 0;
$150 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 49732, $vararg_buffer922) | 0;
HEAP32[17792] = $150;
HEAP32[$vararg_buffer926 >> 2] = 0;
HEAP32[$vararg_buffer926 + 4 >> 2] = 52984;
HEAP32[$vararg_buffer926 + 8 >> 2] = 0;
HEAP32[$vararg_buffer926 + 12 >> 2] = 0;
$151 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 52964, $vararg_buffer926) | 0;
HEAP32[17793] = $151;
$152 = __ZN7HashAnyIPKciE9emptyHashEi(0) | 0;
HEAP32[17794] = $152;
HEAP32[$vararg_buffer932 >> 2] = 0;
HEAP32[$vararg_buffer932 + 4 >> 2] = 52840;
HEAP32[$vararg_buffer932 + 8 >> 2] = 1;
HEAP32[$vararg_buffer932 + 12 >> 2] = 52854;
HEAP32[$vararg_buffer932 + 16 >> 2] = 1;
HEAP32[$vararg_buffer932 + 20 >> 2] = 0;
$153 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 51301, $vararg_buffer932) | 0;
HEAP32[17795] = $153;
HEAP32[$vararg_buffer940 >> 2] = 0;
HEAP32[$vararg_buffer940 + 4 >> 2] = 0;
$154 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 49705, $vararg_buffer940) | 0;
HEAP32[17796] = $154;
HEAP32[$vararg_buffer944 >> 2] = 1;
HEAP32[$vararg_buffer944 + 4 >> 2] = 50850;
HEAP32[$vararg_buffer944 + 8 >> 2] = 0;
HEAP32[$vararg_buffer944 + 12 >> 2] = 52869;
HEAP32[$vararg_buffer944 + 16 >> 2] = 0;
HEAP32[$vararg_buffer944 + 20 >> 2] = 50924;
HEAP32[$vararg_buffer944 + 24 >> 2] = 0;
HEAP32[$vararg_buffer944 + 28 >> 2] = 50906;
HEAP32[$vararg_buffer944 + 32 >> 2] = 0;
HEAP32[$vararg_buffer944 + 36 >> 2] = 50938;
HEAP32[$vararg_buffer944 + 40 >> 2] = 0;
HEAP32[$vararg_buffer944 + 44 >> 2] = 50844;
HEAP32[$vararg_buffer944 + 48 >> 2] = 0;
HEAP32[$vararg_buffer944 + 52 >> 2] = 51083;
HEAP32[$vararg_buffer944 + 56 >> 2] = 1;
HEAP32[$vararg_buffer944 + 60 >> 2] = 51093;
HEAP32[$vararg_buffer944 + 64 >> 2] = 1;
HEAP32[$vararg_buffer944 + 68 >> 2] = 51098;
HEAP32[$vararg_buffer944 + 72 >> 2] = 1;
HEAP32[$vararg_buffer944 + 76 >> 2] = 51116;
HEAP32[$vararg_buffer944 + 80 >> 2] = 1;
HEAP32[$vararg_buffer944 + 84 >> 2] = 51129;
HEAP32[$vararg_buffer944 + 88 >> 2] = 0;
HEAP32[$vararg_buffer944 + 92 >> 2] = 51150;
HEAP32[$vararg_buffer944 + 96 >> 2] = 1;
HEAP32[$vararg_buffer944 + 100 >> 2] = 51167;
HEAP32[$vararg_buffer944 + 104 >> 2] = 0;
HEAP32[$vararg_buffer944 + 108 >> 2] = 51179;
HEAP32[$vararg_buffer944 + 112 >> 2] = 1;
HEAP32[$vararg_buffer944 + 116 >> 2] = 51183;
HEAP32[$vararg_buffer944 + 120 >> 2] = 1;
HEAP32[$vararg_buffer944 + 124 >> 2] = 51189;
HEAP32[$vararg_buffer944 + 128 >> 2] = 0;
HEAP32[$vararg_buffer944 + 132 >> 2] = 51205;
HEAP32[$vararg_buffer944 + 136 >> 2] = 0;
HEAP32[$vararg_buffer944 + 140 >> 2] = 51218;
HEAP32[$vararg_buffer944 + 144 >> 2] = 1;
HEAP32[$vararg_buffer944 + 148 >> 2] = 50913;
HEAP32[$vararg_buffer944 + 152 >> 2] = 0;
HEAP32[$vararg_buffer944 + 156 >> 2] = 0;
$155 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 51071, $vararg_buffer944) | 0;
HEAP32[17797] = $155;
$156 = __ZN7HashAnyIPKciE9emptyHashEi(0) | 0;
HEAP32[17798] = $156;
HEAP32[$vararg_buffer986 >> 2] = 0;
HEAP32[$vararg_buffer986 + 4 >> 2] = 52984;
HEAP32[$vararg_buffer986 + 8 >> 2] = 0;
HEAP32[$vararg_buffer986 + 12 >> 2] = 0;
$157 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 52964, $vararg_buffer986) | 0;
HEAP32[17799] = $157;
HEAP32[$vararg_buffer992 >> 2] = 0;
HEAP32[$vararg_buffer992 + 4 >> 2] = 0;
$158 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 49705, $vararg_buffer992) | 0;
HEAP32[17800] = $158;
HEAP32[$vararg_buffer996 >> 2] = 1;
HEAP32[$vararg_buffer996 + 4 >> 2] = 0;
$159 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 52811, $vararg_buffer996) | 0;
HEAP32[17801] = $159;
HEAP32[$vararg_buffer1000 >> 2] = 0;
HEAP32[$vararg_buffer1000 + 4 >> 2] = 50850;
HEAP32[$vararg_buffer1000 + 8 >> 2] = 0;
HEAP32[$vararg_buffer1000 + 12 >> 2] = 52869;
HEAP32[$vararg_buffer1000 + 16 >> 2] = 0;
HEAP32[$vararg_buffer1000 + 20 >> 2] = 50906;
HEAP32[$vararg_buffer1000 + 24 >> 2] = 0;
HEAP32[$vararg_buffer1000 + 28 >> 2] = 50913;
HEAP32[$vararg_buffer1000 + 32 >> 2] = 0;
HEAP32[$vararg_buffer1000 + 36 >> 2] = 0;
$160 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 50844, $vararg_buffer1000) | 0;
HEAP32[17802] = $160;
$161 = __ZN7HashAnyIPKciE9emptyHashEi(0) | 0;
HEAP32[17803] = $161;
HEAP32[$vararg_buffer1012 >> 2] = 0;
HEAP32[$vararg_buffer1012 + 4 >> 2] = 0;
$162 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 49724, $vararg_buffer1012) | 0;
HEAP32[17804] = $162;
$163 = __ZN7HashAnyIPKciE9emptyHashEi(0) | 0;
HEAP32[17805] = $163;
HEAP32[$vararg_buffer1016 >> 2] = 1;
HEAP32[$vararg_buffer1016 + 4 >> 2] = 53010;
HEAP32[$vararg_buffer1016 + 8 >> 2] = 1;
HEAP32[$vararg_buffer1016 + 12 >> 2] = 53024;
HEAP32[$vararg_buffer1016 + 16 >> 2] = 0;
HEAP32[$vararg_buffer1016 + 20 >> 2] = 52031;
HEAP32[$vararg_buffer1016 + 24 >> 2] = 1;
HEAP32[$vararg_buffer1016 + 28 >> 2] = 52677;
HEAP32[$vararg_buffer1016 + 32 >> 2] = 1;
HEAP32[$vararg_buffer1016 + 36 >> 2] = 53037;
HEAP32[$vararg_buffer1016 + 40 >> 2] = 1;
HEAP32[$vararg_buffer1016 + 44 >> 2] = 51393;
HEAP32[$vararg_buffer1016 + 48 >> 2] = 0;
HEAP32[$vararg_buffer1016 + 52 >> 2] = 53046;
HEAP32[$vararg_buffer1016 + 56 >> 2] = 0;
HEAP32[$vararg_buffer1016 + 60 >> 2] = 53060;
HEAP32[$vararg_buffer1016 + 64 >> 2] = 0;
HEAP32[$vararg_buffer1016 + 68 >> 2] = 53072;
HEAP32[$vararg_buffer1016 + 72 >> 2] = 0;
HEAP32[$vararg_buffer1016 + 76 >> 2] = 53083;
HEAP32[$vararg_buffer1016 + 80 >> 2] = 1;
HEAP32[$vararg_buffer1016 + 84 >> 2] = 53098;
HEAP32[$vararg_buffer1016 + 88 >> 2] = 1;
HEAP32[$vararg_buffer1016 + 92 >> 2] = 53111;
HEAP32[$vararg_buffer1016 + 96 >> 2] = 0;
HEAP32[$vararg_buffer1016 + 100 >> 2] = 53125;
HEAP32[$vararg_buffer1016 + 104 >> 2] = 0;
HEAP32[$vararg_buffer1016 + 108 >> 2] = 53138;
HEAP32[$vararg_buffer1016 + 112 >> 2] = 1;
HEAP32[$vararg_buffer1016 + 116 >> 2] = 53148;
HEAP32[$vararg_buffer1016 + 120 >> 2] = 1;
HEAP32[$vararg_buffer1016 + 124 >> 2] = 53165;
HEAP32[$vararg_buffer1016 + 128 >> 2] = 1;
HEAP32[$vararg_buffer1016 + 132 >> 2] = 53174;
HEAP32[$vararg_buffer1016 + 136 >> 2] = 1;
HEAP32[$vararg_buffer1016 + 140 >> 2] = 53190;
HEAP32[$vararg_buffer1016 + 144 >> 2] = 0;
HEAP32[$vararg_buffer1016 + 148 >> 2] = 53201;
HEAP32[$vararg_buffer1016 + 152 >> 2] = 0;
HEAP32[$vararg_buffer1016 + 156 >> 2] = 53219;
HEAP32[$vararg_buffer1016 + 160 >> 2] = 1;
HEAP32[$vararg_buffer1016 + 164 >> 2] = 53228;
HEAP32[$vararg_buffer1016 + 168 >> 2] = 1;
HEAP32[$vararg_buffer1016 + 172 >> 2] = 53244;
HEAP32[$vararg_buffer1016 + 176 >> 2] = 0;
HEAP32[$vararg_buffer1016 + 180 >> 2] = 49521;
HEAP32[$vararg_buffer1016 + 184 >> 2] = 1;
HEAP32[$vararg_buffer1016 + 188 >> 2] = 53260;
HEAP32[$vararg_buffer1016 + 192 >> 2] = 0;
HEAP32[$vararg_buffer1016 + 196 >> 2] = 53266;
HEAP32[$vararg_buffer1016 + 200 >> 2] = 1;
HEAP32[$vararg_buffer1016 + 204 >> 2] = 49527;
HEAP32[$vararg_buffer1016 + 208 >> 2] = 1;
HEAP32[$vararg_buffer1016 + 212 >> 2] = 49533;
HEAP32[$vararg_buffer1016 + 216 >> 2] = 1;
HEAP32[$vararg_buffer1016 + 220 >> 2] = 49539;
HEAP32[$vararg_buffer1016 + 224 >> 2] = 1;
HEAP32[$vararg_buffer1016 + 228 >> 2] = 49545;
HEAP32[$vararg_buffer1016 + 232 >> 2] = 1;
HEAP32[$vararg_buffer1016 + 236 >> 2] = 53281;
HEAP32[$vararg_buffer1016 + 240 >> 2] = 1;
HEAP32[$vararg_buffer1016 + 244 >> 2] = 53290;
HEAP32[$vararg_buffer1016 + 248 >> 2] = 1;
HEAP32[$vararg_buffer1016 + 252 >> 2] = 53306;
HEAP32[$vararg_buffer1016 + 256 >> 2] = 0;
HEAP32[$vararg_buffer1016 + 260 >> 2] = 53319;
HEAP32[$vararg_buffer1016 + 264 >> 2] = 0;
HEAP32[$vararg_buffer1016 + 268 >> 2] = 53330;
HEAP32[$vararg_buffer1016 + 272 >> 2] = 1;
HEAP32[$vararg_buffer1016 + 276 >> 2] = 53343;
HEAP32[$vararg_buffer1016 + 280 >> 2] = 0;
HEAP32[$vararg_buffer1016 + 284 >> 2] = 53362;
HEAP32[$vararg_buffer1016 + 288 >> 2] = 0;
HEAP32[$vararg_buffer1016 + 292 >> 2] = 53381;
HEAP32[$vararg_buffer1016 + 296 >> 2] = 0;
HEAP32[$vararg_buffer1016 + 300 >> 2] = 53393;
HEAP32[$vararg_buffer1016 + 304 >> 2] = 0;
HEAP32[$vararg_buffer1016 + 308 >> 2] = 0;
$164 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 53003, $vararg_buffer1016) | 0;
HEAP32[17806] = $164;
HEAP32[$vararg_buffer1096 >> 2] = 0;
HEAP32[$vararg_buffer1096 + 4 >> 2] = 52984;
HEAP32[$vararg_buffer1096 + 8 >> 2] = 0;
HEAP32[$vararg_buffer1096 + 12 >> 2] = 0;
$165 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 52964, $vararg_buffer1096) | 0;
HEAP32[17807] = $165;
$166 = __ZN7HashAnyIPKciE9emptyHashEi(0) | 0;
HEAP32[17808] = $166;
$167 = __ZN7HashAnyIPKciE9emptyHashEi(0) | 0;
HEAP32[17809] = $167;
HEAP32[$vararg_buffer1102 >> 2] = 0;
HEAP32[$vararg_buffer1102 + 4 >> 2] = 52984;
HEAP32[$vararg_buffer1102 + 8 >> 2] = 0;
HEAP32[$vararg_buffer1102 + 12 >> 2] = 0;
$168 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 52964, $vararg_buffer1102) | 0;
HEAP32[17810] = $168;
HEAP32[$vararg_buffer1108 >> 2] = 0;
HEAP32[$vararg_buffer1108 + 4 >> 2] = 50850;
HEAP32[$vararg_buffer1108 + 8 >> 2] = 0;
HEAP32[$vararg_buffer1108 + 12 >> 2] = 52869;
HEAP32[$vararg_buffer1108 + 16 >> 2] = 0;
HEAP32[$vararg_buffer1108 + 20 >> 2] = 50906;
HEAP32[$vararg_buffer1108 + 24 >> 2] = 0;
HEAP32[$vararg_buffer1108 + 28 >> 2] = 51223;
HEAP32[$vararg_buffer1108 + 32 >> 2] = 0;
HEAP32[$vararg_buffer1108 + 36 >> 2] = 50913;
HEAP32[$vararg_buffer1108 + 40 >> 2] = 0;
HEAP32[$vararg_buffer1108 + 44 >> 2] = 0;
$169 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 50844, $vararg_buffer1108) | 0;
HEAP32[17811] = $169;
HEAP32[$vararg_buffer1122 >> 2] = 0;
HEAP32[$vararg_buffer1122 + 4 >> 2] = 51129;
HEAP32[$vararg_buffer1122 + 8 >> 2] = 0;
HEAP32[$vararg_buffer1122 + 12 >> 2] = 51229;
HEAP32[$vararg_buffer1122 + 16 >> 2] = 1;
HEAP32[$vararg_buffer1122 + 20 >> 2] = 52869;
HEAP32[$vararg_buffer1122 + 24 >> 2] = 0;
HEAP32[$vararg_buffer1122 + 28 >> 2] = 50906;
HEAP32[$vararg_buffer1122 + 32 >> 2] = 0;
HEAP32[$vararg_buffer1122 + 36 >> 2] = 51167;
HEAP32[$vararg_buffer1122 + 40 >> 2] = 0;
HEAP32[$vararg_buffer1122 + 44 >> 2] = 50844;
HEAP32[$vararg_buffer1122 + 48 >> 2] = 0;
HEAP32[$vararg_buffer1122 + 52 >> 2] = 51246;
HEAP32[$vararg_buffer1122 + 56 >> 2] = 1;
HEAP32[$vararg_buffer1122 + 60 >> 2] = 49714;
HEAP32[$vararg_buffer1122 + 64 >> 2] = 1;
HEAP32[$vararg_buffer1122 + 68 >> 2] = 51093;
HEAP32[$vararg_buffer1122 + 72 >> 2] = 1;
HEAP32[$vararg_buffer1122 + 76 >> 2] = 51205;
HEAP32[$vararg_buffer1122 + 80 >> 2] = 0;
HEAP32[$vararg_buffer1122 + 84 >> 2] = 51189;
HEAP32[$vararg_buffer1122 + 88 >> 2] = 0;
HEAP32[$vararg_buffer1122 + 92 >> 2] = 51098;
HEAP32[$vararg_buffer1122 + 96 >> 2] = 1;
HEAP32[$vararg_buffer1122 + 100 >> 2] = 50913;
HEAP32[$vararg_buffer1122 + 104 >> 2] = 0;
HEAP32[$vararg_buffer1122 + 108 >> 2] = 51252;
HEAP32[$vararg_buffer1122 + 112 >> 2] = 1;
HEAP32[$vararg_buffer1122 + 116 >> 2] = 51263;
HEAP32[$vararg_buffer1122 + 120 >> 2] = 1;
HEAP32[$vararg_buffer1122 + 124 >> 2] = 0;
$170 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 50850, $vararg_buffer1122) | 0;
HEAP32[17812] = $170;
HEAP32[$vararg_buffer1156 >> 2] = 0;
HEAP32[$vararg_buffer1156 + 4 >> 2] = 52964;
HEAP32[$vararg_buffer1156 + 8 >> 2] = 0;
HEAP32[$vararg_buffer1156 + 12 >> 2] = 52984;
HEAP32[$vararg_buffer1156 + 16 >> 2] = 0;
HEAP32[$vararg_buffer1156 + 20 >> 2] = 0;
$171 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 53405, $vararg_buffer1156) | 0;
HEAP32[17813] = $171;
$172 = __ZN7HashAnyIPKciE9emptyHashEi(-1) | 0;
HEAP32[17814] = $172;
HEAP32[$vararg_buffer1164 >> 2] = 0;
HEAP32[$vararg_buffer1164 + 4 >> 2] = 0;
$173 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 49705, $vararg_buffer1164) | 0;
HEAP32[17815] = $173;
HEAP32[$vararg_buffer1168 >> 2] = 0;
HEAP32[$vararg_buffer1168 + 4 >> 2] = 52984;
HEAP32[$vararg_buffer1168 + 8 >> 2] = 0;
HEAP32[$vararg_buffer1168 + 12 >> 2] = 0;
$174 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 52964, $vararg_buffer1168) | 0;
HEAP32[17816] = $174;
HEAP32[$vararg_buffer1174 >> 2] = 0;
HEAP32[$vararg_buffer1174 + 4 >> 2] = 53439;
HEAP32[$vararg_buffer1174 + 8 >> 2] = 0;
HEAP32[$vararg_buffer1174 + 12 >> 2] = 0;
$175 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 53424, $vararg_buffer1174) | 0;
HEAP32[17817] = $175;
HEAP32[$vararg_buffer1180 >> 2] = 0;
HEAP32[$vararg_buffer1180 + 4 >> 2] = 50850;
HEAP32[$vararg_buffer1180 + 8 >> 2] = 0;
HEAP32[$vararg_buffer1180 + 12 >> 2] = 52869;
HEAP32[$vararg_buffer1180 + 16 >> 2] = 0;
HEAP32[$vararg_buffer1180 + 20 >> 2] = 50906;
HEAP32[$vararg_buffer1180 + 24 >> 2] = 0;
HEAP32[$vararg_buffer1180 + 28 >> 2] = 50913;
HEAP32[$vararg_buffer1180 + 32 >> 2] = 0;
HEAP32[$vararg_buffer1180 + 36 >> 2] = 0;
$176 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 50844, $vararg_buffer1180) | 0;
HEAP32[17818] = $176;
HEAP32[$vararg_buffer1192 >> 2] = 0;
HEAP32[$vararg_buffer1192 + 4 >> 2] = 0;
$177 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 49705, $vararg_buffer1192) | 0;
HEAP32[17819] = $177;
$178 = HEAP32[17770] | 0;
$179 = HEAP32[17771] | 0;
$180 = HEAP32[17772] | 0;
$181 = HEAP32[17773] | 0;
$182 = HEAP32[17774] | 0;
$183 = HEAP32[17775] | 0;
$184 = HEAP32[17776] | 0;
$185 = HEAP32[17777] | 0;
$186 = HEAP32[17778] | 0;
$187 = HEAP32[17779] | 0;
$188 = HEAP32[17780] | 0;
$189 = HEAP32[17781] | 0;
$190 = HEAP32[17782] | 0;
$191 = HEAP32[17783] | 0;
$192 = HEAP32[17784] | 0;
$193 = HEAP32[17785] | 0;
$194 = HEAP32[17786] | 0;
$195 = HEAP32[17787] | 0;
$196 = HEAP32[17788] | 0;
$197 = HEAP32[17789] | 0;
$198 = HEAP32[17790] | 0;
$199 = HEAP32[17791] | 0;
$200 = HEAP32[17792] | 0;
$201 = HEAP32[17793] | 0;
$202 = HEAP32[17794] | 0;
$203 = HEAP32[17795] | 0;
$204 = HEAP32[17796] | 0;
$205 = HEAP32[17797] | 0;
$206 = HEAP32[17798] | 0;
$207 = HEAP32[17799] | 0;
$208 = HEAP32[17800] | 0;
$209 = HEAP32[17801] | 0;
$210 = HEAP32[17802] | 0;
$211 = HEAP32[17803] | 0;
$212 = HEAP32[17804] | 0;
$213 = HEAP32[17805] | 0;
$214 = HEAP32[17806] | 0;
$215 = HEAP32[17807] | 0;
$216 = HEAP32[17808] | 0;
$217 = HEAP32[17809] | 0;
$218 = HEAP32[17810] | 0;
$219 = HEAP32[17811] | 0;
$220 = HEAP32[17812] | 0;
$221 = HEAP32[17813] | 0;
$222 = HEAP32[17814] | 0;
$223 = HEAP32[17815] | 0;
$224 = HEAP32[17816] | 0;
$225 = HEAP32[17817] | 0;
$226 = HEAP32[17818] | 0;
HEAP32[$vararg_buffer1196 >> 2] = $178;
HEAP32[$vararg_buffer1196 + 4 >> 2] = 51376;
HEAP32[$vararg_buffer1196 + 8 >> 2] = $178;
HEAP32[$vararg_buffer1196 + 12 >> 2] = 51362;
HEAP32[$vararg_buffer1196 + 16 >> 2] = $178;
HEAP32[$vararg_buffer1196 + 20 >> 2] = 50486;
HEAP32[$vararg_buffer1196 + 24 >> 2] = $179;
HEAP32[$vararg_buffer1196 + 28 >> 2] = 51613;
HEAP32[$vararg_buffer1196 + 32 >> 2] = $180;
HEAP32[$vararg_buffer1196 + 36 >> 2] = 51760;
HEAP32[$vararg_buffer1196 + 40 >> 2] = $181;
HEAP32[$vararg_buffer1196 + 44 >> 2] = 57777;
HEAP32[$vararg_buffer1196 + 48 >> 2] = $182;
HEAP32[$vararg_buffer1196 + 52 >> 2] = 51565;
HEAP32[$vararg_buffer1196 + 56 >> 2] = $183;
HEAP32[$vararg_buffer1196 + 60 >> 2] = 50455;
HEAP32[$vararg_buffer1196 + 64 >> 2] = $184;
HEAP32[$vararg_buffer1196 + 68 >> 2] = 51752;
HEAP32[$vararg_buffer1196 + 72 >> 2] = $185;
HEAP32[$vararg_buffer1196 + 76 >> 2] = 51642;
HEAP32[$vararg_buffer1196 + 80 >> 2] = $186;
HEAP32[$vararg_buffer1196 + 84 >> 2] = 50466;
HEAP32[$vararg_buffer1196 + 88 >> 2] = $187;
HEAP32[$vararg_buffer1196 + 92 >> 2] = 51484;
HEAP32[$vararg_buffer1196 + 96 >> 2] = $188;
HEAP32[$vararg_buffer1196 + 100 >> 2] = 51438;
HEAP32[$vararg_buffer1196 + 104 >> 2] = $189;
HEAP32[$vararg_buffer1196 + 108 >> 2] = 51313;
HEAP32[$vararg_buffer1196 + 112 >> 2] = $190;
HEAP32[$vararg_buffer1196 + 116 >> 2] = 51779;
HEAP32[$vararg_buffer1196 + 120 >> 2] = $191;
HEAP32[$vararg_buffer1196 + 124 >> 2] = 51769;
HEAP32[$vararg_buffer1196 + 128 >> 2] = $192;
HEAP32[$vararg_buffer1196 + 132 >> 2] = 51804;
HEAP32[$vararg_buffer1196 + 136 >> 2] = $193;
HEAP32[$vararg_buffer1196 + 140 >> 2] = 51576;
HEAP32[$vararg_buffer1196 + 144 >> 2] = $194;
HEAP32[$vararg_buffer1196 + 148 >> 2] = 51655;
HEAP32[$vararg_buffer1196 + 152 >> 2] = $195;
HEAP32[$vararg_buffer1196 + 156 >> 2] = 52663;
HEAP32[$vararg_buffer1196 + 160 >> 2] = $196;
HEAP32[$vararg_buffer1196 + 164 >> 2] = 51473;
HEAP32[$vararg_buffer1196 + 168 >> 2] = $197;
HEAP32[$vararg_buffer1196 + 172 >> 2] = 51405;
HEAP32[$vararg_buffer1196 + 176 >> 2] = $198;
HEAP32[$vararg_buffer1196 + 180 >> 2] = 51927;
HEAP32[$vararg_buffer1196 + 184 >> 2] = $199;
HEAP32[$vararg_buffer1196 + 188 >> 2] = 51880;
HEAP32[$vararg_buffer1196 + 192 >> 2] = $200;
HEAP32[$vararg_buffer1196 + 196 >> 2] = 51628;
HEAP32[$vararg_buffer1196 + 200 >> 2] = $201;
HEAP32[$vararg_buffer1196 + 204 >> 2] = 51495;
HEAP32[$vararg_buffer1196 + 208 >> 2] = $202;
HEAP32[$vararg_buffer1196 + 212 >> 2] = 50497;
HEAP32[$vararg_buffer1196 + 216 >> 2] = $203;
HEAP32[$vararg_buffer1196 + 220 >> 2] = 51725;
HEAP32[$vararg_buffer1196 + 224 >> 2] = $204;
HEAP32[$vararg_buffer1196 + 228 >> 2] = 51526;
HEAP32[$vararg_buffer1196 + 232 >> 2] = $205;
HEAP32[$vararg_buffer1196 + 236 >> 2] = 51336;
HEAP32[$vararg_buffer1196 + 240 >> 2] = $206;
HEAP32[$vararg_buffer1196 + 244 >> 2] = 51673;
HEAP32[$vararg_buffer1196 + 248 >> 2] = $207;
HEAP32[$vararg_buffer1196 + 252 >> 2] = 51820;
HEAP32[$vararg_buffer1196 + 256 >> 2] = $208;
HEAP32[$vararg_buffer1196 + 260 >> 2] = 51420;
HEAP32[$vararg_buffer1196 + 264 >> 2] = $209;
HEAP32[$vararg_buffer1196 + 268 >> 2] = 51451;
HEAP32[$vararg_buffer1196 + 272 >> 2] = $210;
HEAP32[$vararg_buffer1196 + 276 >> 2] = 51604;
HEAP32[$vararg_buffer1196 + 280 >> 2] = $211;
HEAP32[$vararg_buffer1196 + 284 >> 2] = 51866;
HEAP32[$vararg_buffer1196 + 288 >> 2] = $212;
HEAP32[$vararg_buffer1196 + 292 >> 2] = 51839;
HEAP32[$vararg_buffer1196 + 296 >> 2] = $213;
HEAP32[$vararg_buffer1196 + 300 >> 2] = 51325;
HEAP32[$vararg_buffer1196 + 304 >> 2] = $214;
HEAP32[$vararg_buffer1196 + 308 >> 2] = 51739;
HEAP32[$vararg_buffer1196 + 312 >> 2] = $215;
HEAP32[$vararg_buffer1196 + 316 >> 2] = 51683;
HEAP32[$vararg_buffer1196 + 320 >> 2] = $216;
HEAP32[$vararg_buffer1196 + 324 >> 2] = 51307;
HEAP32[$vararg_buffer1196 + 328 >> 2] = $217;
HEAP32[$vararg_buffer1196 + 332 >> 2] = 51706;
HEAP32[$vararg_buffer1196 + 336 >> 2] = $218;
HEAP32[$vararg_buffer1196 + 340 >> 2] = 51553;
HEAP32[$vararg_buffer1196 + 344 >> 2] = $219;
HEAP32[$vararg_buffer1196 + 348 >> 2] = 51511;
HEAP32[$vararg_buffer1196 + 352 >> 2] = $220;
HEAP32[$vararg_buffer1196 + 356 >> 2] = 51825;
HEAP32[$vararg_buffer1196 + 360 >> 2] = $221;
HEAP32[$vararg_buffer1196 + 364 >> 2] = 51716;
HEAP32[$vararg_buffer1196 + 368 >> 2] = $222;
HEAP32[$vararg_buffer1196 + 372 >> 2] = 51692;
HEAP32[$vararg_buffer1196 + 376 >> 2] = $223;
HEAP32[$vararg_buffer1196 + 380 >> 2] = 51788;
HEAP32[$vararg_buffer1196 + 384 >> 2] = $224;
HEAP32[$vararg_buffer1196 + 388 >> 2] = 57271;
HEAP32[$vararg_buffer1196 + 392 >> 2] = $225;
HEAP32[$vararg_buffer1196 + 396 >> 2] = 51462;
HEAP32[$vararg_buffer1196 + 400 >> 2] = $226;
HEAP32[$vararg_buffer1196 + 404 >> 2] = 51852;
HEAP32[$vararg_buffer1196 + 408 >> 2] = $177;
HEAP32[$vararg_buffer1196 + 412 >> 2] = 0;
$227 = __ZN7HashAnyIPKcPS_IS1_iEE8makeHashES3_S1_z(0, 51353, $vararg_buffer1196) | 0;
HEAP32[17767] = $227;
__Z21CreateNonmanualTablesv();
STACKTOP = sp;
return;
}
function _prologProcessor($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0$i778$i = 0, $$0$i785$i = 0, $$0$ph$i$i = 0, $$0103$i$i = 0, $$018$i$i = 0, $$018$i717$i = 0, $$018$i733$i = 0, $$018$i754$i = 0, $$018$i825$i = 0, $$018$i831$i = 0, $$01920$i$i = 0, $$01920$i708$i = 0, $$01920$i809$i = 0, $$021$i$i = 0, $$021$i707$i = 0, $$021$i808$i = 0, $$024$ph$i$i = 0, $$05154$i$i = 0, $$05154$i743$i = 0, $$0622$i = 0, $$0626$i = 0, $$0628$i = 0, $$0629$i = 0, $$0634$i = 0, $$067$i$i = 0, $$0673$i = 0, $$071$i$i = 0, $$09$i$i = 0, $$1$i$i = 0, $$1$i710$i = 0, $$1$i811$i = 0, $$10646$i = 0, $$152$i$i$i = 0, $$15651$i = 0, $$1630$i = 0, $$1635$i = 0, $$1637$i = 0, $$16652$i = 0, $$170$ph$i$i = 0, $$19655$i = 0, $$2$i$i = 0, $$2$i713$i = 0, $$2$i814$i = 0, $$21657$i = 0, $$21918$i = 0, $$21918$i$ph428 = 0, $$25$i = 0, $$2624912$i = 0, $$2638$i = 0, $$3$ph$i$i = 0, $$5641$i = 0, $$683$i = 0, $$9645$i = 0, $$in$i$i = 0, $$in$i$i$phi = 0, $$in$i716$i = 0, $$in$i716$i$phi = 0, $$in$i732$i = 0, $$in$i732$i$phi = 0, $$in$i753$i = 0, $$in$i753$i$phi = 0, $$in$i824$i = 0, $$in$i824$i$phi = 0, $$in$i830$i = 0, $$in$i830$i$phi = 0, $$phi$trans$insert$i$i = 0, $$phi$trans$insert$i739$i = 0, $$pre$i727$i = 0, $$pre$i740$i = 0, $$pre1206$i = 0, $1001 = 0, $1004 = 0, $1006 = 0, $1008 = 0, $101 = 0, $1013 = 0, $1016 = 0, $1019 = 0, $1022 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1030 = 0, $1035 = 0, $1037 = 0, $1038 = 0, $1045 = 0, $1058 = 0, $1065 = 0, $1066 = 0, $1068 = 0, $107 = 0, $1079 = 0, $108 = 0, $1085 = 0, $1086 = 0, $1089 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $1104 = 0, $1105 = 0, $111 = 0, $1112 = 0, $1115 = 0, $1121 = 0, $1122 = 0, $1125 = 0, $1138 = 0, $1140 = 0, $1161 = 0, $1166 = 0, $117 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1179 = 0, $1180 = 0, $1183 = 0, $1188 = 0, $1191 = 0, $1197 = 0, $1198 = 0, $12 = 0, $120 = 0, $1201 = 0, $1209 = 0, $1223 = 0, $1225 = 0, $123 = 0, $1233 = 0, $1234 = 0, $1241 = 0, $1271 = 0, $1273 = 0, $1279 = 0, $1281 = 0, $1288 = 0, $1301 = 0, $1304 = 0, $133 = 0, $137 = 0, $14 = 0, $142 = 0, $151 = 0, $157 = 0, $158 = 0, $16 = 0, $160 = 0, $163 = 0, $17 = 0, $174 = 0, $18 = 0, $188 = 0, $19 = 0, $192 = 0, $197 = 0, $20 = 0, $206 = 0, $21 = 0, $212 = 0, $213 = 0, $215 = 0, $218 = 0, $22 = 0, $229 = 0, $23 = 0, $237 = 0, $24 = 0, $243 = 0, $246 = 0, $249 = 0, $25 = 0, $251 = 0, $259 = 0, $26 = 0, $262 = 0, $265 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $28 = 0, $283 = 0, $285 = 0, $287 = 0, $29 = 0, $290 = 0, $291 = 0, $298 = 0, $299 = 0, $30 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $31 = 0, $310 = 0, $311 = 0, $318 = 0, $32 = 0, $321 = 0, $327 = 0, $328 = 0, $33 = 0, $331 = 0, $34 = 0, $340 = 0, $35 = 0, $354 = 0, $356 = 0, $36 = 0, $362 = 0, $363 = 0, $369 = 0, $37 = 0, $374 = 0, $38 = 0, $381 = 0, $386 = 0, $387 = 0, $388 = 0, $39 = 0, $393 = 0, $399 = 0, $4 = 0, $40 = 0, $405 = 0, $41 = 0, $410 = 0, $414 = 0, $417 = 0, $42 = 0, $420 = 0, $422 = 0, $429 = 0, $43 = 0, $431 = 0, $437 = 0, $44 = 0, $443 = 0, $444 = 0, $45 = 0, $450 = 0, $451 = 0, $46 = 0, $461 = 0, $462 = 0, $463 = 0, $466 = 0, $469 = 0, $47 = 0, $473 = 0, $475 = 0, $48 = 0, $480 = 0, $483 = 0, $487 = 0, $49 = 0, $492 = 0, $496 = 0, $497 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $505 = 0, $51 = 0, $511 = 0, $516 = 0, $52 = 0, $520 = 0, $523 = 0, $526 = 0, $528 = 0, $53 = 0, $535 = 0, $537 = 0, $54 = 0, $543 = 0, $549 = 0, $55 = 0, $550 = 0, $556 = 0, $557 = 0, $56 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $572 = 0, $575 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $584 = 0, $585 = 0, $586 = 0, $59 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $599 = 0, $6 = 0, $60 = 0, $61 = 0, $615 = 0, $62 = 0, $620 = 0, $622 = 0, $626 = 0, $63 = 0, $632 = 0, $637 = 0, $639 = 0, $64 = 0, $65 = 0, $650 = 0, $652 = 0, $66 = 0, $660 = 0, $663 = 0, $67 = 0, $677 = 0, $68 = 0, $681 = 0, $686 = 0, $69 = 0, $695 = 0, $7 = 0, $70 = 0, $701 = 0, $702 = 0, $707 = 0, $71 = 0, $717 = 0, $72 = 0, $721 = 0, $726 = 0, $73 = 0, $735 = 0, $741 = 0, $745 = 0, $75 = 0, $756 = 0, $758 = 0, $775 = 0, $780 = 0, $789 = 0, $79 = 0, $795 = 0, $8 = 0, $80 = 0, $804 = 0, $807 = 0, $817 = 0, $82 = 0, $820 = 0, $837 = 0, $842 = 0, $851 = 0, $857 = 0, $858 = 0, $860 = 0, $87 = 0, $875 = 0, $884 = 0, $889 = 0, $898 = 0, $9 = 0, $904 = 0, $905 = 0, $916 = 0, $92 = 0, $920 = 0, $925 = 0, $934 = 0, $940 = 0, $941 = 0, $943 = 0, $946 = 0, $957 = 0, $966 = 0, $970 = 0, $975 = 0, $984 = 0, $990 = 0, $991 = 0, $998 = 0, label = 0, sp = 0, $$0628$i$looptemp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$4 = sp + 12 | 0;
$5 = sp + 8 | 0;
$6 = sp + 4 | 0;
$7 = sp;
HEAP32[$7 >> 2] = $1;
$8 = $0 + 144 | 0;
$9 = HEAP32[$8 >> 2] | 0;
$11 = FUNCTION_TABLE_iiiii[HEAP32[$9 >> 2] & 63]($9, $1, $2, $7) | 0;
$12 = HEAP32[$8 >> 2] | 0;
$14 = $0 + 468 | 0;
$16 = (HEAP8[$14 >> 0] | 0) == 0;
HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
$17 = $0 + 340 | 0;
$18 = HEAP32[$17 >> 2] | 0;
$19 = $0 + 272 | 0;
$20 = $0 + 276 | 0;
$$pre1206$i = $0 + 284 | 0;
$21 = $0 + 252 | 0;
$22 = $0 + 80 | 0;
$23 = $0 + 44 | 0;
$24 = $0 + 48 | 0;
$25 = $0 + 4 | 0;
$26 = $0 + 464 | 0;
$27 = $0 + 84 | 0;
$28 = $0 + 308 | 0;
$29 = $0 + 400 | 0;
$30 = $0 + 412 | 0;
$31 = $0 + 408 | 0;
$32 = $0 + 416 | 0;
$33 = $0 + 304 | 0;
$34 = $0 + 312 | 0;
$35 = $0 + 404 | 0;
$36 = $18 + 129 | 0;
$37 = $18 + 128 | 0;
$38 = $0 + 300 | 0;
$39 = $18 + 80 | 0;
$40 = $18 + 92 | 0;
$41 = $18 + 88 | 0;
$42 = $18 + 96 | 0;
$43 = $0 + 136 | 0;
$44 = $0 + 88 | 0;
$45 = $0 + 328 | 0;
$46 = $0 + 132 | 0;
$47 = $0 + 332 | 0;
$48 = $0 + 336 | 0;
$49 = $0 + 316 | 0;
$50 = $0 + 337 | 0;
$51 = $0 + 12 | 0;
$52 = $0 + 16 | 0;
$53 = $18 + 120 | 0;
$54 = $18 + 116 | 0;
$55 = $0 + 344 | 0;
$56 = $18 + 130 | 0;
$57 = $0 + 108 | 0;
$58 = $0 + 92 | 0;
$59 = $0 + 460 | 0;
$60 = $0 + 324 | 0;
$61 = $0 + 320 | 0;
$62 = $0 + 96 | 0;
$63 = $0 + 256 | 0;
$64 = $0 + 452 | 0;
$65 = $0 + 448 | 0;
$66 = $18 + 140 | 0;
$67 = $18 + 164 | 0;
$68 = $18 + 160 | 0;
$69 = $18 + 144 | 0;
$70 = $0 + 128 | 0;
$71 = $18 + 156 | 0;
$72 = $18 + 148 | 0;
$$0622$i = $12;
$$0626$i = $1;
$$0629$i = $11;
L1 : while (1) {
HEAP32[$19 >> 2] = $$0626$i;
$73 = HEAP32[$6 >> 2] | 0;
HEAP32[$20 >> 2] = $73;
$75 = $73;
if (($$0629$i | 0) < 1) {
if ($16 & ($$0629$i | 0) != 0) {
label = 4;
break;
}
switch ($$0629$i | 0) {
case -1:
{
$$21918$i$ph428 = 5;
label = 503;
break L1;
break;
}
case 0:
{
label = 6;
break L1;
break;
}
case -2:
{
label = 504;
break L1;
break;
}
case -4:
{
$$21918$i = 3;
label = 505;
break L1;
break;
}
default:
{}
}
HEAP32[$6 >> 2] = $2;
$$1630$i = 0 - $$0629$i | 0;
$79 = $2;
} else {
$$1630$i = $$0629$i;
$79 = $75;
}
$80 = FUNCTION_TABLE_iiiiii[HEAP32[$21 >> 2] & 63]($21, $$1630$i, $$0626$i, $79, $$0622$i) | 0;
L8 : do switch ($80 | 0) {
case 2:
{
label = 88;
break L1;
break;
}
case -1:
{
label = 399;
break L1;
break;
}
case 1:
{
$82 = _processXmlDecl($0, 0, $$0626$i, HEAP32[$6 >> 2] | 0) | 0;
if ($82 | 0) {
$$21918$i$ph428 = $82;
label = 503;
break L1;
}
$$2624912$i = HEAP32[$8 >> 2] | 0;
break;
}
case 4:
{
if (!(HEAP32[$27 >> 2] | 0)) $$1637$i = 1; else {
$87 = HEAP32[$6 >> 2] | 0;
HEAP32[$4 >> 2] = $$0626$i;
if (!(HEAP32[$30 >> 2] | 0)) if (!((_poolGrow($29) | 0) << 24 >> 24)) {
label = 17;
break L1;
}
$92 = $$0622$i + 56 | 0;
while (1) {
FUNCTION_TABLE_viiiii[HEAP32[$92 >> 2] & 15]($$0622$i, $4, $87, $30, HEAP32[$31 >> 2] | 0);
if ((HEAP32[$4 >> 2] | 0) == ($87 | 0)) break;
if (!((_poolGrow($29) | 0) << 24 >> 24)) {
label = 17;
break L1;
}
}
if (!(HEAP32[$32 >> 2] | 0)) {
label = 22;
break L1;
}
$101 = HEAP32[$30 >> 2] | 0;
if (($101 | 0) == (HEAP32[$31 >> 2] | 0)) {
if (!((_poolGrow($29) | 0) << 24 >> 24)) {
label = 22;
break L1;
}
$107 = HEAP32[$30 >> 2] | 0;
} else $107 = $101;
HEAP32[$30 >> 2] = $107 + 1;
HEAP8[$107 >> 0] = 0;
$108 = HEAP32[$32 >> 2] | 0;
HEAP32[$33 >> 2] = $108;
if (!$108) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
}
HEAP32[$32 >> 2] = HEAP32[$30 >> 2];
HEAP32[$34 >> 2] = 0;
$$1637$i = 0;
}
HEAP32[$28 >> 2] = 0;
$$25$i = $$1637$i;
label = 491;
break;
}
case 7:
{
$111 = HEAP32[$27 >> 2] | 0;
if (!$111) label = 492; else {
FUNCTION_TABLE_viiiii[$111 & 15](HEAP32[$25 >> 2] | 0, HEAP32[$33 >> 2] | 0, HEAP32[$28 >> 2] | 0, HEAP32[$34 >> 2] | 0, 1);
HEAP32[$33 >> 2] = 0;
$117 = HEAP32[$35 >> 2] | 0;
if (!$117) HEAP32[$35 >> 2] = HEAP32[$29 >> 2]; else {
$120 = HEAP32[$29 >> 2] | 0;
if ($120 | 0) {
$$018$i$i = $120;
$$in$i$i = $117;
while (1) {
$123 = HEAP32[$$018$i$i >> 2] | 0;
HEAP32[$$018$i$i >> 2] = $$in$i$i;
HEAP32[$35 >> 2] = $$018$i$i;
if (!$123) break; else {
$$in$i$i$phi = $$018$i$i;
$$018$i$i = $123;
$$in$i$i = $$in$i$i$phi;
}
}
}
}
HEAP32[$29 >> 2] = 0;
HEAP32[$32 >> 2] = 0;
HEAP32[$30 >> 2] = 0;
HEAP32[$31 >> 2] = 0;
$$2624912$i = $$0622$i;
}
break;
}
case 6:
{
HEAP8[$36 >> 0] = 1;
if (!(HEAP32[$27 >> 2] | 0)) label = 56; else {
if (!(FUNCTION_TABLE_iiiii[HEAP32[$$0622$i + 52 >> 2] & 63]($$0622$i, $$0626$i, HEAP32[$6 >> 2] | 0, $19) | 0)) {
$$21918$i$ph428 = 32;
label = 503;
break L1;
}
$133 = HEAP32[$$0622$i + 64 >> 2] | 0;
$137 = (HEAP32[$6 >> 2] | 0) + (0 - $133) | 0;
HEAP32[$4 >> 2] = $$0626$i + $133;
if (!(HEAP32[$30 >> 2] | 0)) if (!((_poolGrow($29) | 0) << 24 >> 24)) {
label = 39;
break L1;
}
$142 = $$0622$i + 56 | 0;
while (1) {
FUNCTION_TABLE_viiiii[HEAP32[$142 >> 2] & 15]($$0622$i, $4, $137, $30, HEAP32[$31 >> 2] | 0);
if ((HEAP32[$4 >> 2] | 0) == ($137 | 0)) break;
if (!((_poolGrow($29) | 0) << 24 >> 24)) {
label = 39;
break L1;
}
}
if (!(HEAP32[$32 >> 2] | 0)) {
label = 44;
break L1;
}
$151 = HEAP32[$30 >> 2] | 0;
if (($151 | 0) == (HEAP32[$31 >> 2] | 0)) {
if (!((_poolGrow($29) | 0) << 24 >> 24)) {
label = 44;
break L1;
}
$157 = HEAP32[$30 >> 2] | 0;
} else $157 = $151;
HEAP32[$30 >> 2] = $157 + 1;
HEAP8[$157 >> 0] = 0;
$158 = HEAP32[$32 >> 2] | 0;
HEAP32[$34 >> 2] = $158;
if (!$158) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
}
$160 = HEAP8[$158 >> 0] | 0;
if (!($160 << 24 >> 24)) $$2$i$i = $158; else {
$$01920$i$i = $158;
$$021$i$i = $158;
$163 = $160;
while (1) {
switch ($163 << 24 >> 24 | 0) {
case 10:
case 13:
case 32:
{
if (($$01920$i$i | 0) == ($158 | 0)) $$1$i$i = $158; else if ((HEAP8[$$01920$i$i + -1 >> 0] | 0) == 32) $$1$i$i = $$01920$i$i; else {
HEAP8[$$01920$i$i >> 0] = 32;
$$1$i$i = $$01920$i$i + 1 | 0;
}
break;
}
default:
{
HEAP8[$$01920$i$i >> 0] = $163;
$$1$i$i = $$01920$i$i + 1 | 0;
}
}
$$021$i$i = $$021$i$i + 1 | 0;
$163 = HEAP8[$$021$i$i >> 0] | 0;
if (!($163 << 24 >> 24)) break; else $$01920$i$i = $$1$i$i;
}
if (($$1$i$i | 0) == ($158 | 0)) $$2$i$i = $158; else {
$174 = $$1$i$i + -1 | 0;
$$2$i$i = (HEAP8[$174 >> 0] | 0) == 32 ? $174 : $$1$i$i;
}
}
HEAP8[$$2$i$i >> 0] = 0;
HEAP32[$32 >> 2] = HEAP32[$30 >> 2];
$$2638$i = 0;
label = 57;
}
break;
}
case 14:
{
label = 56;
break;
}
case 8:
{
$237 = HEAP32[$33 >> 2] | 0;
if (!$237) $$5641$i = 1; else {
FUNCTION_TABLE_viiiii[HEAP32[$27 >> 2] & 15](HEAP32[$25 >> 2] | 0, $237, HEAP32[$28 >> 2] | 0, HEAP32[$34 >> 2] | 0, 0);
$243 = HEAP32[$35 >> 2] | 0;
if (!$243) HEAP32[$35 >> 2] = HEAP32[$29 >> 2]; else {
$246 = HEAP32[$29 >> 2] | 0;
if ($246 | 0) {
$$018$i717$i = $246;
$$in$i716$i = $243;
while (1) {
$249 = HEAP32[$$018$i717$i >> 2] | 0;
HEAP32[$$018$i717$i >> 2] = $$in$i716$i;
HEAP32[$35 >> 2] = $$018$i717$i;
if (!$249) break; else {
$$in$i716$i$phi = $$018$i717$i;
$$018$i717$i = $249;
$$in$i716$i = $$in$i716$i$phi;
}
}
}
}
HEAP32[$29 >> 2] = 0;
HEAP32[$32 >> 2] = 0;
HEAP32[$30 >> 2] = 0;
HEAP32[$31 >> 2] = 0;
$$5641$i = 0;
}
$251 = HEAP32[$44 >> 2] | 0;
if (!$251) {
$$25$i = $$5641$i;
label = 491;
} else {
FUNCTION_TABLE_vi[$251 & 255](HEAP32[$25 >> 2] | 0);
$$2624912$i = $$0622$i;
}
break;
}
case 34:
{
$302 = HEAP32[$6 >> 2] | 0;
$303 = HEAP32[$17 >> 2] | 0;
$304 = $303 + 80 | 0;
HEAP32[$4 >> 2] = $$0626$i;
$305 = $303 + 92 | 0;
if (!(HEAP32[$305 >> 2] | 0)) if (!((_poolGrow($304) | 0) << 24 >> 24)) {
label = 104;
break L1;
}
$310 = $$0622$i + 56 | 0;
$311 = $303 + 88 | 0;
while (1) {
FUNCTION_TABLE_viiiii[HEAP32[$310 >> 2] & 15]($$0622$i, $4, $302, $305, HEAP32[$311 >> 2] | 0);
if ((HEAP32[$4 >> 2] | 0) == ($302 | 0)) break;
if (!((_poolGrow($304) | 0) << 24 >> 24)) {
label = 104;
break L1;
}
}
$318 = $303 + 96 | 0;
if (!(HEAP32[$318 >> 2] | 0)) {
label = 114;
break L1;
}
$321 = HEAP32[$305 >> 2] | 0;
if (($321 | 0) == (HEAP32[$311 >> 2] | 0)) {
if (!((_poolGrow($304) | 0) << 24 >> 24)) {
label = 114;
break L1;
}
$327 = HEAP32[$305 >> 2] | 0;
} else $327 = $321;
HEAP32[$305 >> 2] = $327 + 1;
HEAP8[$327 >> 0] = 0;
$328 = HEAP32[$318 >> 2] | 0;
if (!$328) {
label = 114;
break L1;
}
$331 = _lookup($303 + 20 | 0, $328, 24) | 0;
if (!$331) {
label = 114;
break L1;
}
if ((HEAP32[$331 >> 2] | 0) == ($328 | 0)) {
HEAP32[$318 >> 2] = HEAP32[$305 >> 2];
if (!(_setElementTypePrefix(HEAP32[$17 >> 2] | 0, $331) | 0)) {
label = 114;
break L1;
}
} else HEAP32[$305 >> 2] = HEAP32[$318 >> 2];
HEAP32[$45 >> 2] = $331;
label = 126;
break;
}
case 22:
{
$340 = _getAttributeId($0, $$0622$i, $$0626$i, HEAP32[$6 >> 2] | 0) | 0;
HEAP32[$47 >> 2] = $340;
if (!$340) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
}
HEAP8[$48 >> 0] = 0;
HEAP32[$49 >> 2] = 0;
HEAP8[$50 >> 0] = 0;
label = 126;
break;
}
case 23:
{
HEAP8[$48 >> 0] = 1;
HEAP32[$49 >> 2] = 58461;
label = 126;
break;
}
case 24:
{
HEAP8[$50 >> 0] = 1;
HEAP32[$49 >> 2] = 58467;
label = 126;
break;
}
case 25:
{
HEAP32[$49 >> 2] = 58470;
label = 126;
break;
}
case 26:
{
HEAP32[$49 >> 2] = 58476;
label = 126;
break;
}
case 27:
{
HEAP32[$49 >> 2] = 58483;
label = 126;
break;
}
case 28:
{
HEAP32[$49 >> 2] = 58490;
label = 126;
break;
}
case 29:
{
HEAP32[$49 >> 2] = 58499;
label = 126;
break;
}
case 30:
{
HEAP32[$49 >> 2] = 58507;
label = 126;
break;
}
case 32:
case 31:
{
if (!(HEAP8[$37 >> 0] | 0)) label = 492; else if (!(HEAP32[$46 >> 2] | 0)) label = 492; else {
$$0673$i = (HEAP32[$49 >> 2] | 0) == 0 ? (($80 | 0) == 32 ? 58516 : 58526) : 58528;
$354 = HEAP8[$$0673$i >> 0] | 0;
if ($354 << 24 >> 24) {
$$09$i$i = $$0673$i;
$1304 = $354;
do {
$356 = HEAP32[$30 >> 2] | 0;
if (($356 | 0) == (HEAP32[$31 >> 2] | 0)) {
if (!((_poolGrow($29) | 0) << 24 >> 24)) {
$$21918$i = 1;
label = 505;
break L1;
}
$362 = HEAP32[$30 >> 2] | 0;
$363 = HEAP8[$$09$i$i >> 0] | 0;
} else {
$362 = $356;
$363 = $1304;
}
HEAP32[$30 >> 2] = $362 + 1;
HEAP8[$362 >> 0] = $363;
$$09$i$i = $$09$i$i + 1 | 0;
$1304 = HEAP8[$$09$i$i >> 0] | 0;
} while ($1304 << 24 >> 24 != 0);
}
if (!(HEAP32[$32 >> 2] | 0)) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
}
$369 = HEAP32[$6 >> 2] | 0;
HEAP32[$4 >> 2] = $$0626$i;
if (!(HEAP32[$30 >> 2] | 0)) if (!((_poolGrow($29) | 0) << 24 >> 24)) {
label = 141;
break L1;
}
$374 = $$0622$i + 56 | 0;
while (1) {
FUNCTION_TABLE_viiiii[HEAP32[$374 >> 2] & 15]($$0622$i, $4, $369, $30, HEAP32[$31 >> 2] | 0);
if ((HEAP32[$4 >> 2] | 0) == ($369 | 0)) break;
if (!((_poolGrow($29) | 0) << 24 >> 24)) {
label = 141;
break L1;
}
}
$381 = HEAP32[$32 >> 2] | 0;
if (!$381) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
}
HEAP32[$49 >> 2] = $381;
$$2624912$i = $$0622$i;
}
break;
}
case 36:
case 35:
{
if (!(HEAP8[$37 >> 0] | 0)) label = 492; else {
$386 = HEAP32[$45 >> 2] | 0;
$387 = HEAP32[$47 >> 2] | 0;
$388 = HEAP8[$48 >> 0] | 0;
$$phi$trans$insert$i$i = $386 + 12 | 0;
$$pre$i727$i = HEAP32[$$phi$trans$insert$i$i >> 2] | 0;
L126 : do if (!(HEAP8[$50 >> 0] | 0)) label = 153; else {
if (($$pre$i727$i | 0) > 0) {
$393 = HEAP32[$386 + 20 >> 2] | 0;
$$05154$i$i = 0;
do {
if ((HEAP32[$393 + ($$05154$i$i * 12 | 0) >> 2] | 0) == ($387 | 0)) break L126;
$$05154$i$i = $$05154$i$i + 1 | 0;
} while (($$05154$i$i | 0) < ($$pre$i727$i | 0));
}
$399 = $386 + 8 | 0;
if (!(HEAP32[$399 >> 2] | 0)) if (!(HEAP8[$387 + 9 >> 0] | 0)) {
HEAP32[$399 >> 2] = $387;
label = 153;
} else label = 153; else label = 153;
} while (0);
if ((label | 0) == 153) {
label = 0;
$405 = $386 + 16 | 0;
do if (($$pre$i727$i | 0) == (HEAP32[$405 >> 2] | 0)) {
if (!$$pre$i727$i) {
HEAP32[$405 >> 2] = 8;
$410 = FUNCTION_TABLE_ii[HEAP32[$51 >> 2] & 63](96) | 0;
HEAP32[$386 + 20 >> 2] = $410;
if (!$410) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
} else {
$422 = $410;
break;
}
}
$414 = $386 + 20 | 0;
$417 = FUNCTION_TABLE_iii[HEAP32[$52 >> 2] & 63](HEAP32[$414 >> 2] | 0, $$pre$i727$i * 24 | 0) | 0;
if (!$417) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
}
HEAP32[$405 >> 2] = $$pre$i727$i << 1;
HEAP32[$414 >> 2] = $417;
$422 = $417;
} else $422 = HEAP32[$386 + 20 >> 2] | 0; while (0);
$420 = HEAP32[$$phi$trans$insert$i$i >> 2] | 0;
HEAP32[$422 + ($420 * 12 | 0) >> 2] = $387;
HEAP32[$422 + ($420 * 12 | 0) + 8 >> 2] = 0;
HEAP8[$422 + ($420 * 12 | 0) + 4 >> 0] = $388;
if (!($388 << 24 >> 24)) HEAP8[$387 + 8 >> 0] = 1;
HEAP32[$$phi$trans$insert$i$i >> 2] = (HEAP32[$$phi$trans$insert$i$i >> 2] | 0) + 1;
}
$429 = HEAP32[$46 >> 2] | 0;
if (!$429) label = 492; else {
$431 = HEAP32[$49 >> 2] | 0;
if (!$431) label = 492; else {
switch (HEAP8[$431 >> 0] | 0) {
case 40:
{
label = 166;
break;
}
case 78:
{
if ((HEAP8[$431 + 1 >> 0] | 0) == 79) label = 166; else {
$461 = $429;
$462 = $431;
}
break;
}
default:
{
$461 = $429;
$462 = $431;
}
}
if ((label | 0) == 166) {
label = 0;
$437 = HEAP32[$30 >> 2] | 0;
if (($437 | 0) == (HEAP32[$31 >> 2] | 0)) {
if (!((_poolGrow($29) | 0) << 24 >> 24)) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
}
$443 = HEAP32[$30 >> 2] | 0;
} else $443 = $437;
HEAP32[$30 >> 2] = $443 + 1;
HEAP8[$443 >> 0] = 41;
$444 = HEAP32[$30 >> 2] | 0;
if (($444 | 0) == (HEAP32[$31 >> 2] | 0)) {
if (!((_poolGrow($29) | 0) << 24 >> 24)) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
}
$450 = HEAP32[$30 >> 2] | 0;
} else $450 = $444;
HEAP32[$30 >> 2] = $450 + 1;
HEAP8[$450 >> 0] = 0;
$451 = HEAP32[$32 >> 2] | 0;
HEAP32[$49 >> 2] = $451;
HEAP32[$32 >> 2] = HEAP32[$30 >> 2];
$461 = HEAP32[$46 >> 2] | 0;
$462 = $451;
}
HEAP32[$20 >> 2] = $$0626$i;
FUNCTION_TABLE_viiiiii[$461 & 7](HEAP32[$25 >> 2] | 0, HEAP32[HEAP32[$45 >> 2] >> 2] | 0, HEAP32[HEAP32[$47 >> 2] >> 2] | 0, $462, 0, ($80 | 0) == 36 & 1);
$463 = HEAP32[$35 >> 2] | 0;
if (!$463) HEAP32[$35 >> 2] = HEAP32[$29 >> 2]; else {
$466 = HEAP32[$29 >> 2] | 0;
if ($466 | 0) {
$$018$i733$i = $466;
$$in$i732$i = $463;
while (1) {
$469 = HEAP32[$$018$i733$i >> 2] | 0;
HEAP32[$$018$i733$i >> 2] = $$in$i732$i;
HEAP32[$35 >> 2] = $$018$i733$i;
if (!$469) break; else {
$$in$i732$i$phi = $$018$i733$i;
$$018$i733$i = $469;
$$in$i732$i = $$in$i732$i$phi;
}
}
}
}
HEAP32[$29 >> 2] = 0;
HEAP32[$32 >> 2] = 0;
HEAP32[$30 >> 2] = 0;
HEAP32[$31 >> 2] = 0;
$$2624912$i = $$0622$i;
}
}
}
break;
}
case 38:
case 37:
{
if (!(HEAP8[$37 >> 0] | 0)) label = 492; else {
$473 = HEAP8[$48 >> 0] | 0;
$475 = HEAP32[$$0622$i + 64 >> 2] | 0;
$480 = _appendAttributeValue($0, $$0622$i, $473, $$0626$i + $475 | 0, (HEAP32[$6 >> 2] | 0) + (0 - $475) | 0, $39) | 0;
if ($480 | 0) {
$$21918$i$ph428 = $480;
label = 503;
break L1;
}
$483 = HEAP32[$40 >> 2] | 0;
if (!($473 << 24 >> 24)) if ((HEAP32[$42 >> 2] | 0) == ($483 | 0)) $492 = $483; else {
$487 = $483 + -1 | 0;
if ((HEAP8[$487 >> 0] | 0) == 32) {
HEAP32[$40 >> 2] = $487;
$492 = $487;
} else $492 = $483;
} else $492 = $483;
if (($492 | 0) == (HEAP32[$41 >> 2] | 0)) {
if (!((_poolGrow($39) | 0) << 24 >> 24)) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
}
$496 = HEAP32[$40 >> 2] | 0;
} else $496 = $492;
HEAP32[$40 >> 2] = $496 + 1;
HEAP8[$496 >> 0] = 0;
$497 = HEAP32[$42 >> 2] | 0;
HEAP32[$42 >> 2] = HEAP32[$40 >> 2];
$499 = HEAP32[$45 >> 2] | 0;
$500 = HEAP32[$47 >> 2] | 0;
$501 = HEAP8[$48 >> 0] | 0;
$$phi$trans$insert$i739$i = $499 + 12 | 0;
$$pre$i740$i = HEAP32[$$phi$trans$insert$i739$i >> 2] | 0;
L183 : do if (($497 | 0) != 0 & ($$pre$i740$i | 0) > 0) {
$505 = HEAP32[$499 + 20 >> 2] | 0;
$$05154$i743$i = 0;
while (1) {
if ((HEAP32[$505 + ($$05154$i743$i * 12 | 0) >> 2] | 0) == ($500 | 0)) break L183;
$$05154$i743$i = $$05154$i743$i + 1 | 0;
if (($$05154$i743$i | 0) >= ($$pre$i740$i | 0)) {
label = 191;
break;
}
}
} else label = 191; while (0);
if ((label | 0) == 191) {
label = 0;
$511 = $499 + 16 | 0;
do if (($$pre$i740$i | 0) == (HEAP32[$511 >> 2] | 0)) {
if (!$$pre$i740$i) {
HEAP32[$511 >> 2] = 8;
$516 = FUNCTION_TABLE_ii[HEAP32[$51 >> 2] & 63](96) | 0;
HEAP32[$499 + 20 >> 2] = $516;
if (!$516) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
} else {
$528 = $516;
break;
}
}
$520 = $499 + 20 | 0;
$523 = FUNCTION_TABLE_iii[HEAP32[$52 >> 2] & 63](HEAP32[$520 >> 2] | 0, $$pre$i740$i * 24 | 0) | 0;
if (!$523) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
}
HEAP32[$511 >> 2] = $$pre$i740$i << 1;
HEAP32[$520 >> 2] = $523;
$528 = $523;
} else $528 = HEAP32[$499 + 20 >> 2] | 0; while (0);
$526 = HEAP32[$$phi$trans$insert$i739$i >> 2] | 0;
HEAP32[$528 + ($526 * 12 | 0) >> 2] = $500;
HEAP32[$528 + ($526 * 12 | 0) + 8 >> 2] = $497;
HEAP8[$528 + ($526 * 12 | 0) + 4 >> 0] = $501;
if (!($501 << 24 >> 24)) HEAP8[$500 + 8 >> 0] = 1;
HEAP32[$$phi$trans$insert$i739$i >> 2] = (HEAP32[$$phi$trans$insert$i739$i >> 2] | 0) + 1;
}
$535 = HEAP32[$46 >> 2] | 0;
if (!$535) label = 492; else {
$537 = HEAP32[$49 >> 2] | 0;
if (!$537) label = 492; else {
switch (HEAP8[$537 >> 0] | 0) {
case 40:
{
label = 204;
break;
}
case 78:
{
if ((HEAP8[$537 + 1 >> 0] | 0) == 79) label = 204; else {
$567 = $535;
$568 = $537;
}
break;
}
default:
{
$567 = $535;
$568 = $537;
}
}
if ((label | 0) == 204) {
label = 0;
$543 = HEAP32[$30 >> 2] | 0;
if (($543 | 0) == (HEAP32[$31 >> 2] | 0)) {
if (!((_poolGrow($29) | 0) << 24 >> 24)) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
}
$549 = HEAP32[$30 >> 2] | 0;
} else $549 = $543;
HEAP32[$30 >> 2] = $549 + 1;
HEAP8[$549 >> 0] = 41;
$550 = HEAP32[$30 >> 2] | 0;
if (($550 | 0) == (HEAP32[$31 >> 2] | 0)) {
if (!((_poolGrow($29) | 0) << 24 >> 24)) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
}
$556 = HEAP32[$30 >> 2] | 0;
} else $556 = $550;
HEAP32[$30 >> 2] = $556 + 1;
HEAP8[$556 >> 0] = 0;
$557 = HEAP32[$32 >> 2] | 0;
HEAP32[$49 >> 2] = $557;
HEAP32[$32 >> 2] = HEAP32[$30 >> 2];
$567 = HEAP32[$46 >> 2] | 0;
$568 = $557;
}
HEAP32[$20 >> 2] = $$0626$i;
FUNCTION_TABLE_viiiiii[$567 & 7](HEAP32[$25 >> 2] | 0, HEAP32[HEAP32[$45 >> 2] >> 2] | 0, HEAP32[HEAP32[$47 >> 2] >> 2] | 0, $568, $497, ($80 | 0) == 38 & 1);
$569 = HEAP32[$35 >> 2] | 0;
if (!$569) HEAP32[$35 >> 2] = HEAP32[$29 >> 2]; else {
$572 = HEAP32[$29 >> 2] | 0;
if ($572 | 0) {
$$018$i754$i = $572;
$$in$i753$i = $569;
while (1) {
$575 = HEAP32[$$018$i754$i >> 2] | 0;
HEAP32[$$018$i754$i >> 2] = $$in$i753$i;
HEAP32[$35 >> 2] = $$018$i754$i;
if (!$575) break; else {
$$in$i753$i$phi = $$018$i754$i;
$$018$i754$i = $575;
$$in$i753$i = $$in$i753$i$phi;
}
}
}
}
HEAP32[$29 >> 2] = 0;
HEAP32[$32 >> 2] = 0;
HEAP32[$30 >> 2] = 0;
HEAP32[$31 >> 2] = 0;
$$2624912$i = $$0622$i;
}
}
}
break;
}
case 12:
{
if (!(HEAP8[$37 >> 0] | 0)) label = 492; else {
$579 = $$0622$i + 64 | 0;
$580 = HEAP32[$579 >> 2] | 0;
$581 = $$0626$i + $580 | 0;
$584 = (HEAP32[$6 >> 2] | 0) + (0 - $580) | 0;
$585 = HEAP32[$17 >> 2] | 0;
$586 = $585 + 104 | 0;
if (!(HEAP32[$586 >> 2] | 0)) if (!((_poolGrow($586) | 0) << 24 >> 24)) $$067$i$i = 1; else label = 219; else label = 219;
if ((label | 0) == 219) {
label = 0;
$591 = $$0622$i + 16 | 0;
$592 = $585 + 116 | 0;
$593 = $$0622$i + 56 | 0;
$594 = $585 + 112 | 0;
$595 = $585 + 120 | 0;
$596 = $$0622$i + 40 | 0;
$$071$i$i = $581;
L229 : while (1) {
switch (FUNCTION_TABLE_iiiii[HEAP32[$591 >> 2] & 63]($$0622$i, $$071$i$i, $584, $5) | 0) {
case 28:
{
label = 221;
break L229;
break;
}
case -4:
{
$$3$ph$i$i = 0;
break L229;
break;
}
case -1:
{
label = 246;
break L229;
break;
}
case 0:
{
label = 248;
break L229;
break;
}
case 6:
case 9:
{
$599 = HEAP32[$5 >> 2] | 0;
HEAP32[$4 >> 2] = $$071$i$i;
if (!(HEAP32[$592 >> 2] | 0)) if (!((_poolGrow($586) | 0) << 24 >> 24)) {
label = 226;
break L229;
}
while (1) {
FUNCTION_TABLE_viiiii[HEAP32[$593 >> 2] & 15]($$0622$i, $4, $599, $592, HEAP32[$594 >> 2] | 0);
if ((HEAP32[$4 >> 2] | 0) == ($599 | 0)) break;
if (!((_poolGrow($586) | 0) << 24 >> 24)) {
label = 226;
break L229;
}
}
if (!(HEAP32[$595 >> 2] | 0)) {
$$3$ph$i$i = 1;
break L229;
}
break;
}
case -3:
{
HEAP32[$5 >> 2] = $$071$i$i + (HEAP32[$579 >> 2] | 0);
label = 229;
break;
}
case 7:
{
label = 229;
break;
}
case 10:
{
$622 = FUNCTION_TABLE_iii[HEAP32[$596 >> 2] & 63]($$0622$i, $$071$i$i) | 0;
if (($622 | 0) < 0) {
label = 234;
break L229;
}
$626 = _XmlUtf8Encode($622, $4) | 0;
if (!$626) {
label = 238;
break L229;
}
if (($626 | 0) > 0) {
$$0103$i$i = 0;
do {
$632 = HEAP32[$592 >> 2] | 0;
if ((HEAP32[$594 >> 2] | 0) == ($632 | 0)) {
if (!((_poolGrow($586) | 0) << 24 >> 24)) {
$$170$ph$i$i = 1;
label = 244;
break L229;
}
$639 = HEAP32[$592 >> 2] | 0;
} else $639 = $632;
$637 = HEAP8[$4 + $$0103$i$i >> 0] | 0;
HEAP32[$592 >> 2] = $639 + 1;
HEAP8[$639 >> 0] = $637;
$$0103$i$i = $$0103$i$i + 1 | 0;
} while (($$0103$i$i | 0) < ($626 | 0));
}
break;
}
default:
{
label = 250;
break L229;
}
}
if ((label | 0) == 229) {
label = 0;
$615 = HEAP32[$592 >> 2] | 0;
if ((HEAP32[$594 >> 2] | 0) == ($615 | 0)) {
if (!((_poolGrow($586) | 0) << 24 >> 24)) {
$$3$ph$i$i = 1;
break;
}
$620 = HEAP32[$592 >> 2] | 0;
} else $620 = $615;
HEAP32[$592 >> 2] = $620 + 1;
HEAP8[$620 >> 0] = 10;
}
$$071$i$i = HEAP32[$5 >> 2] | 0;
}
if ((label | 0) == 221) {
label = 0;
HEAP32[$19 >> 2] = $$071$i$i;
$$3$ph$i$i = 10;
} else if ((label | 0) == 226) {
label = 0;
$$3$ph$i$i = 1;
} else if ((label | 0) == 234) {
label = 0;
if ((HEAP32[$8 >> 2] | 0) == ($$0622$i | 0)) {
HEAP32[$19 >> 2] = $$071$i$i;
$$170$ph$i$i = 14;
label = 244;
} else {
$$170$ph$i$i = 14;
label = 244;
}
} else if ((label | 0) == 238) {
label = 0;
if ((HEAP32[$8 >> 2] | 0) == ($$0622$i | 0)) {
HEAP32[$19 >> 2] = $$071$i$i;
$$170$ph$i$i = 14;
label = 244;
} else {
$$170$ph$i$i = 14;
label = 244;
}
} else if ((label | 0) == 246) {
label = 0;
if ((HEAP32[$8 >> 2] | 0) == ($$0622$i | 0)) {
HEAP32[$19 >> 2] = $$071$i$i;
$$3$ph$i$i = 4;
} else $$3$ph$i$i = 4;
} else if ((label | 0) == 248) {
label = 0;
if ((HEAP32[$8 >> 2] | 0) == ($$0622$i | 0)) {
HEAP32[$19 >> 2] = HEAP32[$5 >> 2];
$$3$ph$i$i = 4;
} else $$3$ph$i$i = 4;
} else if ((label | 0) == 250) {
label = 0;
if ((HEAP32[$8 >> 2] | 0) == ($$0622$i | 0)) {
HEAP32[$19 >> 2] = $$071$i$i;
$$3$ph$i$i = 23;
} else $$3$ph$i$i = 23;
}
if ((label | 0) == 244) {
label = 0;
$$3$ph$i$i = $$170$ph$i$i;
}
$$067$i$i = $$3$ph$i$i;
}
$650 = HEAP32[$38 >> 2] | 0;
$652 = HEAP32[$53 >> 2] | 0;
if (!$650) {
HEAP32[$54 >> 2] = $652;
$$9645$i = 1;
} else {
HEAP32[$650 + 4 >> 2] = $652;
HEAP32[(HEAP32[$38 >> 2] | 0) + 8 >> 2] = (HEAP32[$54 >> 2] | 0) - (HEAP32[$53 >> 2] | 0);
HEAP32[$53 >> 2] = HEAP32[$54 >> 2];
$660 = HEAP32[$43 >> 2] | 0;
if (!$660) $$9645$i = 1; else {
HEAP32[$20 >> 2] = $$0626$i;
$663 = HEAP32[$38 >> 2] | 0;
FUNCTION_TABLE_viiiiiiiii[$660 & 0](HEAP32[$25 >> 2] | 0, HEAP32[$663 >> 2] | 0, HEAPU8[$663 + 33 >> 0] | 0, HEAP32[$663 + 4 >> 2] | 0, HEAP32[$663 + 8 >> 2] | 0, HEAP32[$55 >> 2] | 0, 0, 0, 0);
$$9645$i = 0;
}
}
if (!$$067$i$i) {
$$25$i = $$9645$i;
label = 491;
} else {
$$21918$i$ph428 = $$067$i$i;
label = 503;
break L1;
}
}
break;
}
case 5:
{
HEAP8[$36 >> 0] = 1;
if (!(HEAP32[$27 >> 2] | 0)) $$10646$i = 1; else {
$677 = HEAP32[$$0622$i + 64 >> 2] | 0;
$681 = (HEAP32[$6 >> 2] | 0) + (0 - $677) | 0;
HEAP32[$4 >> 2] = $$0626$i + $677;
if (!(HEAP32[$30 >> 2] | 0)) if (!((_poolGrow($29) | 0) << 24 >> 24)) {
label = 265;
break L1;
}
$686 = $$0622$i + 56 | 0;
while (1) {
FUNCTION_TABLE_viiiii[HEAP32[$686 >> 2] & 15]($$0622$i, $4, $681, $30, HEAP32[$31 >> 2] | 0);
if ((HEAP32[$4 >> 2] | 0) == ($681 | 0)) break;
if (!((_poolGrow($29) | 0) << 24 >> 24)) {
label = 265;
break L1;
}
}
if (!(HEAP32[$32 >> 2] | 0)) {
label = 270;
break L1;
}
$695 = HEAP32[$30 >> 2] | 0;
if (($695 | 0) == (HEAP32[$31 >> 2] | 0)) {
if (!((_poolGrow($29) | 0) << 24 >> 24)) {
label = 270;
break L1;
}
$701 = HEAP32[$30 >> 2] | 0;
} else $701 = $695;
HEAP32[$30 >> 2] = $701 + 1;
HEAP8[$701 >> 0] = 0;
$702 = HEAP32[$32 >> 2] | 0;
HEAP32[$28 >> 2] = $702;
if (!$702) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
}
HEAP32[$32 >> 2] = HEAP32[$30 >> 2];
$$10646$i = 0;
}
if (!(HEAP8[$56 >> 0] | 0)) {
$707 = HEAP32[$57 >> 2] | 0;
if (!$707) {
$$25$i = $$10646$i;
label = 491;
} else if (!(FUNCTION_TABLE_ii[$707 & 63](HEAP32[$25 >> 2] | 0) | 0)) {
$$21918$i$ph428 = 22;
label = 503;
break L1;
} else {
$$25$i = $$10646$i;
label = 491;
}
} else {
$$25$i = $$10646$i;
label = 491;
}
break;
}
case 13:
{
if (!(HEAP8[$37 >> 0] | 0)) label = 492; else if (!(HEAP32[$38 >> 2] | 0)) label = 492; else {
$717 = HEAP32[$$0622$i + 64 >> 2] | 0;
$721 = (HEAP32[$6 >> 2] | 0) + (0 - $717) | 0;
HEAP32[$4 >> 2] = $$0626$i + $717;
if (!(HEAP32[$40 >> 2] | 0)) if (!((_poolGrow($39) | 0) << 24 >> 24)) label = 283; else label = 280; else label = 280;
L304 : do if ((label | 0) == 280) {
label = 0;
$726 = $$0622$i + 56 | 0;
while (1) {
FUNCTION_TABLE_viiiii[HEAP32[$726 >> 2] & 15]($$0622$i, $4, $721, $40, HEAP32[$41 >> 2] | 0);
if ((HEAP32[$4 >> 2] | 0) == ($721 | 0)) break;
if (!((_poolGrow($39) | 0) << 24 >> 24)) {
label = 283;
break L304;
}
}
if (!(HEAP32[$42 >> 2] | 0)) $$0$i778$i = 0; else {
$735 = HEAP32[$40 >> 2] | 0;
if (($735 | 0) == (HEAP32[$41 >> 2] | 0)) {
if (!((_poolGrow($39) | 0) << 24 >> 24)) {
$$0$i778$i = 0;
break;
}
$741 = HEAP32[$40 >> 2] | 0;
} else $741 = $735;
HEAP32[$40 >> 2] = $741 + 1;
HEAP8[$741 >> 0] = 0;
$$0$i778$i = HEAP32[$42 >> 2] | 0;
}
} while (0);
if ((label | 0) == 283) {
label = 0;
$$0$i778$i = 0;
}
HEAP32[(HEAP32[$38 >> 2] | 0) + 16 >> 2] = $$0$i778$i;
$745 = HEAP32[$38 >> 2] | 0;
if (!(HEAP32[$745 + 16 >> 2] | 0)) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
}
HEAP32[$745 + 20 >> 2] = HEAP32[$55 >> 2];
HEAP32[$42 >> 2] = HEAP32[$40 >> 2];
if (!(HEAP32[$43 >> 2] | 0)) label = 492; else $$2624912$i = $$0622$i;
}
break;
}
case 15:
{
if (!(HEAP8[$37 >> 0] | 0)) label = 492; else {
$756 = HEAP32[$38 >> 2] | 0;
if (!$756) label = 492; else {
$758 = HEAP32[$43 >> 2] | 0;
if (!$758) label = 492; else {
HEAP32[$20 >> 2] = $$0626$i;
FUNCTION_TABLE_viiiiiiiii[$758 & 0](HEAP32[$25 >> 2] | 0, HEAP32[$756 >> 2] | 0, HEAPU8[$756 + 33 >> 0] | 0, 0, 0, HEAP32[$756 + 20 >> 2] | 0, HEAP32[$756 + 16 >> 2] | 0, HEAP32[$756 + 24 >> 2] | 0, 0);
$$2624912$i = $$0622$i;
}
}
}
break;
}
case 16:
{
if (!(HEAP8[$37 >> 0] | 0)) label = 492; else if (!(HEAP32[$38 >> 2] | 0)) label = 492; else {
$775 = HEAP32[$6 >> 2] | 0;
HEAP32[$4 >> 2] = $$0626$i;
if (!(HEAP32[$40 >> 2] | 0)) if (!((_poolGrow($39) | 0) << 24 >> 24)) label = 302; else label = 299; else label = 299;
L328 : do if ((label | 0) == 299) {
label = 0;
$780 = $$0622$i + 56 | 0;
while (1) {
FUNCTION_TABLE_viiiii[HEAP32[$780 >> 2] & 15]($$0622$i, $4, $775, $40, HEAP32[$41 >> 2] | 0);
if ((HEAP32[$4 >> 2] | 0) == ($775 | 0)) break;
if (!((_poolGrow($39) | 0) << 24 >> 24)) {
label = 302;
break L328;
}
}
if (!(HEAP32[$42 >> 2] | 0)) $$0$i785$i = 0; else {
$789 = HEAP32[$40 >> 2] | 0;
if (($789 | 0) == (HEAP32[$41 >> 2] | 0)) {
if (!((_poolGrow($39) | 0) << 24 >> 24)) {
$$0$i785$i = 0;
break;
}
$795 = HEAP32[$40 >> 2] | 0;
} else $795 = $789;
HEAP32[$40 >> 2] = $795 + 1;
HEAP8[$795 >> 0] = 0;
$$0$i785$i = HEAP32[$42 >> 2] | 0;
}
} while (0);
if ((label | 0) == 302) {
label = 0;
$$0$i785$i = 0;
}
HEAP32[(HEAP32[$38 >> 2] | 0) + 28 >> 2] = $$0$i785$i;
if (!(HEAP32[(HEAP32[$38 >> 2] | 0) + 28 >> 2] | 0)) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
}
HEAP32[$42 >> 2] = HEAP32[$40 >> 2];
$804 = HEAP32[$58 >> 2] | 0;
if ($804 | 0) {
HEAP32[$20 >> 2] = $$0626$i;
$807 = HEAP32[$38 >> 2] | 0;
FUNCTION_TABLE_viiiiii[$804 & 7](HEAP32[$25 >> 2] | 0, HEAP32[$807 >> 2] | 0, HEAP32[$807 + 20 >> 2] | 0, HEAP32[$807 + 16 >> 2] | 0, HEAP32[$807 + 24 >> 2] | 0, HEAP32[$807 + 28 >> 2] | 0);
$$2624912$i = $$0622$i;
break L8;
}
$817 = HEAP32[$43 >> 2] | 0;
if (!$817) label = 492; else {
HEAP32[$20 >> 2] = $$0626$i;
$820 = HEAP32[$38 >> 2] | 0;
FUNCTION_TABLE_viiiiiiiii[$817 & 0](HEAP32[$25 >> 2] | 0, HEAP32[$820 >> 2] | 0, 0, 0, 0, HEAP32[$820 + 20 >> 2] | 0, HEAP32[$820 + 16 >> 2] | 0, HEAP32[$820 + 24 >> 2] | 0, HEAP32[$820 + 28 >> 2] | 0);
$$2624912$i = $$0622$i;
}
}
break;
}
case 9:
{
if (FUNCTION_TABLE_iiii[HEAP32[$$0622$i + 44 >> 2] & 31]($$0622$i, $$0626$i, HEAP32[$6 >> 2] | 0) | 0) {
HEAP32[$38 >> 2] = 0;
label = 492;
break L8;
}
if (!(HEAP8[$37 >> 0] | 0)) {
HEAP32[$40 >> 2] = HEAP32[$42 >> 2];
HEAP32[$38 >> 2] = 0;
label = 492;
break L8;
}
$837 = HEAP32[$6 >> 2] | 0;
HEAP32[$4 >> 2] = $$0626$i;
if (!(HEAP32[$40 >> 2] | 0)) if (!((_poolGrow($39) | 0) << 24 >> 24)) {
label = 321;
break L1;
}
$842 = $$0622$i + 56 | 0;
while (1) {
FUNCTION_TABLE_viiiii[HEAP32[$842 >> 2] & 15]($$0622$i, $4, $837, $40, HEAP32[$41 >> 2] | 0);
if ((HEAP32[$4 >> 2] | 0) == ($837 | 0)) break;
if (!((_poolGrow($39) | 0) << 24 >> 24)) {
label = 321;
break L1;
}
}
if (!(HEAP32[$42 >> 2] | 0)) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
}
$851 = HEAP32[$40 >> 2] | 0;
if (($851 | 0) == (HEAP32[$41 >> 2] | 0)) {
if (!((_poolGrow($39) | 0) << 24 >> 24)) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
}
$857 = HEAP32[$40 >> 2] | 0;
} else $857 = $851;
HEAP32[$40 >> 2] = $857 + 1;
HEAP8[$857 >> 0] = 0;
$858 = HEAP32[$42 >> 2] | 0;
if (!$858) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
}
$860 = _lookup($18, $858, 36) | 0;
HEAP32[$38 >> 2] = $860;
if (!$860) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
}
if ((HEAP32[$860 >> 2] | 0) != ($858 | 0)) {
HEAP32[$40 >> 2] = HEAP32[$42 >> 2];
HEAP32[$38 >> 2] = 0;
label = 492;
break L8;
}
HEAP32[$42 >> 2] = HEAP32[$40 >> 2];
HEAP32[(HEAP32[$38 >> 2] | 0) + 24 >> 2] = 0;
HEAP8[(HEAP32[$38 >> 2] | 0) + 33 >> 0] = 0;
if (!(HEAP32[$59 >> 2] | 0)) $875 = (HEAP32[$$pre1206$i >> 2] | 0) != 0; else $875 = 1;
HEAP8[(HEAP32[$38 >> 2] | 0) + 34 >> 0] = ($875 ^ 1) & 1;
if (!(HEAP32[$43 >> 2] | 0)) label = 492; else $$2624912$i = $$0622$i;
break;
}
case 10:
{
HEAP32[$38 >> 2] = 0;
label = 492;
break;
}
case 18:
{
HEAP32[$60 >> 2] = 0;
HEAP32[$61 >> 2] = 0;
if (!(HEAP32[$62 >> 2] | 0)) label = 492; else {
$884 = HEAP32[$6 >> 2] | 0;
HEAP32[$4 >> 2] = $$0626$i;
if (!(HEAP32[$30 >> 2] | 0)) if (!((_poolGrow($29) | 0) << 24 >> 24)) {
label = 341;
break L1;
}
$889 = $$0622$i + 56 | 0;
while (1) {
FUNCTION_TABLE_viiiii[HEAP32[$889 >> 2] & 15]($$0622$i, $4, $884, $30, HEAP32[$31 >> 2] | 0);
if ((HEAP32[$4 >> 2] | 0) == ($884 | 0)) break;
if (!((_poolGrow($29) | 0) << 24 >> 24)) {
label = 341;
break L1;
}
}
if (!(HEAP32[$32 >> 2] | 0)) {
label = 346;
break L1;
}
$898 = HEAP32[$30 >> 2] | 0;
if (($898 | 0) == (HEAP32[$31 >> 2] | 0)) {
if (!((_poolGrow($29) | 0) << 24 >> 24)) {
label = 346;
break L1;
}
$904 = HEAP32[$30 >> 2] | 0;
} else $904 = $898;
HEAP32[$30 >> 2] = $904 + 1;
HEAP8[$904 >> 0] = 0;
$905 = HEAP32[$32 >> 2] | 0;
HEAP32[$61 >> 2] = $905;
if (!$905) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
}
HEAP32[$32 >> 2] = HEAP32[$30 >> 2];
$$2624912$i = $$0622$i;
}
break;
}
case 21:
{
if (!(FUNCTION_TABLE_iiiii[HEAP32[$$0622$i + 52 >> 2] & 63]($$0622$i, $$0626$i, HEAP32[$6 >> 2] | 0, $19) | 0)) {
$$21918$i$ph428 = 32;
label = 503;
break L1;
}
if (!(HEAP32[$61 >> 2] | 0)) label = 492; else {
$916 = HEAP32[$$0622$i + 64 >> 2] | 0;
$920 = (HEAP32[$6 >> 2] | 0) + (0 - $916) | 0;
HEAP32[$4 >> 2] = $$0626$i + $916;
if (!(HEAP32[$30 >> 2] | 0)) if (!((_poolGrow($29) | 0) << 24 >> 24)) {
label = 356;
break L1;
}
$925 = $$0622$i + 56 | 0;
while (1) {
FUNCTION_TABLE_viiiii[HEAP32[$925 >> 2] & 15]($$0622$i, $4, $920, $30, HEAP32[$31 >> 2] | 0);
if ((HEAP32[$4 >> 2] | 0) == ($920 | 0)) break;
if (!((_poolGrow($29) | 0) << 24 >> 24)) {
label = 356;
break L1;
}
}
if (!(HEAP32[$32 >> 2] | 0)) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
}
$934 = HEAP32[$30 >> 2] | 0;
if (($934 | 0) == (HEAP32[$31 >> 2] | 0)) {
if (!((_poolGrow($29) | 0) << 24 >> 24)) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
}
$940 = HEAP32[$30 >> 2] | 0;
} else $940 = $934;
HEAP32[$30 >> 2] = $940 + 1;
HEAP8[$940 >> 0] = 0;
$941 = HEAP32[$32 >> 2] | 0;
if (!$941) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
}
$943 = HEAP8[$941 >> 0] | 0;
if (!($943 << 24 >> 24)) $$2$i814$i = $941; else {
$$01920$i809$i = $941;
$$021$i808$i = $941;
$946 = $943;
while (1) {
switch ($946 << 24 >> 24 | 0) {
case 10:
case 13:
case 32:
{
if (($$01920$i809$i | 0) == ($941 | 0)) $$1$i811$i = $941; else if ((HEAP8[$$01920$i809$i + -1 >> 0] | 0) == 32) $$1$i811$i = $$01920$i809$i; else {
HEAP8[$$01920$i809$i >> 0] = 32;
$$1$i811$i = $$01920$i809$i + 1 | 0;
}
break;
}
default:
{
HEAP8[$$01920$i809$i >> 0] = $946;
$$1$i811$i = $$01920$i809$i + 1 | 0;
}
}
$$021$i808$i = $$021$i808$i + 1 | 0;
$946 = HEAP8[$$021$i808$i >> 0] | 0;
if (!($946 << 24 >> 24)) break; else $$01920$i809$i = $$1$i811$i;
}
if (($$1$i811$i | 0) == ($941 | 0)) $$2$i814$i = $941; else {
$957 = $$1$i811$i + -1 | 0;
$$2$i814$i = (HEAP8[$957 >> 0] | 0) == 32 ? $957 : $$1$i811$i;
}
}
HEAP8[$$2$i814$i >> 0] = 0;
HEAP32[$60 >> 2] = $941;
HEAP32[$32 >> 2] = HEAP32[$30 >> 2];
$$2624912$i = $$0622$i;
}
break;
}
case 19:
{
if (!(HEAP32[$61 >> 2] | 0)) $$15651$i = 1; else if (!(HEAP32[$62 >> 2] | 0)) $$15651$i = 1; else {
$966 = HEAP32[$$0622$i + 64 >> 2] | 0;
$970 = (HEAP32[$6 >> 2] | 0) + (0 - $966) | 0;
HEAP32[$4 >> 2] = $$0626$i + $966;
if (!(HEAP32[$30 >> 2] | 0)) if (!((_poolGrow($29) | 0) << 24 >> 24)) {
label = 379;
break L1;
}
$975 = $$0622$i + 56 | 0;
while (1) {
FUNCTION_TABLE_viiiii[HEAP32[$975 >> 2] & 15]($$0622$i, $4, $970, $30, HEAP32[$31 >> 2] | 0);
if ((HEAP32[$4 >> 2] | 0) == ($970 | 0)) break;
if (!((_poolGrow($29) | 0) << 24 >> 24)) {
label = 379;
break L1;
}
}
if (!(HEAP32[$32 >> 2] | 0)) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
}
$984 = HEAP32[$30 >> 2] | 0;
if (($984 | 0) == (HEAP32[$31 >> 2] | 0)) {
if (!((_poolGrow($29) | 0) << 24 >> 24)) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
}
$990 = HEAP32[$30 >> 2] | 0;
} else $990 = $984;
HEAP32[$30 >> 2] = $990 + 1;
HEAP8[$990 >> 0] = 0;
$991 = HEAP32[$32 >> 2] | 0;
if (!$991) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
}
HEAP32[$20 >> 2] = $$0626$i;
FUNCTION_TABLE_viiiii[HEAP32[$62 >> 2] & 15](HEAP32[$25 >> 2] | 0, HEAP32[$61 >> 2] | 0, HEAP32[$55 >> 2] | 0, $991, HEAP32[$60 >> 2] | 0);
$$15651$i = 0;
}
$998 = HEAP32[$35 >> 2] | 0;
if (!$998) HEAP32[$35 >> 2] = HEAP32[$29 >> 2]; else {
$1001 = HEAP32[$29 >> 2] | 0;
if ($1001 | 0) {
$$018$i825$i = $1001;
$$in$i824$i = $998;
while (1) {
$1004 = HEAP32[$$018$i825$i >> 2] | 0;
HEAP32[$$018$i825$i >> 2] = $$in$i824$i;
HEAP32[$35 >> 2] = $$018$i825$i;
if (!$1004) break; else {
$$in$i824$i$phi = $$018$i825$i;
$$018$i825$i = $1004;
$$in$i824$i = $$in$i824$i$phi;
}
}
}
}
HEAP32[$29 >> 2] = 0;
HEAP32[$32 >> 2] = 0;
HEAP32[$30 >> 2] = 0;
HEAP32[$31 >> 2] = 0;
$$25$i = $$15651$i;
label = 491;
break;
}
case 20:
{
$1006 = HEAP32[$60 >> 2] | 0;
if (!$1006) $$16652$i = 1; else {
$1008 = HEAP32[$62 >> 2] | 0;
if (!$1008) $$16652$i = 1; else {
HEAP32[$20 >> 2] = $$0626$i;
FUNCTION_TABLE_viiiii[$1008 & 15](HEAP32[$25 >> 2] | 0, HEAP32[$61 >> 2] | 0, HEAP32[$55 >> 2] | 0, 0, $1006);
$$16652$i = 0;
}
}
$1013 = HEAP32[$35 >> 2] | 0;
if (!$1013) HEAP32[$35 >> 2] = HEAP32[$29 >> 2]; else {
$1016 = HEAP32[$29 >> 2] | 0;
if ($1016 | 0) {
$$018$i831$i = $1016;
$$in$i830$i = $1013;
while (1) {
$1019 = HEAP32[$$018$i831$i >> 2] | 0;
HEAP32[$$018$i831$i >> 2] = $$in$i830$i;
HEAP32[$35 >> 2] = $$018$i831$i;
if (!$1019) break; else {
$$in$i830$i$phi = $$018$i831$i;
$$018$i831$i = $1019;
$$in$i830$i = $$in$i830$i$phi;
}
}
}
}
HEAP32[$29 >> 2] = 0;
HEAP32[$32 >> 2] = 0;
HEAP32[$30 >> 2] = 0;
HEAP32[$31 >> 2] = 0;
$$25$i = $$16652$i;
label = 491;
break;
}
case 44:
{
$1022 = HEAP32[$64 >> 2] | 0;
do if ((HEAP32[$63 >> 2] | 0) >>> 0 >= $1022 >>> 0) {
if (!$1022) {
$1037 = HEAP32[$51 >> 2] | 0;
HEAP32[$64 >> 2] = 32;
$1038 = FUNCTION_TABLE_ii[$1037 & 63](32) | 0;
HEAP32[$65 >> 2] = $1038;
if (!$1038) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
} else break;
}
$1025 = HEAP32[$52 >> 2] | 0;
$1026 = HEAP32[$65 >> 2] | 0;
$1027 = $1022 << 1;
HEAP32[$64 >> 2] = $1027;
$1028 = FUNCTION_TABLE_iii[$1025 & 63]($1026, $1027) | 0;
if (!$1028) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
}
HEAP32[$65 >> 2] = $1028;
$1030 = HEAP32[$67 >> 2] | 0;
if ($1030 | 0) {
$1035 = FUNCTION_TABLE_iii[HEAP32[$52 >> 2] & 63]($1030, HEAP32[$64 >> 2] << 2) | 0;
if (!$1035) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
}
HEAP32[$67 >> 2] = $1035;
}
} while (0);
HEAP8[(HEAP32[$65 >> 2] | 0) + (HEAP32[$63 >> 2] | 0) >> 0] = 0;
if (!(HEAP8[$66 >> 0] | 0)) label = 492; else {
$1045 = _nextScaffoldPart($0) | 0;
if (($1045 | 0) < 0) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
}
HEAP32[(HEAP32[$67 >> 2] | 0) + (HEAP32[$68 >> 2] << 2) >> 2] = $1045;
HEAP32[$68 >> 2] = (HEAP32[$68 >> 2] | 0) + 1;
HEAP32[(HEAP32[$69 >> 2] | 0) + ($1045 * 28 | 0) >> 2] = 6;
if (!(HEAP32[$70 >> 2] | 0)) label = 492; else $$2624912$i = $$0622$i;
}
break;
}
case 50:
{
$1058 = (HEAP32[$65 >> 2] | 0) + (HEAP32[$63 >> 2] | 0) | 0;
if ((HEAP8[$1058 >> 0] | 0) == 124) {
$$21918$i$ph428 = 2;
label = 503;
break L1;
}
HEAP8[$1058 >> 0] = 44;
if (!(HEAP8[$66 >> 0] | 0)) label = 492; else if (!(HEAP32[$70 >> 2] | 0)) label = 492; else $$2624912$i = $$0622$i;
break;
}
case 49:
{
$1065 = HEAP32[$65 >> 2] | 0;
$1066 = HEAP32[$63 >> 2] | 0;
$1068 = HEAP8[$1065 + $1066 >> 0] | 0;
if ($1068 << 24 >> 24 == 44) {
$$21918$i$ph428 = 2;
label = 503;
break L1;
}
if ($1068 << 24 >> 24 == 0 & (HEAP8[$66 >> 0] | 0) != 0) {
$1079 = (HEAP32[$69 >> 2] | 0) + ((HEAP32[(HEAP32[$67 >> 2] | 0) + ((HEAP32[$68 >> 2] | 0) + -1 << 2) >> 2] | 0) * 28 | 0) | 0;
if ((HEAP32[$1079 >> 2] | 0) == 3) {
$$19655$i = 1;
$1085 = $1065;
$1086 = $1066;
} else {
HEAP32[$1079 >> 2] = 5;
$$19655$i = (HEAP32[$70 >> 2] | 0) == 0 & 1;
$1085 = HEAP32[$65 >> 2] | 0;
$1086 = HEAP32[$63 >> 2] | 0;
}
} else {
$$19655$i = 1;
$1085 = $1065;
$1086 = $1066;
}
HEAP8[$1085 + $1086 >> 0] = 124;
$$25$i = $$19655$i;
label = 491;
break;
}
case 57:
{
if (!(HEAP8[$56 >> 0] | 0)) {
$1089 = HEAP32[$57 >> 2] | 0;
if (!$1089) label = 492; else if (!(FUNCTION_TABLE_ii[$1089 & 63](HEAP32[$25 >> 2] | 0) | 0)) {
$$21918$i$ph428 = 22;
label = 503;
break L1;
} else label = 492;
} else label = 492;
break;
}
case 40:
{
if (!(HEAP32[$70 >> 2] | 0)) label = 492; else {
$1096 = HEAP32[$6 >> 2] | 0;
$1097 = HEAP32[$17 >> 2] | 0;
$1098 = $1097 + 80 | 0;
HEAP32[$4 >> 2] = $$0626$i;
$1099 = $1097 + 92 | 0;
if (!(HEAP32[$1099 >> 2] | 0)) if (!((_poolGrow($1098) | 0) << 24 >> 24)) {
label = 427;
break L1;
}
$1104 = $$0622$i + 56 | 0;
$1105 = $1097 + 88 | 0;
while (1) {
FUNCTION_TABLE_viiiii[HEAP32[$1104 >> 2] & 15]($$0622$i, $4, $1096, $1099, HEAP32[$1105 >> 2] | 0);
if ((HEAP32[$4 >> 2] | 0) == ($1096 | 0)) break;
if (!((_poolGrow($1098) | 0) << 24 >> 24)) {
label = 427;
break L1;
}
}
$1112 = $1097 + 96 | 0;
if (!(HEAP32[$1112 >> 2] | 0)) {
label = 437;
break L1;
}
$1115 = HEAP32[$1099 >> 2] | 0;
if (($1115 | 0) == (HEAP32[$1105 >> 2] | 0)) {
if (!((_poolGrow($1098) | 0) << 24 >> 24)) {
label = 437;
break L1;
}
$1121 = HEAP32[$1099 >> 2] | 0;
} else $1121 = $1115;
HEAP32[$1099 >> 2] = $1121 + 1;
HEAP8[$1121 >> 0] = 0;
$1122 = HEAP32[$1112 >> 2] | 0;
if (!$1122) {
label = 437;
break L1;
}
$1125 = _lookup($1097 + 20 | 0, $1122, 24) | 0;
if (!$1125) {
label = 437;
break L1;
}
if ((HEAP32[$1125 >> 2] | 0) == ($1122 | 0)) {
HEAP32[$1112 >> 2] = HEAP32[$1099 >> 2];
if (!(_setElementTypePrefix(HEAP32[$17 >> 2] | 0, $1125) | 0)) {
label = 437;
break L1;
}
} else HEAP32[$1099 >> 2] = HEAP32[$1112 >> 2];
HEAP32[$45 >> 2] = $1125;
HEAP32[$68 >> 2] = 0;
HEAP32[$71 >> 2] = 0;
HEAP8[$66 >> 0] = 1;
$$2624912$i = $$0622$i;
}
break;
}
case 42:
case 41:
{
if (!(HEAP8[$66 >> 0] | 0)) label = 492; else {
if (!(HEAP32[$70 >> 2] | 0)) $$21657$i = 1; else {
$1138 = FUNCTION_TABLE_ii[HEAP32[$51 >> 2] & 63](20) | 0;
if (!$1138) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
}
$1140 = $1138 + 4 | 0;
HEAP32[$1140 >> 2] = 0;
HEAP32[$1140 + 4 >> 2] = 0;
HEAP32[$1140 + 8 >> 2] = 0;
HEAP32[$1140 + 12 >> 2] = 0;
HEAP32[$1138 >> 2] = ($80 | 0) == 41 ? 2 : 1;
HEAP32[$20 >> 2] = $$0626$i;
FUNCTION_TABLE_viii[HEAP32[$70 >> 2] & 127](HEAP32[$25 >> 2] | 0, HEAP32[HEAP32[$45 >> 2] >> 2] | 0, $1138);
$$21657$i = 0;
}
HEAP8[$66 >> 0] = 0;
$$25$i = $$21657$i;
label = 491;
}
break;
}
case 43:
{
if (!(HEAP8[$66 >> 0] | 0)) label = 492; else {
HEAP32[(HEAP32[$69 >> 2] | 0) + ((HEAP32[(HEAP32[$67 >> 2] | 0) + ((HEAP32[$68 >> 2] | 0) + -1 << 2) >> 2] | 0) * 28 | 0) >> 2] = 3;
if (!(HEAP32[$70 >> 2] | 0)) label = 492; else $$2624912$i = $$0622$i;
}
break;
}
case 51:
{
$$0634$i = 0;
label = 449;
break;
}
case 53:
{
$$0634$i = 1;
label = 449;
break;
}
case 52:
{
$$0634$i = 2;
label = 449;
break;
}
case 54:
{
$$0634$i = 3;
label = 449;
break;
}
case 45:
{
$$1635$i = 0;
label = 474;
break;
}
case 47:
{
$$1635$i = 1;
label = 474;
break;
}
case 46:
{
$$1635$i = 2;
label = 474;
break;
}
case 48:
{
$$1635$i = 3;
label = 474;
break;
}
case 55:
{
if (!(_reportProcessingInstruction($0, $$0622$i, $$0626$i, HEAP32[$6 >> 2] | 0) | 0)) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
} else $$2624912$i = $$0622$i;
break;
}
case 56:
{
if (!(_reportComment($0, $$0622$i, $$0626$i, HEAP32[$6 >> 2] | 0) | 0)) {
$$21918$i$ph428 = 1;
label = 503;
break L1;
} else $$2624912$i = $$0622$i;
break;
}
case 0:
{
if (($$1630$i | 0) == 14) $$2624912$i = $$0622$i; else label = 492;
break;
}
case 3:
{
if (!(HEAP32[$27 >> 2] | 0)) label = 492; else $$2624912$i = $$0622$i;
break;
}
case 11:
{
if (!(HEAP8[$37 >> 0] | 0)) label = 492; else if (!(HEAP32[$43 >> 2] | 0)) label = 492; else $$2624912$i = $$0622$i;
break;
}
case 17:
{
if (!(HEAP32[$62 >> 2] | 0)) label = 492; else $$2624912$i = $$0622$i;
break;
}
case 33:
{
if (!(HEAP8[$37 >> 0] | 0)) label = 492; else if (!(HEAP32[$46 >> 2] | 0)) label = 492; else $$2624912$i = $$0622$i;
break;
}
case 39:
{
if (!(HEAP32[$70 >> 2] | 0)) label = 492; else $$2624912$i = $$0622$i;
break;
}
default:
label = 492;
} while (0);
if ((label | 0) == 56) {
label = 0;
if (!(FUNCTION_TABLE_iiiii[HEAP32[$$0622$i + 52 >> 2] & 63]($$0622$i, $$0626$i, HEAP32[$6 >> 2] | 0, $19) | 0)) {
$$21918$i$ph428 = 32;
label = 503;
break;
} else {
$$2638$i = 1;
label = 57;
}
} else if ((label | 0) == 126) {
label = 0;
if (!(HEAP8[$37 >> 0] | 0)) label = 492; else if (!(HEAP32[$46 >> 2] | 0)) label = 492; else $$2624912$i = $$0622$i;
} else if ((label | 0) == 449) {
label = 0;
if (!(HEAP8[$66 >> 0] | 0)) label = 492; else {
$1161 = HEAP32[$6 >> 2] | 0;
if (!$$0634$i) $1183 = $1161; else $1183 = $1161 + (0 - (HEAP32[$$0622$i + 64 >> 2] | 0)) | 0;
$1166 = _nextScaffoldPart($0) | 0;
if (($1166 | 0) < 0) {
$$21918$i$ph428 = 1;
label = 503;
break;
}
HEAP32[(HEAP32[$69 >> 2] | 0) + ($1166 * 28 | 0) >> 2] = 4;
HEAP32[(HEAP32[$69 >> 2] | 0) + ($1166 * 28 | 0) + 4 >> 2] = $$0634$i;
$1172 = HEAP32[$17 >> 2] | 0;
$1173 = $1172 + 80 | 0;
HEAP32[$4 >> 2] = $$0626$i;
$1174 = $1172 + 92 | 0;
if (!(HEAP32[$1174 >> 2] | 0)) if (!((_poolGrow($1173) | 0) << 24 >> 24)) {
label = 458;
break;
}
$1179 = $$0622$i + 56 | 0;
$1180 = $1172 + 88 | 0;
while (1) {
FUNCTION_TABLE_viiiii[HEAP32[$1179 >> 2] & 15]($$0622$i, $4, $1183, $1174, HEAP32[$1180 >> 2] | 0);
if ((HEAP32[$4 >> 2] | 0) == ($1183 | 0)) break;
if (!((_poolGrow($1173) | 0) << 24 >> 24)) {
label = 458;
break L1;
}
}
$1188 = $1172 + 96 | 0;
if (!(HEAP32[$1188 >> 2] | 0)) {
$$21918$i$ph428 = 1;
label = 503;
break;
}
$1191 = HEAP32[$1174 >> 2] | 0;
if (($1191 | 0) == (HEAP32[$1180 >> 2] | 0)) {
if (!((_poolGrow($1173) | 0) << 24 >> 24)) {
$$21918$i$ph428 = 1;
label = 503;
break;
}
$1197 = HEAP32[$1174 >> 2] | 0;
} else $1197 = $1191;
HEAP32[$1174 >> 2] = $1197 + 1;
HEAP8[$1197 >> 0] = 0;
$1198 = HEAP32[$1188 >> 2] | 0;
if (!$1198) {
$$21918$i$ph428 = 1;
label = 503;
break;
}
$1201 = _lookup($1172 + 20 | 0, $1198, 24) | 0;
if (!$1201) {
$$21918$i$ph428 = 1;
label = 503;
break;
}
if ((HEAP32[$1201 >> 2] | 0) == ($1198 | 0)) {
HEAP32[$1188 >> 2] = HEAP32[$1174 >> 2];
if (!(_setElementTypePrefix(HEAP32[$17 >> 2] | 0, $1201) | 0)) {
$$21918$i$ph428 = 1;
label = 503;
break;
}
} else HEAP32[$1174 >> 2] = HEAP32[$1188 >> 2];
$1209 = HEAP32[$1201 >> 2] | 0;
HEAP32[(HEAP32[$69 >> 2] | 0) + ($1166 * 28 | 0) + 8 >> 2] = $1209;
$$0628$i = 0;
do {
$$0628$i$looptemp = $$0628$i;
$$0628$i = $$0628$i + 1 | 0;
} while ((HEAP8[$1209 + $$0628$i$looptemp >> 0] | 0) != 0);
HEAP32[$72 >> 2] = (HEAP32[$72 >> 2] | 0) + $$0628$i;
if (!(HEAP32[$70 >> 2] | 0)) label = 492; else $$2624912$i = $$0622$i;
}
} else if ((label | 0) == 474) {
label = 0;
if (!(HEAP8[$66 >> 0] | 0)) label = 492; else {
$1223 = (HEAP32[$70 >> 2] | 0) == 0;
$$683$i = $1223 & 1;
$1225 = (HEAP32[$68 >> 2] | 0) + -1 | 0;
HEAP32[$68 >> 2] = $1225;
HEAP32[(HEAP32[$69 >> 2] | 0) + ((HEAP32[(HEAP32[$67 >> 2] | 0) + ($1225 << 2) >> 2] | 0) * 28 | 0) + 4 >> 2] = $$1635$i;
if (!(HEAP32[$68 >> 2] | 0)) {
if (!$1223) {
$1233 = HEAP32[$17 >> 2] | 0;
$1234 = $1233 + 156 | 0;
$1241 = FUNCTION_TABLE_ii[HEAP32[$51 >> 2] & 63](((HEAP32[$1234 >> 2] | 0) * 20 | 0) + (HEAP32[$1233 + 148 >> 2] | 0) | 0) | 0;
if (!$1241) {
label = 478;
break;
}
HEAP32[$5 >> 2] = $1241 + ((HEAP32[$1234 >> 2] | 0) * 20 | 0);
HEAP32[$4 >> 2] = $1241 + 20;
_build_node($0, 0, $1241, $4, $5);
HEAP32[$20 >> 2] = $$0626$i;
FUNCTION_TABLE_viii[HEAP32[$70 >> 2] & 127](HEAP32[$25 >> 2] | 0, HEAP32[HEAP32[$45 >> 2] >> 2] | 0, $1241);
}
HEAP8[$66 >> 0] = 0;
HEAP32[$72 >> 2] = 0;
$$25$i = $$683$i;
label = 491;
} else {
$$25$i = $$683$i;
label = 491;
}
}
}
if ((label | 0) == 57) {
label = 0;
if (!(HEAP8[$37 >> 0] | 0)) {
$$25$i = $$2638$i;
label = 491;
} else if (!(HEAP32[$38 >> 2] | 0)) {
$$25$i = $$2638$i;
label = 491;
} else {
$188 = HEAP32[$$0622$i + 64 >> 2] | 0;
$192 = (HEAP32[$6 >> 2] | 0) + (0 - $188) | 0;
HEAP32[$4 >> 2] = $$0626$i + $188;
if (!(HEAP32[$40 >> 2] | 0)) if (!((_poolGrow($39) | 0) << 24 >> 24)) {
label = 64;
break;
}
$197 = $$0622$i + 56 | 0;
while (1) {
FUNCTION_TABLE_viiiii[HEAP32[$197 >> 2] & 15]($$0622$i, $4, $192, $40, HEAP32[$41 >> 2] | 0);
if ((HEAP32[$4 >> 2] | 0) == ($192 | 0)) break;
if (!((_poolGrow($39) | 0) << 24 >> 24)) {
label = 64;
break L1;
}
}
if (!(HEAP32[$42 >> 2] | 0)) {
$$21918$i$ph428 = 1;
label = 503;
break;
}
$206 = HEAP32[$40 >> 2] | 0;
if (($206 | 0) == (HEAP32[$41 >> 2] | 0)) {
if (!((_poolGrow($39) | 0) << 24 >> 24)) {
$$21918$i$ph428 = 1;
label = 503;
break;
}
$212 = HEAP32[$40 >> 2] | 0;
} else $212 = $206;
HEAP32[$40 >> 2] = $212 + 1;
HEAP8[$212 >> 0] = 0;
$213 = HEAP32[$42 >> 2] | 0;
if (!$213) {
$$21918$i$ph428 = 1;
label = 503;
break;
}
$215 = HEAP8[$213 >> 0] | 0;
if (!($215 << 24 >> 24)) $$2$i713$i = $213; else {
$$01920$i708$i = $213;
$$021$i707$i = $213;
$218 = $215;
while (1) {
switch ($218 << 24 >> 24 | 0) {
case 10:
case 13:
case 32:
{
if (($$01920$i708$i | 0) == ($213 | 0)) $$1$i710$i = $213; else if ((HEAP8[$$01920$i708$i + -1 >> 0] | 0) == 32) $$1$i710$i = $$01920$i708$i; else {
HEAP8[$$01920$i708$i >> 0] = 32;
$$1$i710$i = $$01920$i708$i + 1 | 0;
}
break;
}
default:
{
HEAP8[$$01920$i708$i >> 0] = $218;
$$1$i710$i = $$01920$i708$i + 1 | 0;
}
}
$$021$i707$i = $$021$i707$i + 1 | 0;
$218 = HEAP8[$$021$i707$i >> 0] | 0;
if (!($218 << 24 >> 24)) break; else $$01920$i708$i = $$1$i710$i;
}
if (($$1$i710$i | 0) == ($213 | 0)) $$2$i713$i = $213; else {
$229 = $$1$i710$i + -1 | 0;
$$2$i713$i = (HEAP8[$229 >> 0] | 0) == 32 ? $229 : $$1$i710$i;
}
}
HEAP8[$$2$i713$i >> 0] = 0;
HEAP32[(HEAP32[$38 >> 2] | 0) + 24 >> 2] = $213;
HEAP32[$42 >> 2] = HEAP32[$40 >> 2];
if (!(HEAP32[$43 >> 2] | 0)) {
$$25$i = $$2638$i;
label = 491;
} else $$2624912$i = $$0622$i;
}
}
if ((label | 0) == 491) {
label = 0;
if (!($$25$i << 24 >> 24)) $$2624912$i = $$0622$i; else label = 492;
}
if ((label | 0) == 492) {
label = 0;
$1271 = HEAP32[$22 >> 2] | 0;
if (!$1271) $$2624912$i = $$0622$i; else {
$1273 = HEAP32[$6 >> 2] | 0;
HEAP32[$4 >> 2] = $$0626$i;
if (!(HEAP8[$$0622$i + 68 >> 0] | 0)) {
if ((HEAP32[$8 >> 2] | 0) == ($$0622$i | 0)) {
$$0$ph$i$i = $20;
$$024$ph$i$i = $19;
} else {
$1279 = HEAP32[$$pre1206$i >> 2] | 0;
$$0$ph$i$i = $1279 + 4 | 0;
$$024$ph$i$i = $1279;
}
$1281 = $$0622$i + 56 | 0;
do {
HEAP32[$5 >> 2] = HEAP32[$23 >> 2];
FUNCTION_TABLE_viiiii[HEAP32[$1281 >> 2] & 15]($$0622$i, $4, $1273, $5, HEAP32[$24 >> 2] | 0);
HEAP32[$$0$ph$i$i >> 2] = HEAP32[$4 >> 2];
$1288 = HEAP32[$23 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[$22 >> 2] & 127](HEAP32[$25 >> 2] | 0, $1288, (HEAP32[$5 >> 2] | 0) - $1288 | 0);
HEAP32[$$024$ph$i$i >> 2] = HEAP32[$4 >> 2];
} while ((HEAP32[$4 >> 2] | 0) != ($1273 | 0));
} else FUNCTION_TABLE_viii[$1271 & 127](HEAP32[$25 >> 2] | 0, $$0626$i, $1273 - $$0626$i | 0);
$$2624912$i = $$0622$i;
}
}
switch (HEAP32[$26 >> 2] | 0) {
case 3:
{
label = 501;
break L1;
break;
}
case 2:
{
$$21918$i$ph428 = 35;
label = 503;
break L1;
break;
}
default:
{}
}
$1301 = HEAP32[$6 >> 2] | 0;
$$0622$i = $$2624912$i;
$$0626$i = $1301;
$$0629$i = FUNCTION_TABLE_iiiii[HEAP32[$$2624912$i >> 2] & 63]($$2624912$i, $1301, $2, $6) | 0;
}
switch (label | 0) {
case 4:
{
HEAP32[$3 >> 2] = $$0626$i;
$$21918$i = 0;
STACKTOP = sp;
return $$21918$i | 0;
}
case 6:
{
HEAP32[$19 >> 2] = $73;
$$21918$i = 4;
STACKTOP = sp;
return $$21918$i | 0;
}
case 17:
{
label = 22;
break;
}
case 39:
{
label = 44;
break;
}
case 64:
{
$$21918$i = 1;
STACKTOP = sp;
return $$21918$i | 0;
}
case 88:
{
HEAP32[$0 + 264 >> 2] = 29;
$259 = _doContent($0, 0, HEAP32[$8 >> 2] | 0, $$0626$i, $2, $3, (HEAP8[$14 >> 0] | 0) == 0 & 1) | 0;
if ($259 | 0) {
$$21918$i = $259;
STACKTOP = sp;
return $$21918$i | 0;
}
$262 = HEAP32[$0 + 348 >> 2] | 0;
if (!$262) {
$$21918$i = 0;
STACKTOP = sp;
return $$21918$i | 0;
} else $265 = $262;
while (1) {
$267 = (HEAP32[$265 + 24 >> 2] | 0) + 1 | 0;
$268 = $265 + 36 | 0;
$269 = HEAP32[$268 >> 2] | 0;
$270 = $269 + $267 | 0;
$271 = $265 + 4 | 0;
$272 = HEAP32[$271 >> 2] | 0;
if (($272 | 0) == ($270 | 0)) {
$$21918$i = 0;
label = 505;
break;
}
$274 = $265 + 8 | 0;
$275 = HEAP32[$274 >> 2] | 0;
$276 = $275 + $267 | 0;
$277 = $265 + 40 | 0;
if (($276 | 0) > ((HEAP32[$277 >> 2] | 0) - $269 | 0)) {
$283 = FUNCTION_TABLE_iii[HEAP32[$52 >> 2] & 63]($269, $276) | 0;
if (!$283) {
$$21918$i = 1;
label = 505;
break;
}
$285 = $265 + 12 | 0;
$287 = HEAP32[$268 >> 2] | 0;
if ((HEAP32[$285 >> 2] | 0) == ($287 | 0)) HEAP32[$285 >> 2] = $283;
$290 = $265 + 16 | 0;
$291 = HEAP32[$290 >> 2] | 0;
if ($291 | 0) HEAP32[$290 >> 2] = $283 + ($291 - $287);
HEAP32[$268 >> 2] = $283;
HEAP32[$277 >> 2] = $283 + $276;
$$152$i$i$i = $283 + $267 | 0;
$298 = HEAP32[$271 >> 2] | 0;
$299 = HEAP32[$274 >> 2] | 0;
} else {
$$152$i$i$i = $270;
$298 = $272;
$299 = $275;
}
_memcpy($$152$i$i$i | 0, $298 | 0, $299 | 0) | 0;
HEAP32[$271 >> 2] = $$152$i$i$i;
$265 = HEAP32[$265 >> 2] | 0;
if (!$265) {
$$21918$i = 0;
label = 505;
break;
}
}
if ((label | 0) == 505) {
STACKTOP = sp;
return $$21918$i | 0;
}
break;
}
case 104:
{
label = 114;
break;
}
case 141:
{
$$21918$i = 1;
STACKTOP = sp;
return $$21918$i | 0;
}
case 265:
{
label = 270;
break;
}
case 321:
{
$$21918$i = 1;
STACKTOP = sp;
return $$21918$i | 0;
}
case 341:
{
label = 346;
break;
}
case 356:
{
$$21918$i = 1;
STACKTOP = sp;
return $$21918$i | 0;
}
case 379:
{
$$21918$i = 1;
STACKTOP = sp;
return $$21918$i | 0;
}
case 399:
{
$$21918$i = ($$1630$i | 0) == 28 ? 10 : ($$1630$i | 0) == 12 ? 17 : 2;
STACKTOP = sp;
return $$21918$i | 0;
}
case 427:
{
label = 437;
break;
}
case 458:
{
$$21918$i = 1;
STACKTOP = sp;
return $$21918$i | 0;
}
case 478:
{
$$21918$i = 1;
STACKTOP = sp;
return $$21918$i | 0;
}
case 501:
{
HEAP32[$3 >> 2] = HEAP32[$6 >> 2];
$$21918$i = 0;
STACKTOP = sp;
return $$21918$i | 0;
}
case 503:
{
$$21918$i = $$21918$i$ph428;
STACKTOP = sp;
return $$21918$i | 0;
}
case 504:
{
$$21918$i = 6;
STACKTOP = sp;
return $$21918$i | 0;
}
case 505:
{
STACKTOP = sp;
return $$21918$i | 0;
}
}
if ((label | 0) == 22) {
HEAP32[$33 >> 2] = 0;
$$21918$i = 1;
STACKTOP = sp;
return $$21918$i | 0;
} else if ((label | 0) == 44) {
HEAP32[$34 >> 2] = 0;
$$21918$i = 1;
STACKTOP = sp;
return $$21918$i | 0;
} else if ((label | 0) == 114) {
HEAP32[$45 >> 2] = 0;
$$21918$i = 1;
STACKTOP = sp;
return $$21918$i | 0;
} else if ((label | 0) == 270) {
HEAP32[$28 >> 2] = 0;
$$21918$i = 1;
STACKTOP = sp;
return $$21918$i | 0;
} else if ((label | 0) == 346) {
HEAP32[$61 >> 2] = 0;
$$21918$i = 1;
STACKTOP = sp;
return $$21918$i | 0;
} else if ((label | 0) == 437) {
HEAP32[$45 >> 2] = 0;
$$21918$i = 1;
STACKTOP = sp;
return $$21918$i | 0;
}
return 0;
}
function __ZN11HanimAvatar19createARPFacePointsEv($0) {
$0 = $0 | 0;
var $$0$i = 0, $$012$i$i$i = 0, $$012$i$i$i154 = 0, $$012$i$i$i238 = 0, $$012$i$i$i301 = 0, $$01215$i$i$i = 0, $$01215$i$i$i151 = 0, $$01215$i$i$i235 = 0, $$01215$i$i$i298 = 0, $$01216$i$i$i = 0, $$01216$i$i$i152 = 0, $$01216$i$i$i236 = 0, $$01216$i$i$i299 = 0, $$0146$off0435 = 0, $$0436 = 0, $$06$i$i = 0, $$1$off0 = 0, $$byval_copy11 = 0, $$pre = f0, $$pre$i164 = 0, $$pre$i169 = 0, $$pre$i180 = 0, $$pre$i188 = 0, $$pre$phi$i157Z2D = 0, $$pre$phi$i241Z2D = 0, $$pre$phi$i304Z2D = 0, $$pre$phi$iZ2D = 0, $$pre445 = f0, $$sink$i$i$i = 0, $$sink$i$i$i158 = 0, $$sink$i$i$i242 = 0, $$sink$i$i$i305 = 0, $1 = 0, $10 = 0, $1003 = 0, $1005 = 0, $1009 = 0, $1010 = 0, $1015 = 0, $1017 = 0, $1021 = 0, $1023 = 0, $1024 = 0, $1030 = 0, $1036 = 0, $1041 = 0, $1043 = 0, $1047 = 0, $1048 = 0, $105 = 0, $1054 = 0, $1060 = 0, $1065 = 0, $1067 = 0, $1071 = 0, $1073 = f0, $1075 = f0, $1076 = 0, $108 = 0, $1082 = 0, $1088 = 0, $1089 = f0, $109 = 0, $1090 = 0, $1092 = f0, $1093 = 0, $1095 = f0, $1097 = f0, $1098 = 0, $1099 = f0, $11 = 0, $110 = 0, $1100 = 0, $1105 = 0, $1107 = 0, $1111 = 0, $1113 = f0, $1114 = f0, $1116 = f0, $1117 = f0, $1118 = 0, $1123 = 0, $1125 = 0, $1129 = 0, $113 = f0, $1132 = f0, $1133 = f0, $1135 = f0, $1136 = 0, $1141 = 0, $1143 = 0, $1147 = 0, $1149 = f0, $1150 = f0, $1152 = f0, $1153 = 0, $1158 = 0, $116 = f0, $1160 = 0, $1164 = 0, $1167 = f0, $1168 = f0, $1170 = f0, $1171 = 0, $1176 = 0, $1178 = 0, $118 = 0, $1182 = 0, $1184 = f0, $1186 = f0, $1188 = f0, $1189 = 0, $1194 = 0, $1196 = 0, $12 = 0, $1200 = 0, $1201 = 0, $1207 = 0, $1213 = 0, $1214 = f0, $1215 = 0, $1217 = f0, $1219 = f0, $1221 = f0, $1222 = 0, $1223 = f0, $1224 = 0, $1229 = 0, $1231 = 0, $1235 = 0, $1237 = f0, $1238 = f0, $124 = f0, $1240 = f0, $1241 = f0, $1242 = 0, $1247 = 0, $1249 = 0, $125 = 0, $1253 = 0, $1256 = f0, $1257 = f0, $1259 = f0, $1260 = 0, $1265 = 0, $1267 = 0, $1271 = 0, $1273 = f0, $1274 = f0, $1276 = f0, $1277 = 0, $1282 = 0, $1284 = 0, $1288 = 0, $1291 = f0, $1292 = f0, $1294 = f0, $1295 = 0, $13 = 0, $1300 = 0, $1302 = 0, $1306 = 0, $1308 = f0, $1310 = f0, $1312 = f0, $1313 = 0, $1318 = 0, $1320 = 0, $1324 = 0, $1325 = 0, $1329 = 0, $133 = f0, $1330 = 0, $1333 = 0, $134 = 0, $1343 = 0, $14 = 0, $140 = f0, $142 = 0, $143 = 0, $145 = f0, $146 = 0, $15 = 0, $151 = 0, $153 = 0, $157 = 0, $159 = f0, $16 = 0, $164 = 0, $166 = 0, $17 = 0, $170 = 0, $171 = 0, $177 = 0, $179 = f0, $18 = 0, $180 = 0, $185 = 0, $187 = 0, $19 = 0, $191 = 0, $193 = f0, $198 = 0, $2 = 0, $20 = 0, $200 = 0, $204 = 0, $205 = 0, $21 = 0, $211 = 0, $217 = f0, $22 = 0, $220 = f0, $222 = f0, $223 = 0, $229 = 0, $23 = 0, $235 = 0, $237 = f0, $238 = 0, $24 = 0, $243 = 0, $245 = 0, $249 = 0, $25 = 0, $251 = f0, $256 = 0, $258 = 0, $26 = 0, $262 = 0, $263 = f0, $264 = 0, $266 = f0, $267 = 0, $27 = 0, $272 = 0, $274 = 0, $278 = 0, $28 = 0, $280 = f0, $285 = 0, $287 = 0, $29 = 0, $291 = 0, $292 = 0, $297 = 0, $299 = 0, $3 = 0, $30 = 0, $303 = 0, $304 = f0, $305 = f0, $306 = f0, $307 = 0, $31 = 0, $313 = 0, $319 = 0, $32 = 0, $325 = f0, $326 = 0, $33 = 0, $332 = 0, $338 = 0, $344 = 0, $35 = 0, $350 = 0, $355 = 0, $357 = 0, $36 = 0, $361 = 0, $362 = 0, $367 = 0, $369 = 0, $373 = 0, $374 = 0, $380 = 0, $386 = 0, $39 = 0, $392 = 0, $398 = 0, $4 = 0, $40 = 0, $404 = 0, $410 = 0, $416 = 0, $42 = 0, $421 = 0, $423 = 0, $427 = 0, $428 = 0, $433 = 0, $435 = 0, $439 = 0, $44 = 0, $440 = 0, $446 = 0, $452 = 0, $457 = 0, $459 = 0, $46 = 0, $463 = 0, $464 = 0, $470 = 0, $476 = 0, $482 = f0, $484 = f0, $486 = 0, $487 = 0, $49 = 0, $498 = 0, $499 = 0, $5 = 0, $502 = 0, $51 = 0, $510 = 0, $512 = f0, $515 = f0, $517 = f0, $52 = 0, $520 = f0, $522 = f0, $525 = f0, $526 = f0, $528 = f0, $531 = f0, $533 = f0, $537 = 0, $54 = 0, $542 = 0, $544 = 0, $548 = 0, $549 = f0, $55 = 0, $550 = 0, $555 = 0, $557 = 0, $56 = 0, $561 = 0, $564 = f0, $566 = f0, $569 = f0, $572 = f0, $573 = f0, $576 = f0, $577 = 0, $583 = 0, $589 = 0, $594 = 0, $596 = 0, $6 = 0, $600 = 0, $603 = f0, $607 = 0, $613 = 0, $618 = 0, $620 = 0, $624 = 0, $625 = 0, $631 = 0, $636 = 0, $638 = 0, $642 = 0, $643 = 0, $649 = 0, $654 = 0, $656 = 0, $660 = 0, $661 = 0, $663 = f0, $664 = 0, $67 = 0, $670 = 0, $675 = 0, $677 = 0, $68 = 0, $681 = 0, $682 = 0, $688 = 0, $693 = 0, $695 = 0, $699 = 0, $7 = 0, $700 = 0, $706 = 0, $711 = 0, $713 = 0, $717 = 0, $718 = 0, $72 = 0, $723 = 0, $725 = 0, $729 = 0, $730 = 0, $735 = 0, $737 = 0, $741 = 0, $743 = 0, $744 = 0, $755 = 0, $756 = 0, $759 = 0, $768 = 0, $773 = 0, $775 = 0, $779 = 0, $780 = 0, $785 = 0, $787 = 0, $791 = 0, $792 = 0, $797 = 0, $799 = 0, $8 = 0, $803 = 0, $804 = 0, $809 = 0, $81 = 0, $811 = 0, $815 = 0, $816 = 0, $82 = 0, $821 = 0, $823 = 0, $827 = 0, $828 = 0, $833 = 0, $835 = 0, $839 = 0, $840 = 0, $846 = 0, $852 = 0, $860 = 0.0, $865 = f0, $866 = 0, $867 = f0, $868 = 0, $871 = 0.0, $872 = 0, $877 = f0, $878 = 0, $883 = 0, $885 = 0, $889 = 0, $892 = 0.0, $897 = f0, $898 = f0, $899 = 0, $9 = 0, $902 = 0.0, $907 = f0, $908 = 0, $913 = 0, $915 = 0, $919 = 0, $920 = 0, $926 = 0, $93 = 0, $932 = 0, $938 = 0, $94 = 0, $944 = f0, $945 = 0, $946 = f0, $948 = f0, $949 = 0, $951 = f0, $952 = 0, $954 = f0, $955 = 0, $960 = 0, $962 = 0, $966 = 0, $967 = f0, $968 = f0, $97 = 0, $970 = f0, $972 = f0, $974 = f0, $975 = 0, $98 = 0, $980 = 0, $982 = 0, $986 = 0, $987 = 0, $992 = 0, $998 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 432 | 0;
$$byval_copy11 = sp + 408 | 0;
$vararg_buffer7 = sp + 32 | 0;
$vararg_buffer5 = sp + 16 | 0;
$vararg_buffer3 = sp + 8 | 0;
$vararg_buffer = sp;
$1 = sp + 360 | 0;
$2 = sp + 348 | 0;
$3 = sp + 336 | 0;
$4 = sp + 396 | 0;
$5 = sp + 384 | 0;
$6 = sp + 324 | 0;
$7 = sp + 312 | 0;
$8 = sp + 300 | 0;
$9 = sp + 288 | 0;
$10 = sp + 276 | 0;
$11 = sp + 252 | 0;
$12 = sp + 240 | 0;
$13 = sp + 228 | 0;
$14 = sp + 216 | 0;
$15 = sp + 204 | 0;
$16 = sp + 192 | 0;
$17 = sp + 180 | 0;
$18 = sp + 168 | 0;
$19 = sp + 380 | 0;
$20 = sp + 376 | 0;
$21 = sp + 372 | 0;
$22 = sp + 156 | 0;
$23 = sp + 144 | 0;
$24 = sp + 132 | 0;
$25 = sp + 120 | 0;
$26 = sp + 108 | 0;
$27 = sp + 96 | 0;
$28 = sp + 84 | 0;
$29 = sp + 72 | 0;
$30 = sp + 60 | 0;
$31 = sp + 48 | 0;
$32 = sp + 36 | 0;
$33 = sp + 264 | 0;
$35 = __ZN7XMLCell7elementEPKc(HEAP32[16168] | 0, 20931) | 0;
$36 = __Znwj(16) | 0;
HEAP32[$36 + 4 >> 2] = 10;
HEAP32[$36 + 12 >> 2] = 0;
$39 = $36 + 8 | 0;
HEAP32[$39 >> 2] = 100;
$40 = _malloc(1200) | 0;
HEAP32[$36 >> 2] = $40;
if (!$40) {
__THREW__ = 0;
HEAP32[$vararg_buffer >> 2] = 100;
invoke_vii(115, 46957, $vararg_buffer | 0);
$42 = __THREW__;
__THREW__ = 0;
if ($42 & 1) {
$109 = ___cxa_find_matching_catch_2() | 0;
$110 = tempRet0;
__ZdlPv($36);
___resumeException($109 | 0);
}
HEAP32[$39 >> 2] = 0;
$44 = ___cxa_allocate_exception(4) | 0;
HEAP32[$44 >> 2] = 1;
__THREW__ = 0;
invoke_viii(75, $44 | 0, 32, 0);
__THREW__ = 0;
$109 = ___cxa_find_matching_catch_2() | 0;
$110 = tempRet0;
__ZdlPv($36);
___resumeException($109 | 0);
}
$$06$i$i = 0;
do {
__THREW__ = 0;
invoke_vi(98, $$byval_copy11 | 0);
$46 = __THREW__;
__THREW__ = 0;
if ($46 & 1) {
label = 28;
break;
}
$49 = (HEAP32[$36 >> 2] | 0) + ($$06$i$i * 12 | 0) | 0;
HEAP32[$49 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$49 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$49 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
$$06$i$i = $$06$i$i + 1 | 0;
} while (($$06$i$i | 0) != 100);
if ((label | 0) == 28) {
$109 = ___cxa_find_matching_catch_2() | 0;
$110 = tempRet0;
__ZdlPv($36);
___resumeException($109 | 0);
}
$51 = $0 + 488 | 0;
HEAP32[$51 >> 2] = $36;
$52 = $0 + 148 | 0;
$54 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(20944, HEAP32[$52 >> 2] | 0) | 0;
$55 = $0 + 144 | 0;
$56 = HEAP32[$55 >> 2] | 0;
L14 : do if ((HEAP16[$56 + ($54 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i = HEAP32[$56 + ($54 << 3) >> 2] | 0;
if (!$$01215$i$i$i) label = 12; else {
$$01216$i$i$i = $$01215$i$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(20944, HEAP32[$$01216$i$i$i >> 2] | 0) | 0) break;
$$012$i$i$i = HEAP32[$$01216$i$i$i + 8 >> 2] | 0;
if (!$$012$i$i$i) {
label = 12;
break L14;
} else $$01216$i$i$i = $$012$i$i$i;
}
$$pre$phi$iZ2D = $0 + 164 | 0;
$$sink$i$i$i = $$01216$i$i$i + 4 | 0;
}
} else label = 12; while (0);
if ((label | 0) == 12) {
$67 = $0 + 164 | 0;
$$pre$phi$iZ2D = $67;
$$sink$i$i$i = $67;
}
$68 = HEAP32[$$sink$i$i$i >> 2] | 0;
if (($68 | 0) == (HEAP32[$$pre$phi$iZ2D >> 2] | 0)) $$0$i = 0; else {
$72 = HEAP32[$0 + 108 >> 2] | 0;
if (($68 | 0) < 0) $$0$i = 0; else if ((HEAP32[$72 + 12 >> 2] | 0) > ($68 | 0)) $$0$i = HEAP32[(HEAP32[$72 >> 2] | 0) + ($68 << 2) >> 2] | 0; else $$0$i = 0;
}
$81 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(20953, HEAP32[$52 >> 2] | 0) | 0;
$82 = HEAP32[$55 >> 2] | 0;
L28 : do if ((HEAP16[$82 + ($81 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i151 = HEAP32[$82 + ($81 << 3) >> 2] | 0;
if (!$$01215$i$i$i151) label = 22; else {
$$01216$i$i$i152 = $$01215$i$i$i151;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(20953, HEAP32[$$01216$i$i$i152 >> 2] | 0) | 0) break;
$$012$i$i$i154 = HEAP32[$$01216$i$i$i152 + 8 >> 2] | 0;
if (!$$012$i$i$i154) {
label = 22;
break L28;
} else $$01216$i$i$i152 = $$012$i$i$i154;
}
$$pre$phi$i157Z2D = $0 + 164 | 0;
$$sink$i$i$i158 = $$01216$i$i$i152 + 4 | 0;
}
} else label = 22; while (0);
if ((label | 0) == 22) {
$93 = $0 + 164 | 0;
$$pre$phi$i157Z2D = $93;
$$sink$i$i$i158 = $93;
}
$94 = HEAP32[$$sink$i$i$i158 >> 2] | 0;
if (($94 | 0) == (HEAP32[$$pre$phi$i157Z2D >> 2] | 0)) {
__Z7eprintfPKcz(20962, $vararg_buffer3);
$108 = ___cxa_allocate_exception(4) | 0;
HEAP32[$108 >> 2] = 15;
___cxa_throw($108 | 0, 232, 0);
}
$97 = $0 + 108 | 0;
$98 = HEAP32[$97 >> 2] | 0;
if (($94 | 0) < 0) {
__Z7eprintfPKcz(20962, $vararg_buffer3);
$108 = ___cxa_allocate_exception(4) | 0;
HEAP32[$108 >> 2] = 15;
___cxa_throw($108 | 0, 232, 0);
}
if ((HEAP32[$98 + 12 >> 2] | 0) <= ($94 | 0)) {
__Z7eprintfPKcz(20962, $vararg_buffer3);
$108 = ___cxa_allocate_exception(4) | 0;
HEAP32[$108 >> 2] = 15;
___cxa_throw($108 | 0, 232, 0);
}
$105 = HEAP32[(HEAP32[$98 >> 2] | 0) + ($94 << 2) >> 2] | 0;
if (($$0$i | 0) == 0 | ($105 | 0) == 0) {
__Z7eprintfPKcz(20962, $vararg_buffer3);
$108 = ___cxa_allocate_exception(4) | 0;
HEAP32[$108 >> 2] = 15;
___cxa_throw($108 | 0, 232, 0);
}
__ZN6VectorC2EPKS_($1, $$0$i + 40 | 0);
__ZN6VectorC2EPKS_($2, $105 + 40 | 0);
__ZN6VectorC2Ev($3);
__ZN6Vector11setMidPointERKS_S1_f($3, $1, $2, Math_fround(.5));
$113 = Math_fround(HEAPF32[$1 >> 2]);
$116 = Math_fround(Math_fround($113 - Math_fround(HEAPF32[$2 >> 2])) * Math_fround(2.5));
HEAPF32[$0 + 380 >> 2] = $116;
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21006, 36);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21018, 37);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21030, 38);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21042, 39);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21054, 40);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21067, 41);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21080, 42);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21093, 43);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21106, 7);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21106, 46);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21120, 8);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21136, 34);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21149, 35);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21162, 44);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21175, 0);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21186, 1);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21197, 2);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21206, 4);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21215, 3);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21224, 5);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21233, 62);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21247, 65);
$118 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$118 + 12 >> 2] | 0) > 3) __ZN6VectorC2ERKS_($4, (HEAP32[$118 >> 2] | 0) + 36 | 0); else __ZN6VectorC2Ev($4);
$124 = Math_fround(HEAPF32[$4 >> 2]);
$125 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$125 + 12 >> 2] | 0) > 5) __ZN6VectorC2ERKS_($5, (HEAP32[$125 >> 2] | 0) + 60 | 0); else __ZN6VectorC2Ev($5);
$133 = Math_fround(Math_fround($124 - Math_fround(HEAPF32[$5 >> 2])) * Math_fround(.5));
$134 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$134 + 12 >> 2] | 0) > 62) __ZN6VectorC2ERKS_($6, (HEAP32[$134 >> 2] | 0) + 744 | 0); else __ZN6VectorC2Ev($6);
$140 = Math_fround($133 * Math_fround(.899999976));
__ZN6VectorC2ERKS_($$byval_copy11, $6);
$142 = HEAP16[36079] | 0;
$143 = $$byval_copy11 + ($142 << 2) | 0;
$145 = Math_fround($140 + Math_fround(HEAPF32[$143 >> 2]));
HEAPF32[$143 >> 2] = $145;
$146 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$146 + 8 >> 2] | 0) <= 61) {
$151 = HEAP32[$146 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($146, ($151 | 0) > 61 ? $151 : 92);
}
$153 = $146 + 12 | 0;
if ((HEAP32[$153 >> 2] | 0) <= 61) HEAP32[$153 >> 2] = 62;
$157 = (HEAP32[$146 >> 2] | 0) + 732 | 0;
HEAP32[$157 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$157 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$157 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
$$pre$i164 = HEAP32[$51 >> 2] | 0;
$159 = Math_fround(Math_fround(HEAPF32[$6 >> 2]) - $140);
HEAPF32[$143 >> 2] = $159;
if ((HEAP32[$$pre$i164 + 8 >> 2] | 0) <= 63) {
$164 = HEAP32[$$pre$i164 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($$pre$i164, ($164 | 0) > 63 ? $164 : 95);
}
$166 = $$pre$i164 + 12 | 0;
if ((HEAP32[$166 >> 2] | 0) <= 63) HEAP32[$166 >> 2] = 64;
$170 = (HEAP32[$$pre$i164 >> 2] | 0) + 756 | 0;
HEAP32[$170 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$170 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$170 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
$171 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$171 + 12 >> 2] | 0) > 65) __ZN6VectorC2ERKS_($6, (HEAP32[$171 >> 2] | 0) + 780 | 0); else __ZN6VectorC2Ev($6);
__ZN6VectorC2ERKS_($$byval_copy11, $6);
$177 = $$byval_copy11 + ($142 << 2) | 0;
$179 = Math_fround($133 + Math_fround(HEAPF32[$177 >> 2]));
HEAPF32[$177 >> 2] = $179;
$180 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$180 + 8 >> 2] | 0) <= 64) {
$185 = HEAP32[$180 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($180, ($185 | 0) > 64 ? $185 : 97);
}
$187 = $180 + 12 | 0;
if ((HEAP32[$187 >> 2] | 0) <= 64) HEAP32[$187 >> 2] = 65;
$191 = (HEAP32[$180 >> 2] | 0) + 768 | 0;
HEAP32[$191 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$191 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$191 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
$$pre$i169 = HEAP32[$51 >> 2] | 0;
$193 = Math_fround(Math_fround(HEAPF32[$6 >> 2]) - $133);
HEAPF32[$177 >> 2] = $193;
if ((HEAP32[$$pre$i169 + 8 >> 2] | 0) <= 66) {
$198 = HEAP32[$$pre$i169 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($$pre$i169, ($198 | 0) > 66 ? $198 : 100);
}
$200 = $$pre$i169 + 12 | 0;
if ((HEAP32[$200 >> 2] | 0) <= 66) HEAP32[$200 >> 2] = 67;
$204 = (HEAP32[$$pre$i169 >> 2] | 0) + 792 | 0;
HEAP32[$204 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$204 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$204 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21262, 6);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21274, 9);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21282, 10);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21290, 48);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21299, 53);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21308, 55);
$205 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$205 + 12 >> 2] | 0) > 53) __ZN6VectorC2ERKS_($6, (HEAP32[$205 >> 2] | 0) + 636 | 0); else __ZN6VectorC2Ev($6);
$211 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$211 + 12 >> 2] | 0) > 55) __ZN6VectorC2ERKS_($7, (HEAP32[$211 >> 2] | 0) + 660 | 0); else __ZN6VectorC2Ev($7);
$217 = Math_fround(HEAPF32[$6 >> 2]);
$220 = Math_fround(Math_fround($217 - Math_fround(HEAPF32[$7 >> 2])) * Math_fround(.5));
$222 = Math_fround(Math_fround(__ZN7XMLCell11attrib_REALEPKcf($35, 21317, Math_fround(.25))) * $220);
$223 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$223 + 12 >> 2] | 0) > 48) __ZN6VectorC2ERKS_($8, (HEAP32[$223 >> 2] | 0) + 576 | 0); else __ZN6VectorC2Ev($8);
$229 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$229 + 12 >> 2] | 0) > 2) __ZN6VectorC2ERKS_($9, (HEAP32[$229 >> 2] | 0) + 24 | 0); else __ZN6VectorC2Ev($9);
__ZN6VectorC2Ev($10);
__ZN6Vector11setMidPointERKS_S1_f($10, $8, $9, Math_fround(.5));
__ZN6VectorC2Ev($11);
__ZN6Vector11setSubtractERKS_S1_($11, $8, $9);
__ZN6Vector8setScaleEf($11, Math_fround(.200000003));
__ZN6Vector6setAddERKS_($10, $11);
__ZN6VectorC2ERKS_($$byval_copy11, $8);
$235 = $$byval_copy11 + ($142 << 2) | 0;
$237 = Math_fround($222 + Math_fround(HEAPF32[$235 >> 2]));
HEAPF32[$235 >> 2] = $237;
$238 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$238 + 8 >> 2] | 0) <= 49) {
$243 = HEAP32[$238 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($238, ($243 | 0) > 49 ? $243 : 74);
}
$245 = $238 + 12 | 0;
if ((HEAP32[$245 >> 2] | 0) <= 49) HEAP32[$245 >> 2] = 50;
$249 = (HEAP32[$238 >> 2] | 0) + 588 | 0;
HEAP32[$249 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$249 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$249 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
$$pre$i180 = HEAP32[$51 >> 2] | 0;
$251 = Math_fround(Math_fround(HEAPF32[$8 >> 2]) - $222);
HEAPF32[$235 >> 2] = $251;
if ((HEAP32[$$pre$i180 + 8 >> 2] | 0) <= 50) {
$256 = HEAP32[$$pre$i180 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($$pre$i180, ($256 | 0) > 50 ? $256 : 76);
}
$258 = $$pre$i180 + 12 | 0;
if ((HEAP32[$258 >> 2] | 0) <= 50) HEAP32[$258 >> 2] = 51;
$262 = (HEAP32[$$pre$i180 >> 2] | 0) + 600 | 0;
HEAP32[$262 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$262 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$262 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
$263 = Math_fround($222 * Math_fround(.5));
__ZN6VectorC2ERKS_($$byval_copy11, $10);
$264 = $$byval_copy11 + ($142 << 2) | 0;
$266 = Math_fround($263 + Math_fround(HEAPF32[$264 >> 2]));
HEAPF32[$264 >> 2] = $266;
$267 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$267 + 8 >> 2] | 0) <= 51) {
$272 = HEAP32[$267 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($267, ($272 | 0) > 51 ? $272 : 77);
}
$274 = $267 + 12 | 0;
if ((HEAP32[$274 >> 2] | 0) <= 51) HEAP32[$274 >> 2] = 52;
$278 = (HEAP32[$267 >> 2] | 0) + 612 | 0;
HEAP32[$278 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$278 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$278 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
$$pre$i188 = HEAP32[$51 >> 2] | 0;
$280 = Math_fround(Math_fround(HEAPF32[$10 >> 2]) - $263);
HEAPF32[$264 >> 2] = $280;
if ((HEAP32[$$pre$i188 + 8 >> 2] | 0) <= 52) {
$285 = HEAP32[$$pre$i188 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($$pre$i188, ($285 | 0) > 52 ? $285 : 79);
}
$287 = $$pre$i188 + 12 | 0;
if ((HEAP32[$287 >> 2] | 0) <= 52) HEAP32[$287 >> 2] = 53;
$291 = (HEAP32[$$pre$i188 >> 2] | 0) + 624 | 0;
HEAP32[$291 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$291 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$291 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
__ZN6VectorC2Ev($12);
__ZN6Vector11setMidPointERKS_S1_f($12, $6, $7, Math_fround(.5));
$292 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$292 + 8 >> 2] | 0) <= 54) {
$297 = HEAP32[$292 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($292, ($297 | 0) > 54 ? $297 : 82);
}
$299 = $292 + 12 | 0;
if ((HEAP32[$299 >> 2] | 0) <= 54) HEAP32[$299 >> 2] = 55;
$303 = (HEAP32[$292 >> 2] | 0) + 648 | 0;
HEAP32[$303 >> 2] = HEAP32[$12 >> 2];
HEAP32[$303 + 4 >> 2] = HEAP32[$12 + 4 >> 2];
HEAP32[$303 + 8 >> 2] = HEAP32[$12 + 8 >> 2];
$304 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($35, 21340, Math_fround(.100000001)));
$305 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($35, 21356, Math_fround(.449999988)));
$306 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($35, 21373, Math_fround(.0500000007)));
__ZN6VectorC2Ev($13);
__ZN6VectorC2Ev($14);
$307 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$307 + 12 >> 2] | 0) > 53) __ZN6VectorC2ERKS_($$byval_copy11, (HEAP32[$307 >> 2] | 0) + 636 | 0); else __ZN6VectorC2Ev($$byval_copy11);
$313 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$313 + 12 >> 2] | 0) > 49) __ZN6VectorC2ERKS_($15, (HEAP32[$313 >> 2] | 0) + 588 | 0); else __ZN6VectorC2Ev($15);
__ZN6Vector11setMidPointERKS_S1_f($14, $$byval_copy11, $15, Math_fround(.5));
$319 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$319 + 12 >> 2] | 0) > 54) __ZN6VectorC2ERKS_($$byval_copy11, (HEAP32[$319 >> 2] | 0) + 648 | 0); else __ZN6VectorC2Ev($$byval_copy11);
$325 = Math_fround(-$304);
__ZN6Vector11setMidPointERKS_S1_f($14, $14, $$byval_copy11, $325);
$326 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$326 + 12 >> 2] | 0) > 53) __ZN6VectorC2ERKS_($$byval_copy11, (HEAP32[$326 >> 2] | 0) + 636 | 0); else __ZN6VectorC2Ev($$byval_copy11);
$332 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$332 + 12 >> 2] | 0) > 54) __ZN6VectorC2ERKS_($15, (HEAP32[$332 >> 2] | 0) + 648 | 0); else __ZN6VectorC2Ev($15);
__ZN6Vector11setMidPointERKS_S1_f($13, $$byval_copy11, $15, Math_fround(.5));
$338 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$338 + 12 >> 2] | 0) > 49) __ZN6VectorC2ERKS_($$byval_copy11, (HEAP32[$338 >> 2] | 0) + 588 | 0); else __ZN6VectorC2Ev($$byval_copy11);
__ZN6Vector11setMidPointERKS_S1_f($13, $13, $$byval_copy11, $305);
$344 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$344 + 12 >> 2] | 0) > 2) __ZN6VectorC2ERKS_($$byval_copy11, (HEAP32[$344 >> 2] | 0) + 24 | 0); else __ZN6VectorC2Ev($$byval_copy11);
__ZN6Vector11setMidPointERKS_S1_f($13, $13, $$byval_copy11, $306);
$350 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$350 + 8 >> 2] | 0) <= 56) {
$355 = HEAP32[$350 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($350, ($355 | 0) > 56 ? $355 : 85);
}
$357 = $350 + 12 | 0;
if ((HEAP32[$357 >> 2] | 0) <= 56) HEAP32[$357 >> 2] = 57;
$361 = (HEAP32[$350 >> 2] | 0) + 672 | 0;
HEAP32[$361 >> 2] = HEAP32[$13 >> 2];
HEAP32[$361 + 4 >> 2] = HEAP32[$13 + 4 >> 2];
HEAP32[$361 + 8 >> 2] = HEAP32[$13 + 8 >> 2];
$362 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$362 + 8 >> 2] | 0) <= 59) {
$367 = HEAP32[$362 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($362, ($367 | 0) > 59 ? $367 : 89);
}
$369 = $362 + 12 | 0;
if ((HEAP32[$369 >> 2] | 0) <= 59) HEAP32[$369 >> 2] = 60;
$373 = (HEAP32[$362 >> 2] | 0) + 708 | 0;
HEAP32[$373 >> 2] = HEAP32[$14 >> 2];
HEAP32[$373 + 4 >> 2] = HEAP32[$14 + 4 >> 2];
HEAP32[$373 + 8 >> 2] = HEAP32[$14 + 8 >> 2];
$374 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$374 + 12 >> 2] | 0) > 55) __ZN6VectorC2ERKS_($$byval_copy11, (HEAP32[$374 >> 2] | 0) + 660 | 0); else __ZN6VectorC2Ev($$byval_copy11);
$380 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$380 + 12 >> 2] | 0) > 50) __ZN6VectorC2ERKS_($15, (HEAP32[$380 >> 2] | 0) + 600 | 0); else __ZN6VectorC2Ev($15);
__ZN6Vector11setMidPointERKS_S1_f($14, $$byval_copy11, $15, Math_fround(.5));
$386 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$386 + 12 >> 2] | 0) > 54) __ZN6VectorC2ERKS_($$byval_copy11, (HEAP32[$386 >> 2] | 0) + 648 | 0); else __ZN6VectorC2Ev($$byval_copy11);
__ZN6Vector11setMidPointERKS_S1_f($14, $14, $$byval_copy11, $325);
$392 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$392 + 12 >> 2] | 0) > 55) __ZN6VectorC2ERKS_($$byval_copy11, (HEAP32[$392 >> 2] | 0) + 660 | 0); else __ZN6VectorC2Ev($$byval_copy11);
$398 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$398 + 12 >> 2] | 0) > 54) __ZN6VectorC2ERKS_($15, (HEAP32[$398 >> 2] | 0) + 648 | 0); else __ZN6VectorC2Ev($15);
__ZN6Vector11setMidPointERKS_S1_f($13, $$byval_copy11, $15, Math_fround(.5));
$404 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$404 + 12 >> 2] | 0) > 50) __ZN6VectorC2ERKS_($$byval_copy11, (HEAP32[$404 >> 2] | 0) + 600 | 0); else __ZN6VectorC2Ev($$byval_copy11);
__ZN6Vector11setMidPointERKS_S1_f($13, $13, $$byval_copy11, $305);
$410 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$410 + 12 >> 2] | 0) > 2) __ZN6VectorC2ERKS_($$byval_copy11, (HEAP32[$410 >> 2] | 0) + 24 | 0); else __ZN6VectorC2Ev($$byval_copy11);
__ZN6Vector11setMidPointERKS_S1_f($13, $13, $$byval_copy11, $306);
$416 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$416 + 8 >> 2] | 0) <= 58) {
$421 = HEAP32[$416 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($416, ($421 | 0) > 58 ? $421 : 88);
}
$423 = $416 + 12 | 0;
if ((HEAP32[$423 >> 2] | 0) <= 58) HEAP32[$423 >> 2] = 59;
$427 = (HEAP32[$416 >> 2] | 0) + 696 | 0;
HEAP32[$427 >> 2] = HEAP32[$13 >> 2];
HEAP32[$427 + 4 >> 2] = HEAP32[$13 + 4 >> 2];
HEAP32[$427 + 8 >> 2] = HEAP32[$13 + 8 >> 2];
$428 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$428 + 8 >> 2] | 0) <= 60) {
$433 = HEAP32[$428 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($428, ($433 | 0) > 60 ? $433 : 91);
}
$435 = $428 + 12 | 0;
if ((HEAP32[$435 >> 2] | 0) <= 60) HEAP32[$435 >> 2] = 61;
$439 = (HEAP32[$428 >> 2] | 0) + 720 | 0;
HEAP32[$439 >> 2] = HEAP32[$14 >> 2];
HEAP32[$439 + 4 >> 2] = HEAP32[$14 + 4 >> 2];
HEAP32[$439 + 8 >> 2] = HEAP32[$14 + 8 >> 2];
$440 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$440 + 12 >> 2] | 0) > 48) __ZN6VectorC2ERKS_($$byval_copy11, (HEAP32[$440 >> 2] | 0) + 576 | 0); else __ZN6VectorC2Ev($$byval_copy11);
$446 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$446 + 12 >> 2] | 0) > 54) __ZN6VectorC2ERKS_($15, (HEAP32[$446 >> 2] | 0) + 648 | 0); else __ZN6VectorC2Ev($15);
__ZN6Vector11setMidPointERKS_S1_f($13, $$byval_copy11, $15, Math_fround(.5));
$452 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$452 + 8 >> 2] | 0) <= 57) {
$457 = HEAP32[$452 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($452, ($457 | 0) > 57 ? $457 : 86);
}
$459 = $452 + 12 | 0;
if ((HEAP32[$459 >> 2] | 0) <= 57) HEAP32[$459 >> 2] = 58;
$463 = (HEAP32[$452 >> 2] | 0) + 684 | 0;
HEAP32[$463 >> 2] = HEAP32[$13 >> 2];
HEAP32[$463 + 4 >> 2] = HEAP32[$13 + 4 >> 2];
HEAP32[$463 + 8 >> 2] = HEAP32[$13 + 8 >> 2];
$464 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$464 + 12 >> 2] | 0) > 3) __ZN6VectorC2ERKS_($15, (HEAP32[$464 >> 2] | 0) + 36 | 0); else __ZN6VectorC2Ev($15);
$470 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$470 + 12 >> 2] | 0) > 5) __ZN6VectorC2ERKS_($16, (HEAP32[$470 >> 2] | 0) + 60 | 0); else __ZN6VectorC2Ev($16);
$476 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$476 + 12 >> 2] | 0) > 54) __ZN6VectorC2ERKS_($17, (HEAP32[$476 >> 2] | 0) + 648 | 0); else __ZN6VectorC2Ev($17);
$482 = Math_fround(HEAPF32[$15 >> 2]);
$484 = Math_fround($482 - Math_fround(HEAPF32[$16 >> 2]));
$486 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(21386, HEAP32[$52 >> 2] | 0) | 0;
$487 = HEAP32[$55 >> 2] | 0;
L241 : do if ((HEAP16[$487 + ($486 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i235 = HEAP32[$487 + ($486 << 3) >> 2] | 0;
if (!$$01215$i$i$i235) {
label = 171;
break;
} else $$01216$i$i$i236 = $$01215$i$i$i235;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(21386, HEAP32[$$01216$i$i$i236 >> 2] | 0) | 0) break;
$$012$i$i$i238 = HEAP32[$$01216$i$i$i236 + 8 >> 2] | 0;
if (!$$012$i$i$i238) {
label = 171;
break L241;
} else $$01216$i$i$i236 = $$012$i$i$i238;
}
$$pre$phi$i241Z2D = $0 + 164 | 0;
$$sink$i$i$i242 = $$01216$i$i$i236 + 4 | 0;
} else label = 171; while (0);
if ((label | 0) == 171) {
$498 = $0 + 164 | 0;
$$pre$phi$i241Z2D = $498;
$$sink$i$i$i242 = $498;
}
$499 = HEAP32[$$sink$i$i$i242 >> 2] | 0;
do if (($499 | 0) == (HEAP32[$$pre$phi$i241Z2D >> 2] | 0)) label = 175; else {
$502 = HEAP32[$97 >> 2] | 0;
if (($499 | 0) < 0) {
label = 175;
break;
}
if ((HEAP32[$502 + 12 >> 2] | 0) <= ($499 | 0)) {
label = 175;
break;
}
$510 = (HEAP32[(HEAP32[$502 >> 2] | 0) + ($499 << 2) >> 2] | 0) == 0;
HEAP8[72206] = $510 & 1;
if ($510) {
label = 178;
break;
}
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21386, 11);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21395, 12);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21404, 13);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21417, 14);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21430, 15);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21443, 16);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21456, 17);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21469, 18);
} while (0);
if ((label | 0) == 175) {
HEAP8[72206] = 1;
label = 178;
}
if ((label | 0) == 178) {
$512 = Math_fround(HEAPF32[$15 >> 2]);
$515 = Math_fround(Math_fround($512 + Math_fround(HEAPF32[$16 >> 2])) * Math_fround(.5));
$517 = Math_fround(HEAPF32[$15 + 4 >> 2]);
$520 = Math_fround($517 + Math_fround(HEAPF32[$16 + 4 >> 2]));
$522 = Math_fround(HEAPF32[$17 + 4 >> 2]);
$525 = Math_fround(Math_fround($522 + Math_fround($520 + $522)) * Math_fround(.25));
$526 = Math_fround($484 + $515);
$528 = Math_fround(HEAPF32[$15 + 8 >> 2]);
$531 = Math_fround($528 + Math_fround(HEAPF32[$16 + 8 >> 2]));
$533 = Math_fround(HEAPF32[$17 + 8 >> 2]);
__ZN6VectorC2Efff($$byval_copy11, $526, $525, Math_fround(Math_fround($533 + Math_fround($531 + $533)) * Math_fround(.25)));
$537 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$537 + 8 >> 2] | 0) <= 11) {
$542 = HEAP32[$537 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($537, ($542 | 0) > 11 ? $542 : 17);
}
$544 = $537 + 12 | 0;
if ((HEAP32[$544 >> 2] | 0) <= 11) HEAP32[$544 >> 2] = 12;
$548 = (HEAP32[$537 >> 2] | 0) + 132 | 0;
HEAP32[$548 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$548 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$548 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
$549 = Math_fround($515 - $484);
HEAPF32[$$byval_copy11 >> 2] = $549;
$550 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$550 + 8 >> 2] | 0) <= 12) {
$555 = HEAP32[$550 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($550, ($555 | 0) > 12 ? $555 : 19);
}
$557 = $550 + 12 | 0;
if ((HEAP32[$557 >> 2] | 0) <= 12) HEAP32[$557 >> 2] = 13;
$561 = (HEAP32[$550 >> 2] | 0) + 144 | 0;
HEAP32[$561 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$561 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$561 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
HEAPF32[$$byval_copy11 >> 2] = $515;
$564 = Math_fround(Math_fround(HEAPF32[$0 + 424 >> 2]) * Math_fround(.5));
$566 = Math_fround(HEAPF32[$0 + 428 >> 2]);
$569 = Math_fround($564 + Math_fround(HEAPF32[$0 + 416 >> 2]));
$572 = Math_fround($566 + Math_fround(HEAPF32[$0 + 420 >> 2]));
$573 = Math_fround($484 * Math_fround(.5));
__ZN6VectorC2Efff($18, $573, $569, $572);
__ZN11HanimAvatar18SetFacePointTripleEsssRK6VectorS2_($0, 13, 14, 15, $$byval_copy11, $18);
__ZN6VectorC2Efff($18, $573, Math_fround(-$569), $572);
__ZN11HanimAvatar18SetFacePointTripleEsssRK6VectorS2_($0, 16, 17, 18, $$byval_copy11, $18);
__ZN6VectorC2Efff($18, $573, $564, $566);
__ZN11HanimAvatar18SetFacePointTripleEsssRK6VectorS2_($0, 19, 20, 21, $$byval_copy11, $18);
__ZN6VectorC2Efff($18, $573, Math_fround(-$564), $566);
__ZN11HanimAvatar18SetFacePointTripleEsssRK6VectorS2_($0, 22, 23, 24, $$byval_copy11, $18);
}
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($19, 36, 0, 0, 0, 1, 0);
$576 = Math_fround($484 * Math_fround(.600000024));
HEAP8[$$byval_copy11 >> 0] = HEAP8[$19 >> 0] | 0;
HEAP8[$$byval_copy11 + 1 >> 0] = HEAP8[$19 + 1 >> 0] | 0;
HEAP8[$$byval_copy11 + 2 >> 0] = HEAP8[$19 + 2 >> 0] | 0;
HEAP8[$$byval_copy11 + 3 >> 0] = HEAP8[$19 + 3 >> 0] | 0;
__ZN11HanimAvatar14createSitePairE6SiteIDff($0, $$byval_copy11, $576, Math_fround(.5));
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($20, 37, 0, 0, 0, 1, 0);
HEAP8[$$byval_copy11 >> 0] = HEAP8[$20 >> 0] | 0;
HEAP8[$$byval_copy11 + 1 >> 0] = HEAP8[$20 + 1 >> 0] | 0;
HEAP8[$$byval_copy11 + 2 >> 0] = HEAP8[$20 + 2 >> 0] | 0;
HEAP8[$$byval_copy11 + 3 >> 0] = HEAP8[$20 + 3 >> 0] | 0;
__ZN11HanimAvatar14createSitePairE6SiteIDff($0, $$byval_copy11, $576, Math_fround(.5));
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($21, 38, 0, 0, 0, 1, 0);
HEAP8[$$byval_copy11 >> 0] = HEAP8[$21 >> 0] | 0;
HEAP8[$$byval_copy11 + 1 >> 0] = HEAP8[$21 + 1 >> 0] | 0;
HEAP8[$$byval_copy11 + 2 >> 0] = HEAP8[$21 + 2 >> 0] | 0;
HEAP8[$$byval_copy11 + 3 >> 0] = HEAP8[$21 + 3 >> 0] | 0;
__ZN11HanimAvatar14createSitePairE6SiteIDff($0, $$byval_copy11, $576, Math_fround(.5));
$577 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$577 + 12 >> 2] | 0) > 14) __ZN6VectorC2ERKS_($$byval_copy11, (HEAP32[$577 >> 2] | 0) + 168 | 0); else __ZN6VectorC2Ev($$byval_copy11);
$583 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$583 + 12 >> 2] | 0) > 17) __ZN6VectorC2ERKS_($18, (HEAP32[$583 >> 2] | 0) + 204 | 0); else __ZN6VectorC2Ev($18);
__ZN6VectorC2Ev($22);
__ZN6Vector11setMidPointERKS_S1_f($22, $$byval_copy11, $18, Math_fround(.5));
$589 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$589 + 8 >> 2] | 0) <= 25) {
$594 = HEAP32[$589 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($589, ($594 | 0) > 25 ? $594 : 38);
}
$596 = $589 + 12 | 0;
if ((HEAP32[$596 >> 2] | 0) <= 25) HEAP32[$596 >> 2] = 26;
$600 = (HEAP32[$589 >> 2] | 0) + 300 | 0;
HEAP32[$600 >> 2] = HEAP32[$22 >> 2];
HEAP32[$600 + 4 >> 2] = HEAP32[$22 + 4 >> 2];
HEAP32[$600 + 8 >> 2] = HEAP32[$22 + 8 >> 2];
$603 = Math_fround(-Math_fround(HEAPF32[$0 + 416 >> 2]));
__ZN6VectorC2Efff($$byval_copy11, Math_fround(0.0), $603, Math_fround(-Math_fround(HEAPF32[$0 + 420 >> 2])));
__ZN6VectorC2Ev($18);
$607 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$607 + 12 >> 2] | 0) > 13) __ZN6VectorC2ERKS_($22, (HEAP32[$607 >> 2] | 0) + 156 | 0); else __ZN6VectorC2Ev($22);
__ZN6Vector6setAddERKS_S1_($18, $$byval_copy11, $22);
$613 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$613 + 8 >> 2] | 0) <= 19) {
$618 = HEAP32[$613 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($613, ($618 | 0) > 19 ? $618 : 29);
}
$620 = $613 + 12 | 0;
if ((HEAP32[$620 >> 2] | 0) <= 19) HEAP32[$620 >> 2] = 20;
$624 = (HEAP32[$613 >> 2] | 0) + 228 | 0;
HEAP32[$624 >> 2] = HEAP32[$18 >> 2];
HEAP32[$624 + 4 >> 2] = HEAP32[$18 + 4 >> 2];
HEAP32[$624 + 8 >> 2] = HEAP32[$18 + 8 >> 2];
$625 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$625 + 12 >> 2] | 0) > 14) __ZN6VectorC2ERKS_($22, (HEAP32[$625 >> 2] | 0) + 168 | 0); else __ZN6VectorC2Ev($22);
__ZN6Vector6setAddERKS_S1_($18, $$byval_copy11, $22);
$631 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$631 + 8 >> 2] | 0) <= 20) {
$636 = HEAP32[$631 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($631, ($636 | 0) > 20 ? $636 : 31);
}
$638 = $631 + 12 | 0;
if ((HEAP32[$638 >> 2] | 0) <= 20) HEAP32[$638 >> 2] = 21;
$642 = (HEAP32[$631 >> 2] | 0) + 240 | 0;
HEAP32[$642 >> 2] = HEAP32[$18 >> 2];
HEAP32[$642 + 4 >> 2] = HEAP32[$18 + 4 >> 2];
HEAP32[$642 + 8 >> 2] = HEAP32[$18 + 8 >> 2];
$643 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$643 + 12 >> 2] | 0) > 15) __ZN6VectorC2ERKS_($22, (HEAP32[$643 >> 2] | 0) + 180 | 0); else __ZN6VectorC2Ev($22);
__ZN6Vector6setAddERKS_S1_($18, $$byval_copy11, $22);
$649 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$649 + 8 >> 2] | 0) <= 21) {
$654 = HEAP32[$649 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($649, ($654 | 0) > 21 ? $654 : 32);
}
$656 = $649 + 12 | 0;
if ((HEAP32[$656 >> 2] | 0) <= 21) HEAP32[$656 >> 2] = 22;
$660 = (HEAP32[$649 >> 2] | 0) + 252 | 0;
HEAP32[$660 >> 2] = HEAP32[$18 >> 2];
HEAP32[$660 + 4 >> 2] = HEAP32[$18 + 4 >> 2];
HEAP32[$660 + 8 >> 2] = HEAP32[$18 + 8 >> 2];
$661 = $$byval_copy11 + 8 | 0;
$663 = Math_fround(-Math_fround(HEAPF32[$661 >> 2]));
HEAPF32[$661 >> 2] = $663;
$664 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$664 + 12 >> 2] | 0) > 16) __ZN6VectorC2ERKS_($22, (HEAP32[$664 >> 2] | 0) + 192 | 0); else __ZN6VectorC2Ev($22);
__ZN6Vector6setAddERKS_S1_($18, $$byval_copy11, $22);
$670 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$670 + 8 >> 2] | 0) <= 22) {
$675 = HEAP32[$670 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($670, ($675 | 0) > 22 ? $675 : 34);
}
$677 = $670 + 12 | 0;
if ((HEAP32[$677 >> 2] | 0) <= 22) HEAP32[$677 >> 2] = 23;
$681 = (HEAP32[$670 >> 2] | 0) + 264 | 0;
HEAP32[$681 >> 2] = HEAP32[$18 >> 2];
HEAP32[$681 + 4 >> 2] = HEAP32[$18 + 4 >> 2];
HEAP32[$681 + 8 >> 2] = HEAP32[$18 + 8 >> 2];
$682 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$682 + 12 >> 2] | 0) > 17) __ZN6VectorC2ERKS_($22, (HEAP32[$682 >> 2] | 0) + 204 | 0); else __ZN6VectorC2Ev($22);
__ZN6Vector6setAddERKS_S1_($18, $$byval_copy11, $22);
$688 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$688 + 8 >> 2] | 0) <= 23) {
$693 = HEAP32[$688 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($688, ($693 | 0) > 23 ? $693 : 35);
}
$695 = $688 + 12 | 0;
if ((HEAP32[$695 >> 2] | 0) <= 23) HEAP32[$695 >> 2] = 24;
$699 = (HEAP32[$688 >> 2] | 0) + 276 | 0;
HEAP32[$699 >> 2] = HEAP32[$18 >> 2];
HEAP32[$699 + 4 >> 2] = HEAP32[$18 + 4 >> 2];
HEAP32[$699 + 8 >> 2] = HEAP32[$18 + 8 >> 2];
$700 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$700 + 12 >> 2] | 0) > 18) __ZN6VectorC2ERKS_($22, (HEAP32[$700 >> 2] | 0) + 216 | 0); else __ZN6VectorC2Ev($22);
__ZN6Vector6setAddERKS_S1_($18, $$byval_copy11, $22);
$706 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$706 + 8 >> 2] | 0) <= 24) {
$711 = HEAP32[$706 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($706, ($711 | 0) > 24 ? $711 : 37);
}
$713 = $706 + 12 | 0;
if ((HEAP32[$713 >> 2] | 0) <= 24) HEAP32[$713 >> 2] = 25;
$717 = (HEAP32[$706 >> 2] | 0) + 288 | 0;
HEAP32[$717 >> 2] = HEAP32[$18 >> 2];
HEAP32[$717 + 4 >> 2] = HEAP32[$18 + 4 >> 2];
HEAP32[$717 + 8 >> 2] = HEAP32[$18 + 8 >> 2];
$718 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$718 + 8 >> 2] | 0) <= 26) {
$723 = HEAP32[$718 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($718, ($723 | 0) > 26 ? $723 : 40);
}
$725 = $718 + 12 | 0;
if ((HEAP32[$725 >> 2] | 0) <= 26) HEAP32[$725 >> 2] = 27;
$729 = (HEAP32[$718 >> 2] | 0) + 312 | 0;
HEAP32[$729 >> 2] = HEAP32[$1 >> 2];
HEAP32[$729 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$729 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
$730 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$730 + 8 >> 2] | 0) <= 27) {
$735 = HEAP32[$730 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($730, ($735 | 0) > 27 ? $735 : 41);
}
$737 = $730 + 12 | 0;
if ((HEAP32[$737 >> 2] | 0) <= 27) HEAP32[$737 >> 2] = 28;
$741 = (HEAP32[$730 >> 2] | 0) + 324 | 0;
HEAP32[$741 >> 2] = HEAP32[$2 >> 2];
HEAP32[$741 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
HEAP32[$741 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
$743 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(21482, HEAP32[$52 >> 2] | 0) | 0;
$744 = HEAP32[$55 >> 2] | 0;
L358 : do if ((HEAP16[$744 + ($743 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i298 = HEAP32[$744 + ($743 << 3) >> 2] | 0;
if (!$$01215$i$i$i298) {
label = 252;
break;
} else $$01216$i$i$i299 = $$01215$i$i$i298;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(21482, HEAP32[$$01216$i$i$i299 >> 2] | 0) | 0) break;
$$012$i$i$i301 = HEAP32[$$01216$i$i$i299 + 8 >> 2] | 0;
if (!$$012$i$i$i301) {
label = 252;
break L358;
} else $$01216$i$i$i299 = $$012$i$i$i301;
}
$$pre$phi$i304Z2D = $0 + 164 | 0;
$$sink$i$i$i305 = $$01216$i$i$i299 + 4 | 0;
} else label = 252; while (0);
if ((label | 0) == 252) {
$755 = $0 + 164 | 0;
$$pre$phi$i304Z2D = $755;
$$sink$i$i$i305 = $755;
}
$756 = HEAP32[$$sink$i$i$i305 >> 2] | 0;
do if (($756 | 0) == (HEAP32[$$pre$phi$i304Z2D >> 2] | 0)) label = 258; else {
$759 = HEAP32[$97 >> 2] | 0;
if (($756 | 0) < 0) {
label = 258;
break;
}
if ((HEAP32[$759 + 12 >> 2] | 0) <= ($756 | 0)) {
label = 258;
break;
}
if (!(HEAP32[(HEAP32[$759 >> 2] | 0) + ($756 << 2) >> 2] | 0)) {
label = 258;
break;
}
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21482, 28);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21497, 29);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21512, 30);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21527, 31);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21542, 32);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21557, 33);
} while (0);
if ((label | 0) == 258) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(21572, $vararg_buffer5);
__ZN6VectorC2Ev($$byval_copy11);
__ZN6VectorC2Efff($vararg_buffer5, Math_fround(0.0), Math_fround(-.00999999977), Math_fround(.00999999977));
__ZN6Vector6setAddERKS_S1_($$byval_copy11, $1, $vararg_buffer5);
$768 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$768 + 8 >> 2] | 0) <= 28) {
$773 = HEAP32[$768 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($768, ($773 | 0) > 28 ? $773 : 43);
}
$775 = $768 + 12 | 0;
if ((HEAP32[$775 >> 2] | 0) <= 28) HEAP32[$775 >> 2] = 29;
$779 = (HEAP32[$768 >> 2] | 0) + 336 | 0;
HEAP32[$779 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$779 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$779 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
__ZN6VectorC2Efff($vararg_buffer5, Math_fround(0.0), Math_fround(-.00999999977), Math_fround(.00999999977));
__ZN6Vector6setAddERKS_S1_($$byval_copy11, $2, $vararg_buffer5);
$780 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$780 + 8 >> 2] | 0) <= 29) {
$785 = HEAP32[$780 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($780, ($785 | 0) > 29 ? $785 : 44);
}
$787 = $780 + 12 | 0;
if ((HEAP32[$787 >> 2] | 0) <= 29) HEAP32[$787 >> 2] = 30;
$791 = (HEAP32[$780 >> 2] | 0) + 348 | 0;
HEAP32[$791 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$791 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$791 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
__ZN6VectorC2Efff($vararg_buffer5, Math_fround(0.0), Math_fround(.00999999977), Math_fround(.00999999977));
__ZN6Vector6setAddERKS_S1_($$byval_copy11, $1, $vararg_buffer5);
$792 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$792 + 8 >> 2] | 0) <= 30) {
$797 = HEAP32[$792 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($792, ($797 | 0) > 30 ? $797 : 46);
}
$799 = $792 + 12 | 0;
if ((HEAP32[$799 >> 2] | 0) <= 30) HEAP32[$799 >> 2] = 31;
$803 = (HEAP32[$792 >> 2] | 0) + 360 | 0;
HEAP32[$803 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$803 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$803 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
__ZN6VectorC2Efff($vararg_buffer5, Math_fround(0.0), Math_fround(.00999999977), Math_fround(.00999999977));
__ZN6Vector6setAddERKS_S1_($$byval_copy11, $2, $vararg_buffer5);
$804 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$804 + 8 >> 2] | 0) <= 31) {
$809 = HEAP32[$804 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($804, ($809 | 0) > 31 ? $809 : 47);
}
$811 = $804 + 12 | 0;
if ((HEAP32[$811 >> 2] | 0) <= 31) HEAP32[$811 >> 2] = 32;
$815 = (HEAP32[$804 >> 2] | 0) + 372 | 0;
HEAP32[$815 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$815 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$815 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
__ZN6VectorC2Efff($vararg_buffer5, Math_fround(.0199999996), Math_fround(0.0), Math_fround(0.0));
__ZN6Vector6setAddERKS_S1_($$byval_copy11, $1, $vararg_buffer5);
$816 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$816 + 8 >> 2] | 0) <= 32) {
$821 = HEAP32[$816 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($816, ($821 | 0) > 32 ? $821 : 49);
}
$823 = $816 + 12 | 0;
if ((HEAP32[$823 >> 2] | 0) <= 32) HEAP32[$823 >> 2] = 33;
$827 = (HEAP32[$816 >> 2] | 0) + 384 | 0;
HEAP32[$827 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$827 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$827 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
__ZN6VectorC2Efff($vararg_buffer5, Math_fround(-.0199999996), Math_fround(0.0), Math_fround(0.0));
__ZN6Vector6setAddERKS_S1_($$byval_copy11, $2, $vararg_buffer5);
$828 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$828 + 8 >> 2] | 0) <= 33) {
$833 = HEAP32[$828 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($828, ($833 | 0) > 33 ? $833 : 50);
}
$835 = $828 + 12 | 0;
if ((HEAP32[$835 >> 2] | 0) <= 33) HEAP32[$835 >> 2] = 34;
$839 = (HEAP32[$828 >> 2] | 0) + 396 | 0;
HEAP32[$839 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$839 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$839 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
}
$840 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$840 + 12 >> 2] | 0) > 9) __ZN6VectorC2ERKS_($18, (HEAP32[$840 >> 2] | 0) + 108 | 0); else __ZN6VectorC2Ev($18);
$846 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$846 + 12 >> 2] | 0) > 10) __ZN6VectorC2ERKS_($22, (HEAP32[$846 >> 2] | 0) + 120 | 0); else __ZN6VectorC2Ev($22);
$852 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$852 + 12 >> 2] | 0) > 46) __ZN6VectorC2ERKS_($23, (HEAP32[$852 >> 2] | 0) + 552 | 0); else __ZN6VectorC2Ev($23);
$860 = +Math_fround(HEAPF32[$18 >> 2]) * .707;
$865 = Math_fround($860 + +Math_fround(HEAPF32[$23 >> 2]) * .707);
$866 = $23 + 4 | 0;
$867 = Math_fround(HEAPF32[$866 >> 2]);
$868 = $18 + 8 | 0;
$871 = +Math_fround(HEAPF32[$868 >> 2]) * .707;
$872 = $23 + 8 | 0;
$877 = Math_fround($871 + +Math_fround(HEAPF32[$872 >> 2]) * .707);
$878 = HEAP32[$51 >> 2] | 0;
__ZN6VectorC2Efff($$byval_copy11, $865, $867, $877);
if ((HEAP32[$878 + 8 >> 2] | 0) <= 45) {
$883 = HEAP32[$878 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($878, ($883 | 0) > 45 ? $883 : 68);
}
$885 = $878 + 12 | 0;
if ((HEAP32[$885 >> 2] | 0) <= 45) HEAP32[$885 >> 2] = 46;
$889 = (HEAP32[$878 >> 2] | 0) + 540 | 0;
HEAP32[$889 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$889 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$889 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
$892 = +Math_fround(HEAPF32[$22 >> 2]) * .707;
$897 = Math_fround($892 + +Math_fround(HEAPF32[$23 >> 2]) * .707);
$898 = Math_fround(HEAPF32[$866 >> 2]);
$899 = $22 + 8 | 0;
$902 = +Math_fround(HEAPF32[$899 >> 2]) * .707;
$907 = Math_fround($902 + +Math_fround(HEAPF32[$872 >> 2]) * .707);
$908 = HEAP32[$51 >> 2] | 0;
__ZN6VectorC2Efff($$byval_copy11, $897, $898, $907);
if ((HEAP32[$908 + 8 >> 2] | 0) <= 47) {
$913 = HEAP32[$908 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($908, ($913 | 0) > 47 ? $913 : 71);
}
$915 = $908 + 12 | 0;
if ((HEAP32[$915 >> 2] | 0) <= 47) HEAP32[$915 >> 2] = 48;
$919 = (HEAP32[$908 >> 2] | 0) + 564 | 0;
HEAP32[$919 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$919 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$919 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
$920 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$920 + 12 >> 2] | 0) > 3) __ZN6VectorC2ERKS_($23, (HEAP32[$920 >> 2] | 0) + 36 | 0); else __ZN6VectorC2Ev($23);
$926 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$926 + 12 >> 2] | 0) > 5) __ZN6VectorC2ERKS_($24, (HEAP32[$926 >> 2] | 0) + 60 | 0); else __ZN6VectorC2Ev($24);
$932 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$932 + 12 >> 2] | 0) > 4) __ZN6VectorC2ERKS_($25, (HEAP32[$932 >> 2] | 0) + 48 | 0); else __ZN6VectorC2Ev($25);
$938 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$938 + 12 >> 2] | 0) > 65) __ZN6VectorC2ERKS_($26, (HEAP32[$938 >> 2] | 0) + 780 | 0); else __ZN6VectorC2Ev($26);
$944 = Math_fround(HEAPF32[$23 >> 2]);
$945 = $26 + 4 | 0;
$946 = Math_fround(HEAPF32[$945 >> 2]);
$948 = Math_fround(HEAPF32[$23 + 8 >> 2]);
$949 = $26 + 8 | 0;
$951 = Math_fround($948 + Math_fround(HEAPF32[$949 >> 2]));
$952 = $25 + 8 | 0;
$954 = Math_fround($951 - Math_fround(HEAPF32[$952 >> 2]));
$955 = HEAP32[$51 >> 2] | 0;
__ZN6VectorC2Efff($$byval_copy11, $944, $946, $954);
if ((HEAP32[$955 + 8 >> 2] | 0) <= 64) {
$960 = HEAP32[$955 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($955, ($960 | 0) > 64 ? $960 : 97);
}
$962 = $955 + 12 | 0;
if ((HEAP32[$962 >> 2] | 0) <= 64) HEAP32[$962 >> 2] = 65;
$966 = (HEAP32[$955 >> 2] | 0) + 768 | 0;
HEAP32[$966 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$966 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$966 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
$967 = Math_fround(HEAPF32[$24 >> 2]);
$968 = Math_fround(HEAPF32[$945 >> 2]);
$970 = Math_fround(HEAPF32[$24 + 8 >> 2]);
$972 = Math_fround($970 + Math_fround(HEAPF32[$949 >> 2]));
$974 = Math_fround($972 - Math_fround(HEAPF32[$952 >> 2]));
$975 = HEAP32[$51 >> 2] | 0;
__ZN6VectorC2Efff($$byval_copy11, $967, $968, $974);
if ((HEAP32[$975 + 8 >> 2] | 0) <= 66) {
$980 = HEAP32[$975 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($975, ($980 | 0) > 66 ? $980 : 100);
}
$982 = $975 + 12 | 0;
if ((HEAP32[$982 >> 2] | 0) <= 66) HEAP32[$982 >> 2] = 67;
$986 = (HEAP32[$975 >> 2] | 0) + 792 | 0;
HEAP32[$986 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$986 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$986 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
$987 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$987 + 12 >> 2] | 0) > 0) __ZN6VectorC2ERKS_($27, HEAP32[$987 >> 2] | 0); else __ZN6VectorC2Ev($27);
$992 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$992 + 12 >> 2] | 0) > 1) __ZN6VectorC2ERKS_($28, (HEAP32[$992 >> 2] | 0) + 12 | 0); else __ZN6VectorC2Ev($28);
__ZN6VectorC2ERKS_($29, $23);
__ZN6Vector11setMidPointERKS_S1_f($29, $29, $27, Math_fround(.5));
$998 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$998 + 8 >> 2] | 0) <= 67) {
$1003 = HEAP32[$998 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($998, ($1003 | 0) > 67 ? $1003 : 101);
}
$1005 = $998 + 12 | 0;
if ((HEAP32[$1005 >> 2] | 0) <= 67) HEAP32[$1005 >> 2] = 68;
$1009 = (HEAP32[$998 >> 2] | 0) + 804 | 0;
HEAP32[$1009 >> 2] = HEAP32[$29 >> 2];
HEAP32[$1009 + 4 >> 2] = HEAP32[$29 + 4 >> 2];
HEAP32[$1009 + 8 >> 2] = HEAP32[$29 + 8 >> 2];
__ZN6VectorC2ERKS_($30, $24);
__ZN6Vector11setMidPointERKS_S1_f($30, $30, $28, Math_fround(.5));
$1010 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$1010 + 8 >> 2] | 0) <= 68) {
$1015 = HEAP32[$1010 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($1010, ($1015 | 0) > 68 ? $1015 : 103);
}
$1017 = $1010 + 12 | 0;
if ((HEAP32[$1017 >> 2] | 0) <= 68) HEAP32[$1017 >> 2] = 69;
$1021 = (HEAP32[$1010 >> 2] | 0) + 816 | 0;
HEAP32[$1021 >> 2] = HEAP32[$30 >> 2];
HEAP32[$1021 + 4 >> 2] = HEAP32[$30 + 4 >> 2];
HEAP32[$1021 + 8 >> 2] = HEAP32[$30 + 8 >> 2];
$1023 = (HEAP8[72206] | 0) == 0;
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21679, 76);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21691, 84);
if ($1023) {
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21703, 73);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21714, 81);
} else {
$1024 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$1024 + 12 >> 2] | 0) > 84) __ZN6VectorC2ERKS_($$byval_copy11, (HEAP32[$1024 >> 2] | 0) + 1008 | 0); else __ZN6VectorC2Ev($$byval_copy11);
$1030 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$1030 + 12 >> 2] | 0) > 9) __ZN6VectorC2ERKS_($31, (HEAP32[$1030 >> 2] | 0) + 108 | 0); else __ZN6VectorC2Ev($31);
__ZN6VectorC2Ev($32);
__ZN6Vector11setMidPointERKS_S1_f($32, $31, $$byval_copy11, Math_fround(-1.0));
$1036 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$1036 + 8 >> 2] | 0) <= 81) {
$1041 = HEAP32[$1036 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($1036, ($1041 | 0) > 81 ? $1041 : 122);
}
$1043 = $1036 + 12 | 0;
if ((HEAP32[$1043 >> 2] | 0) <= 81) HEAP32[$1043 >> 2] = 82;
$1047 = (HEAP32[$1036 >> 2] | 0) + 972 | 0;
HEAP32[$1047 >> 2] = HEAP32[$32 >> 2];
HEAP32[$1047 + 4 >> 2] = HEAP32[$32 + 4 >> 2];
HEAP32[$1047 + 8 >> 2] = HEAP32[$32 + 8 >> 2];
$1048 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$1048 + 12 >> 2] | 0) > 76) __ZN6VectorC2ERKS_($$byval_copy11, (HEAP32[$1048 >> 2] | 0) + 912 | 0); else __ZN6VectorC2Ev($$byval_copy11);
$1054 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$1054 + 12 >> 2] | 0) > 10) __ZN6VectorC2ERKS_($31, (HEAP32[$1054 >> 2] | 0) + 120 | 0); else __ZN6VectorC2Ev($31);
__ZN6VectorC2Ev($32);
__ZN6Vector11setMidPointERKS_S1_f($32, $31, $$byval_copy11, Math_fround(-1.0));
$1060 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$1060 + 8 >> 2] | 0) <= 73) {
$1065 = HEAP32[$1060 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($1060, ($1065 | 0) > 73 ? $1065 : 110);
}
$1067 = $1060 + 12 | 0;
if ((HEAP32[$1067 >> 2] | 0) <= 73) HEAP32[$1067 >> 2] = 74;
$1071 = (HEAP32[$1060 >> 2] | 0) + 876 | 0;
HEAP32[$1071 >> 2] = HEAP32[$32 >> 2];
HEAP32[$1071 + 4 >> 2] = HEAP32[$32 + 4 >> 2];
HEAP32[$1071 + 8 >> 2] = HEAP32[$32 + 8 >> 2];
}
$1073 = Math_fround(HEAPF32[$0 + 480 >> 2]);
$1075 = Math_fround(HEAPF32[$0 + 484 >> 2]);
$1076 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$1076 + 12 >> 2] | 0) > 73) __ZN6VectorC2ERKS_($31, (HEAP32[$1076 >> 2] | 0) + 876 | 0); else __ZN6VectorC2Ev($31);
$1082 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$1082 + 12 >> 2] | 0) > 76) __ZN6VectorC2ERKS_($32, (HEAP32[$1082 >> 2] | 0) + 912 | 0); else __ZN6VectorC2Ev($32);
$1088 = $31 + 4 | 0;
$1089 = Math_fround(HEAPF32[$1088 >> 2]);
$1090 = $22 + 4 | 0;
$1092 = Math_fround($1089 - Math_fround(HEAPF32[$1090 >> 2]));
$1093 = $0 + 476 | 0;
$1095 = Math_fround($1092 * Math_fround(HEAPF32[$1093 >> 2]));
$1097 = Math_fround($1075 + Math_fround(HEAPF32[$31 >> 2]));
$1098 = $31 + 8 | 0;
$1099 = Math_fround(HEAPF32[$1098 >> 2]);
$1100 = HEAP32[$51 >> 2] | 0;
__ZN6VectorC2Efff($$byval_copy11, $1097, $1089, $1099);
if ((HEAP32[$1100 + 8 >> 2] | 0) <= 69) {
$1105 = HEAP32[$1100 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($1100, ($1105 | 0) > 69 ? $1105 : 104);
}
$1107 = $1100 + 12 | 0;
if ((HEAP32[$1107 >> 2] | 0) <= 69) HEAP32[$1107 >> 2] = 70;
$1111 = (HEAP32[$1100 >> 2] | 0) + 828 | 0;
HEAP32[$1111 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$1111 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$1111 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
$1113 = Math_fround($1075 + Math_fround(HEAPF32[$31 >> 2]));
$1114 = Math_fround(HEAPF32[$1088 >> 2]);
$1116 = Math_fround($1095 * Math_fround(.600000024));
$1117 = Math_fround(Math_fround(HEAPF32[$1098 >> 2]) - $1116);
$1118 = HEAP32[$51 >> 2] | 0;
__ZN6VectorC2Efff($$byval_copy11, $1113, $1114, $1117);
if ((HEAP32[$1118 + 8 >> 2] | 0) <= 70) {
$1123 = HEAP32[$1118 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($1118, ($1123 | 0) > 70 ? $1123 : 106);
}
$1125 = $1118 + 12 | 0;
if ((HEAP32[$1125 >> 2] | 0) <= 70) HEAP32[$1125 >> 2] = 71;
$1129 = (HEAP32[$1118 >> 2] | 0) + 840 | 0;
HEAP32[$1129 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$1129 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$1129 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
$1132 = Math_fround(Math_fround($1075 + Math_fround(HEAPF32[$31 >> 2])) - $1073);
$1133 = Math_fround(HEAPF32[$1088 >> 2]);
$1135 = Math_fround(Math_fround(HEAPF32[$1098 >> 2]) - $1116);
$1136 = HEAP32[$51 >> 2] | 0;
__ZN6VectorC2Efff($$byval_copy11, $1132, $1133, $1135);
if ((HEAP32[$1136 + 8 >> 2] | 0) <= 74) {
$1141 = HEAP32[$1136 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($1136, ($1141 | 0) > 74 ? $1141 : 112);
}
$1143 = $1136 + 12 | 0;
if ((HEAP32[$1143 >> 2] | 0) <= 74) HEAP32[$1143 >> 2] = 75;
$1147 = (HEAP32[$1136 >> 2] | 0) + 888 | 0;
HEAP32[$1147 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$1147 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$1147 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
$1149 = Math_fround($1075 + Math_fround(HEAPF32[$22 >> 2]));
$1150 = Math_fround(HEAPF32[$1090 >> 2]);
$1152 = Math_fround(Math_fround(HEAPF32[$899 >> 2]) - $1095);
$1153 = HEAP32[$51 >> 2] | 0;
__ZN6VectorC2Efff($$byval_copy11, $1149, $1150, $1152);
if ((HEAP32[$1153 + 8 >> 2] | 0) <= 71) {
$1158 = HEAP32[$1153 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($1153, ($1158 | 0) > 71 ? $1158 : 107);
}
$1160 = $1153 + 12 | 0;
if ((HEAP32[$1160 >> 2] | 0) <= 71) HEAP32[$1160 >> 2] = 72;
$1164 = (HEAP32[$1153 >> 2] | 0) + 852 | 0;
HEAP32[$1164 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$1164 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$1164 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
$1167 = Math_fround(Math_fround($1075 + Math_fround(HEAPF32[$22 >> 2])) - $1073);
$1168 = Math_fround(HEAPF32[$1090 >> 2]);
$1170 = Math_fround(Math_fround(HEAPF32[$899 >> 2]) - $1095);
$1171 = HEAP32[$51 >> 2] | 0;
__ZN6VectorC2Efff($$byval_copy11, $1167, $1168, $1170);
if ((HEAP32[$1171 + 8 >> 2] | 0) <= 75) {
$1176 = HEAP32[$1171 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($1171, ($1176 | 0) > 75 ? $1176 : 113);
}
$1178 = $1171 + 12 | 0;
if ((HEAP32[$1178 >> 2] | 0) <= 75) HEAP32[$1178 >> 2] = 76;
$1182 = (HEAP32[$1171 >> 2] | 0) + 900 | 0;
HEAP32[$1182 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$1182 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$1182 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
$1184 = Math_fround($1075 + Math_fround(HEAPF32[$32 >> 2]));
$1186 = Math_fround(HEAPF32[$32 + 4 >> 2]);
$1188 = Math_fround(HEAPF32[$32 + 8 >> 2]);
$1189 = HEAP32[$51 >> 2] | 0;
__ZN6VectorC2Efff($$byval_copy11, $1184, $1186, $1188);
if ((HEAP32[$1189 + 8 >> 2] | 0) <= 72) {
$1194 = HEAP32[$1189 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($1189, ($1194 | 0) > 72 ? $1194 : 109);
}
$1196 = $1189 + 12 | 0;
if ((HEAP32[$1196 >> 2] | 0) <= 72) HEAP32[$1196 >> 2] = 73;
$1200 = (HEAP32[$1189 >> 2] | 0) + 864 | 0;
HEAP32[$1200 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$1200 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$1200 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
$1201 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$1201 + 12 >> 2] | 0) > 81) __ZN6VectorC2ERKS_($31, (HEAP32[$1201 >> 2] | 0) + 972 | 0); else __ZN6VectorC2Ev($31);
$1207 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$1207 + 12 >> 2] | 0) > 84) __ZN6VectorC2ERKS_($32, (HEAP32[$1207 >> 2] | 0) + 1008 | 0); else __ZN6VectorC2Ev($32);
$1213 = $31 + 4 | 0;
$1214 = Math_fround(HEAPF32[$1213 >> 2]);
$1215 = $18 + 4 | 0;
$1217 = Math_fround($1214 - Math_fround(HEAPF32[$1215 >> 2]));
$1219 = Math_fround($1217 * Math_fround(HEAPF32[$1093 >> 2]));
$1221 = Math_fround(Math_fround(HEAPF32[$31 >> 2]) - $1075);
$1222 = $31 + 8 | 0;
$1223 = Math_fround(HEAPF32[$1222 >> 2]);
$1224 = HEAP32[$51 >> 2] | 0;
__ZN6VectorC2Efff($$byval_copy11, $1221, $1214, $1223);
if ((HEAP32[$1224 + 8 >> 2] | 0) <= 77) {
$1229 = HEAP32[$1224 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($1224, ($1229 | 0) > 77 ? $1229 : 116);
}
$1231 = $1224 + 12 | 0;
if ((HEAP32[$1231 >> 2] | 0) <= 77) HEAP32[$1231 >> 2] = 78;
$1235 = (HEAP32[$1224 >> 2] | 0) + 924 | 0;
HEAP32[$1235 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$1235 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$1235 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
$1237 = Math_fround(Math_fround(HEAPF32[$31 >> 2]) - $1075);
$1238 = Math_fround(HEAPF32[$1213 >> 2]);
$1240 = Math_fround($1219 * Math_fround(.600000024));
$1241 = Math_fround(Math_fround(HEAPF32[$1222 >> 2]) - $1240);
$1242 = HEAP32[$51 >> 2] | 0;
__ZN6VectorC2Efff($$byval_copy11, $1237, $1238, $1241);
if ((HEAP32[$1242 + 8 >> 2] | 0) <= 78) {
$1247 = HEAP32[$1242 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($1242, ($1247 | 0) > 78 ? $1247 : 118);
}
$1249 = $1242 + 12 | 0;
if ((HEAP32[$1249 >> 2] | 0) <= 78) HEAP32[$1249 >> 2] = 79;
$1253 = (HEAP32[$1242 >> 2] | 0) + 936 | 0;
HEAP32[$1253 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$1253 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$1253 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
$1256 = Math_fround($1073 + Math_fround(Math_fround(HEAPF32[$31 >> 2]) - $1075));
$1257 = Math_fround(HEAPF32[$1213 >> 2]);
$1259 = Math_fround(Math_fround(HEAPF32[$1222 >> 2]) - $1240);
$1260 = HEAP32[$51 >> 2] | 0;
__ZN6VectorC2Efff($$byval_copy11, $1256, $1257, $1259);
if ((HEAP32[$1260 + 8 >> 2] | 0) <= 82) {
$1265 = HEAP32[$1260 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($1260, ($1265 | 0) > 82 ? $1265 : 124);
}
$1267 = $1260 + 12 | 0;
if ((HEAP32[$1267 >> 2] | 0) <= 82) HEAP32[$1267 >> 2] = 83;
$1271 = (HEAP32[$1260 >> 2] | 0) + 984 | 0;
HEAP32[$1271 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$1271 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$1271 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
$1273 = Math_fround(Math_fround(HEAPF32[$18 >> 2]) - $1075);
$1274 = Math_fround(HEAPF32[$1215 >> 2]);
$1276 = Math_fround(Math_fround(HEAPF32[$868 >> 2]) - $1219);
$1277 = HEAP32[$51 >> 2] | 0;
__ZN6VectorC2Efff($$byval_copy11, $1273, $1274, $1276);
if ((HEAP32[$1277 + 8 >> 2] | 0) <= 79) {
$1282 = HEAP32[$1277 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($1277, ($1282 | 0) > 79 ? $1282 : 119);
}
$1284 = $1277 + 12 | 0;
if ((HEAP32[$1284 >> 2] | 0) <= 79) HEAP32[$1284 >> 2] = 80;
$1288 = (HEAP32[$1277 >> 2] | 0) + 948 | 0;
HEAP32[$1288 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$1288 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$1288 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
$1291 = Math_fround($1073 + Math_fround(Math_fround(HEAPF32[$18 >> 2]) - $1075));
$1292 = Math_fround(HEAPF32[$1215 >> 2]);
$1294 = Math_fround(Math_fround(HEAPF32[$868 >> 2]) - $1219);
$1295 = HEAP32[$51 >> 2] | 0;
__ZN6VectorC2Efff($$byval_copy11, $1291, $1292, $1294);
if ((HEAP32[$1295 + 8 >> 2] | 0) <= 83) {
$1300 = HEAP32[$1295 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($1295, ($1300 | 0) > 83 ? $1300 : 125);
}
$1302 = $1295 + 12 | 0;
if ((HEAP32[$1302 >> 2] | 0) <= 83) HEAP32[$1302 >> 2] = 84;
$1306 = (HEAP32[$1295 >> 2] | 0) + 996 | 0;
HEAP32[$1306 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$1306 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$1306 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
$1308 = Math_fround(Math_fround(HEAPF32[$32 >> 2]) - $1075);
$1310 = Math_fround(HEAPF32[$32 + 4 >> 2]);
$1312 = Math_fround(HEAPF32[$32 + 8 >> 2]);
$1313 = HEAP32[$51 >> 2] | 0;
__ZN6VectorC2Efff($$byval_copy11, $1308, $1310, $1312);
if ((HEAP32[$1313 + 8 >> 2] | 0) <= 80) {
$1318 = HEAP32[$1313 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($1313, ($1318 | 0) > 80 ? $1318 : 121);
}
$1320 = $1313 + 12 | 0;
if ((HEAP32[$1320 >> 2] | 0) <= 80) HEAP32[$1320 >> 2] = 81;
$1324 = (HEAP32[$1313 >> 2] | 0) + 960 | 0;
HEAP32[$1324 >> 2] = HEAP32[$$byval_copy11 >> 2];
HEAP32[$1324 + 4 >> 2] = HEAP32[$$byval_copy11 + 4 >> 2];
HEAP32[$1324 + 8 >> 2] = HEAP32[$$byval_copy11 + 8 >> 2];
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21725, 86);
__ZN11HanimAvatar12SetFacePointEPKcs($0, 21735, 85);
$1325 = HEAP32[$51 >> 2] | 0;
if ((HEAP32[$1325 + 12 >> 2] | 0) <= 0) {
STACKTOP = sp;
return;
}
$1329 = $33 + 4 | 0;
$1330 = $33 + 8 | 0;
$$0146$off0435 = 1;
$$0436 = 0;
$1333 = $1325;
while (1) {
do if (!1) $$1$off0 = $$0146$off0435; else {
__ZN6VectorC2ERKS_($33, (HEAP32[$1333 >> 2] | 0) + ($$0436 * 12 | 0) | 0);
$$pre = Math_fround(HEAPF32[$33 >> 2]);
$$pre445 = Math_fround(HEAPF32[$1329 >> 2]);
if (!($$pre == Math_fround(0.0) & $$pre445 == Math_fround(0.0) & Math_fround(HEAPF32[$1330 >> 2]) == Math_fround(0.0))) {
$$1$off0 = $$0146$off0435;
break;
}
HEAP32[$vararg_buffer7 >> 2] = $$0436;
__Z7eprintfPKcz(21745, $vararg_buffer7);
$$1$off0 = 0;
} while (0);
$$0436 = $$0436 + 1 | 0;
$1333 = HEAP32[$51 >> 2] | 0;
if (($$0436 | 0) >= (HEAP32[$1333 + 12 >> 2] | 0)) break; else $$0146$off0435 = $$1$off0;
}
if ($$1$off0) {
STACKTOP = sp;
return;
} else {
$1343 = ___cxa_allocate_exception(4) | 0;
HEAP32[$1343 >> 2] = 15;
___cxa_throw($1343 | 0, 232, 0);
}
}
function __Z19MakeHandshapeTablesv() {
var $$012$i$i = 0, $$012$i$i180 = 0, $$01215$i$i = 0, $$01215$i$i177 = 0, $$01216$i$i = 0, $$01216$i$i178 = 0, $$0163554 = 0, $$0166550 = 0, $$0167551 = 0, $$sink$i$i = 0, $$sink$i$i$i = f0, $$sink$i$i$i$1 = f0, $$sink$i$i$i$2 = f0, $$sink$i$i$i$3 = f0, $$sink$i$i$i$4 = f0, $$sink$i$i$i$5 = f0, $$sink$i$i$i175 = f0, $$sink$i$i$i188 = f0, $$sink$i$i$i194 = f0, $$sink$i$i$i200 = f0, $$sink$i$i$i206 = f0, $$sink$i$i$i212 = f0, $$sink$i$i$i218 = f0, $$sink$i$i182 = 0, $$sink12$i$i$i = f0, $$sink12$i$i$i$1 = f0, $$sink12$i$i$i$2 = f0, $$sink12$i$i$i$3 = f0, $$sink12$i$i$i$4 = f0, $$sink12$i$i$i$5 = f0, $$sink12$i$i$i174 = f0, $$sink12$i$i$i187 = f0, $$sink12$i$i$i193 = f0, $$sink12$i$i$i199 = f0, $$sink12$i$i$i205 = f0, $$sink12$i$i$i211 = f0, $$sink12$i$i$i217 = f0, $$sink13$i$i$i = f0, $$sink13$i$i$i$1 = f0, $$sink13$i$i$i$2 = f0, $$sink13$i$i$i$3 = f0, $$sink13$i$i$i$4 = f0, $$sink13$i$i$i$5 = f0, $$sink13$i$i$i173 = f0, $$sink13$i$i$i186 = f0, $$sink13$i$i$i192 = f0, $$sink13$i$i$i198 = f0, $$sink13$i$i$i204 = f0, $$sink13$i$i$i210 = f0, $$sink13$i$i$i216 = f0, $$sink14$i$i$i = f0, $$sink14$i$i$i$1 = f0, $$sink14$i$i$i$2 = f0, $$sink14$i$i$i$3 = f0, $$sink14$i$i$i$4 = f0, $$sink14$i$i$i$5 = f0, $$sink14$i$i$i172 = f0, $$sink14$i$i$i185 = f0, $$sink14$i$i$i191 = f0, $$sink14$i$i$i197 = f0, $$sink14$i$i$i203 = f0, $$sink14$i$i$i209 = f0, $$sink14$i$i$i215 = f0, $$sroa$0$0 = f0, $$sroa$0$1 = f0, $$sroa$0229$0 = f0, $$sroa$0229$1 = f0, $$sroa$0243$0 = f0, $$sroa$0243$1 = f0, $$sroa$0257$0 = f0, $$sroa$0257$1 = f0, $$sroa$0271$0 = f0, $$sroa$0271$1 = f0, $$sroa$0285$0 = f0, $$sroa$0285$1 = f0, $$sroa$0299$0 = f0, $$sroa$0299$1 = f0, $$sroa$0313$16$sroa_idx = 0, $$sroa$0445$0$copyload536 = 0, $$sroa$0450$0$copyload531 = 0, $$sroa$0459$0$copyload526 = 0, $$sroa$0468$0$copyload521 = 0, $$sroa$0477$0$copyload516 = 0, $$sroa$0489$0 = f0, $$sroa$0489$0$1 = f0, $$sroa$0489$0$2 = f0, $$sroa$0489$0$3 = f0, $$sroa$0489$0$4 = f0, $$sroa$0489$0$5 = f0, $$sroa$0489$1 = f0, $$sroa$0489$1$1 = f0, $$sroa$0489$1$2 = f0, $$sroa$0489$1$3 = f0, $$sroa$0489$1$4 = f0, $$sroa$0489$1$5 = f0, $$sroa$10$0 = f0, $$sroa$10237$0 = f0, $$sroa$10251$0 = f0, $$sroa$10265$0 = f0, $$sroa$10279$0 = f0, $$sroa$10293$0 = f0, $$sroa$10307$0 = f0, $$sroa$10497$0 = f0, $$sroa$10497$0$1 = f0, $$sroa$10497$0$2 = f0, $$sroa$10497$0$3 = f0, $$sroa$10497$0$4 = f0, $$sroa$10497$0$5 = f0, $$sroa$12$0 = f0, $$sroa$12240$0 = f0, $$sroa$12254$0 = f0, $$sroa$12268$0 = f0, $$sroa$12282$0 = f0, $$sroa$12296$0 = f0, $$sroa$12310$0 = f0, $$sroa$12500$0 = f0, $$sroa$12500$0$1 = f0, $$sroa$12500$0$2 = f0, $$sroa$12500$0$3 = f0, $$sroa$12500$0$4 = f0, $$sroa$12500$0$5 = f0, $$sroa$2$0$copyload537 = 0, $$sroa$2451$0$copyload532 = 0, $$sroa$2460$0$copyload527 = 0, $$sroa$2469$0$copyload522 = 0, $$sroa$2478$0$copyload517 = 0, $$sroa$3$0$copyload538 = 0, $$sroa$3453$0$copyload533 = 0, $$sroa$3462$0$copyload528 = 0, $$sroa$3471$0$copyload523 = 0, $$sroa$3480$0$copyload518 = 0, $$sroa$4$0$copyload539 = 0, $$sroa$4455$0$copyload534 = 0, $$sroa$4464$0$copyload529 = 0, $$sroa$4473$0$copyload524 = 0, $$sroa$4482$0$copyload519 = 0, $$sroa$5$0$copyload540 = 0, $$sroa$5457$0$copyload535 = 0, $$sroa$5466$0$copyload530 = 0, $$sroa$5475$0$copyload525 = 0, $$sroa$5484$0$copyload520 = 0, $$sroa$6$0 = f0, $$sroa$6231$0 = f0, $$sroa$6245$0 = f0, $$sroa$6259$0 = f0, $$sroa$6273$0 = f0, $$sroa$6287$0 = f0, $$sroa$6301$0 = f0, $$sroa$6491$0 = f0, $$sroa$6491$0$1 = f0, $$sroa$6491$0$2 = f0, $$sroa$6491$0$3 = f0, $$sroa$6491$0$4 = f0, $$sroa$6491$0$5 = f0, $$sroa$8$0 = f0, $$sroa$8234$0 = f0, $$sroa$8248$0 = f0, $$sroa$8262$0 = f0, $$sroa$8276$0 = f0, $$sroa$8290$0 = f0, $$sroa$8304$0 = f0, $$sroa$8494$0 = f0, $$sroa$8494$0$1 = f0, $$sroa$8494$0$2 = f0, $$sroa$8494$0$3 = f0, $$sroa$8494$0$4 = f0, $$sroa$8494$0$5 = f0, $0 = 0, $1 = 0, $101 = f0, $103 = f0, $105 = f0, $110 = 0, $118 = 0, $120 = 0, $121 = 0, $122 = 0, $125 = 0, $126 = 0, $13 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $143 = 0, $15 = 0, $150 = 0, $151 = 0, $153 = 0, $154 = 0, $156 = 0, $161 = 0, $163 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $171 = 0, $176 = f0, $178 = f0, $18 = 0, $180 = f0, $182 = f0, $186 = 0, $192 = 0, $194 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $204 = 0, $205 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $214 = f0, $216 = f0, $218 = f0, $22 = 0, $220 = f0, $223 = 0, $224 = 0, $229 = 0, $23 = 0, $230 = 0, $235 = 0, $236 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $245 = f0, $247 = f0, $249 = f0, $25 = 0, $251 = f0, $254 = 0, $255 = 0, $26 = 0, $260 = 0, $261 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $27 = 0, $270 = f0, $272 = f0, $274 = f0, $276 = f0, $279 = 0, $28 = 0, $280 = 0, $285 = 0, $286 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $295 = f0, $297 = f0, $299 = f0, $30 = 0, $301 = f0, $304 = 0, $305 = 0, $31 = 0, $310 = 0, $311 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $32 = 0, $320 = f0, $322 = f0, $324 = f0, $326 = f0, $329 = 0, $33 = 0, $330 = 0, $335 = 0, $336 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $345 = f0, $347 = f0, $349 = f0, $35 = 0, $351 = f0, $354 = 0, $355 = 0, $360 = 0, $364 = f0, $366 = f0, $368 = f0, $370 = f0, $375 = 0, $380 = f0, $382 = f0, $384 = f0, $386 = f0, $391 = 0, $396 = f0, $398 = f0, $4 = 0, $400 = f0, $402 = f0, $407 = 0, $41 = 0, $412 = f0, $414 = f0, $416 = f0, $418 = f0, $42 = 0, $423 = 0, $428 = f0, $43 = 0, $430 = f0, $432 = f0, $434 = f0, $46 = 0, $47 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $66 = 0, $67 = 0, $7 = 0, $70 = 0, $71 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $82 = 0, $83 = 0, $86 = 0, $87 = 0, $90 = 0, $91 = 0, $94 = 0, $99 = f0, $vararg_buffer = 0, $vararg_buffer102 = 0, $vararg_buffer109 = 0, $vararg_buffer112 = 0, $vararg_buffer119 = 0, $vararg_buffer12 = 0, $vararg_buffer122 = 0, $vararg_buffer129 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer32 = 0, $vararg_buffer39 = 0, $vararg_buffer42 = 0, $vararg_buffer49 = 0, $vararg_buffer52 = 0, $vararg_buffer59 = 0, $vararg_buffer62 = 0, $vararg_buffer69 = 0, $vararg_buffer72 = 0, $vararg_buffer79 = 0, $vararg_buffer82 = 0, $vararg_buffer89 = 0, $vararg_buffer9 = 0, $vararg_buffer92 = 0, $vararg_buffer99 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 496 | 0;
$vararg_buffer129 = sp + 456 | 0;
$vararg_buffer122 = sp + 432 | 0;
$vararg_buffer119 = sp + 424 | 0;
$vararg_buffer112 = sp + 400 | 0;
$vararg_buffer109 = sp + 392 | 0;
$vararg_buffer102 = sp + 368 | 0;
$vararg_buffer99 = sp + 360 | 0;
$vararg_buffer92 = sp + 336 | 0;
$vararg_buffer89 = sp + 328 | 0;
$vararg_buffer82 = sp + 304 | 0;
$vararg_buffer79 = sp + 296 | 0;
$vararg_buffer72 = sp + 272 | 0;
$vararg_buffer69 = sp + 264 | 0;
$vararg_buffer62 = sp + 240 | 0;
$vararg_buffer59 = sp + 232 | 0;
$vararg_buffer52 = sp + 208 | 0;
$vararg_buffer49 = sp + 200 | 0;
$vararg_buffer42 = sp + 176 | 0;
$vararg_buffer39 = sp + 168 | 0;
$vararg_buffer32 = sp + 144 | 0;
$vararg_buffer29 = sp + 136 | 0;
$vararg_buffer22 = sp + 112 | 0;
$vararg_buffer19 = sp + 104 | 0;
$vararg_buffer12 = sp + 80 | 0;
$vararg_buffer9 = sp + 72 | 0;
$vararg_buffer3 = sp + 48 | 0;
$vararg_buffer = sp + 40 | 0;
$0 = sp;
$1 = sp + 480 | 0;
$2 = sp + 464 | 0;
$4 = __ZN7XMLCell7elementEPKc(HEAP32[16168] | 0, 49746) | 0;
if ($4 | 0) {
$6 = __ZN7XMLCell7elementEPKc($4, 49761) | 0;
$7 = __ZN7XMLCell7elementEPKc($4, 49778) | 0;
if (!$6) $15 = 0; else $15 = HEAP32[$6 + 8 >> 2] | 0;
if ($7 | 0) {
$13 = HEAP32[$7 + 8 >> 2] | 0;
if (!(($15 | 0) == 0 | ($13 | 0) == 0)) {
$17 = $15 + 12 | 0;
$18 = HEAP32[$17 >> 2] | 0;
if (($18 | 0) > 0) {
$20 = $0 + 4 | 0;
$21 = $0 + 8 | 0;
$22 = $0 + 12 | 0;
$23 = $0 + 8 | 0;
$24 = $0 + 16 | 0;
$25 = $0 + 24 | 0;
$26 = $0 + 32 | 0;
$$0163554 = 0;
do {
if ((HEAP32[$17 >> 2] | 0) > ($$0163554 | 0)) $43 = HEAP32[(HEAP32[$15 >> 2] | 0) + ($$0163554 << 2) >> 2] | 0; else $43 = 0;
$41 = HEAP32[17752] | 0;
$42 = HEAP32[$43 >> 2] | 0;
$46 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($42, HEAP32[$41 + 4 >> 2] | 0) | 0;
$47 = HEAP32[$41 >> 2] | 0;
L15 : do if ((HEAP16[$47 + ($46 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i = HEAP32[$47 + ($46 << 3) >> 2] | 0;
if (!$$01215$i$i) label = 18; else {
$$01216$i$i = $$01215$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($42, HEAP32[$$01216$i$i >> 2] | 0) | 0) break;
$$012$i$i = HEAP32[$$01216$i$i + 8 >> 2] | 0;
if (!$$012$i$i) {
label = 18;
break L15;
} else $$01216$i$i = $$012$i$i;
}
$$sink$i$i = $$01216$i$i + 4 | 0;
}
} else label = 18; while (0);
if ((label | 0) == 18) {
label = 0;
$$sink$i$i = $41 + 20 | 0;
}
$59 = HEAP32[$$sink$i$i >> 2] | 0;
$62 = __ZN7XMLCell13attrib_stringEPKc($43, __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17200] | 0, 0) | 0) | 0;
HEAPF32[$0 >> 2] = Math_fround(-100.0);
HEAPF32[$20 >> 2] = Math_fround(-100.0);
HEAPF32[$21 >> 2] = Math_fround(-100.0);
HEAPF32[$22 >> 2] = Math_fround(-100.0);
__ZN13FingerBending16SetFingerBendingEPKcP7HashAnyIS1_S_E($0, $62, 0);
$63 = 68808 + ($59 << 7) | 0;
HEAP32[$63 >> 2] = HEAP32[$0 >> 2];
HEAP32[$63 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
HEAP32[$63 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
HEAP32[$63 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
$66 = __ZN7XMLCell13attrib_stringEPKc($43, __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17200] | 0, 1) | 0) | 0;
HEAPF32[$0 >> 2] = Math_fround(-100.0);
HEAPF32[$20 >> 2] = Math_fround(-100.0);
HEAPF32[$21 >> 2] = Math_fround(-100.0);
HEAPF32[$22 >> 2] = Math_fround(-100.0);
__ZN13FingerBending16SetFingerBendingEPKcP7HashAnyIS1_S_E($0, $66, 0);
$67 = 68808 + ($59 << 7) + 16 | 0;
HEAP32[$67 >> 2] = HEAP32[$0 >> 2];
HEAP32[$67 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
HEAP32[$67 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
HEAP32[$67 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
$70 = __ZN7XMLCell13attrib_stringEPKc($43, __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17200] | 0, 2) | 0) | 0;
HEAPF32[$0 >> 2] = Math_fround(-100.0);
HEAPF32[$20 >> 2] = Math_fround(-100.0);
HEAPF32[$21 >> 2] = Math_fround(-100.0);
HEAPF32[$22 >> 2] = Math_fround(-100.0);
__ZN13FingerBending16SetFingerBendingEPKcP7HashAnyIS1_S_E($0, $70, 0);
$71 = 68808 + ($59 << 7) + 32 | 0;
HEAP32[$71 >> 2] = HEAP32[$0 >> 2];
HEAP32[$71 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
HEAP32[$71 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
HEAP32[$71 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
$74 = __ZN7XMLCell13attrib_stringEPKc($43, __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17200] | 0, 3) | 0) | 0;
HEAPF32[$0 >> 2] = Math_fround(-100.0);
HEAPF32[$20 >> 2] = Math_fround(-100.0);
HEAPF32[$21 >> 2] = Math_fround(-100.0);
HEAPF32[$22 >> 2] = Math_fround(-100.0);
__ZN13FingerBending16SetFingerBendingEPKcP7HashAnyIS1_S_E($0, $74, 0);
$75 = 68808 + ($59 << 7) + 48 | 0;
HEAP32[$75 >> 2] = HEAP32[$0 >> 2];
HEAP32[$75 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
HEAP32[$75 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
HEAP32[$75 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
$78 = __ZN7XMLCell13attrib_stringEPKc($43, __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17200] | 0, 4) | 0) | 0;
HEAPF32[$0 >> 2] = Math_fround(-100.0);
HEAPF32[$20 >> 2] = Math_fround(-100.0);
HEAPF32[$21 >> 2] = Math_fround(-100.0);
HEAPF32[$22 >> 2] = Math_fround(-100.0);
__ZN13FingerBending16SetFingerBendingEPKcP7HashAnyIS1_S_E($0, $78, 0);
$79 = 68808 + ($59 << 7) + 64 | 0;
HEAP32[$79 >> 2] = HEAP32[$0 >> 2];
HEAP32[$79 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
HEAP32[$79 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
HEAP32[$79 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
$82 = __ZN7XMLCell13attrib_stringEPKc($43, __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17200] | 0, 5) | 0) | 0;
HEAPF32[$0 >> 2] = Math_fround(-100.0);
HEAPF32[$20 >> 2] = Math_fround(-100.0);
HEAPF32[$21 >> 2] = Math_fround(-100.0);
HEAPF32[$22 >> 2] = Math_fround(-100.0);
__ZN13FingerBending16SetFingerBendingEPKcP7HashAnyIS1_S_E($0, $82, 0);
$83 = 68808 + ($59 << 7) + 80 | 0;
HEAP32[$83 >> 2] = HEAP32[$0 >> 2];
HEAP32[$83 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
HEAP32[$83 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
HEAP32[$83 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
$86 = __ZN7XMLCell13attrib_stringEPKc($43, __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17200] | 0, 6) | 0) | 0;
HEAPF32[$0 >> 2] = Math_fround(-100.0);
HEAPF32[$20 >> 2] = Math_fround(-100.0);
HEAPF32[$21 >> 2] = Math_fround(-100.0);
HEAPF32[$22 >> 2] = Math_fround(-100.0);
__ZN13FingerBending16SetFingerBendingEPKcP7HashAnyIS1_S_E($0, $86, 0);
$87 = 68808 + ($59 << 7) + 96 | 0;
HEAP32[$87 >> 2] = HEAP32[$0 >> 2];
HEAP32[$87 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
HEAP32[$87 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
HEAP32[$87 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
$90 = __ZN7XMLCell13attrib_stringEPKc($43, __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17200] | 0, 7) | 0) | 0;
HEAPF32[$0 >> 2] = Math_fround(-100.0);
HEAPF32[$20 >> 2] = Math_fround(-100.0);
HEAPF32[$21 >> 2] = Math_fround(-100.0);
HEAPF32[$22 >> 2] = Math_fround(-100.0);
__ZN13FingerBending16SetFingerBendingEPKcP7HashAnyIS1_S_E($0, $90, 0);
$91 = 68808 + ($59 << 7) + 112 | 0;
HEAP32[$91 >> 2] = HEAP32[$0 >> 2];
HEAP32[$91 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
HEAP32[$91 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
HEAP32[$91 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
$94 = __ZN7XMLCell13attrib_stringEPKc($43, __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17201] | 0, 0) | 0) | 0;
if (!$94) {
$$sroa$0489$1 = Math_fround(-100.0);
$$sroa$10497$0 = Math_fround(-100.0);
$$sroa$12500$0 = Math_fround(-100.0);
$$sroa$6491$0 = Math_fround(-100.0);
$$sroa$8494$0 = Math_fround(-100.0);
} else {
HEAP32[$vararg_buffer3 >> 2] = $0;
HEAP32[$vararg_buffer3 + 4 >> 2] = $23;
HEAP32[$vararg_buffer3 + 8 >> 2] = $24;
HEAP32[$vararg_buffer3 + 12 >> 2] = $25;
HEAP32[$vararg_buffer3 + 16 >> 2] = $26;
if ((_sscanf($94, 49841, $vararg_buffer3) | 0) == 5) {
$99 = Math_fround(+HEAPF64[$0 >> 3]);
$101 = Math_fround(+HEAPF64[$23 >> 3]);
$103 = Math_fround(+HEAPF64[$24 >> 3]);
$105 = Math_fround(+HEAPF64[$25 >> 3]);
$$sink$i$i$i = Math_fround(+HEAPF64[$26 >> 3]);
$$sink12$i$i$i = $105;
$$sink13$i$i$i = $103;
$$sink14$i$i$i = $101;
$$sroa$0489$0 = $99;
} else {
HEAP32[$vararg_buffer9 >> 2] = $94;
__Z7eprintfPKcz(49861, $vararg_buffer9);
$$sink$i$i$i = Math_fround(0.0);
$$sink12$i$i$i = Math_fround(0.0);
$$sink13$i$i$i = Math_fround(0.0);
$$sink14$i$i$i = Math_fround(0.0);
$$sroa$0489$0 = Math_fround(0.0);
}
$$sroa$0489$1 = $$sroa$0489$0;
$$sroa$10497$0 = $$sink12$i$i$i;
$$sroa$12500$0 = $$sink$i$i$i;
$$sroa$6491$0 = $$sink14$i$i$i;
$$sroa$8494$0 = $$sink13$i$i$i;
}
HEAPF32[69884 + ($59 * 120 | 0) >> 2] = $$sroa$0489$1;
HEAPF32[69884 + ($59 * 120 | 0) + 4 >> 2] = $$sroa$6491$0;
HEAPF32[69884 + ($59 * 120 | 0) + 8 >> 2] = $$sroa$8494$0;
HEAPF32[69884 + ($59 * 120 | 0) + 12 >> 2] = $$sroa$10497$0;
HEAPF32[69884 + ($59 * 120 | 0) + 16 >> 2] = $$sroa$12500$0;
$110 = __ZN7XMLCell13attrib_stringEPKc($43, __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17201] | 0, 1) | 0) | 0;
if (!$110) {
$$sroa$0489$1$1 = Math_fround(-100.0);
$$sroa$10497$0$1 = Math_fround(-100.0);
$$sroa$12500$0$1 = Math_fround(-100.0);
$$sroa$6491$0$1 = Math_fround(-100.0);
$$sroa$8494$0$1 = Math_fround(-100.0);
} else {
HEAP32[$vararg_buffer82 >> 2] = $0;
HEAP32[$vararg_buffer82 + 4 >> 2] = $23;
HEAP32[$vararg_buffer82 + 8 >> 2] = $24;
HEAP32[$vararg_buffer82 + 12 >> 2] = $25;
HEAP32[$vararg_buffer82 + 16 >> 2] = $26;
if ((_sscanf($110, 49841, $vararg_buffer82) | 0) == 5) {
$364 = Math_fround(+HEAPF64[$0 >> 3]);
$366 = Math_fround(+HEAPF64[$23 >> 3]);
$368 = Math_fround(+HEAPF64[$24 >> 3]);
$370 = Math_fround(+HEAPF64[$25 >> 3]);
$$sink$i$i$i$1 = Math_fround(+HEAPF64[$26 >> 3]);
$$sink12$i$i$i$1 = $370;
$$sink13$i$i$i$1 = $368;
$$sink14$i$i$i$1 = $366;
$$sroa$0489$0$1 = $364;
} else {
HEAP32[$vararg_buffer89 >> 2] = $110;
__Z7eprintfPKcz(49861, $vararg_buffer89);
$$sink$i$i$i$1 = Math_fround(0.0);
$$sink12$i$i$i$1 = Math_fround(0.0);
$$sink13$i$i$i$1 = Math_fround(0.0);
$$sink14$i$i$i$1 = Math_fround(0.0);
$$sroa$0489$0$1 = Math_fround(0.0);
}
$$sroa$0489$1$1 = $$sroa$0489$0$1;
$$sroa$10497$0$1 = $$sink12$i$i$i$1;
$$sroa$12500$0$1 = $$sink$i$i$i$1;
$$sroa$6491$0$1 = $$sink14$i$i$i$1;
$$sroa$8494$0$1 = $$sink13$i$i$i$1;
}
HEAPF32[69884 + ($59 * 120 | 0) + 20 >> 2] = $$sroa$0489$1$1;
HEAPF32[69884 + ($59 * 120 | 0) + 24 >> 2] = $$sroa$6491$0$1;
HEAPF32[69884 + ($59 * 120 | 0) + 28 >> 2] = $$sroa$8494$0$1;
HEAPF32[69884 + ($59 * 120 | 0) + 32 >> 2] = $$sroa$10497$0$1;
HEAPF32[69884 + ($59 * 120 | 0) + 36 >> 2] = $$sroa$12500$0$1;
$375 = __ZN7XMLCell13attrib_stringEPKc($43, __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17201] | 0, 2) | 0) | 0;
if (!$375) {
$$sroa$0489$1$2 = Math_fround(-100.0);
$$sroa$10497$0$2 = Math_fround(-100.0);
$$sroa$12500$0$2 = Math_fround(-100.0);
$$sroa$6491$0$2 = Math_fround(-100.0);
$$sroa$8494$0$2 = Math_fround(-100.0);
} else {
HEAP32[$vararg_buffer92 >> 2] = $0;
HEAP32[$vararg_buffer92 + 4 >> 2] = $23;
HEAP32[$vararg_buffer92 + 8 >> 2] = $24;
HEAP32[$vararg_buffer92 + 12 >> 2] = $25;
HEAP32[$vararg_buffer92 + 16 >> 2] = $26;
if ((_sscanf($375, 49841, $vararg_buffer92) | 0) == 5) {
$380 = Math_fround(+HEAPF64[$0 >> 3]);
$382 = Math_fround(+HEAPF64[$23 >> 3]);
$384 = Math_fround(+HEAPF64[$24 >> 3]);
$386 = Math_fround(+HEAPF64[$25 >> 3]);
$$sink$i$i$i$2 = Math_fround(+HEAPF64[$26 >> 3]);
$$sink12$i$i$i$2 = $386;
$$sink13$i$i$i$2 = $384;
$$sink14$i$i$i$2 = $382;
$$sroa$0489$0$2 = $380;
} else {
HEAP32[$vararg_buffer99 >> 2] = $375;
__Z7eprintfPKcz(49861, $vararg_buffer99);
$$sink$i$i$i$2 = Math_fround(0.0);
$$sink12$i$i$i$2 = Math_fround(0.0);
$$sink13$i$i$i$2 = Math_fround(0.0);
$$sink14$i$i$i$2 = Math_fround(0.0);
$$sroa$0489$0$2 = Math_fround(0.0);
}
$$sroa$0489$1$2 = $$sroa$0489$0$2;
$$sroa$10497$0$2 = $$sink12$i$i$i$2;
$$sroa$12500$0$2 = $$sink$i$i$i$2;
$$sroa$6491$0$2 = $$sink14$i$i$i$2;
$$sroa$8494$0$2 = $$sink13$i$i$i$2;
}
HEAPF32[69884 + ($59 * 120 | 0) + 40 >> 2] = $$sroa$0489$1$2;
HEAPF32[69884 + ($59 * 120 | 0) + 44 >> 2] = $$sroa$6491$0$2;
HEAPF32[69884 + ($59 * 120 | 0) + 48 >> 2] = $$sroa$8494$0$2;
HEAPF32[69884 + ($59 * 120 | 0) + 52 >> 2] = $$sroa$10497$0$2;
HEAPF32[69884 + ($59 * 120 | 0) + 56 >> 2] = $$sroa$12500$0$2;
$391 = __ZN7XMLCell13attrib_stringEPKc($43, __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17201] | 0, 3) | 0) | 0;
if (!$391) {
$$sroa$0489$1$3 = Math_fround(-100.0);
$$sroa$10497$0$3 = Math_fround(-100.0);
$$sroa$12500$0$3 = Math_fround(-100.0);
$$sroa$6491$0$3 = Math_fround(-100.0);
$$sroa$8494$0$3 = Math_fround(-100.0);
} else {
HEAP32[$vararg_buffer102 >> 2] = $0;
HEAP32[$vararg_buffer102 + 4 >> 2] = $23;
HEAP32[$vararg_buffer102 + 8 >> 2] = $24;
HEAP32[$vararg_buffer102 + 12 >> 2] = $25;
HEAP32[$vararg_buffer102 + 16 >> 2] = $26;
if ((_sscanf($391, 49841, $vararg_buffer102) | 0) == 5) {
$396 = Math_fround(+HEAPF64[$0 >> 3]);
$398 = Math_fround(+HEAPF64[$23 >> 3]);
$400 = Math_fround(+HEAPF64[$24 >> 3]);
$402 = Math_fround(+HEAPF64[$25 >> 3]);
$$sink$i$i$i$3 = Math_fround(+HEAPF64[$26 >> 3]);
$$sink12$i$i$i$3 = $402;
$$sink13$i$i$i$3 = $400;
$$sink14$i$i$i$3 = $398;
$$sroa$0489$0$3 = $396;
} else {
HEAP32[$vararg_buffer109 >> 2] = $391;
__Z7eprintfPKcz(49861, $vararg_buffer109);
$$sink$i$i$i$3 = Math_fround(0.0);
$$sink12$i$i$i$3 = Math_fround(0.0);
$$sink13$i$i$i$3 = Math_fround(0.0);
$$sink14$i$i$i$3 = Math_fround(0.0);
$$sroa$0489$0$3 = Math_fround(0.0);
}
$$sroa$0489$1$3 = $$sroa$0489$0$3;
$$sroa$10497$0$3 = $$sink12$i$i$i$3;
$$sroa$12500$0$3 = $$sink$i$i$i$3;
$$sroa$6491$0$3 = $$sink14$i$i$i$3;
$$sroa$8494$0$3 = $$sink13$i$i$i$3;
}
HEAPF32[69884 + ($59 * 120 | 0) + 60 >> 2] = $$sroa$0489$1$3;
HEAPF32[69884 + ($59 * 120 | 0) + 64 >> 2] = $$sroa$6491$0$3;
HEAPF32[69884 + ($59 * 120 | 0) + 68 >> 2] = $$sroa$8494$0$3;
HEAPF32[69884 + ($59 * 120 | 0) + 72 >> 2] = $$sroa$10497$0$3;
HEAPF32[69884 + ($59 * 120 | 0) + 76 >> 2] = $$sroa$12500$0$3;
$407 = __ZN7XMLCell13attrib_stringEPKc($43, __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17201] | 0, 4) | 0) | 0;
if (!$407) {
$$sroa$0489$1$4 = Math_fround(-100.0);
$$sroa$10497$0$4 = Math_fround(-100.0);
$$sroa$12500$0$4 = Math_fround(-100.0);
$$sroa$6491$0$4 = Math_fround(-100.0);
$$sroa$8494$0$4 = Math_fround(-100.0);
} else {
HEAP32[$vararg_buffer112 >> 2] = $0;
HEAP32[$vararg_buffer112 + 4 >> 2] = $23;
HEAP32[$vararg_buffer112 + 8 >> 2] = $24;
HEAP32[$vararg_buffer112 + 12 >> 2] = $25;
HEAP32[$vararg_buffer112 + 16 >> 2] = $26;
if ((_sscanf($407, 49841, $vararg_buffer112) | 0) == 5) {
$412 = Math_fround(+HEAPF64[$0 >> 3]);
$414 = Math_fround(+HEAPF64[$23 >> 3]);
$416 = Math_fround(+HEAPF64[$24 >> 3]);
$418 = Math_fround(+HEAPF64[$25 >> 3]);
$$sink$i$i$i$4 = Math_fround(+HEAPF64[$26 >> 3]);
$$sink12$i$i$i$4 = $418;
$$sink13$i$i$i$4 = $416;
$$sink14$i$i$i$4 = $414;
$$sroa$0489$0$4 = $412;
} else {
HEAP32[$vararg_buffer119 >> 2] = $407;
__Z7eprintfPKcz(49861, $vararg_buffer119);
$$sink$i$i$i$4 = Math_fround(0.0);
$$sink12$i$i$i$4 = Math_fround(0.0);
$$sink13$i$i$i$4 = Math_fround(0.0);
$$sink14$i$i$i$4 = Math_fround(0.0);
$$sroa$0489$0$4 = Math_fround(0.0);
}
$$sroa$0489$1$4 = $$sroa$0489$0$4;
$$sroa$10497$0$4 = $$sink12$i$i$i$4;
$$sroa$12500$0$4 = $$sink$i$i$i$4;
$$sroa$6491$0$4 = $$sink14$i$i$i$4;
$$sroa$8494$0$4 = $$sink13$i$i$i$4;
}
HEAPF32[69884 + ($59 * 120 | 0) + 80 >> 2] = $$sroa$0489$1$4;
HEAPF32[69884 + ($59 * 120 | 0) + 84 >> 2] = $$sroa$6491$0$4;
HEAPF32[69884 + ($59 * 120 | 0) + 88 >> 2] = $$sroa$8494$0$4;
HEAPF32[69884 + ($59 * 120 | 0) + 92 >> 2] = $$sroa$10497$0$4;
HEAPF32[69884 + ($59 * 120 | 0) + 96 >> 2] = $$sroa$12500$0$4;
$423 = __ZN7XMLCell13attrib_stringEPKc($43, __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17201] | 0, 5) | 0) | 0;
if (!$423) {
$$sroa$0489$1$5 = Math_fround(-100.0);
$$sroa$10497$0$5 = Math_fround(-100.0);
$$sroa$12500$0$5 = Math_fround(-100.0);
$$sroa$6491$0$5 = Math_fround(-100.0);
$$sroa$8494$0$5 = Math_fround(-100.0);
} else {
HEAP32[$vararg_buffer122 >> 2] = $0;
HEAP32[$vararg_buffer122 + 4 >> 2] = $23;
HEAP32[$vararg_buffer122 + 8 >> 2] = $24;
HEAP32[$vararg_buffer122 + 12 >> 2] = $25;
HEAP32[$vararg_buffer122 + 16 >> 2] = $26;
if ((_sscanf($423, 49841, $vararg_buffer122) | 0) == 5) {
$428 = Math_fround(+HEAPF64[$0 >> 3]);
$430 = Math_fround(+HEAPF64[$23 >> 3]);
$432 = Math_fround(+HEAPF64[$24 >> 3]);
$434 = Math_fround(+HEAPF64[$25 >> 3]);
$$sink$i$i$i$5 = Math_fround(+HEAPF64[$26 >> 3]);
$$sink12$i$i$i$5 = $434;
$$sink13$i$i$i$5 = $432;
$$sink14$i$i$i$5 = $430;
$$sroa$0489$0$5 = $428;
} else {
HEAP32[$vararg_buffer129 >> 2] = $423;
__Z7eprintfPKcz(49861, $vararg_buffer129);
$$sink$i$i$i$5 = Math_fround(0.0);
$$sink12$i$i$i$5 = Math_fround(0.0);
$$sink13$i$i$i$5 = Math_fround(0.0);
$$sink14$i$i$i$5 = Math_fround(0.0);
$$sroa$0489$0$5 = Math_fround(0.0);
}
$$sroa$0489$1$5 = $$sroa$0489$0$5;
$$sroa$10497$0$5 = $$sink12$i$i$i$5;
$$sroa$12500$0$5 = $$sink$i$i$i$5;
$$sroa$6491$0$5 = $$sink14$i$i$i$5;
$$sroa$8494$0$5 = $$sink13$i$i$i$5;
}
HEAPF32[69884 + ($59 * 120 | 0) + 100 >> 2] = $$sroa$0489$1$5;
HEAPF32[69884 + ($59 * 120 | 0) + 104 >> 2] = $$sroa$6491$0$5;
HEAPF32[69884 + ($59 * 120 | 0) + 108 >> 2] = $$sroa$8494$0$5;
HEAPF32[69884 + ($59 * 120 | 0) + 112 >> 2] = $$sroa$10497$0$5;
HEAPF32[69884 + ($59 * 120 | 0) + 116 >> 2] = $$sroa$12500$0$5;
$$0163554 = $$0163554 + 1 | 0;
} while (($$0163554 | 0) != ($18 | 0));
}
$27 = $13 + 12 | 0;
$28 = HEAP32[$27 >> 2] | 0;
L67 : do if (($28 | 0) > 0) {
$30 = $1 + 4 | 0;
$31 = $1 + 8 | 0;
$32 = $1 + 12 | 0;
$33 = $2 + 4 | 0;
$34 = $2 + 8 | 0;
$35 = $2 + 12 | 0;
$$sroa$0313$16$sroa_idx = $0 + 16 | 0;
$$0167551 = 0;
while (1) {
if ((HEAP32[$27 >> 2] | 0) > ($$0167551 | 0)) $118 = HEAP32[(HEAP32[$13 >> 2] | 0) + ($$0167551 << 2) >> 2] | 0; else $118 = 0;
$120 = __ZNK21InvertibleStringArray14indexFromValueEPKc(HEAP32[17751] | 0, HEAP32[$118 >> 2] | 0) | 0;
$121 = __ZN7XMLCell13attrib_stringEPKc($118, 49917) | 0;
$122 = HEAP32[17752] | 0;
$125 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($121, HEAP32[$122 + 4 >> 2] | 0) | 0;
$126 = HEAP32[$122 >> 2] | 0;
L74 : do if ((HEAP16[$126 + ($125 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i177 = HEAP32[$126 + ($125 << 3) >> 2] | 0;
if (!$$01215$i$i177) label = 32; else {
$$01216$i$i178 = $$01215$i$i177;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($121, HEAP32[$$01216$i$i178 >> 2] | 0) | 0) break;
$$012$i$i180 = HEAP32[$$01216$i$i178 + 8 >> 2] | 0;
if (!$$012$i$i180) {
label = 32;
break L74;
} else $$01216$i$i178 = $$012$i$i180;
}
$$sink$i$i182 = $$01216$i$i178 + 4 | 0;
}
} else label = 32; while (0);
if ((label | 0) == 32) {
label = 0;
$$sink$i$i182 = $122 + 20 | 0;
}
$138 = HEAP32[$$sink$i$i182 >> 2] | 0;
$139 = __ZN7XMLCell13attrib_stringEPKc($118, 49923) | 0;
HEAPF32[$1 >> 2] = Math_fround(-100.0);
HEAPF32[$30 >> 2] = Math_fround(-100.0);
HEAPF32[$31 >> 2] = Math_fround(-100.0);
HEAPF32[$32 >> 2] = Math_fround(-100.0);
__ZN13FingerBending16SetFingerBendingEPKcP7HashAnyIS1_S_E($1, $139, 0);
__THREW__ = 0;
$140 = invoke_iii(33, $118 | 0, 49936) | 0;
$141 = __THREW__;
__THREW__ = 0;
if ($141 & 1) {
label = 38;
break;
}
HEAPF32[$2 >> 2] = Math_fround(-100.0);
HEAPF32[$33 >> 2] = Math_fround(-100.0);
HEAPF32[$34 >> 2] = Math_fround(-100.0);
HEAPF32[$35 >> 2] = Math_fround(-100.0);
__THREW__ = 0;
invoke_viii(97, $2 | 0, $140 | 0, 0);
$143 = __THREW__;
__THREW__ = 0;
if ($143 & 1) {
label = 38;
break;
}
$$sroa$0477$0$copyload516 = HEAP32[69884 + ($138 * 120 | 0) + 20 >> 2] | 0;
$$sroa$2478$0$copyload517 = HEAP32[69884 + ($138 * 120 | 0) + 24 >> 2] | 0;
$$sroa$3480$0$copyload518 = HEAP32[69884 + ($138 * 120 | 0) + 28 >> 2] | 0;
$$sroa$4482$0$copyload519 = HEAP32[69884 + ($138 * 120 | 0) + 32 >> 2] | 0;
$$sroa$5484$0$copyload520 = HEAP32[69884 + ($138 * 120 | 0) + 36 >> 2] | 0;
$$sroa$0468$0$copyload521 = HEAP32[69884 + ($138 * 120 | 0) + 40 >> 2] | 0;
$$sroa$2469$0$copyload522 = HEAP32[69884 + ($138 * 120 | 0) + 44 >> 2] | 0;
$$sroa$3471$0$copyload523 = HEAP32[69884 + ($138 * 120 | 0) + 48 >> 2] | 0;
$$sroa$4473$0$copyload524 = HEAP32[69884 + ($138 * 120 | 0) + 52 >> 2] | 0;
$$sroa$5475$0$copyload525 = HEAP32[69884 + ($138 * 120 | 0) + 56 >> 2] | 0;
$$sroa$0459$0$copyload526 = HEAP32[69884 + ($138 * 120 | 0) + 60 >> 2] | 0;
$$sroa$2460$0$copyload527 = HEAP32[69884 + ($138 * 120 | 0) + 64 >> 2] | 0;
$$sroa$3462$0$copyload528 = HEAP32[69884 + ($138 * 120 | 0) + 68 >> 2] | 0;
$$sroa$4464$0$copyload529 = HEAP32[69884 + ($138 * 120 | 0) + 72 >> 2] | 0;
$$sroa$5466$0$copyload530 = HEAP32[69884 + ($138 * 120 | 0) + 76 >> 2] | 0;
$$sroa$0450$0$copyload531 = HEAP32[69884 + ($138 * 120 | 0) + 80 >> 2] | 0;
$$sroa$2451$0$copyload532 = HEAP32[69884 + ($138 * 120 | 0) + 84 >> 2] | 0;
$$sroa$3453$0$copyload533 = HEAP32[69884 + ($138 * 120 | 0) + 88 >> 2] | 0;
$$sroa$4455$0$copyload534 = HEAP32[69884 + ($138 * 120 | 0) + 92 >> 2] | 0;
$$sroa$5457$0$copyload535 = HEAP32[69884 + ($138 * 120 | 0) + 96 >> 2] | 0;
$$sroa$0445$0$copyload536 = HEAP32[69884 + ($138 * 120 | 0) + 100 >> 2] | 0;
$$sroa$2$0$copyload537 = HEAP32[69884 + ($138 * 120 | 0) + 104 >> 2] | 0;
$$sroa$3$0$copyload538 = HEAP32[69884 + ($138 * 120 | 0) + 108 >> 2] | 0;
$$sroa$4$0$copyload539 = HEAP32[69884 + ($138 * 120 | 0) + 112 >> 2] | 0;
$$sroa$5$0$copyload540 = HEAP32[69884 + ($138 * 120 | 0) + 116 >> 2] | 0;
__THREW__ = 0;
$150 = invoke_iii(33, $118 | 0, 49950) | 0;
$151 = __THREW__;
__THREW__ = 0;
if ($151 & 1) {
label = 38;
break;
}
__THREW__ = 0;
$153 = invoke_ii(31, $150 | 0) | 0;
$154 = __THREW__;
__THREW__ = 0;
if ($154 & 1) {
label = 38;
break;
};
HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[$0 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
HEAP32[$$sroa$0313$16$sroa_idx >> 2] = HEAP32[$2 >> 2];
HEAP32[$$sroa$0313$16$sroa_idx + 4 >> 2] = HEAP32[$2 + 4 >> 2];
HEAP32[$$sroa$0313$16$sroa_idx + 8 >> 2] = HEAP32[$2 + 8 >> 2];
HEAP32[$$sroa$0313$16$sroa_idx + 12 >> 2] = HEAP32[$2 + 12 >> 2];
$156 = 66668 + ($120 * 160 | 0) | 0;
HEAP32[$156 >> 2] = HEAP32[$0 >> 2];
HEAP32[$156 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
HEAP32[$156 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
HEAP32[$156 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
HEAP32[$156 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
HEAP32[$156 + 20 >> 2] = HEAP32[$0 + 20 >> 2];
HEAP32[$156 + 24 >> 2] = HEAP32[$0 + 24 >> 2];
HEAP32[$156 + 28 >> 2] = HEAP32[$0 + 28 >> 2];
HEAPF32[66668 + ($120 * 160 | 0) + 32 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($120 * 160 | 0) + 36 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($120 * 160 | 0) + 40 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($120 * 160 | 0) + 44 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($120 * 160 | 0) + 48 >> 2] = Math_fround(-100.0);
HEAP32[66668 + ($120 * 160 | 0) + 52 >> 2] = $$sroa$0477$0$copyload516;
HEAP32[66668 + ($120 * 160 | 0) + 56 >> 2] = $$sroa$2478$0$copyload517;
HEAP32[66668 + ($120 * 160 | 0) + 60 >> 2] = $$sroa$3480$0$copyload518;
HEAP32[66668 + ($120 * 160 | 0) + 64 >> 2] = $$sroa$4482$0$copyload519;
HEAP32[66668 + ($120 * 160 | 0) + 68 >> 2] = $$sroa$5484$0$copyload520;
HEAP32[66668 + ($120 * 160 | 0) + 72 >> 2] = $$sroa$0468$0$copyload521;
HEAP32[66668 + ($120 * 160 | 0) + 76 >> 2] = $$sroa$2469$0$copyload522;
HEAP32[66668 + ($120 * 160 | 0) + 80 >> 2] = $$sroa$3471$0$copyload523;
HEAP32[66668 + ($120 * 160 | 0) + 84 >> 2] = $$sroa$4473$0$copyload524;
HEAP32[66668 + ($120 * 160 | 0) + 88 >> 2] = $$sroa$5475$0$copyload525;
HEAP32[66668 + ($120 * 160 | 0) + 92 >> 2] = $$sroa$0459$0$copyload526;
HEAP32[66668 + ($120 * 160 | 0) + 96 >> 2] = $$sroa$2460$0$copyload527;
HEAP32[66668 + ($120 * 160 | 0) + 100 >> 2] = $$sroa$3462$0$copyload528;
HEAP32[66668 + ($120 * 160 | 0) + 104 >> 2] = $$sroa$4464$0$copyload529;
HEAP32[66668 + ($120 * 160 | 0) + 108 >> 2] = $$sroa$5466$0$copyload530;
HEAP32[66668 + ($120 * 160 | 0) + 112 >> 2] = $$sroa$0450$0$copyload531;
HEAP32[66668 + ($120 * 160 | 0) + 116 >> 2] = $$sroa$2451$0$copyload532;
HEAP32[66668 + ($120 * 160 | 0) + 120 >> 2] = $$sroa$3453$0$copyload533;
HEAP32[66668 + ($120 * 160 | 0) + 124 >> 2] = $$sroa$4455$0$copyload534;
HEAP32[66668 + ($120 * 160 | 0) + 128 >> 2] = $$sroa$5457$0$copyload535;
HEAP32[66668 + ($120 * 160 | 0) + 132 >> 2] = $$sroa$0445$0$copyload536;
HEAP32[66668 + ($120 * 160 | 0) + 136 >> 2] = $$sroa$2$0$copyload537;
HEAP32[66668 + ($120 * 160 | 0) + 140 >> 2] = $$sroa$3$0$copyload538;
HEAP32[66668 + ($120 * 160 | 0) + 144 >> 2] = $$sroa$4$0$copyload539;
HEAP32[66668 + ($120 * 160 | 0) + 148 >> 2] = $$sroa$5$0$copyload540;
HEAP16[66668 + ($120 * 160 | 0) + 152 >> 1] = $153;
HEAP32[66668 + ($120 * 160 | 0) + 156 >> 2] = $138;
HEAP32[69832 + ($120 << 2) >> 2] = 68808 + ($138 << 7);
$$0167551 = $$0167551 + 1 | 0;
if (($$0167551 | 0) >= ($28 | 0)) break L67;
}
if ((label | 0) == 38) {
$161 = ___cxa_find_matching_catch_2() | 0;
___resumeException($161 | 0);
}
} while (0);
$163 = __ZN7XMLCell7elementEPKc($4, 49966) | 0;
if ($163 | 0) {
$165 = $0 + 8 | 0;
$166 = $0 + 16 | 0;
$167 = $0 + 24 | 0;
$168 = $0 + 32 | 0;
$$0166550 = 0;
do {
$171 = __ZN7XMLCell13attrib_stringEPKc($163, __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17200] | 0, $$0166550) | 0) | 0;
if (!$171) {
$$sroa$0299$1 = Math_fround(-100.0);
$$sroa$10307$0 = Math_fround(-100.0);
$$sroa$12310$0 = Math_fround(-100.0);
$$sroa$6301$0 = Math_fround(-100.0);
$$sroa$8304$0 = Math_fround(-100.0);
} else {
HEAP32[$vararg_buffer12 >> 2] = $0;
HEAP32[$vararg_buffer12 + 4 >> 2] = $165;
HEAP32[$vararg_buffer12 + 8 >> 2] = $166;
HEAP32[$vararg_buffer12 + 12 >> 2] = $167;
HEAP32[$vararg_buffer12 + 16 >> 2] = $168;
if ((_sscanf($171, 49841, $vararg_buffer12) | 0) == 5) {
$176 = Math_fround(+HEAPF64[$0 >> 3]);
$178 = Math_fround(+HEAPF64[$165 >> 3]);
$180 = Math_fround(+HEAPF64[$166 >> 3]);
$182 = Math_fround(+HEAPF64[$167 >> 3]);
$$sink$i$i$i212 = Math_fround(+HEAPF64[$168 >> 3]);
$$sink12$i$i$i211 = $182;
$$sink13$i$i$i210 = $180;
$$sink14$i$i$i209 = $178;
$$sroa$0299$0 = $176;
} else {
HEAP32[$vararg_buffer19 >> 2] = $171;
__Z7eprintfPKcz(49861, $vararg_buffer19);
$$sink$i$i$i212 = Math_fround(0.0);
$$sink12$i$i$i211 = Math_fround(0.0);
$$sink13$i$i$i210 = Math_fround(0.0);
$$sink14$i$i$i209 = Math_fround(0.0);
$$sroa$0299$0 = Math_fround(0.0);
}
$$sroa$0299$1 = $$sroa$0299$0;
$$sroa$10307$0 = $$sink12$i$i$i211;
$$sroa$12310$0 = $$sink$i$i$i212;
$$sroa$6301$0 = $$sink14$i$i$i209;
$$sroa$8304$0 = $$sink13$i$i$i210;
}
HEAPF32[70844 + ($$0166550 * 20 | 0) >> 2] = $$sroa$0299$1;
HEAPF32[70844 + ($$0166550 * 20 | 0) + 4 >> 2] = $$sroa$6301$0;
HEAPF32[70844 + ($$0166550 * 20 | 0) + 8 >> 2] = $$sroa$8304$0;
HEAPF32[70844 + ($$0166550 * 20 | 0) + 12 >> 2] = $$sroa$10307$0;
HEAPF32[70844 + ($$0166550 * 20 | 0) + 16 >> 2] = $$sroa$12310$0;
$$0166550 = $$0166550 + 1 | 0;
} while (($$0166550 | 0) != 8);
}
$186 = __ZN7XMLCell7elementEPKc($4, 49990) | 0;
if ($186 | 0) {
__ZN7XMLCell11attrib_REALERfPKc($186, 3384, __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17753] | 0, 1) | 0) | 0;
__ZN7XMLCell11attrib_REALERfPKc($186, 3388, __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17753] | 0, 2) | 0) | 0;
}
$192 = __ZN7XMLCell7elementEPKc($4, 50001) | 0;
if (!$192) {
STACKTOP = sp;
return;
}
$194 = __ZN7XMLCell13attrib_stringEPKc($192, 50014) | 0;
HEAPF32[$0 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 4 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 8 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 12 >> 2] = Math_fround(-100.0);
__ZN13FingerBending16SetFingerBendingEPKcP7HashAnyIS1_S_E($0, $194, 0);
$198 = HEAP32[17755] | 0;
HEAP32[$198 >> 2] = HEAP32[$0 >> 2];
HEAP32[$198 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
HEAP32[$198 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
HEAP32[$198 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
$199 = __ZN7XMLCell13attrib_stringEPKc($192, 50043) | 0;
HEAPF32[$0 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 4 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 8 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 12 >> 2] = Math_fround(-100.0);
__ZN13FingerBending16SetFingerBendingEPKcP7HashAnyIS1_S_E($0, $199, 0);
$204 = (HEAP32[17755] | 0) + 16 | 0;
HEAP32[$204 >> 2] = HEAP32[$0 >> 2];
HEAP32[$204 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
HEAP32[$204 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
HEAP32[$204 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
$205 = __ZN7XMLCell13attrib_stringEPKc($192, 50073) | 0;
if (!$205) {
$$sroa$0285$1 = Math_fround(-100.0);
$$sroa$10293$0 = Math_fround(-100.0);
$$sroa$12296$0 = Math_fround(-100.0);
$$sroa$6287$0 = Math_fround(-100.0);
$$sroa$8290$0 = Math_fround(-100.0);
} else {
$207 = $0 + 8 | 0;
$208 = $0 + 16 | 0;
$209 = $0 + 24 | 0;
$210 = $0 + 32 | 0;
HEAP32[$vararg_buffer22 >> 2] = $0;
HEAP32[$vararg_buffer22 + 4 >> 2] = $207;
HEAP32[$vararg_buffer22 + 8 >> 2] = $208;
HEAP32[$vararg_buffer22 + 12 >> 2] = $209;
HEAP32[$vararg_buffer22 + 16 >> 2] = $210;
if ((_sscanf($205, 49841, $vararg_buffer22) | 0) == 5) {
$214 = Math_fround(+HEAPF64[$0 >> 3]);
$216 = Math_fround(+HEAPF64[$207 >> 3]);
$218 = Math_fround(+HEAPF64[$208 >> 3]);
$220 = Math_fround(+HEAPF64[$209 >> 3]);
$$sink$i$i$i218 = Math_fround(+HEAPF64[$210 >> 3]);
$$sink12$i$i$i217 = $220;
$$sink13$i$i$i216 = $218;
$$sink14$i$i$i215 = $216;
$$sroa$0285$0 = $214;
} else {
HEAP32[$vararg_buffer29 >> 2] = $205;
__Z7eprintfPKcz(49861, $vararg_buffer29);
$$sink$i$i$i218 = Math_fround(0.0);
$$sink12$i$i$i217 = Math_fround(0.0);
$$sink13$i$i$i216 = Math_fround(0.0);
$$sink14$i$i$i215 = Math_fround(0.0);
$$sroa$0285$0 = Math_fround(0.0);
}
$$sroa$0285$1 = $$sroa$0285$0;
$$sroa$10293$0 = $$sink12$i$i$i217;
$$sroa$12296$0 = $$sink$i$i$i218;
$$sroa$6287$0 = $$sink14$i$i$i215;
$$sroa$8290$0 = $$sink13$i$i$i216;
}
$223 = HEAP32[17755] | 0;
HEAPF32[$223 + 32 >> 2] = $$sroa$0285$1;
HEAPF32[$223 + 36 >> 2] = $$sroa$6287$0;
HEAPF32[$223 + 40 >> 2] = $$sroa$8290$0;
HEAPF32[$223 + 44 >> 2] = $$sroa$10293$0;
HEAPF32[$223 + 48 >> 2] = $$sroa$12296$0;
$224 = __ZN7XMLCell13attrib_stringEPKc($192, 50097) | 0;
HEAPF32[$0 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 4 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 8 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 12 >> 2] = Math_fround(-100.0);
__ZN13FingerBending16SetFingerBendingEPKcP7HashAnyIS1_S_E($0, $224, 0);
$229 = (HEAP32[17755] | 0) + 52 | 0;
HEAP32[$229 >> 2] = HEAP32[$0 >> 2];
HEAP32[$229 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
HEAP32[$229 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
HEAP32[$229 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
$230 = __ZN7XMLCell13attrib_stringEPKc($192, 50121) | 0;
HEAPF32[$0 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 4 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 8 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 12 >> 2] = Math_fround(-100.0);
__ZN13FingerBending16SetFingerBendingEPKcP7HashAnyIS1_S_E($0, $230, 0);
$235 = (HEAP32[17755] | 0) + 68 | 0;
HEAP32[$235 >> 2] = HEAP32[$0 >> 2];
HEAP32[$235 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
HEAP32[$235 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
HEAP32[$235 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
$236 = __ZN7XMLCell13attrib_stringEPKc($192, 50146) | 0;
if (!$236) {
$$sroa$0271$1 = Math_fround(-100.0);
$$sroa$10279$0 = Math_fround(-100.0);
$$sroa$12282$0 = Math_fround(-100.0);
$$sroa$6273$0 = Math_fround(-100.0);
$$sroa$8276$0 = Math_fround(-100.0);
} else {
$238 = $0 + 8 | 0;
$239 = $0 + 16 | 0;
$240 = $0 + 24 | 0;
$241 = $0 + 32 | 0;
HEAP32[$vararg_buffer32 >> 2] = $0;
HEAP32[$vararg_buffer32 + 4 >> 2] = $238;
HEAP32[$vararg_buffer32 + 8 >> 2] = $239;
HEAP32[$vararg_buffer32 + 12 >> 2] = $240;
HEAP32[$vararg_buffer32 + 16 >> 2] = $241;
if ((_sscanf($236, 49841, $vararg_buffer32) | 0) == 5) {
$245 = Math_fround(+HEAPF64[$0 >> 3]);
$247 = Math_fround(+HEAPF64[$238 >> 3]);
$249 = Math_fround(+HEAPF64[$239 >> 3]);
$251 = Math_fround(+HEAPF64[$240 >> 3]);
$$sink$i$i$i206 = Math_fround(+HEAPF64[$241 >> 3]);
$$sink12$i$i$i205 = $251;
$$sink13$i$i$i204 = $249;
$$sink14$i$i$i203 = $247;
$$sroa$0271$0 = $245;
} else {
HEAP32[$vararg_buffer39 >> 2] = $236;
__Z7eprintfPKcz(49861, $vararg_buffer39);
$$sink$i$i$i206 = Math_fround(0.0);
$$sink12$i$i$i205 = Math_fround(0.0);
$$sink13$i$i$i204 = Math_fround(0.0);
$$sink14$i$i$i203 = Math_fround(0.0);
$$sroa$0271$0 = Math_fround(0.0);
}
$$sroa$0271$1 = $$sroa$0271$0;
$$sroa$10279$0 = $$sink12$i$i$i205;
$$sroa$12282$0 = $$sink$i$i$i206;
$$sroa$6273$0 = $$sink14$i$i$i203;
$$sroa$8276$0 = $$sink13$i$i$i204;
}
$254 = HEAP32[17755] | 0;
HEAPF32[$254 + 84 >> 2] = $$sroa$0271$1;
HEAPF32[$254 + 88 >> 2] = $$sroa$6273$0;
HEAPF32[$254 + 92 >> 2] = $$sroa$8276$0;
HEAPF32[$254 + 96 >> 2] = $$sroa$10279$0;
HEAPF32[$254 + 100 >> 2] = $$sroa$12282$0;
$255 = __ZN7XMLCell13attrib_stringEPKc($192, 50168) | 0;
HEAPF32[$0 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 4 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 8 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 12 >> 2] = Math_fround(-100.0);
__ZN13FingerBending16SetFingerBendingEPKcP7HashAnyIS1_S_E($0, $255, 0);
$260 = (HEAP32[17755] | 0) + 104 | 0;
HEAP32[$260 >> 2] = HEAP32[$0 >> 2];
HEAP32[$260 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
HEAP32[$260 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
HEAP32[$260 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
$261 = __ZN7XMLCell13attrib_stringEPKc($192, 50192) | 0;
if (!$261) {
$$sroa$0257$1 = Math_fround(-100.0);
$$sroa$10265$0 = Math_fround(-100.0);
$$sroa$12268$0 = Math_fround(-100.0);
$$sroa$6259$0 = Math_fround(-100.0);
$$sroa$8262$0 = Math_fround(-100.0);
} else {
$263 = $0 + 8 | 0;
$264 = $0 + 16 | 0;
$265 = $0 + 24 | 0;
$266 = $0 + 32 | 0;
HEAP32[$vararg_buffer42 >> 2] = $0;
HEAP32[$vararg_buffer42 + 4 >> 2] = $263;
HEAP32[$vararg_buffer42 + 8 >> 2] = $264;
HEAP32[$vararg_buffer42 + 12 >> 2] = $265;
HEAP32[$vararg_buffer42 + 16 >> 2] = $266;
if ((_sscanf($261, 49841, $vararg_buffer42) | 0) == 5) {
$270 = Math_fround(+HEAPF64[$0 >> 3]);
$272 = Math_fround(+HEAPF64[$263 >> 3]);
$274 = Math_fround(+HEAPF64[$264 >> 3]);
$276 = Math_fround(+HEAPF64[$265 >> 3]);
$$sink$i$i$i200 = Math_fround(+HEAPF64[$266 >> 3]);
$$sink12$i$i$i199 = $276;
$$sink13$i$i$i198 = $274;
$$sink14$i$i$i197 = $272;
$$sroa$0257$0 = $270;
} else {
HEAP32[$vararg_buffer49 >> 2] = $261;
__Z7eprintfPKcz(49861, $vararg_buffer49);
$$sink$i$i$i200 = Math_fround(0.0);
$$sink12$i$i$i199 = Math_fround(0.0);
$$sink13$i$i$i198 = Math_fround(0.0);
$$sink14$i$i$i197 = Math_fround(0.0);
$$sroa$0257$0 = Math_fround(0.0);
}
$$sroa$0257$1 = $$sroa$0257$0;
$$sroa$10265$0 = $$sink12$i$i$i199;
$$sroa$12268$0 = $$sink$i$i$i200;
$$sroa$6259$0 = $$sink14$i$i$i197;
$$sroa$8262$0 = $$sink13$i$i$i198;
}
$279 = HEAP32[17755] | 0;
HEAPF32[$279 + 120 >> 2] = $$sroa$0257$1;
HEAPF32[$279 + 124 >> 2] = $$sroa$6259$0;
HEAPF32[$279 + 128 >> 2] = $$sroa$8262$0;
HEAPF32[$279 + 132 >> 2] = $$sroa$10265$0;
HEAPF32[$279 + 136 >> 2] = $$sroa$12268$0;
$280 = __ZN7XMLCell13attrib_stringEPKc($192, 50221) | 0;
HEAPF32[$0 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 4 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 8 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 12 >> 2] = Math_fround(-100.0);
__ZN13FingerBending16SetFingerBendingEPKcP7HashAnyIS1_S_E($0, $280, 0);
$285 = (HEAP32[17755] | 0) + 140 | 0;
HEAP32[$285 >> 2] = HEAP32[$0 >> 2];
HEAP32[$285 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
HEAP32[$285 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
HEAP32[$285 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
$286 = __ZN7XMLCell13attrib_stringEPKc($192, 50250) | 0;
if (!$286) {
$$sroa$0243$1 = Math_fround(-100.0);
$$sroa$10251$0 = Math_fround(-100.0);
$$sroa$12254$0 = Math_fround(-100.0);
$$sroa$6245$0 = Math_fround(-100.0);
$$sroa$8248$0 = Math_fround(-100.0);
} else {
$288 = $0 + 8 | 0;
$289 = $0 + 16 | 0;
$290 = $0 + 24 | 0;
$291 = $0 + 32 | 0;
HEAP32[$vararg_buffer52 >> 2] = $0;
HEAP32[$vararg_buffer52 + 4 >> 2] = $288;
HEAP32[$vararg_buffer52 + 8 >> 2] = $289;
HEAP32[$vararg_buffer52 + 12 >> 2] = $290;
HEAP32[$vararg_buffer52 + 16 >> 2] = $291;
if ((_sscanf($286, 49841, $vararg_buffer52) | 0) == 5) {
$295 = Math_fround(+HEAPF64[$0 >> 3]);
$297 = Math_fround(+HEAPF64[$288 >> 3]);
$299 = Math_fround(+HEAPF64[$289 >> 3]);
$301 = Math_fround(+HEAPF64[$290 >> 3]);
$$sink$i$i$i194 = Math_fround(+HEAPF64[$291 >> 3]);
$$sink12$i$i$i193 = $301;
$$sink13$i$i$i192 = $299;
$$sink14$i$i$i191 = $297;
$$sroa$0243$0 = $295;
} else {
HEAP32[$vararg_buffer59 >> 2] = $286;
__Z7eprintfPKcz(49861, $vararg_buffer59);
$$sink$i$i$i194 = Math_fround(0.0);
$$sink12$i$i$i193 = Math_fround(0.0);
$$sink13$i$i$i192 = Math_fround(0.0);
$$sink14$i$i$i191 = Math_fround(0.0);
$$sroa$0243$0 = Math_fround(0.0);
}
$$sroa$0243$1 = $$sroa$0243$0;
$$sroa$10251$0 = $$sink12$i$i$i193;
$$sroa$12254$0 = $$sink$i$i$i194;
$$sroa$6245$0 = $$sink14$i$i$i191;
$$sroa$8248$0 = $$sink13$i$i$i192;
}
$304 = HEAP32[17755] | 0;
HEAPF32[$304 + 156 >> 2] = $$sroa$0243$1;
HEAPF32[$304 + 160 >> 2] = $$sroa$6245$0;
HEAPF32[$304 + 164 >> 2] = $$sroa$8248$0;
HEAPF32[$304 + 168 >> 2] = $$sroa$10251$0;
HEAPF32[$304 + 172 >> 2] = $$sroa$12254$0;
$305 = __ZN7XMLCell13attrib_stringEPKc($192, 50265) | 0;
HEAPF32[$0 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 4 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 8 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 12 >> 2] = Math_fround(-100.0);
__ZN13FingerBending16SetFingerBendingEPKcP7HashAnyIS1_S_E($0, $305, 0);
$310 = (HEAP32[17755] | 0) + 176 | 0;
HEAP32[$310 >> 2] = HEAP32[$0 >> 2];
HEAP32[$310 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
HEAP32[$310 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
HEAP32[$310 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
$311 = __ZN7XMLCell13attrib_stringEPKc($192, 50280) | 0;
if (!$311) {
$$sroa$0229$1 = Math_fround(-100.0);
$$sroa$10237$0 = Math_fround(-100.0);
$$sroa$12240$0 = Math_fround(-100.0);
$$sroa$6231$0 = Math_fround(-100.0);
$$sroa$8234$0 = Math_fround(-100.0);
} else {
$313 = $0 + 8 | 0;
$314 = $0 + 16 | 0;
$315 = $0 + 24 | 0;
$316 = $0 + 32 | 0;
HEAP32[$vararg_buffer62 >> 2] = $0;
HEAP32[$vararg_buffer62 + 4 >> 2] = $313;
HEAP32[$vararg_buffer62 + 8 >> 2] = $314;
HEAP32[$vararg_buffer62 + 12 >> 2] = $315;
HEAP32[$vararg_buffer62 + 16 >> 2] = $316;
if ((_sscanf($311, 49841, $vararg_buffer62) | 0) == 5) {
$320 = Math_fround(+HEAPF64[$0 >> 3]);
$322 = Math_fround(+HEAPF64[$313 >> 3]);
$324 = Math_fround(+HEAPF64[$314 >> 3]);
$326 = Math_fround(+HEAPF64[$315 >> 3]);
$$sink$i$i$i188 = Math_fround(+HEAPF64[$316 >> 3]);
$$sink12$i$i$i187 = $326;
$$sink13$i$i$i186 = $324;
$$sink14$i$i$i185 = $322;
$$sroa$0229$0 = $320;
} else {
HEAP32[$vararg_buffer69 >> 2] = $311;
__Z7eprintfPKcz(49861, $vararg_buffer69);
$$sink$i$i$i188 = Math_fround(0.0);
$$sink12$i$i$i187 = Math_fround(0.0);
$$sink13$i$i$i186 = Math_fround(0.0);
$$sink14$i$i$i185 = Math_fround(0.0);
$$sroa$0229$0 = Math_fround(0.0);
}
$$sroa$0229$1 = $$sroa$0229$0;
$$sroa$10237$0 = $$sink12$i$i$i187;
$$sroa$12240$0 = $$sink$i$i$i188;
$$sroa$6231$0 = $$sink14$i$i$i185;
$$sroa$8234$0 = $$sink13$i$i$i186;
}
$329 = HEAP32[17755] | 0;
HEAPF32[$329 + 192 >> 2] = $$sroa$0229$1;
HEAPF32[$329 + 196 >> 2] = $$sroa$6231$0;
HEAPF32[$329 + 200 >> 2] = $$sroa$8234$0;
HEAPF32[$329 + 204 >> 2] = $$sroa$10237$0;
HEAPF32[$329 + 208 >> 2] = $$sroa$12240$0;
$330 = __ZN7XMLCell13attrib_stringEPKc($192, 50306) | 0;
HEAPF32[$0 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 4 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 8 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 12 >> 2] = Math_fround(-100.0);
__ZN13FingerBending16SetFingerBendingEPKcP7HashAnyIS1_S_E($0, $330, 0);
$335 = (HEAP32[17755] | 0) + 212 | 0;
HEAP32[$335 >> 2] = HEAP32[$0 >> 2];
HEAP32[$335 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
HEAP32[$335 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
HEAP32[$335 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
$336 = __ZN7XMLCell13attrib_stringEPKc($192, 50332) | 0;
if (!$336) {
$$sroa$0$1 = Math_fround(-100.0);
$$sroa$10$0 = Math_fround(-100.0);
$$sroa$12$0 = Math_fround(-100.0);
$$sroa$6$0 = Math_fround(-100.0);
$$sroa$8$0 = Math_fround(-100.0);
} else {
$338 = $0 + 8 | 0;
$339 = $0 + 16 | 0;
$340 = $0 + 24 | 0;
$341 = $0 + 32 | 0;
HEAP32[$vararg_buffer72 >> 2] = $0;
HEAP32[$vararg_buffer72 + 4 >> 2] = $338;
HEAP32[$vararg_buffer72 + 8 >> 2] = $339;
HEAP32[$vararg_buffer72 + 12 >> 2] = $340;
HEAP32[$vararg_buffer72 + 16 >> 2] = $341;
if ((_sscanf($336, 49841, $vararg_buffer72) | 0) == 5) {
$345 = Math_fround(+HEAPF64[$0 >> 3]);
$347 = Math_fround(+HEAPF64[$338 >> 3]);
$349 = Math_fround(+HEAPF64[$339 >> 3]);
$351 = Math_fround(+HEAPF64[$340 >> 3]);
$$sink$i$i$i175 = Math_fround(+HEAPF64[$341 >> 3]);
$$sink12$i$i$i174 = $351;
$$sink13$i$i$i173 = $349;
$$sink14$i$i$i172 = $347;
$$sroa$0$0 = $345;
} else {
HEAP32[$vararg_buffer79 >> 2] = $336;
__Z7eprintfPKcz(49861, $vararg_buffer79);
$$sink$i$i$i175 = Math_fround(0.0);
$$sink12$i$i$i174 = Math_fround(0.0);
$$sink13$i$i$i173 = Math_fround(0.0);
$$sink14$i$i$i172 = Math_fround(0.0);
$$sroa$0$0 = Math_fround(0.0);
}
$$sroa$0$1 = $$sroa$0$0;
$$sroa$10$0 = $$sink12$i$i$i174;
$$sroa$12$0 = $$sink$i$i$i175;
$$sroa$6$0 = $$sink14$i$i$i172;
$$sroa$8$0 = $$sink13$i$i$i173;
}
$354 = HEAP32[17755] | 0;
HEAPF32[$354 + 228 >> 2] = $$sroa$0$1;
HEAPF32[$354 + 232 >> 2] = $$sroa$6$0;
HEAPF32[$354 + 236 >> 2] = $$sroa$8$0;
HEAPF32[$354 + 240 >> 2] = $$sroa$10$0;
HEAPF32[$354 + 244 >> 2] = $$sroa$12$0;
$355 = __ZN7XMLCell13attrib_stringEPKc($192, 50357) | 0;
HEAPF32[$0 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 4 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 8 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 12 >> 2] = Math_fround(-100.0);
__ZN13FingerBending16SetFingerBendingEPKcP7HashAnyIS1_S_E($0, $355, 0);
$360 = (HEAP32[17755] | 0) + 248 | 0;
HEAP32[$360 >> 2] = HEAP32[$0 >> 2];
HEAP32[$360 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
HEAP32[$360 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
HEAP32[$360 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
STACKTOP = sp;
return;
}
}
}
__Z7LogTimev() | 0;
__Z7eprintfPKcz(49789, $vararg_buffer);
STACKTOP = sp;
return;
}
function __ZL23handle_hamgestural_signPvP7XMLCell($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0$i = 0, $$0$lcssa283 = 0, $$010$i$i = 0, $$010$i$i$i = 0, $$010$i$i$i$i = 0, $$010$i$i78$i = 0, $$010$i139$i$i = 0, $$012$i$i$i = 0, $$012$i$i$i$i = 0, $$012$i$i107$i$i = 0, $$012$i$i115$i$i = 0, $$012$i$i122$i$i = 0, $$01215$i$i$i = 0, $$01215$i$i$i$i = 0, $$01215$i$i104$i$i = 0, $$01215$i$i112$i$i = 0, $$01215$i$i119$i$i = 0, $$01216$i$i$i = 0, $$01216$i$i$i$i = 0, $$01216$i$i105$i$i = 0, $$01216$i$i113$i$i = 0, $$01216$i$i120$i$i = 0, $$0154$lcssa281 = 0, $$0154$lcssa282 = 0, $$0154211 = 0, $$0156210 = 0, $$0212 = 0, $$066$i = 0, $$06775$i = 0, $$06879$i = 0, $$06976$i = 0, $$07078$i = 0, $$072127$i = 0, $$073128$i = 0, $$095180$i$i = 0, $$096179$i$i = 0, $$1 = 0, $$1155 = 0, $$1162 = f0, $$1162$1 = f0, $$1162$2 = f0, $$1162$3 = f0, $$1162$4 = f0, $$1162$5 = f0, $$1162$6 = f0, $$1162$7 = f0, $$1162$7$ph = f0, $$1164 = f0, $$1164$1 = f0, $$1164$2 = f0, $$1164$3 = f0, $$1164$4 = f0, $$1164$5 = f0, $$1164$6 = f0, $$1164$7 = f0, $$2 = f0, $$4$i$i = 0, $$494$i$i = 0, $$pre$phi$i$i$iZ2D = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i83$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi198$i$iZ2D = 0, $$pre$phi200$i$iZ2D = 0, $$pre$phi202$i$iZ2D = 0, $$pre154$i = 0, $$pre156$i = 0, $$sink$i = 0, $$sink$i$i = 0, $$sink$i$i$i = 0, $$sink$i$i$i$i = 0, $$sink$i$i109$i$i = 0, $$sink$i$i117$i$i = 0, $$sink$i$i124$i$i = 0, $10 = 0, $103 = f0, $105 = f0, $112 = 0, $114 = 0, $125 = 0, $127 = 0, $13 = 0, $131 = 0, $132 = 0, $134 = 0, $144 = 0, $145 = 0, $150 = 0, $154 = 0, $155 = 0, $158 = 0, $159 = f0, $161 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $189 = 0, $19 = 0, $190 = 0, $2 = 0, $20 = 0, $202 = 0, $206 = 0, $207 = 0, $208 = 0, $212 = 0, $214 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $220 = 0, $221 = 0, $223 = 0, $225 = 0, $227 = 0, $231 = 0, $232 = 0, $235 = 0, $237 = 0, $239 = 0, $240 = 0, $243 = 0, $244 = 0, $246 = 0, $253 = 0, $254 = 0, $261 = 0, $267 = 0, $268 = 0, $271 = 0, $273 = 0, $274 = 0, $277 = 0, $278 = 0, $282 = 0, $284 = 0, $287 = 0, $29 = 0, $292 = 0, $295 = 0, $296 = 0, $299 = 0, $3 = 0, $301 = 0, $303 = 0, $306 = 0, $307 = 0, $308 = 0, $31 = 0, $311 = 0, $312 = 0, $315 = 0, $317 = 0, $318 = 0, $321 = 0, $322 = 0, $324 = 0, $331 = 0, $332 = 0, $339 = 0, $345 = 0, $349 = 0, $351 = 0, $354 = 0, $358 = 0, $359 = 0, $362 = 0, $366 = f0, $370 = 0, $371 = 0, $374 = 0, $376 = 0, $379 = 0, $381 = f0, $384 = 0, $388 = 0, $390 = 0, $396 = 0, $399 = 0, $4 = 0, $404 = 0, $405 = f0, $407 = 0, $41 = 0, $411 = 0, $413 = 0, $416 = 0, $417 = 0, $420 = 0, $422 = 0, $425 = 0, $427 = f0, $43 = 0, $432 = 0, $433 = 0, $434 = 0, $437 = 0, $438 = 0, $440 = 0, $441 = 0, $45 = 0, $454 = 0, $456 = 0, $458 = 0, $459 = 0, $47 = 0, $472 = 0, $476 = 0, $486 = 0, $489 = 0, $491 = 0, $492 = 0, $496 = 0, $498 = 0, $501 = 0, $502 = 0, $505 = 0, $507 = 0, $510 = 0, $512 = f0, $517 = 0, $522 = 0, $528 = 0, $531 = 0, $537 = 0, $540 = 0, $546 = 0, $549 = 0, $555 = 0, $558 = 0, $56 = 0, $564 = 0, $567 = 0, $57 = 0, $573 = 0, $576 = 0, $58 = 0, $582 = 0, $585 = 0, $591 = 0, $592 = 0, $594 = 0, $596 = 0, $597 = f0, $60 = 0, $600 = f0, $604 = f0, $606 = f0, $61 = 0, $610 = f0, $612 = f0, $613 = 0, $614 = 0, $617 = f0, $618 = 0, $619 = f0, $621 = 0, $627 = 0, $63 = 0, $630 = 0, $631 = 0, $633 = 0, $636 = f0, $638 = 0, $639 = 0, $64 = 0, $642 = 0, $647 = 0, $649 = f0, $65 = 0, $651 = 0, $652 = 0, $654 = 0, $66 = 0, $662 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $671 = 0, $675 = 0, $679 = 0, $682 = 0, $685 = 0, $686 = 0, $687 = 0, $694 = 0, $698 = 0, $7 = 0, $703 = 0, $709 = 0, $714 = 0, $716 = f0, $718 = 0, $719 = 0, $722 = 0, $727 = 0, $729 = f0, $731 = 0, $732 = 0, $735 = 0, $740 = 0, $742 = f0, $744 = 0, $745 = 0, $748 = 0, $753 = 0, $755 = f0, $757 = 0, $758 = 0, $761 = 0, $766 = 0, $768 = f0, $770 = 0, $771 = 0, $774 = 0, $779 = 0, $781 = f0, $783 = 0, $784 = 0, $787 = 0, $79 = 0, $792 = 0, $794 = f0, $797 = 0, $798 = 0, $801 = 0, $802 = 0, $805 = 0, $806 = 0, $809 = 0, $81 = 0, $810 = 0, $813 = 0, $814 = 0, $817 = 0, $818 = 0, $82 = 0, $821 = f0, $823 = f0, $825 = 0, $827 = 0, $829 = f0, $83 = 0, $834 = 0, $837 = f0, $839 = f0, $84 = 0, $841 = 0, $843 = 0, $845 = f0, $850 = 0, $853 = f0, $855 = f0, $857 = 0, $859 = 0, $861 = f0, $866 = 0, $869 = f0, $871 = f0, $873 = 0, $875 = 0, $877 = f0, $882 = 0, $885 = f0, $887 = f0, $889 = 0, $891 = 0, $893 = f0, $898 = 0, $9 = 0, $901 = f0, $903 = f0, $905 = 0, $907 = 0, $909 = f0, $91 = 0, $912 = 0, $914 = 0, $917 = f0, $919 = f0, $921 = 0, $923 = 0, $925 = f0, $929 = 0, $930 = 0, $931 = 0, $94 = 0, $96 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer25 = 0, $vararg_buffer30 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer43 = 0, $vararg_buffer48 = 0, $vararg_buffer5 = 0, $vararg_buffer53 = 0, $vararg_buffer57 = 0, $vararg_buffer59 = 0, $vararg_buffer62 = 0, $vararg_buffer65 = 0, $vararg_buffer68 = 0, $vararg_buffer71 = 0, $vararg_buffer74 = 0, $vararg_buffer77 = 0, $vararg_buffer80 = 0, $vararg_buffer9 = 0, label = 0, sp = 0, $$06879$i$looptemp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 256 | 0;
$vararg_buffer80 = sp + 216 | 0;
$vararg_buffer77 = sp + 208 | 0;
$vararg_buffer74 = sp + 200 | 0;
$vararg_buffer71 = sp + 192 | 0;
$vararg_buffer68 = sp + 184 | 0;
$vararg_buffer65 = sp + 176 | 0;
$vararg_buffer62 = sp + 168 | 0;
$vararg_buffer59 = sp + 160 | 0;
$vararg_buffer57 = sp + 152 | 0;
$vararg_buffer53 = sp + 144 | 0;
$vararg_buffer48 = sp + 128 | 0;
$vararg_buffer43 = sp + 112 | 0;
$vararg_buffer38 = sp + 96 | 0;
$vararg_buffer35 = sp + 88 | 0;
$vararg_buffer30 = sp + 72 | 0;
$vararg_buffer25 = sp + 56 | 0;
$vararg_buffer20 = sp + 40 | 0;
$vararg_buffer17 = sp + 32 | 0;
$vararg_buffer13 = sp + 24 | 0;
$vararg_buffer9 = sp + 16 | 0;
$vararg_buffer5 = sp + 8 | 0;
$vararg_buffer = sp;
$2 = sp + 228 | 0;
$3 = sp + 224 | 0;
$4 = sp + 220 | 0;
$7 = __Z16convertGlossToIDP7HashAnyIPKcS1_E(HEAP32[$1 + 4 >> 2] | 0) | 0;
if (0) {
__Z5eputsPKc(31118);
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer >> 2] = $7;
__Z7eprintfPKcz(31121, $vararg_buffer);
}
$9 = $1 + 8 | 0;
$10 = HEAP32[$9 >> 2] | 0;
if (!$10) {
$$0$lcssa283 = 0;
$$0154$lcssa282 = 0;
label = 54;
} else {
$13 = HEAP32[$10 + 12 >> 2] | 0;
if (($13 | 0) > 0) {
$$0154211 = 0;
$$0156210 = 0;
$$0212 = 0;
$17 = $10;
while (1) {
$19 = HEAP32[(HEAP32[$17 >> 2] | 0) + ($$0156210 << 2) >> 2] | 0;
$20 = HEAP32[$19 >> 2] | 0;
if (!(_strcmp($20, 51313) | 0)) if (!$$0212) {
$$1 = $19;
$$1155 = $$0154211;
} else {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer5 >> 2] = HEAP32[$1 >> 2];
HEAP32[$vararg_buffer5 + 4 >> 2] = $7;
__Z7eprintfPKcz(31147, $vararg_buffer5);
__Z8BadSiGMLv();
$$1 = $$0212;
$$1155 = $$0154211;
} else if (!(_strcmp($20, 51613) | 0)) if (!$$0154211) {
$$1 = $$0212;
$$1155 = $19;
} else {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer9 >> 2] = HEAP32[$1 >> 2];
HEAP32[$vararg_buffer9 + 4 >> 2] = $7;
__Z7eprintfPKcz(31209, $vararg_buffer9);
__Z8BadSiGMLv();
$$1 = $$0212;
$$1155 = $$0154211;
} else {
$$1 = $$0212;
$$1155 = $$0154211;
}
$29 = $$0156210 + 1 | 0;
if (($29 | 0) == ($13 | 0)) break;
$$0154211 = $$1155;
$$0156210 = $29;
$$0212 = $$1;
$17 = HEAP32[$9 >> 2] | 0;
}
if (!$$1) {
$$0$lcssa283 = 0;
$$0154$lcssa282 = $$1155;
label = 54;
} else {
$31 = HEAP32[$$1 + 8 >> 2] | 0;
if (!$31) {
$$0$lcssa283 = $$1;
$$0154$lcssa282 = $$1155;
label = 54;
} else if ((HEAP32[$31 + 12 >> 2] | 0) > 0) if (!(_strcmp(HEAP32[HEAP32[HEAP32[$31 >> 2] >> 2] >> 2] | 0, 51313) | 0)) {
$41 = __Znwj(16) | 0;
HEAP32[$41 + 4 >> 2] = 10;
$43 = $41 + 12 | 0;
HEAP32[$43 >> 2] = 0;
HEAP32[$41 >> 2] = 0;
HEAP32[$41 + 8 >> 2] = 0;
$45 = $0 + 16 | 0;
__ZL25handle_nested_sign_manualPKcPK11HanimAvatarP13DynamicArrayPI7GestureEP7XMLCell($7, HEAP32[$45 >> 2] | 0, $41, $$1);
$47 = HEAP32[$45 >> 2] | 0;
if (!(HEAP32[$43 >> 2] | 0)) $57 = 1; else $57 = (HEAP8[(HEAP32[HEAP32[$41 >> 2] >> 2] | 0) + 13 >> 0] & 64) != 0;
$56 = __Znwj(52) | 0;
__THREW__ = 0;
invoke_viiii(7, $56 | 0, $7 | 0, $47 | 0, $57 | 0);
$58 = __THREW__;
__THREW__ = 0;
if ($58 & 1) {
$81 = ___cxa_find_matching_catch_2() | 0;
$82 = tempRet0;
__ZdlPv($56);
$$0$i = $81;
$$066$i = $82;
___resumeException($$0$i | 0);
}
$60 = __Znwj(580) | 0;
__THREW__ = 0;
invoke_viii(89, $60 | 0, 6, 5);
$61 = __THREW__;
__THREW__ = 0;
if ($61 & 1) {
$83 = ___cxa_find_matching_catch_2() | 0;
$84 = tempRet0;
__ZdlPv($60);
$$0$i = $83;
$$066$i = $84;
___resumeException($$0$i | 0);
}
$63 = $60 + 532 | 0;
HEAP32[$63 >> 2] = 10;
$64 = $60 + 540 | 0;
HEAP32[$64 >> 2] = 0;
$65 = $60 + 528 | 0;
HEAP32[$65 >> 2] = 0;
$66 = $60 + 536 | 0;
HEAP32[$66 >> 2] = 0;
HEAP32[$60 >> 2] = 3068;
HEAP16[$60 + 544 >> 1] = 0;
HEAPF32[$60 + 548 >> 2] = Math_fround(0.0);
HEAPF32[$60 + 552 >> 2] = Math_fround(0.0);
HEAP16[$60 + 556 >> 1] = 0;
HEAPF32[$60 + 576 >> 2] = Math_fround(0.0);
HEAP32[$60 + 564 >> 2] = 10;
HEAP32[$60 + 572 >> 2] = 0;
HEAP32[$60 + 560 >> 2] = 0;
HEAP32[$60 + 568 >> 2] = 0;
HEAP32[$56 + 44 >> 2] = $60;
if ((HEAP32[$43 >> 2] | 0) > 0) {
$79 = $60 + 40 | 0;
$$06879$i = 0;
$$07078$i = 0;
$91 = 0;
do {
$$06879$i$looptemp = $$06879$i;
$$06879$i = HEAP32[(HEAP32[(HEAP32[$41 >> 2] | 0) + ($$07078$i << 2) >> 2] | 0) + 44 >> 2] | 0;
if (($91 | 0) >= 0) {
if ((HEAP32[$66 >> 2] | 0) > ($91 | 0)) {
$$pre$phi$iZ2D = $91 + 1 | 0;
label = 31;
} else {
$94 = HEAP32[$63 >> 2] | 0;
$96 = $91 + 1 | 0;
__ZN13DynamicArrayPI13BasicMovementE6resizeEi($65, ($94 | 0) > ($91 | 0) ? $94 : $96 + ($91 >>> 1) | 0);
if ((HEAP32[$64 >> 2] | 0) <= ($91 | 0)) {
$$pre$phi$iZ2D = $96;
label = 31;
}
}
if ((label | 0) == 31) {
label = 0;
HEAP32[$64 >> 2] = $$pre$phi$iZ2D;
}
HEAP32[(HEAP32[$65 >> 2] | 0) + ($91 << 2) >> 2] = $$06879$i;
}
$103 = Math_fround(HEAPF32[$$06879$i + 40 >> 2]);
$105 = Math_fround($103 + Math_fround(HEAPF32[$79 >> 2]));
HEAPF32[$79 >> 2] = $105;
if ($$06879$i$looptemp | 0) FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$06879$i >> 2] | 0) + 40 >> 2] & 255]($$06879$i, $$06879$i$looptemp + 284 | 0);
$$07078$i = $$07078$i + 1 | 0;
$112 = HEAP32[$43 >> 2] | 0;
$91 = HEAP32[$64 >> 2] | 0;
} while (($$07078$i | 0) < ($112 | 0));
if (($91 | 0) > 0) {
$114 = HEAP32[$65 >> 2] | 0;
_memcpy($60 + 60 | 0, (HEAP32[$114 >> 2] | 0) + 60 | 0, 224) | 0;
if (($112 | 0) < 1 | ($91 | 0) < ($112 | 0)) $125 = 0; else $125 = HEAP32[$114 + ($112 + -1 << 2) >> 2] | 0;
_memcpy($60 + 284 | 0, $125 + 284 | 0, 224) | 0;
}
if (($112 | 0) > 0) {
$127 = $56 + 8 | 0;
$$06976$i = 0;
do {
$131 = (HEAP32[(HEAP32[$41 >> 2] | 0) + ($$06976$i << 2) >> 2] | 0) + 44 | 0;
$132 = HEAP32[$131 >> 2] | 0;
L59 : do if ($132 | 0) {
$$06775$i = $132;
L60 : while (1) {
$134 = $$06775$i + 4 | 0;
switch (HEAP32[$134 >> 2] | 0) {
case 9:
{
label = 46;
break L60;
break;
}
case 5:
case 6:
{
if ((HEAP32[$$06775$i + 540 >> 2] | 0) <= 0) break L59;
$$sink$i = HEAP32[$$06775$i + 528 >> 2] | 0;
break;
}
case 7:
{
$$sink$i = $$06775$i + 528 | 0;
break;
}
default:
{
label = 47;
break L60;
}
}
$145 = HEAP32[$$sink$i >> 2] | 0;
if (!$145) break L59; else $$06775$i = $145;
}
if ((label | 0) == 46) {
label = 0;
HEAP8[$$06775$i + 532 >> 0] = 1;
HEAP32[$131 >> 2] = 0;
break;
} else if ((label | 0) == 47) {
label = 0;
__Z7LogTimev() | 0;
$144 = HEAP32[$134 >> 2] | 0;
HEAP32[$vararg_buffer13 >> 2] = HEAP32[$127 >> 2];
HEAP32[$vararg_buffer13 + 4 >> 2] = $144;
__Z7eprintfPKcz(31274, $vararg_buffer13);
break;
}
} while (0);
$$06976$i = $$06976$i + 1 | 0;
} while (($$06976$i | 0) < (HEAP32[$43 >> 2] | 0));
}
}
HEAP32[$0 >> 2] = $56;
$150 = HEAP32[$41 >> 2] | 0;
if ($150 | 0) _free($150);
__ZdlPv($41);
$$0154$lcssa281 = $$1155;
$155 = HEAP32[$0 >> 2] | 0;
} else {
$$0$lcssa283 = $$1;
$$0154$lcssa282 = $$1155;
label = 54;
} else {
$$0$lcssa283 = $$1;
$$0154$lcssa282 = $$1155;
label = 54;
}
}
} else {
$$0$lcssa283 = 0;
$$0154$lcssa282 = 0;
label = 54;
}
}
if ((label | 0) == 54) {
$154 = __Z18handle_sign_manualPKcPK11HanimAvatarP7XMLCell($7, HEAP32[$0 + 16 >> 2] | 0, $$0$lcssa283) | 0;
HEAP32[$0 >> 2] = $154;
$$0154$lcssa281 = $$0154$lcssa282;
$155 = $154;
}
__ZL12ProcessSpeedP7XMLCellP7Gesture($1, $155);
do if ($$0154$lcssa281 | 0) {
$158 = HEAP32[$$0154$lcssa281 + 8 >> 2] | 0;
$159 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($$0154$lcssa281, 46688, Math_fround(1.0)));
if (!$155) $208 = HEAP32[12] | 0; else {
$161 = _malloc(32) | 0;
HEAP32[$161 >> 2] = 0;
HEAP32[$161 + 4 >> 2] = 0;
HEAP32[$161 + 8 >> 2] = 0;
HEAP32[$161 + 12 >> 2] = 0;
HEAP32[$161 + 16 >> 2] = 0;
HEAP32[$161 + 20 >> 2] = 0;
HEAP32[$161 + 24 >> 2] = 0;
HEAP32[$161 + 28 >> 2] = 0;
HEAP32[$155 + 48 >> 2] = $161;
$208 = $161;
}
$$pre156$i = $158 + 12 | 0;
if (0) {
HEAP32[$vararg_buffer17 >> 2] = HEAP32[$$pre156$i >> 2];
__Z7eprintfPKcz(31343, $vararg_buffer17);
}
L87 : do if ((HEAP32[$$pre156$i >> 2] | 0) > 0) {
$167 = $155 + 8 | 0;
$168 = $2 + 4 | 0;
$169 = $2 + 8 | 0;
$170 = $2 + 12 | 0;
$171 = $2 + 16 | 0;
$172 = $2 + 20 | 0;
$173 = $2 + 24 | 0;
$174 = $2 + 4 | 0;
$175 = $2 + 8 | 0;
$176 = $2 + 12 | 0;
$177 = $2 + 16 | 0;
$178 = $2 + 20 | 0;
$179 = $2 + 24 | 0;
$$073128$i = 0;
L89 : while (1) {
$183 = HEAP32[(HEAP32[$158 >> 2] | 0) + ($$073128$i << 2) >> 2] | 0;
$184 = HEAP32[$183 >> 2] | 0;
$185 = __ZN5SiGML14convertElementEPKc($184) | 0;
$186 = HEAP32[17822] | 0;
$189 = __ZN6KeyOpsIiE12hashFunctionEii($185, HEAP32[$186 + 4 >> 2] | 0) | 0;
$190 = HEAP32[$186 >> 2] | 0;
L91 : do if ((HEAP16[$190 + ($189 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i = HEAP32[$190 + ($189 << 3) >> 2] | 0;
if (!$$01215$i$i$i) label = 69; else {
$$01216$i$i$i = $$01215$i$i$i;
while (1) {
if (__ZN6KeyOpsIiE5eqkeyEii($185, HEAP32[$$01216$i$i$i >> 2] | 0) | 0) break;
$$012$i$i$i = HEAP32[$$01216$i$i$i + 8 >> 2] | 0;
if (!$$012$i$i$i) {
label = 69;
break L91;
} else $$01216$i$i$i = $$012$i$i$i;
}
$$sink$i$i$i = $$01216$i$i$i + 4 | 0;
}
} else label = 69; while (0);
if ((label | 0) == 69) {
label = 0;
$$sink$i$i$i = $186 + 20 | 0;
}
$202 = HEAP32[$$sink$i$i$i >> 2] | 0;
if (0) {
HEAP32[$vararg_buffer20 >> 2] = $$073128$i;
HEAP32[$vararg_buffer20 + 4 >> 2] = $202;
HEAP32[$vararg_buffer20 + 8 >> 2] = $184;
__Z7eprintfPKcz(31387, $vararg_buffer20);
}
L103 : do if (!$202) {
__Z7LogTimev() | 0;
$206 = HEAP32[$$0154$lcssa281 >> 2] | 0;
HEAP32[$vararg_buffer25 >> 2] = HEAP32[$167 >> 2];
HEAP32[$vararg_buffer25 + 4 >> 2] = $184;
HEAP32[$vararg_buffer25 + 8 >> 2] = $206;
__Z7eprintfPKcz(31443, $vararg_buffer25);
__Z11UnimplSiGMLv();
} else {
$207 = $208 + ($202 << 2) | 0;
if (HEAP32[$207 >> 2] | 0) {
__Z7LogTimev() | 0;
$212 = HEAP32[$$0154$lcssa281 >> 2] | 0;
HEAP32[$vararg_buffer30 >> 2] = HEAP32[$167 >> 2];
HEAP32[$vararg_buffer30 + 4 >> 2] = $184;
HEAP32[$vararg_buffer30 + 8 >> 2] = $212;
__Z7eprintfPKcz(31523, $vararg_buffer30);
__Z8BadSiGMLv();
break;
}
$214 = HEAP32[$183 + 8 >> 2] | 0;
$216 = HEAP32[$183 + 4 >> 2] | 0;
$217 = __Znwj(16) | 0;
$218 = $217 + 4 | 0;
HEAP32[$218 >> 2] = 10;
$219 = $217 + 12 | 0;
HEAP32[$219 >> 2] = 0;
$220 = $217 + 8 | 0;
HEAP32[$220 >> 2] = 1;
$221 = _malloc(4) | 0;
HEAP32[$217 >> 2] = $221;
if (!$221) {
label = 77;
break L89;
}
HEAP32[$221 >> 2] = 0;
$227 = $214 + 12 | 0;
do if ((HEAP32[$227 >> 2] | 0) > 0) {
$$095180$i$i = 0;
do {
$235 = HEAP32[(HEAP32[$214 >> 2] | 0) + ($$095180$i$i << 2) >> 2] | 0;
$237 = __ZN5SiGML14convertElementEPKc(HEAP32[$235 >> 2] | 0) | 0;
if (0) {
$239 = HEAP32[$235 >> 2] | 0;
HEAP32[$vararg_buffer38 >> 2] = $$095180$i$i;
HEAP32[$vararg_buffer38 + 4 >> 2] = $237;
HEAP32[$vararg_buffer38 + 8 >> 2] = $239;
__Z7eprintfPKcz(31596, $vararg_buffer38);
}
L117 : do switch ($237 | 0) {
case 58:
case 57:
case 55:
case 54:
case 53:
case 52:
case 51:
case 50:
case 49:
case 48:
case 47:
case 46:
{
HEAP32[$2 >> 2] = 0;
HEAP16[$168 >> 1] = -1;
HEAP32[$169 >> 2] = 0;
HEAPF32[$170 >> 2] = Math_fround(-1.0);
HEAPF32[$171 >> 2] = Math_fround(1.0);
HEAPF32[$172 >> 2] = Math_fround(1.0);
HEAPF32[$173 >> 2] = Math_fround(1.0);
$240 = HEAP32[17827] | 0;
__THREW__ = 0;
$243 = invoke_iii(28, $237 | 0, HEAP32[$240 + 4 >> 2] | 0) | 0;
$244 = __THREW__;
__THREW__ = 0;
if ($244 & 1) {
label = 108;
break L89;
}
$246 = HEAP32[$240 >> 2] | 0;
L121 : do if ((HEAP16[$246 + ($243 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i$i = HEAP32[$246 + ($243 << 3) >> 2] | 0;
if (!$$01215$i$i$i$i) {
label = 93;
break;
} else $$01216$i$i$i$i = $$01215$i$i$i$i;
while (1) {
__THREW__ = 0;
$253 = invoke_iii(29, $237 | 0, HEAP32[$$01216$i$i$i$i >> 2] | 0) | 0;
$254 = __THREW__;
__THREW__ = 0;
if ($254 & 1) {
label = 108;
break L89;
}
if ($253) break;
$$012$i$i$i$i = HEAP32[$$01216$i$i$i$i + 8 >> 2] | 0;
if (!$$012$i$i$i$i) {
label = 93;
break L121;
} else $$01216$i$i$i$i = $$012$i$i$i$i;
}
$$sink$i$i$i$i = $$01216$i$i$i$i + 4 | 0;
} else label = 93; while (0);
if ((label | 0) == 93) {
label = 0;
$$sink$i$i$i$i = $240 + 20 | 0;
}
__THREW__ = 0;
invoke_viii(90, $2 | 0, HEAP32[$$sink$i$i$i$i >> 2] | 0, $235 | 0);
$261 = __THREW__;
__THREW__ = 0;
if ($261 & 1) {
label = 108;
break L89;
}
do if ((HEAP32[$2 >> 2] | 0) != 0 | (HEAP16[$168 >> 1] | 0) != -1) {
__THREW__ = 0;
$267 = invoke_ii(20, 16) | 0;
$268 = __THREW__;
__THREW__ = 0;
if ($268 & 1) {
label = 108;
break L89;
}
HEAP32[$267 + 4 >> 2] = 10;
$271 = $267 + 12 | 0;
HEAP32[$271 >> 2] = 0;
HEAP32[$267 >> 2] = 0;
HEAP32[$267 + 8 >> 2] = 0;
$273 = $267;
__THREW__ = 0;
invoke_vii(153, $267 | 0, 10);
$274 = __THREW__;
__THREW__ = 0;
if ($274 & 1) {
label = 108;
break L89;
}
if ((HEAP32[$271 >> 2] | 0) <= 0) HEAP32[$271 >> 2] = 1;
$277 = HEAP32[$267 >> 2] | 0;
HEAP32[$277 >> 2] = HEAP32[$2 >> 2];
HEAP32[$277 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
HEAP32[$277 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
HEAP32[$277 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
HEAP32[$277 + 16 >> 2] = HEAP32[$2 + 16 >> 2];
HEAP32[$277 + 20 >> 2] = HEAP32[$2 + 20 >> 2];
HEAP32[$277 + 24 >> 2] = HEAP32[$2 + 24 >> 2];
$278 = HEAP32[$219 >> 2] | 0;
if (($278 | 0) < 0) break;
if ((HEAP32[$220 >> 2] | 0) > ($278 | 0)) {
$$pre$phi$i$iZ2D = $278 + 1 | 0;
label = 105;
} else {
$282 = HEAP32[$218 >> 2] | 0;
$284 = $278 + 1 | 0;
__THREW__ = 0;
invoke_vii(154, $217 | 0, (($282 | 0) > ($278 | 0) ? $282 : $284 + ($278 >>> 1) | 0) | 0);
$287 = __THREW__;
__THREW__ = 0;
if ($287 & 1) {
label = 108;
break L89;
}
if ((HEAP32[$219 >> 2] | 0) <= ($278 | 0)) {
$$pre$phi$i$iZ2D = $284;
label = 105;
}
}
if ((label | 0) == 105) {
label = 0;
HEAP32[$219 >> 2] = $$pre$phi$i$iZ2D;
}
HEAP32[(HEAP32[$217 >> 2] | 0) + ($278 << 2) >> 2] = $273;
} while (0);
break;
}
case 45:
case 44:
case 43:
case 42:
case 41:
case 40:
case 39:
{
$295 = HEAP32[$235 + 8 >> 2] | 0;
$296 = $295 + 12 | 0;
if (!(HEAP32[$296 >> 2] | 0)) break L117;
$299 = __Znwj(16) | 0;
__THREW__ = 0;
invoke_viii(91, $299 | 0, HEAP32[$296 >> 2] | 0, 0);
$301 = __THREW__;
__THREW__ = 0;
if ($301 & 1) {
label = 114;
break L89;
}
$303 = $299;
$306 = $299 + 12 | 0;
L151 : do if ((HEAP32[$296 >> 2] | 0) > 0) {
$307 = $299 + 8 | 0;
$308 = $299 + 4 | 0;
$$096179$i$i = 0;
while (1) {
$315 = HEAP32[(HEAP32[$295 >> 2] | 0) + ($$096179$i$i << 2) >> 2] | 0;
$317 = __ZN5SiGML14convertElementEPKc(HEAP32[$315 >> 2] | 0) | 0;
switch ($317 | 0) {
case 58:
case 57:
case 55:
case 54:
case 53:
case 52:
case 51:
case 50:
case 49:
case 48:
case 47:
case 46:
{
HEAP32[$2 >> 2] = 0;
HEAP16[$174 >> 1] = -1;
HEAP32[$175 >> 2] = 0;
HEAPF32[$176 >> 2] = Math_fround(-1.0);
HEAPF32[$177 >> 2] = Math_fround(1.0);
HEAPF32[$178 >> 2] = Math_fround(1.0);
HEAPF32[$179 >> 2] = Math_fround(1.0);
$318 = HEAP32[17827] | 0;
__THREW__ = 0;
$321 = invoke_iii(28, $317 | 0, HEAP32[$318 + 4 >> 2] | 0) | 0;
$322 = __THREW__;
__THREW__ = 0;
if ($322 & 1) {
label = 133;
break L89;
}
$324 = HEAP32[$318 >> 2] | 0;
L159 : do if ((HEAP16[$324 + ($321 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i119$i$i = HEAP32[$324 + ($321 << 3) >> 2] | 0;
if (!$$01215$i$i119$i$i) {
label = 123;
break;
} else $$01216$i$i120$i$i = $$01215$i$i119$i$i;
while (1) {
__THREW__ = 0;
$331 = invoke_iii(29, $317 | 0, HEAP32[$$01216$i$i120$i$i >> 2] | 0) | 0;
$332 = __THREW__;
__THREW__ = 0;
if ($332 & 1) {
label = 133;
break L89;
}
if ($331) break;
$$012$i$i122$i$i = HEAP32[$$01216$i$i120$i$i + 8 >> 2] | 0;
if (!$$012$i$i122$i$i) {
label = 123;
break L159;
} else $$01216$i$i120$i$i = $$012$i$i122$i$i;
}
$$sink$i$i124$i$i = $$01216$i$i120$i$i + 4 | 0;
} else label = 123; while (0);
if ((label | 0) == 123) {
label = 0;
$$sink$i$i124$i$i = $318 + 20 | 0;
}
__THREW__ = 0;
invoke_viii(90, $2 | 0, HEAP32[$$sink$i$i124$i$i >> 2] | 0, $315 | 0);
$339 = __THREW__;
__THREW__ = 0;
if ($339 & 1) {
label = 133;
break L89;
}
do if ((HEAP32[$2 >> 2] | 0) != 0 | (HEAP16[$174 >> 1] | 0) != -1) {
$345 = HEAP32[$306 >> 2] | 0;
if (($345 | 0) < 0) break;
if ((HEAP32[$307 >> 2] | 0) > ($345 | 0)) {
$$pre$phi202$i$iZ2D = $345 + 1 | 0;
label = 131;
} else {
$349 = HEAP32[$308 >> 2] | 0;
$351 = $345 + 1 | 0;
__THREW__ = 0;
invoke_vii(153, $299 | 0, (($349 | 0) > ($345 | 0) ? $349 : $351 + ($345 >>> 1) | 0) | 0);
$354 = __THREW__;
__THREW__ = 0;
if ($354 & 1) {
label = 133;
break L89;
}
if ((HEAP32[$306 >> 2] | 0) <= ($345 | 0)) {
$$pre$phi202$i$iZ2D = $351;
label = 131;
}
}
if ((label | 0) == 131) {
label = 0;
HEAP32[$306 >> 2] = $$pre$phi202$i$iZ2D;
}
$358 = (HEAP32[$299 >> 2] | 0) + ($345 * 28 | 0) | 0;
HEAP32[$358 >> 2] = HEAP32[$2 >> 2];
HEAP32[$358 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
HEAP32[$358 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
HEAP32[$358 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
HEAP32[$358 + 16 >> 2] = HEAP32[$2 + 16 >> 2];
HEAP32[$358 + 20 >> 2] = HEAP32[$2 + 20 >> 2];
HEAP32[$358 + 24 >> 2] = HEAP32[$2 + 24 >> 2];
} while (0);
break;
}
default:
{
__Z7LogTimev() | 0;
$362 = HEAP32[$235 >> 2] | 0;
HEAP32[$vararg_buffer43 >> 2] = HEAP32[$315 >> 2];
HEAP32[$vararg_buffer43 + 4 >> 2] = $317;
HEAP32[$vararg_buffer43 + 8 >> 2] = $362;
__Z7eprintfPKcz(31652, $vararg_buffer43);
__Z8BadSiGMLv();
}
}
$$096179$i$i = $$096179$i$i + 1 | 0;
if (($$096179$i$i | 0) >= (HEAP32[$296 >> 2] | 0)) break L151;
}
} while (0);
if ((HEAP32[$306 >> 2] | 0) <= 0) {
$396 = HEAP32[$299 >> 2] | 0;
if ($396 | 0) _free($396);
__ZdlPv($299);
break L117;
}
$366 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($235, 46688, Math_fround(1.0)));
do if (!($366 == Math_fround(1.0))) {
if ((HEAP32[$306 >> 2] | 0) <= 0) break;
$370 = $299 + 8 | 0;
$371 = $299 + 4 | 0;
$$010$i139$i$i = 0;
while (1) {
if ((HEAP32[$370 >> 2] | 0) > ($$010$i139$i$i | 0)) $$pre$phi200$i$iZ2D = $$010$i139$i$i + 1 | 0; else {
$374 = HEAP32[$371 >> 2] | 0;
$376 = $$010$i139$i$i + 1 | 0;
__ZN13DynamicArray1I15AtomicNonmanualE6resizeEi($299, ($374 | 0) > ($$010$i139$i$i | 0) ? $374 : $376 + ($$010$i139$i$i >>> 1) | 0);
$$pre$phi200$i$iZ2D = $376;
}
$379 = (HEAP32[$299 >> 2] | 0) + ($$010$i139$i$i * 28 | 0) + 24 | 0;
$381 = Math_fround($366 * Math_fround(HEAPF32[$379 >> 2]));
HEAPF32[$379 >> 2] = $381;
if (($$pre$phi200$i$iZ2D | 0) < (HEAP32[$306 >> 2] | 0)) $$010$i139$i$i = $$pre$phi200$i$iZ2D; else break;
}
} while (0);
$384 = HEAP32[$219 >> 2] | 0;
if (($384 | 0) < 0) break L117;
if ((HEAP32[$220 >> 2] | 0) > ($384 | 0)) {
$$pre$phi198$i$iZ2D = $384 + 1 | 0;
label = 148;
} else {
$388 = HEAP32[$218 >> 2] | 0;
$390 = $384 + 1 | 0;
__ZN13DynamicArray1IPS_I15AtomicNonmanualEE6resizeEi($217, ($388 | 0) > ($384 | 0) ? $388 : $390 + ($384 >>> 1) | 0);
if ((HEAP32[$219 >> 2] | 0) <= ($384 | 0)) {
$$pre$phi198$i$iZ2D = $390;
label = 148;
}
}
if ((label | 0) == 148) {
label = 0;
HEAP32[$219 >> 2] = $$pre$phi198$i$iZ2D;
}
HEAP32[(HEAP32[$217 >> 2] | 0) + ($384 << 2) >> 2] = $303;
break;
}
case 56:
break;
default:
{
__Z7LogTimev() | 0;
$399 = HEAP32[$183 >> 2] | 0;
HEAP32[$vararg_buffer48 >> 2] = HEAP32[$235 >> 2];
HEAP32[$vararg_buffer48 + 4 >> 2] = $237;
HEAP32[$vararg_buffer48 + 8 >> 2] = $399;
__Z7eprintfPKcz(31652, $vararg_buffer48);
__Z8BadSiGMLv();
}
} while (0);
$$095180$i$i = $$095180$i$i + 1 | 0;
} while (($$095180$i$i | 0) < (HEAP32[$227 >> 2] | 0));
if (!(HEAP32[$219 >> 2] | 0)) {
$$pre154$i = HEAP32[$217 >> 2] | 0;
if (!$$pre154$i) break; else {
$404 = $$pre154$i;
label = 156;
break;
}
}
$405 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($183, 46688, Math_fround(1.0)));
do if ($405 != Math_fround(1.0)) {
$407 = HEAP32[$219 >> 2] | 0;
if (($407 | 0) > 0) {
$$010$i$i$i = 0;
$930 = $407;
} else break;
while (1) {
$411 = HEAP32[(HEAP32[$217 >> 2] | 0) + ($$010$i$i$i << 2) >> 2] | 0;
do if (!$411) $432 = $930; else {
$413 = $411 + 12 | 0;
if ((HEAP32[$413 >> 2] | 0) <= 0) {
$432 = $930;
break;
}
$416 = $411 + 8 | 0;
$417 = $411 + 4 | 0;
$$010$i$i$i$i = 0;
while (1) {
if ((HEAP32[$416 >> 2] | 0) > ($$010$i$i$i$i | 0)) $$pre$phi$i$i$iZ2D = $$010$i$i$i$i + 1 | 0; else {
$420 = HEAP32[$417 >> 2] | 0;
$422 = $$010$i$i$i$i + 1 | 0;
__ZN13DynamicArray1I15AtomicNonmanualE6resizeEi($411, ($420 | 0) > ($$010$i$i$i$i | 0) ? $420 : $422 + ($$010$i$i$i$i >>> 1) | 0);
$$pre$phi$i$i$iZ2D = $422;
}
$425 = (HEAP32[$411 >> 2] | 0) + ($$010$i$i$i$i * 28 | 0) + 24 | 0;
$427 = Math_fround($405 * Math_fround(HEAPF32[$425 >> 2]));
HEAPF32[$425 >> 2] = $427;
if (($$pre$phi$i$i$iZ2D | 0) < (HEAP32[$413 >> 2] | 0)) $$010$i$i$i$i = $$pre$phi$i$i$iZ2D; else break;
}
$432 = HEAP32[$219 >> 2] | 0;
} while (0);
$$010$i$i$i = $$010$i$i$i + 1 | 0;
if (($$010$i$i$i | 0) >= ($432 | 0)) break; else $930 = $432;
}
} while (0);
$433 = __Znwj(28) | 0;
HEAP32[$433 >> 2] = 2136;
$434 = $433 + 4 | 0;
HEAP32[$433 + 20 >> 2] = 0;
HEAPF32[$433 + 24 >> 2] = Math_fround(0.0);
HEAP32[$434 >> 2] = 0;
HEAP32[$434 + 4 >> 2] = 0;
HEAP32[$434 + 8 >> 2] = 0;
HEAP8[$434 + 12 >> 0] = 0;
$437 = HEAP32[17768] | 0;
$438 = $216 + 4 | 0;
$440 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(52984, HEAP32[$438 >> 2] | 0) | 0;
$441 = HEAP32[$216 >> 2] | 0;
L227 : do if ((HEAP16[$441 + ($440 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i112$i$i = HEAP32[$441 + ($440 << 3) >> 2] | 0;
if (!$$01215$i$i112$i$i) {
label = 174;
break;
} else $$01216$i$i113$i$i = $$01215$i$i112$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(52984, HEAP32[$$01216$i$i113$i$i >> 2] | 0) | 0) break;
$$012$i$i115$i$i = HEAP32[$$01216$i$i113$i$i + 8 >> 2] | 0;
if (!$$012$i$i115$i$i) {
label = 174;
break L227;
} else $$01216$i$i113$i$i = $$012$i$i115$i$i;
}
$$sink$i$i117$i$i = $$01216$i$i113$i$i + 4 | 0;
} else label = 174; while (0);
if ((label | 0) == 174) {
label = 0;
$$sink$i$i117$i$i = $216 + 20 | 0;
}
$454 = __ZN5SiGML16convertAttributeEPK7HashAnyIPKciES2_($437, HEAP32[$$sink$i$i117$i$i >> 2] | 0) | 0;
HEAP32[$433 + 8 >> 2] = $454;
$456 = HEAP32[17769] | 0;
$458 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(52964, HEAP32[$438 >> 2] | 0) | 0;
$459 = HEAP32[$216 >> 2] | 0;
L236 : do if ((HEAP16[$459 + ($458 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i104$i$i = HEAP32[$459 + ($458 << 3) >> 2] | 0;
if (!$$01215$i$i104$i$i) {
label = 180;
break;
} else $$01216$i$i105$i$i = $$01215$i$i104$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(52964, HEAP32[$$01216$i$i105$i$i >> 2] | 0) | 0) break;
$$012$i$i107$i$i = HEAP32[$$01216$i$i105$i$i + 8 >> 2] | 0;
if (!$$012$i$i107$i$i) {
label = 180;
break L236;
} else $$01216$i$i105$i$i = $$012$i$i107$i$i;
}
$$sink$i$i109$i$i = $$01216$i$i105$i$i + 4 | 0;
} else label = 180; while (0);
if ((label | 0) == 180) {
label = 0;
$$sink$i$i109$i$i = $216 + 20 | 0;
}
$472 = __ZN5SiGML16convertAttributeEPK7HashAnyIPKciES2_($456, HEAP32[$$sink$i$i109$i$i >> 2] | 0) | 0;
HEAP32[$433 + 12 >> 2] = $472;
HEAP32[$434 >> 2] = $217;
HEAP32[$207 >> 2] = $433;
if (!0) break L103;
HEAP32[$vararg_buffer53 >> 2] = $202;
HEAP32[$vararg_buffer53 + 4 >> 2] = $433;
__Z7eprintfPKcz(31704, $vararg_buffer53);
$476 = HEAP32[$207 >> 2] | 0;
if (!$476) {
__Z5eputsPKc(61277);
break L103;
} else {
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$476 >> 2] | 0) + 8 >> 2] & 255]($476, HEAP32[16082] | 0);
break L103;
}
} else {
$404 = $221;
label = 156;
} while (0);
if ((label | 0) == 156) {
label = 0;
_free($404);
}
__ZdlPv($217);
HEAP32[$207 >> 2] = 0;
} while (0);
$$073128$i = $$073128$i + 1 | 0;
if (($$073128$i | 0) >= (HEAP32[$$pre156$i >> 2] | 0)) break L87;
}
if ((label | 0) == 77) {
__THREW__ = 0;
HEAP32[$vararg_buffer35 >> 2] = 1;
invoke_vii(115, 46957, $vararg_buffer35 | 0);
$223 = __THREW__;
__THREW__ = 0;
if (!($223 & 1)) {
HEAP32[$220 >> 2] = 0;
$225 = ___cxa_allocate_exception(4) | 0;
HEAP32[$225 >> 2] = 1;
__THREW__ = 0;
invoke_viii(75, $225 | 0, 32, 0);
__THREW__ = 0;
}
$231 = ___cxa_find_matching_catch_2() | 0;
$232 = tempRet0;
__ZdlPv($217);
$$4$i$i = $231;
$$494$i$i = $232;
___resumeException($$4$i$i | 0);
} else if ((label | 0) == 108) {
$292 = ___cxa_find_matching_catch_2() | 0;
$$4$i$i = $292;
$$494$i$i = tempRet0;
___resumeException($$4$i$i | 0);
} else if ((label | 0) == 114) {
$311 = ___cxa_find_matching_catch_2() | 0;
$312 = tempRet0;
__ZdlPv($299);
$$4$i$i = $311;
$$494$i$i = $312;
___resumeException($$4$i$i | 0);
} else if ((label | 0) == 133) {
$359 = ___cxa_find_matching_catch_2() | 0;
$$4$i$i = $359;
$$494$i$i = tempRet0;
___resumeException($$4$i$i | 0);
}
} while (0);
if ($159 != Math_fround(1.0)) {
$$072127$i = 0;
do {
$486 = HEAP32[$208 + ($$072127$i << 2) >> 2] | 0;
if ($486 | 0) {
$489 = HEAP32[$486 + 4 >> 2] | 0;
if ($489 | 0) {
$491 = $489 + 12 | 0;
$492 = HEAP32[$491 >> 2] | 0;
if (($492 | 0) > 0) {
$$010$i$i = 0;
$931 = $492;
while (1) {
$496 = HEAP32[(HEAP32[$489 >> 2] | 0) + ($$010$i$i << 2) >> 2] | 0;
if (!$496) $517 = $931; else {
$498 = $496 + 12 | 0;
if ((HEAP32[$498 >> 2] | 0) > 0) {
$501 = $496 + 8 | 0;
$502 = $496 + 4 | 0;
$$010$i$i78$i = 0;
while (1) {
if ((HEAP32[$501 >> 2] | 0) > ($$010$i$i78$i | 0)) $$pre$phi$i83$iZ2D = $$010$i$i78$i + 1 | 0; else {
$505 = HEAP32[$502 >> 2] | 0;
$507 = $$010$i$i78$i + 1 | 0;
__ZN13DynamicArray1I15AtomicNonmanualE6resizeEi($496, ($505 | 0) > ($$010$i$i78$i | 0) ? $505 : $507 + ($$010$i$i78$i >>> 1) | 0);
$$pre$phi$i83$iZ2D = $507;
}
$510 = (HEAP32[$496 >> 2] | 0) + ($$010$i$i78$i * 28 | 0) + 24 | 0;
$512 = Math_fround($159 * Math_fround(HEAPF32[$510 >> 2]));
HEAPF32[$510 >> 2] = $512;
if (($$pre$phi$i83$iZ2D | 0) < (HEAP32[$498 >> 2] | 0)) $$010$i$i78$i = $$pre$phi$i83$iZ2D; else break;
}
$517 = HEAP32[$491 >> 2] | 0;
} else $517 = $931;
}
$$010$i$i = $$010$i$i + 1 | 0;
if (($$010$i$i | 0) >= ($517 | 0)) break; else $931 = $517;
}
}
}
}
$$072127$i = $$072127$i + 1 | 0;
} while (($$072127$i | 0) != 8);
}
if (0) {
__Z7eprintfPKcz(31748, $vararg_buffer57);
do if (HEAP32[$208 >> 2] | 0) {
HEAP32[$vararg_buffer59 >> 2] = 0;
__Z7eprintfPKcz(31782, $vararg_buffer59);
$522 = HEAP32[$208 >> 2] | 0;
if (!$522) {
__Z5eputsPKc(61277);
break;
} else {
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$522 >> 2] | 0) + 8 >> 2] & 255]($522, HEAP32[16082] | 0);
break;
}
} while (0);
$528 = $208 + 4 | 0;
do if (HEAP32[$528 >> 2] | 0) {
HEAP32[$vararg_buffer62 >> 2] = 1;
__Z7eprintfPKcz(31782, $vararg_buffer62);
$531 = HEAP32[$528 >> 2] | 0;
if (!$531) {
__Z5eputsPKc(61277);
break;
} else {
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$531 >> 2] | 0) + 8 >> 2] & 255]($531, HEAP32[16082] | 0);
break;
}
} while (0);
$537 = $208 + 8 | 0;
do if (HEAP32[$537 >> 2] | 0) {
HEAP32[$vararg_buffer65 >> 2] = 2;
__Z7eprintfPKcz(31782, $vararg_buffer65);
$540 = HEAP32[$537 >> 2] | 0;
if (!$540) {
__Z5eputsPKc(61277);
break;
} else {
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$540 >> 2] | 0) + 8 >> 2] & 255]($540, HEAP32[16082] | 0);
break;
}
} while (0);
$546 = $208 + 12 | 0;
do if (HEAP32[$546 >> 2] | 0) {
HEAP32[$vararg_buffer68 >> 2] = 3;
__Z7eprintfPKcz(31782, $vararg_buffer68);
$549 = HEAP32[$546 >> 2] | 0;
if (!$549) {
__Z5eputsPKc(61277);
break;
} else {
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$549 >> 2] | 0) + 8 >> 2] & 255]($549, HEAP32[16082] | 0);
break;
}
} while (0);
$555 = $208 + 16 | 0;
do if (HEAP32[$555 >> 2] | 0) {
HEAP32[$vararg_buffer71 >> 2] = 4;
__Z7eprintfPKcz(31782, $vararg_buffer71);
$558 = HEAP32[$555 >> 2] | 0;
if (!$558) {
__Z5eputsPKc(61277);
break;
} else {
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$558 >> 2] | 0) + 8 >> 2] & 255]($558, HEAP32[16082] | 0);
break;
}
} while (0);
$564 = $208 + 20 | 0;
do if (HEAP32[$564 >> 2] | 0) {
HEAP32[$vararg_buffer74 >> 2] = 5;
__Z7eprintfPKcz(31782, $vararg_buffer74);
$567 = HEAP32[$564 >> 2] | 0;
if (!$567) {
__Z5eputsPKc(61277);
break;
} else {
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$567 >> 2] | 0) + 8 >> 2] & 255]($567, HEAP32[16082] | 0);
break;
}
} while (0);
$573 = $208 + 24 | 0;
do if (HEAP32[$573 >> 2] | 0) {
HEAP32[$vararg_buffer77 >> 2] = 6;
__Z7eprintfPKcz(31782, $vararg_buffer77);
$576 = HEAP32[$573 >> 2] | 0;
if (!$576) {
__Z5eputsPKc(61277);
break;
} else {
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$576 >> 2] | 0) + 8 >> 2] & 255]($576, HEAP32[16082] | 0);
break;
}
} while (0);
$582 = $208 + 28 | 0;
if (HEAP32[$582 >> 2] | 0) {
HEAP32[$vararg_buffer80 >> 2] = 7;
__Z7eprintfPKcz(31782, $vararg_buffer80);
$585 = HEAP32[$582 >> 2] | 0;
if (!$585) {
__Z5eputsPKc(61277);
break;
} else {
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$585 >> 2] | 0) + 8 >> 2] & 255]($585, HEAP32[16082] | 0);
break;
}
}
}
} while (0);
$591 = $155 + 48 | 0;
$592 = HEAP32[$591 >> 2] | 0;
do if ($592 | 0) {
$594 = HEAP32[$592 >> 2] | 0;
if (!$594) {
$$1162 = Math_fround(0.0);
$$1164 = Math_fround(0.0);
} else {
__ZN17NonmanualMovement24setAvatarDependentValuesEv($594);
$617 = Math_fround(HEAPF32[$594 + 24 >> 2]);
$618 = $617 < Math_fround(0.0);
$619 = $618 ? Math_fround(0.0) : $617;
$621 = HEAP32[$594 + 20 >> 2] | 0;
if (!$621) {
$$1162 = Math_fround(0.0);
$$1164 = $619;
} else {
$$1162 = Math_fround(HEAPF32[$621 + 8 >> 2]);
$$1164 = $619;
}
}
$627 = HEAP32[(HEAP32[$591 >> 2] | 0) + 4 >> 2] | 0;
if (!$627) {
$$1162$1 = $$1162;
$$1164$1 = $$1164;
} else {
__ZN17NonmanualMovement24setAvatarDependentValuesEv($627);
$821 = Math_fround(HEAPF32[$627 + 24 >> 2]);
$823 = $$1164 > $821 ? $$1164 : $821;
$825 = HEAP32[$627 + 20 >> 2] | 0;
if (!$825) {
$$1162$1 = $$1162;
$$1164$1 = $823;
} else {
$827 = $$1162 == Math_fround(0.0);
$829 = Math_fround(HEAPF32[$825 + 8 >> 2]);
if ($827) {
$$1162$1 = $829;
$$1164$1 = $823;
} else {
$$1162$1 = $$1162 < $829 ? $$1162 : $829;
$$1164$1 = $823;
}
}
}
$834 = HEAP32[(HEAP32[$591 >> 2] | 0) + 8 >> 2] | 0;
if (!$834) {
$$1162$2 = $$1162$1;
$$1164$2 = $$1164$1;
} else {
__ZN17NonmanualMovement24setAvatarDependentValuesEv($834);
$837 = Math_fround(HEAPF32[$834 + 24 >> 2]);
$839 = $$1164$1 > $837 ? $$1164$1 : $837;
$841 = HEAP32[$834 + 20 >> 2] | 0;
if (!$841) {
$$1162$2 = $$1162$1;
$$1164$2 = $839;
} else {
$843 = $$1162$1 == Math_fround(0.0);
$845 = Math_fround(HEAPF32[$841 + 8 >> 2]);
if ($843) {
$$1162$2 = $845;
$$1164$2 = $839;
} else {
$$1162$2 = $$1162$1 < $845 ? $$1162$1 : $845;
$$1164$2 = $839;
}
}
}
$850 = HEAP32[(HEAP32[$591 >> 2] | 0) + 12 >> 2] | 0;
if (!$850) {
$$1162$3 = $$1162$2;
$$1164$3 = $$1164$2;
} else {
__ZN17NonmanualMovement24setAvatarDependentValuesEv($850);
$853 = Math_fround(HEAPF32[$850 + 24 >> 2]);
$855 = $$1164$2 > $853 ? $$1164$2 : $853;
$857 = HEAP32[$850 + 20 >> 2] | 0;
if (!$857) {
$$1162$3 = $$1162$2;
$$1164$3 = $855;
} else {
$859 = $$1162$2 == Math_fround(0.0);
$861 = Math_fround(HEAPF32[$857 + 8 >> 2]);
if ($859) {
$$1162$3 = $861;
$$1164$3 = $855;
} else {
$$1162$3 = $$1162$2 < $861 ? $$1162$2 : $861;
$$1164$3 = $855;
}
}
}
$866 = HEAP32[(HEAP32[$591 >> 2] | 0) + 16 >> 2] | 0;
if (!$866) {
$$1162$4 = $$1162$3;
$$1164$4 = $$1164$3;
} else {
__ZN17NonmanualMovement24setAvatarDependentValuesEv($866);
$869 = Math_fround(HEAPF32[$866 + 24 >> 2]);
$871 = $$1164$3 > $869 ? $$1164$3 : $869;
$873 = HEAP32[$866 + 20 >> 2] | 0;
if (!$873) {
$$1162$4 = $$1162$3;
$$1164$4 = $871;
} else {
$875 = $$1162$3 == Math_fround(0.0);
$877 = Math_fround(HEAPF32[$873 + 8 >> 2]);
if ($875) {
$$1162$4 = $877;
$$1164$4 = $871;
} else {
$$1162$4 = $$1162$3 < $877 ? $$1162$3 : $877;
$$1164$4 = $871;
}
}
}
$882 = HEAP32[(HEAP32[$591 >> 2] | 0) + 20 >> 2] | 0;
if (!$882) {
$$1162$5 = $$1162$4;
$$1164$5 = $$1164$4;
} else {
__ZN17NonmanualMovement24setAvatarDependentValuesEv($882);
$885 = Math_fround(HEAPF32[$882 + 24 >> 2]);
$887 = $$1164$4 > $885 ? $$1164$4 : $885;
$889 = HEAP32[$882 + 20 >> 2] | 0;
if (!$889) {
$$1162$5 = $$1162$4;
$$1164$5 = $887;
} else {
$891 = $$1162$4 == Math_fround(0.0);
$893 = Math_fround(HEAPF32[$889 + 8 >> 2]);
if ($891) {
$$1162$5 = $893;
$$1164$5 = $887;
} else {
$$1162$5 = $$1162$4 < $893 ? $$1162$4 : $893;
$$1164$5 = $887;
}
}
}
$898 = HEAP32[(HEAP32[$591 >> 2] | 0) + 24 >> 2] | 0;
if (!$898) {
$$1162$6 = $$1162$5;
$$1164$6 = $$1164$5;
} else {
__ZN17NonmanualMovement24setAvatarDependentValuesEv($898);
$901 = Math_fround(HEAPF32[$898 + 24 >> 2]);
$903 = $$1164$5 > $901 ? $$1164$5 : $901;
$905 = HEAP32[$898 + 20 >> 2] | 0;
if (!$905) {
$$1162$6 = $$1162$5;
$$1164$6 = $903;
} else {
$907 = $$1162$5 == Math_fround(0.0);
$909 = Math_fround(HEAPF32[$905 + 8 >> 2]);
if ($907) {
$$1162$6 = $909;
$$1164$6 = $903;
} else {
$$1162$6 = $$1162$5 < $909 ? $$1162$5 : $909;
$$1164$6 = $903;
}
}
}
$912 = HEAP32[$591 >> 2] | 0;
$914 = HEAP32[$912 + 28 >> 2] | 0;
if (!$914) {
$$1162$7 = $$1162$6;
$$1164$7 = $$1164$6;
$929 = $912;
} else {
__ZN17NonmanualMovement24setAvatarDependentValuesEv($914);
$917 = Math_fround(HEAPF32[$914 + 24 >> 2]);
$919 = $$1164$6 > $917 ? $$1164$6 : $917;
$921 = HEAP32[$914 + 20 >> 2] | 0;
if (!$921) $$1162$7$ph = $$1162$6; else {
$923 = $$1162$6 == Math_fround(0.0);
$925 = Math_fround(HEAPF32[$921 + 8 >> 2]);
if ($923) $$1162$7$ph = $925; else $$1162$7$ph = $$1162$6 < $925 ? $$1162$6 : $925;
}
$$1162$7 = $$1162$7$ph;
$$1164$7 = $919;
$929 = HEAP32[$591 >> 2] | 0;
}
HEAPF32[$2 >> 2] = Math_fround(-1.0);
if (!$929) {} else {
$596 = __ZN7XMLCell11attrib_REALERfPKc($1, $2, 51282) | 0;
$597 = Math_fround(HEAPF32[$2 >> 2]);
if ($596 & $597 > Math_fround(0.0)) {
HEAPF32[$3 >> 2] = Math_fround(1.0);
HEAPF32[$4 >> 2] = Math_fround(1.0);
if (__ZN7XMLCell11attrib_REALERfPKc($1, $3, 51301) | 0) {
$600 = Math_fround(HEAPF32[$3 >> 2]);
if ($600 > Math_fround(0.0) & $600 != Math_fround(1.0)) {
$604 = Math_fround(Math_fround(HEAPF32[$2 >> 2]) / $600);
HEAPF32[$2 >> 2] = $604;
}
}
do if (__ZN7XMLCell11attrib_REALERfPKc($1, $4, 51291) | 0) {
$606 = Math_fround(HEAPF32[$4 >> 2]);
if (!($606 > Math_fround(0.0) & $606 != Math_fround(1.0))) break;
$610 = Math_fround($606 * Math_fround(HEAPF32[$2 >> 2]));
HEAPF32[$2 >> 2] = $610;
} while (0);
$612 = Math_fround(HEAPF32[$2 >> 2]);
} else $612 = $597;
if ($612 > Math_fround(0.0)) {
$613 = HEAP32[$591 >> 2] | 0;
$614 = HEAP32[$613 >> 2] | 0;
if (!$614) $630 = $613; else {
__ZN17NonmanualMovement11setDurationEfb($614, $612, 1);
$630 = HEAP32[$591 >> 2] | 0;
}
$631 = HEAP32[$630 + 4 >> 2] | 0;
if (!$631) $797 = $630; else {
__ZN17NonmanualMovement11setDurationEfb($631, $612, 1);
$797 = HEAP32[$591 >> 2] | 0;
}
$798 = HEAP32[$797 + 8 >> 2] | 0;
if (!$798) $801 = $797; else {
__ZN17NonmanualMovement11setDurationEfb($798, $612, 1);
$801 = HEAP32[$591 >> 2] | 0;
}
$802 = HEAP32[$801 + 12 >> 2] | 0;
if (!$802) $805 = $801; else {
__ZN17NonmanualMovement11setDurationEfb($802, $612, 1);
$805 = HEAP32[$591 >> 2] | 0;
}
$806 = HEAP32[$805 + 16 >> 2] | 0;
if (!$806) $809 = $805; else {
__ZN17NonmanualMovement11setDurationEfb($806, $612, 1);
$809 = HEAP32[$591 >> 2] | 0;
}
$810 = HEAP32[$809 + 20 >> 2] | 0;
if (!$810) $813 = $809; else {
__ZN17NonmanualMovement11setDurationEfb($810, $612, 1);
$813 = HEAP32[$591 >> 2] | 0;
}
$814 = HEAP32[$813 + 24 >> 2] | 0;
if (!$814) $817 = $813; else {
__ZN17NonmanualMovement11setDurationEfb($814, $612, 1);
$817 = HEAP32[$591 >> 2] | 0;
}
$818 = HEAP32[$817 + 28 >> 2] | 0;
if (!$818) break;
__ZN17NonmanualMovement11setDurationEfb($818, $612, 1);
break;
}
}
$633 = $155 + 44 | 0;
$636 = Math_fround(Math_fround(__Z18InitialPostureTimePK13BasicMovement(HEAP32[$633 >> 2] | 0)) - $$1162$7);
if ($636 > Math_fround(0.0)) {
$638 = HEAP32[$591 >> 2] | 0;
$639 = HEAP32[$638 >> 2] | 0;
if (!$639) $651 = $638; else {
$642 = HEAP32[$639 + 20 >> 2] | 0;
if ($642 | 0) FUNCTION_TABLE_vif[HEAP32[(HEAP32[$642 >> 2] | 0) + 36 >> 2] & 63]($642, $636);
$647 = $639 + 24 | 0;
$649 = Math_fround($636 + Math_fround(HEAPF32[$647 >> 2]));
HEAPF32[$647 >> 2] = $649;
$651 = HEAP32[$591 >> 2] | 0;
}
$652 = HEAP32[$651 + 4 >> 2] | 0;
if (!$652) $718 = $651; else {
$709 = HEAP32[$652 + 20 >> 2] | 0;
if ($709 | 0) FUNCTION_TABLE_vif[HEAP32[(HEAP32[$709 >> 2] | 0) + 36 >> 2] & 63]($709, $636);
$714 = $652 + 24 | 0;
$716 = Math_fround($636 + Math_fround(HEAPF32[$714 >> 2]));
HEAPF32[$714 >> 2] = $716;
$718 = HEAP32[$591 >> 2] | 0;
}
$719 = HEAP32[$718 + 8 >> 2] | 0;
if (!$719) $731 = $718; else {
$722 = HEAP32[$719 + 20 >> 2] | 0;
if ($722 | 0) FUNCTION_TABLE_vif[HEAP32[(HEAP32[$722 >> 2] | 0) + 36 >> 2] & 63]($722, $636);
$727 = $719 + 24 | 0;
$729 = Math_fround($636 + Math_fround(HEAPF32[$727 >> 2]));
HEAPF32[$727 >> 2] = $729;
$731 = HEAP32[$591 >> 2] | 0;
}
$732 = HEAP32[$731 + 12 >> 2] | 0;
if (!$732) $744 = $731; else {
$735 = HEAP32[$732 + 20 >> 2] | 0;
if ($735 | 0) FUNCTION_TABLE_vif[HEAP32[(HEAP32[$735 >> 2] | 0) + 36 >> 2] & 63]($735, $636);
$740 = $732 + 24 | 0;
$742 = Math_fround($636 + Math_fround(HEAPF32[$740 >> 2]));
HEAPF32[$740 >> 2] = $742;
$744 = HEAP32[$591 >> 2] | 0;
}
$745 = HEAP32[$744 + 16 >> 2] | 0;
if (!$745) $757 = $744; else {
$748 = HEAP32[$745 + 20 >> 2] | 0;
if ($748 | 0) FUNCTION_TABLE_vif[HEAP32[(HEAP32[$748 >> 2] | 0) + 36 >> 2] & 63]($748, $636);
$753 = $745 + 24 | 0;
$755 = Math_fround($636 + Math_fround(HEAPF32[$753 >> 2]));
HEAPF32[$753 >> 2] = $755;
$757 = HEAP32[$591 >> 2] | 0;
}
$758 = HEAP32[$757 + 20 >> 2] | 0;
if (!$758) $770 = $757; else {
$761 = HEAP32[$758 + 20 >> 2] | 0;
if ($761 | 0) FUNCTION_TABLE_vif[HEAP32[(HEAP32[$761 >> 2] | 0) + 36 >> 2] & 63]($761, $636);
$766 = $758 + 24 | 0;
$768 = Math_fround($636 + Math_fround(HEAPF32[$766 >> 2]));
HEAPF32[$766 >> 2] = $768;
$770 = HEAP32[$591 >> 2] | 0;
}
$771 = HEAP32[$770 + 24 >> 2] | 0;
if (!$771) $783 = $770; else {
$774 = HEAP32[$771 + 20 >> 2] | 0;
if ($774 | 0) FUNCTION_TABLE_vif[HEAP32[(HEAP32[$774 >> 2] | 0) + 36 >> 2] & 63]($774, $636);
$779 = $771 + 24 | 0;
$781 = Math_fround($636 + Math_fround(HEAPF32[$779 >> 2]));
HEAPF32[$779 >> 2] = $781;
$783 = HEAP32[$591 >> 2] | 0;
}
$784 = HEAP32[$783 + 28 >> 2] | 0;
if ($784 | 0) {
$787 = HEAP32[$784 + 20 >> 2] | 0;
if ($787 | 0) FUNCTION_TABLE_vif[HEAP32[(HEAP32[$787 >> 2] | 0) + 36 >> 2] & 63]($787, $636);
$792 = $784 + 24 | 0;
$794 = Math_fround($636 + Math_fround(HEAPF32[$792 >> 2]));
HEAPF32[$792 >> 2] = $794;
}
$$2 = Math_fround($$1164$7 + $636);
} else $$2 = $$1164$7;
$654 = HEAP32[$633 >> 2] | 0;
if ($$2 > Math_fround(HEAPF32[$654 + 40 >> 2])) FUNCTION_TABLE_vifi[HEAP32[(HEAP32[$654 >> 2] | 0) + 64 >> 2] & 7]($654, $$2, 0);
} while (0);
__Z12SpliceMorphsP7Gesture($155);
$662 = HEAP32[$0 + 4 >> 2] | 0;
if ($662 | 0) {
$666 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($7, HEAP32[$662 + 4 >> 2] | 0) | 0;
$667 = HEAP32[$662 >> 2] | 0;
$668 = $667 + ($666 << 3) | 0;
$669 = $667 + ($666 << 3) + 4 | 0;
switch (HEAP16[$669 >> 1] | 0) {
case 0:
{
$671 = __Znwj(12) | 0;
HEAP32[$671 >> 2] = $7;
HEAP32[$671 + 4 >> 2] = $155;
HEAP32[$671 + 8 >> 2] = 0;
HEAP32[$668 >> 2] = $671;
$675 = $662 + 12 | 0;
HEAP32[$675 >> 2] = (HEAP32[$675 >> 2] | 0) + -1;
$$sink$i$i = $662 + 16 | 0;
break;
}
case 1:
{
$679 = $662 + 16 | 0;
HEAP32[$679 >> 2] = (HEAP32[$679 >> 2] | 0) + -1;
label = 264;
break;
}
default:
label = 264;
}
if ((label | 0) == 264) {
$682 = HEAP32[$668 >> 2] | 0;
$685 = __Znwj(12) | 0;
$686 = $682 + 8 | 0;
$687 = HEAP32[$686 >> 2] | 0;
HEAP32[$685 >> 2] = $7;
HEAP32[$685 + 4 >> 2] = $155;
HEAP32[$685 + 8 >> 2] = $687;
HEAP32[$686 >> 2] = $685;
$$sink$i$i = $662 + 8 | 0;
}
HEAP32[$$sink$i$i >> 2] = (HEAP32[$$sink$i$i >> 2] | 0) + 1;
HEAP16[$669 >> 1] = (HEAP16[$669 >> 1] | 0) + 1 << 16 >> 16;
$694 = $662 + 24 | 0;
HEAP32[$694 >> 2] = (HEAP32[$694 >> 2] | 0) + 1;
}
$698 = HEAP32[$0 + 12 >> 2] | 0;
if (!$698) {
STACKTOP = sp;
return;
}
if (HEAP8[$155 + 12 >> 0] | 0) {
__Z14AppendPlayItemP13DynamicArrayPI7GestureEPS0_($698, $155);
STACKTOP = sp;
return;
}
__Z11FailedSiGMLv();
$703 = HEAP32[16637] | 0;
if (!$703) {
STACKTOP = sp;
return;
}
if (!(HEAP8[$703 + 12 >> 0] | 0)) {
STACKTOP = sp;
return;
}
__Z14AppendPlayItemP13DynamicArrayPI7GestureEPS0_($698, $703);
STACKTOP = sp;
return;
}
function _doContent($0, $1, $2, $3, $4, $5, $6) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
$6 = $6 | 0;
var $$$i = 0, $$0$i541 = 0, $$0$lcssa$i155$i = 0, $$0$ph$i = 0, $$0$ph$i462 = 0, $$0$ph$i466 = 0, $$0$ph$i470 = 0, $$0$ph$i474 = 0, $$0$ph$i480 = 0, $$0$ph$i485 = 0, $$0$ph$i500 = 0, $$0$ph$i512 = 0, $$0$ph$i517 = 0, $$0$ph$i522 = 0, $$0$ph$i527 = 0, $$0$ph$i532 = 0, $$0$ph$i537 = 0, $$0103150$i = 0, $$0146189$i = 0, $$018$i = 0, $$018$i506 = 0, $$024$ph$i = 0, $$024$ph$i461 = 0, $$024$ph$i465 = 0, $$024$ph$i469 = 0, $$024$ph$i473 = 0, $$024$ph$i479 = 0, $$024$ph$i484 = 0, $$024$ph$i499 = 0, $$024$ph$i511 = 0, $$024$ph$i516 = 0, $$024$ph$i521 = 0, $$024$ph$i526 = 0, $$024$ph$i531 = 0, $$024$ph$i536 = 0, $$034$i153$i = 0, $$0437 = 0, $$0438 = 0, $$0452$lcssa = 0, $$0452714 = 0, $$0455716 = 0, $$0456713 = 0, $$0457 = 0, $$0458 = 0, $$048$i = 0, $$05$i152$i = 0, $$057$i$i = 0, $$08$i$i = 0, $$089141$i = 0, $$096142$i = 0, $$098147$i = 0, $$104$i = 0, $$1139190$i = 0, $$1147$i = 0, $$14$ph = 0, $$1453 = 0, $$1453715 = 0, $$1453717 = 0, $$191$i = 0, $$2454 = 0, $$292$ph$i = 0, $$4$i = 0, $$4$ph550 = 0, $$494$ph$i = 0, $$8$ph = 0, $$9$ph = 0, $$in = 0, $$in$i = 0, $$in$i$phi = 0, $$in$i505 = 0, $$in$i505$phi = 0, $$lcssa130$i = 0, $$lcssa594 = 0, $$pre$phi769Z2D = 0, $$pre$phi771Z2D = 0, $$pre$phi775Z2D = 0, $$pre$phi777Z2D = 0, $$pre$phiZ2D = 0, $$pre185$i = 0, $$pre186$i = 0, $$pre188$i = 0, $$pre190$i = 0, $$sroa$0$0$i = 0, $$sroa$0$0$ph$i = 0, $$sroa$0$1$i = 0, $$sroa$0$3$i = 0, $$sroa$0$3$ph$i = 0, $$sroa$0$4$i = 0, $10 = 0, $1000 = 0, $1005 = 0, $1013 = 0, $1029 = 0, $1031 = 0, $1036 = 0, $1044 = 0, $1054 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $1060 = 0, $1061 = 0, $11 = 0, $118 = 0, $12 = 0, $123 = 0, $125 = 0, $128 = 0, $13 = 0, $130 = 0, $131 = 0, $136 = 0, $14 = 0, $144 = 0, $15 = 0, $156 = 0, $160 = 0, $173 = 0, $179 = 0, $180 = 0, $182 = 0, $183 = 0, $185 = 0, $19 = 0, $190 = 0, $191 = 0, $194 = 0, $195 = 0, $196 = 0, $198 = 0, $20 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $208 = 0, $21 = 0, $22 = 0, $222 = 0, $238 = 0, $24 = 0, $241 = 0, $243 = 0, $244 = 0, $249 = 0, $25 = 0, $257 = 0, $26 = 0, $268 = 0, $27 = 0, $274 = 0, $279 = 0, $28 = 0, $283 = 0, $285 = 0, $286 = 0, $29 = 0, $291 = 0, $299 = 0, $30 = 0, $31 = 0, $310 = 0, $315 = 0, $317 = 0, $319 = 0, $32 = 0, $325 = 0, $328 = 0, $33 = 0, $331 = 0, $333 = 0, $34 = 0, $344 = 0, $345 = 0, $348 = 0, $35 = 0, $354 = 0, $36 = 0, $362 = 0, $37 = 0, $371 = 0, $373 = 0, $377 = 0, $38 = 0, $380 = 0, $383 = 0, $385 = 0, $389 = 0, $39 = 0, $395 = 0, $396 = 0, $397 = 0, $399 = 0, $40 = 0, $401 = 0, $405 = 0, $406 = 0, $41 = 0, $410 = 0, $412 = 0, $416 = 0, $42 = 0, $424 = 0, $43 = 0, $433 = 0, $435 = 0, $436 = 0, $438 = 0, $44 = 0, $441 = 0, $444 = 0, $45 = 0, $450 = 0, $456 = 0, $457 = 0, $458 = 0, $46 = 0, $460 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $471 = 0, $477 = 0, $478 = 0, $48 = 0, $49 = 0, $491 = 0, $493 = 0, $494 = 0, $499 = 0, $50 = 0, $507 = 0, $51 = 0, $518 = 0, $52 = 0, $522 = 0, $525 = 0, $53 = 0, $532 = 0, $534 = 0, $539 = 0, $54 = 0, $540 = 0, $542 = 0, $543 = 0, $546 = 0, $548 = 0, $549 = 0, $55 = 0, $552 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $56 = 0, $563 = 0, $564 = 0, $566 = 0, $567 = 0, $569 = 0, $57 = 0, $571 = 0, $574 = 0, $576 = 0, $577 = 0, $58 = 0, $582 = 0, $584 = 0, $586 = 0, $59 = 0, $591 = 0, $593 = 0, $594 = 0, $599 = 0, $60 = 0, $607 = 0, $61 = 0, $618 = 0, $62 = 0, $621 = 0, $624 = 0, $628 = 0, $63 = 0, $631 = 0, $64 = 0, $644 = 0, $65 = 0, $650 = 0, $651 = 0, $655 = 0, $658 = 0, $66 = 0, $663 = 0, $67 = 0, $670 = 0, $672 = 0, $674 = 0, $675 = 0, $680 = 0, $688 = 0, $69 = 0, $699 = 0, $7 = 0, $70 = 0, $702 = 0, $705 = 0, $707 = 0, $709 = 0, $71 = 0, $713 = 0, $715 = 0, $730 = 0, $736 = 0, $738 = 0, $74 = 0, $748 = 0, $751 = 0, $755 = 0, $759 = 0, $760 = 0, $763 = 0, $764 = 0, $768 = 0, $77 = 0, $773 = 0, $776 = 0, $781 = 0, $782 = 0, $784 = 0, $785 = 0, $79 = 0, $790 = 0, $798 = 0, $8 = 0, $809 = 0, $810 = 0, $812 = 0, $816 = 0, $819 = 0, $835 = 0, $837 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $843 = 0, $844 = 0, $849 = 0, $857 = 0, $868 = 0, $871 = 0, $873 = 0, $878 = 0, $886 = 0, $896 = 0, $899 = 0, $9 = 0, $901 = 0, $906 = 0, $914 = 0, $92 = 0, $924 = 0, $930 = 0, $939 = 0, $944 = 0, $948 = 0, $950 = 0, $955 = 0, $963 = 0, $977 = 0, $984 = 0, $987 = 0, $991 = 0, $995 = 0, $998 = 0, label = 0, sp = 0, $$sroa$0$1$i$looptemp = 0, $$sroa$0$4$i$looptemp = 0, $713$looptemp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$7 = sp + 40 | 0;
$8 = sp + 32 | 0;
$9 = sp + 36 | 0;
$10 = sp + 28 | 0;
$11 = sp + 24 | 0;
$12 = sp;
HEAP32[$9 >> 2] = $3;
$13 = $0 + 340 | 0;
$14 = HEAP32[$13 >> 2] | 0;
$15 = $0 + 144 | 0;
if ((HEAP32[$15 >> 2] | 0) == ($2 | 0)) {
$19 = $0 + 272 | 0;
$20 = $0 + 276 | 0;
$$0437 = $19;
$$0438 = $20;
$$pre$phi769Z2D = $20;
$$pre$phi771Z2D = $0 + 284 | 0;
$$pre$phiZ2D = $19;
} else {
$21 = $0 + 284 | 0;
$22 = HEAP32[$21 >> 2] | 0;
$$0437 = $22;
$$0438 = $22 + 4 | 0;
$$pre$phi769Z2D = $0 + 276 | 0;
$$pre$phi771Z2D = $21;
$$pre$phiZ2D = $0 + 272 | 0;
}
HEAP32[$$0437 >> 2] = $3;
$24 = $2 + 4 | 0;
$25 = $0 + 80 | 0;
$26 = $2 + 68 | 0;
$27 = $0 + 44 | 0;
$28 = $2 + 56 | 0;
$29 = $0 + 48 | 0;
$30 = $0 + 4 | 0;
$31 = $0 + 464 | 0;
$32 = $2 + 44 | 0;
$33 = $2 + 64 | 0;
$34 = $14 + 80 | 0;
$35 = $14 + 92 | 0;
$36 = $14 + 88 | 0;
$37 = $14 + 96 | 0;
$38 = $14 + 8 | 0;
$39 = $14 + 129 | 0;
$40 = $0 + 112 | 0;
$$pre185$i = $0 + 400 | 0;
$$pre186$i = $0 + 412 | 0;
$$pre188$i = $0 + 408 | 0;
$$pre190$i = $0 + 456 | 0;
$41 = $0 + 416 | 0;
$42 = $0 + 116 | 0;
$43 = $0 + 292 | 0;
$44 = $0 + 120 | 0;
$45 = $0 + 288 | 0;
$46 = $0 + 12 | 0;
$47 = $0 + 296 | 0;
$48 = $0 + 224 | 0;
$49 = $0 + 264 | 0;
$50 = $14 + 130 | 0;
$51 = $14 + 4 | 0;
$52 = $0 + 60 | 0;
$53 = $0 + 352 | 0;
$54 = $0 + 348 | 0;
$55 = $2 + 28 | 0;
$56 = $0 + 52 | 0;
$57 = $0 + 404 | 0;
$58 = $0 + 376 | 0;
$59 = $0 + 16 | 0;
$60 = $0 + 56 | 0;
$61 = $0 + 104 | 0;
$62 = $0 + 360 | 0;
$63 = $0 + 232 | 0;
$64 = $0 + 233 | 0;
$65 = $2 + 40 | 0;
$66 = $0 + 72 | 0;
L5 : while (1) {
$67 = HEAP32[$9 >> 2] | 0;
HEAP32[$10 >> 2] = $67;
$69 = FUNCTION_TABLE_iiiii[HEAP32[$24 >> 2] & 63]($2, $67, $4, $10) | 0;
$70 = HEAP32[$10 >> 2] | 0;
HEAP32[$$0438 >> 2] = $70;
$71 = $70;
L7 : do switch ($69 | 0) {
case -3:
{
label = 6;
break L5;
break;
}
case -4:
{
label = 21;
break L5;
break;
}
case 0:
{
label = 26;
break L5;
break;
}
case -1:
{
label = 27;
break L5;
break;
}
case -2:
{
label = 29;
break L5;
break;
}
case -5:
{
label = 300;
break L5;
break;
}
case 12:
{
$$14$ph = 17;
label = 346;
break L5;
break;
}
case 9:
{
$118 = HEAP32[$33 >> 2] | 0;
$123 = (FUNCTION_TABLE_iiii[HEAP32[$32 >> 2] & 31]($2, (HEAP32[$9 >> 2] | 0) + $118 | 0, $71 + (0 - $118) | 0) | 0) & 255;
HEAP8[$11 >> 0] = $123;
do if (!($123 << 24 >> 24)) {
$156 = HEAP32[$33 >> 2] | 0;
$160 = (HEAP32[$10 >> 2] | 0) + (0 - $156) | 0;
HEAP32[$7 >> 2] = (HEAP32[$9 >> 2] | 0) + $156;
if (!(HEAP32[$35 >> 2] | 0)) if (!((_poolGrow($34) | 0) << 24 >> 24)) {
label = 46;
break L5;
}
while (1) {
FUNCTION_TABLE_viiiii[HEAP32[$28 >> 2] & 15]($2, $7, $160, $35, HEAP32[$36 >> 2] | 0);
if ((HEAP32[$7 >> 2] | 0) == ($160 | 0)) break;
if (!((_poolGrow($34) | 0) << 24 >> 24)) {
label = 46;
break L5;
}
}
if (!(HEAP32[$37 >> 2] | 0)) {
$$4$ph550 = 1;
label = 167;
break L5;
}
$173 = HEAP32[$35 >> 2] | 0;
if (($173 | 0) == (HEAP32[$36 >> 2] | 0)) {
if (!((_poolGrow($34) | 0) << 24 >> 24)) {
$$4$ph550 = 1;
label = 167;
break L5;
}
$179 = HEAP32[$35 >> 2] | 0;
} else $179 = $173;
HEAP32[$35 >> 2] = $179 + 1;
HEAP8[$179 >> 0] = 0;
$180 = HEAP32[$37 >> 2] | 0;
$182 = $180;
if (!$180) {
$$4$ph550 = 1;
label = 167;
break L5;
}
$183 = HEAP32[$38 >> 2] | 0;
L34 : do if (!$183) $$4$i = 0; else {
$185 = HEAP8[$180 >> 0] | 0;
if (!($185 << 24 >> 24)) $$0$lcssa$i155$i = 0; else {
$$034$i153$i = $180;
$$05$i152$i = 0;
$190 = $185;
while (1) {
$$034$i153$i = $$034$i153$i + 1 | 0;
$191 = $$05$i152$i * 1000003 ^ $190 & 255;
$190 = HEAP8[$$034$i153$i >> 0] | 0;
if (!($190 << 24 >> 24)) {
$$0$lcssa$i155$i = $191;
break;
} else $$05$i152$i = $191;
}
}
$194 = $183 + -1 | 0;
$195 = $$0$lcssa$i155$i & $194;
$196 = HEAP32[$14 >> 2] | 0;
$198 = HEAP32[$196 + ($195 << 2) >> 2] | 0;
if (!$198) $$4$i = 0; else {
$201 = $$0$lcssa$i155$i & 0 - $183;
$202 = $194 >>> 2;
$$0146189$i = 0;
$$1139190$i = $195;
$204 = $198;
while (1) {
$203 = HEAP32[$204 >> 2] | 0;
if ($185 << 24 >> 24 == (HEAP8[$203 >> 0] | 0)) {
$$057$i$i = $180;
$$08$i$i = $203;
$208 = $185;
do {
if (!($208 << 24 >> 24)) {
$$4$i = $204;
break L34;
}
$$057$i$i = $$057$i$i + 1 | 0;
$$08$i$i = $$08$i$i + 1 | 0;
$208 = HEAP8[$$057$i$i >> 0] | 0;
} while ($208 << 24 >> 24 == (HEAP8[$$08$i$i >> 0] | 0));
}
if (!($$0146189$i << 24 >> 24)) $$1147$i = ($201 >>> ((HEAPU8[$51 >> 0] | 0) + -1 | 0) & $202 | 1) & 255; else $$1147$i = $$0146189$i;
$222 = $$1147$i & 255;
$$1139190$i = ($$1139190$i >>> 0 < $222 >>> 0 ? $183 : 0) + ($$1139190$i - $222) | 0;
$204 = HEAP32[$196 + ($$1139190$i << 2) >> 2] | 0;
if (!$204) {
$$4$i = 0;
break;
} else $$0146189$i = $$1147$i;
}
}
} while (0);
HEAP32[$35 >> 2] = $182;
if (!(HEAP8[$39 >> 0] | 0)) label = 65; else if (!(HEAP8[$50 >> 0] | 0)) {
if (!$$4$i) {
$238 = HEAP32[$44 >> 2] | 0;
if ($238 | 0) {
FUNCTION_TABLE_viii[$238 & 127](HEAP32[$30 >> 2] | 0, $180, 0);
break;
}
$241 = HEAP32[$25 >> 2] | 0;
if (!$241) break;
$243 = HEAP32[$9 >> 2] | 0;
$244 = HEAP32[$10 >> 2] | 0;
HEAP32[$7 >> 2] = $243;
if (!(HEAP8[$26 >> 0] | 0)) {
if ((HEAP32[$15 >> 2] | 0) == ($2 | 0)) {
$$0$ph$i470 = $$pre$phi769Z2D;
$$024$ph$i469 = $$pre$phiZ2D;
} else {
$249 = HEAP32[$$pre$phi771Z2D >> 2] | 0;
$$0$ph$i470 = $249 + 4 | 0;
$$024$ph$i469 = $249;
}
do {
HEAP32[$8 >> 2] = HEAP32[$27 >> 2];
FUNCTION_TABLE_viiiii[HEAP32[$28 >> 2] & 15]($2, $7, $244, $8, HEAP32[$29 >> 2] | 0);
HEAP32[$$0$ph$i470 >> 2] = HEAP32[$7 >> 2];
$257 = HEAP32[$27 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[$25 >> 2] & 127](HEAP32[$30 >> 2] | 0, $257, (HEAP32[$8 >> 2] | 0) - $257 | 0);
HEAP32[$$024$ph$i469 >> 2] = HEAP32[$7 >> 2];
} while ((HEAP32[$7 >> 2] | 0) != ($244 | 0));
} else FUNCTION_TABLE_viii[$241 & 127](HEAP32[$30 >> 2] | 0, $243, $244 - $243 | 0);
break;
}
} else label = 65;
if ((label | 0) == 65) {
label = 0;
if (!$$4$i) {
$$4$ph550 = 11;
label = 167;
break L5;
}
if (!(HEAP8[$$4$i + 34 >> 0] | 0)) {
$$4$ph550 = 24;
label = 167;
break L5;
}
}
$268 = $$4$i + 32 | 0;
if (HEAP8[$268 >> 0] | 0) {
$$4$ph550 = 12;
label = 167;
break L5;
}
if (HEAP32[$$4$i + 28 >> 2] | 0) {
$$4$ph550 = 15;
label = 167;
break L5;
}
$274 = $$4$i + 4 | 0;
if (HEAP32[$274 >> 2] | 0) {
if (HEAP8[$43 >> 0] | 0) {
$310 = HEAP32[$45 >> 2] | 0;
if (!$310) {
$315 = FUNCTION_TABLE_ii[HEAP32[$46 >> 2] & 63](24) | 0;
if (!$315) {
$$048$i = 1;
label = 169;
break L5;
} else $$0$i541 = $315;
} else {
HEAP32[$45 >> 2] = HEAP32[$310 + 8 >> 2];
$$0$i541 = $310;
}
HEAP8[$268 >> 0] = 1;
$317 = $$4$i + 12 | 0;
HEAP32[$317 >> 2] = 0;
$319 = $$0$i541 + 8 | 0;
HEAP32[$319 >> 2] = HEAP32[$$pre$phi771Z2D >> 2];
HEAP32[$$pre$phi771Z2D >> 2] = $$0$i541;
HEAP32[$$0$i541 + 12 >> 2] = $$4$i;
HEAP32[$$0$i541 + 16 >> 2] = HEAP32[$47 >> 2];
HEAP8[$$0$i541 + 20 >> 0] = 0;
HEAP32[$$0$i541 >> 2] = 0;
HEAP32[$$0$i541 + 4 >> 2] = 0;
$325 = HEAP32[$274 >> 2] | 0;
$328 = $325 + (HEAP32[$$4$i + 8 >> 2] | 0) | 0;
$331 = _doContent($0, HEAP32[$47 >> 2] | 0, HEAP32[$48 >> 2] | 0, $325, $328, $7, 0) | 0;
if ($331 | 0) {
$$048$i = $331;
label = 169;
break L5;
}
$333 = HEAP32[$7 >> 2] | 0;
do if (($328 | 0) == ($333 | 0)) label = 99; else {
if ((HEAP32[$31 >> 2] | 0) != 3) {
label = 99;
break;
}
HEAP32[$317 >> 2] = $333 - $325;
HEAP32[$49 >> 2] = 30;
} while (0);
if ((label | 0) == 99) {
label = 0;
HEAP8[$268 >> 0] = 0;
HEAP32[$$pre$phi771Z2D >> 2] = HEAP32[$319 >> 2];
HEAP32[$319 >> 2] = HEAP32[$45 >> 2];
HEAP32[$45 >> 2] = $$0$i541;
}
break;
}
$279 = HEAP32[$44 >> 2] | 0;
if (!$279) {
$283 = HEAP32[$25 >> 2] | 0;
if ($283 | 0) {
$285 = HEAP32[$9 >> 2] | 0;
$286 = HEAP32[$10 >> 2] | 0;
HEAP32[$7 >> 2] = $285;
if (!(HEAP8[$26 >> 0] | 0)) {
if ((HEAP32[$15 >> 2] | 0) == ($2 | 0)) {
$$0$ph$i474 = $$pre$phi769Z2D;
$$024$ph$i473 = $$pre$phiZ2D;
} else {
$291 = HEAP32[$$pre$phi771Z2D >> 2] | 0;
$$0$ph$i474 = $291 + 4 | 0;
$$024$ph$i473 = $291;
}
do {
HEAP32[$8 >> 2] = HEAP32[$27 >> 2];
FUNCTION_TABLE_viiiii[HEAP32[$28 >> 2] & 15]($2, $7, $286, $8, HEAP32[$29 >> 2] | 0);
HEAP32[$$0$ph$i474 >> 2] = HEAP32[$7 >> 2];
$299 = HEAP32[$27 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[$25 >> 2] & 127](HEAP32[$30 >> 2] | 0, $299, (HEAP32[$8 >> 2] | 0) - $299 | 0);
HEAP32[$$024$ph$i473 >> 2] = HEAP32[$7 >> 2];
} while ((HEAP32[$7 >> 2] | 0) != ($286 | 0));
} else FUNCTION_TABLE_viii[$283 & 127](HEAP32[$30 >> 2] | 0, $285, $286 - $285 | 0);
}
} else FUNCTION_TABLE_viii[$279 & 127](HEAP32[$30 >> 2] | 0, HEAP32[$$4$i >> 2] | 0, 0);
break L7;
}
if (!(HEAP32[$40 >> 2] | 0)) {
$491 = HEAP32[$25 >> 2] | 0;
if (!$491) break;
$493 = HEAP32[$9 >> 2] | 0;
$494 = HEAP32[$10 >> 2] | 0;
HEAP32[$7 >> 2] = $493;
if (!(HEAP8[$26 >> 0] | 0)) {
if ((HEAP32[$15 >> 2] | 0) == ($2 | 0)) {
$$0$ph$i480 = $$pre$phi769Z2D;
$$024$ph$i479 = $$pre$phiZ2D;
} else {
$499 = HEAP32[$$pre$phi771Z2D >> 2] | 0;
$$0$ph$i480 = $499 + 4 | 0;
$$024$ph$i479 = $499;
}
do {
HEAP32[$8 >> 2] = HEAP32[$27 >> 2];
FUNCTION_TABLE_viiiii[HEAP32[$28 >> 2] & 15]($2, $7, $494, $8, HEAP32[$29 >> 2] | 0);
HEAP32[$$0$ph$i480 >> 2] = HEAP32[$7 >> 2];
$507 = HEAP32[$27 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[$25 >> 2] & 127](HEAP32[$30 >> 2] | 0, $507, (HEAP32[$8 >> 2] | 0) - $507 | 0);
HEAP32[$$024$ph$i479 >> 2] = HEAP32[$7 >> 2];
} while ((HEAP32[$7 >> 2] | 0) != ($494 | 0));
} else FUNCTION_TABLE_viii[$491 & 127](HEAP32[$30 >> 2] | 0, $493, $494 - $493 | 0);
break;
}
HEAP8[$268 >> 0] = 1;
$344 = HEAP32[$13 >> 2] | 0;
$345 = $344 + 136 | 0;
if (!(HEAP32[$345 >> 2] | 0)) $$191$i = 0; else {
$348 = HEAP32[$$pre186$i >> 2] | 0;
if (($348 | 0) == (HEAP32[$$pre188$i >> 2] | 0)) {
if (!((_poolGrow($$pre185$i) | 0) << 24 >> 24)) {
label = 154;
break L5;
}
$354 = HEAP32[$$pre186$i >> 2] | 0;
} else $354 = $348;
HEAP32[$$pre186$i >> 2] = $354 + 1;
HEAP8[$354 >> 0] = 61;
$$$i = (HEAP32[(HEAP32[$345 >> 2] | 0) + 20 >> 2] | 0) + (((HEAP8[$$pre190$i >> 0] | 0) != 0) << 31 >> 31) | 0;
if (($$$i | 0) > 0) {
$$0103150$i = 0;
while (1) {
$362 = HEAP32[$$pre186$i >> 2] | 0;
if (($362 | 0) == (HEAP32[$$pre188$i >> 2] | 0)) {
if (!((_poolGrow($$pre185$i) | 0) << 24 >> 24)) {
label = 154;
break L5;
}
$373 = HEAP32[$$pre186$i >> 2] | 0;
} else $373 = $362;
$371 = HEAP8[(HEAP32[(HEAP32[$345 >> 2] | 0) + 16 >> 2] | 0) + $$0103150$i >> 0] | 0;
HEAP32[$$pre186$i >> 2] = $373 + 1;
HEAP8[$373 >> 0] = $371;
$$0103150$i = $$0103150$i + 1 | 0;
if (($$0103150$i | 0) >= ($$$i | 0)) {
$$191$i = 1;
break;
}
}
} else $$191$i = 1;
}
$377 = HEAP32[$344 + 60 >> 2] | 0;
$380 = $377 + (HEAP32[$344 + 68 >> 2] << 2) | 0;
$$292$ph$i = $$191$i;
$$sroa$0$0$ph$i = $377;
L132 : while (1) {
$$sroa$0$0$i = $$sroa$0$0$ph$i;
while (1) {
$$sroa$0$1$i = $$sroa$0$0$i;
do {
if (($$sroa$0$1$i | 0) == ($380 | 0)) break L132;
$$sroa$0$1$i$looptemp = $$sroa$0$1$i;
$$sroa$0$1$i = $$sroa$0$1$i + 4 | 0;
$383 = HEAP32[$$sroa$0$1$i$looptemp >> 2] | 0;
} while (!($383 | 0));
$385 = $383 + 4 | 0;
if (!(HEAP32[$385 >> 2] | 0)) $$sroa$0$0$i = $$sroa$0$1$i; else break;
}
if ($$292$ph$i << 24 >> 24) {
$389 = HEAP32[$$pre186$i >> 2] | 0;
if (($389 | 0) == (HEAP32[$$pre188$i >> 2] | 0)) {
if (!((_poolGrow($$pre185$i) | 0) << 24 >> 24)) {
label = 154;
break L5;
}
$395 = HEAP32[$$pre186$i >> 2] | 0;
} else $395 = $389;
HEAP32[$$pre186$i >> 2] = $395 + 1;
HEAP8[$395 >> 0] = 12;
}
$396 = HEAP32[$383 >> 2] | 0;
$397 = HEAP8[$396 >> 0] | 0;
$399 = HEAP32[$$pre186$i >> 2] | 0;
$401 = ($399 | 0) == (HEAP32[$$pre188$i >> 2] | 0);
if (!($397 << 24 >> 24)) {
$$lcssa130$i = $401;
$1057 = $399;
} else {
$$096142$i = $396;
$1058 = $399;
$1059 = $397;
$1060 = $401;
while (1) {
if ($1060) {
if (!((_poolGrow($$pre185$i) | 0) << 24 >> 24)) {
label = 154;
break L5;
}
$405 = HEAP32[$$pre186$i >> 2] | 0;
$406 = HEAP8[$$096142$i >> 0] | 0;
} else {
$405 = $1058;
$406 = $1059;
}
HEAP32[$$pre186$i >> 2] = $405 + 1;
HEAP8[$405 >> 0] = $406;
$$096142$i = $$096142$i + 1 | 0;
$1059 = HEAP8[$$096142$i >> 0] | 0;
$410 = HEAP32[$$pre186$i >> 2] | 0;
$412 = ($410 | 0) == (HEAP32[$$pre188$i >> 2] | 0);
if (!($1059 << 24 >> 24)) {
$$lcssa130$i = $412;
$1057 = $410;
break;
} else {
$1058 = $410;
$1060 = $412;
}
}
}
if ($$lcssa130$i) {
if (!((_poolGrow($$pre185$i) | 0) << 24 >> 24)) {
label = 154;
break L5;
}
$416 = HEAP32[$$pre186$i >> 2] | 0;
} else $416 = $1057;
HEAP32[$$pre186$i >> 2] = $416 + 1;
HEAP8[$416 >> 0] = 61;
$$104$i = (HEAP32[(HEAP32[$385 >> 2] | 0) + 20 >> 2] | 0) + (((HEAP8[$$pre190$i >> 0] | 0) != 0) << 31 >> 31) | 0;
if (($$104$i | 0) > 0) $$098147$i = 0; else {
$$292$ph$i = 1;
$$sroa$0$0$ph$i = $$sroa$0$1$i;
continue;
}
while (1) {
$424 = HEAP32[$$pre186$i >> 2] | 0;
if (($424 | 0) == (HEAP32[$$pre188$i >> 2] | 0)) {
if (!((_poolGrow($$pre185$i) | 0) << 24 >> 24)) {
label = 154;
break L5;
}
$435 = HEAP32[$$pre186$i >> 2] | 0;
} else $435 = $424;
$433 = HEAP8[(HEAP32[(HEAP32[$385 >> 2] | 0) + 16 >> 2] | 0) + $$098147$i >> 0] | 0;
HEAP32[$$pre186$i >> 2] = $435 + 1;
HEAP8[$435 >> 0] = $433;
$436 = $$098147$i + 1 | 0;
if (($436 | 0) < ($$104$i | 0)) $$098147$i = $436; else {
$$292$ph$i = 1;
$$sroa$0$0$ph$i = $$sroa$0$1$i;
continue L132;
}
}
}
$438 = HEAP32[$344 >> 2] | 0;
$441 = $438 + (HEAP32[$344 + 8 >> 2] << 2) | 0;
$$494$ph$i = $$292$ph$i;
$$sroa$0$3$ph$i = $438;
L167 : while (1) {
$$sroa$0$3$i = $$sroa$0$3$ph$i;
while (1) {
$$sroa$0$4$i = $$sroa$0$3$i;
do {
if (($$sroa$0$4$i | 0) == ($441 | 0)) break L167;
$$sroa$0$4$i$looptemp = $$sroa$0$4$i;
$$sroa$0$4$i = $$sroa$0$4$i + 4 | 0;
$444 = HEAP32[$$sroa$0$4$i$looptemp >> 2] | 0;
} while (!($444 | 0));
if (!(HEAP8[$444 + 32 >> 0] | 0)) $$sroa$0$3$i = $$sroa$0$4$i; else break;
}
if ($$494$ph$i << 24 >> 24) {
$450 = HEAP32[$$pre186$i >> 2] | 0;
if (($450 | 0) == (HEAP32[$$pre188$i >> 2] | 0)) {
if (!((_poolGrow($$pre185$i) | 0) << 24 >> 24)) {
label = 154;
break L5;
}
$456 = HEAP32[$$pre186$i >> 2] | 0;
} else $456 = $450;
HEAP32[$$pre186$i >> 2] = $456 + 1;
HEAP8[$456 >> 0] = 12;
}
$457 = HEAP32[$444 >> 2] | 0;
$458 = HEAP8[$457 >> 0] | 0;
if (!($458 << 24 >> 24)) {
$$494$ph$i = 1;
$$sroa$0$3$ph$i = $$sroa$0$4$i;
continue;
} else {
$$089141$i = $457;
$1061 = $458;
}
while (1) {
$460 = HEAP32[$$pre186$i >> 2] | 0;
if (($460 | 0) == (HEAP32[$$pre188$i >> 2] | 0)) {
if (!((_poolGrow($$pre185$i) | 0) << 24 >> 24)) {
label = 154;
break L5;
}
$466 = HEAP32[$$pre186$i >> 2] | 0;
$467 = HEAP8[$$089141$i >> 0] | 0;
} else {
$466 = $460;
$467 = $1061;
}
HEAP32[$$pre186$i >> 2] = $466 + 1;
HEAP8[$466 >> 0] = $467;
$468 = $$089141$i + 1 | 0;
$469 = HEAP8[$468 >> 0] | 0;
if (!($469 << 24 >> 24)) {
$$494$ph$i = 1;
$$sroa$0$3$ph$i = $$sroa$0$4$i;
continue L167;
} else {
$$089141$i = $468;
$1061 = $469;
}
}
}
$471 = HEAP32[$$pre186$i >> 2] | 0;
if (($471 | 0) == (HEAP32[$$pre188$i >> 2] | 0)) {
if (!((_poolGrow($$pre185$i) | 0) << 24 >> 24)) {
label = 154;
break L5;
}
$477 = HEAP32[$$pre186$i >> 2] | 0;
} else $477 = $471;
HEAP32[$$pre186$i >> 2] = $477 + 1;
HEAP8[$477 >> 0] = 0;
$478 = HEAP32[$41 >> 2] | 0;
HEAP8[$268 >> 0] = 0;
if (!$478) {
$$4$ph550 = 1;
label = 167;
break L5;
}
if (!(FUNCTION_TABLE_iiiiii[HEAP32[$40 >> 2] & 63](HEAP32[$42 >> 2] | 0, $478, HEAP32[$$4$i + 20 >> 2] | 0, HEAP32[$$4$i + 16 >> 2] | 0, HEAP32[$$4$i + 24 >> 2] | 0) | 0)) {
$$4$ph550 = 21;
label = 167;
break L5;
}
HEAP32[$$pre186$i >> 2] = HEAP32[$41 >> 2];
} else {
$125 = HEAP32[$52 >> 2] | 0;
if ($125 | 0) {
FUNCTION_TABLE_viii[$125 & 127](HEAP32[$30 >> 2] | 0, $11, 1);
break;
}
$128 = HEAP32[$25 >> 2] | 0;
if ($128 | 0) {
$130 = HEAP32[$9 >> 2] | 0;
$131 = HEAP32[$10 >> 2] | 0;
HEAP32[$7 >> 2] = $130;
if (!(HEAP8[$26 >> 0] | 0)) {
if ((HEAP32[$15 >> 2] | 0) == ($2 | 0)) {
$$0$ph$i466 = $$pre$phi769Z2D;
$$024$ph$i465 = $$pre$phiZ2D;
} else {
$136 = HEAP32[$$pre$phi771Z2D >> 2] | 0;
$$0$ph$i466 = $136 + 4 | 0;
$$024$ph$i465 = $136;
}
do {
HEAP32[$8 >> 2] = HEAP32[$27 >> 2];
FUNCTION_TABLE_viiiii[HEAP32[$28 >> 2] & 15]($2, $7, $131, $8, HEAP32[$29 >> 2] | 0);
HEAP32[$$0$ph$i466 >> 2] = HEAP32[$7 >> 2];
$144 = HEAP32[$27 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[$25 >> 2] & 127](HEAP32[$30 >> 2] | 0, $144, (HEAP32[$8 >> 2] | 0) - $144 | 0);
HEAP32[$$024$ph$i465 >> 2] = HEAP32[$7 >> 2];
} while ((HEAP32[$7 >> 2] | 0) != ($131 | 0));
} else FUNCTION_TABLE_viii[$128 & 127](HEAP32[$30 >> 2] | 0, $130, $131 - $130 | 0);
}
} while (0);
break;
}
case 1:
case 2:
{
$518 = HEAP32[$53 >> 2] | 0;
if (!$518) {
$522 = FUNCTION_TABLE_ii[HEAP32[$46 >> 2] & 63](48) | 0;
if (!$522) {
$$8$ph = 1;
label = 196;
break L5;
}
$525 = FUNCTION_TABLE_ii[HEAP32[$46 >> 2] & 63](32) | 0;
HEAP32[$522 + 36 >> 2] = $525;
if (!$525) {
label = 174;
break L5;
}
HEAP32[$522 + 40 >> 2] = $525 + 32;
$$0457 = $522;
} else {
HEAP32[$53 >> 2] = HEAP32[$518 >> 2];
$$0457 = $518;
}
$532 = $$0457 + 44 | 0;
HEAP32[$532 >> 2] = 0;
HEAP32[$$0457 >> 2] = HEAP32[$54 >> 2];
HEAP32[$54 >> 2] = $$0457;
$534 = $$0457 + 12 | 0;
HEAP32[$$0457 + 16 >> 2] = 0;
HEAP32[$$0457 + 20 >> 2] = 0;
$539 = (HEAP32[$9 >> 2] | 0) + (HEAP32[$33 >> 2] | 0) | 0;
$540 = $$0457 + 4 | 0;
HEAP32[$540 >> 2] = $539;
$542 = FUNCTION_TABLE_iii[HEAP32[$55 >> 2] & 63]($2, $539) | 0;
$543 = $$0457 + 8 | 0;
HEAP32[$543 >> 2] = $542;
HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + 1;
$546 = HEAP32[$540 >> 2] | 0;
$548 = $546 + (HEAP32[$543 >> 2] | 0) | 0;
HEAP32[$7 >> 2] = $546;
$549 = $$0457 + 36 | 0;
HEAP32[$11 >> 2] = HEAP32[$549 >> 2];
$552 = $$0457 + 40 | 0;
FUNCTION_TABLE_viiiii[HEAP32[$28 >> 2] & 15]($2, $7, $548, $11, (HEAP32[$552 >> 2] | 0) + -1 | 0);
$555 = HEAP32[$11 >> 2] | 0;
$556 = HEAP32[$549 >> 2] | 0;
$557 = $556;
$558 = $555 - $557 | 0;
if ((HEAP32[$7 >> 2] | 0) == ($548 | 0)) {
$$in = $555;
$$lcssa594 = $558;
$582 = $557;
} else {
$563 = $557;
$566 = $556;
$571 = $558;
while (1) {
$564 = (HEAP32[$552 >> 2] | 0) - $563 << 1;
$567 = FUNCTION_TABLE_iii[HEAP32[$59 >> 2] & 63]($566, $564) | 0;
if (!$567) {
label = 180;
break L5;
}
HEAP32[$549 >> 2] = $567;
$569 = $567 + $564 | 0;
HEAP32[$552 >> 2] = $569;
HEAP32[$11 >> 2] = $567 + $571;
FUNCTION_TABLE_viiiii[HEAP32[$28 >> 2] & 15]($2, $7, $548, $11, $569 + -1 | 0);
$574 = HEAP32[$11 >> 2] | 0;
$566 = HEAP32[$549 >> 2] | 0;
$576 = $566;
$577 = $574 - $576 | 0;
if ((HEAP32[$7 >> 2] | 0) == ($548 | 0)) {
$$in = $574;
$$lcssa594 = $577;
$582 = $576;
break;
} else {
$563 = $576;
$571 = $577;
}
}
}
HEAP32[$$0457 + 24 >> 2] = $$lcssa594;
HEAP32[$534 >> 2] = $582;
HEAP8[$$in >> 0] = 0;
$584 = _storeAtts($0, $2, HEAP32[$9 >> 2] | 0, $534, $532) | 0;
if ($584 | 0) {
$$8$ph = $584;
label = 196;
break L5;
}
$586 = HEAP32[$56 >> 2] | 0;
if (!$586) {
$591 = HEAP32[$25 >> 2] | 0;
if ($591 | 0) {
$593 = HEAP32[$9 >> 2] | 0;
$594 = HEAP32[$10 >> 2] | 0;
HEAP32[$7 >> 2] = $593;
if (!(HEAP8[$26 >> 0] | 0)) {
if ((HEAP32[$15 >> 2] | 0) == ($2 | 0)) {
$$0$ph$i485 = $$pre$phi769Z2D;
$$024$ph$i484 = $$pre$phiZ2D;
} else {
$599 = HEAP32[$$pre$phi771Z2D >> 2] | 0;
$$0$ph$i485 = $599 + 4 | 0;
$$024$ph$i484 = $599;
}
do {
HEAP32[$8 >> 2] = HEAP32[$27 >> 2];
FUNCTION_TABLE_viiiii[HEAP32[$28 >> 2] & 15]($2, $7, $594, $8, HEAP32[$29 >> 2] | 0);
HEAP32[$$0$ph$i485 >> 2] = HEAP32[$7 >> 2];
$607 = HEAP32[$27 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[$25 >> 2] & 127](HEAP32[$30 >> 2] | 0, $607, (HEAP32[$8 >> 2] | 0) - $607 | 0);
HEAP32[$$024$ph$i484 >> 2] = HEAP32[$7 >> 2];
} while ((HEAP32[$7 >> 2] | 0) != ($594 | 0));
} else FUNCTION_TABLE_viii[$591 & 127](HEAP32[$30 >> 2] | 0, $593, $594 - $593 | 0);
}
} else FUNCTION_TABLE_viii[$586 & 127](HEAP32[$30 >> 2] | 0, HEAP32[$534 >> 2] | 0, HEAP32[$58 >> 2] | 0);
$618 = HEAP32[$57 >> 2] | 0;
if (!$618) HEAP32[$57 >> 2] = HEAP32[$$pre185$i >> 2]; else {
$621 = HEAP32[$$pre185$i >> 2] | 0;
if ($621 | 0) {
$$018$i = $621;
$$in$i = $618;
while (1) {
$624 = HEAP32[$$018$i >> 2] | 0;
HEAP32[$$018$i >> 2] = $$in$i;
HEAP32[$57 >> 2] = $$018$i;
if (!$624) break; else {
$$in$i$phi = $$018$i;
$$018$i = $624;
$$in$i = $$in$i$phi;
}
}
}
}
HEAP32[$$pre185$i >> 2] = 0;
HEAP32[$41 >> 2] = 0;
HEAP32[$$pre186$i >> 2] = 0;
HEAP32[$$pre188$i >> 2] = 0;
break;
}
case 3:
case 4:
{
$628 = (HEAP32[$9 >> 2] | 0) + (HEAP32[$33 >> 2] | 0) | 0;
HEAP32[$11 >> 2] = 0;
$631 = $628 + (FUNCTION_TABLE_iii[HEAP32[$55 >> 2] & 63]($2, $628) | 0) | 0;
HEAP32[$7 >> 2] = $628;
if (!(HEAP32[$$pre186$i >> 2] | 0)) if (!((_poolGrow($$pre185$i) | 0) << 24 >> 24)) {
label = 202;
break L5;
}
while (1) {
FUNCTION_TABLE_viiiii[HEAP32[$28 >> 2] & 15]($2, $7, $631, $$pre186$i, HEAP32[$$pre188$i >> 2] | 0);
if ((HEAP32[$7 >> 2] | 0) == ($631 | 0)) break;
if (!((_poolGrow($$pre185$i) | 0) << 24 >> 24)) {
label = 202;
break L5;
}
}
if (!(HEAP32[$41 >> 2] | 0)) {
label = 207;
break L5;
}
$644 = HEAP32[$$pre186$i >> 2] | 0;
if (($644 | 0) == (HEAP32[$$pre188$i >> 2] | 0)) {
if (!((_poolGrow($$pre185$i) | 0) << 24 >> 24)) {
label = 207;
break L5;
}
$650 = HEAP32[$$pre186$i >> 2] | 0;
} else $650 = $644;
HEAP32[$$pre186$i >> 2] = $650 + 1;
HEAP8[$650 >> 0] = 0;
$651 = HEAP32[$41 >> 2] | 0;
HEAP32[$12 >> 2] = $651;
if (!$651) {
$$9$ph = 1;
break L5;
}
HEAP32[$41 >> 2] = HEAP32[$$pre186$i >> 2];
$655 = _storeAtts($0, $2, HEAP32[$9 >> 2] | 0, $12, $11) | 0;
if ($655 | 0) {
$$9$ph = $655;
break L5;
}
HEAP32[$41 >> 2] = HEAP32[$$pre186$i >> 2];
$658 = HEAP32[$56 >> 2] | 0;
if (!$658) $$0458 = 1; else {
FUNCTION_TABLE_viii[$658 & 127](HEAP32[$30 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$58 >> 2] | 0);
$$0458 = 0;
}
$663 = HEAP32[$60 >> 2] | 0;
if (!$663) {
if ($$0458 | 0) {
$672 = HEAP32[$25 >> 2] | 0;
if ($672 | 0) {
$674 = HEAP32[$9 >> 2] | 0;
$675 = HEAP32[$10 >> 2] | 0;
HEAP32[$7 >> 2] = $674;
if (!(HEAP8[$26 >> 0] | 0)) {
if ((HEAP32[$15 >> 2] | 0) == ($2 | 0)) {
$$0$ph$i500 = $$pre$phi769Z2D;
$$024$ph$i499 = $$pre$phiZ2D;
} else {
$680 = HEAP32[$$pre$phi771Z2D >> 2] | 0;
$$0$ph$i500 = $680 + 4 | 0;
$$024$ph$i499 = $680;
}
do {
HEAP32[$8 >> 2] = HEAP32[$27 >> 2];
FUNCTION_TABLE_viiiii[HEAP32[$28 >> 2] & 15]($2, $7, $675, $8, HEAP32[$29 >> 2] | 0);
HEAP32[$$0$ph$i500 >> 2] = HEAP32[$7 >> 2];
$688 = HEAP32[$27 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[$25 >> 2] & 127](HEAP32[$30 >> 2] | 0, $688, (HEAP32[$8 >> 2] | 0) - $688 | 0);
HEAP32[$$024$ph$i499 >> 2] = HEAP32[$7 >> 2];
} while ((HEAP32[$7 >> 2] | 0) != ($675 | 0));
} else FUNCTION_TABLE_viii[$672 & 127](HEAP32[$30 >> 2] | 0, $674, $675 - $674 | 0);
}
}
} else {
if (!(HEAP32[$56 >> 2] | 0)) $670 = $663; else {
HEAP32[$$0437 >> 2] = HEAP32[$$0438 >> 2];
$670 = HEAP32[$60 >> 2] | 0;
}
FUNCTION_TABLE_vii[$670 & 255](HEAP32[$30 >> 2] | 0, HEAP32[$12 >> 2] | 0);
}
$699 = HEAP32[$57 >> 2] | 0;
if (!$699) HEAP32[$57 >> 2] = HEAP32[$$pre185$i >> 2]; else {
$702 = HEAP32[$$pre185$i >> 2] | 0;
if ($702 | 0) {
$$018$i506 = $702;
$$in$i505 = $699;
while (1) {
$705 = HEAP32[$$018$i506 >> 2] | 0;
HEAP32[$$018$i506 >> 2] = $$in$i505;
HEAP32[$57 >> 2] = $$018$i506;
if (!$705) break; else {
$$in$i505$phi = $$018$i506;
$$018$i506 = $705;
$$in$i505 = $$in$i505$phi;
}
}
}
}
HEAP32[$$pre185$i >> 2] = 0;
HEAP32[$41 >> 2] = 0;
HEAP32[$$pre186$i >> 2] = 0;
HEAP32[$$pre188$i >> 2] = 0;
$707 = HEAP32[$11 >> 2] | 0;
if ($707 | 0) {
$713 = $707;
do {
$709 = HEAP32[$61 >> 2] | 0;
if (!$709) $$pre$phi775Z2D = $713; else {
FUNCTION_TABLE_vii[$709 & 255](HEAP32[$30 >> 2] | 0, HEAP32[HEAP32[$713 >> 2] >> 2] | 0);
$$pre$phi775Z2D = $713;
}
$715 = $713 + 4 | 0;
$713$looptemp = $713;
$713 = HEAP32[$715 >> 2] | 0;
HEAP32[$11 >> 2] = $713;
HEAP32[$715 >> 2] = HEAP32[$62 >> 2];
HEAP32[$62 >> 2] = $713$looptemp;
HEAP32[(HEAP32[$$pre$phi775Z2D >> 2] | 0) + 4 >> 2] = HEAP32[$713$looptemp + 8 >> 2];
} while (($713 | 0) != 0);
}
if (!(HEAP32[$47 >> 2] | 0)) {
label = 236;
break L5;
}
break;
}
case 5:
{
if ((HEAP32[$47 >> 2] | 0) == ($1 | 0)) {
$$14$ph = 13;
label = 346;
break L5;
}
$730 = HEAP32[$54 >> 2] | 0;
HEAP32[$54 >> 2] = HEAP32[$730 >> 2];
HEAP32[$730 >> 2] = HEAP32[$53 >> 2];
HEAP32[$53 >> 2] = $730;
$736 = (HEAP32[$9 >> 2] | 0) + (HEAP32[$33 >> 2] << 1) | 0;
$738 = FUNCTION_TABLE_iii[HEAP32[$55 >> 2] & 63]($2, $736) | 0;
if (($738 | 0) != (HEAP32[$730 + 8 >> 2] | 0)) {
label = 240;
break L5;
}
if (_memcmp(HEAP32[$730 + 4 >> 2] | 0, $736, $738) | 0) {
label = 240;
break L5;
}
HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + -1;
$748 = HEAP32[$60 >> 2] | 0;
if (!$748) {
$782 = HEAP32[$25 >> 2] | 0;
if ($782 | 0) {
$784 = HEAP32[$9 >> 2] | 0;
$785 = HEAP32[$10 >> 2] | 0;
HEAP32[$7 >> 2] = $784;
if (!(HEAP8[$26 >> 0] | 0)) {
if ((HEAP32[$15 >> 2] | 0) == ($2 | 0)) {
$$0$ph$i512 = $$pre$phi769Z2D;
$$024$ph$i511 = $$pre$phiZ2D;
} else {
$790 = HEAP32[$$pre$phi771Z2D >> 2] | 0;
$$0$ph$i512 = $790 + 4 | 0;
$$024$ph$i511 = $790;
}
do {
HEAP32[$8 >> 2] = HEAP32[$27 >> 2];
FUNCTION_TABLE_viiiii[HEAP32[$28 >> 2] & 15]($2, $7, $785, $8, HEAP32[$29 >> 2] | 0);
HEAP32[$$0$ph$i512 >> 2] = HEAP32[$7 >> 2];
$798 = HEAP32[$27 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[$25 >> 2] & 127](HEAP32[$30 >> 2] | 0, $798, (HEAP32[$8 >> 2] | 0) - $798 | 0);
HEAP32[$$024$ph$i511 >> 2] = HEAP32[$7 >> 2];
} while ((HEAP32[$7 >> 2] | 0) != ($785 | 0));
} else FUNCTION_TABLE_viii[$782 & 127](HEAP32[$30 >> 2] | 0, $784, $785 - $784 | 0);
}
} else {
$751 = HEAP32[$730 + 16 >> 2] | 0;
$755 = $730 + 12 | 0;
if (($751 | 0) != 0 & (HEAP8[$63 >> 0] | 0) != 0) {
$759 = (HEAP32[$755 >> 2] | 0) + (HEAP32[$730 + 28 >> 2] | 0) | 0;
$760 = HEAP8[$751 >> 0] | 0;
if (!($760 << 24 >> 24)) $$0452$lcssa = $759; else {
$$0452714 = $759;
$$0456713 = $751;
$764 = $760;
while (1) {
$$0456713 = $$0456713 + 1 | 0;
$763 = $$0452714 + 1 | 0;
HEAP8[$$0452714 >> 0] = $764;
$764 = HEAP8[$$0456713 >> 0] | 0;
if (!($764 << 24 >> 24)) {
$$0452$lcssa = $763;
break;
} else $$0452714 = $763;
}
}
$768 = HEAP32[$730 + 20 >> 2] | 0;
if (($768 | 0) != 0 & (HEAP8[$64 >> 0] | 0) != 0) {
HEAP8[$$0452$lcssa >> 0] = HEAP8[$$pre190$i >> 0] | 0;
$$1453715 = $$0452$lcssa + 1 | 0;
$773 = HEAP8[$768 >> 0] | 0;
if (!($773 << 24 >> 24)) $$2454 = $$1453715; else {
$$0455716 = $768;
$$1453717 = $$1453715;
$776 = $773;
while (1) {
$$0455716 = $$0455716 + 1 | 0;
HEAP8[$$1453717 >> 0] = $776;
$$1453 = $$1453717 + 1 | 0;
$776 = HEAP8[$$0455716 >> 0] | 0;
if (!($776 << 24 >> 24)) {
$$2454 = $$1453;
break;
} else $$1453717 = $$1453;
}
}
} else $$2454 = $$0452$lcssa;
HEAP8[$$2454 >> 0] = 0;
$781 = HEAP32[$60 >> 2] | 0;
} else $781 = $748;
FUNCTION_TABLE_vii[$781 & 255](HEAP32[$30 >> 2] | 0, HEAP32[$755 >> 2] | 0);
}
$809 = $730 + 44 | 0;
$810 = HEAP32[$809 >> 2] | 0;
if ($810 | 0) {
$816 = $810;
do {
$812 = HEAP32[$61 >> 2] | 0;
if (!$812) {
$$pre$phi777Z2D = $816;
$819 = $816;
} else {
FUNCTION_TABLE_vii[$812 & 255](HEAP32[$30 >> 2] | 0, HEAP32[HEAP32[$816 >> 2] >> 2] | 0);
$$pre$phi777Z2D = $816;
$819 = HEAP32[$809 >> 2] | 0;
}
HEAP32[$809 >> 2] = HEAP32[$819 + 4 >> 2];
HEAP32[$816 + 4 >> 2] = HEAP32[$62 >> 2];
HEAP32[$62 >> 2] = $816;
HEAP32[(HEAP32[$$pre$phi777Z2D >> 2] | 0) + 4 >> 2] = HEAP32[$816 + 8 >> 2];
$816 = HEAP32[$809 >> 2] | 0;
} while (($816 | 0) != 0);
}
if (!(HEAP32[$47 >> 2] | 0)) {
label = 265;
break L5;
}
break;
}
case 10:
{
$835 = FUNCTION_TABLE_iii[HEAP32[$65 >> 2] & 63]($2, HEAP32[$9 >> 2] | 0) | 0;
if (($835 | 0) < 0) {
$$14$ph = 14;
label = 346;
break L5;
}
$837 = HEAP32[$52 >> 2] | 0;
if ($837 | 0) {
$839 = HEAP32[$30 >> 2] | 0;
$840 = _XmlUtf8Encode($835, $7) | 0;
FUNCTION_TABLE_viii[$837 & 127]($839, $7, $840);
break L7;
}
$841 = HEAP32[$25 >> 2] | 0;
if ($841 | 0) {
$843 = HEAP32[$9 >> 2] | 0;
$844 = HEAP32[$10 >> 2] | 0;
HEAP32[$7 >> 2] = $843;
if (!(HEAP8[$26 >> 0] | 0)) {
if ((HEAP32[$15 >> 2] | 0) == ($2 | 0)) {
$$0$ph$i517 = $$pre$phi769Z2D;
$$024$ph$i516 = $$pre$phiZ2D;
} else {
$849 = HEAP32[$$pre$phi771Z2D >> 2] | 0;
$$0$ph$i517 = $849 + 4 | 0;
$$024$ph$i516 = $849;
}
do {
HEAP32[$8 >> 2] = HEAP32[$27 >> 2];
FUNCTION_TABLE_viiiii[HEAP32[$28 >> 2] & 15]($2, $7, $844, $8, HEAP32[$29 >> 2] | 0);
HEAP32[$$0$ph$i517 >> 2] = HEAP32[$7 >> 2];
$857 = HEAP32[$27 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[$25 >> 2] & 127](HEAP32[$30 >> 2] | 0, $857, (HEAP32[$8 >> 2] | 0) - $857 | 0);
HEAP32[$$024$ph$i516 >> 2] = HEAP32[$7 >> 2];
} while ((HEAP32[$7 >> 2] | 0) != ($844 | 0));
} else FUNCTION_TABLE_viii[$841 & 127](HEAP32[$30 >> 2] | 0, $843, $844 - $843 | 0);
}
break;
}
case 7:
{
$868 = HEAP32[$52 >> 2] | 0;
if ($868 | 0) {
HEAP8[$7 >> 0] = 10;
FUNCTION_TABLE_viii[$868 & 127](HEAP32[$30 >> 2] | 0, $7, 1);
break L7;
}
$871 = HEAP32[$25 >> 2] | 0;
if ($871 | 0) {
$873 = HEAP32[$9 >> 2] | 0;
HEAP32[$7 >> 2] = $873;
if (!(HEAP8[$26 >> 0] | 0)) {
if ((HEAP32[$15 >> 2] | 0) == ($2 | 0)) {
$$0$ph$i522 = $$pre$phi769Z2D;
$$024$ph$i521 = $$pre$phiZ2D;
} else {
$878 = HEAP32[$$pre$phi771Z2D >> 2] | 0;
$$0$ph$i522 = $878 + 4 | 0;
$$024$ph$i521 = $878;
}
do {
HEAP32[$8 >> 2] = HEAP32[$27 >> 2];
FUNCTION_TABLE_viiiii[HEAP32[$28 >> 2] & 15]($2, $7, $71, $8, HEAP32[$29 >> 2] | 0);
HEAP32[$$0$ph$i522 >> 2] = HEAP32[$7 >> 2];
$886 = HEAP32[$27 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[$25 >> 2] & 127](HEAP32[$30 >> 2] | 0, $886, (HEAP32[$8 >> 2] | 0) - $886 | 0);
HEAP32[$$024$ph$i521 >> 2] = HEAP32[$7 >> 2];
} while ((HEAP32[$7 >> 2] | 0) != ($71 | 0));
} else FUNCTION_TABLE_viii[$871 & 127](HEAP32[$30 >> 2] | 0, $873, $70 - $873 | 0);
}
break;
}
case 8:
{
$896 = HEAP32[$66 >> 2] | 0;
if (!$896) {
$899 = HEAP32[$25 >> 2] | 0;
if ($899 | 0) {
$901 = HEAP32[$9 >> 2] | 0;
HEAP32[$7 >> 2] = $901;
if (!(HEAP8[$26 >> 0] | 0)) {
if ((HEAP32[$15 >> 2] | 0) == ($2 | 0)) {
$$0$ph$i527 = $$pre$phi769Z2D;
$$024$ph$i526 = $$pre$phiZ2D;
} else {
$906 = HEAP32[$$pre$phi771Z2D >> 2] | 0;
$$0$ph$i527 = $906 + 4 | 0;
$$024$ph$i526 = $906;
}
do {
HEAP32[$8 >> 2] = HEAP32[$27 >> 2];
FUNCTION_TABLE_viiiii[HEAP32[$28 >> 2] & 15]($2, $7, $71, $8, HEAP32[$29 >> 2] | 0);
HEAP32[$$0$ph$i527 >> 2] = HEAP32[$7 >> 2];
$914 = HEAP32[$27 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[$25 >> 2] & 127](HEAP32[$30 >> 2] | 0, $914, (HEAP32[$8 >> 2] | 0) - $914 | 0);
HEAP32[$$024$ph$i526 >> 2] = HEAP32[$7 >> 2];
} while ((HEAP32[$7 >> 2] | 0) != ($71 | 0));
} else FUNCTION_TABLE_viii[$899 & 127](HEAP32[$30 >> 2] | 0, $901, $70 - $901 | 0);
}
} else FUNCTION_TABLE_vi[$896 & 255](HEAP32[$30 >> 2] | 0);
$924 = _doCdataSection($0, $2, $10, $4, $5, $6) | 0;
if ($924 | 0) {
$$14$ph = $924;
label = 346;
break L5;
}
if (!(HEAP32[$10 >> 2] | 0)) {
label = 299;
break L5;
}
break;
}
case 6:
{
$977 = HEAP32[$52 >> 2] | 0;
if ($977 | 0) {
if (!(HEAP8[$26 >> 0] | 0)) $984 = $71; else {
$995 = HEAP32[$9 >> 2] | 0;
FUNCTION_TABLE_viii[$977 & 127](HEAP32[$30 >> 2] | 0, $995, $70 - $995 | 0);
break L7;
}
while (1) {
HEAP32[$7 >> 2] = HEAP32[$27 >> 2];
FUNCTION_TABLE_viiiii[HEAP32[$28 >> 2] & 15]($2, $9, $984, $7, HEAP32[$29 >> 2] | 0);
HEAP32[$$0438 >> 2] = HEAP32[$9 >> 2];
$987 = HEAP32[$27 >> 2] | 0;
FUNCTION_TABLE_viii[$977 & 127](HEAP32[$30 >> 2] | 0, $987, (HEAP32[$7 >> 2] | 0) - $987 | 0);
$991 = HEAP32[$9 >> 2] | 0;
if (($991 | 0) == (HEAP32[$10 >> 2] | 0)) break;
HEAP32[$$0437 >> 2] = $991;
$984 = HEAP32[$10 >> 2] | 0;
}
break L7;
}
$998 = HEAP32[$25 >> 2] | 0;
if ($998 | 0) {
$1000 = HEAP32[$9 >> 2] | 0;
HEAP32[$7 >> 2] = $1000;
if (!(HEAP8[$26 >> 0] | 0)) {
if ((HEAP32[$15 >> 2] | 0) == ($2 | 0)) {
$$0$ph$i537 = $$pre$phi769Z2D;
$$024$ph$i536 = $$pre$phiZ2D;
} else {
$1005 = HEAP32[$$pre$phi771Z2D >> 2] | 0;
$$0$ph$i537 = $1005 + 4 | 0;
$$024$ph$i536 = $1005;
}
do {
HEAP32[$8 >> 2] = HEAP32[$27 >> 2];
FUNCTION_TABLE_viiiii[HEAP32[$28 >> 2] & 15]($2, $7, $71, $8, HEAP32[$29 >> 2] | 0);
HEAP32[$$0$ph$i537 >> 2] = HEAP32[$7 >> 2];
$1013 = HEAP32[$27 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[$25 >> 2] & 127](HEAP32[$30 >> 2] | 0, $1013, (HEAP32[$8 >> 2] | 0) - $1013 | 0);
HEAP32[$$024$ph$i536 >> 2] = HEAP32[$7 >> 2];
} while ((HEAP32[$7 >> 2] | 0) != ($71 | 0));
} else FUNCTION_TABLE_viii[$998 & 127](HEAP32[$30 >> 2] | 0, $1000, $70 - $1000 | 0);
}
break;
}
case 11:
{
if (!(_reportProcessingInstruction($0, $2, HEAP32[$9 >> 2] | 0, $71) | 0)) {
$$14$ph = 1;
label = 346;
break L5;
}
break;
}
case 13:
{
if (!(_reportComment($0, $2, HEAP32[$9 >> 2] | 0, $71) | 0)) {
$$14$ph = 1;
label = 346;
break L5;
}
break;
}
default:
{
$1029 = HEAP32[$25 >> 2] | 0;
if ($1029 | 0) {
$1031 = HEAP32[$9 >> 2] | 0;
HEAP32[$7 >> 2] = $1031;
if (!(HEAP8[$26 >> 0] | 0)) {
if ((HEAP32[$15 >> 2] | 0) == ($2 | 0)) {
$$0$ph$i = $$pre$phi769Z2D;
$$024$ph$i = $$pre$phiZ2D;
} else {
$1036 = HEAP32[$$pre$phi771Z2D >> 2] | 0;
$$0$ph$i = $1036 + 4 | 0;
$$024$ph$i = $1036;
}
do {
HEAP32[$8 >> 2] = HEAP32[$27 >> 2];
FUNCTION_TABLE_viiiii[HEAP32[$28 >> 2] & 15]($2, $7, $71, $8, HEAP32[$29 >> 2] | 0);
HEAP32[$$0$ph$i >> 2] = HEAP32[$7 >> 2];
$1044 = HEAP32[$27 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[$25 >> 2] & 127](HEAP32[$30 >> 2] | 0, $1044, (HEAP32[$8 >> 2] | 0) - $1044 | 0);
HEAP32[$$024$ph$i >> 2] = HEAP32[$7 >> 2];
} while ((HEAP32[$7 >> 2] | 0) != ($71 | 0));
} else FUNCTION_TABLE_viii[$1029 & 127](HEAP32[$30 >> 2] | 0, $1031, $70 - $1031 | 0);
}
}
} while (0);
$1054 = HEAP32[$10 >> 2] | 0;
HEAP32[$9 >> 2] = $1054;
HEAP32[$$0437 >> 2] = $1054;
switch (HEAP32[$31 >> 2] | 0) {
case 3:
{
label = 344;
break L5;
break;
}
case 2:
{
$$14$ph = 35;
label = 346;
break L5;
break;
}
default:
{}
}
}
switch (label | 0) {
case 6:
{
if ($6 << 24 >> 24) {
HEAP32[$5 >> 2] = HEAP32[$9 >> 2];
$$14$ph = 0;
STACKTOP = sp;
return $$14$ph | 0;
}
HEAP32[$$0438 >> 2] = $4;
$74 = HEAP32[$52 >> 2] | 0;
if (!$74) {
$77 = HEAP32[$25 >> 2] | 0;
if ($77 | 0) {
$79 = HEAP32[$9 >> 2] | 0;
HEAP32[$7 >> 2] = $79;
if (!(HEAP8[$26 >> 0] | 0)) {
if ((HEAP32[$15 >> 2] | 0) == ($2 | 0)) {
$$0$ph$i462 = $$pre$phi769Z2D;
$$024$ph$i461 = $$pre$phiZ2D;
} else {
$84 = HEAP32[$$pre$phi771Z2D >> 2] | 0;
$$0$ph$i462 = $84 + 4 | 0;
$$024$ph$i461 = $84;
}
do {
HEAP32[$8 >> 2] = HEAP32[$27 >> 2];
FUNCTION_TABLE_viiiii[HEAP32[$28 >> 2] & 15]($2, $7, $4, $8, HEAP32[$29 >> 2] | 0);
HEAP32[$$0$ph$i462 >> 2] = HEAP32[$7 >> 2];
$92 = HEAP32[$27 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[$25 >> 2] & 127](HEAP32[$30 >> 2] | 0, $92, (HEAP32[$8 >> 2] | 0) - $92 | 0);
HEAP32[$$024$ph$i461 >> 2] = HEAP32[$7 >> 2];
} while ((HEAP32[$7 >> 2] | 0) != ($4 | 0));
} else FUNCTION_TABLE_viii[$77 & 127](HEAP32[$30 >> 2] | 0, $79, $4 - $79 | 0);
}
} else {
HEAP8[$7 >> 0] = 10;
FUNCTION_TABLE_viii[$74 & 127](HEAP32[$30 >> 2] | 0, $7, 1);
}
if (!$1) {
$$14$ph = 3;
STACKTOP = sp;
return $$14$ph | 0;
}
if ((HEAP32[$47 >> 2] | 0) != ($1 | 0)) {
$$14$ph = 13;
STACKTOP = sp;
return $$14$ph | 0;
}
HEAP32[$5 >> 2] = $4;
$$14$ph = 0;
STACKTOP = sp;
return $$14$ph | 0;
}
case 21:
{
if ($6 << 24 >> 24) {
HEAP32[$5 >> 2] = HEAP32[$9 >> 2];
$$14$ph = 0;
STACKTOP = sp;
return $$14$ph | 0;
}
if (($1 | 0) <= 0) {
$$14$ph = 3;
STACKTOP = sp;
return $$14$ph | 0;
}
if ((HEAP32[$47 >> 2] | 0) != ($1 | 0)) {
$$14$ph = 13;
STACKTOP = sp;
return $$14$ph | 0;
}
HEAP32[$5 >> 2] = HEAP32[$9 >> 2];
$$14$ph = 0;
STACKTOP = sp;
return $$14$ph | 0;
}
case 26:
{
HEAP32[$$0437 >> 2] = $70;
$$14$ph = 4;
STACKTOP = sp;
return $$14$ph | 0;
}
case 27:
{
if (!($6 << 24 >> 24)) {
$$14$ph = 5;
STACKTOP = sp;
return $$14$ph | 0;
}
HEAP32[$5 >> 2] = HEAP32[$9 >> 2];
$$14$ph = 0;
STACKTOP = sp;
return $$14$ph | 0;
}
case 29:
{
if (!($6 << 24 >> 24)) {
$$14$ph = 6;
STACKTOP = sp;
return $$14$ph | 0;
}
HEAP32[$5 >> 2] = HEAP32[$9 >> 2];
$$14$ph = 0;
STACKTOP = sp;
return $$14$ph | 0;
}
case 46:
{
$$4$ph550 = 1;
label = 167;
break;
}
case 154:
{
HEAP8[$268 >> 0] = 0;
$$4$ph550 = 1;
label = 167;
break;
}
case 169:
{
$$14$ph = $$048$i;
STACKTOP = sp;
return $$14$ph | 0;
}
case 174:
{
FUNCTION_TABLE_vi[HEAP32[$0 + 20 >> 2] & 255]($522);
$$8$ph = 1;
label = 196;
break;
}
case 180:
{
$$8$ph = 1;
label = 196;
break;
}
case 202:
{
label = 207;
break;
}
case 236:
{
$$14$ph = _epilogProcessor($0, HEAP32[$10 >> 2] | 0, $4, $5) | 0;
STACKTOP = sp;
return $$14$ph | 0;
}
case 240:
{
HEAP32[$$0437 >> 2] = $736;
$$14$ph = 7;
STACKTOP = sp;
return $$14$ph | 0;
}
case 265:
{
$$14$ph = _epilogProcessor($0, HEAP32[$10 >> 2] | 0, $4, $5) | 0;
STACKTOP = sp;
return $$14$ph | 0;
}
case 299:
{
HEAP32[$49 >> 2] = 31;
$$14$ph = 0;
STACKTOP = sp;
return $$14$ph | 0;
}
case 300:
{
if ($6 << 24 >> 24) {
HEAP32[$5 >> 2] = HEAP32[$9 >> 2];
$$14$ph = 0;
STACKTOP = sp;
return $$14$ph | 0;
}
$930 = HEAP32[$52 >> 2] | 0;
do if (!$930) {
$948 = HEAP32[$25 >> 2] | 0;
if ($948 | 0) {
$950 = HEAP32[$9 >> 2] | 0;
HEAP32[$7 >> 2] = $950;
if (!(HEAP8[$26 >> 0] | 0)) {
if ((HEAP32[$15 >> 2] | 0) == ($2 | 0)) {
$$0$ph$i532 = $$pre$phi769Z2D;
$$024$ph$i531 = $$pre$phiZ2D;
} else {
$955 = HEAP32[$$pre$phi771Z2D >> 2] | 0;
$$0$ph$i532 = $955 + 4 | 0;
$$024$ph$i531 = $955;
}
do {
HEAP32[$8 >> 2] = HEAP32[$27 >> 2];
FUNCTION_TABLE_viiiii[HEAP32[$28 >> 2] & 15]($2, $7, $4, $8, HEAP32[$29 >> 2] | 0);
HEAP32[$$0$ph$i532 >> 2] = HEAP32[$7 >> 2];
$963 = HEAP32[$27 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[$25 >> 2] & 127](HEAP32[$30 >> 2] | 0, $963, (HEAP32[$8 >> 2] | 0) - $963 | 0);
HEAP32[$$024$ph$i531 >> 2] = HEAP32[$7 >> 2];
} while ((HEAP32[$7 >> 2] | 0) != ($4 | 0));
} else FUNCTION_TABLE_viii[$948 & 127](HEAP32[$30 >> 2] | 0, $950, $4 - $950 | 0);
}
} else if (!(HEAP8[$26 >> 0] | 0)) {
HEAP32[$7 >> 2] = HEAP32[$27 >> 2];
FUNCTION_TABLE_viiiii[HEAP32[$28 >> 2] & 15]($2, $9, $4, $7, HEAP32[$29 >> 2] | 0);
$939 = HEAP32[$27 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[$52 >> 2] & 127](HEAP32[$30 >> 2] | 0, $939, (HEAP32[$7 >> 2] | 0) - $939 | 0);
break;
} else {
$944 = HEAP32[$9 >> 2] | 0;
FUNCTION_TABLE_viii[$930 & 127](HEAP32[$30 >> 2] | 0, $944, $4 - $944 | 0);
break;
} while (0);
if (!$1) {
HEAP32[$$0437 >> 2] = $4;
$$14$ph = 3;
STACKTOP = sp;
return $$14$ph | 0;
}
if ((HEAP32[$47 >> 2] | 0) == ($1 | 0)) {
HEAP32[$5 >> 2] = $4;
$$14$ph = 0;
STACKTOP = sp;
return $$14$ph | 0;
} else {
HEAP32[$$0437 >> 2] = $4;
$$14$ph = 13;
STACKTOP = sp;
return $$14$ph | 0;
}
break;
}
case 344:
{
HEAP32[$5 >> 2] = HEAP32[$10 >> 2];
$$14$ph = 0;
STACKTOP = sp;
return $$14$ph | 0;
}
case 346:
{
STACKTOP = sp;
return $$14$ph | 0;
}
}
if ((label | 0) == 167) {
$$14$ph = $$4$ph550;
STACKTOP = sp;
return $$14$ph | 0;
} else if ((label | 0) == 196) {
$$14$ph = $$8$ph;
STACKTOP = sp;
return $$14$ph | 0;
} else if ((label | 0) == 207) {
HEAP32[$12 >> 2] = 0;
$$9$ph = 1;
}
$$14$ph = $$9$ph;
STACKTOP = sp;
return $$14$ph | 0;
}
function _little2_contentTok($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$012$ph$i$i = 0, $$0123$i = 0, $$0123299$i = 0, $$0123301$i = 0, $$013$lcssa$i$i = 0, $$069$i$i = 0, $$069102$i$i = 0, $$069104$i$i = 0, $$1 = 0, $$1101$be = 0, $$1101$i$i = 0, $$1101$ph = 0, $$1101267 = 0, $$1298$i = 0, $$2$i = 0, $$3$i = 0, $$9$i$i = 0, $$in$i$i = 0, $$in175$i$i = 0, $$in176$i$i = 0, $$in177$i$i = 0, $$in321$i$i = 0, $$mux = 0, $$pn$i$i = 0, $$pn103$i$i = 0, $$pn103$i$i$phi = 0, $$pn300$i = 0, $$pn300$i$phi = 0, $10 = 0, $104 = 0, $109 = 0, $11 = 0, $113 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $128 = 0, $129 = 0, $151 = 0, $152 = 0, $153 = 0, $162 = 0, $163 = 0, $18 = 0, $185 = 0, $194 = 0, $198 = 0, $199 = 0, $200 = 0, $209 = 0, $210 = 0, $23 = 0, $232 = 0, $235 = 0, $236 = 0, $237 = 0, $242 = 0, $247 = 0, $248 = 0, $257 = 0, $259 = 0, $26 = 0, $261 = 0, $262 = 0, $263 = 0, $267 = 0, $269 = 0, $27 = 0, $270 = 0, $277 = 0, $278 = 0, $28 = 0, $298 = 0, $298$phi = 0, $304 = 0, $308 = 0, $308$phi = 0, $313 = 0, $314 = 0, $317 = 0, $320 = 0, $331 = 0, $335 = 0, $339 = 0, $343 = 0, $346 = 0, $349 = 0, $353 = 0, $354 = 0, $362 = 0, $366 = 0, $366$phi = 0, $368 = 0, $369 = 0, $373 = 0, $38 = 0, $382 = 0, $383 = 0, $39 = 0, $4 = 0, $402 = 0, $403 = 0, $404 = 0, $406 = 0, $427 = 0, $430 = 0, $440 = 0, $449 = 0, $451 = 0, $458 = 0, $479 = 0, $480 = 0, $500 = 0, $507 = 0, $60 = 0, $7 = 0, $70 = 0, $8 = 0, $80 = 0, $86 = 0, $92 = 0, $98 = 0, $storemerge$i$i = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$4 = sp;
if (($1 | 0) == ($2 | 0)) {
$$1 = -4;
STACKTOP = sp;
return $$1 | 0;
}
$7 = $1;
$8 = $2 - $7 | 0;
$10 = ($8 & 1 | 0) == 0;
$11 = $8 & -2;
$12 = ($11 | 0) == 0;
$$mux = $10 | $12 ? $2 : $1 + $11 | 0;
if (!($10 | $12 ^ 1)) {
$$1 = -1;
STACKTOP = sp;
return $$1 | 0;
}
L7 : do switch (HEAP8[$1 + 1 >> 0] | 0) {
case 0:
{
$18 = $0 + 72 | 0;
switch (HEAP8[$18 + (HEAPU8[$1 >> 0] | 0) >> 0] | 0) {
case 7:
{
label = 204;
break L7;
break;
}
case 8:
case 1:
case 0:
{
label = 206;
break L7;
break;
}
case 2:
{
$23 = $1 + 2 | 0;
if (($23 | 0) == ($$mux | 0)) {
$$1 = -1;
STACKTOP = sp;
return $$1 | 0;
}
$26 = HEAP8[$1 + 3 >> 0] | 0;
L14 : do switch ($26 << 24 >> 24) {
case 0:
{
$28 = HEAP8[$23 >> 0] | 0;
switch (HEAP8[$18 + ($28 & 255) >> 0] | 0) {
case 29:
{
$39 = $28;
label = 12;
break L14;
break;
}
case 24:
case 22:
{
break L14;
break;
}
case 7:
{
label = 18;
break L14;
break;
}
case 5:
{
if (($$mux - $23 | 0) < 2) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $23;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
case 6:
{
if (($$mux - $23 | 0) < 3) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $23;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
case 16:
{
$60 = $1 + 4 | 0;
if (($60 | 0) == ($$mux | 0)) {
$$1 = -1;
STACKTOP = sp;
return $$1 | 0;
}
L32 : do if (!(HEAP8[$1 + 5 >> 0] | 0)) {
switch (HEAP8[$18 + (HEAPU8[$60 >> 0] | 0) >> 0] | 0) {
case 27:
{
$$1 = _little2_scanComment($0, $1 + 6 | 0, $$mux, $3) | 0;
STACKTOP = sp;
return $$1 | 0;
}
case 20:
break;
default:
break L32;
}
$70 = $1 + 6 | 0;
if (($$mux - $70 | 0) < 12) {
$$1 = -1;
STACKTOP = sp;
return $$1 | 0;
}
do if (!(HEAP8[$1 + 7 >> 0] | 0)) if ((HEAP8[$70 >> 0] | 0) == 67) {
$80 = $1 + 8 | 0;
if (!(HEAP8[$1 + 9 >> 0] | 0)) if ((HEAP8[$80 >> 0] | 0) == 68) {
$86 = $1 + 10 | 0;
if (!(HEAP8[$1 + 11 >> 0] | 0)) if ((HEAP8[$86 >> 0] | 0) == 65) {
$92 = $1 + 12 | 0;
if (!(HEAP8[$1 + 13 >> 0] | 0)) if ((HEAP8[$92 >> 0] | 0) == 84) {
$98 = $1 + 14 | 0;
if (HEAP8[$1 + 15 >> 0] | 0) {
$$012$ph$i$i = 0;
$$013$lcssa$i$i = $98;
break;
}
if ((HEAP8[$98 >> 0] | 0) != 65) {
$$012$ph$i$i = 0;
$$013$lcssa$i$i = $98;
break;
}
$104 = $1 + 16 | 0;
if (HEAP8[$1 + 17 >> 0] | 0) {
$$012$ph$i$i = 0;
$$013$lcssa$i$i = $104;
break;
}
$109 = (HEAP8[$104 >> 0] | 0) == 91;
$$012$ph$i$i = $109 ? 8 : 0;
$$013$lcssa$i$i = $109 ? $1 + 18 | 0 : $104;
} else {
$$012$ph$i$i = 0;
$$013$lcssa$i$i = $92;
} else {
$$012$ph$i$i = 0;
$$013$lcssa$i$i = $92;
}
} else {
$$012$ph$i$i = 0;
$$013$lcssa$i$i = $86;
} else {
$$012$ph$i$i = 0;
$$013$lcssa$i$i = $86;
}
} else {
$$012$ph$i$i = 0;
$$013$lcssa$i$i = $80;
} else {
$$012$ph$i$i = 0;
$$013$lcssa$i$i = $80;
}
} else {
$$012$ph$i$i = 0;
$$013$lcssa$i$i = $70;
} else {
$$012$ph$i$i = 0;
$$013$lcssa$i$i = $70;
} while (0);
HEAP32[$3 >> 2] = $$013$lcssa$i$i;
$$1 = $$012$ph$i$i;
STACKTOP = sp;
return $$1 | 0;
} while (0);
HEAP32[$3 >> 2] = $60;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
case 15:
{
$$1 = _little2_scanPi($0, $1 + 4 | 0, $$mux, $3) | 0;
STACKTOP = sp;
return $$1 | 0;
}
case 17:
{
$113 = $1 + 4 | 0;
if (($113 | 0) == ($$mux | 0)) {
$$1 = -1;
STACKTOP = sp;
return $$1 | 0;
}
$116 = HEAP8[$1 + 5 >> 0] | 0;
L63 : do switch ($116 << 24 >> 24) {
case 0:
{
$118 = HEAP8[$113 >> 0] | 0;
switch (HEAP8[$18 + ($118 & 255) >> 0] | 0) {
case 29:
{
$129 = $118;
label = 46;
break L63;
break;
}
case 24:
case 22:
{
break L63;
break;
}
case 7:
{
label = 52;
break L63;
break;
}
case 5:
{
if (($$mux - $113 | 0) < 2) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $113;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
case 6:
{
if (($$mux - $113 | 0) < 3) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $113;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
default:
{
label = 54;
break L63;
}
}
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 52;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 54;
break;
}
case -1:
{
$117 = HEAP8[$113 >> 0] | 0;
if (($117 & 255) > 253) label = 54; else {
$129 = $117;
label = 46;
}
break;
}
default:
{
$129 = HEAP8[$113 >> 0] | 0;
label = 46;
}
} while (0);
if ((label | 0) == 46) {
$128 = $129 & 255;
if (!(1 << ($128 & 31) & HEAP32[3996 + ((HEAPU8[59947 + ($116 & 255) >> 0] << 3 | $128 >>> 5) << 2) >> 2])) {
HEAP32[$3 >> 2] = $113;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
} else if ((label | 0) == 52) {
if (($$mux - $113 | 0) < 4) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $113;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 54) {
HEAP32[$3 >> 2] = $113;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
$$069102$i$i = $1 + 6 | 0;
if (($$069102$i$i | 0) == ($$mux | 0)) {
$$1 = -1;
STACKTOP = sp;
return $$1 | 0;
} else {
$$069104$i$i = $$069102$i$i;
$$pn103$i$i = $113;
}
L92 : while (1) {
$151 = HEAP8[$$pn103$i$i + 3 >> 0] | 0;
switch ($151 << 24 >> 24) {
case -37:
case -38:
case -39:
case -40:
{
label = 66;
break L92;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 75;
break L92;
break;
}
case 0:
{
$153 = HEAP8[$$069104$i$i >> 0] | 0;
switch (HEAP8[$18 + ($153 & 255) >> 0] | 0) {
case 7:
{
label = 66;
break L92;
break;
}
case 5:
{
label = 62;
break L92;
break;
}
case 6:
{
label = 64;
break L92;
break;
}
case 10:
case 9:
case 21:
{
label = 68;
break L92;
break;
}
case 11:
{
label = 74;
break L92;
break;
}
case 29:
{
$163 = $153;
label = 59;
break;
}
case 27:
case 26:
case 25:
case 24:
case 22:
break;
default:
{
label = 75;
break L92;
}
}
break;
}
case -1:
{
$152 = HEAP8[$$069104$i$i >> 0] | 0;
if (($152 & 255) > 253) {
label = 75;
break L92;
} else {
$163 = $152;
label = 59;
}
break;
}
default:
{
$163 = HEAP8[$$069104$i$i >> 0] | 0;
label = 59;
}
}
if ((label | 0) == 59) {
label = 0;
$162 = $163 & 255;
if (!(1 << ($162 & 31) & HEAP32[3996 + ((HEAPU8[60203 + ($151 & 255) >> 0] << 3 | $162 >>> 5) << 2) >> 2])) {
label = 61;
break;
}
}
$$069$i$i = $$069104$i$i + 2 | 0;
if (($$069$i$i | 0) == ($$mux | 0)) {
$$1 = -1;
label = 233;
break;
} else {
$$pn103$i$i$phi = $$069104$i$i;
$$069104$i$i = $$069$i$i;
$$pn103$i$i = $$pn103$i$i$phi;
}
}
if ((label | 0) == 61) {
HEAP32[$3 >> 2] = $$069104$i$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 62) {
if (($$mux - $$069104$i$i | 0) < 2) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $$069104$i$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 64) {
if (($$mux - $$069104$i$i | 0) < 3) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $$069104$i$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 66) {
if (($$mux - $$069104$i$i | 0) < 4) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $$069104$i$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 68) {
$185 = $$pn103$i$i + 4 | 0;
if (($185 | 0) == ($$mux | 0)) {
$$1 = -1;
STACKTOP = sp;
return $$1 | 0;
} else $$1101$i$i = $185;
L123 : while (1) {
if (HEAP8[$$1101$i$i + 1 >> 0] | 0) {
label = 72;
break;
}
switch (HEAP8[$18 + (HEAPU8[$$1101$i$i >> 0] | 0) >> 0] | 0) {
case 11:
{
label = 71;
break L123;
break;
}
case 10:
case 9:
case 21:
break;
default:
{
label = 72;
break L123;
}
}
$194 = $$1101$i$i + 2 | 0;
if (($194 | 0) == ($$mux | 0)) {
$$1 = -1;
label = 233;
break;
} else $$1101$i$i = $194;
}
if ((label | 0) == 71) {
HEAP32[$3 >> 2] = $$1101$i$i + 2;
$$1 = 5;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 72) {
HEAP32[$3 >> 2] = $$1101$i$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 233) {
STACKTOP = sp;
return $$1 | 0;
}
} else if ((label | 0) == 74) {
HEAP32[$3 >> 2] = $$pn103$i$i + 4;
$$1 = 5;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 75) {
HEAP32[$3 >> 2] = $$069104$i$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 233) {
STACKTOP = sp;
return $$1 | 0;
}
break;
}
default:
{
label = 76;
break L14;
}
}
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 18;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 76;
break;
}
case -1:
{
$27 = HEAP8[$23 >> 0] | 0;
if (($27 & 255) > 253) label = 76; else {
$39 = $27;
label = 12;
}
break;
}
default:
{
$39 = HEAP8[$23 >> 0] | 0;
label = 12;
}
} while (0);
if ((label | 0) == 12) {
$38 = $39 & 255;
if (!(1 << ($38 & 31) & HEAP32[3996 + ((HEAPU8[59947 + ($26 & 255) >> 0] << 3 | $38 >>> 5) << 2) >> 2])) {
HEAP32[$3 >> 2] = $23;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
} else if ((label | 0) == 18) {
if (($$mux - $23 | 0) < 4) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $23;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 76) {
HEAP32[$3 >> 2] = $23;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
$$0123299$i = $1 + 4 | 0;
if (($$0123299$i | 0) == ($$mux | 0)) {
$$1 = -1;
STACKTOP = sp;
return $$1 | 0;
} else {
$$0123301$i = $$0123299$i;
$$pn300$i = $23;
}
L152 : while (1) {
$198 = HEAP8[$$pn300$i + 3 >> 0] | 0;
switch ($198 << 24 >> 24) {
case -37:
case -38:
case -39:
case -40:
{
label = 88;
break L152;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 186;
break L152;
break;
}
case 0:
{
$200 = HEAP8[$$0123301$i >> 0] | 0;
switch (HEAP8[$18 + ($200 & 255) >> 0] | 0) {
case 7:
{
label = 88;
break L152;
break;
}
case 5:
{
label = 84;
break L152;
break;
}
case 6:
{
label = 86;
break L152;
break;
}
case 10:
case 9:
case 21:
{
label = 90;
break L152;
break;
}
case 11:
{
$$2$i = $$0123301$i;
label = 180;
break L152;
break;
}
case 17:
{
$$3$i = $$0123301$i;
break L152;
break;
}
case 29:
{
$210 = $200;
label = 81;
break;
}
case 27:
case 26:
case 25:
case 24:
case 22:
break;
default:
{
label = 186;
break L152;
}
}
break;
}
case -1:
{
$199 = HEAP8[$$0123301$i >> 0] | 0;
if (($199 & 255) > 253) {
label = 186;
break L152;
} else {
$210 = $199;
label = 81;
}
break;
}
default:
{
$210 = HEAP8[$$0123301$i >> 0] | 0;
label = 81;
}
}
if ((label | 0) == 81) {
label = 0;
$209 = $210 & 255;
if (!(1 << ($209 & 31) & HEAP32[3996 + ((HEAPU8[60203 + ($198 & 255) >> 0] << 3 | $209 >>> 5) << 2) >> 2])) {
label = 83;
break;
}
}
$$0123$i = $$0123301$i + 2 | 0;
if (($$0123$i | 0) == ($$mux | 0)) {
$$1 = -1;
label = 233;
break;
} else {
$$pn300$i$phi = $$0123301$i;
$$0123301$i = $$0123$i;
$$pn300$i = $$pn300$i$phi;
}
}
L161 : do if ((label | 0) == 83) {
HEAP32[$3 >> 2] = $$0123301$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 84) {
if (($$mux - $$0123301$i | 0) < 2) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $$0123301$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 86) {
if (($$mux - $$0123301$i | 0) < 3) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $$0123301$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 88) {
if (($$mux - $$0123301$i | 0) < 4) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $$0123301$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 90) {
$232 = $$pn300$i + 4 | 0;
if (($232 | 0) == ($$mux | 0)) {
$$1 = -1;
STACKTOP = sp;
return $$1 | 0;
} else $$1298$i = $232;
L183 : while (1) {
$235 = HEAP8[$$1298$i + 1 >> 0] | 0;
switch ($235 << 24 >> 24) {
case -37:
case -38:
case -39:
case -40:
{
label = 176;
break L183;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 179;
break L183;
break;
}
case -1:
{
label = 93;
break L183;
break;
}
case 0:
break;
default:
{
label = 92;
break L183;
}
}
$237 = HEAP8[$$1298$i >> 0] | 0;
switch (HEAP8[$18 + ($237 & 255) >> 0] | 0) {
case 11:
{
$$2$i = $$1298$i;
label = 180;
break L161;
break;
}
case 17:
{
$$3$i = $$1298$i;
break L161;
break;
}
case 7:
{
label = 176;
break L183;
break;
}
case 29:
{
$242 = 0;
$248 = $237;
label = 95;
break L183;
break;
}
case 24:
case 22:
{
break L183;
break;
}
case 5:
{
label = 172;
break L183;
break;
}
case 6:
{
label = 174;
break L183;
break;
}
case 10:
case 9:
case 21:
break;
default:
{
label = 179;
break L183;
}
}
$427 = $$1298$i + 2 | 0;
if (($427 | 0) == ($$mux | 0)) {
$$1 = -1;
label = 233;
break;
} else $$1298$i = $427;
}
if ((label | 0) == 92) {
$242 = $235;
$248 = HEAP8[$$1298$i >> 0] | 0;
label = 95;
} else if ((label | 0) == 93) {
$236 = HEAP8[$$1298$i >> 0] | 0;
if (($236 & 255) > 253) label = 179; else {
$242 = -1;
$248 = $236;
label = 95;
}
} else if ((label | 0) == 172) {
if (($$mux - $$1298$i | 0) < 2) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $$1298$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 174) {
if (($$mux - $$1298$i | 0) < 3) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $$1298$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 176) {
if (($$mux - $$1298$i | 0) < 4) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $$1298$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 233) {
STACKTOP = sp;
return $$1 | 0;
}
if ((label | 0) == 179) {
HEAP32[$3 >> 2] = $$1298$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
if ((label | 0) == 95) {
$247 = $248 & 255;
if (!(1 << ($247 & 31) & HEAP32[3996 + ((HEAPU8[59947 + ($242 & 255) >> 0] << 3 | $247 >>> 5) << 2) >> 2])) {
HEAP32[$3 >> 2] = $$1298$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
}
$257 = $$1298$i + 2 | 0;
HEAP32[$4 >> 2] = $257;
L214 : do if (($257 | 0) == ($$mux | 0)) $$9$i$i = -1; else {
$259 = $$mux;
$$in$i$i = $257;
L216 : while (1) {
$261 = HEAP8[$$in$i$i + 1 >> 0] | 0;
L218 : do switch ($261 << 24 >> 24) {
case -37:
case -38:
case -39:
case -40:
{
label = 112;
break L216;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 170;
break L216;
break;
}
case 0:
{
$263 = HEAP8[$$in$i$i >> 0] | 0;
L221 : do switch (HEAP8[$18 + ($263 & 255) >> 0] | 0) {
case 7:
{
label = 112;
break L216;
break;
}
case 5:
{
label = 108;
break L216;
break;
}
case 6:
{
label = 110;
break L216;
break;
}
case 29:
{
$278 = $263;
label = 105;
break L218;
break;
}
case 27:
case 26:
case 25:
case 24:
case 22:
{
$$pn$i$i = $$in$i$i;
break L218;
break;
}
case 10:
case 9:
case 21:
{
$267 = $$in$i$i + 2 | 0;
HEAP32[$4 >> 2] = $267;
if (($267 | 0) == ($$mux | 0)) {
$$9$i$i = -1;
break L214;
} else {
$$in177$i$i = $267;
$298 = $$in$i$i;
}
while (1) {
if (HEAP8[$298 + 3 >> 0] | 0) {
label = 117;
break L216;
}
switch (HEAP8[$18 + (HEAPU8[$$in177$i$i >> 0] | 0) >> 0] | 0) {
case 14:
{
$270 = $$in177$i$i;
break L221;
break;
}
case 9:
case 10:
case 21:
break;
default:
{
label = 117;
break L216;
}
}
$304 = $$in177$i$i + 2 | 0;
HEAP32[$4 >> 2] = $304;
if (($304 | 0) == ($$mux | 0)) {
$$9$i$i = -1;
break L214;
} else {
$298$phi = $$in177$i$i;
$$in177$i$i = $304;
$298 = $298$phi;
}
}
break;
}
case 14:
{
$270 = $$in$i$i;
break;
}
default:
{
label = 170;
break L216;
}
} while (0);
$269 = $270 + 2 | 0;
HEAP32[$4 >> 2] = $269;
if (($269 | 0) == ($$mux | 0)) {
$$9$i$i = -1;
break L214;
} else {
$$in175$i$i = $269;
$308 = $270;
}
while (1) {
if (HEAP8[$308 + 3 >> 0] | 0) {
label = 122;
break L216;
}
$313 = HEAP8[$18 + (HEAPU8[$$in175$i$i >> 0] | 0) >> 0] | 0;
$314 = $313 & 255;
if (($314 | 1 | 0) == 13) break;
switch ($313 << 24 >> 24) {
case 9:
case 10:
case 21:
break;
default:
{
label = 122;
break L216;
}
}
$317 = $$in175$i$i + 2 | 0;
HEAP32[$4 >> 2] = $317;
if (($317 | 0) == ($$mux | 0)) {
$$9$i$i = -1;
break L214;
} else {
$308$phi = $$in175$i$i;
$$in175$i$i = $317;
$308 = $308$phi;
}
}
$320 = $$in175$i$i + 2 | 0;
HEAP32[$4 >> 2] = $320;
if (($320 | 0) == ($$mux | 0)) {
$$9$i$i = -1;
break L214;
} else $$in321$i$i = $320;
while (1) {
switch (HEAP8[$$in321$i$i + 1 >> 0] | 0) {
case 0:
{
$331 = HEAPU8[$18 + (HEAPU8[$$in321$i$i >> 0] | 0) >> 0] | 0;
break;
}
case -37:
case -38:
case -39:
case -40:
{
$331 = 7;
break;
}
case -33:
case -34:
case -35:
case -36:
{
$331 = 8;
break;
}
case -1:
{
if ((HEAPU8[$$in321$i$i >> 0] | 0) > 253) $331 = 0; else label = 128;
break;
}
default:
label = 128;
}
if ((label | 0) == 128) {
label = 0;
$331 = 29;
}
if (($331 | 0) == ($314 | 0)) break;
switch (($331 & 255) << 24 >> 24) {
case 8:
case 1:
case 0:
{
label = 137;
break L216;
break;
}
case 2:
{
label = 143;
break L216;
break;
}
case 5:
{
if (($259 - $$in321$i$i | 0) < 2) {
$$9$i$i = -2;
break L214;
}
$335 = $$in321$i$i + 2 | 0;
HEAP32[$4 >> 2] = $335;
$349 = $335;
break;
}
case 6:
{
if (($259 - $$in321$i$i | 0) < 3) {
$$9$i$i = -2;
break L214;
}
$339 = $$in321$i$i + 3 | 0;
HEAP32[$4 >> 2] = $339;
$349 = $339;
break;
}
case 7:
{
if (($259 - $$in321$i$i | 0) < 4) {
$$9$i$i = -2;
break L214;
}
$343 = $$in321$i$i + 4 | 0;
HEAP32[$4 >> 2] = $343;
$349 = $343;
break;
}
case 3:
{
$346 = _little2_scanRef($0, $$in321$i$i + 2 | 0, $$mux, $4) | 0;
if (($346 | 0) < 1) {
label = 141;
break L216;
}
$349 = HEAP32[$4 >> 2] | 0;
break;
}
default:
{
$353 = $$in321$i$i + 2 | 0;
HEAP32[$4 >> 2] = $353;
$349 = $353;
}
}
if (($349 | 0) == ($$mux | 0)) {
$$9$i$i = -1;
break L214;
} else $$in321$i$i = $349;
}
$354 = $$in321$i$i + 2 | 0;
HEAP32[$4 >> 2] = $354;
if (($354 | 0) == ($$mux | 0)) {
$$9$i$i = -1;
break L214;
}
if (HEAP8[$$in321$i$i + 3 >> 0] | 0) {
label = 149;
break L216;
}
switch (HEAP8[$18 + (HEAPU8[$354 >> 0] | 0) >> 0] | 0) {
case 11:
{
$402 = $354;
label = 163;
break L216;
break;
}
case 17:
{
$404 = $354;
label = 164;
break L216;
break;
}
case 10:
case 9:
case 21:
break;
default:
{
label = 149;
break L216;
}
}
$362 = $$in321$i$i + 4 | 0;
HEAP32[$4 >> 2] = $362;
if (($362 | 0) == ($$mux | 0)) {
$$9$i$i = -1;
break L214;
} else {
$$in176$i$i = $362;
$366 = $354;
}
L259 : while (1) {
switch (HEAP8[$366 + 3 >> 0] | 0) {
case -33:
case -34:
case -35:
case -36:
{
label = 169;
break L216;
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 161;
break L216;
break;
}
case -1:
{
label = 152;
break L259;
break;
}
case 0:
break;
default:
{
label = 151;
break L259;
}
}
$369 = HEAP8[$$in176$i$i >> 0] | 0;
switch (HEAP8[$18 + ($369 & 255) >> 0] | 0) {
case 5:
{
label = 157;
break L216;
break;
}
case 6:
{
label = 159;
break L216;
break;
}
case 7:
{
label = 161;
break L216;
break;
}
case 11:
{
$402 = $$in176$i$i;
label = 163;
break L216;
break;
}
case 17:
{
$404 = $$in176$i$i;
label = 164;
break L216;
break;
}
case 24:
case 22:
{
$$pn$i$i = $$in176$i$i;
break L218;
break;
}
case 29:
{
$383 = $369;
break L259;
break;
}
case 10:
case 9:
case 21:
break;
default:
{
label = 169;
break L216;
}
}
$373 = $$in176$i$i + 2 | 0;
HEAP32[$4 >> 2] = $373;
if (($373 | 0) == ($$mux | 0)) {
$$9$i$i = -1;
break L214;
} else {
$366$phi = $$in176$i$i;
$$in176$i$i = $373;
$366 = $366$phi;
}
}
if ((label | 0) == 151) {
label = 0;
$383 = HEAP8[$$in176$i$i >> 0] | 0;
} else if ((label | 0) == 152) {
label = 0;
$368 = HEAP8[$$in176$i$i >> 0] | 0;
if (($368 & 255) > 253) {
label = 169;
break L216;
} else $383 = $368;
}
$382 = $383 & 255;
if (!(1 << ($382 & 31) & HEAP32[3996 + ((HEAPU8[59947 + (HEAPU8[$$in176$i$i + 1 >> 0] | 0) >> 0] << 3 | $382 >>> 5) << 2) >> 2])) {
label = 156;
break L216;
} else $$pn$i$i = $$in176$i$i;
break;
}
case -1:
{
$262 = HEAP8[$$in$i$i >> 0] | 0;
if (($262 & 255) > 253) {
label = 170;
break L216;
} else {
$278 = $262;
label = 105;
}
break;
}
default:
{
$278 = HEAP8[$$in$i$i >> 0] | 0;
label = 105;
}
} while (0);
if ((label | 0) == 105) {
label = 0;
$277 = $278 & 255;
if (!(1 << ($277 & 31) & HEAP32[3996 + ((HEAPU8[60203 + ($261 & 255) >> 0] << 3 | $277 >>> 5) << 2) >> 2])) {
label = 106;
break;
} else $$pn$i$i = $$in$i$i;
}
$storemerge$i$i = $$pn$i$i + 2 | 0;
HEAP32[$4 >> 2] = $storemerge$i$i;
if (($storemerge$i$i | 0) == ($$mux | 0)) {
$$9$i$i = -1;
break L214;
} else $$in$i$i = $storemerge$i$i;
}
switch (label | 0) {
case 106:
{
HEAP32[$3 >> 2] = $$in$i$i;
$$9$i$i = 0;
break L214;
break;
}
case 108:
{
if (($259 - $$in$i$i | 0) < 2) {
$$9$i$i = -2;
break L214;
}
HEAP32[$3 >> 2] = $$in$i$i;
$$9$i$i = 0;
break L214;
break;
}
case 110:
{
if (($259 - $$in$i$i | 0) < 3) {
$$9$i$i = -2;
break L214;
}
HEAP32[$3 >> 2] = $$in$i$i;
$$9$i$i = 0;
break L214;
break;
}
case 112:
{
if (($259 - $$in$i$i | 0) < 4) {
$$9$i$i = -2;
break L214;
}
HEAP32[$3 >> 2] = $$in$i$i;
$$9$i$i = 0;
break L214;
break;
}
case 117:
{
HEAP32[$3 >> 2] = $$in177$i$i;
$$9$i$i = 0;
break L214;
break;
}
case 122:
{
HEAP32[$3 >> 2] = $$in175$i$i;
$$9$i$i = 0;
break L214;
break;
}
case 137:
{
HEAP32[$3 >> 2] = $$in321$i$i;
$$9$i$i = 0;
break L214;
break;
}
case 141:
{
if ($346 | 0) {
$$9$i$i = $346;
break L214;
}
HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
$$9$i$i = 0;
break L214;
break;
}
case 143:
{
HEAP32[$3 >> 2] = $$in321$i$i;
$$9$i$i = 0;
break L214;
break;
}
case 149:
{
HEAP32[$3 >> 2] = $354;
$$9$i$i = 0;
break L214;
break;
}
case 156:
{
HEAP32[$3 >> 2] = $$in176$i$i;
$$9$i$i = 0;
break L214;
break;
}
case 157:
{
if (($259 - $$in176$i$i | 0) < 2) {
$$9$i$i = -2;
break L214;
}
HEAP32[$3 >> 2] = $$in176$i$i;
$$9$i$i = 0;
break L214;
break;
}
case 159:
{
if (($259 - $$in176$i$i | 0) < 3) {
$$9$i$i = -2;
break L214;
}
HEAP32[$3 >> 2] = $$in176$i$i;
$$9$i$i = 0;
break L214;
break;
}
case 161:
{
if (($259 - $$in176$i$i | 0) < 4) {
$$9$i$i = -2;
break L214;
}
HEAP32[$3 >> 2] = $$in176$i$i;
$$9$i$i = 0;
break L214;
break;
}
case 163:
{
HEAP32[$3 >> 2] = $402 + 2;
$$9$i$i = 1;
break L214;
break;
}
case 164:
{
$403 = $404 + 2 | 0;
HEAP32[$4 >> 2] = $403;
$406 = $403;
if (($403 | 0) == ($$mux | 0)) {
$$9$i$i = -1;
break L214;
}
if (!(HEAP8[$404 + 3 >> 0] | 0)) if ((HEAP8[$403 >> 0] | 0) == 62) {
HEAP32[$3 >> 2] = $404 + 4;
$$9$i$i = 3;
break L214;
}
HEAP32[$3 >> 2] = $406;
$$9$i$i = 0;
break L214;
break;
}
case 169:
{
HEAP32[$3 >> 2] = $$in176$i$i;
$$9$i$i = 0;
break L214;
break;
}
case 170:
{
HEAP32[$3 >> 2] = $$in$i$i;
$$9$i$i = 0;
break L214;
break;
}
}
} while (0);
$$1 = $$9$i$i;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 186) {
HEAP32[$3 >> 2] = $$0123301$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 233) {
STACKTOP = sp;
return $$1 | 0;
} while (0);
if ((label | 0) == 180) {
HEAP32[$3 >> 2] = $$2$i + 2;
$$1 = 2;
STACKTOP = sp;
return $$1 | 0;
}
$430 = $$3$i + 2 | 0;
if (($430 | 0) == ($$mux | 0)) {
$$1 = -1;
STACKTOP = sp;
return $$1 | 0;
}
if (!(HEAP8[$$3$i + 3 >> 0] | 0)) if ((HEAP8[$430 >> 0] | 0) == 62) {
HEAP32[$3 >> 2] = $$3$i + 4;
$$1 = 4;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $430;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
case 3:
{
$$1 = _little2_scanRef($0, $1 + 2 | 0, $$mux, $3) | 0;
STACKTOP = sp;
return $$1 | 0;
}
case 9:
{
$440 = $1 + 2 | 0;
if (($440 | 0) == ($$mux | 0)) {
$$1 = -3;
STACKTOP = sp;
return $$1 | 0;
}
if (!(HEAP8[$1 + 3 >> 0] | 0)) $449 = (HEAP8[$18 + (HEAPU8[$440 >> 0] | 0) >> 0] | 0) == 10 ? $1 + 4 | 0 : $440; else $449 = $440;
HEAP32[$3 >> 2] = $449;
$$1 = 7;
STACKTOP = sp;
return $$1 | 0;
}
case 10:
{
HEAP32[$3 >> 2] = $1 + 2;
$$1 = 7;
STACKTOP = sp;
return $$1 | 0;
}
case 4:
{
$451 = $1 + 2 | 0;
if (($451 | 0) == ($$mux | 0)) {
$$1 = -5;
STACKTOP = sp;
return $$1 | 0;
}
if (HEAP8[$1 + 3 >> 0] | 0) {
$$1101$ph = $451;
break L7;
}
if ((HEAP8[$451 >> 0] | 0) != 93) {
$$1101$ph = $451;
break L7;
}
$458 = $1 + 4 | 0;
if (($458 | 0) == ($$mux | 0)) {
$$1 = -5;
STACKTOP = sp;
return $$1 | 0;
}
if (HEAP8[$1 + 5 >> 0] | 0) {
$$1101$ph = $451;
break L7;
}
if ((HEAP8[$458 >> 0] | 0) != 62) {
$$1101$ph = $451;
break L7;
}
HEAP32[$3 >> 2] = $458;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
case 5:
{
if (($$mux - $7 | 0) < 2) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
} else {
$$1101$ph = $1 + 2 | 0;
break L7;
}
break;
}
case 6:
{
if (($$mux - $7 | 0) < 3) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
} else {
$$1101$ph = $1 + 3 | 0;
break L7;
}
break;
}
default:
{
label = 207;
break L7;
}
}
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 204;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 206;
break;
}
case -1:
{
if ((HEAPU8[$1 >> 0] | 0) > 253) label = 206; else label = 207;
break;
}
default:
label = 207;
} while (0);
do if ((label | 0) == 204) if (($$mux - $7 | 0) < 4) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
} else {
$$1101$ph = $1 + 4 | 0;
break;
} else if ((label | 0) == 206) {
HEAP32[$3 >> 2] = $1;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 207) $$1101$ph = $1 + 2 | 0; while (0);
L361 : do if (($$1101$ph | 0) != ($$mux | 0)) {
$479 = $0 + 72 | 0;
$480 = $$mux;
$$1101267 = $$1101$ph;
L363 : while (1) {
L365 : do switch (HEAP8[$$1101267 + 1 >> 0] | 0) {
case -33:
case -34:
case -35:
case -36:
{
label = 229;
break L363;
break;
}
case 0:
{
switch (HEAP8[$479 + (HEAPU8[$$1101267 >> 0] | 0) >> 0] | 0) {
case 10:
case 9:
case 8:
case 1:
case 0:
case 2:
case 3:
{
label = 229;
break L363;
break;
}
case 7:
{
label = 219;
break L365;
break;
}
case 5:
{
if (($480 - $$1101267 | 0) < 2) {
label = 214;
break L363;
}
$$1101$be = $$1101267 + 2 | 0;
break L365;
break;
}
case 6:
{
if (($480 - $$1101267 | 0) < 3) {
label = 217;
break L363;
}
$$1101$be = $$1101267 + 3 | 0;
break L365;
break;
}
case 4:
{
$500 = $$1101267 + 2 | 0;
if (($500 | 0) == ($$mux | 0)) {
label = 229;
break L363;
}
if (HEAP8[$$1101267 + 3 >> 0] | 0) {
$$1101$be = $500;
break L365;
}
if ((HEAP8[$500 >> 0] | 0) != 93) {
$$1101$be = $500;
break L365;
}
$507 = $$1101267 + 4 | 0;
if (($507 | 0) == ($$mux | 0)) {
label = 229;
break L363;
}
if (HEAP8[$$1101267 + 5 >> 0] | 0) {
$$1101$be = $500;
break L365;
}
if ((HEAP8[$507 >> 0] | 0) == 62) {
label = 228;
break L363;
} else {
$$1101$be = $500;
break L365;
}
break;
}
default:
{
label = 230;
break L365;
}
}
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 219;
break;
}
case -1:
{
if ((HEAPU8[$$1101267 >> 0] | 0) > 253) {
label = 229;
break L363;
} else label = 230;
break;
}
default:
label = 230;
} while (0);
if ((label | 0) == 219) {
label = 0;
if (($480 - $$1101267 | 0) < 4) {
label = 220;
break;
}
$$1101$be = $$1101267 + 4 | 0;
} else if ((label | 0) == 230) {
label = 0;
$$1101$be = $$1101267 + 2 | 0;
}
if (($$1101$be | 0) == ($$mux | 0)) break L361; else $$1101267 = $$1101$be;
}
if ((label | 0) == 214) {
HEAP32[$3 >> 2] = $$1101267;
$$1 = 6;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 217) {
HEAP32[$3 >> 2] = $$1101267;
$$1 = 6;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 220) {
HEAP32[$3 >> 2] = $$1101267;
$$1 = 6;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 228) {
HEAP32[$3 >> 2] = $507;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 229) {
HEAP32[$3 >> 2] = $$1101267;
$$1 = 6;
STACKTOP = sp;
return $$1 | 0;
}
} while (0);
HEAP32[$3 >> 2] = $$mux;
$$1 = 6;
STACKTOP = sp;
return $$1 | 0;
}
function _big2_contentTok($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$012$ph$i$i = 0, $$0123$i = 0, $$0123303$i = 0, $$0123305$i = 0, $$013$lcssa$i$i = 0, $$069$i$i = 0, $$069102$i$i = 0, $$069104$i$i = 0, $$1 = 0, $$1101$be = 0, $$1101$i$i = 0, $$1101$ph = 0, $$1101269 = 0, $$1302$i = 0, $$2$i = 0, $$3$i = 0, $$9$i$i = 0, $$in$i$i = 0, $$in173$i$i = 0, $$in174$i$i = 0, $$in175$i$i = 0, $$in330$i$i = 0, $$mux = 0, $$pn$i$i = 0, $$pn103$i$i = 0, $$pn103$i$i$phi = 0, $$pn304$i = 0, $$pn304$i$phi = 0, $10 = 0, $100 = 0, $106 = 0, $11 = 0, $111 = 0, $115 = 0, $117 = 0, $119 = 0, $12 = 0, $121 = 0, $131 = 0, $132 = 0, $153 = 0, $155 = 0, $157 = 0, $166 = 0, $167 = 0, $18 = 0, $189 = 0, $198 = 0, $201 = 0, $203 = 0, $205 = 0, $214 = 0, $215 = 0, $237 = 0, $239 = 0, $24 = 0, $241 = 0, $243 = 0, $248 = 0, $253 = 0, $254 = 0, $26 = 0, $263 = 0, $265 = 0, $266 = 0, $268 = 0, $270 = 0, $274 = 0, $276 = 0, $277 = 0, $28 = 0, $284 = 0, $285 = 0, $30 = 0, $306 = 0, $306$phi = 0, $311 = 0, $316 = 0, $316$phi = 0, $320 = 0, $321 = 0, $324 = 0, $327 = 0, $339 = 0, $343 = 0, $347 = 0, $351 = 0, $354 = 0, $357 = 0, $361 = 0, $362 = 0, $370 = 0, $373 = 0, $375 = 0, $375$phi = 0, $382 = 0, $385 = 0, $392 = 0, $4 = 0, $40 = 0, $41 = 0, $411 = 0, $412 = 0, $413 = 0, $415 = 0, $436 = 0, $439 = 0, $449 = 0, $458 = 0, $460 = 0, $467 = 0, $488 = 0, $489 = 0, $510 = 0, $517 = 0, $62 = 0, $7 = 0, $72 = 0, $8 = 0, $82 = 0, $88 = 0, $94 = 0, $storemerge$i$i = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$4 = sp;
if (($1 | 0) == ($2 | 0)) {
$$1 = -4;
STACKTOP = sp;
return $$1 | 0;
}
$7 = $1;
$8 = $2 - $7 | 0;
$10 = ($8 & 1 | 0) == 0;
$11 = $8 & -2;
$12 = ($11 | 0) == 0;
$$mux = $10 | $12 ? $2 : $1 + $11 | 0;
if (!($10 | $12 ^ 1)) {
$$1 = -1;
STACKTOP = sp;
return $$1 | 0;
}
L7 : do switch (HEAP8[$1 >> 0] | 0) {
case 0:
{
$18 = $0 + 72 | 0;
switch (HEAP8[$18 + (HEAPU8[$1 + 1 >> 0] | 0) >> 0] | 0) {
case 7:
{
label = 203;
break L7;
break;
}
case 8:
case 1:
case 0:
{
label = 205;
break L7;
break;
}
case 2:
{
$24 = $1 + 2 | 0;
if (($24 | 0) == ($$mux | 0)) {
$$1 = -1;
STACKTOP = sp;
return $$1 | 0;
}
$26 = HEAP8[$24 >> 0] | 0;
L14 : do switch ($26 << 24 >> 24) {
case 0:
{
$30 = HEAP8[$1 + 3 >> 0] | 0;
switch (HEAP8[$18 + ($30 & 255) >> 0] | 0) {
case 29:
{
$41 = $30;
label = 12;
break L14;
break;
}
case 24:
case 22:
{
break L14;
break;
}
case 7:
{
label = 18;
break L14;
break;
}
case 5:
{
if (($$mux - $24 | 0) < 2) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $24;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
case 6:
{
if (($$mux - $24 | 0) < 3) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $24;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
case 16:
{
$62 = $1 + 4 | 0;
if (($62 | 0) == ($$mux | 0)) {
$$1 = -1;
STACKTOP = sp;
return $$1 | 0;
}
L32 : do if (!(HEAP8[$62 >> 0] | 0)) {
switch (HEAP8[$18 + (HEAPU8[$1 + 5 >> 0] | 0) >> 0] | 0) {
case 27:
{
$$1 = _big2_scanComment($0, $1 + 6 | 0, $$mux, $3) | 0;
STACKTOP = sp;
return $$1 | 0;
}
case 20:
break;
default:
break L32;
}
$72 = $1 + 6 | 0;
if (($$mux - $72 | 0) < 12) {
$$1 = -1;
STACKTOP = sp;
return $$1 | 0;
}
do if (!(HEAP8[$72 >> 0] | 0)) if ((HEAP8[$1 + 7 >> 0] | 0) == 67) {
$82 = $1 + 8 | 0;
if (!(HEAP8[$82 >> 0] | 0)) if ((HEAP8[$1 + 9 >> 0] | 0) == 68) {
$88 = $1 + 10 | 0;
if (!(HEAP8[$88 >> 0] | 0)) if ((HEAP8[$1 + 11 >> 0] | 0) == 65) {
$94 = $1 + 12 | 0;
if (!(HEAP8[$94 >> 0] | 0)) if ((HEAP8[$1 + 13 >> 0] | 0) == 84) {
$100 = $1 + 14 | 0;
if (HEAP8[$100 >> 0] | 0) {
$$012$ph$i$i = 0;
$$013$lcssa$i$i = $100;
break;
}
if ((HEAP8[$1 + 15 >> 0] | 0) != 65) {
$$012$ph$i$i = 0;
$$013$lcssa$i$i = $100;
break;
}
$106 = $1 + 16 | 0;
if (HEAP8[$106 >> 0] | 0) {
$$012$ph$i$i = 0;
$$013$lcssa$i$i = $106;
break;
}
$111 = (HEAP8[$1 + 17 >> 0] | 0) == 91;
$$012$ph$i$i = $111 ? 8 : 0;
$$013$lcssa$i$i = $111 ? $1 + 18 | 0 : $106;
} else {
$$012$ph$i$i = 0;
$$013$lcssa$i$i = $94;
} else {
$$012$ph$i$i = 0;
$$013$lcssa$i$i = $94;
}
} else {
$$012$ph$i$i = 0;
$$013$lcssa$i$i = $88;
} else {
$$012$ph$i$i = 0;
$$013$lcssa$i$i = $88;
}
} else {
$$012$ph$i$i = 0;
$$013$lcssa$i$i = $82;
} else {
$$012$ph$i$i = 0;
$$013$lcssa$i$i = $82;
}
} else {
$$012$ph$i$i = 0;
$$013$lcssa$i$i = $72;
} else {
$$012$ph$i$i = 0;
$$013$lcssa$i$i = $72;
} while (0);
HEAP32[$3 >> 2] = $$013$lcssa$i$i;
$$1 = $$012$ph$i$i;
STACKTOP = sp;
return $$1 | 0;
} while (0);
HEAP32[$3 >> 2] = $62;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
case 15:
{
$$1 = _big2_scanPi($0, $1 + 4 | 0, $$mux, $3) | 0;
STACKTOP = sp;
return $$1 | 0;
}
case 17:
{
$115 = $1 + 4 | 0;
if (($115 | 0) == ($$mux | 0)) {
$$1 = -1;
STACKTOP = sp;
return $$1 | 0;
}
$117 = HEAP8[$115 >> 0] | 0;
L63 : do switch ($117 << 24 >> 24) {
case 0:
{
$121 = HEAP8[$1 + 5 >> 0] | 0;
switch (HEAP8[$18 + ($121 & 255) >> 0] | 0) {
case 29:
{
$132 = $121;
label = 46;
break L63;
break;
}
case 24:
case 22:
{
break L63;
break;
}
case 7:
{
label = 52;
break L63;
break;
}
case 5:
{
if (($$mux - $115 | 0) < 2) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $115;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
case 6:
{
if (($$mux - $115 | 0) < 3) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $115;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
default:
{
label = 54;
break L63;
}
}
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 52;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 54;
break;
}
case -1:
{
$119 = HEAP8[$1 + 5 >> 0] | 0;
if (($119 & 255) > 253) label = 54; else {
$132 = $119;
label = 46;
}
break;
}
default:
{
$132 = HEAP8[$1 + 5 >> 0] | 0;
label = 46;
}
} while (0);
if ((label | 0) == 46) {
$131 = $132 & 255;
if (!(1 << ($131 & 31) & HEAP32[3996 + ((HEAPU8[59947 + ($117 & 255) >> 0] << 3 | $131 >>> 5) << 2) >> 2])) {
HEAP32[$3 >> 2] = $115;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
} else if ((label | 0) == 52) {
if (($$mux - $115 | 0) < 4) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $115;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 54) {
HEAP32[$3 >> 2] = $115;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
$$069102$i$i = $1 + 6 | 0;
if (($$069102$i$i | 0) == ($$mux | 0)) {
$$1 = -1;
STACKTOP = sp;
return $$1 | 0;
} else {
$$069104$i$i = $$069102$i$i;
$$pn103$i$i = $115;
}
L92 : while (1) {
$153 = HEAP8[$$069104$i$i >> 0] | 0;
switch ($153 << 24 >> 24) {
case -37:
case -38:
case -39:
case -40:
{
label = 66;
break L92;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 75;
break L92;
break;
}
case 0:
{
$157 = HEAP8[$$pn103$i$i + 3 >> 0] | 0;
switch (HEAP8[$18 + ($157 & 255) >> 0] | 0) {
case 7:
{
label = 66;
break L92;
break;
}
case 5:
{
label = 62;
break L92;
break;
}
case 6:
{
label = 64;
break L92;
break;
}
case 10:
case 9:
case 21:
{
label = 68;
break L92;
break;
}
case 11:
{
label = 74;
break L92;
break;
}
case 29:
{
$167 = $157;
label = 59;
break;
}
case 27:
case 26:
case 25:
case 24:
case 22:
break;
default:
{
label = 75;
break L92;
}
}
break;
}
case -1:
{
$155 = HEAP8[$$pn103$i$i + 3 >> 0] | 0;
if (($155 & 255) > 253) {
label = 75;
break L92;
} else {
$167 = $155;
label = 59;
}
break;
}
default:
{
$167 = HEAP8[$$pn103$i$i + 3 >> 0] | 0;
label = 59;
}
}
if ((label | 0) == 59) {
label = 0;
$166 = $167 & 255;
if (!(1 << ($166 & 31) & HEAP32[3996 + ((HEAPU8[60203 + ($153 & 255) >> 0] << 3 | $166 >>> 5) << 2) >> 2])) {
label = 61;
break;
}
}
$$069$i$i = $$069104$i$i + 2 | 0;
if (($$069$i$i | 0) == ($$mux | 0)) {
$$1 = -1;
label = 232;
break;
} else {
$$pn103$i$i$phi = $$069104$i$i;
$$069104$i$i = $$069$i$i;
$$pn103$i$i = $$pn103$i$i$phi;
}
}
if ((label | 0) == 61) {
HEAP32[$3 >> 2] = $$069104$i$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 62) {
if (($$mux - $$069104$i$i | 0) < 2) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $$069104$i$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 64) {
if (($$mux - $$069104$i$i | 0) < 3) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $$069104$i$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 66) {
if (($$mux - $$069104$i$i | 0) < 4) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $$069104$i$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 68) {
$189 = $$pn103$i$i + 4 | 0;
if (($189 | 0) == ($$mux | 0)) {
$$1 = -1;
STACKTOP = sp;
return $$1 | 0;
} else $$1101$i$i = $189;
L123 : while (1) {
if (HEAP8[$$1101$i$i >> 0] | 0) {
label = 72;
break;
}
switch (HEAP8[$18 + (HEAPU8[$$1101$i$i + 1 >> 0] | 0) >> 0] | 0) {
case 11:
{
label = 71;
break L123;
break;
}
case 10:
case 9:
case 21:
break;
default:
{
label = 72;
break L123;
}
}
$198 = $$1101$i$i + 2 | 0;
if (($198 | 0) == ($$mux | 0)) {
$$1 = -1;
label = 232;
break;
} else $$1101$i$i = $198;
}
if ((label | 0) == 71) {
HEAP32[$3 >> 2] = $$1101$i$i + 2;
$$1 = 5;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 72) {
HEAP32[$3 >> 2] = $$1101$i$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 232) {
STACKTOP = sp;
return $$1 | 0;
}
} else if ((label | 0) == 74) {
HEAP32[$3 >> 2] = $$pn103$i$i + 4;
$$1 = 5;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 75) {
HEAP32[$3 >> 2] = $$069104$i$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 232) {
STACKTOP = sp;
return $$1 | 0;
}
break;
}
default:
{
label = 76;
break L14;
}
}
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 18;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 76;
break;
}
case -1:
{
$28 = HEAP8[$1 + 3 >> 0] | 0;
if (($28 & 255) > 253) label = 76; else {
$41 = $28;
label = 12;
}
break;
}
default:
{
$41 = HEAP8[$1 + 3 >> 0] | 0;
label = 12;
}
} while (0);
if ((label | 0) == 12) {
$40 = $41 & 255;
if (!(1 << ($40 & 31) & HEAP32[3996 + ((HEAPU8[59947 + ($26 & 255) >> 0] << 3 | $40 >>> 5) << 2) >> 2])) {
HEAP32[$3 >> 2] = $24;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
} else if ((label | 0) == 18) {
if (($$mux - $24 | 0) < 4) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $24;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 76) {
HEAP32[$3 >> 2] = $24;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
$$0123303$i = $1 + 4 | 0;
if (($$0123303$i | 0) == ($$mux | 0)) {
$$1 = -1;
STACKTOP = sp;
return $$1 | 0;
} else {
$$0123305$i = $$0123303$i;
$$pn304$i = $24;
}
L152 : while (1) {
$201 = HEAP8[$$0123305$i >> 0] | 0;
switch ($201 << 24 >> 24) {
case -37:
case -38:
case -39:
case -40:
{
label = 88;
break L152;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 185;
break L152;
break;
}
case 0:
{
$205 = HEAP8[$$pn304$i + 3 >> 0] | 0;
switch (HEAP8[$18 + ($205 & 255) >> 0] | 0) {
case 7:
{
label = 88;
break L152;
break;
}
case 5:
{
label = 84;
break L152;
break;
}
case 6:
{
label = 86;
break L152;
break;
}
case 10:
case 9:
case 21:
{
label = 90;
break L152;
break;
}
case 11:
{
$$2$i = $$0123305$i;
label = 179;
break L152;
break;
}
case 17:
{
$$3$i = $$0123305$i;
break L152;
break;
}
case 29:
{
$215 = $205;
label = 81;
break;
}
case 27:
case 26:
case 25:
case 24:
case 22:
break;
default:
{
label = 185;
break L152;
}
}
break;
}
case -1:
{
$203 = HEAP8[$$pn304$i + 3 >> 0] | 0;
if (($203 & 255) > 253) {
label = 185;
break L152;
} else {
$215 = $203;
label = 81;
}
break;
}
default:
{
$215 = HEAP8[$$pn304$i + 3 >> 0] | 0;
label = 81;
}
}
if ((label | 0) == 81) {
label = 0;
$214 = $215 & 255;
if (!(1 << ($214 & 31) & HEAP32[3996 + ((HEAPU8[60203 + ($201 & 255) >> 0] << 3 | $214 >>> 5) << 2) >> 2])) {
label = 83;
break;
}
}
$$0123$i = $$0123305$i + 2 | 0;
if (($$0123$i | 0) == ($$mux | 0)) {
$$1 = -1;
label = 232;
break;
} else {
$$pn304$i$phi = $$0123305$i;
$$0123305$i = $$0123$i;
$$pn304$i = $$pn304$i$phi;
}
}
L161 : do if ((label | 0) == 83) {
HEAP32[$3 >> 2] = $$0123305$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 84) {
if (($$mux - $$0123305$i | 0) < 2) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $$0123305$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 86) {
if (($$mux - $$0123305$i | 0) < 3) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $$0123305$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 88) {
if (($$mux - $$0123305$i | 0) < 4) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $$0123305$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 90) {
$237 = $$pn304$i + 4 | 0;
if (($237 | 0) == ($$mux | 0)) {
$$1 = -1;
STACKTOP = sp;
return $$1 | 0;
} else $$1302$i = $237;
L183 : while (1) {
$239 = HEAP8[$$1302$i >> 0] | 0;
switch ($239 << 24 >> 24) {
case -37:
case -38:
case -39:
case -40:
{
label = 175;
break L183;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 178;
break L183;
break;
}
case -1:
{
label = 93;
break L183;
break;
}
case 0:
break;
default:
{
label = 92;
break L183;
}
}
$243 = HEAP8[$$1302$i + 1 >> 0] | 0;
switch (HEAP8[$18 + ($243 & 255) >> 0] | 0) {
case 11:
{
$$2$i = $$1302$i;
label = 179;
break L161;
break;
}
case 17:
{
$$3$i = $$1302$i;
break L161;
break;
}
case 7:
{
label = 175;
break L183;
break;
}
case 29:
{
$248 = 0;
$254 = $243;
label = 95;
break L183;
break;
}
case 24:
case 22:
{
break L183;
break;
}
case 5:
{
label = 171;
break L183;
break;
}
case 6:
{
label = 173;
break L183;
break;
}
case 10:
case 9:
case 21:
break;
default:
{
label = 178;
break L183;
}
}
$436 = $$1302$i + 2 | 0;
if (($436 | 0) == ($$mux | 0)) {
$$1 = -1;
label = 232;
break;
} else $$1302$i = $436;
}
if ((label | 0) == 92) {
$248 = $239;
$254 = HEAP8[$$1302$i + 1 >> 0] | 0;
label = 95;
} else if ((label | 0) == 93) {
$241 = HEAP8[$$1302$i + 1 >> 0] | 0;
if (($241 & 255) > 253) label = 178; else {
$248 = -1;
$254 = $241;
label = 95;
}
} else if ((label | 0) == 171) {
if (($$mux - $$1302$i | 0) < 2) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $$1302$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 173) {
if (($$mux - $$1302$i | 0) < 3) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $$1302$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 175) {
if (($$mux - $$1302$i | 0) < 4) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $$1302$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 232) {
STACKTOP = sp;
return $$1 | 0;
}
if ((label | 0) == 178) {
HEAP32[$3 >> 2] = $$1302$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
if ((label | 0) == 95) {
$253 = $254 & 255;
if (!(1 << ($253 & 31) & HEAP32[3996 + ((HEAPU8[59947 + ($248 & 255) >> 0] << 3 | $253 >>> 5) << 2) >> 2])) {
HEAP32[$3 >> 2] = $$1302$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
}
$263 = $$1302$i + 2 | 0;
HEAP32[$4 >> 2] = $263;
L214 : do if (($263 | 0) == ($$mux | 0)) $$9$i$i = -1; else {
$265 = $$mux;
$$in$i$i = $263;
L216 : while (1) {
$266 = HEAP8[$$in$i$i >> 0] | 0;
L218 : do switch ($266 << 24 >> 24) {
case -37:
case -38:
case -39:
case -40:
{
label = 112;
break L216;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 169;
break L216;
break;
}
case 0:
{
$270 = HEAP8[$$in$i$i + 1 >> 0] | 0;
L221 : do switch (HEAP8[$18 + ($270 & 255) >> 0] | 0) {
case 7:
{
label = 112;
break L216;
break;
}
case 5:
{
label = 108;
break L216;
break;
}
case 6:
{
label = 110;
break L216;
break;
}
case 29:
{
$285 = $270;
label = 105;
break L218;
break;
}
case 27:
case 26:
case 25:
case 24:
case 22:
{
$$pn$i$i = $$in$i$i;
break L218;
break;
}
case 10:
case 9:
case 21:
{
$274 = $$in$i$i + 2 | 0;
HEAP32[$4 >> 2] = $274;
if (($274 | 0) == ($$mux | 0)) {
$$9$i$i = -1;
break L214;
} else {
$$in175$i$i = $274;
$306 = $$in$i$i;
}
while (1) {
if (HEAP8[$$in175$i$i >> 0] | 0) {
label = 117;
break L216;
}
switch (HEAP8[$18 + (HEAPU8[$306 + 3 >> 0] | 0) >> 0] | 0) {
case 14:
{
$277 = $$in175$i$i;
break L221;
break;
}
case 9:
case 10:
case 21:
break;
default:
{
label = 117;
break L216;
}
}
$311 = $$in175$i$i + 2 | 0;
HEAP32[$4 >> 2] = $311;
if (($311 | 0) == ($$mux | 0)) {
$$9$i$i = -1;
break L214;
} else {
$306$phi = $$in175$i$i;
$$in175$i$i = $311;
$306 = $306$phi;
}
}
break;
}
case 14:
{
$277 = $$in$i$i;
break;
}
default:
{
label = 169;
break L216;
}
} while (0);
$276 = $277 + 2 | 0;
HEAP32[$4 >> 2] = $276;
if (($276 | 0) == ($$mux | 0)) {
$$9$i$i = -1;
break L214;
} else {
$$in173$i$i = $276;
$316 = $277;
}
while (1) {
if (HEAP8[$$in173$i$i >> 0] | 0) {
label = 122;
break L216;
}
$320 = HEAP8[$18 + (HEAPU8[$316 + 3 >> 0] | 0) >> 0] | 0;
$321 = $320 & 255;
if (($321 | 1 | 0) == 13) break;
switch ($320 << 24 >> 24) {
case 9:
case 10:
case 21:
break;
default:
{
label = 122;
break L216;
}
}
$324 = $$in173$i$i + 2 | 0;
HEAP32[$4 >> 2] = $324;
if (($324 | 0) == ($$mux | 0)) {
$$9$i$i = -1;
break L214;
} else {
$316$phi = $$in173$i$i;
$$in173$i$i = $324;
$316 = $316$phi;
}
}
$327 = $$in173$i$i + 2 | 0;
HEAP32[$4 >> 2] = $327;
if (($327 | 0) == ($$mux | 0)) {
$$9$i$i = -1;
break L214;
} else $$in330$i$i = $327;
while (1) {
switch (HEAP8[$$in330$i$i >> 0] | 0) {
case 0:
{
$339 = HEAPU8[$18 + (HEAPU8[$$in330$i$i + 1 >> 0] | 0) >> 0] | 0;
break;
}
case -37:
case -38:
case -39:
case -40:
{
$339 = 7;
break;
}
case -33:
case -34:
case -35:
case -36:
{
$339 = 8;
break;
}
case -1:
{
if ((HEAPU8[$$in330$i$i + 1 >> 0] | 0) > 253) $339 = 0; else label = 128;
break;
}
default:
label = 128;
}
if ((label | 0) == 128) {
label = 0;
$339 = 29;
}
if (($339 | 0) == ($321 | 0)) break;
switch (($339 & 255) << 24 >> 24) {
case 8:
case 1:
case 0:
{
label = 137;
break L216;
break;
}
case 2:
{
label = 143;
break L216;
break;
}
case 5:
{
if (($265 - $$in330$i$i | 0) < 2) {
$$9$i$i = -2;
break L214;
}
$343 = $$in330$i$i + 2 | 0;
HEAP32[$4 >> 2] = $343;
$357 = $343;
break;
}
case 6:
{
if (($265 - $$in330$i$i | 0) < 3) {
$$9$i$i = -2;
break L214;
}
$347 = $$in330$i$i + 3 | 0;
HEAP32[$4 >> 2] = $347;
$357 = $347;
break;
}
case 7:
{
if (($265 - $$in330$i$i | 0) < 4) {
$$9$i$i = -2;
break L214;
}
$351 = $$in330$i$i + 4 | 0;
HEAP32[$4 >> 2] = $351;
$357 = $351;
break;
}
case 3:
{
$354 = _big2_scanRef($0, $$in330$i$i + 2 | 0, $$mux, $4) | 0;
if (($354 | 0) < 1) {
label = 141;
break L216;
}
$357 = HEAP32[$4 >> 2] | 0;
break;
}
default:
{
$361 = $$in330$i$i + 2 | 0;
HEAP32[$4 >> 2] = $361;
$357 = $361;
}
}
if (($357 | 0) == ($$mux | 0)) {
$$9$i$i = -1;
break L214;
} else $$in330$i$i = $357;
}
$362 = $$in330$i$i + 2 | 0;
HEAP32[$4 >> 2] = $362;
if (($362 | 0) == ($$mux | 0)) {
$$9$i$i = -1;
break L214;
}
if (HEAP8[$362 >> 0] | 0) {
label = 149;
break L216;
}
switch (HEAP8[$18 + (HEAPU8[$$in330$i$i + 3 >> 0] | 0) >> 0] | 0) {
case 11:
{
$411 = $362;
label = 162;
break L216;
break;
}
case 17:
{
$413 = $362;
label = 163;
break L216;
break;
}
case 10:
case 9:
case 21:
break;
default:
{
label = 149;
break L216;
}
}
$370 = $$in330$i$i + 4 | 0;
HEAP32[$4 >> 2] = $370;
if (($370 | 0) == ($$mux | 0)) {
$$9$i$i = -1;
break L214;
} else {
$$in174$i$i = $370;
$375 = $362;
}
L259 : while (1) {
$373 = HEAP8[$$in174$i$i >> 0] | 0;
switch ($373 << 24 >> 24) {
case -33:
case -34:
case -35:
case -36:
{
label = 168;
break L216;
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 160;
break L216;
break;
}
case -1:
{
label = 151;
break L259;
break;
}
case 0:
break;
default:
{
$385 = $373;
break L259;
}
}
switch (HEAP8[$18 + (HEAPU8[$375 + 3 >> 0] | 0) >> 0] | 0) {
case 5:
{
label = 156;
break L216;
break;
}
case 6:
{
label = 158;
break L216;
break;
}
case 7:
{
label = 160;
break L216;
break;
}
case 11:
{
$411 = $$in174$i$i;
label = 162;
break L216;
break;
}
case 17:
{
$413 = $$in174$i$i;
label = 163;
break L216;
break;
}
case 24:
case 22:
{
$$pn$i$i = $$in174$i$i;
break L218;
break;
}
case 29:
{
$385 = 0;
break L259;
break;
}
case 10:
case 9:
case 21:
break;
default:
{
label = 168;
break L216;
}
}
$382 = $$in174$i$i + 2 | 0;
HEAP32[$4 >> 2] = $382;
if (($382 | 0) == ($$mux | 0)) {
$$9$i$i = -1;
break L214;
} else {
$375$phi = $$in174$i$i;
$$in174$i$i = $382;
$375 = $375$phi;
}
}
if ((label | 0) == 151) {
label = 0;
if ((HEAPU8[$375 + 3 >> 0] | 0) > 253) {
label = 168;
break L216;
} else $385 = -1;
}
$392 = HEAPU8[$$in174$i$i + 1 >> 0] | 0;
if (!(1 << ($392 & 31) & HEAP32[3996 + (($392 >>> 5 | HEAPU8[59947 + ($385 & 255) >> 0] << 3) << 2) >> 2])) {
label = 155;
break L216;
} else $$pn$i$i = $$in174$i$i;
break;
}
case -1:
{
$268 = HEAP8[$$in$i$i + 1 >> 0] | 0;
if (($268 & 255) > 253) {
label = 169;
break L216;
} else {
$285 = $268;
label = 105;
}
break;
}
default:
{
$285 = HEAP8[$$in$i$i + 1 >> 0] | 0;
label = 105;
}
} while (0);
if ((label | 0) == 105) {
label = 0;
$284 = $285 & 255;
if (!(1 << ($284 & 31) & HEAP32[3996 + ((HEAPU8[60203 + ($266 & 255) >> 0] << 3 | $284 >>> 5) << 2) >> 2])) {
label = 106;
break;
} else $$pn$i$i = $$in$i$i;
}
$storemerge$i$i = $$pn$i$i + 2 | 0;
HEAP32[$4 >> 2] = $storemerge$i$i;
if (($storemerge$i$i | 0) == ($$mux | 0)) {
$$9$i$i = -1;
break L214;
} else $$in$i$i = $storemerge$i$i;
}
switch (label | 0) {
case 106:
{
HEAP32[$3 >> 2] = $$in$i$i;
$$9$i$i = 0;
break L214;
break;
}
case 108:
{
if (($265 - $$in$i$i | 0) < 2) {
$$9$i$i = -2;
break L214;
}
HEAP32[$3 >> 2] = $$in$i$i;
$$9$i$i = 0;
break L214;
break;
}
case 110:
{
if (($265 - $$in$i$i | 0) < 3) {
$$9$i$i = -2;
break L214;
}
HEAP32[$3 >> 2] = $$in$i$i;
$$9$i$i = 0;
break L214;
break;
}
case 112:
{
if (($265 - $$in$i$i | 0) < 4) {
$$9$i$i = -2;
break L214;
}
HEAP32[$3 >> 2] = $$in$i$i;
$$9$i$i = 0;
break L214;
break;
}
case 117:
{
HEAP32[$3 >> 2] = $$in175$i$i;
$$9$i$i = 0;
break L214;
break;
}
case 122:
{
HEAP32[$3 >> 2] = $$in173$i$i;
$$9$i$i = 0;
break L214;
break;
}
case 137:
{
HEAP32[$3 >> 2] = $$in330$i$i;
$$9$i$i = 0;
break L214;
break;
}
case 141:
{
if ($354 | 0) {
$$9$i$i = $354;
break L214;
}
HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
$$9$i$i = 0;
break L214;
break;
}
case 143:
{
HEAP32[$3 >> 2] = $$in330$i$i;
$$9$i$i = 0;
break L214;
break;
}
case 149:
{
HEAP32[$3 >> 2] = $362;
$$9$i$i = 0;
break L214;
break;
}
case 155:
{
HEAP32[$3 >> 2] = $$in174$i$i;
$$9$i$i = 0;
break L214;
break;
}
case 156:
{
if (($265 - $$in174$i$i | 0) < 2) {
$$9$i$i = -2;
break L214;
}
HEAP32[$3 >> 2] = $$in174$i$i;
$$9$i$i = 0;
break L214;
break;
}
case 158:
{
if (($265 - $$in174$i$i | 0) < 3) {
$$9$i$i = -2;
break L214;
}
HEAP32[$3 >> 2] = $$in174$i$i;
$$9$i$i = 0;
break L214;
break;
}
case 160:
{
if (($265 - $$in174$i$i | 0) < 4) {
$$9$i$i = -2;
break L214;
}
HEAP32[$3 >> 2] = $$in174$i$i;
$$9$i$i = 0;
break L214;
break;
}
case 162:
{
HEAP32[$3 >> 2] = $411 + 2;
$$9$i$i = 1;
break L214;
break;
}
case 163:
{
$412 = $413 + 2 | 0;
HEAP32[$4 >> 2] = $412;
$415 = $412;
if (($412 | 0) == ($$mux | 0)) {
$$9$i$i = -1;
break L214;
}
if (!(HEAP8[$412 >> 0] | 0)) if ((HEAP8[$413 + 3 >> 0] | 0) == 62) {
HEAP32[$3 >> 2] = $413 + 4;
$$9$i$i = 3;
break L214;
}
HEAP32[$3 >> 2] = $415;
$$9$i$i = 0;
break L214;
break;
}
case 168:
{
HEAP32[$3 >> 2] = $$in174$i$i;
$$9$i$i = 0;
break L214;
break;
}
case 169:
{
HEAP32[$3 >> 2] = $$in$i$i;
$$9$i$i = 0;
break L214;
break;
}
}
} while (0);
$$1 = $$9$i$i;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 185) {
HEAP32[$3 >> 2] = $$0123305$i;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 232) {
STACKTOP = sp;
return $$1 | 0;
} while (0);
if ((label | 0) == 179) {
HEAP32[$3 >> 2] = $$2$i + 2;
$$1 = 2;
STACKTOP = sp;
return $$1 | 0;
}
$439 = $$3$i + 2 | 0;
if (($439 | 0) == ($$mux | 0)) {
$$1 = -1;
STACKTOP = sp;
return $$1 | 0;
}
if (!(HEAP8[$439 >> 0] | 0)) if ((HEAP8[$$3$i + 3 >> 0] | 0) == 62) {
HEAP32[$3 >> 2] = $$3$i + 4;
$$1 = 4;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $439;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
case 3:
{
$$1 = _big2_scanRef($0, $1 + 2 | 0, $$mux, $3) | 0;
STACKTOP = sp;
return $$1 | 0;
}
case 9:
{
$449 = $1 + 2 | 0;
if (($449 | 0) == ($$mux | 0)) {
$$1 = -3;
STACKTOP = sp;
return $$1 | 0;
}
if (!(HEAP8[$449 >> 0] | 0)) $458 = (HEAP8[$18 + (HEAPU8[$1 + 3 >> 0] | 0) >> 0] | 0) == 10 ? $1 + 4 | 0 : $449; else $458 = $449;
HEAP32[$3 >> 2] = $458;
$$1 = 7;
STACKTOP = sp;
return $$1 | 0;
}
case 10:
{
HEAP32[$3 >> 2] = $1 + 2;
$$1 = 7;
STACKTOP = sp;
return $$1 | 0;
}
case 4:
{
$460 = $1 + 2 | 0;
if (($460 | 0) == ($$mux | 0)) {
$$1 = -5;
STACKTOP = sp;
return $$1 | 0;
}
if (HEAP8[$460 >> 0] | 0) {
$$1101$ph = $460;
break L7;
}
if ((HEAP8[$1 + 3 >> 0] | 0) != 93) {
$$1101$ph = $460;
break L7;
}
$467 = $1 + 4 | 0;
if (($467 | 0) == ($$mux | 0)) {
$$1 = -5;
STACKTOP = sp;
return $$1 | 0;
}
if (HEAP8[$467 >> 0] | 0) {
$$1101$ph = $460;
break L7;
}
if ((HEAP8[$1 + 5 >> 0] | 0) != 62) {
$$1101$ph = $460;
break L7;
}
HEAP32[$3 >> 2] = $467;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
case 5:
{
if (($$mux - $7 | 0) < 2) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
} else {
$$1101$ph = $1 + 2 | 0;
break L7;
}
break;
}
case 6:
{
if (($$mux - $7 | 0) < 3) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
} else {
$$1101$ph = $1 + 3 | 0;
break L7;
}
break;
}
default:
{
label = 206;
break L7;
}
}
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 203;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 205;
break;
}
case -1:
{
if ((HEAPU8[$1 + 1 >> 0] | 0) > 253) label = 205; else label = 206;
break;
}
default:
label = 206;
} while (0);
do if ((label | 0) == 203) if (($$mux - $7 | 0) < 4) {
$$1 = -2;
STACKTOP = sp;
return $$1 | 0;
} else {
$$1101$ph = $1 + 4 | 0;
break;
} else if ((label | 0) == 205) {
HEAP32[$3 >> 2] = $1;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 206) $$1101$ph = $1 + 2 | 0; while (0);
L360 : do if (($$1101$ph | 0) != ($$mux | 0)) {
$488 = $0 + 72 | 0;
$489 = $$mux;
$$1101269 = $$1101$ph;
L362 : while (1) {
L364 : do switch (HEAP8[$$1101269 >> 0] | 0) {
case -33:
case -34:
case -35:
case -36:
{
label = 228;
break L362;
break;
}
case 0:
{
switch (HEAP8[$488 + (HEAPU8[$$1101269 + 1 >> 0] | 0) >> 0] | 0) {
case 10:
case 9:
case 8:
case 1:
case 0:
case 2:
case 3:
{
label = 228;
break L362;
break;
}
case 7:
{
label = 218;
break L364;
break;
}
case 5:
{
if (($489 - $$1101269 | 0) < 2) {
label = 213;
break L362;
}
$$1101$be = $$1101269 + 2 | 0;
break L364;
break;
}
case 6:
{
if (($489 - $$1101269 | 0) < 3) {
label = 216;
break L362;
}
$$1101$be = $$1101269 + 3 | 0;
break L364;
break;
}
case 4:
{
$510 = $$1101269 + 2 | 0;
if (($510 | 0) == ($$mux | 0)) {
label = 228;
break L362;
}
if (HEAP8[$510 >> 0] | 0) {
$$1101$be = $510;
break L364;
}
if ((HEAP8[$$1101269 + 3 >> 0] | 0) != 93) {
$$1101$be = $510;
break L364;
}
$517 = $$1101269 + 4 | 0;
if (($517 | 0) == ($$mux | 0)) {
label = 228;
break L362;
}
if (HEAP8[$517 >> 0] | 0) {
$$1101$be = $510;
break L364;
}
if ((HEAP8[$$1101269 + 5 >> 0] | 0) == 62) {
label = 227;
break L362;
} else {
$$1101$be = $510;
break L364;
}
break;
}
default:
{
label = 229;
break L364;
}
}
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 218;
break;
}
case -1:
{
if ((HEAPU8[$$1101269 + 1 >> 0] | 0) > 253) {
label = 228;
break L362;
} else label = 229;
break;
}
default:
label = 229;
} while (0);
if ((label | 0) == 218) {
label = 0;
if (($489 - $$1101269 | 0) < 4) {
label = 219;
break;
}
$$1101$be = $$1101269 + 4 | 0;
} else if ((label | 0) == 229) {
label = 0;
$$1101$be = $$1101269 + 2 | 0;
}
if (($$1101$be | 0) == ($$mux | 0)) break L360; else $$1101269 = $$1101$be;
}
if ((label | 0) == 213) {
HEAP32[$3 >> 2] = $$1101269;
$$1 = 6;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 216) {
HEAP32[$3 >> 2] = $$1101269;
$$1 = 6;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 219) {
HEAP32[$3 >> 2] = $$1101269;
$$1 = 6;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 227) {
HEAP32[$3 >> 2] = $517;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else if ((label | 0) == 228) {
HEAP32[$3 >> 2] = $$1101269;
$$1 = 6;
STACKTOP = sp;
return $$1 | 0;
}
} while (0);
HEAP32[$3 >> 2] = $$mux;
$$1 = 6;
STACKTOP = sp;
return $$1 | 0;
}
function _malloc($0) {
$0 = $0 | 0;
var $$$0192$i = 0, $$$0193$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01926$i = 0, $$0193$lcssa$i = 0, $$01935$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024367$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0, $$124466$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$414$i = 0, $$4236$i = 0, $$4351$lcssa$i = 0, $$435113$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435712$i = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i19$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1004 = 0, $101 = 0, $1010 = 0, $1013 = 0, $1014 = 0, $102 = 0, $1032 = 0, $1034 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1052 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1062 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $157 = 0, $159 = 0, $16 = 0, $162 = 0, $164 = 0, $167 = 0, $169 = 0, $17 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0, $204 = 0, $208 = 0, $214 = 0, $221 = 0, $225 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $261 = 0, $262 = 0, $265 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $282 = 0, $292 = 0, $296 = 0, $30 = 0, $302 = 0, $306 = 0, $309 = 0, $313 = 0, $315 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $326 = 0, $328 = 0, $330 = 0, $34 = 0, $340 = 0, $341 = 0, $352 = 0, $354 = 0, $357 = 0, $359 = 0, $362 = 0, $364 = 0, $367 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $376 = 0, $377 = 0, $379 = 0, $380 = 0, $385 = 0, $386 = 0, $391 = 0, $399 = 0, $403 = 0, $409 = 0, $41 = 0, $416 = 0, $420 = 0, $428 = 0, $431 = 0, $432 = 0, $433 = 0, $437 = 0, $438 = 0, $44 = 0, $444 = 0, $449 = 0, $450 = 0, $453 = 0, $455 = 0, $458 = 0, $463 = 0, $469 = 0, $47 = 0, $471 = 0, $473 = 0, $475 = 0, $49 = 0, $492 = 0, $494 = 0, $50 = 0, $501 = 0, $502 = 0, $503 = 0, $512 = 0, $514 = 0, $515 = 0, $517 = 0, $52 = 0, $526 = 0, $530 = 0, $532 = 0, $533 = 0, $534 = 0, $54 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $56 = 0, $561 = 0, $563 = 0, $565 = 0, $570 = 0, $572 = 0, $574 = 0, $575 = 0, $576 = 0, $58 = 0, $584 = 0, $585 = 0, $588 = 0, $592 = 0, $595 = 0, $597 = 0, $6 = 0, $60 = 0, $603 = 0, $607 = 0, $611 = 0, $62 = 0, $620 = 0, $621 = 0, $627 = 0, $629 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0, $642 = 0, $644 = 0, $649 = 0, $650 = 0, $651 = 0, $657 = 0, $658 = 0, $659 = 0, $663 = 0, $67 = 0, $673 = 0, $675 = 0, $680 = 0, $681 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $72 = 0, $722 = 0, $723 = 0, $728 = 0, $73 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $753 = 0, $764 = 0, $769 = 0, $77 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $812 = 0, $815 = 0, $816 = 0, $822 = 0, $83 = 0, $830 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $87 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $9 = 0, $900 = 0, $902 = 0, $909 = 0, $910 = 0, $911 = 0, $919 = 0, $92 = 0, $923 = 0, $927 = 0, $929 = 0, $93 = 0, $935 = 0, $936 = 0, $938 = 0, $939 = 0, $941 = 0, $943 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $956 = 0, $958 = 0, $96 = 0, $964 = 0, $969 = 0, $972 = 0, $973 = 0, $974 = 0, $978 = 0, $979 = 0, $98 = 0, $985 = 0, $990 = 0, $991 = 0, $994 = 0, $996 = 0, $999 = 0, label = 0, sp = 0, $958$looptemp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$1 = sp;
do if ($0 >>> 0 < 245) {
$6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8;
$7 = $6 >>> 3;
$8 = HEAP32[17867] | 0;
$9 = $8 >>> $7;
if ($9 & 3 | 0) {
$14 = ($9 & 1 ^ 1) + $7 | 0;
$16 = 71508 + ($14 << 1 << 2) | 0;
$17 = $16 + 8 | 0;
$18 = HEAP32[$17 >> 2] | 0;
$19 = $18 + 8 | 0;
$20 = HEAP32[$19 >> 2] | 0;
do if (($20 | 0) == ($16 | 0)) HEAP32[17867] = $8 & ~(1 << $14); else {
if ((HEAP32[17871] | 0) >>> 0 > $20 >>> 0) _abort();
$27 = $20 + 12 | 0;
if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
HEAP32[$27 >> 2] = $16;
HEAP32[$17 >> 2] = $20;
break;
} else _abort();
} while (0);
$30 = $14 << 3;
HEAP32[$18 + 4 >> 2] = $30 | 3;
$34 = $18 + $30 + 4 | 0;
HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1;
$$0 = $19;
STACKTOP = sp;
return $$0 | 0;
}
$37 = HEAP32[17869] | 0;
if ($6 >>> 0 > $37 >>> 0) {
if ($9 | 0) {
$41 = 2 << $7;
$44 = $9 << $7 & ($41 | 0 - $41);
$47 = ($44 & 0 - $44) + -1 | 0;
$49 = $47 >>> 12 & 16;
$50 = $47 >>> $49;
$52 = $50 >>> 5 & 8;
$54 = $50 >>> $52;
$56 = $54 >>> 2 & 4;
$58 = $54 >>> $56;
$60 = $58 >>> 1 & 2;
$62 = $58 >>> $60;
$64 = $62 >>> 1 & 1;
$67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0;
$69 = 71508 + ($67 << 1 << 2) | 0;
$70 = $69 + 8 | 0;
$71 = HEAP32[$70 >> 2] | 0;
$72 = $71 + 8 | 0;
$73 = HEAP32[$72 >> 2] | 0;
do if (($73 | 0) == ($69 | 0)) {
$77 = $8 & ~(1 << $67);
HEAP32[17867] = $77;
$98 = $77;
} else {
if ((HEAP32[17871] | 0) >>> 0 > $73 >>> 0) _abort();
$80 = $73 + 12 | 0;
if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
HEAP32[$80 >> 2] = $69;
HEAP32[$70 >> 2] = $73;
$98 = $8;
break;
} else _abort();
} while (0);
$83 = $67 << 3;
$84 = $83 - $6 | 0;
HEAP32[$71 + 4 >> 2] = $6 | 3;
$87 = $71 + $6 | 0;
HEAP32[$87 + 4 >> 2] = $84 | 1;
HEAP32[$71 + $83 >> 2] = $84;
if ($37 | 0) {
$92 = HEAP32[17872] | 0;
$93 = $37 >>> 3;
$95 = 71508 + ($93 << 1 << 2) | 0;
$96 = 1 << $93;
if (!($98 & $96)) {
HEAP32[17867] = $98 | $96;
$$0199 = $95;
$$pre$phiZ2D = $95 + 8 | 0;
} else {
$101 = $95 + 8 | 0;
$102 = HEAP32[$101 >> 2] | 0;
if ((HEAP32[17871] | 0) >>> 0 > $102 >>> 0) _abort(); else {
$$0199 = $102;
$$pre$phiZ2D = $101;
}
}
HEAP32[$$pre$phiZ2D >> 2] = $92;
HEAP32[$$0199 + 12 >> 2] = $92;
HEAP32[$92 + 8 >> 2] = $$0199;
HEAP32[$92 + 12 >> 2] = $95;
}
HEAP32[17869] = $84;
HEAP32[17872] = $87;
$$0 = $72;
STACKTOP = sp;
return $$0 | 0;
}
$108 = HEAP32[17868] | 0;
if (!$108) $$0197 = $6; else {
$112 = ($108 & 0 - $108) + -1 | 0;
$114 = $112 >>> 12 & 16;
$115 = $112 >>> $114;
$117 = $115 >>> 5 & 8;
$119 = $115 >>> $117;
$121 = $119 >>> 2 & 4;
$123 = $119 >>> $121;
$125 = $123 >>> 1 & 2;
$127 = $123 >>> $125;
$129 = $127 >>> 1 & 1;
$134 = HEAP32[71772 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0;
$138 = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0;
$143 = HEAP32[$134 + 16 + (((HEAP32[$134 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0;
if (!$143) {
$$0192$lcssa$i = $134;
$$0193$lcssa$i = $138;
} else {
$$01926$i = $134;
$$01935$i = $138;
$146 = $143;
while (1) {
$149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0;
$150 = $149 >>> 0 < $$01935$i >>> 0;
$$$0193$i = $150 ? $149 : $$01935$i;
$$$0192$i = $150 ? $146 : $$01926$i;
$146 = HEAP32[$146 + 16 + (((HEAP32[$146 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0;
if (!$146) {
$$0192$lcssa$i = $$$0192$i;
$$0193$lcssa$i = $$$0193$i;
break;
} else {
$$01926$i = $$$0192$i;
$$01935$i = $$$0193$i;
}
}
}
$157 = HEAP32[17871] | 0;
if ($157 >>> 0 > $$0192$lcssa$i >>> 0) _abort();
$159 = $$0192$lcssa$i + $6 | 0;
if ($159 >>> 0 <= $$0192$lcssa$i >>> 0) _abort();
$162 = HEAP32[$$0192$lcssa$i + 24 >> 2] | 0;
$164 = HEAP32[$$0192$lcssa$i + 12 >> 2] | 0;
do if (($164 | 0) == ($$0192$lcssa$i | 0)) {
$175 = $$0192$lcssa$i + 20 | 0;
$176 = HEAP32[$175 >> 2] | 0;
if (!$176) {
$178 = $$0192$lcssa$i + 16 | 0;
$179 = HEAP32[$178 >> 2] | 0;
if (!$179) {
$$3$i = 0;
break;
} else {
$$1196$i = $179;
$$1198$i = $178;
}
} else {
$$1196$i = $176;
$$1198$i = $175;
}
while (1) {
$181 = $$1196$i + 20 | 0;
$182 = HEAP32[$181 >> 2] | 0;
if ($182 | 0) {
$$1196$i = $182;
$$1198$i = $181;
continue;
}
$184 = $$1196$i + 16 | 0;
$185 = HEAP32[$184 >> 2] | 0;
if (!$185) break; else {
$$1196$i = $185;
$$1198$i = $184;
}
}
if ($157 >>> 0 > $$1198$i >>> 0) _abort(); else {
HEAP32[$$1198$i >> 2] = 0;
$$3$i = $$1196$i;
break;
}
} else {
$167 = HEAP32[$$0192$lcssa$i + 8 >> 2] | 0;
if ($157 >>> 0 > $167 >>> 0) _abort();
$169 = $167 + 12 | 0;
if ((HEAP32[$169 >> 2] | 0) != ($$0192$lcssa$i | 0)) _abort();
$172 = $164 + 8 | 0;
if ((HEAP32[$172 >> 2] | 0) == ($$0192$lcssa$i | 0)) {
HEAP32[$169 >> 2] = $164;
HEAP32[$172 >> 2] = $167;
$$3$i = $164;
break;
} else _abort();
} while (0);
L73 : do if ($162 | 0) {
$190 = HEAP32[$$0192$lcssa$i + 28 >> 2] | 0;
$191 = 71772 + ($190 << 2) | 0;
do if (($$0192$lcssa$i | 0) == (HEAP32[$191 >> 2] | 0)) {
HEAP32[$191 >> 2] = $$3$i;
if (!$$3$i) {
HEAP32[17868] = $108 & ~(1 << $190);
break L73;
}
} else if ((HEAP32[17871] | 0) >>> 0 > $162 >>> 0) _abort(); else {
HEAP32[$162 + 16 + (((HEAP32[$162 + 16 >> 2] | 0) != ($$0192$lcssa$i | 0) & 1) << 2) >> 2] = $$3$i;
if (!$$3$i) break L73; else break;
} while (0);
$204 = HEAP32[17871] | 0;
if ($204 >>> 0 > $$3$i >>> 0) _abort();
HEAP32[$$3$i + 24 >> 2] = $162;
$208 = HEAP32[$$0192$lcssa$i + 16 >> 2] | 0;
do if ($208 | 0) if ($204 >>> 0 > $208 >>> 0) _abort(); else {
HEAP32[$$3$i + 16 >> 2] = $208;
HEAP32[$208 + 24 >> 2] = $$3$i;
break;
} while (0);
$214 = HEAP32[$$0192$lcssa$i + 20 >> 2] | 0;
if ($214 | 0) if ((HEAP32[17871] | 0) >>> 0 > $214 >>> 0) _abort(); else {
HEAP32[$$3$i + 20 >> 2] = $214;
HEAP32[$214 + 24 >> 2] = $$3$i;
break;
}
} while (0);
if ($$0193$lcssa$i >>> 0 < 16) {
$221 = $$0193$lcssa$i + $6 | 0;
HEAP32[$$0192$lcssa$i + 4 >> 2] = $221 | 3;
$225 = $$0192$lcssa$i + $221 + 4 | 0;
HEAP32[$225 >> 2] = HEAP32[$225 >> 2] | 1;
} else {
HEAP32[$$0192$lcssa$i + 4 >> 2] = $6 | 3;
HEAP32[$159 + 4 >> 2] = $$0193$lcssa$i | 1;
HEAP32[$159 + $$0193$lcssa$i >> 2] = $$0193$lcssa$i;
if ($37 | 0) {
$234 = HEAP32[17872] | 0;
$235 = $37 >>> 3;
$237 = 71508 + ($235 << 1 << 2) | 0;
$238 = 1 << $235;
if (!($8 & $238)) {
HEAP32[17867] = $8 | $238;
$$0189$i = $237;
$$pre$phi$iZ2D = $237 + 8 | 0;
} else {
$242 = $237 + 8 | 0;
$243 = HEAP32[$242 >> 2] | 0;
if ((HEAP32[17871] | 0) >>> 0 > $243 >>> 0) _abort(); else {
$$0189$i = $243;
$$pre$phi$iZ2D = $242;
}
}
HEAP32[$$pre$phi$iZ2D >> 2] = $234;
HEAP32[$$0189$i + 12 >> 2] = $234;
HEAP32[$234 + 8 >> 2] = $$0189$i;
HEAP32[$234 + 12 >> 2] = $237;
}
HEAP32[17869] = $$0193$lcssa$i;
HEAP32[17872] = $159;
}
$$0 = $$0192$lcssa$i + 8 | 0;
STACKTOP = sp;
return $$0 | 0;
}
} else $$0197 = $6;
} else if ($0 >>> 0 > 4294967231) $$0197 = -1; else {
$251 = $0 + 11 | 0;
$252 = $251 & -8;
$253 = HEAP32[17868] | 0;
if (!$253) $$0197 = $252; else {
$255 = 0 - $252 | 0;
$256 = $251 >>> 8;
if (!$256) $$0358$i = 0; else if ($252 >>> 0 > 16777215) $$0358$i = 31; else {
$261 = ($256 + 1048320 | 0) >>> 16 & 8;
$262 = $256 << $261;
$265 = ($262 + 520192 | 0) >>> 16 & 4;
$267 = $262 << $265;
$270 = ($267 + 245760 | 0) >>> 16 & 2;
$275 = 14 - ($265 | $261 | $270) + ($267 << $270 >>> 15) | 0;
$$0358$i = $252 >>> ($275 + 7 | 0) & 1 | $275 << 1;
}
$282 = HEAP32[71772 + ($$0358$i << 2) >> 2] | 0;
L117 : do if (!$282) {
$$2355$i = 0;
$$3$i203 = 0;
$$3350$i = $255;
label = 81;
} else {
$$0342$i = 0;
$$0347$i = $255;
$$0353$i = $282;
$$0359$i = $252 << (($$0358$i | 0) == 31 ? 0 : 25 - ($$0358$i >>> 1) | 0);
$$0362$i = 0;
while (1) {
$292 = (HEAP32[$$0353$i + 4 >> 2] & -8) - $252 | 0;
if ($292 >>> 0 < $$0347$i >>> 0) if (!$292) {
$$414$i = $$0353$i;
$$435113$i = 0;
$$435712$i = $$0353$i;
label = 85;
break L117;
} else {
$$1343$i = $$0353$i;
$$1348$i = $292;
} else {
$$1343$i = $$0342$i;
$$1348$i = $$0347$i;
}
$296 = HEAP32[$$0353$i + 20 >> 2] | 0;
$$0353$i = HEAP32[$$0353$i + 16 + ($$0359$i >>> 31 << 2) >> 2] | 0;
$$1363$i = ($296 | 0) == 0 | ($296 | 0) == ($$0353$i | 0) ? $$0362$i : $296;
$302 = ($$0353$i | 0) == 0;
if ($302) {
$$2355$i = $$1363$i;
$$3$i203 = $$1343$i;
$$3350$i = $$1348$i;
label = 81;
break;
} else {
$$0342$i = $$1343$i;
$$0347$i = $$1348$i;
$$0359$i = $$0359$i << (($302 ^ 1) & 1);
$$0362$i = $$1363$i;
}
}
} while (0);
if ((label | 0) == 81) {
if (($$2355$i | 0) == 0 & ($$3$i203 | 0) == 0) {
$306 = 2 << $$0358$i;
$309 = $253 & ($306 | 0 - $306);
if (!$309) {
$$0197 = $252;
break;
}
$313 = ($309 & 0 - $309) + -1 | 0;
$315 = $313 >>> 12 & 16;
$316 = $313 >>> $315;
$318 = $316 >>> 5 & 8;
$320 = $316 >>> $318;
$322 = $320 >>> 2 & 4;
$324 = $320 >>> $322;
$326 = $324 >>> 1 & 2;
$328 = $324 >>> $326;
$330 = $328 >>> 1 & 1;
$$4$ph$i = 0;
$$4357$ph$i = HEAP32[71772 + (($318 | $315 | $322 | $326 | $330) + ($328 >>> $330) << 2) >> 2] | 0;
} else {
$$4$ph$i = $$3$i203;
$$4357$ph$i = $$2355$i;
}
if (!$$4357$ph$i) {
$$4$lcssa$i = $$4$ph$i;
$$4351$lcssa$i = $$3350$i;
} else {
$$414$i = $$4$ph$i;
$$435113$i = $$3350$i;
$$435712$i = $$4357$ph$i;
label = 85;
}
}
if ((label | 0) == 85) while (1) {
label = 0;
$340 = (HEAP32[$$435712$i + 4 >> 2] & -8) - $252 | 0;
$341 = $340 >>> 0 < $$435113$i >>> 0;
$$$4351$i = $341 ? $340 : $$435113$i;
$$4357$$4$i = $341 ? $$435712$i : $$414$i;
$$435712$i = HEAP32[$$435712$i + 16 + (((HEAP32[$$435712$i + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0;
if (!$$435712$i) {
$$4$lcssa$i = $$4357$$4$i;
$$4351$lcssa$i = $$$4351$i;
break;
} else {
$$414$i = $$4357$$4$i;
$$435113$i = $$$4351$i;
label = 85;
}
}
if (!$$4$lcssa$i) $$0197 = $252; else if ($$4351$lcssa$i >>> 0 < ((HEAP32[17869] | 0) - $252 | 0) >>> 0) {
$352 = HEAP32[17871] | 0;
if ($352 >>> 0 > $$4$lcssa$i >>> 0) _abort();
$354 = $$4$lcssa$i + $252 | 0;
if ($354 >>> 0 <= $$4$lcssa$i >>> 0) _abort();
$357 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0;
$359 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0;
do if (($359 | 0) == ($$4$lcssa$i | 0)) {
$370 = $$4$lcssa$i + 20 | 0;
$371 = HEAP32[$370 >> 2] | 0;
if (!$371) {
$373 = $$4$lcssa$i + 16 | 0;
$374 = HEAP32[$373 >> 2] | 0;
if (!$374) {
$$3372$i = 0;
break;
} else {
$$1370$i = $374;
$$1374$i = $373;
}
} else {
$$1370$i = $371;
$$1374$i = $370;
}
while (1) {
$376 = $$1370$i + 20 | 0;
$377 = HEAP32[$376 >> 2] | 0;
if ($377 | 0) {
$$1370$i = $377;
$$1374$i = $376;
continue;
}
$379 = $$1370$i + 16 | 0;
$380 = HEAP32[$379 >> 2] | 0;
if (!$380) break; else {
$$1370$i = $380;
$$1374$i = $379;
}
}
if ($352 >>> 0 > $$1374$i >>> 0) _abort(); else {
HEAP32[$$1374$i >> 2] = 0;
$$3372$i = $$1370$i;
break;
}
} else {
$362 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0;
if ($352 >>> 0 > $362 >>> 0) _abort();
$364 = $362 + 12 | 0;
if ((HEAP32[$364 >> 2] | 0) != ($$4$lcssa$i | 0)) _abort();
$367 = $359 + 8 | 0;
if ((HEAP32[$367 >> 2] | 0) == ($$4$lcssa$i | 0)) {
HEAP32[$364 >> 2] = $359;
HEAP32[$367 >> 2] = $362;
$$3372$i = $359;
break;
} else _abort();
} while (0);
L164 : do if (!$357) $475 = $253; else {
$385 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0;
$386 = 71772 + ($385 << 2) | 0;
do if (($$4$lcssa$i | 0) == (HEAP32[$386 >> 2] | 0)) {
HEAP32[$386 >> 2] = $$3372$i;
if (!$$3372$i) {
$391 = $253 & ~(1 << $385);
HEAP32[17868] = $391;
$475 = $391;
break L164;
}
} else if ((HEAP32[17871] | 0) >>> 0 > $357 >>> 0) _abort(); else {
HEAP32[$357 + 16 + (((HEAP32[$357 + 16 >> 2] | 0) != ($$4$lcssa$i | 0) & 1) << 2) >> 2] = $$3372$i;
if (!$$3372$i) {
$475 = $253;
break L164;
} else break;
} while (0);
$399 = HEAP32[17871] | 0;
if ($399 >>> 0 > $$3372$i >>> 0) _abort();
HEAP32[$$3372$i + 24 >> 2] = $357;
$403 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0;
do if ($403 | 0) if ($399 >>> 0 > $403 >>> 0) _abort(); else {
HEAP32[$$3372$i + 16 >> 2] = $403;
HEAP32[$403 + 24 >> 2] = $$3372$i;
break;
} while (0);
$409 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0;
if (!$409) $475 = $253; else if ((HEAP32[17871] | 0) >>> 0 > $409 >>> 0) _abort(); else {
HEAP32[$$3372$i + 20 >> 2] = $409;
HEAP32[$409 + 24 >> 2] = $$3372$i;
$475 = $253;
break;
}
} while (0);
do if ($$4351$lcssa$i >>> 0 < 16) {
$416 = $$4351$lcssa$i + $252 | 0;
HEAP32[$$4$lcssa$i + 4 >> 2] = $416 | 3;
$420 = $$4$lcssa$i + $416 + 4 | 0;
HEAP32[$420 >> 2] = HEAP32[$420 >> 2] | 1;
} else {
HEAP32[$$4$lcssa$i + 4 >> 2] = $252 | 3;
HEAP32[$354 + 4 >> 2] = $$4351$lcssa$i | 1;
HEAP32[$354 + $$4351$lcssa$i >> 2] = $$4351$lcssa$i;
$428 = $$4351$lcssa$i >>> 3;
if ($$4351$lcssa$i >>> 0 < 256) {
$431 = 71508 + ($428 << 1 << 2) | 0;
$432 = HEAP32[17867] | 0;
$433 = 1 << $428;
if (!($432 & $433)) {
HEAP32[17867] = $432 | $433;
$$0368$i = $431;
$$pre$phi$i211Z2D = $431 + 8 | 0;
} else {
$437 = $431 + 8 | 0;
$438 = HEAP32[$437 >> 2] | 0;
if ((HEAP32[17871] | 0) >>> 0 > $438 >>> 0) _abort(); else {
$$0368$i = $438;
$$pre$phi$i211Z2D = $437;
}
}
HEAP32[$$pre$phi$i211Z2D >> 2] = $354;
HEAP32[$$0368$i + 12 >> 2] = $354;
HEAP32[$354 + 8 >> 2] = $$0368$i;
HEAP32[$354 + 12 >> 2] = $431;
break;
}
$444 = $$4351$lcssa$i >>> 8;
if (!$444) $$0361$i = 0; else if ($$4351$lcssa$i >>> 0 > 16777215) $$0361$i = 31; else {
$449 = ($444 + 1048320 | 0) >>> 16 & 8;
$450 = $444 << $449;
$453 = ($450 + 520192 | 0) >>> 16 & 4;
$455 = $450 << $453;
$458 = ($455 + 245760 | 0) >>> 16 & 2;
$463 = 14 - ($453 | $449 | $458) + ($455 << $458 >>> 15) | 0;
$$0361$i = $$4351$lcssa$i >>> ($463 + 7 | 0) & 1 | $463 << 1;
}
$469 = 71772 + ($$0361$i << 2) | 0;
HEAP32[$354 + 28 >> 2] = $$0361$i;
$471 = $354 + 16 | 0;
HEAP32[$471 + 4 >> 2] = 0;
HEAP32[$471 >> 2] = 0;
$473 = 1 << $$0361$i;
if (!($475 & $473)) {
HEAP32[17868] = $475 | $473;
HEAP32[$469 >> 2] = $354;
HEAP32[$354 + 24 >> 2] = $469;
HEAP32[$354 + 12 >> 2] = $354;
HEAP32[$354 + 8 >> 2] = $354;
break;
}
$$0344$i = $$4351$lcssa$i << (($$0361$i | 0) == 31 ? 0 : 25 - ($$0361$i >>> 1) | 0);
$$0345$i = HEAP32[$469 >> 2] | 0;
while (1) {
if ((HEAP32[$$0345$i + 4 >> 2] & -8 | 0) == ($$4351$lcssa$i | 0)) {
label = 139;
break;
}
$492 = $$0345$i + 16 + ($$0344$i >>> 31 << 2) | 0;
$494 = HEAP32[$492 >> 2] | 0;
if (!$494) {
label = 136;
break;
} else {
$$0344$i = $$0344$i << 1;
$$0345$i = $494;
}
}
if ((label | 0) == 136) if ((HEAP32[17871] | 0) >>> 0 > $492 >>> 0) _abort(); else {
HEAP32[$492 >> 2] = $354;
HEAP32[$354 + 24 >> 2] = $$0345$i;
HEAP32[$354 + 12 >> 2] = $354;
HEAP32[$354 + 8 >> 2] = $354;
break;
} else if ((label | 0) == 139) {
$501 = $$0345$i + 8 | 0;
$502 = HEAP32[$501 >> 2] | 0;
$503 = HEAP32[17871] | 0;
if ($503 >>> 0 <= $502 >>> 0 & $503 >>> 0 <= $$0345$i >>> 0) {
HEAP32[$502 + 12 >> 2] = $354;
HEAP32[$501 >> 2] = $354;
HEAP32[$354 + 8 >> 2] = $502;
HEAP32[$354 + 12 >> 2] = $$0345$i;
HEAP32[$354 + 24 >> 2] = 0;
break;
} else _abort();
}
} while (0);
$$0 = $$4$lcssa$i + 8 | 0;
STACKTOP = sp;
return $$0 | 0;
} else $$0197 = $252;
}
} while (0);
$512 = HEAP32[17869] | 0;
if ($512 >>> 0 >= $$0197 >>> 0) {
$514 = $512 - $$0197 | 0;
$515 = HEAP32[17872] | 0;
if ($514 >>> 0 > 15) {
$517 = $515 + $$0197 | 0;
HEAP32[17872] = $517;
HEAP32[17869] = $514;
HEAP32[$517 + 4 >> 2] = $514 | 1;
HEAP32[$515 + $512 >> 2] = $514;
HEAP32[$515 + 4 >> 2] = $$0197 | 3;
} else {
HEAP32[17869] = 0;
HEAP32[17872] = 0;
HEAP32[$515 + 4 >> 2] = $512 | 3;
$526 = $515 + $512 + 4 | 0;
HEAP32[$526 >> 2] = HEAP32[$526 >> 2] | 1;
}
$$0 = $515 + 8 | 0;
STACKTOP = sp;
return $$0 | 0;
}
$530 = HEAP32[17870] | 0;
if ($530 >>> 0 > $$0197 >>> 0) {
$532 = $530 - $$0197 | 0;
HEAP32[17870] = $532;
$533 = HEAP32[17873] | 0;
$534 = $533 + $$0197 | 0;
HEAP32[17873] = $534;
HEAP32[$534 + 4 >> 2] = $532 | 1;
HEAP32[$533 + 4 >> 2] = $$0197 | 3;
$$0 = $533 + 8 | 0;
STACKTOP = sp;
return $$0 | 0;
}
if (!(HEAP32[17985] | 0)) {
HEAP32[17987] = 4096;
HEAP32[17986] = 4096;
HEAP32[17988] = -1;
HEAP32[17989] = -1;
HEAP32[17990] = 0;
HEAP32[17978] = 0;
HEAP32[17985] = $1 & -16 ^ 1431655768;
$548 = 4096;
} else $548 = HEAP32[17987] | 0;
$545 = $$0197 + 48 | 0;
$546 = $$0197 + 47 | 0;
$547 = $548 + $546 | 0;
$549 = 0 - $548 | 0;
$550 = $547 & $549;
if ($550 >>> 0 <= $$0197 >>> 0) {
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
$552 = HEAP32[17977] | 0;
if ($552 | 0) {
$554 = HEAP32[17975] | 0;
$555 = $554 + $550 | 0;
if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
}
L244 : do if (!(HEAP32[17978] & 4)) {
$561 = HEAP32[17873] | 0;
L246 : do if (!$561) label = 163; else {
$$0$i$i = 71916;
while (1) {
$563 = HEAP32[$$0$i$i >> 2] | 0;
if ($563 >>> 0 <= $561 >>> 0) {
$565 = $$0$i$i + 4 | 0;
if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) break;
}
$570 = HEAP32[$$0$i$i + 8 >> 2] | 0;
if (!$570) {
label = 163;
break L246;
} else $$0$i$i = $570;
}
$595 = $547 - $530 & $549;
if ($595 >>> 0 < 2147483647) {
$597 = _sbrk($595 | 0) | 0;
if (($597 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$565 >> 2] | 0) | 0)) if (($597 | 0) == (-1 | 0)) $$2234243136$i = $595; else {
$$723947$i = $595;
$$748$i = $597;
label = 180;
break L244;
} else {
$$2247$ph$i = $597;
$$2253$ph$i = $595;
label = 171;
}
} else $$2234243136$i = 0;
} while (0);
do if ((label | 0) == 163) {
$572 = _sbrk(0) | 0;
if (($572 | 0) == (-1 | 0)) $$2234243136$i = 0; else {
$574 = $572;
$575 = HEAP32[17986] | 0;
$576 = $575 + -1 | 0;
$$$i = (($576 & $574 | 0) == 0 ? 0 : ($576 + $574 & 0 - $575) - $574 | 0) + $550 | 0;
$584 = HEAP32[17975] | 0;
$585 = $$$i + $584 | 0;
if ($$$i >>> 0 > $$0197 >>> 0 & $$$i >>> 0 < 2147483647) {
$588 = HEAP32[17977] | 0;
if ($588 | 0) if ($585 >>> 0 <= $584 >>> 0 | $585 >>> 0 > $588 >>> 0) {
$$2234243136$i = 0;
break;
}
$592 = _sbrk($$$i | 0) | 0;
if (($592 | 0) == ($572 | 0)) {
$$723947$i = $$$i;
$$748$i = $572;
label = 180;
break L244;
} else {
$$2247$ph$i = $592;
$$2253$ph$i = $$$i;
label = 171;
}
} else $$2234243136$i = 0;
}
} while (0);
do if ((label | 0) == 171) {
$603 = 0 - $$2253$ph$i | 0;
if (!($545 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) if (($$2247$ph$i | 0) == (-1 | 0)) {
$$2234243136$i = 0;
break;
} else {
$$723947$i = $$2253$ph$i;
$$748$i = $$2247$ph$i;
label = 180;
break L244;
}
$607 = HEAP32[17987] | 0;
$611 = $546 - $$2253$ph$i + $607 & 0 - $607;
if ($611 >>> 0 >= 2147483647) {
$$723947$i = $$2253$ph$i;
$$748$i = $$2247$ph$i;
label = 180;
break L244;
}
if ((_sbrk($611 | 0) | 0) == (-1 | 0)) {
_sbrk($603 | 0) | 0;
$$2234243136$i = 0;
break;
} else {
$$723947$i = $611 + $$2253$ph$i | 0;
$$748$i = $$2247$ph$i;
label = 180;
break L244;
}
} while (0);
HEAP32[17978] = HEAP32[17978] | 4;
$$4236$i = $$2234243136$i;
label = 178;
} else {
$$4236$i = 0;
label = 178;
} while (0);
if ((label | 0) == 178) if ($550 >>> 0 < 2147483647) {
$620 = _sbrk($550 | 0) | 0;
$621 = _sbrk(0) | 0;
$627 = $621 - $620 | 0;
$629 = $627 >>> 0 > ($$0197 + 40 | 0) >>> 0;
if (!(($620 | 0) == (-1 | 0) | $629 ^ 1 | $620 >>> 0 < $621 >>> 0 & (($620 | 0) != (-1 | 0) & ($621 | 0) != (-1 | 0)) ^ 1)) {
$$723947$i = $629 ? $627 : $$4236$i;
$$748$i = $620;
label = 180;
}
}
if ((label | 0) == 180) {
$633 = (HEAP32[17975] | 0) + $$723947$i | 0;
HEAP32[17975] = $633;
if ($633 >>> 0 > (HEAP32[17976] | 0) >>> 0) HEAP32[17976] = $633;
$636 = HEAP32[17873] | 0;
do if (!$636) {
$638 = HEAP32[17871] | 0;
if (($638 | 0) == 0 | $$748$i >>> 0 < $638 >>> 0) HEAP32[17871] = $$748$i;
HEAP32[17979] = $$748$i;
HEAP32[17980] = $$723947$i;
HEAP32[17982] = 0;
HEAP32[17876] = HEAP32[17985];
HEAP32[17875] = -1;
HEAP32[17880] = 71508;
HEAP32[17879] = 71508;
HEAP32[17882] = 71516;
HEAP32[17881] = 71516;
HEAP32[17884] = 71524;
HEAP32[17883] = 71524;
HEAP32[17886] = 71532;
HEAP32[17885] = 71532;
HEAP32[17888] = 71540;
HEAP32[17887] = 71540;
HEAP32[17890] = 71548;
HEAP32[17889] = 71548;
HEAP32[17892] = 71556;
HEAP32[17891] = 71556;
HEAP32[17894] = 71564;
HEAP32[17893] = 71564;
HEAP32[17896] = 71572;
HEAP32[17895] = 71572;
HEAP32[17898] = 71580;
HEAP32[17897] = 71580;
HEAP32[17900] = 71588;
HEAP32[17899] = 71588;
HEAP32[17902] = 71596;
HEAP32[17901] = 71596;
HEAP32[17904] = 71604;
HEAP32[17903] = 71604;
HEAP32[17906] = 71612;
HEAP32[17905] = 71612;
HEAP32[17908] = 71620;
HEAP32[17907] = 71620;
HEAP32[17910] = 71628;
HEAP32[17909] = 71628;
HEAP32[17912] = 71636;
HEAP32[17911] = 71636;
HEAP32[17914] = 71644;
HEAP32[17913] = 71644;
HEAP32[17916] = 71652;
HEAP32[17915] = 71652;
HEAP32[17918] = 71660;
HEAP32[17917] = 71660;
HEAP32[17920] = 71668;
HEAP32[17919] = 71668;
HEAP32[17922] = 71676;
HEAP32[17921] = 71676;
HEAP32[17924] = 71684;
HEAP32[17923] = 71684;
HEAP32[17926] = 71692;
HEAP32[17925] = 71692;
HEAP32[17928] = 71700;
HEAP32[17927] = 71700;
HEAP32[17930] = 71708;
HEAP32[17929] = 71708;
HEAP32[17932] = 71716;
HEAP32[17931] = 71716;
HEAP32[17934] = 71724;
HEAP32[17933] = 71724;
HEAP32[17936] = 71732;
HEAP32[17935] = 71732;
HEAP32[17938] = 71740;
HEAP32[17937] = 71740;
HEAP32[17940] = 71748;
HEAP32[17939] = 71748;
HEAP32[17942] = 71756;
HEAP32[17941] = 71756;
$642 = $$723947$i + -40 | 0;
$644 = $$748$i + 8 | 0;
$649 = ($644 & 7 | 0) == 0 ? 0 : 0 - $644 & 7;
$650 = $$748$i + $649 | 0;
$651 = $642 - $649 | 0;
HEAP32[17873] = $650;
HEAP32[17870] = $651;
HEAP32[$650 + 4 >> 2] = $651 | 1;
HEAP32[$$748$i + $642 + 4 >> 2] = 40;
HEAP32[17874] = HEAP32[17989];
} else {
$$024367$i = 71916;
while (1) {
$657 = HEAP32[$$024367$i >> 2] | 0;
$658 = $$024367$i + 4 | 0;
$659 = HEAP32[$658 >> 2] | 0;
if (($$748$i | 0) == ($657 + $659 | 0)) {
label = 188;
break;
}
$663 = HEAP32[$$024367$i + 8 >> 2] | 0;
if (!$663) break; else $$024367$i = $663;
}
if ((label | 0) == 188) if (!(HEAP32[$$024367$i + 12 >> 2] & 8)) if ($$748$i >>> 0 > $636 >>> 0 & $657 >>> 0 <= $636 >>> 0) {
HEAP32[$658 >> 2] = $659 + $$723947$i;
$673 = (HEAP32[17870] | 0) + $$723947$i | 0;
$675 = $636 + 8 | 0;
$680 = ($675 & 7 | 0) == 0 ? 0 : 0 - $675 & 7;
$681 = $636 + $680 | 0;
$682 = $673 - $680 | 0;
HEAP32[17873] = $681;
HEAP32[17870] = $682;
HEAP32[$681 + 4 >> 2] = $682 | 1;
HEAP32[$636 + $673 + 4 >> 2] = 40;
HEAP32[17874] = HEAP32[17989];
break;
}
$688 = HEAP32[17871] | 0;
if ($$748$i >>> 0 < $688 >>> 0) {
HEAP32[17871] = $$748$i;
$753 = $$748$i;
} else $753 = $688;
$690 = $$748$i + $$723947$i | 0;
$$124466$i = 71916;
while (1) {
if ((HEAP32[$$124466$i >> 2] | 0) == ($690 | 0)) {
label = 196;
break;
}
$694 = HEAP32[$$124466$i + 8 >> 2] | 0;
if (!$694) {
$$0$i$i$i = 71916;
break;
} else $$124466$i = $694;
}
if ((label | 0) == 196) if (!(HEAP32[$$124466$i + 12 >> 2] & 8)) {
HEAP32[$$124466$i >> 2] = $$748$i;
$700 = $$124466$i + 4 | 0;
HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $$723947$i;
$704 = $$748$i + 8 | 0;
$710 = $$748$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0;
$712 = $690 + 8 | 0;
$718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0;
$722 = $710 + $$0197 | 0;
$723 = $718 - $710 - $$0197 | 0;
HEAP32[$710 + 4 >> 2] = $$0197 | 3;
do if (($636 | 0) == ($718 | 0)) {
$728 = (HEAP32[17870] | 0) + $723 | 0;
HEAP32[17870] = $728;
HEAP32[17873] = $722;
HEAP32[$722 + 4 >> 2] = $728 | 1;
} else {
if ((HEAP32[17872] | 0) == ($718 | 0)) {
$734 = (HEAP32[17869] | 0) + $723 | 0;
HEAP32[17869] = $734;
HEAP32[17872] = $722;
HEAP32[$722 + 4 >> 2] = $734 | 1;
HEAP32[$722 + $734 >> 2] = $734;
break;
}
$739 = HEAP32[$718 + 4 >> 2] | 0;
if (($739 & 3 | 0) == 1) {
$742 = $739 & -8;
$743 = $739 >>> 3;
L311 : do if ($739 >>> 0 < 256) {
$746 = HEAP32[$718 + 8 >> 2] | 0;
$748 = HEAP32[$718 + 12 >> 2] | 0;
$750 = 71508 + ($743 << 1 << 2) | 0;
do if (($746 | 0) != ($750 | 0)) {
if ($753 >>> 0 > $746 >>> 0) _abort();
if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) break;
_abort();
} while (0);
if (($748 | 0) == ($746 | 0)) {
HEAP32[17867] = HEAP32[17867] & ~(1 << $743);
break;
}
do if (($748 | 0) == ($750 | 0)) $$pre$phi11$i$iZ2D = $748 + 8 | 0; else {
if ($753 >>> 0 > $748 >>> 0) _abort();
$764 = $748 + 8 | 0;
if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
$$pre$phi11$i$iZ2D = $764;
break;
}
_abort();
} while (0);
HEAP32[$746 + 12 >> 2] = $748;
HEAP32[$$pre$phi11$i$iZ2D >> 2] = $746;
} else {
$769 = HEAP32[$718 + 24 >> 2] | 0;
$771 = HEAP32[$718 + 12 >> 2] | 0;
do if (($771 | 0) == ($718 | 0)) {
$782 = $718 + 16 | 0;
$783 = $782 + 4 | 0;
$784 = HEAP32[$783 >> 2] | 0;
if (!$784) {
$786 = HEAP32[$782 >> 2] | 0;
if (!$786) {
$$3$i$i = 0;
break;
} else {
$$1291$i$i = $786;
$$1293$i$i = $782;
}
} else {
$$1291$i$i = $784;
$$1293$i$i = $783;
}
while (1) {
$788 = $$1291$i$i + 20 | 0;
$789 = HEAP32[$788 >> 2] | 0;
if ($789 | 0) {
$$1291$i$i = $789;
$$1293$i$i = $788;
continue;
}
$791 = $$1291$i$i + 16 | 0;
$792 = HEAP32[$791 >> 2] | 0;
if (!$792) break; else {
$$1291$i$i = $792;
$$1293$i$i = $791;
}
}
if ($753 >>> 0 > $$1293$i$i >>> 0) _abort(); else {
HEAP32[$$1293$i$i >> 2] = 0;
$$3$i$i = $$1291$i$i;
break;
}
} else {
$774 = HEAP32[$718 + 8 >> 2] | 0;
if ($753 >>> 0 > $774 >>> 0) _abort();
$776 = $774 + 12 | 0;
if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) _abort();
$779 = $771 + 8 | 0;
if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
HEAP32[$776 >> 2] = $771;
HEAP32[$779 >> 2] = $774;
$$3$i$i = $771;
break;
} else _abort();
} while (0);
if (!$769) break;
$797 = HEAP32[$718 + 28 >> 2] | 0;
$798 = 71772 + ($797 << 2) | 0;
do if ((HEAP32[$798 >> 2] | 0) == ($718 | 0)) {
HEAP32[$798 >> 2] = $$3$i$i;
if ($$3$i$i | 0) break;
HEAP32[17868] = HEAP32[17868] & ~(1 << $797);
break L311;
} else if ((HEAP32[17871] | 0) >>> 0 > $769 >>> 0) _abort(); else {
HEAP32[$769 + 16 + (((HEAP32[$769 + 16 >> 2] | 0) != ($718 | 0) & 1) << 2) >> 2] = $$3$i$i;
if (!$$3$i$i) break L311; else break;
} while (0);
$812 = HEAP32[17871] | 0;
if ($812 >>> 0 > $$3$i$i >>> 0) _abort();
HEAP32[$$3$i$i + 24 >> 2] = $769;
$815 = $718 + 16 | 0;
$816 = HEAP32[$815 >> 2] | 0;
do if ($816 | 0) if ($812 >>> 0 > $816 >>> 0) _abort(); else {
HEAP32[$$3$i$i + 16 >> 2] = $816;
HEAP32[$816 + 24 >> 2] = $$3$i$i;
break;
} while (0);
$822 = HEAP32[$815 + 4 >> 2] | 0;
if (!$822) break;
if ((HEAP32[17871] | 0) >>> 0 > $822 >>> 0) _abort(); else {
HEAP32[$$3$i$i + 20 >> 2] = $822;
HEAP32[$822 + 24 >> 2] = $$3$i$i;
break;
}
} while (0);
$$0$i17$i = $718 + $742 | 0;
$$0287$i$i = $742 + $723 | 0;
} else {
$$0$i17$i = $718;
$$0287$i$i = $723;
}
$830 = $$0$i17$i + 4 | 0;
HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2;
HEAP32[$722 + 4 >> 2] = $$0287$i$i | 1;
HEAP32[$722 + $$0287$i$i >> 2] = $$0287$i$i;
$836 = $$0287$i$i >>> 3;
if ($$0287$i$i >>> 0 < 256) {
$839 = 71508 + ($836 << 1 << 2) | 0;
$840 = HEAP32[17867] | 0;
$841 = 1 << $836;
do if (!($840 & $841)) {
HEAP32[17867] = $840 | $841;
$$0295$i$i = $839;
$$pre$phi$i19$iZ2D = $839 + 8 | 0;
} else {
$845 = $839 + 8 | 0;
$846 = HEAP32[$845 >> 2] | 0;
if ((HEAP32[17871] | 0) >>> 0 <= $846 >>> 0) {
$$0295$i$i = $846;
$$pre$phi$i19$iZ2D = $845;
break;
}
_abort();
} while (0);
HEAP32[$$pre$phi$i19$iZ2D >> 2] = $722;
HEAP32[$$0295$i$i + 12 >> 2] = $722;
HEAP32[$722 + 8 >> 2] = $$0295$i$i;
HEAP32[$722 + 12 >> 2] = $839;
break;
}
$852 = $$0287$i$i >>> 8;
do if (!$852) $$0296$i$i = 0; else {
if ($$0287$i$i >>> 0 > 16777215) {
$$0296$i$i = 31;
break;
}
$857 = ($852 + 1048320 | 0) >>> 16 & 8;
$858 = $852 << $857;
$861 = ($858 + 520192 | 0) >>> 16 & 4;
$863 = $858 << $861;
$866 = ($863 + 245760 | 0) >>> 16 & 2;
$871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0;
$$0296$i$i = $$0287$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1;
} while (0);
$877 = 71772 + ($$0296$i$i << 2) | 0;
HEAP32[$722 + 28 >> 2] = $$0296$i$i;
$879 = $722 + 16 | 0;
HEAP32[$879 + 4 >> 2] = 0;
HEAP32[$879 >> 2] = 0;
$881 = HEAP32[17868] | 0;
$882 = 1 << $$0296$i$i;
if (!($881 & $882)) {
HEAP32[17868] = $881 | $882;
HEAP32[$877 >> 2] = $722;
HEAP32[$722 + 24 >> 2] = $877;
HEAP32[$722 + 12 >> 2] = $722;
HEAP32[$722 + 8 >> 2] = $722;
break;
}
$$0288$i$i = $$0287$i$i << (($$0296$i$i | 0) == 31 ? 0 : 25 - ($$0296$i$i >>> 1) | 0);
$$0289$i$i = HEAP32[$877 >> 2] | 0;
while (1) {
if ((HEAP32[$$0289$i$i + 4 >> 2] & -8 | 0) == ($$0287$i$i | 0)) {
label = 263;
break;
}
$900 = $$0289$i$i + 16 + ($$0288$i$i >>> 31 << 2) | 0;
$902 = HEAP32[$900 >> 2] | 0;
if (!$902) {
label = 260;
break;
} else {
$$0288$i$i = $$0288$i$i << 1;
$$0289$i$i = $902;
}
}
if ((label | 0) == 260) if ((HEAP32[17871] | 0) >>> 0 > $900 >>> 0) _abort(); else {
HEAP32[$900 >> 2] = $722;
HEAP32[$722 + 24 >> 2] = $$0289$i$i;
HEAP32[$722 + 12 >> 2] = $722;
HEAP32[$722 + 8 >> 2] = $722;
break;
} else if ((label | 0) == 263) {
$909 = $$0289$i$i + 8 | 0;
$910 = HEAP32[$909 >> 2] | 0;
$911 = HEAP32[17871] | 0;
if ($911 >>> 0 <= $910 >>> 0 & $911 >>> 0 <= $$0289$i$i >>> 0) {
HEAP32[$910 + 12 >> 2] = $722;
HEAP32[$909 >> 2] = $722;
HEAP32[$722 + 8 >> 2] = $910;
HEAP32[$722 + 12 >> 2] = $$0289$i$i;
HEAP32[$722 + 24 >> 2] = 0;
break;
} else _abort();
}
} while (0);
$$0 = $710 + 8 | 0;
STACKTOP = sp;
return $$0 | 0;
} else $$0$i$i$i = 71916;
while (1) {
$919 = HEAP32[$$0$i$i$i >> 2] | 0;
if ($919 >>> 0 <= $636 >>> 0) {
$923 = $919 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0;
if ($923 >>> 0 > $636 >>> 0) break;
}
$$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0;
}
$927 = $923 + -47 | 0;
$929 = $927 + 8 | 0;
$935 = $927 + (($929 & 7 | 0) == 0 ? 0 : 0 - $929 & 7) | 0;
$936 = $636 + 16 | 0;
$938 = $935 >>> 0 < $936 >>> 0 ? $636 : $935;
$939 = $938 + 8 | 0;
$941 = $$723947$i + -40 | 0;
$943 = $$748$i + 8 | 0;
$948 = ($943 & 7 | 0) == 0 ? 0 : 0 - $943 & 7;
$949 = $$748$i + $948 | 0;
$950 = $941 - $948 | 0;
HEAP32[17873] = $949;
HEAP32[17870] = $950;
HEAP32[$949 + 4 >> 2] = $950 | 1;
HEAP32[$$748$i + $941 + 4 >> 2] = 40;
HEAP32[17874] = HEAP32[17989];
$956 = $938 + 4 | 0;
HEAP32[$956 >> 2] = 27;
HEAP32[$939 >> 2] = HEAP32[17979];
HEAP32[$939 + 4 >> 2] = HEAP32[17980];
HEAP32[$939 + 8 >> 2] = HEAP32[17981];
HEAP32[$939 + 12 >> 2] = HEAP32[17982];
HEAP32[17979] = $$748$i;
HEAP32[17980] = $$723947$i;
HEAP32[17982] = 0;
HEAP32[17981] = $939;
$958 = $938 + 24 | 0;
do {
$958$looptemp = $958;
$958 = $958 + 4 | 0;
HEAP32[$958 >> 2] = 7;
} while (($958$looptemp + 8 | 0) >>> 0 < $923 >>> 0);
if (($938 | 0) != ($636 | 0)) {
$964 = $938 - $636 | 0;
HEAP32[$956 >> 2] = HEAP32[$956 >> 2] & -2;
HEAP32[$636 + 4 >> 2] = $964 | 1;
HEAP32[$938 >> 2] = $964;
$969 = $964 >>> 3;
if ($964 >>> 0 < 256) {
$972 = 71508 + ($969 << 1 << 2) | 0;
$973 = HEAP32[17867] | 0;
$974 = 1 << $969;
if (!($973 & $974)) {
HEAP32[17867] = $973 | $974;
$$0211$i$i = $972;
$$pre$phi$i$iZ2D = $972 + 8 | 0;
} else {
$978 = $972 + 8 | 0;
$979 = HEAP32[$978 >> 2] | 0;
if ((HEAP32[17871] | 0) >>> 0 > $979 >>> 0) _abort(); else {
$$0211$i$i = $979;
$$pre$phi$i$iZ2D = $978;
}
}
HEAP32[$$pre$phi$i$iZ2D >> 2] = $636;
HEAP32[$$0211$i$i + 12 >> 2] = $636;
HEAP32[$636 + 8 >> 2] = $$0211$i$i;
HEAP32[$636 + 12 >> 2] = $972;
break;
}
$985 = $964 >>> 8;
if (!$985) $$0212$i$i = 0; else if ($964 >>> 0 > 16777215) $$0212$i$i = 31; else {
$990 = ($985 + 1048320 | 0) >>> 16 & 8;
$991 = $985 << $990;
$994 = ($991 + 520192 | 0) >>> 16 & 4;
$996 = $991 << $994;
$999 = ($996 + 245760 | 0) >>> 16 & 2;
$1004 = 14 - ($994 | $990 | $999) + ($996 << $999 >>> 15) | 0;
$$0212$i$i = $964 >>> ($1004 + 7 | 0) & 1 | $1004 << 1;
}
$1010 = 71772 + ($$0212$i$i << 2) | 0;
HEAP32[$636 + 28 >> 2] = $$0212$i$i;
HEAP32[$636 + 20 >> 2] = 0;
HEAP32[$936 >> 2] = 0;
$1013 = HEAP32[17868] | 0;
$1014 = 1 << $$0212$i$i;
if (!($1013 & $1014)) {
HEAP32[17868] = $1013 | $1014;
HEAP32[$1010 >> 2] = $636;
HEAP32[$636 + 24 >> 2] = $1010;
HEAP32[$636 + 12 >> 2] = $636;
HEAP32[$636 + 8 >> 2] = $636;
break;
}
$$0206$i$i = $964 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0);
$$0207$i$i = HEAP32[$1010 >> 2] | 0;
while (1) {
if ((HEAP32[$$0207$i$i + 4 >> 2] & -8 | 0) == ($964 | 0)) {
label = 289;
break;
}
$1032 = $$0207$i$i + 16 + ($$0206$i$i >>> 31 << 2) | 0;
$1034 = HEAP32[$1032 >> 2] | 0;
if (!$1034) {
label = 286;
break;
} else {
$$0206$i$i = $$0206$i$i << 1;
$$0207$i$i = $1034;
}
}
if ((label | 0) == 286) if ((HEAP32[17871] | 0) >>> 0 > $1032 >>> 0) _abort(); else {
HEAP32[$1032 >> 2] = $636;
HEAP32[$636 + 24 >> 2] = $$0207$i$i;
HEAP32[$636 + 12 >> 2] = $636;
HEAP32[$636 + 8 >> 2] = $636;
break;
} else if ((label | 0) == 289) {
$1041 = $$0207$i$i + 8 | 0;
$1042 = HEAP32[$1041 >> 2] | 0;
$1043 = HEAP32[17871] | 0;
if ($1043 >>> 0 <= $1042 >>> 0 & $1043 >>> 0 <= $$0207$i$i >>> 0) {
HEAP32[$1042 + 12 >> 2] = $636;
HEAP32[$1041 >> 2] = $636;
HEAP32[$636 + 8 >> 2] = $1042;
HEAP32[$636 + 12 >> 2] = $$0207$i$i;
HEAP32[$636 + 24 >> 2] = 0;
break;
} else _abort();
}
}
} while (0);
$1052 = HEAP32[17870] | 0;
if ($1052 >>> 0 > $$0197 >>> 0) {
$1054 = $1052 - $$0197 | 0;
HEAP32[17870] = $1054;
$1055 = HEAP32[17873] | 0;
$1056 = $1055 + $$0197 | 0;
HEAP32[17873] = $1056;
HEAP32[$1056 + 4 >> 2] = $1054 | 1;
HEAP32[$1055 + 4 >> 2] = $$0197 | 3;
$$0 = $1055 + 8 | 0;
STACKTOP = sp;
return $$0 | 0;
}
}
$1062 = ___errno_location() | 0;
HEAP32[$1062 >> 2] = 12;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
function __ZN16MotionAttributes17setFromXMLAttribsEPKcP7HashAnyIS1_S1_E9Mirroringb($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0$off0$be = 0, $$0$off0451 = 0, $$0$off0451755758 = 0, $$0$off0451755759 = 0, $$0$off0451756 = 0, $$0$off0451757 = 0, $$0$off0586 = 0, $$0101$off0$be = 0, $$0101$off0483 = 0, $$0101$off0483752760 = 0, $$0101$off0483752761 = 0, $$0101$off0483753 = 0, $$0101$off0483754 = 0, $$0101$off0585 = 0, $$0103$off0$be = 0, $$0103$off0515 = 0, $$0103$off0515750 = 0, $$0103$off0515751 = 0, $$0103$off0584 = 0, $$0105$off0$be = 0, $$0105$off0547 = 0, $$0105$off0583 = 0, $$0107$off0$be = 0, $$0107$off0579 = 0, $$0107$off0582 = 0, $$012$i$i = 0, $$01215$i$i = 0, $$01216$i$i = 0, $$1111 = 0, $$1113 = 0, $$sink = 0, $$sink$i$i = 0, $$sink19$i = 0, $$sroa$0402$0580 = 0, $$sroa$0402$1 = 0, $$sroa$0402$2 = 0, $$sroa$0402$3 = 0, $$sroa$6$0581 = 0, $10 = 0, $100 = 0, $103 = 0, $104 = 0, $105 = 0, $107 = 0, $108 = 0, $11 = 0, $111 = 0, $112 = 0, $114 = 0, $12 = 0, $121 = 0, $122 = 0, $13 = 0, $133 = 0, $134 = 0, $136 = 0, $14 = 0, $141 = 0, $142 = 0, $145 = 0, $146 = 0, $149 = 0, $150 = 0, $153 = 0, $154 = 0, $157 = 0, $158 = 0, $163 = 0, $164 = 0, $168 = 0, $169 = 0, $17 = 0, $173 = 0, $174 = 0, $178 = 0, $179 = 0, $18 = 0, $183 = 0, $184 = 0, $189 = 0, $19 = 0, $190 = 0, $196 = 0, $197 = 0, $20 = 0, $203 = 0, $204 = 0, $21 = 0, $210 = 0, $211 = 0, $217 = 0, $218 = 0, $22 = 0, $224 = 0, $225 = 0, $23 = 0, $230 = 0, $232 = 0, $233 = 0, $234 = 0, $236 = f0, $238 = 0, $24 = 0, $243 = 0, $244 = 0, $25 = 0, $250 = 0, $251 = 0, $257 = 0, $258 = 0, $26 = 0, $263 = 0, $265 = 0, $266 = 0, $267 = 0, $269 = f0, $271 = 0, $276 = 0, $277 = 0, $28 = 0, $282 = 0, $284 = 0, $285 = 0, $286 = 0, $288 = f0, $290 = 0, $295 = 0, $296 = 0, $301 = 0, $303 = 0, $304 = 0, $306 = f0, $308 = 0, $31 = 0, $313 = 0, $314 = 0, $32 = 0, $320 = 0, $321 = 0, $327 = 0, $328 = 0, $33 = 0, $334 = 0, $335 = 0, $34 = 0, $341 = 0, $342 = 0, $347 = 0, $35 = 0, $350 = f0, $352 = 0, $355 = 0, $356 = 0, $358 = f0, $36 = 0, $360 = f0, $361 = 0, $363 = 0, $364 = 0, $368 = 0, $37 = 0, $371 = 0, $372 = 0, $374 = f0, $376 = f0, $377 = 0, $379 = 0, $38 = 0, $380 = 0, $384 = 0, $386 = 0, $387 = 0, $389 = f0, $39 = 0, $391 = 0, $395 = 0, $397 = 0, $398 = 0, $40 = 0, $400 = f0, $402 = 0, $406 = 0, $407 = 0, $41 = 0, $411 = 0, $412 = 0, $417 = 0, $418 = 0, $42 = 0, $424 = 0, $425 = 0, $429 = 0, $43 = 0, $431 = f0, $434 = 0, $439 = 0.0, $44 = 0, $441 = f0, $443 = f0, $445 = 0.0, $447 = f0, $449 = f0, $45 = 0, $453 = 0, $456 = 0, $459 = 0, $46 = 0, $464 = 0, $47 = 0, $476 = 0, $48 = 0, $485 = 0, $49 = 0, $497 = 0, $5 = 0, $50 = 0, $503 = 0, $509 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 144 | 0;
$vararg_buffer11 = sp + 40 | 0;
$vararg_buffer8 = sp + 32 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer = sp + 8 | 0;
$5 = sp + 120 | 0;
$6 = sp + 108 | 0;
$7 = sp + 96 | 0;
$8 = sp + 88 | 0;
$9 = sp + 76 | 0;
$10 = sp + 64 | 0;
$11 = sp + 56 | 0;
$12 = sp + 48 | 0;
$13 = sp;
$14 = $0 + 4 | 0;
HEAP8[$14 >> 0] = HEAP8[$14 >> 0] & -16;
HEAP32[$0 >> 2] = 0;
$17 = $0 + 8 | 0;
HEAP32[$17 >> 2] = 0;
$18 = $0 + 12 | 0;
HEAP32[$18 >> 2] = 0;
$19 = $0 + 16 | 0;
HEAP8[$19 >> 0] = 0;
$20 = $0 + 20 | 0;
$21 = $0 + 32 | 0;
$22 = $0 + 152 | 0;
$23 = $0 + 180 | 0;
$24 = $0 + 192 | 0;
$25 = $0 + 212 | 0;
HEAP32[$20 >> 2] = 0;
HEAP8[$20 + 4 >> 0] = 0;
dest = $21;
stop = dest + 116 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP16[$21 + 116 >> 1] = 0;
HEAP32[$22 >> 2] = 0;
HEAP32[$22 + 4 >> 2] = 0;
HEAP32[$22 + 8 >> 2] = 0;
HEAP32[$22 + 12 >> 2] = 0;
HEAP32[$22 + 16 >> 2] = 0;
HEAP32[$22 + 20 >> 2] = 0;
HEAP32[$23 >> 2] = 0;
HEAP32[$23 + 4 >> 2] = 0;
HEAP16[$23 + 8 >> 1] = 0;
HEAP32[$24 >> 2] = 0;
HEAP32[$24 + 4 >> 2] = 0;
HEAP32[$24 + 8 >> 2] = 0;
HEAP32[$24 + 12 >> 2] = 0;
HEAP32[$24 + 16 >> 2] = 0;
HEAPF32[$25 >> 2] = Math_fround(1.0);
$26 = __ZN5SiGML14convertElementEPKc($1) | 0;
HEAP32[$0 >> 2] = $26;
HEAP8[$14 >> 0] = HEAP8[$3 >> 0] | 0;
$28 = $2 + 4 | 0;
L1 : do if ((HEAP32[$28 >> 2] | 0) > -1) {
$31 = $0 + 8 | 0;
$32 = $0 + 21 | 0;
$33 = $0 + 22 | 0;
$34 = $0 + 23 | 0;
$35 = $0 + 24 | 0;
$36 = $0 + 36 | 0;
$37 = $0 + 40 | 0;
$38 = $0 + 44 | 0;
$39 = $0 + 48 | 0;
$40 = $0 + 52 | 0;
$41 = $5 + 4 | 0;
$42 = $5 + 8 | 0;
$43 = $0 + 56 | 0;
$44 = $0 + 60 | 0;
$45 = $0 + 64 | 0;
$46 = $0 + 68 | 0;
$47 = $0 + 72 | 0;
$48 = $0 + 76 | 0;
$49 = $6 + 4 | 0;
$50 = $6 + 8 | 0;
$51 = $0 + 80 | 0;
$52 = $0 + 84 | 0;
$53 = $0 + 88 | 0;
$54 = $0 + 92 | 0;
$55 = $7 + 4 | 0;
$56 = $7 + 8 | 0;
$57 = $0 + 96 | 0;
$58 = $0 + 100 | 0;
$59 = $0 + 104 | 0;
$60 = $0 + 108 | 0;
$61 = $8 + 4 | 0;
$62 = $0 + 112 | 0;
$63 = $0 + 116 | 0;
$64 = $0 + 120 | 0;
$65 = $0 + 124 | 0;
$66 = $0 + 128 | 0;
$67 = $0 + 132 | 0;
$68 = $0 + 136 | 0;
$69 = $0 + 140 | 0;
$70 = $9 + 4 | 0;
$71 = $9 + 8 | 0;
$72 = $0 + 152 | 0;
$73 = $0 + 156 | 0;
$74 = $0 + 160 | 0;
$75 = $10 + 4 | 0;
$76 = $10 + 8 | 0;
$77 = $0 + 164 | 0;
$78 = $0 + 168 | 0;
$79 = $0 + 172 | 0;
$80 = $11 + 4 | 0;
$81 = $0 + 180 | 0;
$82 = $0 + 184 | 0;
$83 = $12 + 4 | 0;
$84 = $0 + 192 | 0;
$85 = $0 + 196 | 0;
$86 = $0 + 188 | 0;
$87 = $0 + 189 | 0;
$88 = $0 + 200 | 0;
$89 = $0 + 204 | 0;
$90 = $0 + 208 | 0;
$$0$off0586 = 0;
$$0101$off0585 = 0;
$$0103$off0584 = 0;
$$0105$off0583 = 0;
$$0107$off0582 = 0;
$$sroa$0402$0580 = -1;
$$sroa$6$0581 = 0;
L3 : while (1) {
$$sroa$0402$1 = $$sroa$0402$0580;
$92 = $$sroa$6$0581;
$94 = $$sroa$0402$0580;
while (1) {
if (!$92) {
$93 = $94 + 1 | 0;
$95 = HEAP32[$28 >> 2] | 0;
if (($93 | 0) < ($95 | 0)) {
$$sink19$i = (HEAP32[$2 >> 2] | 0) + ($93 << 3) | 0;
$$sroa$0402$2 = $93;
$509 = $93;
label = 8;
} else {
$$sroa$0402$3 = $93;
$103 = $93;
$104 = $95;
}
} else {
$$sink19$i = $92 + 8 | 0;
$$sroa$0402$2 = $$sroa$0402$1;
$509 = $94;
label = 8;
}
if ((label | 0) == 8) {
label = 0;
$100 = HEAP32[$$sink19$i >> 2] | 0;
if ($100 | 0) break;
$$sroa$0402$3 = $$sroa$0402$2;
$103 = $509;
$104 = HEAP32[$28 >> 2] | 0;
}
if (($103 | 0) < ($104 | 0)) {
$$sroa$0402$1 = $$sroa$0402$3;
$92 = 0;
$94 = $103;
} else {
$$0$off0451 = $$0$off0586;
$$0101$off0483 = $$0101$off0585;
$$0103$off0515 = $$0103$off0584;
$$0105$off0547 = $$0105$off0583;
$$0107$off0579 = $$0107$off0582;
label = 151;
break L3;
}
}
$105 = HEAP32[$100 >> 2] | 0;
$107 = HEAP32[$100 + 4 >> 2] | 0;
$108 = HEAP32[17758] | 0;
__THREW__ = 0;
$111 = invoke_iii(22, $105 | 0, HEAP32[$108 + 4 >> 2] | 0) | 0;
$112 = __THREW__;
__THREW__ = 0;
if ($112 & 1) {
label = 20;
break;
}
$114 = HEAP32[$108 >> 2] | 0;
L17 : do if ((HEAP16[$114 + ($111 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i = HEAP32[$114 + ($111 << 3) >> 2] | 0;
if (!$$01215$i$i) label = 18; else {
$$01216$i$i = $$01215$i$i;
while (1) {
__THREW__ = 0;
$121 = invoke_iii(23, $105 | 0, HEAP32[$$01216$i$i >> 2] | 0) | 0;
$122 = __THREW__;
__THREW__ = 0;
if ($122 & 1) {
label = 20;
break L3;
}
if ($121) break;
$$012$i$i = HEAP32[$$01216$i$i + 8 >> 2] | 0;
if (!$$012$i$i) {
label = 18;
break L17;
} else $$01216$i$i = $$012$i$i;
}
$$sink$i$i = $$01216$i$i + 4 | 0;
}
} else label = 18; while (0);
if ((label | 0) == 18) {
label = 0;
$$sink$i$i = $108 + 20 | 0;
}
do switch (HEAP32[$$sink$i$i >> 2] | 0) {
case 9:
{
__THREW__ = 0;
$133 = invoke_iii(32, HEAP32[17761] | 0, $107 | 0) | 0;
$134 = __THREW__;
__THREW__ = 0;
if ($134 & 1) {
label = 23;
break L3;
}
__THREW__ = 0;
invoke_vii(176, $31 | 0, $133 | 0);
$136 = __THREW__;
__THREW__ = 0;
if ($136 & 1) {
label = 23;
break L3;
} else {
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
}
break;
}
case 12:
{
__THREW__ = 0;
$141 = invoke_ii(30, $107 | 0) | 0;
$142 = __THREW__;
__THREW__ = 0;
if ($142 & 1) {
label = 20;
break L3;
} else {
$$0$off0$be = $141;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
}
break;
}
case 14:
{
__THREW__ = 0;
$145 = invoke_ii(30, $107 | 0) | 0;
$146 = __THREW__;
__THREW__ = 0;
if ($146 & 1) {
label = 20;
break L3;
} else {
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $145;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
}
break;
}
case 13:
{
__THREW__ = 0;
$149 = invoke_ii(30, $107 | 0) | 0;
$150 = __THREW__;
__THREW__ = 0;
if ($150 & 1) {
label = 20;
break L3;
} else {
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $149;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
}
break;
}
case 10:
{
__THREW__ = 0;
$153 = invoke_ii(30, $107 | 0) | 0;
$154 = __THREW__;
__THREW__ = 0;
if ($154 & 1) {
label = 20;
break L3;
} else {
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $153;
$$0107$off0$be = $$0107$off0582;
}
break;
}
case 11:
{
__THREW__ = 0;
$157 = invoke_ii(30, $107 | 0) | 0;
$158 = __THREW__;
__THREW__ = 0;
if ($158 & 1) {
label = 20;
break L3;
} else {
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $157;
}
break;
}
case 1:
{
__THREW__ = 0;
$163 = invoke_ii(30, $107 | 0) | 0;
$164 = __THREW__;
__THREW__ = 0;
if ($164 & 1) {
label = 20;
break L3;
}
HEAP8[$20 >> 0] = $163 & 1;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 2:
{
__THREW__ = 0;
$168 = invoke_ii(30, $107 | 0) | 0;
$169 = __THREW__;
__THREW__ = 0;
if ($169 & 1) {
label = 20;
break L3;
}
HEAP8[$32 >> 0] = $168 & 1;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 3:
{
__THREW__ = 0;
$173 = invoke_ii(30, $107 | 0) | 0;
$174 = __THREW__;
__THREW__ = 0;
if ($174 & 1) {
label = 20;
break L3;
}
HEAP8[$33 >> 0] = $173 & 1;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 4:
{
__THREW__ = 0;
$178 = invoke_ii(30, $107 | 0) | 0;
$179 = __THREW__;
__THREW__ = 0;
if ($179 & 1) {
label = 20;
break L3;
}
HEAP8[$34 >> 0] = $178 & 1;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 5:
{
__THREW__ = 0;
$183 = invoke_ii(30, $107 | 0) | 0;
$184 = __THREW__;
__THREW__ = 0;
if ($184 & 1) {
label = 20;
break L3;
}
HEAP8[$35 >> 0] = $183 & 1;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 15:
{
__THREW__ = 0;
$189 = invoke_iii(32, HEAP32[17759] | 0, $107 | 0) | 0;
$190 = __THREW__;
__THREW__ = 0;
if ($190 & 1) {
label = 42;
break L3;
}
HEAP32[$21 >> 2] = $189;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 16:
{
__THREW__ = 0;
$196 = invoke_iii(32, HEAP32[17762] | 0, $107 | 0) | 0;
$197 = __THREW__;
__THREW__ = 0;
if ($197 & 1) {
label = 45;
break L3;
}
HEAP32[$36 >> 2] = $196;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 7:
{
__THREW__ = 0;
$203 = invoke_iii(32, HEAP32[17763] | 0, $107 | 0) | 0;
$204 = __THREW__;
__THREW__ = 0;
if ($204 & 1) {
label = 48;
break L3;
}
HEAP32[$37 >> 2] = $203;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 8:
{
__THREW__ = 0;
$210 = invoke_iii(32, HEAP32[17763] | 0, $107 | 0) | 0;
$211 = __THREW__;
__THREW__ = 0;
if ($211 & 1) {
label = 51;
break L3;
}
HEAP32[$38 >> 2] = $210;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 17:
{
__THREW__ = 0;
$217 = invoke_iii(32, HEAP32[17759] | 0, $107 | 0) | 0;
$218 = __THREW__;
__THREW__ = 0;
if ($218 & 1) {
label = 54;
break L3;
}
HEAP32[$39 >> 2] = $217;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 18:
{
__THREW__ = 0;
$224 = invoke_iii(32, HEAP32[17762] | 0, $107 | 0) | 0;
$225 = __THREW__;
__THREW__ = 0;
if ($225 & 1) {
label = 57;
break L3;
}
HEAP32[$40 >> 2] = $224;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 19:
{
__THREW__ = 0;
invoke_vii(177, $5 | 0, $107 | 0);
$230 = __THREW__;
__THREW__ = 0;
if ($230 & 1) {
label = 62;
break L3;
}
$232 = HEAP32[$5 >> 2] | 0;
$233 = HEAP32[$41 >> 2] | 0;
$234 = HEAP32[$42 >> 2] | 0;
if ($4) $238 = $232; else {
$236 = Math_fround(-(HEAP32[tempDoublePtr >> 2] = $232, Math_fround(HEAPF32[tempDoublePtr >> 2])));
$238 = (HEAPF32[tempDoublePtr >> 2] = $236, HEAP32[tempDoublePtr >> 2] | 0);
}
HEAP32[$43 >> 2] = $238;
HEAP32[$44 >> 2] = $233;
HEAP32[$45 >> 2] = $234;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 20:
{
__THREW__ = 0;
$243 = invoke_iii(32, HEAP32[17762] | 0, $107 | 0) | 0;
$244 = __THREW__;
__THREW__ = 0;
if ($244 & 1) {
label = 65;
break L3;
}
HEAP32[$46 >> 2] = $243;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 21:
{
__THREW__ = 0;
$250 = invoke_iii(32, HEAP32[17759] | 0, $107 | 0) | 0;
$251 = __THREW__;
__THREW__ = 0;
if ($251 & 1) {
label = 68;
break L3;
}
HEAP32[$47 >> 2] = $250;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 22:
{
__THREW__ = 0;
$257 = invoke_iii(32, HEAP32[17762] | 0, $107 | 0) | 0;
$258 = __THREW__;
__THREW__ = 0;
if ($258 & 1) {
label = 71;
break L3;
}
HEAP32[$48 >> 2] = $257;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 39:
{
__THREW__ = 0;
invoke_vii(177, $6 | 0, $107 | 0);
$263 = __THREW__;
__THREW__ = 0;
if ($263 & 1) {
label = 76;
break L3;
}
$265 = HEAP32[$6 >> 2] | 0;
$266 = HEAP32[$49 >> 2] | 0;
$267 = HEAP32[$50 >> 2] | 0;
if ($4) $271 = $265; else {
$269 = Math_fround(-(HEAP32[tempDoublePtr >> 2] = $265, Math_fround(HEAPF32[tempDoublePtr >> 2])));
$271 = (HEAPF32[tempDoublePtr >> 2] = $269, HEAP32[tempDoublePtr >> 2] | 0);
}
HEAP32[$51 >> 2] = $271;
HEAP32[$52 >> 2] = $266;
HEAP32[$53 >> 2] = $267;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 26:
{
__THREW__ = 0;
$276 = invoke_iii(32, HEAP32[17762] | 0, $107 | 0) | 0;
$277 = __THREW__;
__THREW__ = 0;
if ($277 & 1) {
label = 79;
break L3;
}
HEAP32[$54 >> 2] = $276;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 37:
{
__THREW__ = 0;
invoke_vii(177, $7 | 0, $107 | 0);
$282 = __THREW__;
__THREW__ = 0;
if ($282 & 1) {
label = 84;
break L3;
}
$284 = HEAP32[$7 >> 2] | 0;
$285 = HEAP32[$55 >> 2] | 0;
$286 = HEAP32[$56 >> 2] | 0;
if ($4) $290 = $284; else {
$288 = Math_fround(-(HEAP32[tempDoublePtr >> 2] = $284, Math_fround(HEAPF32[tempDoublePtr >> 2])));
$290 = (HEAPF32[tempDoublePtr >> 2] = $288, HEAP32[tempDoublePtr >> 2] | 0);
}
HEAP32[$57 >> 2] = $290;
HEAP32[$58 >> 2] = $285;
HEAP32[$59 >> 2] = $286;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 41:
{
__THREW__ = 0;
$295 = invoke_iii(32, HEAP32[17762] | 0, $107 | 0) | 0;
$296 = __THREW__;
__THREW__ = 0;
if ($296 & 1) {
label = 87;
break L3;
}
HEAP32[$60 >> 2] = $295;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 38:
{
__THREW__ = 0;
invoke_vii(178, $8 | 0, $107 | 0);
$301 = __THREW__;
__THREW__ = 0;
if ($301 & 1) {
label = 92;
break L3;
}
$303 = HEAP32[$8 >> 2] | 0;
$304 = HEAP32[$61 >> 2] | 0;
if ($4) $308 = $303; else {
$306 = Math_fround(-(HEAP32[tempDoublePtr >> 2] = $303, Math_fround(HEAPF32[tempDoublePtr >> 2])));
$308 = (HEAPF32[tempDoublePtr >> 2] = $306, HEAP32[tempDoublePtr >> 2] | 0);
}
HEAP32[$62 >> 2] = $308;
HEAP32[$63 >> 2] = $304;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 40:
{
__THREW__ = 0;
$313 = invoke_iii(32, HEAP32[17762] | 0, $107 | 0) | 0;
$314 = __THREW__;
__THREW__ = 0;
if ($314 & 1) {
label = 95;
break L3;
}
HEAP32[$64 >> 2] = $313;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 32:
{
__THREW__ = 0;
$320 = invoke_iii(32, HEAP32[17760] | 0, $107 | 0) | 0;
$321 = __THREW__;
__THREW__ = 0;
if ($321 & 1) {
label = 98;
break L3;
}
HEAP32[$65 >> 2] = $320;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 30:
{
__THREW__ = 0;
$327 = invoke_iii(32, HEAP32[17762] | 0, $107 | 0) | 0;
$328 = __THREW__;
__THREW__ = 0;
if ($328 & 1) {
label = 101;
break L3;
}
HEAP32[$66 >> 2] = $327;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 31:
{
__THREW__ = 0;
$334 = invoke_iii(32, HEAP32[17759] | 0, $107 | 0) | 0;
$335 = __THREW__;
__THREW__ = 0;
if ($335 & 1) {
label = 104;
break L3;
}
HEAP32[$67 >> 2] = $334;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 29:
{
__THREW__ = 0;
$341 = invoke_iii(32, HEAP32[17762] | 0, $107 | 0) | 0;
$342 = __THREW__;
__THREW__ = 0;
if ($342 & 1) {
label = 107;
break L3;
}
HEAP32[$68 >> 2] = $341;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 27:
{
__THREW__ = 0;
invoke_vii(179, $69 | 0, $107 | 0);
$347 = __THREW__;
__THREW__ = 0;
if ($347 & 1) {
label = 20;
break L3;
}
if ($4) {
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
} else {
$350 = Math_fround(-Math_fround(HEAPF32[$69 >> 2]));
HEAPF32[$69 >> 2] = $350;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
}
break;
}
case 35:
{
__THREW__ = 0;
invoke_vii(177, $9 | 0, $107 | 0);
$352 = __THREW__;
__THREW__ = 0;
if ($352 & 1) {
label = 115;
break L3;
}
$355 = HEAP32[$70 >> 2] | 0;
$356 = HEAP32[$71 >> 2] | 0;
if ($4) {
$363 = $355;
$364 = $356;
} else {
$358 = Math_fround(-(HEAP32[tempDoublePtr >> 2] = $356, Math_fround(HEAPF32[tempDoublePtr >> 2])));
$360 = Math_fround(-(HEAP32[tempDoublePtr >> 2] = $355, Math_fround(HEAPF32[tempDoublePtr >> 2])));
$361 = (HEAPF32[tempDoublePtr >> 2] = $360, HEAP32[tempDoublePtr >> 2] | 0);
$363 = $361;
$364 = (HEAPF32[tempDoublePtr >> 2] = $358, HEAP32[tempDoublePtr >> 2] | 0);
}
HEAP32[$72 >> 2] = HEAP32[$9 >> 2];
HEAP32[$73 >> 2] = $363;
HEAP32[$74 >> 2] = $364;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 23:
{
__THREW__ = 0;
invoke_vii(177, $10 | 0, $107 | 0);
$368 = __THREW__;
__THREW__ = 0;
if ($368 & 1) {
label = 120;
break L3;
}
$371 = HEAP32[$75 >> 2] | 0;
$372 = HEAP32[$76 >> 2] | 0;
if ($4) {
$379 = $371;
$380 = $372;
} else {
$374 = Math_fround(-(HEAP32[tempDoublePtr >> 2] = $372, Math_fround(HEAPF32[tempDoublePtr >> 2])));
$376 = Math_fround(-(HEAP32[tempDoublePtr >> 2] = $371, Math_fround(HEAPF32[tempDoublePtr >> 2])));
$377 = (HEAPF32[tempDoublePtr >> 2] = $376, HEAP32[tempDoublePtr >> 2] | 0);
$379 = $377;
$380 = (HEAPF32[tempDoublePtr >> 2] = $374, HEAP32[tempDoublePtr >> 2] | 0);
}
HEAP32[$77 >> 2] = HEAP32[$10 >> 2];
HEAP32[$78 >> 2] = $379;
HEAP32[$79 >> 2] = $380;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 34:
{
__THREW__ = 0;
invoke_vii(178, $11 | 0, $107 | 0);
$384 = __THREW__;
__THREW__ = 0;
if ($384 & 1) {
label = 125;
break L3;
}
$386 = HEAP32[$11 >> 2] | 0;
$387 = HEAP32[$80 >> 2] | 0;
if ($4) $391 = $386; else {
$389 = Math_fround(-(HEAP32[tempDoublePtr >> 2] = $386, Math_fround(HEAPF32[tempDoublePtr >> 2])));
$391 = (HEAPF32[tempDoublePtr >> 2] = $389, HEAP32[tempDoublePtr >> 2] | 0);
}
HEAP32[$81 >> 2] = $391;
HEAP32[$82 >> 2] = $387;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 33:
{
__THREW__ = 0;
invoke_vii(178, $12 | 0, $107 | 0);
$395 = __THREW__;
__THREW__ = 0;
if ($395 & 1) {
label = 130;
break L3;
}
$397 = HEAP32[$12 >> 2] | 0;
$398 = HEAP32[$83 >> 2] | 0;
if ($4) $402 = $397; else {
$400 = Math_fround(-(HEAP32[tempDoublePtr >> 2] = $397, Math_fround(HEAPF32[tempDoublePtr >> 2])));
$402 = (HEAPF32[tempDoublePtr >> 2] = $400, HEAP32[tempDoublePtr >> 2] | 0);
}
HEAP32[$84 >> 2] = $402;
HEAP32[$85 >> 2] = $398;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 24:
{
__THREW__ = 0;
$406 = invoke_ii(30, $107 | 0) | 0;
$407 = __THREW__;
__THREW__ = 0;
if ($407 & 1) {
label = 20;
break L3;
}
HEAP8[$86 >> 0] = $406 & 1;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 25:
{
__THREW__ = 0;
$411 = invoke_ii(30, $107 | 0) | 0;
$412 = __THREW__;
__THREW__ = 0;
if ($412 & 1) {
label = 20;
break L3;
}
HEAP8[$87 >> 0] = $411 & 1;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 28:
{
__THREW__ = 0;
$417 = invoke_iii(32, HEAP32[17762] | 0, $107 | 0) | 0;
$418 = __THREW__;
__THREW__ = 0;
if ($418 & 1) {
label = 137;
break L3;
}
HEAP32[$88 >> 2] = $417;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 42:
{
__THREW__ = 0;
$424 = invoke_iii(32, HEAP32[17764] | 0, $107 | 0) | 0;
$425 = __THREW__;
__THREW__ = 0;
if ($425 & 1) {
label = 140;
break L3;
}
HEAP32[$89 >> 2] = $424;
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 43:
{
HEAPF64[$13 >> 3] = 0.0;
$429 = $107;
HEAP32[$vararg_buffer >> 2] = $13;
_sscanf($429, 54455, $vararg_buffer) | 0;
$431 = Math_fround(+HEAPF64[$13 >> 3]);
HEAPF32[$90 >> 2] = $431;
if (0) {
__THREW__ = 0;
HEAP32[$vararg_buffer4 >> 2] = $429;
HEAPF64[$vararg_buffer4 + 8 >> 3] = +$431;
invoke_vii(115, 48868, $vararg_buffer4 | 0);
$434 = __THREW__;
__THREW__ = 0;
if ($434 & 1) {
label = 143;
break L3;
}
}
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 44:
{
HEAPF64[$13 >> 3] = 1.0;
HEAP32[$vararg_buffer8 >> 2] = $13;
_sscanf($107, 54455, $vararg_buffer8) | 0;
$439 = +HEAPF64[$13 >> 3];
if ($439 > 0.0) {
$441 = Math_fround($439);
$443 = Math_fround(Math_fround(HEAPF32[$25 >> 2]) * $441);
HEAPF32[$25 >> 2] = $443;
}
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
case 45:
{
HEAPF64[$13 >> 3] = 1.0;
HEAP32[$vararg_buffer11 >> 2] = $13;
_sscanf($107, 54455, $vararg_buffer11) | 0;
$445 = +HEAPF64[$13 >> 3];
if ($445 > 0.0) {
$447 = Math_fround($445);
$449 = Math_fround(Math_fround(HEAPF32[$25 >> 2]) / $447);
HEAPF32[$25 >> 2] = $449;
}
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
break;
}
default:
{
$$0$off0$be = $$0$off0586;
$$0101$off0$be = $$0101$off0585;
$$0103$off0$be = $$0103$off0584;
$$0105$off0$be = $$0105$off0583;
$$0107$off0$be = $$0107$off0582;
}
} while (0);
if (($$sroa$0402$2 | 0) < (HEAP32[$28 >> 2] | 0)) {
$$0$off0586 = $$0$off0$be;
$$0101$off0585 = $$0101$off0$be;
$$0103$off0584 = $$0103$off0$be;
$$0105$off0583 = $$0105$off0$be;
$$0107$off0582 = $$0107$off0$be;
$$sroa$0402$0580 = $$sroa$0402$2;
$$sroa$6$0581 = $100;
} else {
$$0$off0451 = $$0$off0$be;
$$0101$off0483 = $$0101$off0$be;
$$0103$off0515 = $$0103$off0$be;
$$0105$off0547 = $$0105$off0$be;
$$0107$off0579 = $$0107$off0$be;
label = 151;
break;
}
}
switch (label | 0) {
case 20:
{
$$1111 = ___cxa_find_matching_catch_2() | 0;
$$1113 = tempRet0;
___resumeException($$1111 | 0);
break;
}
case 23:
{
$$1111 = ___cxa_find_matching_catch_2() | 0;
$$1113 = tempRet0;
___resumeException($$1111 | 0);
break;
}
case 42:
{
$$1111 = ___cxa_find_matching_catch_2() | 0;
$$1113 = tempRet0;
___resumeException($$1111 | 0);
break;
}
case 45:
{
$$1111 = ___cxa_find_matching_catch_2() | 0;
$$1113 = tempRet0;
___resumeException($$1111 | 0);
break;
}
case 48:
{
$$1111 = ___cxa_find_matching_catch_2() | 0;
$$1113 = tempRet0;
___resumeException($$1111 | 0);
break;
}
case 51:
{
$$1111 = ___cxa_find_matching_catch_2() | 0;
$$1113 = tempRet0;
___resumeException($$1111 | 0);
break;
}
case 54:
{
$$1111 = ___cxa_find_matching_catch_2() | 0;
$$1113 = tempRet0;
___resumeException($$1111 | 0);
break;
}
case 57:
{
$$1111 = ___cxa_find_matching_catch_2() | 0;
$$1113 = tempRet0;
___resumeException($$1111 | 0);
break;
}
case 62:
{
$$1111 = ___cxa_find_matching_catch_2() | 0;
$$1113 = tempRet0;
___resumeException($$1111 | 0);
break;
}
case 65:
{
$$1111 = ___cxa_find_matching_catch_2() | 0;
$$1113 = tempRet0;
___resumeException($$1111 | 0);
break;
}
case 68:
{
$$1111 = ___cxa_find_matching_catch_2() | 0;
$$1113 = tempRet0;
___resumeException($$1111 | 0);
break;
}
case 71:
{
$$1111 = ___cxa_find_matching_catch_2() | 0;
$$1113 = tempRet0;
___resumeException($$1111 | 0);
break;
}
case 76:
{
$$1111 = ___cxa_find_matching_catch_2() | 0;
$$1113 = tempRet0;
___resumeException($$1111 | 0);
break;
}
case 79:
{
$$1111 = ___cxa_find_matching_catch_2() | 0;
$$1113 = tempRet0;
___resumeException($$1111 | 0);
break;
}
case 84:
{
$$1111 = ___cxa_find_matching_catch_2() | 0;
$$1113 = tempRet0;
___resumeException($$1111 | 0);
break;
}
case 87:
{
$$1111 = ___cxa_find_matching_catch_2() | 0;
$$1113 = tempRet0;
___resumeException($$1111 | 0);
break;
}
case 92:
{
$$1111 = ___cxa_find_matching_catch_2() | 0;
$$1113 = tempRet0;
___resumeException($$1111 | 0);
break;
}
case 95:
{
$$1111 = ___cxa_find_matching_catch_2() | 0;
$$1113 = tempRet0;
___resumeException($$1111 | 0);
break;
}
case 98:
{
$$1111 = ___cxa_find_matching_catch_2() | 0;
$$1113 = tempRet0;
___resumeException($$1111 | 0);
break;
}
case 101:
{
$$1111 = ___cxa_find_matching_catch_2() | 0;
$$1113 = tempRet0;
___resumeException($$1111 | 0);
break;
}
case 104:
{
$$1111 = ___cxa_find_matching_catch_2() | 0;
$$1113 = tempRet0;
___resumeException($$1111 | 0);
break;
}
case 107:
{
$$1111 = ___cxa_find_matching_catch_2() | 0;
$$1113 = tempRet0;
___resumeException($$1111 | 0);
break;
}
case 115:
{
$$1111 = ___cxa_find_matching_catch_2() | 0;
$$1113 = tempRet0;
___resumeException($$1111 | 0);
break;
}
case 120:
{
$$1111 = ___cxa_find_matching_catch_2() | 0;
$$1113 = tempRet0;
___resumeException($$1111 | 0);
break;
}
case 125:
{
$$1111 = ___cxa_find_matching_catch_2() | 0;
$$1113 = tempRet0;
___resumeException($$1111 | 0);
break;
}
case 130:
{
$$1111 = ___cxa_find_matching_catch_2() | 0;
$$1113 = tempRet0;
___resumeException($$1111 | 0);
break;
}
case 137:
{
$$1111 = ___cxa_find_matching_catch_2() | 0;
$$1113 = tempRet0;
___resumeException($$1111 | 0);
break;
}
case 140:
{
$$1111 = ___cxa_find_matching_catch_2() | 0;
$$1113 = tempRet0;
___resumeException($$1111 | 0);
break;
}
case 143:
{
$$1111 = ___cxa_find_matching_catch_2() | 0;
$$1113 = tempRet0;
___resumeException($$1111 | 0);
break;
}
case 151:
{
if ($$0107$off0579 ^ $$0105$off0547) {
$$0$off0451757 = $$0$off0451;
$$0101$off0483754 = $$0101$off0483;
$$0103$off0515751 = $$0103$off0515;
$$sink = $$0105$off0547 & ($$0107$off0579 ^ 1) ? 1 : 3;
label = 153;
break L1;
} else {
$$0$off0451756 = $$0$off0451;
$$0101$off0483753 = $$0101$off0483;
$$0103$off0515750 = $$0103$off0515;
label = 152;
break L1;
}
break;
}
}
} else {
$$0$off0451756 = 0;
$$0101$off0483753 = 0;
$$0103$off0515750 = 0;
label = 152;
} while (0);
if ((label | 0) == 152) if (!(HEAP32[$18 >> 2] | 0)) {
$$0$off0451757 = $$0$off0451756;
$$0101$off0483754 = $$0101$off0483753;
$$0103$off0515751 = $$0103$off0515750;
$$sink = 2;
label = 153;
} else if ($$0103$off0515750) {
$$0$off0451755759 = $$0$off0451756;
$$0101$off0483752761 = $$0101$off0483753;
label = 155;
} else {
$$0$off0451755758 = $$0$off0451756;
$$0101$off0483752760 = $$0101$off0483753;
}
if ((label | 0) == 153) {
HEAP32[$18 >> 2] = $$sink;
if ($$0103$off0515751) {
$$0$off0451755759 = $$0$off0451757;
$$0101$off0483752761 = $$0101$off0483754;
label = 155;
} else {
$$0$off0451755758 = $$0$off0451757;
$$0101$off0483752760 = $$0101$off0483754;
}
}
if ((label | 0) == 155) {
HEAP8[$19 >> 0] = 1;
$$0$off0451755758 = $$0$off0451755759;
$$0101$off0483752760 = $$0101$off0483752761;
}
if ($$0101$off0483752760 | $$0$off0451755758) HEAP32[$17 >> 2] = $$0$off0451755758 ? 6 : 8;
$453 = $0 + 140 | 0;
if (Math_fround(HEAPF32[$453 >> 2]) == Math_fround(0.0)) {
$456 = $0 + 144 | 0;
if (!(Math_fround(HEAPF32[$456 >> 2]) != Math_fround(0.0))) {
HEAP32[$453 >> 2] = $4 ? 1065353216 : -1082130432;
HEAP32[$456 >> 2] = 0;
}
}
$459 = $0 + 36 | 0;
if (!(HEAP32[$459 >> 2] | 0)) if (HEAP32[$21 >> 2] | 0) HEAP32[$459 >> 2] = 3;
$464 = $0 + 92 | 0;
do if (!(HEAP32[$464 >> 2] | 0)) {
if (Math_fround(HEAPF32[$0 + 80 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 84 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 88 >> 2]) == Math_fround(0.0)) break;
HEAP32[$464 >> 2] = 3;
} while (0);
$476 = $0 + 120 | 0;
do if (!(HEAP32[$476 >> 2] | 0)) {
if (Math_fround(HEAPF32[$0 + 112 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 116 >> 2]) == Math_fround(0.0)) break;
HEAP32[$476 >> 2] = 3;
} while (0);
$485 = $0 + 108 | 0;
do if (!(HEAP32[$485 >> 2] | 0)) {
if (Math_fround(HEAPF32[$0 + 96 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 100 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 104 >> 2]) == Math_fround(0.0)) break;
HEAP32[$485 >> 2] = 3;
} while (0);
$497 = $0 + 128 | 0;
if (!(HEAP32[$497 >> 2] | 0)) if (HEAP32[$0 + 124 >> 2] | 0) HEAP32[$497 >> 2] = 3;
$503 = $0 + 136 | 0;
if (HEAP32[$503 >> 2] | 0) {
STACKTOP = sp;
return;
}
if (!(HEAP32[$0 + 132 >> 2] | 0)) {
STACKTOP = sp;
return;
}
HEAP32[$503 >> 2] = 3;
STACKTOP = sp;
return;
}
function __ZN16AvatarJointIndexC2EP11HanimAvatar($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0109324 = 0, $$0109326 = 0, $$0115$off0 = 0, $$012$i$i$i = 0, $$012$i$i$i143 = 0, $$012$i$i$i155 = 0, $$012$i$i$i167 = 0, $$012$i$i$i179 = 0, $$012$i$i$i191 = 0, $$012$i$i$i203 = 0, $$012$i$i$i203$1 = 0, $$012$i$i$i203$2 = 0, $$012$i$i$i203$3 = 0, $$012$i$i$i215 = 0, $$012$i$i$i228 = 0, $$012$i$i$i228$1 = 0, $$012$i$i$i228$2 = 0, $$01215$i$i$i = 0, $$01215$i$i$i140 = 0, $$01215$i$i$i152 = 0, $$01215$i$i$i164 = 0, $$01215$i$i$i176 = 0, $$01215$i$i$i188 = 0, $$01215$i$i$i200 = 0, $$01215$i$i$i200$1 = 0, $$01215$i$i$i200$2 = 0, $$01215$i$i$i200$3 = 0, $$01215$i$i$i212 = 0, $$01215$i$i$i225 = 0, $$01215$i$i$i225$1 = 0, $$01215$i$i$i225$2 = 0, $$01216$i$i$i = 0, $$01216$i$i$i141 = 0, $$01216$i$i$i153 = 0, $$01216$i$i$i165 = 0, $$01216$i$i$i177 = 0, $$01216$i$i$i189 = 0, $$01216$i$i$i201 = 0, $$01216$i$i$i201$1 = 0, $$01216$i$i$i201$2 = 0, $$01216$i$i$i201$3 = 0, $$01216$i$i$i213 = 0, $$01216$i$i$i226 = 0, $$01216$i$i$i226$1 = 0, $$01216$i$i$i226$2 = 0, $$0322 = 0, $$10$off0 = 0, $$10$off0$1 = 0, $$10$off0$2 = 0, $$2117$off0$ph = 0, $$2117$off0335 = 0, $$3118$off0 = 0, $$5$off0 = 0, $$5$off0$1 = 0, $$5$off0$2 = 0, $$5$off0$3 = 0, $$6$off0333 = 0, $$8$off0$ph = 0, $$ph = 0, $$pre$i156 = 0, $$pre$i216 = 0, $$pre$phi$i146Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi373Z2D = 0, $$pre$phi375Z2D = 0, $$pre$phiZ2D = 0, $$sink$i$i$i = 0, $$sink$i$i$i147 = 0, $$sink$i$i$i159 = 0, $$sink$i$i$i171 = 0, $$sink$i$i$i183 = 0, $$sink$i$i$i195 = 0, $$sink$i$i$i207 = 0, $$sink$i$i$i207$1 = 0, $$sink$i$i$i207$2 = 0, $$sink$i$i$i207$3 = 0, $$sink$i$i$i219 = 0, $$sink$i$i$i232 = 0, $$sink$i$i$i232$1 = 0, $$sink$i$i$i232$2 = 0, $$sink1$i = 0, $$sink1$i223 = 0, $$sink1$i223$1 = 0, $$sink1$i223$2 = 0, $100 = 0, $103 = 0, $104 = 0, $106 = 0, $107 = 0, $109 = 0, $11 = 0, $116 = 0, $117 = 0, $122 = 0, $125 = 0, $13 = 0, $133 = 0, $137 = 0, $14 = 0, $140 = 0, $142 = 0, $143 = 0, $145 = 0, $152 = 0, $153 = 0, $158 = 0, $16 = 0, $161 = 0, $17 = 0, $170 = 0, $172 = 0, $174 = 0, $175 = 0, $177 = 0, $184 = 0, $185 = 0, $19 = 0, $190 = 0, $193 = 0, $2 = 0, $20 = 0, $202 = 0, $204 = 0, $206 = 0, $207 = 0, $209 = 0, $216 = 0, $217 = 0, $222 = 0, $225 = 0, $234 = 0, $235 = 0, $236 = 0, $238 = 0, $239 = 0, $241 = 0, $248 = 0, $249 = 0, $254 = 0, $257 = 0, $265 = 0, $269 = 0, $27 = 0, $271 = 0, $272 = 0, $274 = 0, $275 = 0, $278 = 0, $28 = 0, $282 = 0, $283 = 0, $285 = 0, $287 = 0, $288 = 0, $290 = 0, $291 = 0, $293 = 0, $3 = 0, $300 = 0, $301 = 0, $306 = 0, $309 = 0, $317 = 0, $320 = 0, $321 = 0, $323 = 0, $326 = 0, $327 = 0, $329 = 0, $33 = 0, $330 = 0, $332 = 0, $339 = 0, $34 = 0, $340 = 0, $345 = 0, $348 = 0, $353 = 0, $356 = 0, $357 = 0, $359 = 0, $361 = 0, $363 = 0, $365 = 0, $367 = 0, $369 = 0, $373 = 0, $377 = 0, $379 = 0, $38 = 0, $382 = 0, $391 = 0, $393 = 0, $397 = 0, $399 = 0, $4 = 0, $402 = 0, $410 = 0, $412 = 0, $414 = 0, $416 = 0, $423 = 0, $424 = 0, $429 = 0, $432 = 0, $439 = 0, $444 = 0, $446 = 0, $447 = 0, $449 = 0, $45 = 0, $450 = 0, $452 = 0, $459 = 0, $460 = 0, $465 = 0, $468 = 0, $475 = 0, $48 = 0, $480 = 0, $482 = 0, $483 = 0, $485 = 0, $486 = 0, $488 = 0, $495 = 0, $496 = 0, $5 = 0, $50 = 0, $501 = 0, $504 = 0, $51 = 0, $511 = 0, $516 = 0, $519 = 0, $520 = 0, $522 = 0, $523 = 0, $525 = 0, $53 = 0, $532 = 0, $533 = 0, $538 = 0, $54 = 0, $541 = 0, $548 = 0, $549 = 0, $551 = 0, $552 = 0, $554 = 0, $556 = 0, $558 = 0, $56 = 0, $561 = 0, $562 = 0, $564 = 0, $565 = 0, $567 = 0, $574 = 0, $575 = 0, $580 = 0, $583 = 0, $590 = 0, $591 = 0, $593 = 0, $594 = 0, $596 = 0, $598 = 0, $6 = 0, $601 = 0, $602 = 0, $63 = 0, $64 = 0, $69 = 0, $7 = 0, $70 = 0, $73 = 0, $74 = 0, $79 = 0, $8 = 0, $82 = 0, $83 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $indvars$iv = 0, $indvars$iv370 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer17 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer36 = 0, $vararg_buffer39 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer50 = 0, $vararg_buffer53 = 0, $vararg_buffer56 = 0, $vararg_buffer6 = 0, $vararg_buffer61 = 0, $vararg_buffer64 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 192 | 0;
$vararg_buffer64 = sp + 184 | 0;
$vararg_buffer61 = sp + 176 | 0;
$vararg_buffer56 = sp + 160 | 0;
$vararg_buffer53 = sp + 152 | 0;
$vararg_buffer50 = sp + 144 | 0;
$vararg_buffer45 = sp + 128 | 0;
$vararg_buffer42 = sp + 120 | 0;
$vararg_buffer39 = sp + 112 | 0;
$vararg_buffer36 = sp + 104 | 0;
$vararg_buffer33 = sp + 96 | 0;
$vararg_buffer30 = sp + 88 | 0;
$vararg_buffer25 = sp + 72 | 0;
$vararg_buffer22 = sp + 64 | 0;
$vararg_buffer17 = sp + 48 | 0;
$vararg_buffer12 = sp + 32 | 0;
$vararg_buffer9 = sp + 24 | 0;
$vararg_buffer6 = sp + 16 | 0;
$vararg_buffer3 = sp + 8 | 0;
$vararg_buffer = sp;
$2 = $0 + 236 | 0;
$3 = $0 + 240 | 0;
HEAP32[$3 >> 2] = 10;
$4 = $0 + 248 | 0;
HEAP32[$4 >> 2] = 0;
HEAP32[$2 >> 2] = 0;
$5 = $0 + 244 | 0;
HEAP32[$5 >> 2] = 0;
$6 = $0 + 252 | 0;
$7 = $0 + 256 | 0;
HEAP32[$7 >> 2] = 10;
$8 = $0 + 264 | 0;
HEAP32[$8 >> 2] = 0;
HEAP32[$6 >> 2] = 0;
$9 = $0 + 260 | 0;
HEAP32[$9 >> 2] = 0;
$11 = HEAP32[$1 + 68 >> 2] | 0;
if (!$11) {
STACKTOP = sp;
return;
}
$13 = HEAP32[$11 >> 2] | 0;
$14 = $1 + 120 | 0;
__THREW__ = 0;
$16 = invoke_iii(22, $13 | 0, HEAP32[$14 >> 2] | 0) | 0;
$17 = __THREW__;
__THREW__ = 0;
L4 : do if (!($17 & 1)) {
$19 = $1 + 116 | 0;
$20 = HEAP32[$19 >> 2] | 0;
L6 : do if ((HEAP16[$20 + ($16 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i = HEAP32[$20 + ($16 << 3) >> 2] | 0;
if (!$$01215$i$i$i) label = 9; else {
$$01216$i$i$i = $$01215$i$i$i;
while (1) {
__THREW__ = 0;
$27 = invoke_iii(23, $13 | 0, HEAP32[$$01216$i$i$i >> 2] | 0) | 0;
$28 = __THREW__;
__THREW__ = 0;
if ($28 & 1) break L4;
if ($27) break;
$$012$i$i$i = HEAP32[$$01216$i$i$i + 8 >> 2] | 0;
if (!$$012$i$i$i) {
label = 9;
break L6;
} else $$01216$i$i$i = $$012$i$i$i;
}
$$pre$phi$iZ2D = $1 + 136 | 0;
$$sink$i$i$i = $$01216$i$i$i + 4 | 0;
}
} else label = 9; while (0);
if ((label | 0) == 9) {
$33 = $1 + 136 | 0;
$$pre$phi$iZ2D = $33;
$$sink$i$i$i = $33;
}
$34 = HEAP32[$$sink$i$i$i >> 2] | 0;
if (($34 | 0) == (HEAP32[$$pre$phi$iZ2D >> 2] | 0)) label = 13; else {
$38 = HEAP32[$1 + 104 >> 2] | 0;
if (($34 | 0) < 0) label = 13; else if ((HEAP32[$38 + 12 >> 2] | 0) > ($34 | 0)) {
$45 = HEAP32[(HEAP32[$38 >> 2] | 0) + ($34 << 2) >> 2] | 0;
HEAP32[$0 >> 2] = $45;
if (!$45) {
$601 = $0;
label = 15;
} else {
$$0115$off0 = 0;
$391 = $0;
}
} else label = 13;
}
if ((label | 0) == 13) {
HEAP32[$0 >> 2] = 0;
$601 = $0;
label = 15;
}
if ((label | 0) == 15) {
__THREW__ = 0;
HEAP32[$vararg_buffer >> 2] = HEAP32[$11 >> 2];
invoke_vii(115, 17935, $vararg_buffer | 0);
$48 = __THREW__;
__THREW__ = 0;
if ($48 & 1) break; else {
$$0115$off0 = 1;
$391 = $601;
}
}
$50 = $11 + 4 | 0;
$51 = HEAP32[$50 >> 2] | 0;
__THREW__ = 0;
$53 = invoke_iii(22, $51 | 0, HEAP32[$14 >> 2] | 0) | 0;
$54 = __THREW__;
__THREW__ = 0;
if (!($54 & 1)) {
$56 = HEAP32[$19 >> 2] | 0;
L26 : do if ((HEAP16[$56 + ($53 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i140 = HEAP32[$56 + ($53 << 3) >> 2] | 0;
if (!$$01215$i$i$i140) label = 23; else {
$$01216$i$i$i141 = $$01215$i$i$i140;
while (1) {
__THREW__ = 0;
$63 = invoke_iii(23, $51 | 0, HEAP32[$$01216$i$i$i141 >> 2] | 0) | 0;
$64 = __THREW__;
__THREW__ = 0;
if ($64 & 1) break L4;
if ($63) break;
$$012$i$i$i143 = HEAP32[$$01216$i$i$i141 + 8 >> 2] | 0;
if (!$$012$i$i$i143) {
label = 23;
break L26;
} else $$01216$i$i$i141 = $$012$i$i$i143;
}
$$pre$phi$i146Z2D = $1 + 136 | 0;
$$sink$i$i$i147 = $$01216$i$i$i141 + 4 | 0;
}
} else label = 23; while (0);
if ((label | 0) == 23) {
$69 = $1 + 136 | 0;
$$pre$phi$i146Z2D = $69;
$$sink$i$i$i147 = $69;
}
$70 = HEAP32[$$sink$i$i$i147 >> 2] | 0;
if (($70 | 0) == (HEAP32[$$pre$phi$i146Z2D >> 2] | 0)) label = 27; else {
$73 = $1 + 104 | 0;
$74 = HEAP32[$73 >> 2] | 0;
if (($70 | 0) < 0) label = 27; else if ((HEAP32[$74 + 12 >> 2] | 0) > ($70 | 0)) {
$82 = HEAP32[(HEAP32[$74 >> 2] | 0) + ($70 << 2) >> 2] | 0;
$83 = $0 + 8 | 0;
HEAP32[$83 >> 2] = $82;
if (!$82) {
$602 = $83;
label = 29;
} else {
$$2117$off0$ph = $$0115$off0;
$$ph = $83;
$$pre$phiZ2D = $73;
}
} else label = 27;
}
if ((label | 0) == 27) {
$79 = $0 + 8 | 0;
HEAP32[$79 >> 2] = 0;
$602 = $79;
label = 29;
}
if ((label | 0) == 29) {
__THREW__ = 0;
HEAP32[$vararg_buffer3 >> 2] = HEAP32[$50 >> 2];
invoke_vii(115, 17935, $vararg_buffer3 | 0);
$86 = __THREW__;
__THREW__ = 0;
if ($86 & 1) break;
$$2117$off0$ph = 1;
$$ph = $602;
$$pre$phiZ2D = $1 + 104 | 0;
}
$$pre$i156 = $1 + 136 | 0;
$88 = $11 + 128 | 0;
$89 = $1 + 148 | 0;
$90 = $1 + 144 | 0;
$$pre$i216 = $1 + 164 | 0;
$91 = $1 + 108 | 0;
$92 = $11 + 124 | 0;
$93 = $11 + 132 | 0;
$94 = $11 + 88 | 0;
$95 = $11 + 84 | 0;
$96 = $11 + 80 | 0;
$97 = $11 + 76 | 0;
$$2117$off0335 = $$2117$off0$ph;
$indvars$iv370 = 0;
while (1) {
$103 = $11 + 8 + ($indvars$iv370 << 2) | 0;
$104 = HEAP32[$103 >> 2] | 0;
__THREW__ = 0;
$106 = invoke_iii(22, $104 | 0, HEAP32[$14 >> 2] | 0) | 0;
$107 = __THREW__;
__THREW__ = 0;
if ($107 & 1) break L4;
$109 = HEAP32[$19 >> 2] | 0;
L49 : do if ((HEAP16[$109 + ($106 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i152 = HEAP32[$109 + ($106 << 3) >> 2] | 0;
if (!$$01215$i$i$i152) $$sink$i$i$i159 = $$pre$i156; else {
$$01216$i$i$i153 = $$01215$i$i$i152;
while (1) {
__THREW__ = 0;
$116 = invoke_iii(23, $104 | 0, HEAP32[$$01216$i$i$i153 >> 2] | 0) | 0;
$117 = __THREW__;
__THREW__ = 0;
if ($117 & 1) break L4;
if ($116) break;
$$012$i$i$i155 = HEAP32[$$01216$i$i$i153 + 8 >> 2] | 0;
if (!$$012$i$i$i155) {
$$sink$i$i$i159 = $$pre$i156;
break L49;
} else $$01216$i$i$i153 = $$012$i$i$i155;
}
$$sink$i$i$i159 = $$01216$i$i$i153 + 4 | 0;
}
} else $$sink$i$i$i159 = $$pre$i156; while (0);
$122 = HEAP32[$$sink$i$i$i159 >> 2] | 0;
if (($122 | 0) == (HEAP32[$$pre$i156 >> 2] | 0)) label = 43; else {
$125 = HEAP32[$$pre$phiZ2D >> 2] | 0;
if (($122 | 0) < 0) label = 43; else if ((HEAP32[$125 + 12 >> 2] | 0) > ($122 | 0)) {
$133 = HEAP32[(HEAP32[$125 >> 2] | 0) + ($122 << 2) >> 2] | 0;
HEAP32[$0 + 12 + ($indvars$iv370 << 2) >> 2] = $133;
if (!$133) label = 45; else $$3118$off0 = $$2117$off0335;
} else label = 43;
}
if ((label | 0) == 43) {
label = 0;
HEAP32[$0 + 12 + ($indvars$iv370 << 2) >> 2] = 0;
label = 45;
}
if ((label | 0) == 45) {
label = 0;
__THREW__ = 0;
HEAP32[$vararg_buffer6 >> 2] = HEAP32[$103 >> 2];
invoke_vii(115, 17935, $vararg_buffer6 | 0);
$137 = __THREW__;
__THREW__ = 0;
if ($137 & 1) break L4; else $$3118$off0 = 1;
}
$140 = HEAP32[$11 + 92 + ($indvars$iv370 << 2) >> 2] | 0;
__THREW__ = 0;
$142 = invoke_iii(22, $140 | 0, HEAP32[$14 >> 2] | 0) | 0;
$143 = __THREW__;
__THREW__ = 0;
if ($143 & 1) break L4;
$145 = HEAP32[$19 >> 2] | 0;
L67 : do if ((HEAP16[$145 + ($142 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i164 = HEAP32[$145 + ($142 << 3) >> 2] | 0;
if (!$$01215$i$i$i164) $$sink$i$i$i171 = $$pre$i156; else {
$$01216$i$i$i165 = $$01215$i$i$i164;
while (1) {
__THREW__ = 0;
$152 = invoke_iii(23, $140 | 0, HEAP32[$$01216$i$i$i165 >> 2] | 0) | 0;
$153 = __THREW__;
__THREW__ = 0;
if ($153 & 1) break L4;
if ($152) break;
$$012$i$i$i167 = HEAP32[$$01216$i$i$i165 + 8 >> 2] | 0;
if (!$$012$i$i$i167) {
$$sink$i$i$i171 = $$pre$i156;
break L67;
} else $$01216$i$i$i165 = $$012$i$i$i167;
}
$$sink$i$i$i171 = $$01216$i$i$i165 + 4 | 0;
}
} else $$sink$i$i$i171 = $$pre$i156; while (0);
$158 = HEAP32[$$sink$i$i$i171 >> 2] | 0;
if (($158 | 0) == (HEAP32[$$pre$i156 >> 2] | 0)) $170 = 0; else {
$161 = HEAP32[$$pre$phiZ2D >> 2] | 0;
if (($158 | 0) < 0) $170 = 0; else if ((HEAP32[$161 + 12 >> 2] | 0) > ($158 | 0)) $170 = HEAP32[(HEAP32[$161 >> 2] | 0) + ($158 << 2) >> 2] | 0; else $170 = 0;
}
HEAP32[$0 + 212 + ($indvars$iv370 << 2) >> 2] = $170;
$172 = HEAP32[$11 + 100 + ($indvars$iv370 << 2) >> 2] | 0;
__THREW__ = 0;
$174 = invoke_iii(22, $172 | 0, HEAP32[$14 >> 2] | 0) | 0;
$175 = __THREW__;
__THREW__ = 0;
if ($175 & 1) break L4;
$177 = HEAP32[$19 >> 2] | 0;
L81 : do if ((HEAP16[$177 + ($174 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i176 = HEAP32[$177 + ($174 << 3) >> 2] | 0;
if (!$$01215$i$i$i176) $$sink$i$i$i183 = $$pre$i156; else {
$$01216$i$i$i177 = $$01215$i$i$i176;
while (1) {
__THREW__ = 0;
$184 = invoke_iii(23, $172 | 0, HEAP32[$$01216$i$i$i177 >> 2] | 0) | 0;
$185 = __THREW__;
__THREW__ = 0;
if ($185 & 1) break L4;
if ($184) break;
$$012$i$i$i179 = HEAP32[$$01216$i$i$i177 + 8 >> 2] | 0;
if (!$$012$i$i$i179) {
$$sink$i$i$i183 = $$pre$i156;
break L81;
} else $$01216$i$i$i177 = $$012$i$i$i179;
}
$$sink$i$i$i183 = $$01216$i$i$i177 + 4 | 0;
}
} else $$sink$i$i$i183 = $$pre$i156; while (0);
$190 = HEAP32[$$sink$i$i$i183 >> 2] | 0;
do if (($190 | 0) == (HEAP32[$$pre$i156 >> 2] | 0)) $202 = 0; else {
$193 = HEAP32[$$pre$phiZ2D >> 2] | 0;
if (($190 | 0) < 0) $202 = 0; else {
if ((HEAP32[$193 + 12 >> 2] | 0) <= ($190 | 0)) {
$202 = 0;
break;
}
$202 = HEAP32[(HEAP32[$193 >> 2] | 0) + ($190 << 2) >> 2] | 0;
}
} while (0);
HEAP32[$0 + 220 + ($indvars$iv370 << 2) >> 2] = $202;
$204 = HEAP32[$11 + 108 + ($indvars$iv370 << 2) >> 2] | 0;
__THREW__ = 0;
$206 = invoke_iii(22, $204 | 0, HEAP32[$14 >> 2] | 0) | 0;
$207 = __THREW__;
__THREW__ = 0;
if ($207 & 1) break L4;
$209 = HEAP32[$19 >> 2] | 0;
L95 : do if ((HEAP16[$209 + ($206 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i188 = HEAP32[$209 + ($206 << 3) >> 2] | 0;
if (!$$01215$i$i$i188) {
$$sink$i$i$i195 = $$pre$i156;
break;
} else $$01216$i$i$i189 = $$01215$i$i$i188;
while (1) {
__THREW__ = 0;
$216 = invoke_iii(23, $204 | 0, HEAP32[$$01216$i$i$i189 >> 2] | 0) | 0;
$217 = __THREW__;
__THREW__ = 0;
if ($217 & 1) break L4;
if ($216) break;
$$012$i$i$i191 = HEAP32[$$01216$i$i$i189 + 8 >> 2] | 0;
if (!$$012$i$i$i191) {
$$sink$i$i$i195 = $$pre$i156;
break L95;
} else $$01216$i$i$i189 = $$012$i$i$i191;
}
$$sink$i$i$i195 = $$01216$i$i$i189 + 4 | 0;
} else $$sink$i$i$i195 = $$pre$i156; while (0);
$222 = HEAP32[$$sink$i$i$i195 >> 2] | 0;
do if (($222 | 0) == (HEAP32[$$pre$i156 >> 2] | 0)) $234 = 0; else {
$225 = HEAP32[$$pre$phiZ2D >> 2] | 0;
if (($222 | 0) < 0) {
$234 = 0;
break;
}
if ((HEAP32[$225 + 12 >> 2] | 0) <= ($222 | 0)) {
$234 = 0;
break;
}
$234 = HEAP32[(HEAP32[$225 >> 2] | 0) + ($222 << 2) >> 2] | 0;
} while (0);
HEAP32[$0 + 228 + ($indvars$iv370 << 2) >> 2] = $234;
$235 = $11 + 16 + ($indvars$iv370 << 4) | 0;
$236 = HEAP32[$235 >> 2] | 0;
__THREW__ = 0;
$238 = invoke_iii(22, $236 | 0, HEAP32[$14 >> 2] | 0) | 0;
$239 = __THREW__;
__THREW__ = 0;
if ($239 & 1) break L4;
$241 = HEAP32[$19 >> 2] | 0;
L109 : do if ((HEAP16[$241 + ($238 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i200 = HEAP32[$241 + ($238 << 3) >> 2] | 0;
if (!$$01215$i$i$i200) {
$$sink$i$i$i207 = $$pre$i156;
break;
} else $$01216$i$i$i201 = $$01215$i$i$i200;
while (1) {
__THREW__ = 0;
$248 = invoke_iii(23, $236 | 0, HEAP32[$$01216$i$i$i201 >> 2] | 0) | 0;
$249 = __THREW__;
__THREW__ = 0;
if ($249 & 1) break L4;
if ($248) break;
$$012$i$i$i203 = HEAP32[$$01216$i$i$i201 + 8 >> 2] | 0;
if (!$$012$i$i$i203) {
$$sink$i$i$i207 = $$pre$i156;
break L109;
} else $$01216$i$i$i201 = $$012$i$i$i203;
}
$$sink$i$i$i207 = $$01216$i$i$i201 + 4 | 0;
} else $$sink$i$i$i207 = $$pre$i156; while (0);
$254 = HEAP32[$$sink$i$i$i207 >> 2] | 0;
do if (($254 | 0) == (HEAP32[$$pre$i156 >> 2] | 0)) label = 89; else {
$257 = HEAP32[$$pre$phiZ2D >> 2] | 0;
if (($254 | 0) < 0) {
label = 89;
break;
}
if ((HEAP32[$257 + 12 >> 2] | 0) <= ($254 | 0)) {
label = 89;
break;
}
$265 = HEAP32[(HEAP32[$257 >> 2] | 0) + ($254 << 2) >> 2] | 0;
HEAP32[$0 + 20 + ($indvars$iv370 << 4) >> 2] = $265;
if (!$265) label = 91; else $$5$off0 = $$3118$off0;
} while (0);
if ((label | 0) == 89) {
label = 0;
HEAP32[$0 + 20 + ($indvars$iv370 << 4) >> 2] = 0;
label = 91;
}
if ((label | 0) == 91) {
label = 0;
__THREW__ = 0;
HEAP32[$vararg_buffer9 >> 2] = HEAP32[$235 >> 2];
invoke_vii(115, 17935, $vararg_buffer9 | 0);
$269 = __THREW__;
__THREW__ = 0;
if ($269 & 1) break L4; else $$5$off0 = 1;
}
$271 = $11 + 16 + ($indvars$iv370 << 4) + 4 | 0;
$272 = HEAP32[$271 >> 2] | 0;
__THREW__ = 0;
$274 = invoke_iii(22, $272 | 0, HEAP32[$14 >> 2] | 0) | 0;
$275 = __THREW__;
__THREW__ = 0;
if ($275 & 1) break L4;
$416 = HEAP32[$19 >> 2] | 0;
L127 : do if ((HEAP16[$416 + ($274 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i200$1 = HEAP32[$416 + ($274 << 3) >> 2] | 0;
if (!$$01215$i$i$i200$1) {
$$sink$i$i$i207$1 = $$pre$i156;
break;
} else $$01216$i$i$i201$1 = $$01215$i$i$i200$1;
while (1) {
__THREW__ = 0;
$423 = invoke_iii(23, $272 | 0, HEAP32[$$01216$i$i$i201$1 >> 2] | 0) | 0;
$424 = __THREW__;
__THREW__ = 0;
if ($424 & 1) break L4;
if ($423) break;
$$012$i$i$i203$1 = HEAP32[$$01216$i$i$i201$1 + 8 >> 2] | 0;
if (!$$012$i$i$i203$1) {
$$sink$i$i$i207$1 = $$pre$i156;
break L127;
} else $$01216$i$i$i201$1 = $$012$i$i$i203$1;
}
$$sink$i$i$i207$1 = $$01216$i$i$i201$1 + 4 | 0;
} else $$sink$i$i$i207$1 = $$pre$i156; while (0);
$429 = HEAP32[$$sink$i$i$i207$1 >> 2] | 0;
do if (($429 | 0) == (HEAP32[$$pre$i156 >> 2] | 0)) label = 165; else {
$432 = HEAP32[$$pre$phiZ2D >> 2] | 0;
if (($429 | 0) < 0) {
label = 165;
break;
}
if ((HEAP32[$432 + 12 >> 2] | 0) <= ($429 | 0)) {
label = 165;
break;
}
$439 = HEAP32[(HEAP32[$432 >> 2] | 0) + ($429 << 2) >> 2] | 0;
HEAP32[$0 + 20 + ($indvars$iv370 << 4) + 4 >> 2] = $439;
if (!$439) label = 166; else $$5$off0$1 = $$5$off0;
} while (0);
if ((label | 0) == 165) {
label = 0;
HEAP32[$0 + 20 + ($indvars$iv370 << 4) + 4 >> 2] = 0;
label = 166;
}
if ((label | 0) == 166) {
label = 0;
__THREW__ = 0;
HEAP32[$vararg_buffer36 >> 2] = HEAP32[$271 >> 2];
invoke_vii(115, 17935, $vararg_buffer36 | 0);
$444 = __THREW__;
__THREW__ = 0;
if ($444 & 1) break L4; else $$5$off0$1 = 1;
}
$446 = $11 + 16 + ($indvars$iv370 << 4) + 8 | 0;
$447 = HEAP32[$446 >> 2] | 0;
__THREW__ = 0;
$449 = invoke_iii(22, $447 | 0, HEAP32[$14 >> 2] | 0) | 0;
$450 = __THREW__;
__THREW__ = 0;
if ($450 & 1) break L4;
$452 = HEAP32[$19 >> 2] | 0;
L145 : do if ((HEAP16[$452 + ($449 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i200$2 = HEAP32[$452 + ($449 << 3) >> 2] | 0;
if (!$$01215$i$i$i200$2) {
$$sink$i$i$i207$2 = $$pre$i156;
break;
} else $$01216$i$i$i201$2 = $$01215$i$i$i200$2;
while (1) {
__THREW__ = 0;
$459 = invoke_iii(23, $447 | 0, HEAP32[$$01216$i$i$i201$2 >> 2] | 0) | 0;
$460 = __THREW__;
__THREW__ = 0;
if ($460 & 1) break L4;
if ($459) break;
$$012$i$i$i203$2 = HEAP32[$$01216$i$i$i201$2 + 8 >> 2] | 0;
if (!$$012$i$i$i203$2) {
$$sink$i$i$i207$2 = $$pre$i156;
break L145;
} else $$01216$i$i$i201$2 = $$012$i$i$i203$2;
}
$$sink$i$i$i207$2 = $$01216$i$i$i201$2 + 4 | 0;
} else $$sink$i$i$i207$2 = $$pre$i156; while (0);
$465 = HEAP32[$$sink$i$i$i207$2 >> 2] | 0;
do if (($465 | 0) == (HEAP32[$$pre$i156 >> 2] | 0)) label = 178; else {
$468 = HEAP32[$$pre$phiZ2D >> 2] | 0;
if (($465 | 0) < 0) {
label = 178;
break;
}
if ((HEAP32[$468 + 12 >> 2] | 0) <= ($465 | 0)) {
label = 178;
break;
}
$475 = HEAP32[(HEAP32[$468 >> 2] | 0) + ($465 << 2) >> 2] | 0;
HEAP32[$0 + 20 + ($indvars$iv370 << 4) + 8 >> 2] = $475;
if (!$475) label = 179; else $$5$off0$2 = $$5$off0$1;
} while (0);
if ((label | 0) == 178) {
label = 0;
HEAP32[$0 + 20 + ($indvars$iv370 << 4) + 8 >> 2] = 0;
label = 179;
}
if ((label | 0) == 179) {
label = 0;
__THREW__ = 0;
HEAP32[$vararg_buffer39 >> 2] = HEAP32[$446 >> 2];
invoke_vii(115, 17935, $vararg_buffer39 | 0);
$480 = __THREW__;
__THREW__ = 0;
if ($480 & 1) break L4; else $$5$off0$2 = 1;
}
$482 = $11 + 16 + ($indvars$iv370 << 4) + 12 | 0;
$483 = HEAP32[$482 >> 2] | 0;
__THREW__ = 0;
$485 = invoke_iii(22, $483 | 0, HEAP32[$14 >> 2] | 0) | 0;
$486 = __THREW__;
__THREW__ = 0;
if ($486 & 1) break L4;
$488 = HEAP32[$19 >> 2] | 0;
L163 : do if ((HEAP16[$488 + ($485 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i200$3 = HEAP32[$488 + ($485 << 3) >> 2] | 0;
if (!$$01215$i$i$i200$3) {
$$sink$i$i$i207$3 = $$pre$i156;
break;
} else $$01216$i$i$i201$3 = $$01215$i$i$i200$3;
while (1) {
__THREW__ = 0;
$495 = invoke_iii(23, $483 | 0, HEAP32[$$01216$i$i$i201$3 >> 2] | 0) | 0;
$496 = __THREW__;
__THREW__ = 0;
if ($496 & 1) break L4;
if ($495) break;
$$012$i$i$i203$3 = HEAP32[$$01216$i$i$i201$3 + 8 >> 2] | 0;
if (!$$012$i$i$i203$3) {
$$sink$i$i$i207$3 = $$pre$i156;
break L163;
} else $$01216$i$i$i201$3 = $$012$i$i$i203$3;
}
$$sink$i$i$i207$3 = $$01216$i$i$i201$3 + 4 | 0;
} else $$sink$i$i$i207$3 = $$pre$i156; while (0);
$501 = HEAP32[$$sink$i$i$i207$3 >> 2] | 0;
do if (($501 | 0) == (HEAP32[$$pre$i156 >> 2] | 0)) label = 191; else {
$504 = HEAP32[$$pre$phiZ2D >> 2] | 0;
if (($501 | 0) < 0) {
label = 191;
break;
}
if ((HEAP32[$504 + 12 >> 2] | 0) <= ($501 | 0)) {
label = 191;
break;
}
$511 = HEAP32[(HEAP32[$504 >> 2] | 0) + ($501 << 2) >> 2] | 0;
HEAP32[$0 + 20 + ($indvars$iv370 << 4) + 12 >> 2] = $511;
if (!$511) label = 192; else $$5$off0$3 = $$5$off0$2;
} while (0);
if ((label | 0) == 191) {
label = 0;
HEAP32[$0 + 20 + ($indvars$iv370 << 4) + 12 >> 2] = 0;
label = 192;
}
if ((label | 0) == 192) {
label = 0;
__THREW__ = 0;
HEAP32[$vararg_buffer42 >> 2] = HEAP32[$482 >> 2];
invoke_vii(115, 17935, $vararg_buffer42 | 0);
$516 = __THREW__;
__THREW__ = 0;
if ($516 & 1) break L4; else $$5$off0$3 = 1;
}
$283 = $11 + 48 + ($indvars$iv370 << 2) | 0;
$$6$off0333 = $$5$off0$3;
$indvars$iv = 0;
while (1) {
$278 = HEAP32[$88 >> 2] | 0;
do if (!$278) $$sink1$i = 72208; else {
$282 = HEAP32[$283 >> 2] | 0;
if (!(HEAP8[$93 >> 0] | 0)) {
$287 = HEAP32[$11 + 56 + ($indvars$iv << 2) >> 2] | 0;
$288 = HEAP32[$94 >> 2] | 0;
HEAP32[$vararg_buffer17 >> 2] = $282;
HEAP32[$vararg_buffer17 + 4 >> 2] = $287;
HEAP32[$vararg_buffer17 + 8 >> 2] = $288;
_snprintf(72208, 100, $278, $vararg_buffer17) | 0;
$$sink1$i = 72307;
break;
} else {
$285 = HEAP32[$94 >> 2] | 0;
HEAP32[$vararg_buffer12 >> 2] = $282;
HEAP32[$vararg_buffer12 + 4 >> 2] = $indvars$iv + 1;
HEAP32[$vararg_buffer12 + 8 >> 2] = $285;
_snprintf(72208, 100, $278, $vararg_buffer12) | 0;
$$sink1$i = 72307;
break;
}
} while (0);
HEAP8[$$sink1$i >> 0] = 0;
__THREW__ = 0;
$290 = invoke_iii(22, 72208, HEAP32[$89 >> 2] | 0) | 0;
$291 = __THREW__;
__THREW__ = 0;
if ($291 & 1) break L4;
$293 = HEAP32[$90 >> 2] | 0;
L189 : do if ((HEAP16[$293 + ($290 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i212 = HEAP32[$293 + ($290 << 3) >> 2] | 0;
if (!$$01215$i$i$i212) {
$$sink$i$i$i219 = $$pre$i216;
break;
} else $$01216$i$i$i213 = $$01215$i$i$i212;
while (1) {
__THREW__ = 0;
$300 = invoke_iii(23, 72208, HEAP32[$$01216$i$i$i213 >> 2] | 0) | 0;
$301 = __THREW__;
__THREW__ = 0;
if ($301 & 1) break L4;
if ($300) break;
$$012$i$i$i215 = HEAP32[$$01216$i$i$i213 + 8 >> 2] | 0;
if (!$$012$i$i$i215) {
$$sink$i$i$i219 = $$pre$i216;
break L189;
} else $$01216$i$i$i213 = $$012$i$i$i215;
}
$$sink$i$i$i219 = $$01216$i$i$i213 + 4 | 0;
} else $$sink$i$i$i219 = $$pre$i216; while (0);
$306 = HEAP32[$$sink$i$i$i219 >> 2] | 0;
do if (($306 | 0) == (HEAP32[$$pre$i216 >> 2] | 0)) label = 108; else {
$309 = HEAP32[$91 >> 2] | 0;
if (($306 | 0) < 0) {
label = 108;
break;
}
if ((HEAP32[$309 + 12 >> 2] | 0) <= ($306 | 0)) {
label = 108;
break;
}
$317 = HEAP32[(HEAP32[$309 >> 2] | 0) + ($306 << 2) >> 2] | 0;
HEAP32[$0 + 172 + ($indvars$iv370 * 20 | 0) + ($indvars$iv << 2) >> 2] = $317;
if (!$317) label = 111; else $$8$off0$ph = $$6$off0333;
} while (0);
if ((label | 0) == 108) {
label = 0;
HEAP32[$0 + 172 + ($indvars$iv370 * 20 | 0) + ($indvars$iv << 2) >> 2] = 0;
label = 111;
}
if ((label | 0) == 111) {
label = 0;
__THREW__ = 0;
HEAP32[$vararg_buffer22 >> 2] = 72208;
invoke_vii(115, 17958, $vararg_buffer22 | 0);
$323 = __THREW__;
__THREW__ = 0;
if ($323 & 1) break L4; else $$8$off0$ph = 1;
}
$320 = $11 + 56 + ($indvars$iv << 2) | 0;
$321 = HEAP32[$92 >> 2] | 0;
if (!$321) $$sink1$i223 = 72208; else {
$326 = HEAP32[$320 >> 2] | 0;
$327 = HEAP32[$97 >> 2] | 0;
HEAP32[$vararg_buffer25 >> 2] = HEAP32[$283 >> 2];
HEAP32[$vararg_buffer25 + 4 >> 2] = $326;
HEAP32[$vararg_buffer25 + 8 >> 2] = $327;
_snprintf(72208, 100, $321, $vararg_buffer25) | 0;
$$sink1$i223 = 72307;
}
HEAP8[$$sink1$i223 >> 0] = 0;
__THREW__ = 0;
$329 = invoke_iii(22, 72208, HEAP32[$14 >> 2] | 0) | 0;
$330 = __THREW__;
__THREW__ = 0;
if ($330 & 1) break L4;
$332 = HEAP32[$19 >> 2] | 0;
L210 : do if ((HEAP16[$332 + ($329 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i225 = HEAP32[$332 + ($329 << 3) >> 2] | 0;
if (!$$01215$i$i$i225) {
$$sink$i$i$i232 = $$pre$i156;
break;
} else $$01216$i$i$i226 = $$01215$i$i$i225;
while (1) {
__THREW__ = 0;
$339 = invoke_iii(23, 72208, HEAP32[$$01216$i$i$i226 >> 2] | 0) | 0;
$340 = __THREW__;
__THREW__ = 0;
if ($340 & 1) break L4;
if ($339) break;
$$012$i$i$i228 = HEAP32[$$01216$i$i$i226 + 8 >> 2] | 0;
if (!$$012$i$i$i228) {
$$sink$i$i$i232 = $$pre$i156;
break L210;
} else $$01216$i$i$i226 = $$012$i$i$i228;
}
$$sink$i$i$i232 = $$01216$i$i$i226 + 4 | 0;
} else $$sink$i$i$i232 = $$pre$i156; while (0);
$345 = HEAP32[$$sink$i$i$i232 >> 2] | 0;
do if (($345 | 0) == (HEAP32[$$pre$i156 >> 2] | 0)) label = 123; else {
$348 = HEAP32[$$pre$phiZ2D >> 2] | 0;
if (($345 | 0) < 0) {
label = 123;
break;
}
if ((HEAP32[$348 + 12 >> 2] | 0) <= ($345 | 0)) {
label = 123;
break;
}
$356 = HEAP32[(HEAP32[$348 >> 2] | 0) + ($345 << 2) >> 2] | 0;
$357 = $0 + 52 + ($indvars$iv370 * 60 | 0) + ($indvars$iv * 12 | 0) | 0;
HEAP32[$357 >> 2] = $356;
if (!$356) {
$361 = $357;
label = 125;
} else $$10$off0 = $$8$off0$ph;
} while (0);
if ((label | 0) == 123) {
label = 0;
$353 = $0 + 52 + ($indvars$iv370 * 60 | 0) + ($indvars$iv * 12 | 0) | 0;
HEAP32[$353 >> 2] = 0;
$361 = $353;
label = 125;
}
do if ((label | 0) == 125) {
label = 0;
__THREW__ = 0;
HEAP32[$vararg_buffer30 >> 2] = 72208;
invoke_vii(115, 17935, $vararg_buffer30 | 0);
$359 = __THREW__;
__THREW__ = 0;
if ($359 & 1) break L4;
if (HEAP32[$361 >> 2] | 0) {
$$10$off0 = 1;
break;
}
__THREW__ = 0;
HEAP32[$vararg_buffer33 >> 2] = 72208;
invoke_vii(115, 17935, $vararg_buffer33 | 0);
$363 = __THREW__;
__THREW__ = 0;
if ($363 & 1) break L4; else $$10$off0 = 1;
} while (0);
$365 = HEAP32[$92 >> 2] | 0;
if (!$365) $$sink1$i223$1 = 72208; else {
$519 = HEAP32[$320 >> 2] | 0;
$520 = HEAP32[$96 >> 2] | 0;
HEAP32[$vararg_buffer45 >> 2] = HEAP32[$283 >> 2];
HEAP32[$vararg_buffer45 + 4 >> 2] = $519;
HEAP32[$vararg_buffer45 + 8 >> 2] = $520;
_snprintf(72208, 100, $365, $vararg_buffer45) | 0;
$$sink1$i223$1 = 72307;
}
HEAP8[$$sink1$i223$1 >> 0] = 0;
__THREW__ = 0;
$522 = invoke_iii(22, 72208, HEAP32[$14 >> 2] | 0) | 0;
$523 = __THREW__;
__THREW__ = 0;
if ($523 & 1) break L4;
$525 = HEAP32[$19 >> 2] | 0;
L233 : do if ((HEAP16[$525 + ($522 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i225$1 = HEAP32[$525 + ($522 << 3) >> 2] | 0;
if (!$$01215$i$i$i225$1) {
$$sink$i$i$i232$1 = $$pre$i156;
break;
} else $$01216$i$i$i226$1 = $$01215$i$i$i225$1;
while (1) {
__THREW__ = 0;
$532 = invoke_iii(23, 72208, HEAP32[$$01216$i$i$i226$1 >> 2] | 0) | 0;
$533 = __THREW__;
__THREW__ = 0;
if ($533 & 1) break L4;
if ($532) break;
$$012$i$i$i228$1 = HEAP32[$$01216$i$i$i226$1 + 8 >> 2] | 0;
if (!$$012$i$i$i228$1) {
$$sink$i$i$i232$1 = $$pre$i156;
break L233;
} else $$01216$i$i$i226$1 = $$012$i$i$i228$1;
}
$$sink$i$i$i232$1 = $$01216$i$i$i226$1 + 4 | 0;
} else $$sink$i$i$i232$1 = $$pre$i156; while (0);
$538 = HEAP32[$$sink$i$i$i232$1 >> 2] | 0;
do if (($538 | 0) == (HEAP32[$$pre$i156 >> 2] | 0)) label = 206; else {
$541 = HEAP32[$$pre$phiZ2D >> 2] | 0;
if (($538 | 0) < 0) {
label = 206;
break;
}
if ((HEAP32[$541 + 12 >> 2] | 0) <= ($538 | 0)) {
label = 206;
break;
}
$548 = HEAP32[(HEAP32[$541 >> 2] | 0) + ($538 << 2) >> 2] | 0;
$549 = $0 + 52 + ($indvars$iv370 * 60 | 0) + ($indvars$iv * 12 | 0) + 4 | 0;
HEAP32[$549 >> 2] = $548;
if (!$548) {
$554 = $549;
label = 207;
} else $$10$off0$1 = $$10$off0;
} while (0);
if ((label | 0) == 206) {
label = 0;
$551 = $0 + 52 + ($indvars$iv370 * 60 | 0) + ($indvars$iv * 12 | 0) + 4 | 0;
HEAP32[$551 >> 2] = 0;
$554 = $551;
label = 207;
}
do if ((label | 0) == 207) {
label = 0;
__THREW__ = 0;
HEAP32[$vararg_buffer50 >> 2] = 72208;
invoke_vii(115, 17935, $vararg_buffer50 | 0);
$552 = __THREW__;
__THREW__ = 0;
if ($552 & 1) break L4;
if (HEAP32[$554 >> 2] | 0) {
$$10$off0$1 = 1;
break;
}
__THREW__ = 0;
HEAP32[$vararg_buffer53 >> 2] = 72208;
invoke_vii(115, 17935, $vararg_buffer53 | 0);
$556 = __THREW__;
__THREW__ = 0;
if ($556 & 1) break L4; else $$10$off0$1 = 1;
} while (0);
$558 = HEAP32[$92 >> 2] | 0;
if (!$558) $$sink1$i223$2 = 72208; else {
$561 = HEAP32[$320 >> 2] | 0;
$562 = HEAP32[$95 >> 2] | 0;
HEAP32[$vararg_buffer56 >> 2] = HEAP32[$283 >> 2];
HEAP32[$vararg_buffer56 + 4 >> 2] = $561;
HEAP32[$vararg_buffer56 + 8 >> 2] = $562;
_snprintf(72208, 100, $558, $vararg_buffer56) | 0;
$$sink1$i223$2 = 72307;
}
HEAP8[$$sink1$i223$2 >> 0] = 0;
__THREW__ = 0;
$564 = invoke_iii(22, 72208, HEAP32[$14 >> 2] | 0) | 0;
$565 = __THREW__;
__THREW__ = 0;
if ($565 & 1) break L4;
$567 = HEAP32[$19 >> 2] | 0;
L256 : do if ((HEAP16[$567 + ($564 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i225$2 = HEAP32[$567 + ($564 << 3) >> 2] | 0;
if (!$$01215$i$i$i225$2) {
$$sink$i$i$i232$2 = $$pre$i156;
break;
} else $$01216$i$i$i226$2 = $$01215$i$i$i225$2;
while (1) {
__THREW__ = 0;
$574 = invoke_iii(23, 72208, HEAP32[$$01216$i$i$i226$2 >> 2] | 0) | 0;
$575 = __THREW__;
__THREW__ = 0;
if ($575 & 1) break L4;
if ($574) break;
$$012$i$i$i228$2 = HEAP32[$$01216$i$i$i226$2 + 8 >> 2] | 0;
if (!$$012$i$i$i228$2) {
$$sink$i$i$i232$2 = $$pre$i156;
break L256;
} else $$01216$i$i$i226$2 = $$012$i$i$i228$2;
}
$$sink$i$i$i232$2 = $$01216$i$i$i226$2 + 4 | 0;
} else $$sink$i$i$i232$2 = $$pre$i156; while (0);
$580 = HEAP32[$$sink$i$i$i232$2 >> 2] | 0;
do if (($580 | 0) == (HEAP32[$$pre$i156 >> 2] | 0)) label = 223; else {
$583 = HEAP32[$$pre$phiZ2D >> 2] | 0;
if (($580 | 0) < 0) {
label = 223;
break;
}
if ((HEAP32[$583 + 12 >> 2] | 0) <= ($580 | 0)) {
label = 223;
break;
}
$590 = HEAP32[(HEAP32[$583 >> 2] | 0) + ($580 << 2) >> 2] | 0;
$591 = $0 + 52 + ($indvars$iv370 * 60 | 0) + ($indvars$iv * 12 | 0) + 8 | 0;
HEAP32[$591 >> 2] = $590;
if (!$590) {
$596 = $591;
label = 224;
} else $$10$off0$2 = $$10$off0$1;
} while (0);
if ((label | 0) == 223) {
label = 0;
$593 = $0 + 52 + ($indvars$iv370 * 60 | 0) + ($indvars$iv * 12 | 0) + 8 | 0;
HEAP32[$593 >> 2] = 0;
$596 = $593;
label = 224;
}
do if ((label | 0) == 224) {
label = 0;
__THREW__ = 0;
HEAP32[$vararg_buffer61 >> 2] = 72208;
invoke_vii(115, 17935, $vararg_buffer61 | 0);
$594 = __THREW__;
__THREW__ = 0;
if ($594 & 1) break L4;
if (HEAP32[$596 >> 2] | 0) {
$$10$off0$2 = 1;
break;
}
__THREW__ = 0;
HEAP32[$vararg_buffer64 >> 2] = 72208;
invoke_vii(115, 17935, $vararg_buffer64 | 0);
$598 = __THREW__;
__THREW__ = 0;
if ($598 & 1) break L4; else $$10$off0$2 = 1;
} while (0);
if (($indvars$iv | 0) < 4) {
$$6$off0333 = $$10$off0$2;
$indvars$iv = $indvars$iv + 1 | 0;
} else break;
}
if (($indvars$iv370 | 0) < 1) {
$$2117$off0335 = $$10$off0$2;
$indvars$iv370 = $indvars$iv370 + 1 | 0;
} else break;
}
$100 = (HEAP32[$0 + 20 >> 2] | 0) + 8 | 0;
HEAP32[$0 + 4 >> 2] = HEAP32[$100 >> 2];
if ($$10$off0$2) {
$367 = ___cxa_allocate_exception(4) | 0;
HEAP32[$367 >> 2] = 14;
__THREW__ = 0;
invoke_viii(75, $367 | 0, 232, 0);
__THREW__ = 0;
break;
}
$369 = HEAP32[$100 >> 2] | 0;
$$0109324 = HEAP32[$$ph >> 2] | 0;
if (!(($$0109324 | 0) == 0 | ($$0109324 | 0) == ($369 | 0))) {
$$0109326 = $$0109324;
do {
$373 = HEAP32[$8 >> 2] | 0;
if (($373 | 0) >= 0) {
if ((HEAP32[$9 >> 2] | 0) > ($373 | 0)) {
$$pre$phi375Z2D = $373 + 1 | 0;
label = 137;
} else {
$377 = HEAP32[$7 >> 2] | 0;
$379 = $373 + 1 | 0;
__THREW__ = 0;
invoke_vii(125, $6 | 0, (($377 | 0) > ($373 | 0) ? $377 : $379 + ($373 >>> 1) | 0) | 0);
$382 = __THREW__;
__THREW__ = 0;
if ($382 & 1) break L4;
if ((HEAP32[$8 >> 2] | 0) <= ($373 | 0)) {
$$pre$phi375Z2D = $379;
label = 137;
}
}
if ((label | 0) == 137) {
label = 0;
HEAP32[$8 >> 2] = $$pre$phi375Z2D;
}
HEAP32[(HEAP32[$6 >> 2] | 0) + ($373 << 2) >> 2] = $$0109326;
}
$$0109326 = HEAP32[$$0109326 + 8 >> 2] | 0;
} while (!(($$0109326 | 0) == 0 | ($$0109326 | 0) == ($369 | 0)));
}
if (!$369) {
STACKTOP = sp;
return;
} else $$0322 = $369;
while (1) {
if (($$0322 | 0) == (HEAP32[$391 >> 2] | 0)) {
label = 149;
break;
}
$393 = HEAP32[$4 >> 2] | 0;
if (($393 | 0) >= 0) {
if ((HEAP32[$5 >> 2] | 0) > ($393 | 0)) {
$$pre$phi373Z2D = $393 + 1 | 0;
label = 146;
} else {
$397 = HEAP32[$3 >> 2] | 0;
$399 = $393 + 1 | 0;
__THREW__ = 0;
invoke_vii(125, $2 | 0, (($397 | 0) > ($393 | 0) ? $397 : $399 + ($393 >>> 1) | 0) | 0);
$402 = __THREW__;
__THREW__ = 0;
if ($402 & 1) break L4;
if ((HEAP32[$4 >> 2] | 0) <= ($393 | 0)) {
$$pre$phi373Z2D = $399;
label = 146;
}
}
if ((label | 0) == 146) {
label = 0;
HEAP32[$4 >> 2] = $$pre$phi373Z2D;
}
HEAP32[(HEAP32[$2 >> 2] | 0) + ($393 << 2) >> 2] = $$0322;
}
$$0322 = HEAP32[$$0322 + 8 >> 2] | 0;
if (!$$0322) {
label = 149;
break;
}
}
if ((label | 0) == 149) {
STACKTOP = sp;
return;
}
}
} while (0);
$410 = ___cxa_find_matching_catch_2() | 0;
$412 = HEAP32[$6 >> 2] | 0;
if ($412 | 0) {
_free($412);
HEAP32[$6 >> 2] = 0;
}
HEAP32[$8 >> 2] = 0;
HEAP32[$9 >> 2] = 0;
$414 = HEAP32[$2 >> 2] | 0;
if (!$414) {
HEAP32[$4 >> 2] = 0;
HEAP32[$5 >> 2] = 0;
___resumeException($410 | 0);
}
_free($414);
HEAP32[$2 >> 2] = 0;
HEAP32[$4 >> 2] = 0;
HEAP32[$5 >> 2] = 0;
___resumeException($410 | 0);
}
function __ZN20ArmHandConstellationC2E18SiGMLConstellationPKS_12SET_OF_HANDS9Mirroringb($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
var $$$$$$153 = 0, $$$$$$154 = 0, $$$$$153 = 0, $$$$$154 = 0, $$$$153 = 0, $$$$154 = 0, $$$153 = 0, $$$154 = 0, $$064 = 0, $$066 = 0, $$153 = 0, $$154 = 0, $$sink149 = 0, $$sroa$0126$0$copyload = 0, $$sroa$3$0$copyload = f0, $$sroa$3122$0$copyload = f0, $$sroa$3125$0$copyload = f0, $$sroa$3128$0$copyload = f0, $10 = 0, $103 = 0, $107 = 0, $108 = 0, $11 = 0, $116 = 0, $119 = 0, $12 = 0, $121 = 0, $128 = 0, $13 = 0, $130 = 0, $133 = 0, $135 = 0, $14 = 0, $146 = 0, $15 = 0, $153 = 0, $154 = 0, $159 = 0, $16 = 0, $160 = 0, $164 = 0, $173 = 0, $177 = 0, $18 = 0, $182 = 0, $186 = 0, $19 = 0, $191 = 0, $193 = 0, $198 = 0, $20 = 0, $203 = 0, $208 = 0, $213 = 0, $214 = 0, $216 = 0, $219 = 0, $223 = 0, $227 = 0, $23 = 0, $235 = 0, $242 = 0, $243 = 0, $25 = 0, $255 = 0, $256 = 0, $260 = 0, $261 = 0, $268 = 0, $269 = 0, $281 = 0, $282 = 0, $286 = 0, $287 = 0, $288 = 0, $292 = 0, $293 = 0, $296 = 0, $305 = 0, $316 = 0, $333 = 0, $335 = 0, $339 = 0, $341 = 0, $352 = 0, $37 = 0, $372 = 0, $377 = 0, $383 = 0, $385 = 0, $389 = 0, $39 = 0, $391 = 0, $402 = 0, $42 = 0, $422 = 0, $427 = 0, $43 = 0, $433 = 0, $44 = 0, $442 = 0, $443 = 0, $449 = 0, $45 = 0, $459 = 0, $465 = 0, $467 = 0, $472 = 0, $478 = 0, $480 = 0, $485 = 0, $500 = 0, $51 = 0, $517 = 0, $52 = 0, $53 = 0, $532 = 0, $539 = 0, $549 = 0, $552 = 0, $554 = 0, $555 = 0, $558 = 0, $559 = 0, $563 = 0, $564 = 0, $568 = 0, $569 = 0, $570 = 0, $575 = 0, $580 = 0, $59 = 0, $593 = 0, $598 = 0, $599 = 0, $6 = 0, $601 = 0, $607 = 0, $608 = 0, $61 = 0, $615 = 0, $618 = 0, $631 = 0, $636 = 0, $637 = 0, $639 = 0, $645 = 0, $646 = 0, $653 = 0, $654 = 0, $655 = 0, $66 = 0, $663 = 0, $68 = 0, $681 = 0, $683 = 0, $684 = 0, $686 = 0, $688 = 0, $691 = 0, $694 = 0, $701 = 0, $703 = 0, $704 = 0, $706 = 0, $708 = 0, $711 = 0, $714 = 0, $715 = 0, $74 = 0, $76 = 0, $79 = 0, $8 = 0, $82 = 0, $87 = 0, $9 = 0, $91 = 0, $92 = 0, $or$cond$i = 0, $or$cond$i98 = 0, $or$cond5$i = 0, $or$cond5$i101 = 0, $or$cond7$i = 0, $or$cond7$i103 = 0, $tmpcast7492$sroa$0$0$extract$trunc = 0, $tmpcast94$sroa$0$0$extract$trunc = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer101 = 0, $vararg_buffer103 = 0, $vararg_buffer105 = 0, $vararg_buffer107 = 0, $vararg_buffer109 = 0, $vararg_buffer113 = 0, $vararg_buffer115 = 0, $vararg_buffer117 = 0, $vararg_buffer12 = 0, $vararg_buffer120 = 0, $vararg_buffer124 = 0, $vararg_buffer127 = 0, $vararg_buffer131 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer2 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer39 = 0, $vararg_buffer41 = 0, $vararg_buffer43 = 0, $vararg_buffer45 = 0, $vararg_buffer47 = 0, $vararg_buffer52 = 0, $vararg_buffer54 = 0, $vararg_buffer56 = 0, $vararg_buffer58 = 0, $vararg_buffer60 = 0, $vararg_buffer62 = 0, $vararg_buffer64 = 0, $vararg_buffer66 = 0, $vararg_buffer68 = 0, $vararg_buffer70 = 0, $vararg_buffer72 = 0, $vararg_buffer74 = 0, $vararg_buffer76 = 0, $vararg_buffer78 = 0, $vararg_buffer8 = 0, $vararg_buffer81 = 0, $vararg_buffer85 = 0, $vararg_buffer87 = 0, $vararg_buffer89 = 0, $vararg_buffer91 = 0, $vararg_buffer93 = 0, $vararg_buffer95 = 0, $vararg_buffer99 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 464 | 0;
$vararg_buffer131 = sp + 456 | 0;
$vararg_buffer127 = sp + 448 | 0;
$vararg_buffer124 = sp + 440 | 0;
$vararg_buffer120 = sp + 432 | 0;
$vararg_buffer117 = sp + 424 | 0;
$vararg_buffer115 = sp + 416 | 0;
$vararg_buffer113 = sp + 408 | 0;
$vararg_buffer109 = sp + 400 | 0;
$vararg_buffer107 = sp + 392 | 0;
$vararg_buffer105 = sp + 384 | 0;
$vararg_buffer103 = sp + 376 | 0;
$vararg_buffer101 = sp + 368 | 0;
$vararg_buffer99 = sp + 360 | 0;
$vararg_buffer95 = sp + 352 | 0;
$vararg_buffer93 = sp + 344 | 0;
$vararg_buffer91 = sp + 336 | 0;
$vararg_buffer89 = sp + 328 | 0;
$vararg_buffer87 = sp + 320 | 0;
$vararg_buffer85 = sp + 312 | 0;
$vararg_buffer81 = sp + 304 | 0;
$vararg_buffer78 = sp + 296 | 0;
$vararg_buffer76 = sp + 288 | 0;
$vararg_buffer74 = sp + 280 | 0;
$vararg_buffer72 = sp + 272 | 0;
$vararg_buffer70 = sp + 264 | 0;
$vararg_buffer68 = sp + 256 | 0;
$vararg_buffer66 = sp + 248 | 0;
$vararg_buffer64 = sp + 240 | 0;
$vararg_buffer62 = sp + 232 | 0;
$vararg_buffer60 = sp + 224 | 0;
$vararg_buffer58 = sp + 216 | 0;
$vararg_buffer56 = sp + 208 | 0;
$vararg_buffer54 = sp + 200 | 0;
$vararg_buffer52 = sp + 192 | 0;
$vararg_buffer47 = sp + 176 | 0;
$vararg_buffer45 = sp + 168 | 0;
$vararg_buffer43 = sp + 160 | 0;
$vararg_buffer41 = sp + 152 | 0;
$vararg_buffer39 = sp + 144 | 0;
$vararg_buffer37 = sp + 136 | 0;
$vararg_buffer35 = sp + 128 | 0;
$vararg_buffer33 = sp + 120 | 0;
$vararg_buffer31 = sp + 112 | 0;
$vararg_buffer29 = sp + 104 | 0;
$vararg_buffer27 = sp + 96 | 0;
$vararg_buffer25 = sp + 88 | 0;
$vararg_buffer23 = sp + 80 | 0;
$vararg_buffer21 = sp + 72 | 0;
$vararg_buffer19 = sp + 64 | 0;
$vararg_buffer17 = sp + 56 | 0;
$vararg_buffer14 = sp + 48 | 0;
$vararg_buffer12 = sp + 40 | 0;
$vararg_buffer10 = sp + 32 | 0;
$vararg_buffer8 = sp + 24 | 0;
$vararg_buffer2 = sp + 8 | 0;
$vararg_buffer = sp;
HEAP16[$0 >> 1] = 0;
HEAP8[$0 + 2 >> 0] = 0;
$6 = $0 + 4 | 0;
HEAP16[$6 >> 1] = 0;
HEAP8[$6 + 2 >> 0] = 0;
HEAPF32[$0 + 8 >> 2] = Math_fround(.5);
$8 = $0 + 12 | 0;
HEAP16[$8 >> 1] = 0;
HEAP8[$8 + 2 >> 0] = 0;
$9 = $0 + 16 | 0;
HEAP16[$9 >> 1] = 0;
HEAP8[$9 + 2 >> 0] = 0;
$10 = $0 + 20 | 0;
HEAPF32[$10 >> 2] = Math_fround(.5);
$11 = $0 + 24 | 0;
HEAP16[$11 >> 1] = 0;
HEAP8[$11 + 2 >> 0] = 0;
$12 = $0 + 28 | 0;
HEAP16[$12 >> 1] = 0;
HEAP8[$12 + 2 >> 0] = 0;
$13 = $0 + 32 | 0;
HEAPF32[$13 >> 2] = Math_fround(.5);
$14 = $0 + 36 | 0;
HEAP16[$14 >> 1] = 0;
HEAP8[$14 + 2 >> 0] = 0;
$15 = $0 + 40 | 0;
HEAP16[$15 >> 1] = 0;
HEAP8[$15 + 2 >> 0] = 0;
$16 = $0 + 44 | 0;
HEAP32[$16 >> 2] = 0;
__ZN6VectorC2Ev($0 + 48 | 0);
$18 = $0 + 60 | 0;
$19 = $0 + 61 | 0;
$20 = $0 + 62 | 0;
HEAP32[$18 >> 2] = 0;
HEAP8[$18 + 4 >> 0] = 0;
if (0) {
HEAP32[$vararg_buffer >> 2] = $0;
HEAP32[$vararg_buffer + 4 >> 2] = $3;
__Z7eprintfPKcz(25965, $vararg_buffer);
$23 = HEAP32[16082] | 0;
if ($23 | 0) {
$25 = HEAP8[$4 >> 0] | 0;
HEAP32[$vararg_buffer2 >> 2] = $25 & 1 ? 84 : 70;
HEAP32[$vararg_buffer2 + 4 >> 2] = $25 & 2 ? 84 : 70;
HEAP32[$vararg_buffer2 + 8 >> 2] = $25 & 4 ? 84 : 70;
HEAP32[$vararg_buffer2 + 12 >> 2] = $25 & 8 ? 84 : 70;
_fprintf($23, 25999, $vararg_buffer2) | 0;
}
__Z5eputsPKc(26019);
__ZNK18SiGMLConstellation5printEP8_IO_FILE($1, HEAP32[16082] | 0);
if ($2 | 0) __ZNK20ArmHandConstellation5printEP8_IO_FILE($2, HEAP32[16082] | 0);
}
$37 = $1 + 68 | 0;
$39 = HEAP32[16607] | 0;
L8 : do if (!(($39 ^ HEAP32[$37 >> 2]) & 16777215)) label = 9; else {
switch ($3 | 0) {
case 2:
case 5:
{
label = 9;
break L8;
break;
}
default:
{}
}
__Z7eprintfPKcz(26034, $vararg_buffer8);
HEAP16[$1 >> 1] = HEAP16[$37 >> 1] | 0;
HEAP8[$1 + 2 >> 0] = HEAP8[$37 + 2 >> 0] | 0;
$42 = $1 + 4 | 0;
HEAP16[$42 >> 1] = 0;
HEAP8[$42 + 2 >> 0] = 0;
HEAP16[$37 >> 1] = 0;
HEAP8[$37 + 2 >> 0] = 0;
$43 = $1 + 64 | 0;
$44 = $1 + 12 | 0;
HEAP16[$44 >> 1] = HEAP16[$43 >> 1] | 0;
HEAP8[$44 + 2 >> 0] = HEAP8[$43 + 2 >> 0] | 0;
$$sink149 = $43;
label = 11;
} while (0);
if ((label | 0) == 9) {
$45 = $1 + 64 | 0;
if (!(($3 | 4 | 0) == 5 ? 1 : (($39 ^ HEAP32[$45 >> 2]) & 16777215 | 0) == 0)) {
__Z7eprintfPKcz(26068, $vararg_buffer10);
HEAP16[$1 >> 1] = HEAP16[$45 >> 1] | 0;
HEAP8[$1 + 2 >> 0] = HEAP8[$45 + 2 >> 0] | 0;
$51 = $1 + 4 | 0;
HEAP16[$51 >> 1] = 0;
HEAP8[$51 + 2 >> 0] = 0;
$52 = $1 + 12 | 0;
HEAP16[$52 >> 1] = HEAP16[$37 >> 1] | 0;
HEAP8[$52 + 2 >> 0] = HEAP8[$37 + 2 >> 0] | 0;
HEAP16[$45 >> 1] = 0;
HEAP8[$45 + 2 >> 0] = 0;
$$sink149 = $37;
label = 11;
}
}
if ((label | 0) == 11) {
HEAP16[$$sink149 >> 1] = 0;
HEAP8[$$sink149 + 2 >> 0] = 0;
$53 = HEAP32[$16 >> 2] | 0;
if ($53 | 0) {
$59 = (HEAPU16[$1 >> 1] | 0 | (HEAPU8[$1 + 2 >> 0] | 0) << 16) & 9437183 | $53 << 20 & 7340032;
HEAP16[$1 >> 1] = $59;
HEAP8[$1 + 2 >> 0] = $59 >>> 16;
$61 = $1 + 12 | 0;
$66 = HEAP32[$16 >> 2] << 20 & 7340032 | (HEAPU16[$61 >> 1] | 0 | (HEAPU8[$61 + 2 >> 0] | 0) << 16) & 9437183;
HEAP16[$61 >> 1] = $66;
HEAP8[$61 + 2 >> 0] = $66 >>> 16;
HEAP32[$16 >> 2] = 0;
}
if (1) {
$68 = $1 + 72 | 0;
if ((HEAP32[16607] ^ HEAP32[$68 >> 2]) & 16777215 | 0) {
__Z7eprintfPKcz(26105, $vararg_buffer12);
__ZNK10SiteIDPair5printEP8_IO_FILE($68, HEAP32[16082] | 0);
__Z5eputcc(10);
}
}
}
$74 = $1 + 72 | 0;
$76 = HEAP32[16607] | 0;
if (!(($76 ^ HEAP32[$74 >> 2]) & 16777215)) $82 = $76; else {
HEAP32[$0 >> 2] = HEAP32[$74 >> 2];
HEAP32[$0 + 4 >> 2] = HEAP32[$74 + 4 >> 2];
HEAP32[$0 + 8 >> 2] = HEAP32[$74 + 8 >> 2];
$82 = HEAP32[16607] | 0;
}
$79 = $1 + 64 | 0;
if (($82 ^ HEAP32[$79 >> 2]) & 16777215 | 0) {
HEAP16[$14 >> 1] = HEAP16[$79 >> 1] | 0;
HEAP8[$14 + 2 >> 0] = HEAP8[$79 + 2 >> 0] | 0;
}
if (($82 ^ HEAP32[$37 >> 2]) & 16777215 | 0) {
HEAP16[$15 >> 1] = HEAP16[$37 >> 1] | 0;
HEAP8[$15 + 2 >> 0] = HEAP8[$37 + 2 >> 0] | 0;
}
$87 = $1 + 16 | 0;
if (!(($82 ^ HEAP32[$87 >> 2]) & 16777215)) {
$$064 = 0;
$$066 = 1;
} else {
HEAP32[$8 >> 2] = HEAP32[$87 >> 2];
HEAP32[$8 + 4 >> 2] = HEAP32[$87 + 4 >> 2];
HEAP32[$8 + 8 >> 2] = HEAP32[$87 + 8 >> 2];
$91 = $1 + 40 | 0;
HEAP16[$14 >> 1] = HEAP16[$91 >> 1] | 0;
HEAP8[$14 + 2 >> 0] = HEAP8[$91 + 2 >> 0] | 0;
$92 = HEAPU16[$8 >> 1] | 0 | (HEAPU8[$8 + 2 >> 0] | 0) << 16;
if (($92 & 252 | 0) == 12 | (($92 & 1015808 | 0) != 0 | (($92 & 255) + -1 | 0) >>> 0 < 11)) {
$$064 = ($92 & 16777215) >>> 20 & 7;
$$066 = 2;
} else {
$$064 = 0;
$$066 = 1;
}
}
$103 = $1 + 28 | 0;
if (!(($82 ^ HEAP32[$103 >> 2]) & 16777215)) $135 = $82; else {
HEAP32[$11 >> 2] = HEAP32[$103 >> 2];
HEAP32[$11 + 4 >> 2] = HEAP32[$103 + 4 >> 2];
HEAP32[$11 + 8 >> 2] = HEAP32[$103 + 8 >> 2];
$107 = $1 + 44 | 0;
HEAP16[$15 >> 1] = HEAP16[$107 >> 1] | 0;
HEAP8[$15 + 2 >> 0] = HEAP8[$107 + 2 >> 0] | 0;
$108 = HEAPU16[$11 >> 1] | 0 | (HEAPU8[$11 + 2 >> 0] | 0) << 16;
if (($108 & 252 | 0) == 12 | (($108 & 1015808 | 0) != 0 | (($108 & 255) + -1 | 0) >>> 0 < 11)) {
$116 = $$064 & 65535;
$119 = ($108 & 16777215) >>> 20 & 7;
$121 = $119 << 16 >> 16 < $116 << 16 >> 16 ? $116 : $119;
if ($$066 << 16 >> 16 == 2) {
HEAP32[$16 >> 2] = $121 << 16 >> 16 == 0 ? 3 : $121 & 65535;
$128 = (HEAPU16[$8 >> 1] | 0 | (HEAPU8[$8 + 2 >> 0] | 0) << 16) & 9437183 | 1048576;
HEAP16[$8 >> 1] = $128;
HEAP8[$8 + 2 >> 0] = $128 >>> 16;
$130 = $108 & 9437183 | 1048576;
HEAP16[$11 >> 1] = $130;
HEAP8[$11 + 2 >> 0] = $130 >>> 16;
if (!1) $135 = $82; else {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer14 >> 2] = HEAP32[$16 >> 2];
__Z7eprintfPKcz(26144, $vararg_buffer14);
$135 = HEAP32[16607] | 0;
}
} else $135 = $82;
} else $135 = $82;
}
$133 = HEAP32[$1 >> 2] | 0;
do if (($135 ^ $133) & 16777215 | 0) {
if (!(HEAP8[$4 >> 0] & 15)) if (($3 | 0) == 2) {
HEAP32[$11 >> 2] = HEAP32[$1 >> 2];
HEAP32[$11 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$11 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
$235 = $1 + 12 | 0;
if (($135 ^ HEAP32[$235 >> 2]) & 16777215 | 0) {
HEAP16[$15 >> 1] = HEAP16[$235 >> 1] | 0;
HEAP8[$15 + 2 >> 0] = HEAP8[$235 + 2 >> 0] | 0;
$242 = (HEAPU16[$15 >> 1] | 0 | (HEAPU8[$15 + 2 >> 0] | 0) << 16) & 16773375 | ($5 ? 512 : 256);
HEAP16[$15 >> 1] = $242;
HEAP8[$15 + 2 >> 0] = $242 >>> 16;
}
$243 = HEAPU16[$11 >> 1] | 0 | (HEAPU8[$11 + 2 >> 0] | 0) << 16;
if (!(($243 & 252 | 0) == 12 | (($243 & 1015808 | 0) != 0 | (($243 & 255) + -1 | 0) >>> 0 < 11))) break;
HEAP32[$16 >> 2] = ($243 & 16777215) >>> 20 & 7;
$255 = $243 & 9437183 | 1048576;
HEAP16[$11 >> 1] = $255;
HEAP8[$11 + 2 >> 0] = $255 >>> 16;
$256 = HEAP32[$12 >> 2] | 0;
if (!(($135 ^ $256) & 16777215)) break;
$260 = $256 & 9437183 | 1048576;
HEAP16[$12 >> 1] = $260;
HEAP8[$12 + 2 >> 0] = $260 >>> 16;
break;
} else {
HEAP32[$8 >> 2] = HEAP32[$1 >> 2];
HEAP32[$8 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$8 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
$261 = $1 + 12 | 0;
if (($135 ^ HEAP32[$261 >> 2]) & 16777215 | 0) {
HEAP16[$14 >> 1] = HEAP16[$261 >> 1] | 0;
HEAP8[$14 + 2 >> 0] = HEAP8[$261 + 2 >> 0] | 0;
$268 = (HEAPU16[$14 >> 1] | 0 | (HEAPU8[$14 + 2 >> 0] | 0) << 16) & 16773375 | ($5 ? 256 : 512);
HEAP16[$14 >> 1] = $268;
HEAP8[$14 + 2 >> 0] = $268 >>> 16;
}
$269 = HEAPU16[$8 >> 1] | 0 | (HEAPU8[$8 + 2 >> 0] | 0) << 16;
if (!(($269 & 252 | 0) == 12 | (($269 & 1015808 | 0) != 0 | (($269 & 255) + -1 | 0) >>> 0 < 11))) break;
HEAP32[$16 >> 2] = ($269 & 16777215) >>> 20 & 7;
$281 = $269 & 9437183 | 1048576;
HEAP16[$8 >> 1] = $281;
HEAP8[$8 + 2 >> 0] = $281 >>> 16;
$282 = HEAP32[$9 >> 2] | 0;
if (!(($135 ^ $282) & 16777215)) break;
$286 = $282 & 9437183 | 1048576;
HEAP16[$9 >> 1] = $286;
HEAP8[$9 + 2 >> 0] = $286 >>> 16;
break;
}
if (!(($133 & 252 | 0) == 12 | (($133 & 1015808 | 0) != 0 | (($133 & 255) + -1 | 0) >>> 0 < 11))) {
HEAP32[$8 >> 2] = HEAP32[$1 >> 2];
HEAP32[$8 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$8 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[$11 >> 2] = HEAP32[$1 >> 2];
HEAP32[$11 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$11 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
$198 = __Z14MirrorBodySide16AbsoluteBodySide(((HEAPU16[$11 >> 1] | 0 | (HEAPU8[$11 + 2 >> 0] | 0) << 16) & 16777215) >>> 8 & 15) | 0;
$203 = (HEAPU16[$11 >> 1] | 0 | (HEAPU8[$11 + 2 >> 0] | 0) << 16) & 16773375 | $198 << 8 & 3840;
HEAP16[$11 >> 1] = $203;
HEAP8[$11 + 2 >> 0] = $203 >>> 16;
$208 = __Z14MirrorBodySide16AbsoluteBodySide(((HEAPU16[$12 >> 1] | 0 | (HEAPU8[$12 + 2 >> 0] | 0) << 16) & 16777215) >>> 8 & 15) | 0;
$213 = (HEAPU16[$12 >> 1] | 0 | (HEAPU8[$12 + 2 >> 0] | 0) << 16) & 16773375 | $208 << 8 & 3840;
HEAP16[$12 >> 1] = $213;
HEAP8[$12 + 2 >> 0] = $213 >>> 16;
$214 = $1 + 12 | 0;
HEAP16[$14 >> 1] = HEAP16[$214 >> 1] | 0;
HEAP8[$14 + 2 >> 0] = HEAP8[$214 + 2 >> 0] | 0;
$216 = HEAP32[16607] | 0;
if (!(($216 ^ HEAP32[$14 >> 2]) & 16777215)) {
HEAP16[$14 >> 1] = HEAP16[$79 >> 1] | 0;
HEAP8[$14 + 2 >> 0] = HEAP8[$79 + 2 >> 0] | 0;
};
HEAP16[$15 >> 1] = HEAP16[$214 >> 1] | 0;
HEAP8[$15 + 2 >> 0] = HEAP8[$214 + 2 >> 0] | 0;
$219 = HEAP32[$15 >> 2] | 0;
if (!(($216 ^ $219) & 16777215)) {
HEAP16[$15 >> 1] = HEAP16[$37 >> 1] | 0;
HEAP8[$15 + 2 >> 0] = HEAP8[$37 + 2 >> 0] | 0;
$223 = HEAPU16[$15 >> 1] | 0 | (HEAPU8[$15 + 2 >> 0] | 0) << 16;
} else $223 = $219;
if ($223 & 3840 | 0) {
$227 = $223 & 16773375 | ($5 ? 512 : 256);
HEAP16[$15 >> 1] = $227;
HEAP8[$15 + 2 >> 0] = $227 >>> 16;
}
if (!1) break;
__Z7LogTimev() | 0;
__Z7eprintfPKcz(26499, $vararg_buffer35);
__ZNK10SiteIDPair5printEP8_IO_FILE($1, HEAP32[16082] | 0);
__Z7eprintfPKcz(26516, $vararg_buffer37);
__Z7eprintfPKcz(26368, $vararg_buffer39);
__ZNK10SiteIDPair5printEP8_IO_FILE($8, HEAP32[16082] | 0);
__Z5eputcc(10);
__Z7eprintfPKcz(26384, $vararg_buffer41);
__ZNK6SiteID5printEP8_IO_FILE($14, HEAP32[16082] | 0);
__Z5eputcc(10);
__Z7eprintfPKcz(26579, $vararg_buffer43);
__ZNK10SiteIDPair5printEP8_IO_FILE($11, HEAP32[16082] | 0);
__Z5eputcc(10);
__Z7eprintfPKcz(26478, $vararg_buffer45);
__ZNK6SiteID5printEP8_IO_FILE($15, HEAP32[16082] | 0);
__Z5eputcc(10);
break;
}
$146 = $1 + 12 | 0;
if (!((HEAP32[$146 >> 2] ^ $135) & 16777215)) {
HEAP16[$14 >> 1] = HEAP16[$1 >> 1] | 0;
HEAP8[$14 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
$173 = (HEAPU16[$14 >> 1] | 0 | (HEAPU8[$14 + 2 >> 0] | 0) << 16) & 16773375 | ($5 ? 256 : 512);
HEAP16[$14 >> 1] = $173;
HEAP8[$14 + 2 >> 0] = $173 >>> 16;
HEAP16[$15 >> 1] = HEAP16[$1 >> 1] | 0;
HEAP8[$15 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
$177 = (HEAPU16[$15 >> 1] | 0 | (HEAPU8[$15 + 2 >> 0] | 0) << 16) & 16773375 | ($5 ? 512 : 256);
HEAP16[$15 >> 1] = $177;
HEAP8[$15 + 2 >> 0] = $177 >>> 16;
if (1) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(26245, $vararg_buffer27);
__ZNK10SiteIDPair5printEP8_IO_FILE($1, HEAP32[16082] | 0);
__Z7eprintfPKcz(26402, $vararg_buffer29);
__Z7eprintfPKcz(26384, $vararg_buffer31);
__ZNK6SiteID5printEP8_IO_FILE($14, HEAP32[16082] | 0);
__Z5eputcc(10);
__Z7eprintfPKcz(26478, $vararg_buffer33);
__ZNK6SiteID5printEP8_IO_FILE($15, HEAP32[16082] | 0);
__Z5eputcc(10);
}
} else {
HEAP32[$8 >> 2] = HEAP32[$1 >> 2];
HEAP32[$8 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$8 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP16[$14 >> 1] = HEAP16[$146 >> 1] | 0;
HEAP8[$14 + 2 >> 0] = HEAP8[$146 + 2 >> 0] | 0;
$153 = (HEAPU16[$14 >> 1] | 0 | (HEAPU8[$14 + 2 >> 0] | 0) << 16) & 16773375 | ($5 ? 256 : 512);
HEAP16[$14 >> 1] = $153;
HEAP8[$14 + 2 >> 0] = $153 >>> 16;
$154 = HEAPU16[$8 >> 1] | 0 | (HEAPU8[$8 + 2 >> 0] | 0) << 16;
HEAP32[$16 >> 2] = ($154 & 16777215) >>> 20 & 7;
$159 = $154 & 9437183 | 1048576;
HEAP16[$8 >> 1] = $159;
HEAP8[$8 + 2 >> 0] = $159 >>> 16;
$160 = HEAP32[$9 >> 2] | 0;
if (($135 ^ $160) & 16777215 | 0) {
$164 = $160 & 9437183 | 1048576;
HEAP16[$9 >> 1] = $164;
HEAP8[$9 + 2 >> 0] = $164 >>> 16;
}
if (1) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(26245, $vararg_buffer17);
__ZNK10SiteIDPair5printEP8_IO_FILE($1, HEAP32[16082] | 0);
__Z7eprintfPKcz(26271, $vararg_buffer19);
__ZNK6SiteID5printEP8_IO_FILE($146, HEAP32[16082] | 0);
__Z7eprintfPKcz(26294, $vararg_buffer21);
__Z7eprintfPKcz(26368, $vararg_buffer23);
__ZNK10SiteIDPair5printEP8_IO_FILE($8, HEAP32[16082] | 0);
__Z5eputcc(10);
__Z7eprintfPKcz(26384, $vararg_buffer25);
__ZNK6SiteID5printEP8_IO_FILE($14, HEAP32[16082] | 0);
__Z5eputcc(10);
}
}
$182 = HEAP32[$16 >> 2] | 0;
$186 = ((HEAPU16[$14 >> 1] | 0 | (HEAPU8[$14 + 2 >> 0] | 0) << 16) & 16777215) >>> 20 & 7;
if (($182 | 0) < ($186 | 0)) {
HEAP32[$16 >> 2] = $186;
$193 = $186;
} else $193 = $182;
$191 = ((HEAPU16[$15 >> 1] | 0 | (HEAPU8[$15 + 2 >> 0] | 0) << 16) & 16777215) >>> 20 & 7;
if (($193 | 0) < ($191 | 0)) HEAP32[$16 >> 2] = $191;
} while (0);
$287 = $1 + 48 | 0;
$288 = HEAP32[$287 >> 2] | 0;
if ($288 | 0) {
if (!0) $293 = $288; else {
$292 = HEAP32[$16 >> 2] | 0;
HEAP32[$vararg_buffer47 >> 2] = $0;
HEAP32[$vararg_buffer47 + 4 >> 2] = $292;
HEAP32[$vararg_buffer47 + 8 >> 2] = $288;
__Z7eprintfPKcz(26598, $vararg_buffer47);
$293 = HEAP32[$287 >> 2] | 0;
}
HEAP32[$16 >> 2] = $293;
}
__ZL15CheckIsHandSiteR6SiteIDb($14, $5);
__ZL15CheckIsHandSiteR6SiteIDb($15, $5 ^ 1);
$296 = HEAP32[16607] | 0;
if (!(($296 ^ HEAP32[$8 >> 2]) & 16777215)) $305 = ($3 | 4 | 0) == 5 ? ((HEAP32[$0 >> 2] ^ $296) & 16777215 | 0) != 0 : 0; else $305 = 1;
HEAP8[$18 >> 0] = $305 & 1;
if (!(($296 ^ HEAP32[$11 >> 2]) & 16777215)) $316 = (($3 | 0) == 2 | ($3 | 0) == 5) & ((HEAP32[$0 >> 2] ^ $296) & 16777215 | 0) != 0; else $316 = 1;
HEAP8[$19 >> 0] = $316 & 1;
HEAP8[$20 >> 0] = (HEAP32[$16 >> 2] | 0) != 0 & 1;
do if ($2 | 0) {
if (1) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(26628, $vararg_buffer52);
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK20ArmHandConstellation5printEP8_IO_FILE($0, HEAP32[16082] | 0);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
__Z7eprintfPKcz(26711, $vararg_buffer54);
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK20ArmHandConstellation5printEP8_IO_FILE($2, HEAP32[16082] | 0);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
}
$tmpcast94$sroa$0$0$extract$trunc = HEAP32[$2 + 36 >> 2] | 0;
$333 = HEAPU16[$14 >> 1] | 0 | (HEAPU8[$14 + 2 >> 0] | 0) << 16;
$335 = ($333 & 255 | 0) == 0;
$339 = $335 ? $tmpcast94$sroa$0$0$extract$trunc & 255 | $333 & 16776960 : $333;
$341 = $339 & 255;
$or$cond$i98 = ($339 & 3840 | 0) == 0 & ($335 | (($341 + -1 | 0) >>> 0 < 11 | ($341 & 252 | 0) == 12));
$$153 = $or$cond$i98 ? $339 & 16773375 | $tmpcast94$sroa$0$0$extract$trunc & 3840 : $339;
$352 = $$153 & 255;
$or$cond5$i101 = ($$153 & 28672 | 0) == 0 & (($352 + -7 | 0) >>> 0 < 5 | ($352 & 252 | 0) == 12);
$$$153 = $or$cond5$i101 ? $$153 & 16748543 | $tmpcast94$sroa$0$0$extract$trunc & 28672 : $$153;
$or$cond7$i103 = ($$$153 & 1015808 | 0) == 0 & (($$$153 & 255) + -7 | 0) >>> 0 < 5;
$$$$153 = $or$cond7$i103 ? $$$153 & 15761407 | $tmpcast94$sroa$0$0$extract$trunc & 1015808 : $$$153;
$372 = ($$$$153 & 7340032 | 0) == 0;
$$$$$153 = $372 ? $$$$153 & 9437183 | $tmpcast94$sroa$0$0$extract$trunc & 7340032 : $$$$153;
$377 = ($$$$$153 << 8 >> 8 | 0) > -1;
if ($335 | $or$cond$i98 | $or$cond5$i101 | $or$cond7$i103 | $372 | $377) {
$$$$$$153 = $377 ? $$$$$153 & 8388607 | $tmpcast94$sroa$0$0$extract$trunc & 8388608 : $$$$$153;
HEAP16[$14 >> 1] = $$$$$$153;
HEAP8[$14 + 2 >> 0] = $$$$$$153 >>> 16;
}
$tmpcast7492$sroa$0$0$extract$trunc = HEAP32[$2 + 40 >> 2] | 0;
$383 = HEAPU16[$15 >> 1] | 0 | (HEAPU8[$15 + 2 >> 0] | 0) << 16;
$385 = ($383 & 255 | 0) == 0;
$389 = $385 ? $tmpcast7492$sroa$0$0$extract$trunc & 255 | $383 & 16776960 : $383;
$391 = $389 & 255;
$or$cond$i = ($389 & 3840 | 0) == 0 & ($385 | (($391 + -1 | 0) >>> 0 < 11 | ($391 & 252 | 0) == 12));
$$154 = $or$cond$i ? $389 & 16773375 | $tmpcast7492$sroa$0$0$extract$trunc & 3840 : $389;
$402 = $$154 & 255;
$or$cond5$i = ($$154 & 28672 | 0) == 0 & (($402 + -7 | 0) >>> 0 < 5 | ($402 & 252 | 0) == 12);
$$$154 = $or$cond5$i ? $$154 & 16748543 | $tmpcast7492$sroa$0$0$extract$trunc & 28672 : $$154;
$or$cond7$i = ($$$154 & 1015808 | 0) == 0 & (($$$154 & 255) + -7 | 0) >>> 0 < 5;
$$$$154 = $or$cond7$i ? $$$154 & 15761407 | $tmpcast7492$sroa$0$0$extract$trunc & 1015808 : $$$154;
$422 = ($$$$154 & 7340032 | 0) == 0;
$$$$$154 = $422 ? $$$$154 & 9437183 | $tmpcast7492$sroa$0$0$extract$trunc & 7340032 : $$$$154;
$427 = ($$$$$154 << 8 >> 8 | 0) > -1;
if ($385 | $or$cond$i | $or$cond5$i | $or$cond7$i | $422 | $427) {
$$$$$$154 = $427 ? $$$$$154 & 8388607 | $tmpcast7492$sroa$0$0$extract$trunc & 8388608 : $$$$$154;
HEAP16[$15 >> 1] = $$$$$$154;
HEAP8[$15 + 2 >> 0] = $$$$$$154 >>> 16;
}
$433 = HEAP32[16607] | 0;
do if (!(($433 ^ HEAP32[$8 >> 2]) & 16777215)) if (!((HEAP32[$11 >> 2] ^ $433) & 16777215)) if (!((HEAP32[$0 >> 2] ^ $433) & 16777215)) {
$442 = $2 + 12 | 0;
HEAP32[$8 >> 2] = HEAP32[$442 >> 2];
HEAP32[$8 + 4 >> 2] = HEAP32[$442 + 4 >> 2];
HEAP32[$8 + 8 >> 2] = HEAP32[$442 + 8 >> 2];
$443 = $2 + 24 | 0;
HEAP32[$11 >> 2] = HEAP32[$443 >> 2];
HEAP32[$11 + 4 >> 2] = HEAP32[$443 + 4 >> 2];
HEAP32[$11 + 8 >> 2] = HEAP32[$443 + 8 >> 2];
HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
if (!1) break;
__Z7LogTimev() | 0;
__Z7eprintfPKcz(26727, $vararg_buffer56);
__Z5eputsPKc(26779);
__ZNK10SiteIDPair5printEP8_IO_FILE($8, HEAP32[16082] | 0);
__Z5eputcc(10);
__Z5eputsPKc(26788);
__ZNK10SiteIDPair5printEP8_IO_FILE($11, HEAP32[16082] | 0);
__Z5eputcc(10);
__Z5eputsPKc(26797);
__ZNK10SiteIDPair5printEP8_IO_FILE($0, HEAP32[16082] | 0);
__Z5eputcc(10);
} while (0);
$449 = HEAP32[16607] | 0;
do if (!(($449 ^ HEAP32[$0 >> 2]) & 16777215)) $465 = $449; else {
do if (!((HEAP32[$8 >> 2] ^ $449) & 16777215)) {
HEAP32[$8 >> 2] = HEAP32[$0 >> 2];
HEAP32[$8 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
HEAP32[$8 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
if (!1) {
$459 = $449;
break;
}
__Z7LogTimev() | 0;
__Z7eprintfPKcz(26806, $vararg_buffer58);
__ZNK10SiteIDPair5printEP8_IO_FILE($8, HEAP32[16082] | 0);
__Z5eputcc(10);
$459 = HEAP32[16607] | 0;
} else $459 = $449; while (0);
if (($459 ^ HEAP32[$11 >> 2]) & 16777215 | 0) {
$465 = $459;
break;
};
HEAP32[$11 >> 2] = HEAP32[$0 >> 2];
HEAP32[$11 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
HEAP32[$11 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
if (!1) {
$465 = $459;
break;
}
__Z7LogTimev() | 0;
__Z7eprintfPKcz(26850, $vararg_buffer60);
__ZNK10SiteIDPair5printEP8_IO_FILE($11, HEAP32[16082] | 0);
__Z5eputcc(10);
$465 = HEAP32[16607] | 0;
} while (0);
do if (!(($465 ^ HEAP32[$8 >> 2]) & 16777215)) {
$467 = $2 + 12 | 0;
HEAP32[$8 >> 2] = HEAP32[$467 >> 2];
HEAP32[$8 + 4 >> 2] = HEAP32[$467 + 4 >> 2];
HEAP32[$8 + 8 >> 2] = HEAP32[$467 + 8 >> 2];
if (!1) {
$472 = $465;
break;
}
__Z7LogTimev() | 0;
__Z7eprintfPKcz(26896, $vararg_buffer62);
__ZNK10SiteIDPair5printEP8_IO_FILE($8, HEAP32[16082] | 0);
__Z5eputcc(10);
$472 = HEAP32[16607] | 0;
} else $472 = $465; while (0);
do if (!(($472 ^ HEAP32[$8 >> 2]) & 16777215)) {
HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
HEAP32[$8 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
HEAP32[$8 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
if (!1) {
$478 = $472;
break;
}
__Z7LogTimev() | 0;
__Z7eprintfPKcz(26932, $vararg_buffer64);
__ZNK10SiteIDPair5printEP8_IO_FILE($8, HEAP32[16082] | 0);
__Z5eputcc(10);
$478 = HEAP32[16607] | 0;
} else $478 = $472; while (0);
do if (!(($478 ^ HEAP32[$11 >> 2]) & 16777215)) {
$480 = $2 + 24 | 0;
HEAP32[$11 >> 2] = HEAP32[$480 >> 2];
HEAP32[$11 + 4 >> 2] = HEAP32[$480 + 4 >> 2];
HEAP32[$11 + 8 >> 2] = HEAP32[$480 + 8 >> 2];
if (!1) {
$485 = $478;
break;
}
__Z7LogTimev() | 0;
__Z7eprintfPKcz(26968, $vararg_buffer66);
__ZNK10SiteIDPair5printEP8_IO_FILE($11, HEAP32[16082] | 0);
__Z5eputcc(10);
$485 = HEAP32[16607] | 0;
} else $485 = $478; while (0);
do if (!(($485 ^ HEAP32[$11 >> 2]) & 16777215)) {
HEAP32[$11 >> 2] = HEAP32[$2 >> 2];
HEAP32[$11 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
HEAP32[$11 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
if (!1) break;
__Z7LogTimev() | 0;
__Z7eprintfPKcz(27007, $vararg_buffer68);
__ZNK10SiteIDPair5printEP8_IO_FILE($11, HEAP32[16082] | 0);
__Z5eputcc(10);
} while (0);
if (!(HEAP32[$16 >> 2] | 0)) HEAP32[$16 >> 2] = HEAP32[$2 + 44 >> 2];
if (!1) break;
__Z7LogTimev() | 0;
__Z7eprintfPKcz(27045, $vararg_buffer70);
__ZNK20ArmHandConstellation5printEP8_IO_FILE($0, HEAP32[16082] | 0);
} while (0);
$$sroa$0126$0$copyload = HEAP32[$8 >> 2] | 0;
if (!((HEAP32[$11 >> 2] ^ $$sroa$0126$0$copyload) & 16777215)) {
$$sroa$3125$0$copyload = Math_fround(HEAPF32[$13 >> 2]);
$$sroa$3128$0$copyload = Math_fround(HEAPF32[$10 >> 2]);
if (!($$sroa$3128$0$copyload != $$sroa$3125$0$copyload ? 1 : ((HEAP32[$9 >> 2] ^ HEAP32[$12 >> 2]) & 16777215 | 0) != 0)) {
$500 = HEAP32[16607] | 0;
if (($3 | 0) == 5 | (($500 ^ $$sroa$0126$0$copyload) & 16777215 | 0) != 0) if (!((HEAP32[$0 >> 2] ^ $500) & 16777215)) {
HEAP32[$0 >> 2] = HEAP32[$8 >> 2];
HEAP32[$0 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
HEAP32[$0 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
if (!(HEAP32[$16 >> 2] | 0)) HEAP32[$16 >> 2] = $$sroa$0126$0$copyload >>> 20 & 7;
HEAP16[$8 >> 1] = 0;
HEAP8[$8 + 2 >> 0] = 0;
HEAP16[$9 >> 1] = 0;
HEAP8[$9 + 2 >> 0] = 0;
HEAP16[$11 >> 1] = 0;
HEAP8[$11 + 2 >> 0] = 0;
HEAP16[$12 >> 1] = 0;
HEAP8[$12 + 2 >> 0] = 0;
if (1) if ((HEAP32[16607] ^ HEAP32[$0 >> 2]) & 16777215 | 0) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(27064, $vararg_buffer72);
__ZNK10SiteIDPair5printEP8_IO_FILE($0, HEAP32[16082] | 0);
__Z7eprintfPKcz(27110, $vararg_buffer74);
}
}
}
}
$517 = HEAP32[$8 >> 2] | 0;
if (!((HEAP32[$11 >> 2] ^ $517) & 16777215)) {
$$sroa$3$0$copyload = Math_fround(HEAPF32[$13 >> 2]);
$$sroa$3122$0$copyload = Math_fround(HEAPF32[$10 >> 2]);
if ($$sroa$3122$0$copyload != $$sroa$3$0$copyload ? 1 : ((HEAP32[$9 >> 2] ^ HEAP32[$12 >> 2]) & 16777215 | 0) != 0) label = 117; else if (($3 | 0) == 5) label = 119; else $532 = $517;
} else label = 117;
if ((label | 0) == 117) if (($3 | 0) == 5 ? ((HEAP32[16607] ^ HEAP32[$0 >> 2]) & 16777215 | 0) != 0 : 0) label = 119; else $532 = $517;
if ((label | 0) == 119) if (!(HEAP32[$16 >> 2] | 0)) {
HEAP32[$16 >> 2] = 3;
if (!1) $532 = $517; else {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(27141, $vararg_buffer76);
$532 = HEAPU16[$8 >> 1] | 0 | (HEAPU8[$8 + 2 >> 0] | 0) << 16;
}
} else $532 = $517;
if (($532 & 252 | 0) == 12 | (($532 & 1015808 | 0) != 0 | (($532 & 255) + -1 | 0) >>> 0 < 11)) {
$539 = HEAPU16[$11 >> 1] | 0 | (HEAPU8[$11 + 2 >> 0] | 0) << 16;
if (($539 & 252 | 0) == 12 | (($539 & 1015808 | 0) != 0 | (($539 & 255) + -1 | 0) >>> 0 < 11)) {
$549 = ($532 & 16777215) >>> 20 & 7;
$552 = ($539 & 16777215) >>> 20 & 7;
$554 = $549 >>> 0 > $552 >>> 0 ? $549 : $552;
$555 = HEAP32[$16 >> 2] | 0;
HEAP32[$16 >> 2] = ($554 | 0) > ($555 | 0) ? $554 : $555;
HEAP16[$14 >> 1] = HEAP16[$11 >> 1] | 0;
HEAP8[$14 + 2 >> 0] = HEAP8[$11 + 2 >> 0] | 0;
$558 = HEAP32[$14 >> 2] | 0;
$559 = HEAP32[16607] | 0;
if (($559 ^ $558) & 16777215 | 0) {
$563 = $558 & 9437183 | 1048576;
HEAP16[$14 >> 1] = $563;
HEAP8[$14 + 2 >> 0] = $563 >>> 16;
};
HEAP16[$15 >> 1] = HEAP16[$8 >> 1] | 0;
HEAP8[$15 + 2 >> 0] = HEAP8[$8 + 2 >> 0] | 0;
$564 = HEAP32[$15 >> 2] | 0;
if (($559 ^ $564) & 16777215 | 0) {
$568 = $564 & 9437183 | 1048576;
HEAP16[$15 >> 1] = $568;
HEAP8[$15 + 2 >> 0] = $568 >>> 16;
};
HEAP16[$8 >> 1] = HEAP16[33214] | 0;
HEAP8[$8 + 2 >> 0] = HEAP8[66430] | 0;
$569 = $0 + 16 | 0;
HEAP16[$569 >> 1] = HEAP16[33214] | 0;
HEAP8[$569 + 2 >> 0] = HEAP8[66430] | 0;
HEAP16[$11 >> 1] = HEAP16[33214] | 0;
HEAP8[$11 + 2 >> 0] = HEAP8[66430] | 0;
$570 = $0 + 28 | 0;
HEAP16[$570 >> 1] = HEAP16[33214] | 0;
HEAP8[$570 + 2 >> 0] = HEAP8[66430] | 0;
if (1) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer78 >> 2] = HEAP32[$16 >> 2];
__Z7eprintfPKcz(27211, $vararg_buffer78);
}
}
}
if (0) {
HEAP32[$vararg_buffer81 >> 2] = $3;
HEAP32[$vararg_buffer81 + 4 >> 2] = 5;
__Z7eprintfPKcz(27304, $vararg_buffer81);
}
$575 = (HEAP32[$16 >> 2] | 0) != 0;
do if (($3 | 0) != 5 & $575) {
L182 : do if (($3 | 4 | 0) == 5) {
$580 = HEAP32[16607] | 0;
do if (($580 ^ HEAP32[$79 >> 2]) & 16777215 | 0) {
if (!((HEAP32[$37 >> 2] ^ $580) & 16777215)) break;
if (1) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(27333, $vararg_buffer85);
__Z7eprintfPKcz(27422, $vararg_buffer87);
__ZNK10SiteIDPair5printEP8_IO_FILE($8, HEAP32[16082] | 0);
__Z7eprintfPKcz(27447, $vararg_buffer89);
__ZNK6SiteID5printEP8_IO_FILE($37, HEAP32[16082] | 0);
__Z7eprintfPKcz(27456, $vararg_buffer91);
__ZNK6SiteID5printEP8_IO_FILE($79, HEAP32[16082] | 0);
__Z7eprintfPKcz(27459, $vararg_buffer93);
};
HEAP16[$8 >> 1] = HEAP16[$37 >> 1] | 0;
HEAP8[$8 + 2 >> 0] = HEAP8[$37 + 2 >> 0] | 0;
HEAP16[$9 >> 1] = 0;
HEAP8[$9 + 2 >> 0] = 0;
HEAP16[$14 >> 1] = HEAP16[$79 >> 1] | 0;
HEAP8[$14 + 2 >> 0] = HEAP8[$79 + 2 >> 0] | 0;
break L182;
} while (0);
if (!1) $601 = $580; else {
__Z7LogTimev() | 0;
$593 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17197] | 0, HEAP32[$16 >> 2] | 0) | 0;
$598 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17192] | 0, (HEAPU16[$8 >> 1] | 0 | (HEAPU8[$8 + 2 >> 0] | 0) << 16) & 255) | 0;
HEAP32[$vararg_buffer95 >> 2] = $593;
HEAP32[$vararg_buffer95 + 4 >> 2] = $598;
__Z7eprintfPKcz(27463, $vararg_buffer95);
$601 = HEAP32[16607] | 0;
}
$599 = HEAP32[$8 >> 2] | 0;
if (($601 ^ $599) & 16777215 | 0) {
$607 = HEAP32[$16 >> 2] << 20 & 7340032 | $599 & 9437183;
HEAP16[$8 >> 1] = $607;
HEAP8[$8 + 2 >> 0] = $607 >>> 16;
}
$608 = HEAP32[$9 >> 2] | 0;
if (!(($601 ^ $608) & 16777215)) break;
$615 = HEAP32[$16 >> 2] << 20 & 7340032 | $608 & 9437183;
HEAP16[$9 >> 1] = $615;
HEAP8[$9 + 2 >> 0] = $615 >>> 16;
} else {
if (($3 | 0) != 2) break;
$618 = HEAP32[16607] | 0;
do if (($618 ^ HEAP32[$79 >> 2]) & 16777215 | 0) {
if (!((HEAP32[$37 >> 2] ^ $618) & 16777215)) break;
if (1) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(27512, $vararg_buffer99);
__Z7eprintfPKcz(27604, $vararg_buffer101);
__ZNK10SiteIDPair5printEP8_IO_FILE($11, HEAP32[16082] | 0);
__Z7eprintfPKcz(27447, $vararg_buffer103);
__ZNK6SiteID5printEP8_IO_FILE($79, HEAP32[16082] | 0);
__Z7eprintfPKcz(27456, $vararg_buffer105);
__ZNK6SiteID5printEP8_IO_FILE($37, HEAP32[16082] | 0);
__Z7eprintfPKcz(27459, $vararg_buffer107);
};
HEAP16[$11 >> 1] = HEAP16[$79 >> 1] | 0;
HEAP8[$11 + 2 >> 0] = HEAP8[$79 + 2 >> 0] | 0;
HEAP16[$12 >> 1] = 0;
HEAP8[$12 + 2 >> 0] = 0;
HEAP16[$15 >> 1] = HEAP16[$37 >> 1] | 0;
HEAP8[$15 + 2 >> 0] = HEAP8[$37 + 2 >> 0] | 0;
break L182;
} while (0);
if (!1) $639 = $618; else {
__Z7LogTimev() | 0;
$631 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17197] | 0, HEAP32[$16 >> 2] | 0) | 0;
$636 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17192] | 0, (HEAPU16[$11 >> 1] | 0 | (HEAPU8[$11 + 2 >> 0] | 0) << 16) & 255) | 0;
HEAP32[$vararg_buffer109 >> 2] = $631;
HEAP32[$vararg_buffer109 + 4 >> 2] = $636;
__Z7eprintfPKcz(27463, $vararg_buffer109);
$639 = HEAP32[16607] | 0;
}
$637 = HEAP32[$11 >> 2] | 0;
if (($639 ^ $637) & 16777215 | 0) {
$645 = HEAP32[$16 >> 2] << 20 & 7340032 | $637 & 9437183;
HEAP16[$11 >> 1] = $645;
HEAP8[$11 + 2 >> 0] = $645 >>> 16;
}
$646 = HEAP32[$12 >> 2] | 0;
if (!(($639 ^ $646) & 16777215)) break;
$653 = HEAP32[$16 >> 2] << 20 & 7340032 | $646 & 9437183;
HEAP16[$12 >> 1] = $653;
HEAP8[$12 + 2 >> 0] = $653 >>> 16;
} while (0);
HEAP32[$16 >> 2] = 0;
$714 = 0;
label = 163;
} else {
$654 = ($3 | 0) == 5;
if ($654 & $575) {
$655 = HEAPU16[$8 >> 1] | 0 | (HEAPU8[$8 + 2 >> 0] | 0) << 16;
if (!(($655 & 252 | 0) == 12 | (($655 & 1015808 | 0) != 0 | (($655 & 255) + -1 | 0) >>> 0 < 11))) {
$663 = HEAPU16[$11 >> 1] | 0 | (HEAPU8[$11 + 2 >> 0] | 0) << 16;
if (!(($663 & 252 | 0) == 12 | (($663 & 1015808 | 0) != 0 | (($663 & 255) + -1 | 0) >>> 0 < 11))) {
$714 = 1;
label = 163;
break;
}
}
HEAP32[$16 >> 2] = 0;
if (!0) {
$715 = 1;
label = 166;
break;
}
__Z7eprintfPKcz(27632, $vararg_buffer113);
$715 = 1;
label = 166;
} else {
$714 = $654;
label = 163;
}
} while (0);
if ((label | 0) == 163) {
if (0) __Z7eprintfPKcz(27684, $vararg_buffer115);
if (($3 | 4 | 0) == 5) {
$715 = $714;
label = 166;
} else $694 = $714;
}
do if ((label | 0) == 166) if (1 == 0 ? 1 : ((HEAPU16[$14 >> 1] | 0 | (HEAPU8[$14 + 2 >> 0] | 0) << 16) & 7340032 | 0) == 1048576) $694 = $715; else {
__Z7LogTimev() | 0;
$681 = ((HEAPU16[$14 >> 1] | 0 | (HEAPU8[$14 + 2 >> 0] | 0) << 16) & 16777215) >>> 20 & 7;
$683 = HEAP32[17197] | 0;
if (!($681 & 16777215)) {
$684 = __ZNK21InvertibleStringArray14valueFromIndexEi($683, 1) | 0;
HEAP32[$vararg_buffer117 >> 2] = $684;
__Z7eprintfPKcz(27740, $vararg_buffer117);
$694 = $715;
break;
} else {
$686 = __ZNK21InvertibleStringArray14valueFromIndexEi($683, $681 & 16777215) | 0;
$688 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17197] | 0, 1) | 0;
HEAP32[$vararg_buffer120 >> 2] = $686;
HEAP32[$vararg_buffer120 + 4 >> 2] = $688;
__Z7eprintfPKcz(27793, $vararg_buffer120);
$691 = (HEAPU16[$14 >> 1] | 0 | (HEAPU8[$14 + 2 >> 0] | 0) << 16) & 9437183 | 1048576;
HEAP16[$14 >> 1] = $691;
HEAP8[$14 + 2 >> 0] = $691 >>> 16;
$694 = $715;
break;
}
} while (0);
do if (($3 | 0) == 2 | $694) if (!(1 == 0 ? 1 : ((HEAPU16[$15 >> 1] | 0 | (HEAPU8[$15 + 2 >> 0] | 0) << 16) & 7340032 | 0) == 1048576)) {
__Z7LogTimev() | 0;
$701 = ((HEAPU16[$15 >> 1] | 0 | (HEAPU8[$15 + 2 >> 0] | 0) << 16) & 16777215) >>> 20 & 7;
$703 = HEAP32[17197] | 0;
if (!($701 & 16777215)) {
$704 = __ZNK21InvertibleStringArray14valueFromIndexEi($703, 1) | 0;
HEAP32[$vararg_buffer124 >> 2] = $704;
__Z7eprintfPKcz(27842, $vararg_buffer124);
break;
} else {
$706 = __ZNK21InvertibleStringArray14valueFromIndexEi($703, $701 & 16777215) | 0;
$708 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17197] | 0, 1) | 0;
HEAP32[$vararg_buffer127 >> 2] = $706;
HEAP32[$vararg_buffer127 + 4 >> 2] = $708;
__Z7eprintfPKcz(27898, $vararg_buffer127);
$711 = (HEAPU16[$15 >> 1] | 0 | (HEAPU8[$15 + 2 >> 0] | 0) << 16) & 9437183 | 1048576;
HEAP16[$15 >> 1] = $711;
HEAP8[$15 + 2 >> 0] = $711 >>> 16;
break;
}
} while (0);
if (!0) {
STACKTOP = sp;
return;
}
__Z7eprintfPKcz(27950, $vararg_buffer131);
__ZNK20ArmHandConstellation5printEP8_IO_FILE($0, HEAP32[16082] | 0);
STACKTOP = sp;
return;
}
function __ZN9Handshape26NewHandshapeFromHandConfigEbPS_PK7HashAnyIPKcS3_E($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$$i = 0, $$$i282 = 0, $$$i304 = 0, $$0$i = 0, $$0$i170 = 0, $$0$in$lcssa = 0, $$0$in339$us = 0, $$012$i$i = 0, $$012$i$i159 = 0, $$012$i$i166 = 0, $$012$i$i174 = 0, $$012$i$i181 = 0, $$012$i$i188 = 0, $$012$i$i195 = 0, $$012$i$i202 = 0, $$012$i$i209 = 0, $$012$i$i209$1 = 0, $$012$i$i209$2 = 0, $$012$i$i209$3 = 0, $$012$i$i209$4 = 0, $$012$i$i209$us = 0, $$012$i$i220 = 0, $$012$i$i229 = 0, $$012$i$i238 = 0, $$012$i$i248 = 0, $$012$i$i255 = 0, $$012$i$i262 = 0, $$012$i$i270 = 0, $$012$i$i277 = 0, $$012$i$i291 = 0, $$012$i$i299 = 0, $$012$i$i313 = 0, $$01215$i$i = 0, $$01215$i$i156 = 0, $$01215$i$i163 = 0, $$01215$i$i171 = 0, $$01215$i$i178 = 0, $$01215$i$i185 = 0, $$01215$i$i192 = 0, $$01215$i$i199 = 0, $$01215$i$i206 = 0, $$01215$i$i206$1 = 0, $$01215$i$i206$2 = 0, $$01215$i$i206$3 = 0, $$01215$i$i206$4 = 0, $$01215$i$i206$us = 0, $$01215$i$i217 = 0, $$01215$i$i226 = 0, $$01215$i$i235 = 0, $$01215$i$i245 = 0, $$01215$i$i252 = 0, $$01215$i$i259 = 0, $$01215$i$i267 = 0, $$01215$i$i274 = 0, $$01215$i$i288 = 0, $$01215$i$i296 = 0, $$01215$i$i310 = 0, $$01216$i$i = 0, $$01216$i$i157 = 0, $$01216$i$i164 = 0, $$01216$i$i172 = 0, $$01216$i$i179 = 0, $$01216$i$i186 = 0, $$01216$i$i193 = 0, $$01216$i$i200 = 0, $$01216$i$i207 = 0, $$01216$i$i207$1 = 0, $$01216$i$i207$2 = 0, $$01216$i$i207$3 = 0, $$01216$i$i207$4 = 0, $$01216$i$i207$us = 0, $$01216$i$i218 = 0, $$01216$i$i227 = 0, $$01216$i$i236 = 0, $$01216$i$i246 = 0, $$01216$i$i253 = 0, $$01216$i$i260 = 0, $$01216$i$i268 = 0, $$01216$i$i275 = 0, $$01216$i$i289 = 0, $$01216$i$i297 = 0, $$01216$i$i311 = 0, $$0155338$us = 0, $$022$i = 0, $$022$i284 = 0, $$022$i306 = 0, $$phi$trans$insert = 0, $$sink$i$i = 0, $$sink$i$i161 = 0, $$sink$i$i168 = 0, $$sink$i$i176 = 0, $$sink$i$i183 = 0, $$sink$i$i190 = 0, $$sink$i$i197 = 0, $$sink$i$i204 = 0, $$sink$i$i211 = 0, $$sink$i$i211$1 = 0, $$sink$i$i211$2 = 0, $$sink$i$i211$3 = 0, $$sink$i$i211$4 = 0, $$sink$i$i211$us = 0, $$sink$i$i222 = 0, $$sink$i$i231 = 0, $$sink$i$i240 = 0, $$sink$i$i250 = 0, $$sink$i$i257 = 0, $$sink$i$i264 = 0, $$sink$i$i272 = 0, $$sink$i$i279 = 0, $$sink$i$i293 = 0, $$sink$i$i301 = 0, $$sink$i$i315 = 0, $10 = 0, $109 = 0, $11 = 0, $111 = 0, $114 = 0, $115 = 0, $127 = 0, $129 = 0, $132 = 0, $133 = 0, $145 = 0, $148 = 0, $152 = 0, $154 = 0, $155 = 0, $160 = 0, $162 = 0, $163 = 0, $174 = 0, $175 = 0, $176 = 0, $180 = 0, $185 = 0, $189 = 0, $190 = 0, $201 = 0, $202 = 0, $203 = 0, $211 = 0, $212 = 0, $213 = 0, $215 = 0, $218 = 0, $219 = 0, $223 = 0, $225 = 0, $226 = 0, $230 = 0, $235 = 0, $24 = 0, $256 = 0, $261 = 0, $262 = 0, $265 = 0, $266 = 0, $27 = 0, $277 = 0, $280 = 0, $283 = 0, $284 = 0, $29 = 0, $295 = 0, $298 = 0, $3 = 0, $30 = 0, $300 = 0, $302 = 0, $303 = 0, $315 = 0, $320 = 0, $322 = 0, $323 = 0, $335 = 0, $337 = 0, $338 = 0, $350 = f0, $352 = 0, $353 = 0, $355 = 0, $356 = 0, $367 = 0, $371 = 0, $374 = 0, $381 = 0, $383 = 0, $384 = 0, $395 = 0, $398 = 0, $4 = 0, $400 = 0, $401 = 0, $403 = 0, $404 = 0, $415 = 0, $419 = 0, $42 = 0, $422 = 0, $429 = 0, $43 = 0, $431 = 0, $432 = 0, $443 = 0, $446 = 0, $448 = 0, $449 = 0, $451 = 0, $452 = 0, $463 = 0, $467 = 0, $47 = 0, $470 = 0, $477 = 0, $479 = 0, $480 = 0, $49 = 0, $491 = 0, $494 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $515 = 0, $519 = 0, $52 = 0, $520 = 0, $531 = 0, $532 = 0, $533 = 0, $536 = 0, $540 = 0, $541 = 0, $552 = 0, $553 = 0, $554 = 0, $557 = 0, $561 = 0, $562 = 0, $573 = 0, $574 = 0, $575 = 0, $578 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $71 = 0, $73 = 0, $74 = 0, $8 = 0, $86 = 0, $88 = 0, $90 = 0, $96 = 0, $97 = 0, $scevgep$i = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer22 = 0, $vararg_buffer26 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer34 = 0, $vararg_buffer38 = 0, $vararg_buffer42 = 0, $vararg_buffer46 = 0, $vararg_buffer50 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 144 | 0;
$vararg_buffer50 = sp + 120 | 0;
$vararg_buffer46 = sp + 104 | 0;
$vararg_buffer42 = sp + 96 | 0;
$vararg_buffer38 = sp + 88 | 0;
$vararg_buffer34 = sp + 80 | 0;
$vararg_buffer30 = sp + 72 | 0;
$vararg_buffer26 = sp + 64 | 0;
$vararg_buffer22 = sp + 56 | 0;
$vararg_buffer18 = sp + 48 | 0;
$vararg_buffer14 = sp + 40 | 0;
$vararg_buffer10 = sp + 32 | 0;
$vararg_buffer6 = sp + 24 | 0;
$vararg_buffer3 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$3 = sp + 137 | 0;
$4 = sp + 136 | 0;
if (!$1) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(33702, sp);
STACKTOP = sp;
return;
}
HEAP8[$1 + 232 >> 0] = $0 & 1;
$8 = $2 + 4 | 0;
$10 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(53138, HEAP32[$8 >> 2] | 0) | 0;
$11 = HEAP32[$2 >> 2] | 0;
L5 : do if ((HEAP16[$11 + ($10 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i = HEAP32[$11 + ($10 << 3) >> 2] | 0;
if (!$$01215$i$i) label = 8; else {
$$01216$i$i = $$01215$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(53138, HEAP32[$$01216$i$i >> 2] | 0) | 0) break;
$$012$i$i = HEAP32[$$01216$i$i + 8 >> 2] | 0;
if (!$$012$i$i) {
label = 8;
break L5;
} else $$01216$i$i = $$012$i$i;
}
$$sink$i$i = $$01216$i$i + 4 | 0;
}
} else label = 8; while (0);
if ((label | 0) == 8) $$sink$i$i = $2 + 20 | 0;
$24 = __Z16SetHandshapeTypeR13HandshapeTypePKc($1, HEAP32[$$sink$i$i >> 2] | 0) | 0;
$27 = $24 | (__Z10boolAttribPK7HashAnyIPKcS1_ES1_Rbb($2, 53098, $1 + 4 | 0, 0) | 0);
$29 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(53219, HEAP32[$8 >> 2] | 0) | 0;
$30 = HEAP32[$2 >> 2] | 0;
L14 : do if ((HEAP16[$30 + ($29 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i156 = HEAP32[$30 + ($29 << 3) >> 2] | 0;
if (!$$01215$i$i156) label = 14; else {
$$01216$i$i157 = $$01215$i$i156;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(53219, HEAP32[$$01216$i$i157 >> 2] | 0) | 0) break;
$$012$i$i159 = HEAP32[$$01216$i$i157 + 8 >> 2] | 0;
if (!$$012$i$i159) {
label = 14;
break L14;
} else $$01216$i$i157 = $$012$i$i159;
}
$$sink$i$i161 = $$01216$i$i157 + 4 | 0;
}
} else label = 14; while (0);
if ((label | 0) == 14) $$sink$i$i161 = $2 + 20 | 0;
$42 = HEAP32[$$sink$i$i161 >> 2] | 0;
$43 = $1 + 12 | 0;
if (!$42) $$0$i = 0; else {
$47 = __ZNK21InvertibleStringArray14indexFromValueEPKc(HEAP32[17200] | 0, $42) | 0;
HEAP32[$1 + 8 >> 2] = $47;
if (!$47) {
__ZN13FingerBending16SetFingerBendingEPKc($43, $42);
$$0$i = 1;
} else $$0$i = 1;
}
$49 = $27 | $$0$i;
$51 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(53165, HEAP32[$8 >> 2] | 0) | 0;
$52 = HEAP32[$2 >> 2] | 0;
L27 : do if ((HEAP16[$52 + ($51 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i163 = HEAP32[$52 + ($51 << 3) >> 2] | 0;
if (!$$01215$i$i163) label = 23; else {
$$01216$i$i164 = $$01215$i$i163;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(53165, HEAP32[$$01216$i$i164 >> 2] | 0) | 0) break;
$$012$i$i166 = HEAP32[$$01216$i$i164 + 8 >> 2] | 0;
if (!$$012$i$i166) {
label = 23;
break L27;
} else $$01216$i$i164 = $$012$i$i166;
}
$$sink$i$i168 = $$01216$i$i164 + 4 | 0;
}
} else label = 23; while (0);
if ((label | 0) == 23) $$sink$i$i168 = $2 + 20 | 0;
$64 = HEAP32[$$sink$i$i168 >> 2] | 0;
$65 = $1 + 28 | 0;
$66 = $1 + 160 | 0;
$67 = ($64 | 0) == 0;
if ($67) $$0$i170 = 0; else {
$69 = __ZNK21InvertibleStringArray14indexFromValueEPKc(HEAP32[17201] | 0, $64) | 0;
HEAP32[$65 >> 2] = $69;
if (!$69) {
__ZN12ThumbBending15SetThumbBendingEPKc($66, $64);
$$0$i170 = 1;
} else $$0$i170 = 1;
}
$71 = $49 | $$0$i170;
$73 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(53190, HEAP32[$8 >> 2] | 0) | 0;
$74 = HEAP32[$2 >> 2] | 0;
L40 : do if ((HEAP16[$74 + ($73 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i171 = HEAP32[$74 + ($73 << 3) >> 2] | 0;
if (!$$01215$i$i171) label = 32; else {
$$01216$i$i172 = $$01215$i$i171;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(53190, HEAP32[$$01216$i$i172 >> 2] | 0) | 0) break;
$$012$i$i174 = HEAP32[$$01216$i$i172 + 8 >> 2] | 0;
if (!$$012$i$i174) {
label = 32;
break L40;
} else $$01216$i$i172 = $$012$i$i174;
}
$$sink$i$i176 = $$01216$i$i172 + 4 | 0;
}
} else label = 32; while (0);
if ((label | 0) == 32) $$sink$i$i176 = $2 + 20 | 0;
$86 = HEAP32[$$sink$i$i176 >> 2] | 0;
$88 = $71 | ($86 | 0) != 0;
$90 = __ZN5SiGML17convertAttributeHEPK21InvertibleStringArrayPKc(HEAP32[17753] | 0, $86) | 0;
$$phi$trans$insert = $1 + 48 | 0;
L49 : do if (!$90) {
if (!(HEAP32[$$phi$trans$insert >> 2] | 0)) if (((HEAP32[$1 >> 2] | 0) + -10 | 0) >>> 0 < 3) switch (HEAP32[$65 >> 2] | 0) {
case 4:
{
HEAP32[$$phi$trans$insert >> 2] = 2;
break L49;
break;
}
case 3:
{
HEAP32[$$phi$trans$insert >> 2] = 1;
break L49;
break;
}
default:
break L49;
}
} else HEAP32[$$phi$trans$insert >> 2] = $90; while (0);
$96 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(53266, HEAP32[$8 >> 2] | 0) | 0;
$97 = HEAP32[$2 >> 2] | 0;
L58 : do if ((HEAP16[$97 + ($96 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i178 = HEAP32[$97 + ($96 << 3) >> 2] | 0;
if (!$$01215$i$i178) label = 45; else {
$$01216$i$i179 = $$01215$i$i178;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(53266, HEAP32[$$01216$i$i179 >> 2] | 0) | 0) break;
$$012$i$i181 = HEAP32[$$01216$i$i179 + 8 >> 2] | 0;
if (!$$012$i$i181) {
label = 45;
break L58;
} else $$01216$i$i179 = $$012$i$i181;
}
$$sink$i$i183 = $$01216$i$i179 + 4 | 0;
}
} else label = 45; while (0);
if ((label | 0) == 45) $$sink$i$i183 = $2 + 20 | 0;
$109 = HEAP32[$$sink$i$i183 >> 2] | 0;
$111 = $88 | ($109 | 0) != 0;
__Z9SetDigitsRsPKc($1 + 52 | 0, $109);
$114 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(53083, HEAP32[$8 >> 2] | 0) | 0;
$115 = HEAP32[$2 >> 2] | 0;
L67 : do if ((HEAP16[$115 + ($114 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i185 = HEAP32[$115 + ($114 << 3) >> 2] | 0;
if (!$$01215$i$i185) label = 51; else {
$$01216$i$i186 = $$01215$i$i185;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(53083, HEAP32[$$01216$i$i186 >> 2] | 0) | 0) break;
$$012$i$i188 = HEAP32[$$01216$i$i186 + 8 >> 2] | 0;
if (!$$012$i$i188) {
label = 51;
break L67;
} else $$01216$i$i186 = $$012$i$i188;
}
$$sink$i$i190 = $$01216$i$i186 + 4 | 0;
}
} else label = 51; while (0);
if ((label | 0) == 51) $$sink$i$i190 = $2 + 20 | 0;
$127 = HEAP32[$$sink$i$i190 >> 2] | 0;
$129 = $111 | ($127 | 0) != 0;
__Z9SetDigitsRsPKc($1 + 54 | 0, $127);
$132 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(33184, HEAP32[$8 >> 2] | 0) | 0;
$133 = HEAP32[$2 >> 2] | 0;
L76 : do if ((HEAP16[$133 + ($132 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i192 = HEAP32[$133 + ($132 << 3) >> 2] | 0;
if (!$$01215$i$i192) label = 57; else {
$$01216$i$i193 = $$01215$i$i192;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(33184, HEAP32[$$01216$i$i193 >> 2] | 0) | 0) break;
$$012$i$i195 = HEAP32[$$01216$i$i193 + 8 >> 2] | 0;
if (!$$012$i$i195) {
label = 57;
break L76;
} else $$01216$i$i193 = $$012$i$i195;
}
$$sink$i$i197 = $$01216$i$i193 + 4 | 0;
}
} else label = 57; while (0);
if ((label | 0) == 57) $$sink$i$i197 = $2 + 20 | 0;
$145 = HEAP32[$$sink$i$i197 >> 2] | 0;
if (0) {
HEAP32[$vararg_buffer1 >> 2] = $145;
__Z7eprintfPKcz(33776, $vararg_buffer1);
}
$148 = __ZN5SiGML17convertAttributeHEPK21InvertibleStringArrayPKc(HEAP32[17754] | 0, $145) | 0;
if (0) {
HEAP32[$vararg_buffer3 >> 2] = $148;
__Z7eprintfPKcz(33795, $vararg_buffer3);
}
if ($148 | 0) HEAP32[$1 + 56 >> 2] = $148;
$152 = $2 + 20 | 0;
do if ($67) {
$154 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(49521, HEAP32[$8 >> 2] | 0) | 0;
$155 = HEAP32[$2 >> 2] | 0;
L96 : do if ((HEAP16[$155 + ($154 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i206 = HEAP32[$155 + ($154 << 3) >> 2] | 0;
if (!$$01215$i$i206) $$sink$i$i211 = $152; else {
$$01216$i$i207 = $$01215$i$i206;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(49521, HEAP32[$$01216$i$i207 >> 2] | 0) | 0) break;
$$012$i$i209 = HEAP32[$$01216$i$i207 + 8 >> 2] | 0;
if (!$$012$i$i209) {
$$sink$i$i211 = $152;
break L96;
} else $$01216$i$i207 = $$012$i$i209;
}
$$sink$i$i211 = $$01216$i$i207 + 4 | 0;
}
} else $$sink$i$i211 = $152; while (0);
$211 = HEAP32[$$sink$i$i211 >> 2] | 0;
$212 = ($211 | 0) != 0;
$213 = $129 | $212;
if ($212) {
$215 = __ZNK21InvertibleStringArray14indexFromValueEPKc(HEAP32[17201] | 0, $211) | 0;
HEAP32[$65 >> 2] = $215;
if (!$215) __ZN12ThumbBending15SetThumbBendingEPKc($66, $211);
}
$218 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(49527, HEAP32[$8 >> 2] | 0) | 0;
$219 = HEAP32[$2 >> 2] | 0;
L107 : do if ((HEAP16[$219 + ($218 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i206$1 = HEAP32[$219 + ($218 << 3) >> 2] | 0;
if (!$$01215$i$i206$1) {
$$sink$i$i211$1 = $152;
break;
} else $$01216$i$i207$1 = $$01215$i$i206$1;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(49527, HEAP32[$$01216$i$i207$1 >> 2] | 0) | 0) break;
$$012$i$i209$1 = HEAP32[$$01216$i$i207$1 + 8 >> 2] | 0;
if (!$$012$i$i209$1) {
$$sink$i$i211$1 = $152;
break L107;
} else $$01216$i$i207$1 = $$012$i$i209$1;
}
$$sink$i$i211$1 = $$01216$i$i207$1 + 4 | 0;
} else $$sink$i$i211$1 = $152; while (0);
$510 = HEAP32[$$sink$i$i211$1 >> 2] | 0;
$511 = ($510 | 0) != 0;
$512 = $213 | $511;
do if ($511) {
$515 = __ZNK21InvertibleStringArray14indexFromValueEPKc(HEAP32[17200] | 0, $510) | 0;
HEAP32[$1 + 64 >> 2] = $515;
if ($515 | 0) break;
__ZN13FingerBending16SetFingerBendingEPKc($1 + 96 | 0, $510);
} while (0);
$519 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(49533, HEAP32[$8 >> 2] | 0) | 0;
$520 = HEAP32[$2 >> 2] | 0;
L118 : do if ((HEAP16[$520 + ($519 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i206$2 = HEAP32[$520 + ($519 << 3) >> 2] | 0;
if (!$$01215$i$i206$2) {
$$sink$i$i211$2 = $152;
break;
} else $$01216$i$i207$2 = $$01215$i$i206$2;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(49533, HEAP32[$$01216$i$i207$2 >> 2] | 0) | 0) break;
$$012$i$i209$2 = HEAP32[$$01216$i$i207$2 + 8 >> 2] | 0;
if (!$$012$i$i209$2) {
$$sink$i$i211$2 = $152;
break L118;
} else $$01216$i$i207$2 = $$012$i$i209$2;
}
$$sink$i$i211$2 = $$01216$i$i207$2 + 4 | 0;
} else $$sink$i$i211$2 = $152; while (0);
$531 = HEAP32[$$sink$i$i211$2 >> 2] | 0;
$532 = ($531 | 0) != 0;
$533 = $512 | $532;
do if ($532) {
$536 = __ZNK21InvertibleStringArray14indexFromValueEPKc(HEAP32[17200] | 0, $531) | 0;
HEAP32[$1 + 68 >> 2] = $536;
if ($536 | 0) break;
__ZN13FingerBending16SetFingerBendingEPKc($1 + 112 | 0, $531);
} while (0);
$540 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(49539, HEAP32[$8 >> 2] | 0) | 0;
$541 = HEAP32[$2 >> 2] | 0;
L129 : do if ((HEAP16[$541 + ($540 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i206$3 = HEAP32[$541 + ($540 << 3) >> 2] | 0;
if (!$$01215$i$i206$3) {
$$sink$i$i211$3 = $152;
break;
} else $$01216$i$i207$3 = $$01215$i$i206$3;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(49539, HEAP32[$$01216$i$i207$3 >> 2] | 0) | 0) break;
$$012$i$i209$3 = HEAP32[$$01216$i$i207$3 + 8 >> 2] | 0;
if (!$$012$i$i209$3) {
$$sink$i$i211$3 = $152;
break L129;
} else $$01216$i$i207$3 = $$012$i$i209$3;
}
$$sink$i$i211$3 = $$01216$i$i207$3 + 4 | 0;
} else $$sink$i$i211$3 = $152; while (0);
$552 = HEAP32[$$sink$i$i211$3 >> 2] | 0;
$553 = ($552 | 0) != 0;
$554 = $533 | $553;
do if ($553) {
$557 = __ZNK21InvertibleStringArray14indexFromValueEPKc(HEAP32[17200] | 0, $552) | 0;
HEAP32[$1 + 72 >> 2] = $557;
if ($557 | 0) break;
__ZN13FingerBending16SetFingerBendingEPKc($1 + 128 | 0, $552);
} while (0);
$561 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(49545, HEAP32[$8 >> 2] | 0) | 0;
$562 = HEAP32[$2 >> 2] | 0;
L140 : do if ((HEAP16[$562 + ($561 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i206$4 = HEAP32[$562 + ($561 << 3) >> 2] | 0;
if (!$$01215$i$i206$4) {
$$sink$i$i211$4 = $152;
break;
} else $$01216$i$i207$4 = $$01215$i$i206$4;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(49545, HEAP32[$$01216$i$i207$4 >> 2] | 0) | 0) break;
$$012$i$i209$4 = HEAP32[$$01216$i$i207$4 + 8 >> 2] | 0;
if (!$$012$i$i209$4) {
$$sink$i$i211$4 = $152;
break L140;
} else $$01216$i$i207$4 = $$012$i$i209$4;
}
$$sink$i$i211$4 = $$01216$i$i207$4 + 4 | 0;
} else $$sink$i$i211$4 = $152; while (0);
$573 = HEAP32[$$sink$i$i211$4 >> 2] | 0;
$574 = ($573 | 0) != 0;
$575 = $554 | $574;
if (!$574) {
$$0$in$lcssa = $575;
break;
}
$578 = __ZNK21InvertibleStringArray14indexFromValueEPKc(HEAP32[17200] | 0, $573) | 0;
HEAP32[$1 + 76 >> 2] = $578;
if ($578 | 0) {
$$0$in$lcssa = $575;
break;
}
__ZN13FingerBending16SetFingerBendingEPKc($1 + 144 | 0, $573);
$$0$in$lcssa = $575;
} else {
$$0$in339$us = $129;
$$0155338$us = 0;
L149 : while (1) {
$160 = HEAP32[3392 + ($$0155338$us << 2) >> 2] | 0;
$162 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($160, HEAP32[$8 >> 2] | 0) | 0;
$163 = HEAP32[$2 >> 2] | 0;
L151 : do if ((HEAP16[$163 + ($162 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i206$us = HEAP32[$163 + ($162 << 3) >> 2] | 0;
if (!$$01215$i$i206$us) $$sink$i$i211$us = $152; else {
$$01216$i$i207$us = $$01215$i$i206$us;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($160, HEAP32[$$01216$i$i207$us >> 2] | 0) | 0) break;
$$012$i$i209$us = HEAP32[$$01216$i$i207$us + 8 >> 2] | 0;
if (!$$012$i$i209$us) {
$$sink$i$i211$us = $152;
break L151;
} else $$01216$i$i207$us = $$012$i$i209$us;
}
$$sink$i$i211$us = $$01216$i$i207$us + 4 | 0;
}
} else $$sink$i$i211$us = $152; while (0);
$174 = HEAP32[$$sink$i$i211$us >> 2] | 0;
$175 = ($174 | 0) != 0;
$176 = $$0$in339$us | $175;
do if ($175) {
if ($$0155338$us | 0) {
$180 = __ZNK21InvertibleStringArray14indexFromValueEPKc(HEAP32[17200] | 0, $174) | 0;
HEAP32[$1 + 60 + ($$0155338$us << 2) >> 2] = $180;
if ($180 | 0) break;
__ZN13FingerBending16SetFingerBendingEPKc($1 + 80 + ($$0155338$us << 4) | 0, $174);
break;
}
if (1) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer6 >> 2] = $64;
HEAP32[$vararg_buffer6 + 4 >> 2] = $174;
__Z7eprintfPKcz(33818, $vararg_buffer6);
}
$185 = __ZNK21InvertibleStringArray14indexFromValueEPKc(HEAP32[17201] | 0, $174) | 0;
HEAP32[$65 >> 2] = $185;
if ($185 | 0) {
$$0$in339$us = $176;
$$0155338$us = 1;
continue L149;
}
__ZN12ThumbBending15SetThumbBendingEPKc($66, $174);
$$0$in339$us = $176;
$$0155338$us = 1;
continue L149;
} while (0);
$$0155338$us = $$0155338$us + 1 | 0;
if (($$0155338$us | 0) == 5) {
$$0$in$lcssa = $176;
break;
} else $$0$in339$us = $176;
}
} while (0);
$189 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(53148, HEAP32[$8 >> 2] | 0) | 0;
$190 = HEAP32[$2 >> 2] | 0;
L170 : do if ((HEAP16[$190 + ($189 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i199 = HEAP32[$190 + ($189 << 3) >> 2] | 0;
if (!$$01215$i$i199) $$sink$i$i204 = $152; else {
$$01216$i$i200 = $$01215$i$i199;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(53148, HEAP32[$$01216$i$i200 >> 2] | 0) | 0) break;
$$012$i$i202 = HEAP32[$$01216$i$i200 + 8 >> 2] | 0;
if (!$$012$i$i202) {
$$sink$i$i204 = $152;
break L170;
} else $$01216$i$i200 = $$012$i$i202;
}
$$sink$i$i204 = $$01216$i$i200 + 4 | 0;
}
} else $$sink$i$i204 = $152; while (0);
$201 = HEAP32[$$sink$i$i204 >> 2] | 0;
$202 = ($201 | 0) != 0;
$203 = $$0$in$lcssa | $202;
if ($202) {
$223 = __Znwj(220) | 0;
HEAP32[$223 >> 2] = 0;
HEAP8[$223 + 4 >> 0] = 0;
$225 = $223 + 8 | 0;
HEAP32[$225 >> 2] = 0;
$226 = $223 + 12 | 0;
HEAPF32[$226 >> 2] = Math_fround(-100.0);
HEAPF32[$223 + 16 >> 2] = Math_fround(-100.0);
HEAPF32[$223 + 20 >> 2] = Math_fround(-100.0);
HEAPF32[$223 + 24 >> 2] = Math_fround(-100.0);
$230 = $223 + 28 | 0;
HEAP32[$230 >> 2] = 0;
HEAPF32[$223 + 32 >> 2] = Math_fround(-100.0);
HEAPF32[$223 + 36 >> 2] = Math_fround(-100.0);
HEAPF32[$223 + 40 >> 2] = Math_fround(-100.0);
HEAPF32[$223 + 44 >> 2] = Math_fround(-100.0);
$235 = $223 + 48 | 0;
HEAP32[$235 >> 2] = 0;
HEAP32[$235 + 4 >> 2] = 0;
HEAP32[$235 + 8 >> 2] = 0;
HEAPF32[$223 + 80 >> 2] = Math_fround(-100.0);
HEAPF32[$223 + 84 >> 2] = Math_fround(-100.0);
HEAPF32[$223 + 88 >> 2] = Math_fround(-100.0);
HEAPF32[$223 + 92 >> 2] = Math_fround(-100.0);
HEAPF32[$223 + 96 >> 2] = Math_fround(-100.0);
HEAPF32[$223 + 100 >> 2] = Math_fround(-100.0);
HEAPF32[$223 + 104 >> 2] = Math_fround(-100.0);
HEAPF32[$223 + 108 >> 2] = Math_fround(-100.0);
HEAPF32[$223 + 112 >> 2] = Math_fround(-100.0);
HEAPF32[$223 + 116 >> 2] = Math_fround(-100.0);
HEAPF32[$223 + 120 >> 2] = Math_fround(-100.0);
HEAPF32[$223 + 124 >> 2] = Math_fround(-100.0);
HEAPF32[$223 + 128 >> 2] = Math_fround(-100.0);
HEAPF32[$223 + 132 >> 2] = Math_fround(-100.0);
HEAPF32[$223 + 136 >> 2] = Math_fround(-100.0);
HEAPF32[$223 + 140 >> 2] = Math_fround(-100.0);
HEAPF32[$223 + 144 >> 2] = Math_fround(-100.0);
HEAPF32[$223 + 148 >> 2] = Math_fround(-100.0);
HEAPF32[$223 + 152 >> 2] = Math_fround(-100.0);
HEAPF32[$223 + 156 >> 2] = Math_fround(-100.0);
$256 = $223 + 160 | 0;
HEAPF32[$256 >> 2] = Math_fround(-100.0);
HEAPF32[$223 + 164 >> 2] = Math_fround(-100.0);
HEAPF32[$223 + 168 >> 2] = Math_fround(-100.0);
HEAPF32[$223 + 172 >> 2] = Math_fround(-100.0);
HEAPF32[$223 + 176 >> 2] = Math_fround(-100.0);
$261 = $223 + 180 | 0;
$262 = $223 + 204 | 0;
HEAP32[$261 >> 2] = -1;
HEAP32[$261 + 4 >> 2] = -1;
HEAP32[$261 + 8 >> 2] = -1;
HEAP32[$261 + 12 >> 2] = -1;
HEAP32[$261 + 16 >> 2] = -1;
HEAP32[$261 + 20 >> 2] = -1;
$scevgep$i = $223 + 60 | 0;
HEAP32[$scevgep$i >> 2] = 0;
HEAP32[$scevgep$i + 4 >> 2] = 0;
HEAP32[$scevgep$i + 8 >> 2] = 0;
HEAP32[$scevgep$i + 12 >> 2] = 0;
HEAP32[$scevgep$i + 16 >> 2] = 0;
HEAP32[$262 >> 2] = 0;
HEAP32[$262 + 4 >> 2] = 0;
HEAP32[$262 + 8 >> 2] = 0;
HEAP8[$262 + 12 >> 0] = 0;
HEAP32[$1 + 220 >> 2] = $223;
__Z16SetHandshapeTypeR13HandshapeTypePKc($223, $201) | 0;
$265 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(53228, HEAP32[$8 >> 2] | 0) | 0;
$266 = HEAP32[$2 >> 2] | 0;
L179 : do if ((HEAP16[$266 + ($265 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i217 = HEAP32[$266 + ($265 << 3) >> 2] | 0;
if (!$$01215$i$i217) {
$$sink$i$i222 = $152;
break;
} else $$01216$i$i218 = $$01215$i$i217;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(53228, HEAP32[$$01216$i$i218 >> 2] | 0) | 0) break;
$$012$i$i220 = HEAP32[$$01216$i$i218 + 8 >> 2] | 0;
if (!$$012$i$i220) {
$$sink$i$i222 = $152;
break L179;
} else $$01216$i$i218 = $$012$i$i220;
}
$$sink$i$i222 = $$01216$i$i218 + 4 | 0;
} else $$sink$i$i222 = $152; while (0);
$277 = HEAP32[$$sink$i$i222 >> 2] | 0;
do if ($277 | 0) {
$280 = __ZNK21InvertibleStringArray14indexFromValueEPKc(HEAP32[17200] | 0, $277) | 0;
HEAP32[$225 >> 2] = $280;
if ($280 | 0) break;
__ZN13FingerBending16SetFingerBendingEPKc($226, $277);
} while (0);
$283 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(53174, HEAP32[$8 >> 2] | 0) | 0;
$284 = HEAP32[$2 >> 2] | 0;
L190 : do if ((HEAP16[$284 + ($283 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i226 = HEAP32[$284 + ($283 << 3) >> 2] | 0;
if (!$$01215$i$i226) {
$$sink$i$i231 = $152;
break;
} else $$01216$i$i227 = $$01215$i$i226;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(53174, HEAP32[$$01216$i$i227 >> 2] | 0) | 0) break;
$$012$i$i229 = HEAP32[$$01216$i$i227 + 8 >> 2] | 0;
if (!$$012$i$i229) {
$$sink$i$i231 = $152;
break L190;
} else $$01216$i$i227 = $$012$i$i229;
}
$$sink$i$i231 = $$01216$i$i227 + 4 | 0;
} else $$sink$i$i231 = $152; while (0);
$295 = HEAP32[$$sink$i$i231 >> 2] | 0;
do if ($295 | 0) {
$298 = __ZNK21InvertibleStringArray14indexFromValueEPKc(HEAP32[17201] | 0, $295) | 0;
HEAP32[$230 >> 2] = $298;
if ($298 | 0) break;
__ZN12ThumbBending15SetThumbBendingEPKc($256, $295);
} while (0);
$300 = HEAP32[17753] | 0;
$302 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(53201, HEAP32[$8 >> 2] | 0) | 0;
$303 = HEAP32[$2 >> 2] | 0;
L201 : do if ((HEAP16[$303 + ($302 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i235 = HEAP32[$303 + ($302 << 3) >> 2] | 0;
if (!$$01215$i$i235) {
$$sink$i$i240 = $152;
break;
} else $$01216$i$i236 = $$01215$i$i235;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(53201, HEAP32[$$01216$i$i236 >> 2] | 0) | 0) break;
$$012$i$i238 = HEAP32[$$01216$i$i236 + 8 >> 2] | 0;
if (!$$012$i$i238) {
$$sink$i$i240 = $152;
break L201;
} else $$01216$i$i236 = $$012$i$i238;
}
$$sink$i$i240 = $$01216$i$i236 + 4 | 0;
} else $$sink$i$i240 = $152; while (0);
$315 = __ZN5SiGML17convertAttributeHEPK21InvertibleStringArrayPKc($300, HEAP32[$$sink$i$i240 >> 2] | 0) | 0;
L208 : do if (!$315) {
if (HEAP32[$235 >> 2] | 0) break;
if (((HEAP32[$223 >> 2] | 0) + -10 | 0) >>> 0 >= 3) break;
switch (HEAP32[$230 >> 2] | 0) {
case 4:
{
HEAP32[$235 >> 2] = 2;
break L208;
break;
}
case 3:
{
HEAP32[$235 >> 2] = 1;
break L208;
break;
}
default:
break L208;
}
} else HEAP32[$235 >> 2] = $315; while (0);
$320 = $223 + 52 | 0;
$322 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(33892, HEAP32[$8 >> 2] | 0) | 0;
$323 = HEAP32[$2 >> 2] | 0;
L217 : do if ((HEAP16[$323 + ($322 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i245 = HEAP32[$323 + ($322 << 3) >> 2] | 0;
if (!$$01215$i$i245) {
$$sink$i$i250 = $152;
break;
} else $$01216$i$i246 = $$01215$i$i245;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(33892, HEAP32[$$01216$i$i246 >> 2] | 0) | 0) break;
$$012$i$i248 = HEAP32[$$01216$i$i246 + 8 >> 2] | 0;
if (!$$012$i$i248) {
$$sink$i$i250 = $152;
break L217;
} else $$01216$i$i246 = $$012$i$i248;
}
$$sink$i$i250 = $$01216$i$i246 + 4 | 0;
} else $$sink$i$i250 = $152; while (0);
__Z9SetDigitsRsPKc($320, HEAP32[$$sink$i$i250 >> 2] | 0);
$335 = $223 + 54 | 0;
$337 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(33914, HEAP32[$8 >> 2] | 0) | 0;
$338 = HEAP32[$2 >> 2] | 0;
L224 : do if ((HEAP16[$338 + ($337 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i252 = HEAP32[$338 + ($337 << 3) >> 2] | 0;
if (!$$01215$i$i252) {
$$sink$i$i257 = $152;
break;
} else $$01216$i$i253 = $$01215$i$i252;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(33914, HEAP32[$$01216$i$i253 >> 2] | 0) | 0) break;
$$012$i$i255 = HEAP32[$$01216$i$i253 + 8 >> 2] | 0;
if (!$$012$i$i255) {
$$sink$i$i257 = $152;
break L224;
} else $$01216$i$i253 = $$012$i$i255;
}
$$sink$i$i257 = $$01216$i$i253 + 4 | 0;
} else $$sink$i$i257 = $152; while (0);
__Z9SetDigitsRsPKc($335, HEAP32[$$sink$i$i257 >> 2] | 0);
$350 = Math_fround(__Z23HashAttribs_attrib_REALPK7HashAnyIPKcS1_ES1_f($2, 33936, Math_fround(.5)));
HEAPF32[$1 + 224 >> 2] = $350;
}
$352 = $1 + 180 | 0;
$353 = $1 + 184 | 0;
$355 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(53393, HEAP32[$8 >> 2] | 0) | 0;
$356 = HEAP32[$2 >> 2] | 0;
L232 : do if ((HEAP16[$356 + ($355 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i259 = HEAP32[$356 + ($355 << 3) >> 2] | 0;
if (!$$01215$i$i259) $$sink$i$i264 = $152; else {
$$01216$i$i260 = $$01215$i$i259;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(53393, HEAP32[$$01216$i$i260 >> 2] | 0) | 0) break;
$$012$i$i262 = HEAP32[$$01216$i$i260 + 8 >> 2] | 0;
if (!$$012$i$i262) {
$$sink$i$i264 = $152;
break L232;
} else $$01216$i$i260 = $$012$i$i262;
}
$$sink$i$i264 = $$01216$i$i260 + 4 | 0;
}
} else $$sink$i$i264 = $152; while (0);
$367 = HEAP32[$$sink$i$i264 >> 2] | 0;
if ($367 | 0) {
HEAP32[$vararg_buffer10 >> 2] = $3;
HEAP32[$vararg_buffer10 + 4 >> 2] = $4;
do if ((_sscanf($367, 33952, $vararg_buffer10) | 0) == 2) {
$371 = HEAP8[$3 >> 0] | 0;
$374 = HEAP8[$4 >> 0] | 0;
$$$i = ($371 + -49 & 255) > 4 ? -1 : ($371 << 24 >> 24) + -49 | 0;
$$022$i = ($374 + -49 & 255) > 4 ? -1 : ($374 << 24 >> 24) + -49 | 0;
if (!(($$$i | 0) != -1 & ($$022$i | 0) != -1)) {
label = 142;
break;
}
HEAP32[$352 >> 2] = $$$i;
HEAP32[$353 >> 2] = $$022$i;
} else label = 142; while (0);
if ((label | 0) == 142) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer14 >> 2] = 53393;
HEAP32[$vararg_buffer14 + 4 >> 2] = $367;
__Z7eprintfPKcz(33957, $vararg_buffer14);
}
}
$381 = $1 + 204 | 0;
$383 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(53381, HEAP32[$8 >> 2] | 0) | 0;
$384 = HEAP32[$2 >> 2] | 0;
L248 : do if ((HEAP16[$384 + ($383 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i267 = HEAP32[$384 + ($383 << 3) >> 2] | 0;
if (!$$01215$i$i267) {
$$sink$i$i272 = $152;
break;
} else $$01216$i$i268 = $$01215$i$i267;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(53381, HEAP32[$$01216$i$i268 >> 2] | 0) | 0) break;
$$012$i$i270 = HEAP32[$$01216$i$i268 + 8 >> 2] | 0;
if (!$$012$i$i270) {
$$sink$i$i272 = $152;
break L248;
} else $$01216$i$i268 = $$012$i$i270;
}
$$sink$i$i272 = $$01216$i$i268 + 4 | 0;
} else $$sink$i$i272 = $152; while (0);
$395 = HEAP32[$$sink$i$i272 >> 2] | 0;
do if ($395 | 0) {
$398 = __ZNK21InvertibleStringArray14indexFromValueEPKc(HEAP32[17192] | 0, $395) | 0;
if (!$398) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer18 >> 2] = 53381;
HEAP32[$vararg_buffer18 + 4 >> 2] = $395;
__Z7eprintfPKcz(34e3, $vararg_buffer18);
break;
} else {
HEAP32[$381 >> 2] = $398;
break;
}
} while (0);
$400 = $1 + 188 | 0;
$401 = $1 + 192 | 0;
$403 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(53362, HEAP32[$8 >> 2] | 0) | 0;
$404 = HEAP32[$2 >> 2] | 0;
L261 : do if ((HEAP16[$404 + ($403 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i274 = HEAP32[$404 + ($403 << 3) >> 2] | 0;
if (!$$01215$i$i274) {
$$sink$i$i279 = $152;
break;
} else $$01216$i$i275 = $$01215$i$i274;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(53362, HEAP32[$$01216$i$i275 >> 2] | 0) | 0) break;
$$012$i$i277 = HEAP32[$$01216$i$i275 + 8 >> 2] | 0;
if (!$$012$i$i277) {
$$sink$i$i279 = $152;
break L261;
} else $$01216$i$i275 = $$012$i$i277;
}
$$sink$i$i279 = $$01216$i$i275 + 4 | 0;
} else $$sink$i$i279 = $152; while (0);
$415 = HEAP32[$$sink$i$i279 >> 2] | 0;
if ($415 | 0) {
HEAP32[$vararg_buffer22 >> 2] = $3;
HEAP32[$vararg_buffer22 + 4 >> 2] = $4;
do if ((_sscanf($415, 33952, $vararg_buffer22) | 0) == 2) {
$419 = HEAP8[$3 >> 0] | 0;
$422 = HEAP8[$4 >> 0] | 0;
$$$i282 = ($419 + -49 & 255) > 4 ? -1 : ($419 << 24 >> 24) + -49 | 0;
$$022$i284 = ($422 + -49 & 255) > 4 ? -1 : ($422 << 24 >> 24) + -49 | 0;
if (!(($$$i282 | 0) != -1 & ($$022$i284 | 0) != -1)) {
label = 162;
break;
}
HEAP32[$400 >> 2] = $$$i282;
HEAP32[$401 >> 2] = $$022$i284;
} else label = 162; while (0);
if ((label | 0) == 162) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer26 >> 2] = 53362;
HEAP32[$vararg_buffer26 + 4 >> 2] = $415;
__Z7eprintfPKcz(33957, $vararg_buffer26);
}
}
$429 = $1 + 208 | 0;
$431 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(53343, HEAP32[$8 >> 2] | 0) | 0;
$432 = HEAP32[$2 >> 2] | 0;
L277 : do if ((HEAP16[$432 + ($431 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i288 = HEAP32[$432 + ($431 << 3) >> 2] | 0;
if (!$$01215$i$i288) {
$$sink$i$i293 = $152;
break;
} else $$01216$i$i289 = $$01215$i$i288;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(53343, HEAP32[$$01216$i$i289 >> 2] | 0) | 0) break;
$$012$i$i291 = HEAP32[$$01216$i$i289 + 8 >> 2] | 0;
if (!$$012$i$i291) {
$$sink$i$i293 = $152;
break L277;
} else $$01216$i$i289 = $$012$i$i291;
}
$$sink$i$i293 = $$01216$i$i289 + 4 | 0;
} else $$sink$i$i293 = $152; while (0);
$443 = HEAP32[$$sink$i$i293 >> 2] | 0;
do if ($443 | 0) {
$446 = __ZNK21InvertibleStringArray14indexFromValueEPKc(HEAP32[17192] | 0, $443) | 0;
if (!$446) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer30 >> 2] = 53343;
HEAP32[$vararg_buffer30 + 4 >> 2] = $443;
__Z7eprintfPKcz(34e3, $vararg_buffer30);
break;
} else {
HEAP32[$429 >> 2] = $446;
break;
}
} while (0);
$448 = $1 + 196 | 0;
$449 = $1 + 200 | 0;
$451 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(53330, HEAP32[$8 >> 2] | 0) | 0;
$452 = HEAP32[$2 >> 2] | 0;
L290 : do if ((HEAP16[$452 + ($451 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i296 = HEAP32[$452 + ($451 << 3) >> 2] | 0;
if (!$$01215$i$i296) {
$$sink$i$i301 = $152;
break;
} else $$01216$i$i297 = $$01215$i$i296;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(53330, HEAP32[$$01216$i$i297 >> 2] | 0) | 0) break;
$$012$i$i299 = HEAP32[$$01216$i$i297 + 8 >> 2] | 0;
if (!$$012$i$i299) {
$$sink$i$i301 = $152;
break L290;
} else $$01216$i$i297 = $$012$i$i299;
}
$$sink$i$i301 = $$01216$i$i297 + 4 | 0;
} else $$sink$i$i301 = $152; while (0);
$463 = HEAP32[$$sink$i$i301 >> 2] | 0;
if ($463 | 0) {
HEAP32[$vararg_buffer34 >> 2] = $3;
HEAP32[$vararg_buffer34 + 4 >> 2] = $4;
do if ((_sscanf($463, 33952, $vararg_buffer34) | 0) == 2) {
$467 = HEAP8[$3 >> 0] | 0;
$470 = HEAP8[$4 >> 0] | 0;
$$$i304 = ($467 + -49 & 255) > 4 ? -1 : ($467 << 24 >> 24) + -49 | 0;
$$022$i306 = ($470 + -49 & 255) > 4 ? -1 : ($470 << 24 >> 24) + -49 | 0;
if (!(($$$i304 | 0) != -1 & ($$022$i306 | 0) != -1)) {
label = 182;
break;
}
HEAP32[$448 >> 2] = $$$i304;
HEAP32[$449 >> 2] = $$022$i306;
} else label = 182; while (0);
if ((label | 0) == 182) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer38 >> 2] = 53330;
HEAP32[$vararg_buffer38 + 4 >> 2] = $463;
__Z7eprintfPKcz(33957, $vararg_buffer38);
}
}
$477 = $1 + 212 | 0;
$479 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(53125, HEAP32[$8 >> 2] | 0) | 0;
$480 = HEAP32[$2 >> 2] | 0;
L306 : do if ((HEAP16[$480 + ($479 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i310 = HEAP32[$480 + ($479 << 3) >> 2] | 0;
if (!$$01215$i$i310) {
$$sink$i$i315 = $152;
break;
} else $$01216$i$i311 = $$01215$i$i310;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(53125, HEAP32[$$01216$i$i311 >> 2] | 0) | 0) break;
$$012$i$i313 = HEAP32[$$01216$i$i311 + 8 >> 2] | 0;
if (!$$012$i$i313) {
$$sink$i$i315 = $152;
break L306;
} else $$01216$i$i311 = $$012$i$i313;
}
$$sink$i$i315 = $$01216$i$i311 + 4 | 0;
} else $$sink$i$i315 = $152; while (0);
$491 = HEAP32[$$sink$i$i315 >> 2] | 0;
do if ($491 | 0) {
$494 = __ZNK21InvertibleStringArray14indexFromValueEPKc(HEAP32[17192] | 0, $491) | 0;
if (!$494) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer42 >> 2] = 53125;
HEAP32[$vararg_buffer42 + 4 >> 2] = $491;
__Z7eprintfPKcz(34e3, $vararg_buffer42);
break;
} else {
HEAP32[$477 >> 2] = $494;
break;
}
} while (0);
__Z10boolAttribPK7HashAnyIPKcS1_ES1_Rb($2, 53046, $1 + 216 | 0) | 0;
L319 : do switch (HEAP32[$1 + 56 >> 2] | 0) {
case 1:
{
HEAPF32[$1 + 228 >> 2] = Math_fround(-1.0);
if (!0) break L319;
HEAP32[$vararg_buffer46 >> 2] = 1;
HEAPF64[$vararg_buffer46 + 8 >> 3] = -1.0;
__Z7eprintfPKcz(34036, $vararg_buffer46);
break;
}
case 2:
{
HEAPF32[$1 + 228 >> 2] = Math_fround(1.0);
if (!0) break L319;
HEAP32[$vararg_buffer50 >> 2] = 1;
HEAPF64[$vararg_buffer50 + 8 >> 3] = 1.0;
__Z7eprintfPKcz(34036, $vararg_buffer50);
break;
}
default:
{}
} while (0);
if (!$203) {
STACKTOP = sp;
return;
}
STACKTOP = sp;
return;
}
function __ZN11HanimAvatar18createFacePolygonsEv($0) {
$0 = $0 | 0;
var $$0$be = 0, $$0134394 = 0, $$0135 = 0, $$0136 = 0, $$0137 = 0, $$0138$lcssa = 0, $$0138398 = 0, $$1$lcssa = 0, $$1399 = 0, $$2$lcssa = 0, $$2396 = 0, $$3 = 0, $$4 = 0, $$lcssa392 = 0, $$lcssa393 = 0, $$pr = 0, $$pr344 = 0, $$pr347$pre = 0, $$pr348 = 0, $$pr354$pr = 0, $$pr355 = 0, $$pr358$pr$pr = 0, $$pr359 = 0, $$pr360 = 0, $$pr362$pr = 0, $$pr363 = 0, $$pr364 = 0, $$pr366$pr = 0, $$pr367 = 0, $$pr370$pre = 0, $$pr371$pr = 0, $$pr372 = 0, $$pr374 = 0, $$pr375 = 0, $$pr377$pr = 0, $$pr378 = 0, $$pr381$pre = 0, $$pr383$pr = 0, $$pr384$pr = 0, $$pr385 = 0, $$pr386$pre = 0, $$pr387 = 0, $$pr389$pr = 0, $$pre$phi425Z2D = 0, $$pre$phi427Z2D = 0, $$pre$phi429Z2D = 0, $$pre$phi431Z2D = 0, $$pre$phi433Z2D = 0, $$pre$phi435Z2D = 0, $$pre$phi437Z2D = 0, $$pre$phi439Z2D = 0, $$pre$phi441Z2D = 0, $$pre$phi443Z2D = 0, $$pre$phi445Z2D = 0, $$pre$phi447Z2D = 0, $$pre$phi449Z2D = 0, $$pre$phi451Z2D = 0, $$pre$phi453Z2D = 0, $$pre$phi455Z2D = 0, $$pre$phi457Z2D = 0, $$pre$phi459Z2D = 0, $$pre$phi461Z2D = 0, $$pre$phi463Z2D = 0, $$pre$phi465Z2D = 0, $$pre$phi467Z2D = 0, $$pre$phi469Z2D = 0, $$pre$phi471Z2D = 0, $$pre$phi473Z2D = 0, $$pre$phi475Z2D = 0, $$pre$phi477Z2D = 0, $$pre$phi479Z2D = 0, $$pre$phi481Z2D = 0, $$pre$phi483Z2D = 0, $$pre$phi485Z2D = 0, $$pre$phi487Z2D = 0, $$pre$phi489Z2D = 0, $$pre$phi491Z2D = 0, $$pre$phiZ2D = 0, $1 = 0, $102 = 0, $104 = 0, $114 = 0, $116 = 0, $123 = 0, $127 = 0, $129 = 0, $139 = 0, $141 = 0, $15 = 0, $151 = 0, $153 = 0, $163 = 0, $165 = 0, $173 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $182 = 0, $186 = 0, $188 = 0, $19 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $200 = 0, $202 = 0, $21 = 0, $212 = 0, $214 = 0, $219 = 0, $225 = 0, $227 = 0, $233 = 0, $239 = 0, $243 = 0, $244 = 0, $245 = 0, $250 = 0, $251 = 0, $253 = 0, $254 = 0, $257 = 0, $258 = 0, $262 = 0, $264 = 0, $27 = 0, $271 = 0, $275 = 0, $277 = 0, $285 = 0, $289 = 0, $291 = 0, $3 = 0, $30 = 0, $301 = 0, $303 = 0, $309 = 0, $31 = 0, $311 = 0, $315 = 0, $317 = 0, $32 = 0, $325 = 0, $329 = 0, $33 = 0, $331 = 0, $340 = 0, $344 = 0, $346 = 0, $356 = 0, $358 = 0, $36 = 0, $368 = 0, $369 = 0, $37 = 0, $373 = 0, $375 = 0, $383 = 0, $387 = 0, $389 = 0, $39 = 0, $396 = 0, $4 = 0, $400 = 0, $402 = 0, $412 = 0, $414 = 0, $420 = 0, $422 = 0, $426 = 0, $428 = 0, $437 = 0, $44 = 0, $441 = 0, $443 = 0, $451 = 0, $455 = 0, $457 = 0, $467 = 0, $469 = 0, $47 = 0, $476 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $482 = 0, $483 = 0, $487 = 0, $489 = 0, $496 = 0, $498 = 0, $5 = 0, $502 = 0, $504 = 0, $511 = 0, $515 = 0, $517 = 0, $524 = 0, $528 = 0, $53 = 0, $530 = 0, $54 = 0, $540 = 0, $542 = 0, $550 = 0, $552 = 0, $564 = 0, $567 = 0, $568 = 0, $57 = 0, $59 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $74 = 0, $76 = 0, $84 = 0, $88 = 0, $9 = 0, $90 = 0, $98 = 0, $sext141 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$1 = __Znwj(16) | 0;
$2 = $1 + 4 | 0;
HEAP32[$2 >> 2] = 10;
$3 = $1 + 12 | 0;
HEAP32[$3 >> 2] = 0;
$4 = $1 + 8 | 0;
HEAP32[$4 >> 2] = 600;
$5 = _malloc(1200) | 0;
HEAP32[$1 >> 2] = $5;
if (!$5) {
__THREW__ = 0;
HEAP32[$vararg_buffer >> 2] = 600;
invoke_vii(115, 20821, $vararg_buffer | 0);
$7 = __THREW__;
__THREW__ = 0;
if ($7 & 1) {
$32 = ___cxa_find_matching_catch_2() | 0;
$33 = tempRet0;
__ZdlPv($1);
___resumeException($32 | 0);
}
HEAP32[$4 >> 2] = 0;
$9 = ___cxa_allocate_exception(4) | 0;
HEAP32[$9 >> 2] = 1;
__THREW__ = 0;
invoke_viii(75, $9 | 0, 32, 0);
__THREW__ = 0;
$32 = ___cxa_find_matching_catch_2() | 0;
$33 = tempRet0;
__ZdlPv($1);
___resumeException($32 | 0);
}
HEAP16[$5 >> 1] = -1;
HEAP16[$5 + 2 >> 1] = -1;
HEAP16[$5 + 4 >> 1] = -1;
$15 = 3;
do {
HEAP16[(HEAP32[$1 >> 2] | 0) + ($15 << 1) >> 1] = -1;
$15 = $15 + 1 | 0;
} while (($15 | 0) != 600);
L11 : do if (-1) {
$18 = 0;
$20 = 0;
while (1) {
$19 = $20 + 2 | 0;
$21 = $19 & 65535;
switch ($18 << 16 >> 16 | 0) {
case 0:
{
$27 = 8300 + ($19 << 16 >> 16 << 1) | 0;
$30 = HEAP32[$3 >> 2] | 0;
$31 = ($30 | 0) < 0;
if ((HEAP16[$27 >> 1] | 0) == -1) {
$$0138$lcssa = 0;
$$1$lcssa = $21;
$$lcssa392 = $31;
$$lcssa393 = $30;
} else {
$$0138398 = 0;
$$1399 = $21;
$36 = $30;
$44 = $27;
$568 = $31;
while (1) {
if ($568) $54 = $36; else {
if ((HEAP32[$4 >> 2] | 0) > ($36 | 0)) {
$$pre$phi425Z2D = $36 + 1 | 0;
label = 15;
} else {
$37 = HEAP32[$2 >> 2] | 0;
$39 = $36 + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($37 | 0) > ($36 | 0) ? $37 : $39 + ($36 >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($36 | 0)) {
$$pre$phi425Z2D = $39;
label = 15;
}
}
if ((label | 0) == 15) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi425Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($36 << 1) >> 1] = HEAP16[$44 >> 1] | 0;
$54 = HEAP32[$3 >> 2] | 0;
}
$47 = $$1399 + 1 << 16 >> 16;
$48 = $$0138398 + 1 << 16 >> 16;
$44 = 8300 + ($47 << 16 >> 16 << 1) | 0;
$53 = ($54 | 0) < 0;
if ((HEAP16[$44 >> 1] | 0) == -1) {
$$0138$lcssa = $48;
$$1$lcssa = $47;
$$lcssa392 = $53;
$$lcssa393 = $54;
break;
} else {
$$0138398 = $48;
$$1399 = $47;
$36 = $54;
$568 = $53;
}
}
}
if (!$$lcssa392) {
if ((HEAP32[$4 >> 2] | 0) > ($$lcssa393 | 0)) {
$$pre$phiZ2D = $$lcssa393 + 1 | 0;
label = 22;
} else {
$57 = HEAP32[$2 >> 2] | 0;
$59 = $$lcssa393 + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($57 | 0) > ($$lcssa393 | 0) ? $57 : $59 + ($$lcssa393 >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($$lcssa393 | 0)) {
$$pre$phiZ2D = $59;
label = 22;
}
}
if ((label | 0) == 22) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phiZ2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($$lcssa393 << 1) >> 1] = -1;
}
if ($$0138$lcssa << 16 >> 16 < 3) {
HEAP32[$vararg_buffer1 >> 2] = $$0138$lcssa << 16 >> 16;
__Z7eprintfPKcz(20873, $vararg_buffer1);
}
$$0$be = $$1$lcssa + 1 << 16 >> 16;
break;
}
case 1:
{
$68 = $19 << 16 >> 16;
$69 = 8300 + ($68 << 1) | 0;
$70 = HEAP32[$3 >> 2] | 0;
do if (($70 | 0) >= 0) {
if ((HEAP32[$4 >> 2] | 0) > ($70 | 0)) {
$$pre$phi437Z2D = $70 + 1 | 0;
label = 31;
} else {
$74 = HEAP32[$2 >> 2] | 0;
$76 = $70 + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($74 | 0) > ($70 | 0) ? $74 : $76 + ($70 >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($70 | 0)) {
$$pre$phi437Z2D = $76;
label = 31;
}
}
if ((label | 0) == 31) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi437Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($70 << 1) >> 1] = HEAP16[$69 >> 1] | 0;
$$pr = HEAP32[$3 >> 2] | 0;
$84 = 8300 + ($68 + 1 << 1) | 0;
if (($$pr | 0) >= 0) {
if ((HEAP32[$4 >> 2] | 0) > ($$pr | 0)) {
$$pre$phi439Z2D = $$pr + 1 | 0;
label = 36;
} else {
$88 = HEAP32[$2 >> 2] | 0;
$90 = $$pr + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($88 | 0) > ($$pr | 0) ? $88 : $90 + ($$pr >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($$pr | 0)) {
$$pre$phi439Z2D = $90;
label = 36;
}
}
if ((label | 0) == 36) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi439Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($$pr << 1) >> 1] = HEAP16[$84 >> 1] | 0;
$$pr344 = HEAP32[$3 >> 2] | 0;
$98 = 8300 + ($68 + 2 << 1) | 0;
if (($$pr344 | 0) >= 0) {
if ((HEAP32[$4 >> 2] | 0) > ($$pr344 | 0)) {
$$pre$phi441Z2D = $$pr344 + 1 | 0;
label = 41;
} else {
$102 = HEAP32[$2 >> 2] | 0;
$104 = $$pr344 + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($102 | 0) > ($$pr344 | 0) ? $102 : $104 + ($$pr344 >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($$pr344 | 0)) {
$$pre$phi441Z2D = $104;
label = 41;
}
}
if ((label | 0) == 41) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi441Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($$pr344 << 1) >> 1] = HEAP16[$98 >> 1] | 0;
$$pr347$pre = HEAP32[$3 >> 2] | 0;
if (($$pr347$pre | 0) >= 0) {
if ((HEAP32[$4 >> 2] | 0) > ($$pr347$pre | 0)) {
$$pre$phi427Z2D = $$pr347$pre + 1 | 0;
label = 46;
} else {
$114 = HEAP32[$2 >> 2] | 0;
$116 = $$pr347$pre + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($114 | 0) > ($$pr347$pre | 0) ? $114 : $116 + ($$pr347$pre >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($$pr347$pre | 0)) {
$$pre$phi427Z2D = $116;
label = 46;
}
}
if ((label | 0) == 46) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi427Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($$pr347$pre << 1) >> 1] = -1;
$$pr348 = HEAP32[$3 >> 2] | 0;
$123 = 8300 + ($68 + 3 << 1) | 0;
if (($$pr348 | 0) >= 0) {
if ((HEAP32[$4 >> 2] | 0) > ($$pr348 | 0)) {
$$pre$phi429Z2D = $$pr348 + 1 | 0;
label = 51;
} else {
$127 = HEAP32[$2 >> 2] | 0;
$129 = $$pr348 + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($127 | 0) > ($$pr348 | 0) ? $127 : $129 + ($$pr348 >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($$pr348 | 0)) {
$$pre$phi429Z2D = $129;
label = 51;
}
}
if ((label | 0) == 51) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi429Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($$pr348 << 1) >> 1] = HEAP16[$123 >> 1] | 0;
$$pr354$pr = HEAP32[$3 >> 2] | 0;
if (($$pr354$pr | 0) >= 0) {
if ((HEAP32[$4 >> 2] | 0) > ($$pr354$pr | 0)) {
$$pre$phi431Z2D = $$pr354$pr + 1 | 0;
label = 56;
} else {
$139 = HEAP32[$2 >> 2] | 0;
$141 = $$pr354$pr + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($139 | 0) > ($$pr354$pr | 0) ? $139 : $141 + ($$pr354$pr >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($$pr354$pr | 0)) {
$$pre$phi431Z2D = $141;
label = 56;
}
}
if ((label | 0) == 56) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi431Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($$pr354$pr << 1) >> 1] = HEAP16[$98 >> 1] | 0;
$$pr355 = HEAP32[$3 >> 2] | 0;
if (($$pr355 | 0) >= 0) {
if ((HEAP32[$4 >> 2] | 0) > ($$pr355 | 0)) {
$$pre$phi433Z2D = $$pr355 + 1 | 0;
label = 61;
} else {
$151 = HEAP32[$2 >> 2] | 0;
$153 = $$pr355 + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($151 | 0) > ($$pr355 | 0) ? $151 : $153 + ($$pr355 >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($$pr355 | 0)) {
$$pre$phi433Z2D = $153;
label = 61;
}
}
if ((label | 0) == 61) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi433Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($$pr355 << 1) >> 1] = HEAP16[$84 >> 1] | 0;
$$pr358$pr$pr = HEAP32[$3 >> 2] | 0;
if (($$pr358$pr$pr | 0) < 0) break;
if ((HEAP32[$4 >> 2] | 0) > ($$pr358$pr$pr | 0)) {
$$pre$phi435Z2D = $$pr358$pr$pr + 1 | 0;
label = 66;
} else {
$163 = HEAP32[$2 >> 2] | 0;
$165 = $$pr358$pr$pr + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($163 | 0) > ($$pr358$pr$pr | 0) ? $163 : $165 + ($$pr358$pr$pr >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($$pr358$pr$pr | 0)) {
$$pre$phi435Z2D = $165;
label = 66;
}
}
if ((label | 0) == 66) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi435Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($$pr358$pr$pr << 1) >> 1] = -1;
}
}
}
}
}
}
} while (0);
$$0$be = $68 + 5 & 65535;
break;
}
case 2:
{
$173 = $19 << 16 >> 16;
$175 = HEAP16[8300 + ($173 << 1) >> 1] | 0;
$176 = $173 + 2 | 0;
$177 = $176 & 65535;
$178 = $176 << 16 >> 16;
$179 = 8300 + ($178 << 1) | 0;
if ((HEAP16[$179 >> 1] | 0) == -1) $$2$lcssa = $177; else {
$$2396 = $177;
$195 = $178;
$219 = $179;
while (1) {
$182 = HEAP32[$3 >> 2] | 0;
if (($182 | 0) >= 0) {
if ((HEAP32[$4 >> 2] | 0) > ($182 | 0)) {
$$pre$phi443Z2D = $182 + 1 | 0;
label = 74;
} else {
$186 = HEAP32[$2 >> 2] | 0;
$188 = $182 + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($186 | 0) > ($182 | 0) ? $186 : $188 + ($182 >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($182 | 0)) {
$$pre$phi443Z2D = $188;
label = 74;
}
}
if ((label | 0) == 74) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi443Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($182 << 1) >> 1] = $175;
$$pr359 = HEAP32[$3 >> 2] | 0;
$196 = 8300 + ($195 + -1 << 1) | 0;
if (($$pr359 | 0) >= 0) {
if ((HEAP32[$4 >> 2] | 0) > ($$pr359 | 0)) {
$$pre$phi445Z2D = $$pr359 + 1 | 0;
label = 79;
} else {
$200 = HEAP32[$2 >> 2] | 0;
$202 = $$pr359 + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($200 | 0) > ($$pr359 | 0) ? $200 : $202 + ($$pr359 >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($$pr359 | 0)) {
$$pre$phi445Z2D = $202;
label = 79;
}
}
if ((label | 0) == 79) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi445Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($$pr359 << 1) >> 1] = HEAP16[$196 >> 1] | 0;
$$pr360 = HEAP32[$3 >> 2] | 0;
if (($$pr360 | 0) >= 0) {
if ((HEAP32[$4 >> 2] | 0) > ($$pr360 | 0)) {
$$pre$phi447Z2D = $$pr360 + 1 | 0;
label = 84;
} else {
$212 = HEAP32[$2 >> 2] | 0;
$214 = $$pr360 + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($212 | 0) > ($$pr360 | 0) ? $212 : $214 + ($$pr360 >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($$pr360 | 0)) {
$$pre$phi447Z2D = $214;
label = 84;
}
}
if ((label | 0) == 84) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi447Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($$pr360 << 1) >> 1] = HEAP16[$219 >> 1] | 0;
$$pr362$pr = HEAP32[$3 >> 2] | 0;
if (($$pr362$pr | 0) >= 0) {
if ((HEAP32[$4 >> 2] | 0) > ($$pr362$pr | 0)) {
$$pre$phi449Z2D = $$pr362$pr + 1 | 0;
label = 89;
} else {
$225 = HEAP32[$2 >> 2] | 0;
$227 = $$pr362$pr + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($225 | 0) > ($$pr362$pr | 0) ? $225 : $227 + ($$pr362$pr >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($$pr362$pr | 0)) {
$$pre$phi449Z2D = $227;
label = 89;
}
}
if ((label | 0) == 89) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi449Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($$pr362$pr << 1) >> 1] = -1;
}
}
}
}
$233 = $$2396 + 1 << 16 >> 16;
$195 = $233 << 16 >> 16;
$219 = 8300 + ($195 << 1) | 0;
if ((HEAP16[$219 >> 1] | 0) == -1) {
$$2$lcssa = $233;
break;
} else $$2396 = $233;
}
}
$$0$be = $$2$lcssa + 1 << 16 >> 16;
break;
}
case 3:
{
$$3 = $21;
while (1) {
$239 = $$3 << 16 >> 16;
$243 = $$3 + 1 << 16 >> 16;
if ((HEAP16[8300 + ($239 << 1) >> 1] | 0) == -1) break; else $$3 = $243;
}
$244 = $19 << 16 >> 16;
$$4 = $243;
do {
$245 = $$4 << 16 >> 16;
$$4 = $$4 + 1 << 16 >> 16;
} while ((HEAP16[8300 + ($245 << 1) >> 1] | 0) != -1);
$250 = $239 - $244 | 0;
$251 = $243 << 16 >> 16;
$253 = $250 << 16 >> 16;
$254 = $245 - $251 << 16 >> 16;
if (($253 | 0) == ($254 + 2 | 0)) {
$257 = 8300 + ($244 << 1) | 0;
$258 = HEAP32[$3 >> 2] | 0;
do if (($258 | 0) >= 0) {
if ((HEAP32[$4 >> 2] | 0) > ($258 | 0)) {
$$pre$phi467Z2D = $258 + 1 | 0;
label = 101;
} else {
$262 = HEAP32[$2 >> 2] | 0;
$264 = $258 + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($262 | 0) > ($258 | 0) ? $262 : $264 + ($258 >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($258 | 0)) {
$$pre$phi467Z2D = $264;
label = 101;
}
}
if ((label | 0) == 101) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi467Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($258 << 1) >> 1] = HEAP16[$257 >> 1] | 0;
$$pr363 = HEAP32[$3 >> 2] | 0;
$271 = 8300 + ($251 << 1) | 0;
if (($$pr363 | 0) >= 0) {
if ((HEAP32[$4 >> 2] | 0) > ($$pr363 | 0)) {
$$pre$phi469Z2D = $$pr363 + 1 | 0;
label = 106;
} else {
$275 = HEAP32[$2 >> 2] | 0;
$277 = $$pr363 + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($275 | 0) > ($$pr363 | 0) ? $275 : $277 + ($$pr363 >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($$pr363 | 0)) {
$$pre$phi469Z2D = $277;
label = 106;
}
}
if ((label | 0) == 106) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi469Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($$pr363 << 1) >> 1] = HEAP16[$271 >> 1] | 0;
$$pr364 = HEAP32[$3 >> 2] | 0;
$285 = 8300 + ($244 + 1 << 1) | 0;
if (($$pr364 | 0) >= 0) {
if ((HEAP32[$4 >> 2] | 0) > ($$pr364 | 0)) {
$$pre$phi471Z2D = $$pr364 + 1 | 0;
label = 111;
} else {
$289 = HEAP32[$2 >> 2] | 0;
$291 = $$pr364 + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($289 | 0) > ($$pr364 | 0) ? $289 : $291 + ($$pr364 >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($$pr364 | 0)) {
$$pre$phi471Z2D = $291;
label = 111;
}
}
if ((label | 0) == 111) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi471Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($$pr364 << 1) >> 1] = HEAP16[$285 >> 1] | 0;
$$pr366$pr = HEAP32[$3 >> 2] | 0;
if (($$pr366$pr | 0) >= 0) {
if ((HEAP32[$4 >> 2] | 0) > ($$pr366$pr | 0)) {
$$pre$phi473Z2D = $$pr366$pr + 1 | 0;
label = 116;
} else {
$301 = HEAP32[$2 >> 2] | 0;
$303 = $$pr366$pr + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($301 | 0) > ($$pr366$pr | 0) ? $301 : $303 + ($$pr366$pr >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($$pr366$pr | 0)) {
$$pre$phi473Z2D = $303;
label = 116;
}
}
if ((label | 0) == 116) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi473Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($$pr366$pr << 1) >> 1] = -1;
$$pr367 = HEAP32[$3 >> 2] | 0;
$309 = $253 + $244 | 0;
$311 = 8300 + ($309 + -1 << 1) | 0;
if (($$pr367 | 0) >= 0) {
if ((HEAP32[$4 >> 2] | 0) > ($$pr367 | 0)) {
$$pre$phi475Z2D = $$pr367 + 1 | 0;
label = 121;
} else {
$315 = HEAP32[$2 >> 2] | 0;
$317 = $$pr367 + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($315 | 0) > ($$pr367 | 0) ? $315 : $317 + ($$pr367 >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($$pr367 | 0)) {
$$pre$phi475Z2D = $317;
label = 121;
}
}
if ((label | 0) == 121) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi475Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($$pr367 << 1) >> 1] = HEAP16[$311 >> 1] | 0;
$$pr370$pre = HEAP32[$3 >> 2] | 0;
$325 = 8300 + ($309 + -2 << 1) | 0;
if (($$pr370$pre | 0) >= 0) {
if ((HEAP32[$4 >> 2] | 0) > ($$pr370$pre | 0)) {
$$pre$phi461Z2D = $$pr370$pre + 1 | 0;
label = 126;
} else {
$329 = HEAP32[$2 >> 2] | 0;
$331 = $$pr370$pre + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($329 | 0) > ($$pr370$pre | 0) ? $329 : $331 + ($$pr370$pre >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($$pr370$pre | 0)) {
$$pre$phi461Z2D = $331;
label = 126;
}
}
if ((label | 0) == 126) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi461Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($$pr370$pre << 1) >> 1] = HEAP16[$325 >> 1] | 0;
$$pr371$pr = HEAP32[$3 >> 2] | 0;
$340 = 8300 + ($251 + -1 + $254 << 1) | 0;
if (($$pr371$pr | 0) < 0) break;
if ((HEAP32[$4 >> 2] | 0) > ($$pr371$pr | 0)) {
$$pre$phi463Z2D = $$pr371$pr + 1 | 0;
label = 131;
} else {
$344 = HEAP32[$2 >> 2] | 0;
$346 = $$pr371$pr + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($344 | 0) > ($$pr371$pr | 0) ? $344 : $346 + ($$pr371$pr >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($$pr371$pr | 0)) {
$$pre$phi463Z2D = $346;
label = 131;
}
}
if ((label | 0) == 131) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi463Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($$pr371$pr << 1) >> 1] = HEAP16[$340 >> 1] | 0;
$$pr372 = HEAP32[$3 >> 2] | 0;
if (($$pr372 | 0) < 0) break;
if ((HEAP32[$4 >> 2] | 0) > ($$pr372 | 0)) {
$$pre$phi465Z2D = $$pr372 + 1 | 0;
label = 136;
} else {
$356 = HEAP32[$2 >> 2] | 0;
$358 = $$pr372 + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($356 | 0) > ($$pr372 | 0) ? $356 : $358 + ($$pr372 >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($$pr372 | 0)) {
$$pre$phi465Z2D = $358;
label = 136;
}
}
if ((label | 0) == 136) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi465Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($$pr372 << 1) >> 1] = -1;
}
}
}
}
}
} while (0);
$$0135 = $243;
$$0136 = $253 + -2 | 0;
$$0137 = $20 + 3 | 0;
} else if (($253 | 0) == ($254 + -2 | 0)) {
$368 = 8300 + ($251 << 1) | 0;
$369 = HEAP32[$3 >> 2] | 0;
do if (($369 | 0) >= 0) {
if ((HEAP32[$4 >> 2] | 0) > ($369 | 0)) {
$$pre$phi483Z2D = $369 + 1 | 0;
label = 144;
} else {
$373 = HEAP32[$2 >> 2] | 0;
$375 = $369 + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($373 | 0) > ($369 | 0) ? $373 : $375 + ($369 >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($369 | 0)) {
$$pre$phi483Z2D = $375;
label = 144;
}
}
if ((label | 0) == 144) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi483Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($369 << 1) >> 1] = HEAP16[$368 >> 1] | 0;
$$pr374 = HEAP32[$3 >> 2] | 0;
$383 = 8300 + ($251 + 1 << 1) | 0;
if (($$pr374 | 0) >= 0) {
if ((HEAP32[$4 >> 2] | 0) > ($$pr374 | 0)) {
$$pre$phi485Z2D = $$pr374 + 1 | 0;
label = 149;
} else {
$387 = HEAP32[$2 >> 2] | 0;
$389 = $$pr374 + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($387 | 0) > ($$pr374 | 0) ? $387 : $389 + ($$pr374 >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($$pr374 | 0)) {
$$pre$phi485Z2D = $389;
label = 149;
}
}
if ((label | 0) == 149) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi485Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($$pr374 << 1) >> 1] = HEAP16[$383 >> 1] | 0;
$$pr375 = HEAP32[$3 >> 2] | 0;
$396 = 8300 + ($244 << 1) | 0;
if (($$pr375 | 0) >= 0) {
if ((HEAP32[$4 >> 2] | 0) > ($$pr375 | 0)) {
$$pre$phi487Z2D = $$pr375 + 1 | 0;
label = 154;
} else {
$400 = HEAP32[$2 >> 2] | 0;
$402 = $$pr375 + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($400 | 0) > ($$pr375 | 0) ? $400 : $402 + ($$pr375 >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($$pr375 | 0)) {
$$pre$phi487Z2D = $402;
label = 154;
}
}
if ((label | 0) == 154) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi487Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($$pr375 << 1) >> 1] = HEAP16[$396 >> 1] | 0;
$$pr377$pr = HEAP32[$3 >> 2] | 0;
if (($$pr377$pr | 0) >= 0) {
if ((HEAP32[$4 >> 2] | 0) > ($$pr377$pr | 0)) {
$$pre$phi489Z2D = $$pr377$pr + 1 | 0;
label = 159;
} else {
$412 = HEAP32[$2 >> 2] | 0;
$414 = $$pr377$pr + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($412 | 0) > ($$pr377$pr | 0) ? $412 : $414 + ($$pr377$pr >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($$pr377$pr | 0)) {
$$pre$phi489Z2D = $414;
label = 159;
}
}
if ((label | 0) == 159) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi489Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($$pr377$pr << 1) >> 1] = -1;
$$pr378 = HEAP32[$3 >> 2] | 0;
$420 = $254 + $251 | 0;
$422 = 8300 + ($420 + -1 << 1) | 0;
if (($$pr378 | 0) >= 0) {
if ((HEAP32[$4 >> 2] | 0) > ($$pr378 | 0)) {
$$pre$phi491Z2D = $$pr378 + 1 | 0;
label = 164;
} else {
$426 = HEAP32[$2 >> 2] | 0;
$428 = $$pr378 + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($426 | 0) > ($$pr378 | 0) ? $426 : $428 + ($$pr378 >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($$pr378 | 0)) {
$$pre$phi491Z2D = $428;
label = 164;
}
}
if ((label | 0) == 164) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi491Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($$pr378 << 1) >> 1] = HEAP16[$422 >> 1] | 0;
$$pr381$pre = HEAP32[$3 >> 2] | 0;
$437 = 8300 + ($244 + -1 + $253 << 1) | 0;
if (($$pr381$pre | 0) >= 0) {
if ((HEAP32[$4 >> 2] | 0) > ($$pr381$pre | 0)) {
$$pre$phi477Z2D = $$pr381$pre + 1 | 0;
label = 169;
} else {
$441 = HEAP32[$2 >> 2] | 0;
$443 = $$pr381$pre + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($441 | 0) > ($$pr381$pre | 0) ? $441 : $443 + ($$pr381$pre >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($$pr381$pre | 0)) {
$$pre$phi477Z2D = $443;
label = 169;
}
}
if ((label | 0) == 169) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi477Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($$pr381$pre << 1) >> 1] = HEAP16[$437 >> 1] | 0;
$$pr383$pr = HEAP32[$3 >> 2] | 0;
$451 = 8300 + ($420 + -2 << 1) | 0;
if (($$pr383$pr | 0) < 0) break;
if ((HEAP32[$4 >> 2] | 0) > ($$pr383$pr | 0)) {
$$pre$phi479Z2D = $$pr383$pr + 1 | 0;
label = 174;
} else {
$455 = HEAP32[$2 >> 2] | 0;
$457 = $$pr383$pr + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($455 | 0) > ($$pr383$pr | 0) ? $455 : $457 + ($$pr383$pr >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($$pr383$pr | 0)) {
$$pre$phi479Z2D = $457;
label = 174;
}
}
if ((label | 0) == 174) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi479Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($$pr383$pr << 1) >> 1] = HEAP16[$451 >> 1] | 0;
$$pr384$pr = HEAP32[$3 >> 2] | 0;
if (($$pr384$pr | 0) < 0) break;
if ((HEAP32[$4 >> 2] | 0) > ($$pr384$pr | 0)) {
$$pre$phi481Z2D = $$pr384$pr + 1 | 0;
label = 179;
} else {
$467 = HEAP32[$2 >> 2] | 0;
$469 = $$pr384$pr + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($467 | 0) > ($$pr384$pr | 0) ? $467 : $469 + ($$pr384$pr >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($$pr384$pr | 0)) {
$$pre$phi481Z2D = $469;
label = 179;
}
}
if ((label | 0) == 179) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi481Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($$pr384$pr << 1) >> 1] = -1;
}
}
}
}
}
} while (0);
$$0135 = $$3 + 2 << 16 >> 16;
$$0136 = $250;
$$0137 = $19;
} else {
$$0135 = $243;
$$0136 = $250;
$$0137 = $19;
}
$sext141 = $$0136 << 16;
$476 = $sext141 >> 16;
if (($sext141 | 0) > 65536) {
$478 = $$0137 << 16 >> 16;
$479 = $$0135 << 16 >> 16;
$$0134394 = 1;
do {
$480 = $$0134394 + $478 | 0;
$482 = 8300 + ($480 + -1 << 1) | 0;
$483 = HEAP32[$3 >> 2] | 0;
if (($483 | 0) >= 0) {
if ((HEAP32[$4 >> 2] | 0) > ($483 | 0)) {
$$pre$phi451Z2D = $483 + 1 | 0;
label = 188;
} else {
$487 = HEAP32[$2 >> 2] | 0;
$489 = $483 + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($487 | 0) > ($483 | 0) ? $487 : $489 + ($483 >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($483 | 0)) {
$$pre$phi451Z2D = $489;
label = 188;
}
}
if ((label | 0) == 188) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi451Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($483 << 1) >> 1] = HEAP16[$482 >> 1] | 0;
$$pr385 = HEAP32[$3 >> 2] | 0;
$496 = $$0134394 + $479 | 0;
$498 = 8300 + ($496 + -1 << 1) | 0;
if (($$pr385 | 0) >= 0) {
if ((HEAP32[$4 >> 2] | 0) > ($$pr385 | 0)) {
$$pre$phi459Z2D = $$pr385 + 1 | 0;
label = 193;
} else {
$502 = HEAP32[$2 >> 2] | 0;
$504 = $$pr385 + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($502 | 0) > ($$pr385 | 0) ? $502 : $504 + ($$pr385 >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($$pr385 | 0)) {
$$pre$phi459Z2D = $504;
label = 193;
}
}
if ((label | 0) == 193) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi459Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($$pr385 << 1) >> 1] = HEAP16[$498 >> 1] | 0;
$$pr386$pre = HEAP32[$3 >> 2] | 0;
$511 = 8300 + ($496 << 1) | 0;
if (($$pr386$pre | 0) >= 0) {
if ((HEAP32[$4 >> 2] | 0) > ($$pr386$pre | 0)) {
$$pre$phi453Z2D = $$pr386$pre + 1 | 0;
label = 198;
} else {
$515 = HEAP32[$2 >> 2] | 0;
$517 = $$pr386$pre + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($515 | 0) > ($$pr386$pre | 0) ? $515 : $517 + ($$pr386$pre >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($$pr386$pre | 0)) {
$$pre$phi453Z2D = $517;
label = 198;
}
}
if ((label | 0) == 198) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi453Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($$pr386$pre << 1) >> 1] = HEAP16[$511 >> 1] | 0;
$$pr387 = HEAP32[$3 >> 2] | 0;
$524 = 8300 + ($480 << 1) | 0;
if (($$pr387 | 0) >= 0) {
if ((HEAP32[$4 >> 2] | 0) > ($$pr387 | 0)) {
$$pre$phi455Z2D = $$pr387 + 1 | 0;
label = 203;
} else {
$528 = HEAP32[$2 >> 2] | 0;
$530 = $$pr387 + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($528 | 0) > ($$pr387 | 0) ? $528 : $530 + ($$pr387 >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($$pr387 | 0)) {
$$pre$phi455Z2D = $530;
label = 203;
}
}
if ((label | 0) == 203) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi455Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($$pr387 << 1) >> 1] = HEAP16[$524 >> 1] | 0;
$$pr389$pr = HEAP32[$3 >> 2] | 0;
if (($$pr389$pr | 0) >= 0) {
if ((HEAP32[$4 >> 2] | 0) > ($$pr389$pr | 0)) {
$$pre$phi457Z2D = $$pr389$pr + 1 | 0;
label = 208;
} else {
$540 = HEAP32[$2 >> 2] | 0;
$542 = $$pr389$pr + 1 | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($1, ($540 | 0) > ($$pr389$pr | 0) ? $540 : $542 + ($$pr389$pr >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($$pr389$pr | 0)) {
$$pre$phi457Z2D = $542;
label = 208;
}
}
if ((label | 0) == 208) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi457Z2D;
}
HEAP16[(HEAP32[$1 >> 2] | 0) + ($$pr389$pr << 1) >> 1] = -1;
}
}
}
}
}
$$0134394 = $$0134394 + 1 | 0;
} while (($$0134394 | 0) < ($476 | 0));
$$0$be = $$4;
} else $$0$be = $$4;
break;
}
default:
$$0$be = $21;
}
$20 = $$0$be << 16 >> 16;
$18 = HEAP16[8300 + ($20 << 1) >> 1] | 0;
if ($18 << 16 >> 16 == -1) break L11;
}
} while (0);
$550 = __Znwj(16) | 0;
$552 = $550 + 8 | 0;
HEAP32[$552 >> 2] = 0;
HEAP32[$552 + 4 >> 2] = 0;
HEAP32[$550 >> 2] = HEAP32[$0 + 488 >> 2];
HEAP32[$550 + 4 >> 2] = $1;
$564 = HEAP32[(HEAP32[(HEAP32[$0 + 72 >> 2] | 0) + 8 >> 2] | 0) + 20 >> 2] | 0;
if (!$564) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(20903, $vararg_buffer4);
$567 = ___cxa_allocate_exception(4) | 0;
HEAP32[$567 >> 2] = 14;
___cxa_throw($567 | 0, 232, 0);
} else {
HEAP32[$564 + 16 >> 2] = $550;
STACKTOP = sp;
return;
}
}
function __Z21SingleMovementFromXMLPK7GestureRP13BasicMovementP7XMLCellbb9Mirroring8Location($0, $1, $2, $3, $4, $5, $6) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
$6 = $6 | 0;
var $$0$i = 0, $$0$off0 = 0, $$0308 = 0, $$0308$ph = 0, $$0309 = 0, $$0310 = 0, $$0313413 = 0, $$0314414 = 0, $$1 = 0, $$1311 = 0, $$1316$lcssa = 0, $$1316418 = 0, $$2 = 0, $$2312 = 0, $$335 = 0, $$pr404 = 0, $$pre = 0, $$pre$phi$i348Z2D = 0, $$pre$phi$i367Z2D = 0, $$pre$phi$i375Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi421Z2D = 0, $$pre$phi425Z2D = 0, $$pre$phi427Z2D = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink333 = 0, $10 = 0, $103 = 0, $104 = 0, $109 = 0, $11 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $117 = 0, $118 = 0, $12 = 0, $120 = 0, $124 = 0, $125 = 0, $13 = 0, $133 = 0, $137 = 0, $139 = 0, $14 = 0, $15 = 0, $152 = 0, $153 = 0, $154 = 0, $157 = 0, $16 = 0, $160 = 0, $161 = 0, $164 = 0, $169 = 0, $171 = f0, $176 = 0, $184 = 0, $185 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $203 = 0, $205 = 0, $207 = 0, $208 = 0, $210 = 0, $214 = 0, $215 = 0, $223 = 0, $227 = 0, $229 = 0, $242 = 0, $243 = 0, $244 = 0, $247 = 0, $250 = 0, $251 = 0, $254 = 0, $259 = 0, $26 = 0, $261 = f0, $264 = 0, $27 = 0, $275 = 0.0, $278 = 0.0, $281 = 0.0, $286 = 0, $29 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $30 = 0, $300 = 0, $307 = 0, $313 = 0, $318 = 0, $324 = 0, $325 = 0, $332 = 0, $334 = 0, $335 = 0, $338 = 0, $342 = 0, $344 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $356 = 0, $357 = 0, $358 = 0, $360 = 0, $364 = 0, $366 = 0, $376 = 0, $378 = 0, $38 = 0, $384 = 0, $385 = 0, $39 = 0, $393 = 0, $394 = 0, $395 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $413 = 0, $416 = 0, $42 = 0, $421 = 0, $427 = 0, $43 = 0, $431 = 0, $434 = 0, $439 = 0, $44 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $459 = 0, $46 = 0, $462 = 0, $465 = 0, $468 = 0, $473 = 0, $476 = 0, $479 = 0, $48 = 0, $482 = 0, $485 = 0, $49 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $50 = 0, $504 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $514 = 0, $518 = 0, $519 = 0, $522 = 0, $524 = 0, $525 = 0, $53 = 0, $530 = 0, $534 = 0, $535 = 0, $536 = 0, $539 = 0, $544 = 0, $546 = 0, $549 = 0, $551 = 0, $553 = 0, $554 = 0, $555 = 0, $560 = 0, $561 = 0, $564 = 0, $568 = 0.0, $571 = 0.0, $7 = 0, $71 = 0, $78 = 0, $8 = 0, $80 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $94 = 0, $tmpcast$byval_copy = 0, $trunc = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer16 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer41 = 0, $vararg_buffer46 = 0, $vararg_buffer50 = 0, $vararg_buffer56 = 0, $vararg_buffer60 = 0, $vararg_buffer63 = 0, dest = 0, label = 0, sp = 0, stop = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 416 | 0;
$tmpcast$byval_copy = sp + 410 | 0;
$vararg_buffer63 = sp + 144 | 0;
$vararg_buffer60 = sp + 136 | 0;
$vararg_buffer56 = sp + 128 | 0;
$vararg_buffer50 = sp + 112 | 0;
$vararg_buffer46 = sp + 104 | 0;
$vararg_buffer41 = sp + 88 | 0;
$vararg_buffer37 = sp + 80 | 0;
$vararg_buffer34 = sp + 72 | 0;
$vararg_buffer31 = sp + 64 | 0;
$vararg_buffer27 = sp + 56 | 0;
$vararg_buffer24 = sp + 48 | 0;
$vararg_buffer20 = sp + 40 | 0;
$vararg_buffer16 = sp + 32 | 0;
$vararg_buffer11 = sp + 8 | 0;
$vararg_buffer = sp;
$7 = sp + 392 | 0;
$8 = sp + 176 | 0;
$9 = sp + 408 | 0;
$10 = sp + 168 | 0;
$11 = sp + 406 | 0;
$12 = sp + 404 | 0;
$13 = sp + 402 | 0;
$14 = sp + 400 | 0;
$15 = sp + 398 | 0;
$16 = sp + 396 | 0;
HEAP32[$1 >> 2] = 0;
if (!($3 | $4)) {
STACKTOP = sp;
return;
}
if ($3 & $4) if (!(HEAP8[$5 >> 0] & 15)) $$0$off0 = (HEAP8[$0 + 13 >> 0] & 1) != 0; else $$0$off0 = 1; else $$0$off0 = $4;
$26 = $3 ? ($$0$off0 ? 5 : 1) : $$0$off0 ? 2 : 0;
$27 = $0 + 13 | 0;
$29 = HEAP8[$27 >> 0] & 64;
$30 = $29 << 24 >> 24 != 0;
$trunc = $26 & 255;
switch ($trunc & 7) {
case 1:
{
$$0$i = 4 - (($29 & 255) >>> 6) | 0;
break;
}
case 2:
{
$$0$i = (($29 & 255) >>> 6) + 3 | 0;
break;
}
default:
$$0$i = $26;
}
if (!$2) {
$38 = __Znwj(528) | 0;
__THREW__ = 0;
invoke_viii(89, $38 | 0, 10, $$0$i | 0);
$39 = __THREW__;
__THREW__ = 0;
if ($39 & 1) {
$41 = ___cxa_find_matching_catch_2() | 0;
$42 = tempRet0;
__ZdlPv($38);
$$2 = $41;
$$2312 = $42;
___resumeException($$2 | 0);
} else {
HEAP32[$38 >> 2] = 2368;
HEAP32[$1 >> 2] = $38;
STACKTOP = sp;
return;
}
}
$43 = HEAP32[$2 >> 2] | 0;
$44 = __ZN5SiGML14convertElementEPKc($43) | 0;
$46 = HEAP32[$2 + 4 >> 2] | 0;
$48 = HEAP32[$2 + 8 >> 2] | 0;
$49 = $48 + 12 | 0;
$50 = HEAP32[$49 >> 2] | 0;
$53 = (HEAP8[$27 >> 0] & 64) != 0;
HEAP8[$8 + 4 >> 0] = 0;
HEAP32[$8 + 8 >> 2] = 0;
HEAP32[$8 + 12 >> 2] = 0;
HEAP8[$8 + 16 >> 0] = 0;
HEAPF32[$8 + 56 >> 2] = Math_fround(0.0);
HEAPF32[$8 + 60 >> 2] = Math_fround(0.0);
HEAPF32[$8 + 64 >> 2] = Math_fround(0.0);
HEAPF32[$8 + 80 >> 2] = Math_fround(0.0);
HEAPF32[$8 + 84 >> 2] = Math_fround(0.0);
HEAPF32[$8 + 88 >> 2] = Math_fround(0.0);
HEAPF32[$8 + 96 >> 2] = Math_fround(0.0);
HEAPF32[$8 + 100 >> 2] = Math_fround(0.0);
HEAPF32[$8 + 104 >> 2] = Math_fround(0.0);
HEAPF32[$8 + 112 >> 2] = Math_fround(0.0);
HEAPF32[$8 + 116 >> 2] = Math_fround(0.0);
HEAPF32[$8 + 140 >> 2] = Math_fround(0.0);
HEAPF32[$8 + 144 >> 2] = Math_fround(0.0);
$71 = $8 + 152 | 0;
HEAPF32[$8 + 180 >> 2] = Math_fround(0.0);
HEAPF32[$8 + 184 >> 2] = Math_fround(0.0);
HEAPF32[$8 + 192 >> 2] = Math_fround(0.0);
HEAPF32[$8 + 196 >> 2] = Math_fround(0.0);
HEAP32[$71 >> 2] = 0;
HEAP32[$71 + 4 >> 2] = 0;
HEAP32[$71 + 8 >> 2] = 0;
HEAP32[$71 + 12 >> 2] = 0;
HEAP32[$71 + 16 >> 2] = 0;
HEAP32[$71 + 20 >> 2] = 0;
HEAP8[$7 >> 0] = 0;
HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$7 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$7 + 1 >> 0] | 0;
__ZN16MotionAttributes17setFromXMLAttribsEPKcP7HashAnyIS1_S1_E9Mirroringb($8, $43, $46, $tmpcast$byval_copy, $53);
L20 : do switch ($44 | 0) {
case 18:
{
if ((HEAP32[$49 >> 2] | 0) != 2) {
__Z7LogTimev() | 0;
$78 = HEAP32[$49 >> 2] | 0;
HEAP32[$vararg_buffer >> 2] = $43;
HEAP32[$vararg_buffer + 4 >> 2] = $78;
__Z7eprintfPKcz(47978, $vararg_buffer);
__Z8BadSiGMLv();
$$0308$ph = 5;
label = 166;
break L20;
}
$80 = HEAP32[HEAP32[$48 >> 2] >> 2] | 0;
HEAP32[$7 >> 2] = 0;
HEAP16[$9 >> 1] = HEAP16[36081] | 0;
HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$9 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$9 + 1 >> 0] | 0;
__Z21SingleMovementFromXMLPK7GestureRP13BasicMovementP7XMLCellbb9Mirroring8Location($0, $7, $80, 1, 0, $tmpcast$byval_copy, $6);
if ((HEAP32[$49 >> 2] | 0) > 1) $88 = HEAP32[(HEAP32[$48 >> 2] | 0) + 4 >> 2] | 0; else $88 = 0;
HEAP32[$10 >> 2] = 0;
HEAP16[$11 >> 1] = HEAP16[36081] | 0;
HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$11 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$11 + 1 >> 0] | 0;
__Z21SingleMovementFromXMLPK7GestureRP13BasicMovementP7XMLCellbb9Mirroring8Location($0, $10, $88, 0, 1, $tmpcast$byval_copy, $6);
$89 = HEAP32[$7 >> 2] | 0;
$90 = HEAP32[$10 >> 2] | 0;
$91 = __Znwj(536) | 0;
__THREW__ = 0;
invoke_viii(89, $91 | 0, 7, 5);
$92 = __THREW__;
__THREW__ = 0;
if ($92 & 1) {
$94 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($91);
___resumeException($94 | 0);
} else {
HEAP32[$91 >> 2] = 3164;
HEAP32[$91 + 528 >> 2] = $30 ? $89 : $90;
HEAP32[$91 + 532 >> 2] = $30 ? $90 : $89;
HEAP32[$1 >> 2] = $91;
__ZN13BasicMovement23setBaseMotionAttributesERK16MotionAttributes($91, $8);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$91 >> 2] | 0) + 16 >> 2] & 255]($91, $8);
$$0308$ph = 5;
label = 166;
break L20;
}
break;
}
case 19:
{
$103 = __Znwj(556) | 0;
__THREW__ = 0;
invoke_vii(174, $103 | 0, $$0$i | 0);
$104 = __THREW__;
__THREW__ = 0;
if ($104 & 1) {
$117 = ___cxa_find_matching_catch_2() | 0;
$118 = tempRet0;
__ZdlPv($103);
$$1 = $117;
$$1311 = $118;
label = 175;
break L20;
}
__ZN13BasicMovement23setBaseMotionAttributesERK16MotionAttributes($103, $8);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$103 >> 2] | 0) + 16 >> 2] & 255]($103, $8);
$109 = HEAP32[$49 >> 2] | 0;
if (($109 | 0) > 0) {
$111 = HEAP16[$5 >> 1] | 0;
$112 = $103 + 528 | 0;
$113 = $103 + 540 | 0;
$114 = $103 + 536 | 0;
$115 = $103 + 532 | 0;
$$0313413 = 0;
$120 = $109;
do {
HEAP32[$7 >> 2] = 0;
if (($120 | 0) > ($$0313413 | 0)) $124 = HEAP32[(HEAP32[$48 >> 2] | 0) + ($$0313413 << 2) >> 2] | 0; else $124 = 0;
HEAP16[$12 >> 1] = $111;
HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$12 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$12 + 1 >> 0] | 0;
__Z21SingleMovementFromXMLPK7GestureRP13BasicMovementP7XMLCellbb9Mirroring8Location($0, $7, $124, $3, $$0$off0, $tmpcast$byval_copy, $6);
$125 = HEAP32[$7 >> 2] | 0;
do if ($125 | 0) {
if ((HEAP32[$125 + 4 >> 2] | 0) == 10) {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$125 >> 2] | 0) + 4 >> 2] & 255]($125);
HEAP32[$7 >> 2] = 0;
break;
}
$133 = HEAP32[$113 >> 2] | 0;
if (($133 | 0) >= 0) {
if ((HEAP32[$114 >> 2] | 0) > ($133 | 0)) {
$$pre$phi$iZ2D = $133 + 1 | 0;
label = 35;
} else {
$137 = HEAP32[$115 >> 2] | 0;
$139 = $133 + 1 | 0;
__ZN13DynamicArrayPI13BasicMovementE6resizeEi($112, ($137 | 0) > ($133 | 0) ? $137 : $139 + ($133 >>> 1) | 0);
if ((HEAP32[$113 >> 2] | 0) <= ($133 | 0)) {
$$pre$phi$iZ2D = $139;
label = 35;
}
}
if ((label | 0) == 35) {
label = 0;
HEAP32[$113 >> 2] = $$pre$phi$iZ2D;
}
HEAP32[(HEAP32[$112 >> 2] | 0) + ($133 << 2) >> 2] = $125;
}
} while (0);
$$0313413 = $$0313413 + 1 | 0;
$120 = HEAP32[$49 >> 2] | 0;
} while (($$0313413 | 0) < ($120 | 0));
$$pre$phi421Z2D = $112;
$$pre$phi425Z2D = $113;
$$pre$phiZ2D = $112;
} else {
$$pre = $103 + 528 | 0;
$$pre$phi421Z2D = $$pre;
$$pre$phi425Z2D = $103 + 540 | 0;
$$pre$phiZ2D = $$pre;
}
switch (HEAP32[$$pre$phi425Z2D >> 2] | 0) {
case 0:
{
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$103 >> 2] | 0) + 4 >> 2] & 255]($103);
$$0308$ph = $$0$i;
label = 166;
break L20;
break;
}
case 1:
{
$152 = HEAP32[HEAP32[$$pre$phiZ2D >> 2] >> 2] | 0;
HEAP32[$1 >> 2] = $152;
$153 = $103 + 52 | 0;
$154 = $152 + 52 | 0;
$157 = Math_fround(HEAPF32[$153 >> 2]) < Math_fround(HEAPF32[$154 >> 2]);
HEAP32[$154 >> 2] = HEAP32[($157 ? $154 : $153) >> 2];
$160 = $103 + 40 | 0;
$161 = $152 + 40 | 0;
$164 = Math_fround(HEAPF32[$160 >> 2]) < Math_fround(HEAPF32[$161 >> 2]);
HEAP32[$161 >> 2] = HEAP32[($164 ? $161 : $160) >> 2];
$169 = $152 + 56 | 0;
$171 = Math_fround(Math_fround(HEAPF32[$103 + 56 >> 2]) * Math_fround(HEAPF32[$169 >> 2]));
HEAPF32[$169 >> 2] = $171;
if ((HEAP32[$103 + 536 >> 2] | 0) <= 0) {
$176 = HEAP32[$103 + 532 >> 2] | 0;
__ZN13DynamicArrayPI13BasicMovementE6resizeEi($$pre$phi421Z2D, ($176 | 0) > 1 ? $176 : 1);
}
if ((HEAP32[$$pre$phi425Z2D >> 2] | 0) <= 0) HEAP32[$$pre$phi425Z2D >> 2] = 1;
HEAP32[HEAP32[$$pre$phiZ2D >> 2] >> 2] = 0;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$103 >> 2] | 0) + 4 >> 2] & 255]($103);
$$0308$ph = $$0$i;
label = 166;
break L20;
break;
}
default:
{
HEAP32[$1 >> 2] = $103;
$564 = $103;
label = 171;
break L20;
}
}
break;
}
case 20:
{
$184 = __Znwj(580) | 0;
__THREW__ = 0;
invoke_viii(89, $184 | 0, 6, $$0$i | 0);
$185 = __THREW__;
__THREW__ = 0;
if ($185 & 1) {
$207 = ___cxa_find_matching_catch_2() | 0;
$208 = tempRet0;
__ZdlPv($184);
$$1 = $207;
$$1311 = $208;
label = 175;
break L20;
}
$187 = $184 + 532 | 0;
HEAP32[$187 >> 2] = 10;
$188 = $184 + 540 | 0;
HEAP32[$188 >> 2] = 0;
$189 = $184 + 528 | 0;
HEAP32[$189 >> 2] = 0;
$190 = $184 + 536 | 0;
HEAP32[$190 >> 2] = 0;
HEAP32[$184 >> 2] = 3068;
HEAP16[$184 + 544 >> 1] = 0;
HEAPF32[$184 + 548 >> 2] = Math_fround(0.0);
HEAPF32[$184 + 552 >> 2] = Math_fround(0.0);
HEAP16[$184 + 556 >> 1] = 0;
HEAPF32[$184 + 576 >> 2] = Math_fround(0.0);
HEAP32[$184 + 564 >> 2] = 10;
HEAP32[$184 + 572 >> 2] = 0;
HEAP32[$184 + 560 >> 2] = 0;
HEAP32[$184 + 568 >> 2] = 0;
__ZN13BasicMovement23setBaseMotionAttributesERK16MotionAttributes($184, $8);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$184 >> 2] | 0) + 16 >> 2] & 255]($184, $8);
$203 = HEAP32[$49 >> 2] | 0;
if (($203 | 0) > 0) {
$205 = HEAP16[$5 >> 1] | 0;
$$0314414 = 0;
$210 = $203;
do {
HEAP32[$7 >> 2] = 0;
if (($210 | 0) > ($$0314414 | 0)) $214 = HEAP32[(HEAP32[$48 >> 2] | 0) + ($$0314414 << 2) >> 2] | 0; else $214 = 0;
HEAP16[$13 >> 1] = $205;
HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$13 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$13 + 1 >> 0] | 0;
__Z21SingleMovementFromXMLPK7GestureRP13BasicMovementP7XMLCellbb9Mirroring8Location($0, $7, $214, $3, $$0$off0, $tmpcast$byval_copy, $6);
$215 = HEAP32[$7 >> 2] | 0;
do if ($215 | 0) {
if ((HEAP32[$215 + 4 >> 2] | 0) == 10) {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$215 >> 2] | 0) + 4 >> 2] & 255]($215);
HEAP32[$7 >> 2] = 0;
break;
}
$223 = HEAP32[$188 >> 2] | 0;
if (($223 | 0) >= 0) {
if ((HEAP32[$190 >> 2] | 0) > ($223 | 0)) {
$$pre$phi$i348Z2D = $223 + 1 | 0;
label = 60;
} else {
$227 = HEAP32[$187 >> 2] | 0;
$229 = $223 + 1 | 0;
__ZN13DynamicArrayPI13BasicMovementE6resizeEi($189, ($227 | 0) > ($223 | 0) ? $227 : $229 + ($223 >>> 1) | 0);
if ((HEAP32[$188 >> 2] | 0) <= ($223 | 0)) {
$$pre$phi$i348Z2D = $229;
label = 60;
}
}
if ((label | 0) == 60) {
label = 0;
HEAP32[$188 >> 2] = $$pre$phi$i348Z2D;
}
HEAP32[(HEAP32[$189 >> 2] | 0) + ($223 << 2) >> 2] = $215;
}
} while (0);
$$0314414 = $$0314414 + 1 | 0;
$210 = HEAP32[$49 >> 2] | 0;
} while (($$0314414 | 0) < ($210 | 0));
$$pre$phi427Z2D = $189;
} else $$pre$phi427Z2D = $189;
switch (HEAP32[$188 >> 2] | 0) {
case 0:
{
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$184 >> 2] | 0) + 4 >> 2] & 255]($184);
$$0308$ph = $$0$i;
label = 166;
break L20;
break;
}
case 1:
{
$242 = HEAP32[HEAP32[$189 >> 2] >> 2] | 0;
HEAP32[$1 >> 2] = $242;
$243 = $184 + 52 | 0;
$244 = $242 + 52 | 0;
$247 = Math_fround(HEAPF32[$243 >> 2]) < Math_fround(HEAPF32[$244 >> 2]);
HEAP32[$244 >> 2] = HEAP32[($247 ? $244 : $243) >> 2];
$250 = $184 + 40 | 0;
$251 = $242 + 40 | 0;
$254 = Math_fround(HEAPF32[$250 >> 2]) < Math_fround(HEAPF32[$251 >> 2]);
HEAP32[$251 >> 2] = HEAP32[($254 ? $251 : $250) >> 2];
$259 = $242 + 56 | 0;
$261 = Math_fround(Math_fround(HEAPF32[$184 + 56 >> 2]) * Math_fround(HEAPF32[$259 >> 2]));
HEAPF32[$259 >> 2] = $261;
if ((HEAP32[$190 >> 2] | 0) <= 0) {
$264 = HEAP32[$187 >> 2] | 0;
__ZN13DynamicArrayPI13BasicMovementE6resizeEi($$pre$phi427Z2D, ($264 | 0) > 1 ? $264 : 1);
}
if ((HEAP32[$188 >> 2] | 0) <= 0) HEAP32[$188 >> 2] = 1;
HEAP32[HEAP32[$189 >> 2] >> 2] = 0;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$184 >> 2] | 0) + 4 >> 2] & 255]($184);
$$0308$ph = $$0$i;
label = 166;
break L20;
break;
}
default:
{
HEAP32[$1 >> 2] = $184;
if (!0) break L20;
$275 = +Math_fround(HEAPF32[$8 + 208 >> 2]);
$278 = +Math_fround(HEAPF32[$184 + 52 >> 2]);
$281 = +Math_fround(HEAPF32[$184 + 40 >> 2]);
HEAPF64[$vararg_buffer11 >> 3] = $275;
HEAPF64[$vararg_buffer11 + 8 >> 3] = $278;
HEAPF64[$vararg_buffer11 + 16 >> 3] = $281;
__Z7eprintfPKcz(48045, $vararg_buffer11);
$$0308$ph = $$0$i;
label = 166;
break L20;
}
}
break;
}
case 21:
{
if (!$50) {
$$0308$ph = $$0$i;
label = 166;
} else {
if ((HEAP32[$49 >> 2] | 0) > 0) {
$286 = HEAP32[HEAP32[$48 >> 2] >> 2] | 0;
if (!$286) {
$292 = 0;
$307 = 0;
} else {
$292 = ((__ZN5SiGML14convertElementEPKc(HEAP32[$286 >> 2] | 0) | 0) + -18 | 0) >>> 0 < 13;
$307 = $286;
}
} else {
$292 = 0;
$307 = 0;
}
$291 = $292 & 1;
$293 = __ZNK7Gesture12CloneGestureEs($0, 1) | 0;
switch ($trunc & 7) {
case 1:
{
$$sink333 = 4;
label = 77;
break;
}
case 2:
{
$$sink333 = 8;
label = 77;
break;
}
default:
{}
}
if ((label | 0) == 77) {
$294 = $293 + 13 | 0;
HEAP8[$294 >> 0] = HEAP8[$294 >> 0] & -14 | $$sink333;
HEAP8[$293 + 14 >> 0] = HEAP8[72162] | 0;
}
$300 = __Z20StaticGestureFromXMLP7GestureP13DynamicArrayPI7XMLCellEi($293, $48, $291) | 0;
if (($300 | 0) < ($50 | 0)) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer16 >> 2] = HEAP32[HEAP32[(HEAP32[$48 >> 2] | 0) + ($300 << 2) >> 2] >> 2];
HEAP32[$vararg_buffer16 + 4 >> 2] = $43;
__Z7eprintfPKcz(48121, $vararg_buffer16);
__Z8BadSiGMLv();
}
L119 : do if (($307 | 0) == 0 | $292 ^ 1) $$1316$lcssa = 0; else {
$$1316418 = $307;
while (1) {
if ((__ZN5SiGML14convertElementEPKc(HEAP32[$$1316418 >> 2] | 0) | 0) != 21) {
$$1316$lcssa = $$1316418;
break L119;
}
$313 = HEAP32[$$1316418 + 8 >> 2] | 0;
if ((HEAP32[$313 + 12 >> 2] | 0) > 0) {
$318 = HEAP32[HEAP32[$313 >> 2] >> 2] | 0;
if (!$318) {
$324 = 0;
$332 = 0;
} else {
$324 = ((__ZN5SiGML14convertElementEPKc(HEAP32[$318 >> 2] | 0) | 0) + -18 | 0) >>> 0 < 13;
$332 = $318;
}
} else {
$324 = 0;
$332 = 0;
}
$$335 = $324 ? $313 : 0;
$325 = __Z20StaticGestureFromXMLP7GestureP13DynamicArrayPI7XMLCellEi($293, $$335, $324 & 1) | 0;
if (($325 | 0) < ($50 | 0)) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer20 >> 2] = HEAP32[HEAP32[(HEAP32[$$335 >> 2] | 0) + ($325 << 2) >> 2] >> 2];
HEAP32[$vararg_buffer20 + 4 >> 2] = $43;
__Z7eprintfPKcz(48121, $vararg_buffer20);
__Z8BadSiGMLv();
}
if (!$332) {
$$1316$lcssa = 0;
break;
} else $$1316418 = $332;
}
} while (0);
HEAP32[$7 >> 2] = 0;
HEAP16[$14 >> 1] = HEAP16[$5 >> 1] | 0;
HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$14 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$14 + 1 >> 0] | 0;
__Z21SingleMovementFromXMLPK7GestureRP13BasicMovementP7XMLCellbb9Mirroring8Location($0, $7, $$1316$lcssa, $3, $$0$off0, $tmpcast$byval_copy, $6);
$334 = __Znwj(536) | 0;
__THREW__ = 0;
invoke_viii(89, $334 | 0, 9, $$0$i | 0);
$335 = __THREW__;
__THREW__ = 0;
L131 : do if ($335 & 1) {
$351 = ___cxa_find_matching_catch_2() | 0;
$352 = tempRet0;
__ZdlPv($334);
$$0309 = $351;
$$0310 = $352;
} else {
HEAP32[$334 >> 2] = 2752;
HEAP32[$334 + 528 >> 2] = $293;
$338 = $334 + 532 | 0;
HEAP8[$338 >> 0] = 0;
__ZN13BasicMovement23setBaseMotionAttributesERK16MotionAttributes($334, $8);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$334 >> 2] | 0) + 16 >> 2] & 255]($334, $8);
HEAP8[$338 >> 0] = 1;
$342 = HEAP32[$7 >> 2] | 0;
$344 = $342;
do if (!$342) $$sink = $334; else {
if ((HEAP32[$342 + 4 >> 2] | 0) == 10) {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$342 >> 2] | 0) + 4 >> 2] & 255]($342);
HEAP32[$7 >> 2] = 0;
$$sink = $334;
break;
}
$353 = __Znwj(556) | 0;
__THREW__ = 0;
invoke_vii(174, $353 | 0, $$0$i | 0);
$354 = __THREW__;
__THREW__ = 0;
if ($354 & 1) {
$384 = ___cxa_find_matching_catch_2() | 0;
$385 = tempRet0;
__ZdlPv($353);
$$0309 = $384;
$$0310 = $385;
break L131;
}
$356 = $353 + 528 | 0;
$357 = $353 + 540 | 0;
$358 = HEAP32[$357 >> 2] | 0;
if (($358 | 0) < 0) $$sink = $353; else {
$360 = $353 + 536 | 0;
if ((HEAP32[$360 >> 2] | 0) > ($358 | 0)) {
$$pre$phi$i367Z2D = $358 + 1 | 0;
label = 98;
} else {
$364 = HEAP32[$353 + 532 >> 2] | 0;
$366 = $358 + 1 | 0;
__ZN13DynamicArrayPI13BasicMovementE6resizeEi($356, ($364 | 0) > ($358 | 0) ? $364 : $366 + ($358 >>> 1) | 0);
if ((HEAP32[$357 >> 2] | 0) <= ($358 | 0)) {
$$pre$phi$i367Z2D = $366;
label = 98;
}
}
if ((label | 0) == 98) HEAP32[$357 >> 2] = $$pre$phi$i367Z2D;
HEAP32[(HEAP32[$356 >> 2] | 0) + ($358 << 2) >> 2] = $344;
$$pr404 = HEAP32[$357 >> 2] | 0;
if (($$pr404 | 0) < 0) $$sink = $353; else {
if ((HEAP32[$360 >> 2] | 0) > ($$pr404 | 0)) {
$$pre$phi$i375Z2D = $$pr404 + 1 | 0;
label = 103;
} else {
$376 = HEAP32[$353 + 532 >> 2] | 0;
$378 = $$pr404 + 1 | 0;
__ZN13DynamicArrayPI13BasicMovementE6resizeEi($356, ($376 | 0) > ($$pr404 | 0) ? $376 : $378 + ($$pr404 >>> 1) | 0);
if ((HEAP32[$357 >> 2] | 0) <= ($$pr404 | 0)) {
$$pre$phi$i375Z2D = $378;
label = 103;
}
}
if ((label | 0) == 103) HEAP32[$357 >> 2] = $$pre$phi$i375Z2D;
HEAP32[(HEAP32[$356 >> 2] | 0) + ($$pr404 << 2) >> 2] = $334;
$$sink = $353;
}
}
} while (0);
HEAP32[$1 >> 2] = $$sink;
$$0308 = $$0$i;
$553 = $$sink;
label = 167;
break L20;
} while (0);
$$1 = $$0309;
$$1311 = $$0310;
label = 175;
}
break;
}
case 22:
{
if (($50 | 0) != 1) {
__Z7LogTimev() | 0;
if (!$50) {
HEAP32[$vararg_buffer24 >> 2] = $43;
__Z7eprintfPKcz(48185, $vararg_buffer24);
__Z8BadSiGMLv();
$$0308$ph = $$0$i;
label = 166;
break L20;
} else {
HEAP32[$vararg_buffer27 >> 2] = $43;
HEAP32[$vararg_buffer27 + 4 >> 2] = $50;
__Z7eprintfPKcz(48224, $vararg_buffer27);
__Z8BadSiGMLv();
$$0308$ph = $$0$i;
label = 166;
break L20;
}
}
if ((HEAP32[$49 >> 2] | 0) > 0) $393 = HEAP32[HEAP32[$48 >> 2] >> 2] | 0; else $393 = 0;
HEAP32[$7 >> 2] = 0;
HEAP16[$15 >> 1] = HEAP16[$5 >> 1] | 0;
HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$15 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$15 + 1 >> 0] | 0;
__Z21SingleMovementFromXMLPK7GestureRP13BasicMovementP7XMLCellbb9Mirroring8Location($0, $7, $393, $3, $$0$off0, $tmpcast$byval_copy, $6);
$394 = __Znwj(704) | 0;
__THREW__ = 0;
invoke_vii(175, $394 | 0, $$0$i | 0);
$395 = __THREW__;
__THREW__ = 0;
if ($395 & 1) {
$402 = ___cxa_find_matching_catch_2() | 0;
$403 = tempRet0;
__ZdlPv($394);
$$1 = $402;
$$1311 = $403;
label = 175;
break L20;
} else {
__ZN13BasicMovement23setBaseMotionAttributesERK16MotionAttributes($394, $8);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$394 >> 2] | 0) + 16 >> 2] & 255]($394, $8);
HEAP32[$394 + 696 >> 2] = HEAP32[$7 >> 2];
HEAP32[$1 >> 2] = $394;
$564 = $394;
label = 171;
break L20;
}
break;
}
case 23:
{
$404 = __Znwj(744) | 0;
__THREW__ = 0;
invoke_viii(89, $404 | 0, 1, $$0$i | 0);
$405 = __THREW__;
__THREW__ = 0;
if (!($405 & 1)) {
HEAP32[$404 >> 2] = 2164;
$407 = $404 + 528 | 0;
$408 = $404 + 600 | 0;
dest = $407;
stop = dest + 68 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP16[$407 + 68 >> 1] = 0;
__THREW__ = 0;
invoke_vi(98, $408 | 0);
$409 = __THREW__;
__THREW__ = 0;
if (!($409 & 1)) {
HEAPF32[$404 + 612 >> 2] = Math_fround(0.0);
__THREW__ = 0;
invoke_vi(98, $404 + 616 | 0);
$413 = __THREW__;
__THREW__ = 0;
if (!($413 & 1)) {
__THREW__ = 0;
invoke_vi(98, $404 + 628 | 0);
$416 = __THREW__;
__THREW__ = 0;
if (!($416 & 1)) {
HEAPF32[$404 + 640 >> 2] = Math_fround(0.0);
HEAP32[$404 + 644 >> 2] = 0;
__THREW__ = 0;
invoke_vi(98, $404 + 648 | 0);
$421 = __THREW__;
__THREW__ = 0;
if (!($421 & 1)) {
HEAPF32[$404 + 660 >> 2] = Math_fround(1.0);
HEAPF32[$404 + 664 >> 2] = Math_fround(1.0);
HEAPF32[$404 + 668 >> 2] = Math_fround(3.0);
__THREW__ = 0;
invoke_vi(98, $404 + 672 | 0);
$427 = __THREW__;
__THREW__ = 0;
if (!($427 & 1)) {
HEAPF32[$404 + 684 >> 2] = Math_fround(0.0);
__THREW__ = 0;
invoke_vi(98, $404 + 688 | 0);
$431 = __THREW__;
__THREW__ = 0;
if (!($431 & 1)) {
__THREW__ = 0;
invoke_vi(98, $404 + 700 | 0);
$434 = __THREW__;
__THREW__ = 0;
if (!($434 & 1)) {
HEAPF32[$404 + 712 >> 2] = Math_fround(0.0);
HEAP32[$404 + 716 >> 2] = 0;
__THREW__ = 0;
invoke_vi(98, $404 + 720 | 0);
$439 = __THREW__;
__THREW__ = 0;
if (!($439 & 1)) {
HEAPF32[$404 + 732 >> 2] = Math_fround(1.0);
HEAPF32[$404 + 736 >> 2] = Math_fround(1.0);
HEAPF32[$404 + 740 >> 2] = Math_fround(3.0);
__ZN13BasicMovement23setBaseMotionAttributesERK16MotionAttributes($404, $8);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$404 >> 2] | 0) + 16 >> 2] & 255]($404, $8);
HEAP32[$404 + 36 >> 2] = $6;
HEAP32[$1 >> 2] = $404;
$564 = $404;
label = 171;
break L20;
}
}
}
}
}
}
}
}
}
$448 = ___cxa_find_matching_catch_2() | 0;
$449 = tempRet0;
__ZdlPv($404);
$$1 = $448;
$$1311 = $449;
label = 175;
break;
}
case 24:
{
$450 = __Znwj(752) | 0;
__THREW__ = 0;
invoke_viii(89, $450 | 0, 2, $$0$i | 0);
$451 = __THREW__;
__THREW__ = 0;
if (!($451 & 1)) {
HEAP32[$450 >> 2] = 2264;
$453 = $450 + 528 | 0;
$454 = $450 + 568 | 0;
$455 = $450 + 616 | 0;
_memset($455 | 0, 0, 136) | 0;
dest = $453;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP16[$453 + 36 >> 1] = 0;
dest = $454;
stop = dest + 44 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP16[$454 + 44 >> 1] = 0;
__THREW__ = 0;
invoke_vi(98, $455 | 0);
$456 = __THREW__;
__THREW__ = 0;
if (!($456 & 1)) {
__THREW__ = 0;
invoke_vi(98, $450 + 628 | 0);
$459 = __THREW__;
__THREW__ = 0;
if (!($459 & 1)) {
__THREW__ = 0;
invoke_vi(98, $450 + 640 | 0);
$462 = __THREW__;
__THREW__ = 0;
if (!($462 & 1)) {
__THREW__ = 0;
invoke_vi(98, $450 + 652 | 0);
$465 = __THREW__;
__THREW__ = 0;
if (!($465 & 1)) {
__THREW__ = 0;
invoke_vi(98, $450 + 664 | 0);
$468 = __THREW__;
__THREW__ = 0;
if (!($468 & 1)) {
HEAPF32[$450 + 676 >> 2] = Math_fround(0.0);
HEAPF32[$450 + 680 >> 2] = Math_fround(0.0);
__THREW__ = 0;
invoke_vi(98, $450 + 684 | 0);
$473 = __THREW__;
__THREW__ = 0;
if (!($473 & 1)) {
__THREW__ = 0;
invoke_vi(98, $450 + 696 | 0);
$476 = __THREW__;
__THREW__ = 0;
if (!($476 & 1)) {
__THREW__ = 0;
invoke_vi(98, $450 + 708 | 0);
$479 = __THREW__;
__THREW__ = 0;
if (!($479 & 1)) {
__THREW__ = 0;
invoke_vi(98, $450 + 720 | 0);
$482 = __THREW__;
__THREW__ = 0;
if (!($482 & 1)) {
__THREW__ = 0;
invoke_vi(98, $450 + 732 | 0);
$485 = __THREW__;
__THREW__ = 0;
if (!($485 & 1)) {
HEAPF32[$450 + 744 >> 2] = Math_fround(0.0);
HEAPF32[$450 + 748 >> 2] = Math_fround(0.0);
HEAP32[$450 + 24 >> 2] = 4;
__ZN13BasicMovement23setBaseMotionAttributesERK16MotionAttributes($450, $8);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$450 >> 2] | 0) + 16 >> 2] & 255]($450, $8);
HEAP32[$450 + 36 >> 2] = $6;
HEAP32[$1 >> 2] = $450;
$564 = $450;
label = 171;
break L20;
}
}
}
}
}
}
}
}
}
}
}
$494 = ___cxa_find_matching_catch_2() | 0;
$495 = tempRet0;
__ZdlPv($450);
$$1 = $494;
$$1311 = $495;
label = 175;
break;
}
case 25:
{
$496 = __Znwj(560) | 0;
__THREW__ = 0;
invoke_viii(89, $496 | 0, 3, $$0$i | 0);
$497 = __THREW__;
__THREW__ = 0;
if (!($497 & 1)) {
HEAP32[$496 >> 2] = 2464;
HEAP32[$496 + 528 >> 2] = 0;
HEAPF32[$496 + 536 >> 2] = Math_fround(0.0);
HEAPF32[$496 + 540 >> 2] = Math_fround(0.0);
HEAPF32[$496 + 544 >> 2] = Math_fround(0.0);
__THREW__ = 0;
invoke_vi(98, $496 + 548 | 0);
$504 = __THREW__;
__THREW__ = 0;
if (!($504 & 1)) {
__ZN13BasicMovement23setBaseMotionAttributesERK16MotionAttributes($496, $8);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$496 >> 2] | 0) + 16 >> 2] & 255]($496, $8);
HEAP32[$1 >> 2] = $496;
$564 = $496;
label = 171;
break L20;
}
}
$509 = ___cxa_find_matching_catch_2() | 0;
$510 = tempRet0;
__ZdlPv($496);
$$1 = $509;
$$1311 = $510;
label = 175;
break;
}
case 26:
{
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer31 >> 2] = $43;
__Z7eprintfPKcz(48341, $vararg_buffer31);
__Z11UnimplSiGMLv();
$$0308$ph = $$0$i;
label = 166;
break;
}
case 27:
{
$511 = __Znwj(552) | 0;
__THREW__ = 0;
invoke_viii(89, $511 | 0, 4, $$0$i | 0);
$512 = __THREW__;
__THREW__ = 0;
if ($512 & 1) {
$518 = ___cxa_find_matching_catch_2() | 0;
$519 = tempRet0;
__ZdlPv($511);
$$1 = $518;
$$1311 = $519;
label = 175;
break L20;
} else {
HEAP32[$511 >> 2] = 2560;
$514 = $511 + 528 | 0;
HEAP32[$514 >> 2] = 0;
HEAP32[$514 + 4 >> 2] = 0;
HEAP32[$514 + 8 >> 2] = 0;
HEAP32[$514 + 12 >> 2] = 0;
HEAP32[$514 + 16 >> 2] = 0;
HEAP32[$514 + 20 >> 2] = 0;
__ZN13BasicMovement23setBaseMotionAttributesERK16MotionAttributes($511, $8);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$511 >> 2] | 0) + 16 >> 2] & 255]($511, $8);
HEAP32[$1 >> 2] = $511;
$564 = $511;
label = 171;
break L20;
}
break;
}
case 30:
case 28:
{
$$0308$ph = $$0$i;
label = 166;
break;
}
case 29:
{
if (($50 | 0) != 2) {
__Z7LogTimev() | 0;
if (!$50) {
HEAP32[$vararg_buffer34 >> 2] = $43;
__Z7eprintfPKcz(48185, $vararg_buffer34);
__Z8BadSiGMLv();
$$0308$ph = $$0$i;
label = 166;
break L20;
} else {
HEAP32[$vararg_buffer37 >> 2] = $43;
HEAP32[$vararg_buffer37 + 4 >> 2] = $50;
__Z7eprintfPKcz(48369, $vararg_buffer37);
__Z8BadSiGMLv();
$$0308$ph = $$0$i;
label = 166;
break L20;
}
}
$522 = HEAP32[$49 >> 2] | 0;
if (($522 | 0) > 0) {
$524 = HEAP32[$48 >> 2] | 0;
$525 = HEAP32[$524 >> 2] | 0;
if (($522 | 0) == 1) {
$530 = $525;
$551 = 0;
} else {
$530 = $525;
$551 = HEAP32[$524 + 4 >> 2] | 0;
}
} else {
$530 = 0;
$551 = 0;
}
if ((__ZN5SiGML14convertElementEPKc(HEAP32[$530 >> 2] | 0) | 0) != 9) {
$534 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 9) | 0;
$535 = HEAP32[$530 >> 2] | 0;
HEAP32[$vararg_buffer41 >> 2] = $43;
HEAP32[$vararg_buffer41 + 4 >> 2] = $534;
HEAP32[$vararg_buffer41 + 8 >> 2] = $535;
__Z7eprintfPKcz(48437, $vararg_buffer41);
$$0308$ph = $$0$i;
label = 166;
break L20;
}
$536 = __ZN7XMLCell13attrib_stringEPKc($530, 53037) | 0;
if (!$536) {
$539 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 9) | 0;
HEAP32[$vararg_buffer46 >> 2] = $539;
HEAP32[$vararg_buffer46 + 4 >> 2] = $43;
__Z7eprintfPKcz(48505, $vararg_buffer46);
$$0308$ph = $$0$i;
label = 166;
break L20;
}
if ((__ZNK21InvertibleStringArray14indexFromValueEPKc(HEAP32[17192] | 0, $536) | 0) != 13) {
$544 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 9) | 0;
$546 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17192] | 0, 13) | 0;
HEAP32[$vararg_buffer50 >> 2] = $544;
HEAP32[$vararg_buffer50 + 4 >> 2] = $43;
HEAP32[$vararg_buffer50 + 8 >> 2] = $546;
HEAP32[$vararg_buffer50 + 12 >> 2] = $536;
__Z7eprintfPKcz(48580, $vararg_buffer50);
$$0308$ph = $$0$i;
label = 166;
break L20;
}
if (0) {
$549 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17192] | 0, 13) | 0;
HEAP32[$vararg_buffer56 >> 2] = 13;
HEAP32[$vararg_buffer56 + 4 >> 2] = $549;
__Z7eprintfPKcz(48683, $vararg_buffer56);
}
HEAP16[$16 >> 1] = HEAP16[$5 >> 1] | 0;
HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$16 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$16 + 1 >> 0] | 0;
__Z21SingleMovementFromXMLPK7GestureRP13BasicMovementP7XMLCellbb9Mirroring8Location($0, $1, $551, $3, $$0$off0, $tmpcast$byval_copy, 13);
$$0308$ph = $$0$i;
label = 166;
break;
}
default:
{
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer60 >> 2] = $43;
__Z7eprintfPKcz(48743, $vararg_buffer60);
__Z8BadSiGMLv();
HEAP32[$1 >> 2] = 0;
}
} while (0);
if ((label | 0) == 166) {
$$0308 = $$0308$ph;
$553 = HEAP32[$1 >> 2] | 0;
label = 167;
}
do if ((label | 0) == 167) if (!$553) {
$554 = __Znwj(528) | 0;
__THREW__ = 0;
invoke_viii(89, $554 | 0, 10, $$0308 | 0);
$555 = __THREW__;
__THREW__ = 0;
if ($555 & 1) {
$560 = ___cxa_find_matching_catch_2() | 0;
$561 = tempRet0;
__ZdlPv($554);
$$1 = $560;
$$1311 = $561;
label = 175;
break;
} else {
HEAP32[$554 >> 2] = 2368;
__ZN13BasicMovement23setBaseMotionAttributesERK16MotionAttributes($554, $8);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$554 >> 2] | 0) + 16 >> 2] & 255]($554, $8);
HEAP32[$1 >> 2] = $554;
$564 = $554;
label = 171;
break;
}
} else {
$564 = $553;
label = 171;
} while (0);
if ((label | 0) == 171) {
if (0) {
$568 = +Math_fround(HEAPF32[$564 + 52 >> 2]);
$571 = +Math_fround(HEAPF32[$564 + 40 >> 2]);
HEAP32[$vararg_buffer63 >> 2] = HEAP32[$564 + 4 >> 2];
HEAPF64[$vararg_buffer63 + 8 >> 3] = $568;
HEAPF64[$vararg_buffer63 + 16 >> 3] = $571;
__Z7eprintfPKcz(48822, $vararg_buffer63);
}
} else if ((label | 0) == 175) {
$$2 = $$1;
$$2312 = $$1311;
___resumeException($$2 | 0);
}
STACKTOP = sp;
return;
}
function __ZN16AtomicTimedMorphC2EifffPKc($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = Math_fround($3);
$4 = Math_fround($4);
$5 = $5 | 0;
var $$0$i = 0, $$0$i$i = 0, $$0$i$i101 = 0, $$0$i$i104 = 0, $$0$i$i111 = 0, $$0$i$i116 = 0, $$0$i$i119 = 0, $$0$i$i127 = 0, $$0$i$i134 = 0, $$0$i$i137 = 0, $$0$i100 = 0, $$0$i107 = 0, $$0$i109 = 0, $$0$i114 = 0, $$0$i122 = 0, $$0$i124 = 0, $$0$i130 = 0, $$0$i140 = 0, $$0$i142 = 0, $$0$i145 = 0, $$03$i = 0, $$03$i155 = 0, $$03$i165 = 0, $$083174$in = 0, $$085$ = 0, $$085$$1 = 0, $$085$$2 = 0, $$085$$3 = 0, $$085$$4 = 0, $$085$$5 = 0, $$085$$6 = 0, $$086 = f0, $$087 = 0, $$089 = 0, $$092 = f0, $$194 = f0, $$2 = 0, $$291 = 0, $$95 = f0, $10 = 0, $100 = 0, $104 = 0, $105 = 0, $107 = f0, $110 = f0, $117 = 0, $118 = 0, $122 = f0, $123 = f0, $126 = 0, $127 = 0, $131 = f0, $132 = f0, $139 = 0, $140 = 0, $144 = 0, $145 = 0, $147 = 0, $148 = 0, $151 = 0, $153 = 0, $154 = 0, $157 = 0, $158 = 0, $16 = 0, $160 = 0, $17 = 0, $172 = 0, $174 = 0, $177 = 0, $179 = 0, $181 = 0, $182 = 0, $183 = 0, $186 = 0, $188 = 0, $189 = 0, $191 = 0, $193 = f0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $209 = 0, $21 = 0, $211 = 0, $212 = 0, $214 = 0, $216 = f0, $220 = 0, $221 = 0, $222 = 0, $225 = 0, $227 = 0, $228 = 0, $23 = f0, $230 = 0, $232 = f0, $236 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = f0, $247 = 0, $253 = 0, $255 = 0, $258 = 0, $26 = f0, $260 = 0, $263 = 0, $265 = 0, $266 = 0, $268 = 0, $269 = 0, $274 = 0, $276 = 0, $278 = f0, $279 = 0, $280 = f0, $281 = 0, $282 = f0, $283 = 0, $285 = 0, $286 = 0, $289 = 0, $290 = 0, $292 = 0, $293 = 0, $296 = 0, $297 = 0, $299 = 0, $300 = 0, $303 = 0, $304 = 0, $306 = 0, $307 = 0, $310 = 0, $311 = 0, $313 = 0, $314 = 0, $317 = 0, $318 = 0, $320 = 0, $321 = 0, $325 = 0, $326 = f0, $327 = f0, $33 = 0, $34 = 0, $38 = f0, $39 = f0, $42 = 0, $43 = 0, $47 = f0, $48 = f0, $53 = 0, $55 = 0, $58 = 0, $59 = 0, $6 = 0, $63 = 0, $64 = 0, $66 = f0, $69 = f0, $7 = 0, $76 = 0, $77 = 0, $8 = 0, $81 = f0, $82 = f0, $85 = 0, $86 = 0, $9 = 0, $90 = f0, $91 = f0, $96 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer52 = 0, $vararg_buffer55 = 0, $vararg_buffer7 = 0, label = 0, sp = 0, $$083174$in$looptemp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 208 | 0;
$vararg_buffer55 = sp + 152 | 0;
$vararg_buffer52 = sp + 144 | 0;
$vararg_buffer49 = sp + 136 | 0;
$vararg_buffer46 = sp + 128 | 0;
$vararg_buffer43 = sp + 120 | 0;
$vararg_buffer40 = sp + 112 | 0;
$vararg_buffer37 = sp + 104 | 0;
$vararg_buffer34 = sp + 96 | 0;
$vararg_buffer31 = sp + 88 | 0;
$vararg_buffer28 = sp + 80 | 0;
$vararg_buffer25 = sp + 72 | 0;
$vararg_buffer22 = sp + 64 | 0;
$vararg_buffer19 = sp + 56 | 0;
$vararg_buffer16 = sp + 48 | 0;
$vararg_buffer13 = sp + 40 | 0;
$vararg_buffer10 = sp + 32 | 0;
$vararg_buffer7 = sp + 24 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$6 = sp + 192 | 0;
$7 = sp + 188 | 0;
$8 = sp + 184 | 0;
$9 = sp + 156 | 0;
$10 = $0 + 4 | 0;
HEAP32[$10 >> 2] = 0;
HEAP32[$10 + 4 >> 2] = 0;
HEAP32[$10 + 8 >> 2] = 0;
HEAP32[$10 + 12 >> 2] = 0;
HEAP32[$0 + 20 >> 2] = 1;
HEAP32[$0 >> 2] = 1920;
HEAP32[$0 + 24 >> 2] = $1;
HEAPF32[$0 + 28 >> 2] = $2;
HEAPF32[$0 + 32 >> 2] = $3;
HEAPF32[$0 + 36 >> 2] = $4;
$16 = $0 + 48 | 0;
HEAP8[$16 >> 0] = 1;
$17 = $0 + 49 | 0;
HEAP8[$17 >> 0] = 0;
L1 : do switch (_strlen($5) | 0) {
case 5:
{
HEAP8[$16 >> 0] = 1;
$20 = HEAP8[$5 >> 0] | 0;
switch ($20 | 0) {
case 102:
{
$$0$i$i = 1;
break;
}
case 109:
{
$$0$i$i = 2;
break;
}
case 115:
{
$$0$i$i = 3;
break;
}
case 45:
{
$$0$i$i = 0;
break;
}
default:
{
__THREW__ = 0;
HEAP32[$vararg_buffer >> 2] = $20;
invoke_vii(115, 45732, $vararg_buffer | 0);
$21 = __THREW__;
__THREW__ = 0;
if ($21 & 1) break L1; else $$0$i$i = 0;
}
}
$23 = Math_fround(HEAPF32[16169]);
$26 = Math_fround($23 * Math_fround(HEAPF32[64808 + ($$0$i$i << 2) >> 2]));
switch (HEAP8[$5 + 1 >> 0] | 0) {
case 110:
{
$$0$i100 = 3;
break;
}
case 116:
{
$$0$i100 = 1;
break;
}
case 108:
{
$$0$i100 = 2;
break;
}
default:
$$0$i100 = 0;
}
HEAP32[$0 + 40 >> 2] = $$0$i100;
$33 = HEAP8[$5 + 2 >> 0] | 0;
switch ($33 | 0) {
case 102:
{
$$0$i$i101 = 1;
$39 = $23;
break;
}
case 109:
{
$$0$i$i101 = 2;
$39 = $23;
break;
}
case 115:
{
$$0$i$i101 = 3;
$39 = $23;
break;
}
case 45:
{
$$0$i$i101 = 0;
$39 = $23;
break;
}
default:
{
__THREW__ = 0;
HEAP32[$vararg_buffer1 >> 2] = $33;
invoke_vii(115, 45732, $vararg_buffer1 | 0);
$34 = __THREW__;
__THREW__ = 0;
if ($34 & 1) break L1;
$$0$i$i101 = 0;
$39 = Math_fround(HEAPF32[16169]);
}
}
$38 = Math_fround($39 * Math_fround(HEAPF32[64808 + ($$0$i$i101 << 2) >> 2]));
$42 = HEAP8[$5 + 3 >> 0] | 0;
switch ($42 | 0) {
case 102:
{
$$0$i$i104 = 1;
$48 = $39;
break;
}
case 109:
{
$$0$i$i104 = 2;
$48 = $39;
break;
}
case 115:
{
$$0$i$i104 = 3;
$48 = $39;
break;
}
case 45:
{
$$0$i$i104 = 0;
$48 = $39;
break;
}
default:
{
__THREW__ = 0;
HEAP32[$vararg_buffer4 >> 2] = $42;
invoke_vii(115, 45732, $vararg_buffer4 | 0);
$43 = __THREW__;
__THREW__ = 0;
if ($43 & 1) break L1;
$$0$i$i104 = 0;
$48 = Math_fround(HEAPF32[16169]);
}
}
$47 = Math_fround($48 * Math_fround(HEAPF32[64808 + ($$0$i$i104 << 2) >> 2]));
switch (HEAP8[$5 + 4 >> 0] | 0) {
case 110:
{
$$0$i107 = 3;
break;
}
case 116:
{
$$0$i107 = 1;
break;
}
case 108:
{
$$0$i107 = 2;
break;
}
default:
$$0$i107 = 0;
}
HEAP32[$0 + 44 >> 2] = $$0$i107;
$53 = $38 < Math_fround(0.0);
HEAP8[$17 >> 0] = $53 & 1;
if ($53) {
$$086 = $26;
$$092 = $47;
$$194 = Math_fround(2.0);
label = 173;
} else {
$$086 = $26;
$$092 = $47;
$$194 = $38;
label = 173;
}
break;
}
case 6:
{
$58 = HEAP8[$5 >> 0] | 0;
switch ($58 | 0) {
case 120:
{
$$0$i109 = 1;
break;
}
case 101:
{
$$0$i109 = 0;
break;
}
default:
{
__THREW__ = 0;
HEAP32[$vararg_buffer7 >> 2] = $58;
invoke_vii(115, 45779, $vararg_buffer7 | 0);
$59 = __THREW__;
__THREW__ = 0;
if ($59 & 1) break L1; else $$0$i109 = 1;
}
}
HEAP8[$16 >> 0] = $$0$i109;
$63 = HEAP8[$5 + 1 >> 0] | 0;
switch ($63 | 0) {
case 102:
{
$$0$i$i111 = 1;
break;
}
case 109:
{
$$0$i$i111 = 2;
break;
}
case 115:
{
$$0$i$i111 = 3;
break;
}
case 45:
{
$$0$i$i111 = 0;
break;
}
default:
{
__THREW__ = 0;
HEAP32[$vararg_buffer10 >> 2] = $63;
invoke_vii(115, 45732, $vararg_buffer10 | 0);
$64 = __THREW__;
__THREW__ = 0;
if ($64 & 1) break L1; else $$0$i$i111 = 0;
}
}
$66 = Math_fround(HEAPF32[16169]);
$69 = Math_fround($66 * Math_fround(HEAPF32[64808 + ($$0$i$i111 << 2) >> 2]));
switch (HEAP8[$5 + 2 >> 0] | 0) {
case 110:
{
$$0$i114 = 3;
break;
}
case 116:
{
$$0$i114 = 1;
break;
}
case 108:
{
$$0$i114 = 2;
break;
}
default:
$$0$i114 = 0;
}
HEAP32[$0 + 40 >> 2] = $$0$i114;
$76 = HEAP8[$5 + 3 >> 0] | 0;
switch ($76 | 0) {
case 102:
{
$$0$i$i116 = 1;
$82 = $66;
break;
}
case 109:
{
$$0$i$i116 = 2;
$82 = $66;
break;
}
case 115:
{
$$0$i$i116 = 3;
$82 = $66;
break;
}
case 45:
{
$$0$i$i116 = 0;
$82 = $66;
break;
}
default:
{
__THREW__ = 0;
HEAP32[$vararg_buffer13 >> 2] = $76;
invoke_vii(115, 45732, $vararg_buffer13 | 0);
$77 = __THREW__;
__THREW__ = 0;
if ($77 & 1) break L1;
$$0$i$i116 = 0;
$82 = Math_fround(HEAPF32[16169]);
}
}
$81 = Math_fround($82 * Math_fround(HEAPF32[64808 + ($$0$i$i116 << 2) >> 2]));
$85 = HEAP8[$5 + 4 >> 0] | 0;
switch ($85 | 0) {
case 102:
{
$$0$i$i119 = 1;
$91 = $82;
break;
}
case 109:
{
$$0$i$i119 = 2;
$91 = $82;
break;
}
case 115:
{
$$0$i$i119 = 3;
$91 = $82;
break;
}
case 45:
{
$$0$i$i119 = 0;
$91 = $82;
break;
}
default:
{
__THREW__ = 0;
HEAP32[$vararg_buffer16 >> 2] = $85;
invoke_vii(115, 45732, $vararg_buffer16 | 0);
$86 = __THREW__;
__THREW__ = 0;
if ($86 & 1) break L1;
$$0$i$i119 = 0;
$91 = Math_fround(HEAPF32[16169]);
}
}
$90 = Math_fround($91 * Math_fround(HEAPF32[64808 + ($$0$i$i119 << 2) >> 2]));
switch (HEAP8[$5 + 5 >> 0] | 0) {
case 110:
{
$$0$i122 = 3;
break;
}
case 116:
{
$$0$i122 = 1;
break;
}
case 108:
{
$$0$i122 = 2;
break;
}
default:
$$0$i122 = 0;
}
HEAP32[$0 + 44 >> 2] = $$0$i122;
$96 = $81 < Math_fround(0.0);
HEAP8[$17 >> 0] = $96 & 1;
if ($96) {
$$086 = $69;
$$092 = $90;
$$194 = Math_fround(2.0);
label = 173;
} else {
$$086 = $69;
$$092 = $90;
$$194 = $81;
label = 173;
}
break;
}
case 7:
{
$99 = HEAP8[$5 >> 0] | 0;
switch ($99 | 0) {
case 120:
{
$$0$i124 = 1;
break;
}
case 101:
{
$$0$i124 = 0;
break;
}
default:
{
__THREW__ = 0;
HEAP32[$vararg_buffer19 >> 2] = $99;
invoke_vii(115, 45779, $vararg_buffer19 | 0);
$100 = __THREW__;
__THREW__ = 0;
if ($100 & 1) break L1; else $$0$i124 = 1;
}
}
HEAP8[$16 >> 0] = $$0$i124;
$104 = HEAP8[$5 + 1 >> 0] | 0;
switch ($104 | 0) {
case 102:
{
$$0$i$i127 = 1;
break;
}
case 109:
{
$$0$i$i127 = 2;
break;
}
case 115:
{
$$0$i$i127 = 3;
break;
}
case 45:
{
$$0$i$i127 = 0;
break;
}
default:
{
__THREW__ = 0;
HEAP32[$vararg_buffer22 >> 2] = $104;
invoke_vii(115, 45732, $vararg_buffer22 | 0);
$105 = __THREW__;
__THREW__ = 0;
if ($105 & 1) break L1; else $$0$i$i127 = 0;
}
}
$107 = Math_fround(HEAPF32[16169]);
$110 = Math_fround($107 * Math_fround(HEAPF32[64808 + ($$0$i$i127 << 2) >> 2]));
switch (HEAP8[$5 + 2 >> 0] | 0) {
case 110:
{
$$0$i130 = 3;
break;
}
case 116:
{
$$0$i130 = 1;
break;
}
case 108:
{
$$0$i130 = 2;
break;
}
default:
$$0$i130 = 0;
}
HEAP32[$0 + 40 >> 2] = $$0$i130;
$117 = HEAP8[$5 + 3 >> 0] | 0;
switch ($117 | 0) {
case 102:
{
$$0$i$i134 = 1;
$123 = $107;
break;
}
case 109:
{
$$0$i$i134 = 2;
$123 = $107;
break;
}
case 115:
{
$$0$i$i134 = 3;
$123 = $107;
break;
}
case 45:
{
$$0$i$i134 = 0;
$123 = $107;
break;
}
default:
{
__THREW__ = 0;
HEAP32[$vararg_buffer25 >> 2] = $117;
invoke_vii(115, 45732, $vararg_buffer25 | 0);
$118 = __THREW__;
__THREW__ = 0;
if ($118 & 1) break L1;
$$0$i$i134 = 0;
$123 = Math_fround(HEAPF32[16169]);
}
}
$122 = Math_fround($123 * Math_fround(HEAPF32[64808 + ($$0$i$i134 << 2) >> 2]));
$126 = HEAP8[$5 + 4 >> 0] | 0;
switch ($126 | 0) {
case 102:
{
$$0$i$i137 = 1;
$132 = $123;
break;
}
case 109:
{
$$0$i$i137 = 2;
$132 = $123;
break;
}
case 115:
{
$$0$i$i137 = 3;
$132 = $123;
break;
}
case 45:
{
$$0$i$i137 = 0;
$132 = $123;
break;
}
default:
{
__THREW__ = 0;
HEAP32[$vararg_buffer28 >> 2] = $126;
invoke_vii(115, 45732, $vararg_buffer28 | 0);
$127 = __THREW__;
__THREW__ = 0;
if ($127 & 1) break L1;
$$0$i$i137 = 0;
$132 = Math_fround(HEAPF32[16169]);
}
}
$131 = Math_fround($132 * Math_fround(HEAPF32[64808 + ($$0$i$i137 << 2) >> 2]));
switch (HEAP8[$5 + 5 >> 0] | 0) {
case 110:
{
$$0$i140 = 3;
break;
}
case 116:
{
$$0$i140 = 1;
break;
}
case 108:
{
$$0$i140 = 2;
break;
}
default:
$$0$i140 = 0;
}
HEAP32[$0 + 44 >> 2] = $$0$i140;
$139 = HEAP8[$5 + 6 >> 0] | 0;
switch ($139 | 0) {
case 120:
{
$$0$i142 = 1;
break;
}
case 101:
{
$$0$i142 = 0;
break;
}
default:
{
__THREW__ = 0;
HEAP32[$vararg_buffer31 >> 2] = $139;
invoke_vii(115, 45779, $vararg_buffer31 | 0);
$140 = __THREW__;
__THREW__ = 0;
if ($140 & 1) break L1; else $$0$i142 = 0;
}
}
HEAP8[$17 >> 0] = $$0$i142 & 1;
$or$cond = $122 < Math_fround(0.0) & $$0$i142;
$$086 = $110;
$$092 = $131;
$$194 = $or$cond ? Math_fround(2.0) : $122;
label = 173;
break;
}
default:
{
__THREW__ = 0;
$144 = invoke_ii(27, $5 | 0) | 0;
$145 = __THREW__;
__THREW__ = 0;
if ($145 & 1) {
$151 = ___cxa_find_matching_catch_2() | 0;
$$2 = tempRet0;
$$291 = $151;
___resumeException($$291 | 0);
}
__THREW__ = 0;
$147 = invoke_ii(28, $144 | 0) | 0;
$148 = __THREW__;
__THREW__ = 0;
L7 : do if ($148 & 1) label = 98; else {
__THREW__ = 0;
$153 = invoke_ii(21, $147 | 0) | 0;
$154 = __THREW__;
__THREW__ = 0;
if ($154 & 1) label = 98; else {
HEAP32[$9 >> 2] = $153;
$$085$ = ($153 | 0) != 0 & 1;
__THREW__ = 0;
$157 = invoke_ii(28, $144 | 0) | 0;
$158 = __THREW__;
__THREW__ = 0;
if ($158 & 1) label = 98; else {
__THREW__ = 0;
$285 = invoke_ii(21, $157 | 0) | 0;
$286 = __THREW__;
__THREW__ = 0;
if ($286 & 1) label = 98; else {
$182 = $9 + 4 | 0;
HEAP32[$182 >> 2] = $285;
$$085$$1 = ($285 | 0) == 0 ? $$085$ : 2;
__THREW__ = 0;
$289 = invoke_ii(28, $144 | 0) | 0;
$290 = __THREW__;
__THREW__ = 0;
if ($290 & 1) label = 98; else {
__THREW__ = 0;
$292 = invoke_ii(21, $289 | 0) | 0;
$293 = __THREW__;
__THREW__ = 0;
if ($293 & 1) label = 98; else {
$198 = $9 + 8 | 0;
HEAP32[$198 >> 2] = $292;
$$085$$2 = ($292 | 0) == 0 ? $$085$$1 : 3;
__THREW__ = 0;
$296 = invoke_ii(28, $144 | 0) | 0;
$297 = __THREW__;
__THREW__ = 0;
if ($297 & 1) label = 98; else {
__THREW__ = 0;
$299 = invoke_ii(21, $296 | 0) | 0;
$300 = __THREW__;
__THREW__ = 0;
if ($300 & 1) label = 98; else {
$205 = $9 + 12 | 0;
HEAP32[$205 >> 2] = $299;
$$085$$3 = ($299 | 0) == 0 ? $$085$$2 : 4;
__THREW__ = 0;
$303 = invoke_ii(28, $144 | 0) | 0;
$304 = __THREW__;
__THREW__ = 0;
if ($304 & 1) label = 98; else {
__THREW__ = 0;
$306 = invoke_ii(21, $303 | 0) | 0;
$307 = __THREW__;
__THREW__ = 0;
if ($307 & 1) label = 98; else {
$221 = $9 + 16 | 0;
HEAP32[$221 >> 2] = $306;
$$085$$4 = ($306 | 0) == 0 ? $$085$$3 : 5;
__THREW__ = 0;
$310 = invoke_ii(28, $144 | 0) | 0;
$311 = __THREW__;
__THREW__ = 0;
if ($311 & 1) label = 98; else {
__THREW__ = 0;
$313 = invoke_ii(21, $310 | 0) | 0;
$314 = __THREW__;
__THREW__ = 0;
if ($314 & 1) label = 98; else {
$237 = $9 + 20 | 0;
HEAP32[$237 >> 2] = $313;
$$085$$5 = ($313 | 0) == 0 ? $$085$$4 : 6;
__THREW__ = 0;
$317 = invoke_ii(28, $144 | 0) | 0;
$318 = __THREW__;
__THREW__ = 0;
if ($318 & 1) label = 98; else {
__THREW__ = 0;
$320 = invoke_ii(21, $317 | 0) | 0;
$321 = __THREW__;
__THREW__ = 0;
if ($321 & 1) label = 98; else {
$244 = $9 + 24 | 0;
HEAP32[$244 >> 2] = $320;
$$085$$6 = ($320 | 0) == 0 ? $$085$$5 : 7;
L22 : do if (($$085$$6 | 0) < 6) {
if (($$085$$6 | 0) > 0) {
$$083174$in = $$085$$5;
do {
$$083174$in$looptemp = $$083174$in;
$$083174$in = $$083174$in + -1 | 0;
HEAP32[$9 + ($$083174$in$looptemp << 2) >> 2] = HEAP32[$9 + ($$083174$in << 2) >> 2];
} while (($$083174$in$looptemp | 0) > 1);
}
HEAP32[$9 >> 2] = 0;
$$0$i145 = 1;
$265 = 0;
$325 = 1;
label = 111;
} else if (!$153) {
$$0$i145 = 1;
$265 = 0;
$325 = 1;
label = 111;
} else {
if ((_strlen($153) | 0) != 1) {
if (!1) {
$$0$i145 = 1;
$265 = $153;
$325 = 0;
label = 111;
break;
}
__THREW__ = 0;
invoke_i(1) | 0;
$177 = __THREW__;
__THREW__ = 0;
if ($177 & 1) break;
__THREW__ = 0;
HEAP32[$vararg_buffer37 >> 2] = $153;
invoke_vii(115, 45827, $vararg_buffer37 | 0);
$179 = __THREW__;
__THREW__ = 0;
if ($179 & 1) break; else {
$$0$i145 = 1;
$265 = $153;
$325 = 0;
label = 111;
break;
}
}
switch (HEAP8[$153 >> 0] | 0) {
case 120:
{
$$0$i145 = 1;
$265 = $153;
$325 = 0;
label = 111;
break L22;
break;
}
case 101:
{
$$0$i145 = 0;
$265 = $153;
$325 = 0;
label = 111;
break L22;
break;
}
default:
{}
}
if (!1) {
$$0$i145 = 1;
$265 = $153;
$325 = 0;
label = 111;
break;
}
__THREW__ = 0;
invoke_i(1) | 0;
$172 = __THREW__;
__THREW__ = 0;
if ($172 & 1) break;
__THREW__ = 0;
HEAP32[$vararg_buffer34 >> 2] = $153;
invoke_vii(115, 45827, $vararg_buffer34 | 0);
$174 = __THREW__;
__THREW__ = 0;
if (!($174 & 1)) {
$$0$i145 = 1;
$265 = $153;
$325 = 0;
label = 111;
}
} while (0);
L40 : do if ((label | 0) == 111) {
HEAP8[$16 >> 0] = $$0$i145;
$181 = HEAP32[$182 >> 2] | 0;
$183 = ($181 | 0) == 0;
L42 : do if ($183) {
$$03$i155 = 2;
label = 121;
} else {
do if ((_strlen($181) | 0) == 1) {
$186 = HEAP8[$181 >> 0] | 0;
if (($186 + -48 & 255) <= 9) break;
$188 = $186 << 24 >> 24;
switch ($188 | 0) {
case 102:
{
$$03$i155 = 1;
label = 121;
break L42;
break;
}
case 109:
{
$$03$i155 = 2;
label = 121;
break L42;
break;
}
case 115:
{
$$03$i155 = 3;
label = 121;
break L42;
break;
}
case 45:
break;
default:
{
__THREW__ = 0;
HEAP32[$vararg_buffer40 >> 2] = $188;
invoke_vii(115, 45732, $vararg_buffer40 | 0);
$189 = __THREW__;
__THREW__ = 0;
if ($189 & 1) break L40;
}
}
HEAPF32[$7 >> 2] = Math_fround(0.0);
$326 = Math_fround(0.0);
break L42;
} while (0);
__THREW__ = 0;
invoke_iiii(19, 45891, $181 | 0, $7 | 0) | 0;
$191 = __THREW__;
__THREW__ = 0;
if ($191 & 1) break L40;
$326 = Math_fround(HEAPF32[$7 >> 2]);
} while (0);
if ((label | 0) == 121) {
HEAPF32[$7 >> 2] = Math_fround(0.0);
$193 = Math_fround(HEAPF32[16169]);
$326 = Math_fround($193 * Math_fround(HEAPF32[64808 + ($$03$i155 << 2) >> 2]));
}
$197 = HEAP32[$198 >> 2] | 0;
$199 = ($197 | 0) == 0;
L57 : do if ($199) $203 = 0; else switch (HEAP8[$197 >> 0] | 0) {
case 110:
{
$203 = 3;
break L57;
break;
}
case 116:
{
$203 = 1;
break L57;
break;
}
case 108:
{
$203 = 2;
break L57;
break;
}
default:
{
$203 = 0;
break L57;
}
} while (0);
HEAP32[$0 + 40 >> 2] = $203;
$204 = HEAP32[$205 >> 2] | 0;
$206 = ($204 | 0) == 0;
L64 : do if ($206) {
$$03$i165 = 2;
label = 137;
} else {
do if ((_strlen($204) | 0) == 1) {
$209 = HEAP8[$204 >> 0] | 0;
if (($209 + -48 & 255) <= 9) break;
$211 = $209 << 24 >> 24;
switch ($211 | 0) {
case 102:
{
$$03$i165 = 1;
label = 137;
break L64;
break;
}
case 109:
{
$$03$i165 = 2;
label = 137;
break L64;
break;
}
case 115:
{
$$03$i165 = 3;
label = 137;
break L64;
break;
}
case 45:
break;
default:
{
__THREW__ = 0;
HEAP32[$vararg_buffer43 >> 2] = $211;
invoke_vii(115, 45732, $vararg_buffer43 | 0);
$212 = __THREW__;
__THREW__ = 0;
if ($212 & 1) break L40;
}
}
HEAPF32[$6 >> 2] = Math_fround(0.0);
$246 = Math_fround(0.0);
break L64;
} while (0);
__THREW__ = 0;
invoke_iiii(19, 45891, $204 | 0, $6 | 0) | 0;
$214 = __THREW__;
__THREW__ = 0;
if ($214 & 1) break L40;
$246 = Math_fround(HEAPF32[$6 >> 2]);
} while (0);
if ((label | 0) == 137) {
HEAPF32[$6 >> 2] = Math_fround(0.0);
$216 = Math_fround(HEAPF32[16169]);
$246 = Math_fround($216 * Math_fround(HEAPF32[64808 + ($$03$i165 << 2) >> 2]));
}
$220 = HEAP32[$221 >> 2] | 0;
$222 = ($220 | 0) == 0;
L79 : do if ($222) {
$$03$i = 2;
label = 148;
} else {
do if ((_strlen($220) | 0) == 1) {
$225 = HEAP8[$220 >> 0] | 0;
if (($225 + -48 & 255) <= 9) break;
$227 = $225 << 24 >> 24;
switch ($227 | 0) {
case 102:
{
$$03$i = 1;
label = 148;
break L79;
break;
}
case 109:
{
$$03$i = 2;
label = 148;
break L79;
break;
}
case 115:
{
$$03$i = 3;
label = 148;
break L79;
break;
}
case 45:
break;
default:
{
__THREW__ = 0;
HEAP32[$vararg_buffer46 >> 2] = $227;
invoke_vii(115, 45732, $vararg_buffer46 | 0);
$228 = __THREW__;
__THREW__ = 0;
if ($228 & 1) break L40;
}
}
HEAPF32[$8 >> 2] = Math_fround(0.0);
$327 = Math_fround(0.0);
break L79;
} while (0);
__THREW__ = 0;
invoke_iiii(19, 45891, $220 | 0, $8 | 0) | 0;
$230 = __THREW__;
__THREW__ = 0;
if ($230 & 1) break L40;
$327 = Math_fround(HEAPF32[$8 >> 2]);
} while (0);
if ((label | 0) == 148) {
HEAPF32[$8 >> 2] = Math_fround(0.0);
$232 = Math_fround(HEAPF32[16169]);
$327 = Math_fround($232 * Math_fround(HEAPF32[64808 + ($$03$i << 2) >> 2]));
}
$236 = HEAP32[$237 >> 2] | 0;
$238 = ($236 | 0) == 0;
L94 : do if ($238) $242 = 0; else switch (HEAP8[$236 >> 0] | 0) {
case 110:
{
$242 = 3;
break L94;
break;
}
case 116:
{
$242 = 1;
break L94;
break;
}
case 108:
{
$242 = 2;
break L94;
break;
}
default:
{
$242 = 0;
break L94;
}
} while (0);
HEAP32[$0 + 44 >> 2] = $242;
$243 = HEAP32[$244 >> 2] | 0;
$245 = $246 < Math_fround(0.0);
$247 = ($243 | 0) == 0;
L101 : do if ($247) $$0$i = $245; else {
if ((_strlen($243) | 0) != 1) {
if (!1) {
$$0$i = $245;
break;
}
__THREW__ = 0;
invoke_i(1) | 0;
$258 = __THREW__;
__THREW__ = 0;
if ($258 & 1) break L40;
__THREW__ = 0;
HEAP32[$vararg_buffer52 >> 2] = $243;
invoke_vii(115, 45827, $vararg_buffer52 | 0);
$260 = __THREW__;
__THREW__ = 0;
if ($260 & 1) break L40; else {
$$0$i = $245;
break;
}
}
switch (HEAP8[$243 >> 0] | 0) {
case 120:
{
$$0$i = 1;
break L101;
break;
}
case 101:
{
$$0$i = 0;
break L101;
break;
}
default:
{}
}
if (!1) {
$$0$i = $245;
break;
}
__THREW__ = 0;
invoke_i(1) | 0;
$253 = __THREW__;
__THREW__ = 0;
if ($253 & 1) break L40;
__THREW__ = 0;
HEAP32[$vararg_buffer49 >> 2] = $243;
invoke_vii(115, 45827, $vararg_buffer49 | 0);
$255 = __THREW__;
__THREW__ = 0;
if ($255 & 1) break L40; else $$0$i = $245;
} while (0);
HEAP8[$17 >> 0] = $$0$i & 1;
if (!$325) {
_free($265);
HEAP32[$9 >> 2] = 0;
}
if (!$183) {
_free($181);
HEAP32[$182 >> 2] = 0;
}
if (!$199) {
_free($197);
HEAP32[$198 >> 2] = 0;
}
if (!$206) {
_free($204);
HEAP32[$205 >> 2] = 0;
}
if (!$222) {
_free($220);
HEAP32[$221 >> 2] = 0;
}
if (!$238) {
_free($236);
HEAP32[$237 >> 2] = 0;
}
if (!$247) {
_free($243);
HEAP32[$244 >> 2] = 0;
}
$$95 = $245 & $$0$i ? Math_fround(2.0) : $246;
do if ($144 | 0) {
__THREW__ = 0;
invoke_vi(97, $144 | 0);
$266 = __THREW__;
__THREW__ = 0;
if ($266 & 1) {
$268 = ___cxa_find_matching_catch_2() | 0;
$269 = tempRet0;
__ZdlPv($144);
$$087 = $269;
$$089 = $268;
break L7;
} else {
__ZdlPv($144);
break;
}
} while (0);
$$086 = $326;
$$092 = $327;
$$194 = $$95;
label = 173;
break L1;
} while (0);
$263 = ___cxa_find_matching_catch_2() | 0;
$$087 = tempRet0;
$$089 = $263;
}
}
}
}
}
}
}
}
}
}
}
}
}
} while (0);
if ((label | 0) == 98) {
$160 = ___cxa_find_matching_catch_2() | 0;
$$087 = tempRet0;
$$089 = $160;
}
$$2 = $$087;
$$291 = $$089;
___resumeException($$291 | 0);
}
} while (0);
if ((label | 0) == 173) {
if (HEAP8[$16 >> 0] | 0) {
HEAPF32[$10 >> 2] = Math_fround(0.0);
$278 = Math_fround($$086 + Math_fround(0.0));
$279 = $0 + 8 | 0;
HEAPF32[$279 >> 2] = $278;
$280 = Math_fround($$194 + $278);
$281 = $0 + 12 | 0;
HEAPF32[$281 >> 2] = $280;
$282 = Math_fround($$092 + $280);
$283 = $0 + 16 | 0;
HEAPF32[$283 >> 2] = $282;
STACKTOP = sp;
return;
}
if (HEAP8[$17 >> 0] | 0) {
HEAPF32[$10 >> 2] = Math_fround(0.0);
$278 = Math_fround($$086 + Math_fround(0.0));
$279 = $0 + 8 | 0;
HEAPF32[$279 >> 2] = $278;
$280 = Math_fround($$194 + $278);
$281 = $0 + 12 | 0;
HEAPF32[$281 >> 2] = $280;
$282 = Math_fround($$092 + $280);
$283 = $0 + 16 | 0;
HEAPF32[$283 >> 2] = $282;
STACKTOP = sp;
return;
}
HEAP8[$16 >> 0] = 1;
__THREW__ = 0;
invoke_i(1) | 0;
$274 = __THREW__;
__THREW__ = 0;
if (!($274 & 1)) {
__THREW__ = 0;
HEAP32[$vararg_buffer55 >> 2] = $5;
invoke_vii(115, 45914, $vararg_buffer55 | 0);
$276 = __THREW__;
__THREW__ = 0;
if (!($276 & 1)) {
HEAPF32[$10 >> 2] = Math_fround(0.0);
$278 = Math_fround($$086 + Math_fround(0.0));
$279 = $0 + 8 | 0;
HEAPF32[$279 >> 2] = $278;
$280 = Math_fround($$194 + $278);
$281 = $0 + 12 | 0;
HEAPF32[$281 >> 2] = $280;
$282 = Math_fround($$092 + $280);
$283 = $0 + 16 | 0;
HEAPF32[$283 >> 2] = $282;
STACKTOP = sp;
return;
}
}
}
$55 = ___cxa_find_matching_catch_2() | 0;
$$2 = tempRet0;
$$291 = $55;
___resumeException($$291 | 0);
}
function _animgen_lite_initialise($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0$i = 0, $$0$i92 = 0, $$035 = 0, $$04$i = 0, $$06$i = 0, $$06$i$i$i = 0, $$1 = 0, $$129 = 0, $$132 = 0, $$2 = 0, $$230 = 0, $$233 = 0, $$ph$i$i = 0, $$pre$i36$i$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $111 = 0, $114 = 0, $115 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $123 = 0, $124 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $130 = 0, $133 = 0, $135 = 0, $139 = 0, $140 = 0, $146 = 0, $148 = 0, $149 = 0, $15 = 0, $151 = 0, $153 = 0, $155 = 0, $157 = 0, $158 = 0, $160 = 0, $161 = 0, $164 = 0, $167 = 0, $169 = 0, $17 = 0, $171 = 0, $174 = 0, $176 = 0, $178 = 0, $180 = 0, $181 = 0, $184 = 0, $187 = 0, $189 = 0, $19 = 0, $192 = 0, $194 = 0, $196 = 0, $197 = 0, $199 = 0, $202 = 0, $205 = 0, $207 = 0, $209 = 0, $21 = 0, $214 = 0, $216 = 0, $217 = 0, $22 = 0, $222 = 0, $224 = 0, $225 = 0, $227 = 0, $229 = 0, $232 = 0, $235 = 0, $238 = 0, $24 = 0, $241 = 0, $244 = 0, $247 = 0, $250 = 0, $253 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $269 = 0, $271 = 0, $272 = 0, $274 = 0, $285 = 0, $292 = 0, $293 = 0, $295 = 0, $296 = 0, $298 = 0, $299 = 0, $304 = 0, $308 = 0, $310 = 0, $312 = 0, $313 = 0, $315 = 0, $318 = 0, $320 = 0, $321 = 0, $322 = 0, $324 = 0, $327 = 0, $329 = 0, $33 = 0, $331 = 0, $335 = 0, $337 = 0, $338 = 0, $339 = 0, $341 = 0, $342 = 0, $344 = 0, $349 = 0, $350 = 0, $352 = 0, $354 = 0, $356 = 0, $357 = 0, $36 = 0, $362 = 0, $365 = 0, $37 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $48 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $64 = 0, $66 = 0, $67 = 0, $69 = 0, $72 = 0, $74 = 0, $75 = 0, $77 = 0, $79 = 0, $80 = 0, $83 = 0, $84 = 0, $87 = 0, $9 = 0, $91 = 0, $96 = 0, $98 = 0, $eh$lpad$body$i$index47Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $eh$lpad$body$index41Z2D = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body96$index53Z2D = 0, $eh$lpad$body96$indexZ2D = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer2 = 0, $vararg_buffer22 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer33 = 0, $vararg_buffer37 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 144 | 0;
$vararg_buffer37 = sp + 104 | 0;
$vararg_buffer33 = sp + 96 | 0;
$vararg_buffer29 = sp + 88 | 0;
$vararg_buffer26 = sp + 80 | 0;
$vararg_buffer22 = sp + 72 | 0;
$vararg_buffer19 = sp + 64 | 0;
$vararg_buffer17 = sp + 56 | 0;
$vararg_buffer14 = sp + 48 | 0;
$vararg_buffer11 = sp + 40 | 0;
$vararg_buffer8 = sp + 32 | 0;
$vararg_buffer2 = sp + 8 | 0;
$vararg_buffer = sp;
$5 = sp + 108 | 0;
__THREW__ = 0;
invoke_v(5);
$6 = __THREW__;
__THREW__ = 0;
do if ($6 & 1) label = 6; else {
HEAP32[17850] = 0;
if (0) {
__THREW__ = 0;
$9 = invoke_i(2) | 0;
$10 = __THREW__;
__THREW__ = 0;
if ($10 & 1) {
label = 6;
break;
}
__THREW__ = 0;
$12 = invoke_i(3) | 0;
$13 = __THREW__;
__THREW__ = 0;
if ($13 & 1) {
label = 6;
break;
}
__THREW__ = 0;
HEAP32[$vararg_buffer >> 2] = $9;
HEAP32[$vararg_buffer + 4 >> 2] = $12;
invoke_vii(115, 57120, $vararg_buffer | 0);
$15 = __THREW__;
__THREW__ = 0;
if ($15 & 1) {
label = 6;
break;
}
}
__THREW__ = 0;
invoke_i(4) | 0;
$19 = __THREW__;
__THREW__ = 0;
if ($19 & 1) label = 6; else {
__THREW__ = 0;
$21 = invoke_ii(20, 12) | 0;
$22 = __THREW__;
__THREW__ = 0;
if ($22 & 1) label = 6; else {
__THREW__ = 0;
invoke_vi(154, $21 | 0);
$24 = __THREW__;
__THREW__ = 0;
if ($24 & 1) {
$36 = ___cxa_find_matching_catch_5(232, 32, 0) | 0;
$37 = tempRet0;
__ZdlPv($21);
$$230 = $36;
$$233 = $37;
break;
}
HEAP32[17860] = $21;
__THREW__ = 0;
invoke_vi(155, $21 | 0);
$26 = __THREW__;
__THREW__ = 0;
if ($26 & 1) label = 6; else {
HEAP32[17861] = $0;
HEAP32[$5 >> 2] = 57139;
HEAP32[$5 + 4 >> 2] = $1;
HEAP32[$5 + 8 >> 2] = 57147;
HEAP32[$5 + 12 >> 2] = 57158;
HEAP32[$5 + 16 >> 2] = 57162;
HEAP32[$5 + 20 >> 2] = $2;
$33 = $5 + 24 | 0;
HEAP32[$33 >> 2] = 0;
HEAP32[$5 + 28 >> 2] = 0;
HEAP32[$5 + 32 >> 2] = 0;
if ($3) {
HEAP32[$33 >> 2] = 57165;
$$035 = 7;
} else $$035 = 6;
if ($4) HEAP32[$5 + ($$035 << 2) >> 2] = 57176;
__THREW__ = 0;
invoke_iii(35, HEAP32[17860] | 0, $5 | 0) | 0;
$40 = __THREW__;
__THREW__ = 0;
L20 : do if ($40 & 1) label = 33; else {
$42 = HEAP32[17860] | 0;
__THREW__ = 0;
$43 = invoke_iii(36, $42 | 0, 57183) | 0;
$44 = __THREW__;
__THREW__ = 0;
if ($44 & 1) label = 33; else {
HEAP32[16082] = $43 ? 0 : HEAP32[1832] | 0;
__THREW__ = 0;
HEAP32[$vararg_buffer2 >> 2] = 57158;
HEAP32[$vararg_buffer2 + 4 >> 2] = 3;
HEAP32[$vararg_buffer2 + 8 >> 2] = 57189;
HEAP32[$vararg_buffer2 + 12 >> 2] = 0;
$48 = invoke_iiii(21, 0, 1, $vararg_buffer2 | 0) | 0;
$49 = __THREW__;
__THREW__ = 0;
if ($49 & 1) label = 33; else {
HEAP32[17862] = $48;
__THREW__ = 0;
$51 = invoke_iiii(22, $42 | 0, 57194, 0) | 0;
$52 = __THREW__;
__THREW__ = 0;
if ($52 & 1) label = 33; else {
__THREW__ = 0;
$54 = invoke_ii(21, $51 | 0) | 0;
$55 = __THREW__;
__THREW__ = 0;
if ($55 & 1) label = 33; else {
HEAP32[17863] = $54;
__THREW__ = 0;
$57 = invoke_iii(36, $42 | 0, 57196) | 0;
$58 = __THREW__;
__THREW__ = 0;
if ($58 & 1) label = 33; else {
$60 = HEAP32[17863] | 0;
do if (($60 | 0) != 0 & (HEAP32[16082] | 0) != 0) {
$64 = _fopen($60, $57 ? 57206 : 57208) | 0;
HEAP32[16082] = $64;
if (!$64) {
__THREW__ = 0;
HEAP32[$vararg_buffer11 >> 2] = HEAP32[17863];
invoke_vii(115, 57214, $vararg_buffer11 | 0);
$72 = __THREW__;
__THREW__ = 0;
if ($72 & 1) {
label = 33;
break L20;
} else break;
}
__THREW__ = 0;
$66 = invoke_i(2) | 0;
$67 = __THREW__;
__THREW__ = 0;
if ($67 & 1) {
label = 33;
break L20;
}
__THREW__ = 0;
HEAP32[$vararg_buffer8 >> 2] = $66;
invoke_vii(115, 57210, $vararg_buffer8 | 0);
$69 = __THREW__;
__THREW__ = 0;
if ($69 & 1) {
label = 33;
break L20;
}
} while (0);
__THREW__ = 0;
$74 = invoke_iiii(22, $42 | 0, 57271, 0) | 0;
$75 = __THREW__;
__THREW__ = 0;
if ($75 & 1) label = 33; else {
HEAP32[17864] = $74;
__THREW__ = 0;
invoke_iii(36, $42 | 0, 57278) | 0;
$77 = __THREW__;
__THREW__ = 0;
if ($77 & 1) label = 33; else {
__THREW__ = 0;
$79 = invoke_iii(36, $42 | 0, 57284) | 0;
$80 = __THREW__;
__THREW__ = 0;
if ($80 & 1) label = 33; else {
HEAP8[72309] = $79 & 1;
__THREW__ = 0;
$83 = invoke_iii(36, $42 | 0, 57291) | 0;
$84 = __THREW__;
__THREW__ = 0;
if ($84 & 1) {
label = 33;
break;
}
HEAP8[72310] = $83 & 1;
__THREW__ = 0;
invoke_iii(36, $42 | 0, 57298) | 0;
$87 = __THREW__;
__THREW__ = 0;
if ($87 & 1) {
label = 33;
break;
}
L39 : do if (!(HEAP32[17850] | 0)) {
if (0) {
__THREW__ = 0;
invoke_vii(186, HEAP32[17860] | 0, HEAP32[16082] | 0);
$96 = __THREW__;
__THREW__ = 0;
if ($96 & 1) {
label = 33;
break L20;
}
}
__THREW__ = 0;
invoke_v(6);
$98 = __THREW__;
__THREW__ = 0;
if ($98 & 1) {
label = 33;
break L20;
}
__THREW__ = 0;
invoke_v(7);
$100 = __THREW__;
__THREW__ = 0;
if ($100 & 1) {
label = 33;
break L20;
}
__THREW__ = 0;
invoke_v(8);
$102 = __THREW__;
__THREW__ = 0;
if ($102 & 1) {
label = 33;
break L20;
}
__THREW__ = 0;
invoke_v(9);
$104 = __THREW__;
__THREW__ = 0;
if ($104 & 1) {
label = 33;
break L20;
}
__THREW__ = 0;
invoke_v(10);
$106 = __THREW__;
__THREW__ = 0;
if ($106 & 1) {
label = 33;
break L20;
}
__THREW__ = 0;
invoke_v(11);
$108 = __THREW__;
__THREW__ = 0;
if ($108 & 1) {
label = 33;
break L20;
}
__THREW__ = 0;
$110 = invoke_ii(20, 16) | 0;
$111 = __THREW__;
__THREW__ = 0;
if ($111 & 1) {
label = 33;
break L20;
}
HEAP32[$110 + 4 >> 2] = 10;
$114 = $110 + 12 | 0;
HEAP32[$114 >> 2] = 0;
$115 = $110 + 8 | 0;
HEAP32[$115 >> 2] = 2;
$116 = _malloc(8) | 0;
HEAP32[$110 >> 2] = $116;
if (!$116) {
__THREW__ = 0;
HEAP32[$vararg_buffer14 >> 2] = 2;
invoke_vii(115, 57303, $vararg_buffer14 | 0);
$118 = __THREW__;
__THREW__ = 0;
if (!($118 & 1)) {
HEAP32[$115 >> 2] = 0;
$120 = ___cxa_allocate_exception(4) | 0;
HEAP32[$120 >> 2] = 1;
__THREW__ = 0;
invoke_viii(75, $120 | 0, 32, 0);
__THREW__ = 0;
}
$196 = ___cxa_find_matching_catch_5(232, 32, 0) | 0;
$197 = tempRet0;
__ZdlPv($110);
$eh$lpad$body$index41Z2D = $197;
$eh$lpad$body$indexZ2D = $196;
label = 34;
break L20;
}
HEAP32[$116 >> 2] = 0;
$122 = $116 + 4 | 0;
HEAP32[$122 >> 2] = 0;
$123 = HEAP32[17861] | 0;
$124 = HEAP32[$123 >> 2] | 0;
HEAP32[$114 >> 2] = 1;
HEAP32[$116 >> 2] = $124;
$126 = HEAP32[$123 + 4 >> 2] | 0;
HEAP32[$114 >> 2] = 2;
HEAP32[$122 >> 2] = $126;
__THREW__ = 0;
$127 = invoke_ii(33, $110 | 0) | 0;
$128 = __THREW__;
__THREW__ = 0;
if ($128 & 1) {
label = 33;
break L20;
}
HEAP32[16168] = $127;
$130 = HEAP32[$114 >> 2] | 0;
do if (($130 | 0) < 1) {
HEAP32[$114 >> 2] = 0;
$$ph$i$i = HEAP32[$110 >> 2] | 0;
label = 51;
} else {
$133 = HEAP32[$110 >> 2] | 0;
HEAP32[$114 >> 2] = $130 + -1;
if (($130 | 0) == 1) {
$$ph$i$i = $133;
label = 51;
break;
}
$135 = $130 + -2 | 0;
HEAP32[$114 >> 2] = $135;
if (($130 | 0) > 2 & ($133 | 0) != 0) {
$$06$i$i$i = 0;
$139 = $133;
$365 = $135;
} else {
$148 = $133;
break;
}
while (1) {
$140 = HEAP32[$139 + ($$06$i$i$i << 2) >> 2] | 0;
if (!$140) {
$$pre$i36$i$i = $139;
$146 = $365;
} else {
_free($140);
HEAP32[(HEAP32[$110 >> 2] | 0) + ($$06$i$i$i << 2) >> 2] = 0;
$$pre$i36$i$i = HEAP32[$110 >> 2] | 0;
$146 = HEAP32[$114 >> 2] | 0;
}
$$06$i$i$i = $$06$i$i$i + 1 | 0;
if (($$06$i$i$i | 0) >= ($146 | 0)) {
$148 = $$pre$i36$i$i;
break;
} else {
$139 = $$pre$i36$i$i;
$365 = $146;
}
}
} while (0);
if ((label | 0) == 51) {
HEAP32[$114 >> 2] = 0;
$148 = $$ph$i$i;
}
if ($148 | 0) _free($148);
__ZdlPv($110);
$149 = HEAP32[16168] | 0;
if (!$149) {
__THREW__ = 0;
invoke_i(1) | 0;
$151 = __THREW__;
__THREW__ = 0;
if ($151 & 1) {
label = 33;
break L20;
}
__THREW__ = 0;
invoke_vii(115, 57356, $vararg_buffer17 | 0);
$153 = __THREW__;
__THREW__ = 0;
if ($153 & 1) {
label = 33;
break L20;
}
$155 = ___cxa_allocate_exception(4) | 0;
HEAP32[$155 >> 2] = 10;
__THREW__ = 0;
invoke_viii(75, $155 | 0, 232, 0);
__THREW__ = 0;
label = 33;
break L20;
}
__THREW__ = 0;
$157 = invoke_iii(21, $149 | 0, 57404) | 0;
$158 = __THREW__;
__THREW__ = 0;
if ($158 & 1) {
label = 33;
break L20;
}
__THREW__ = 0;
$160 = invoke_iii(33, $157 | 0, 57412) | 0;
$161 = __THREW__;
__THREW__ = 0;
if ($161 & 1) {
label = 33;
break L20;
}
if (!$160) {
__THREW__ = 0;
invoke_i(1) | 0;
$164 = __THREW__;
__THREW__ = 0;
if ($164 & 1) {
label = 33;
break L20;
}
__THREW__ = 0;
HEAP32[$vararg_buffer19 >> 2] = HEAP32[865];
invoke_vii(115, 57420, $vararg_buffer19 | 0);
$167 = __THREW__;
__THREW__ = 0;
if ($167 & 1) {
label = 33;
break L20;
}
$169 = ___cxa_allocate_exception(4) | 0;
HEAP32[$169 >> 2] = 11;
__THREW__ = 0;
invoke_viii(75, $169 | 0, 232, 0);
__THREW__ = 0;
label = 33;
break L20;
}
$171 = HEAP32[865] | 0;
if (_strcmp($171, $160) | 0) {
__THREW__ = 0;
invoke_i(1) | 0;
$174 = __THREW__;
__THREW__ = 0;
if ($174 & 1) {
label = 33;
break L20;
}
__THREW__ = 0;
HEAP32[$vararg_buffer22 >> 2] = $160;
HEAP32[$vararg_buffer22 + 4 >> 2] = $171;
invoke_vii(115, 57493, $vararg_buffer22 | 0);
$176 = __THREW__;
__THREW__ = 0;
if ($176 & 1) {
label = 33;
break L20;
}
$178 = ___cxa_allocate_exception(4) | 0;
HEAP32[$178 >> 2] = 11;
__THREW__ = 0;
invoke_viii(75, $178 | 0, 232, 0);
__THREW__ = 0;
label = 33;
break L20;
}
__THREW__ = 0;
$180 = invoke_iii(33, $157 | 0, 57565) | 0;
$181 = __THREW__;
__THREW__ = 0;
if ($181 & 1) {
label = 33;
break L20;
}
do if (!$180) {
__THREW__ = 0;
invoke_i(1) | 0;
$184 = __THREW__;
__THREW__ = 0;
if ($184 & 1) {
label = 33;
break L20;
}
__THREW__ = 0;
HEAP32[$vararg_buffer26 >> 2] = HEAP32[865];
invoke_vii(115, 57573, $vararg_buffer26 | 0);
$187 = __THREW__;
__THREW__ = 0;
if ($187 & 1) {
label = 33;
break L20;
}
} else {
$189 = HEAP32[865] | 0;
if (!(_strcmp($189, $180) | 0)) break;
__THREW__ = 0;
invoke_i(1) | 0;
$192 = __THREW__;
__THREW__ = 0;
if ($192 & 1) {
label = 33;
break L20;
}
__THREW__ = 0;
HEAP32[$vararg_buffer29 >> 2] = $180;
HEAP32[$vararg_buffer29 + 4 >> 2] = $189;
invoke_vii(115, 57641, $vararg_buffer29 | 0);
$194 = __THREW__;
__THREW__ = 0;
if ($194 & 1) {
label = 33;
break L20;
}
} while (0);
__THREW__ = 0;
invoke_vi(156, HEAP32[16168] | 0);
$199 = __THREW__;
__THREW__ = 0;
if ($199 & 1) {
label = 33;
break L20;
}
__THREW__ = 0;
invoke_vi(157, HEAP32[16168] | 0);
$202 = __THREW__;
__THREW__ = 0;
if ($202 & 1) {
label = 33;
break L20;
}
__THREW__ = 0;
invoke_vi(158, HEAP32[16168] | 0);
$205 = __THREW__;
__THREW__ = 0;
if ($205 & 1) {
label = 33;
break L20;
}
__THREW__ = 0;
invoke_v(12);
$207 = __THREW__;
__THREW__ = 0;
if ($207 & 1) {
label = 33;
break L20;
}
__THREW__ = 0;
invoke_v(13);
$209 = __THREW__;
__THREW__ = 0;
if ($209 & 1) {
label = 33;
break L20;
}
__THREW__ = 0;
invoke_vi(159, HEAP32[(HEAP32[17861] | 0) + 12 >> 2] | 0);
$214 = __THREW__;
__THREW__ = 0;
if ($214 & 1) {
label = 33;
break L20;
}
__THREW__ = 0;
$216 = invoke_ii(20, 40) | 0;
$217 = __THREW__;
__THREW__ = 0;
if ($217 & 1) {
label = 33;
break L20;
}
__THREW__ = 0;
invoke_viii(101, $216 | 0, HEAP32[(HEAP32[17861] | 0) + 8 >> 2] | 0, 0);
$222 = __THREW__;
__THREW__ = 0;
do if ($222 & 1) {
$255 = ___cxa_find_matching_catch_5(232, 32, 0) | 0;
$256 = tempRet0;
__ZdlPv($216);
$$0$i = $256;
$$06$i = $255;
} else {
__THREW__ = 0;
$224 = invoke_ii(20, 492) | 0;
$225 = __THREW__;
__THREW__ = 0;
if ($225 & 1) {
label = 33;
break L20;
}
__THREW__ = 0;
invoke_vii(187, $224 | 0, $216 | 0);
$227 = __THREW__;
__THREW__ = 0;
if ($227 & 1) {
$257 = ___cxa_find_matching_catch_5(232, 32, 0) | 0;
$258 = tempRet0;
__ZdlPv($224);
$$0$i = $258;
$$06$i = $257;
break;
}
HEAP32[17865] = $224;
__THREW__ = 0;
invoke_vi(160, $216 | 0);
$229 = __THREW__;
__THREW__ = 0;
if ($229 & 1) {
$259 = ___cxa_find_matching_catch_5(232, 32, 0) | 0;
$260 = tempRet0;
__ZdlPv($216);
$$0$i = $260;
$$06$i = $259;
break;
}
__ZdlPv($216);
__THREW__ = 0;
invoke_vi(161, HEAP32[17865] | 0);
$232 = __THREW__;
__THREW__ = 0;
if ($232 & 1) {
label = 33;
break L20;
}
__THREW__ = 0;
invoke_vi(162, HEAP32[17865] | 0);
$235 = __THREW__;
__THREW__ = 0;
if ($235 & 1) {
label = 33;
break L20;
}
__THREW__ = 0;
invoke_vi(163, HEAP32[17865] | 0);
$238 = __THREW__;
__THREW__ = 0;
if ($238 & 1) {
label = 33;
break L20;
}
__THREW__ = 0;
invoke_vi(164, HEAP32[17865] | 0);
$241 = __THREW__;
__THREW__ = 0;
if ($241 & 1) {
label = 33;
break L20;
}
__THREW__ = 0;
invoke_vi(165, HEAP32[17865] | 0);
$244 = __THREW__;
__THREW__ = 0;
if ($244 & 1) {
label = 33;
break L20;
}
__THREW__ = 0;
invoke_vi(166, HEAP32[17865] | 0);
$247 = __THREW__;
__THREW__ = 0;
if ($247 & 1) {
label = 33;
break L20;
}
__THREW__ = 0;
invoke_vi(167, HEAP32[17865] | 0);
$250 = __THREW__;
__THREW__ = 0;
if ($250 & 1) {
label = 33;
break L20;
}
__THREW__ = 0;
invoke_vi(168, HEAP32[17865] | 0);
$253 = __THREW__;
__THREW__ = 0;
if ($253 & 1) {
label = 33;
break L20;
}
__THREW__ = 0;
$261 = invoke_ii(20, 28) | 0;
$262 = __THREW__;
__THREW__ = 0;
if ($262 & 1) {
$335 = ___cxa_find_matching_catch_5(232, 32, 0) | 0;
$$129 = $335;
$$132 = tempRet0;
break L20;
}
HEAP32[$261 + 20 >> 2] = 0;
HEAP32[$261 + 24 >> 2] = 0;
HEAP32[$261 + 8 >> 2] = 0;
HEAP32[$261 + 16 >> 2] = 0;
HEAP32[$261 + 12 >> 2] = 10;
$269 = _malloc(80) | 0;
HEAP32[$261 >> 2] = $269;
$271 = $261 + 4 | 0;
if (!$269) {
HEAP32[$271 >> 2] = 0;
__THREW__ = 0;
HEAP32[$vararg_buffer33 >> 2] = 10;
HEAP32[$vararg_buffer33 + 4 >> 2] = 8;
invoke_vii(115, 57708, $vararg_buffer33 | 0);
$272 = __THREW__;
__THREW__ = 0;
if (!($272 & 1)) {
$274 = ___cxa_allocate_exception(4) | 0;
HEAP32[$274 >> 2] = 1;
__THREW__ = 0;
invoke_viii(75, $274 | 0, 32, 0);
__THREW__ = 0;
}
$337 = ___cxa_find_matching_catch_5(232, 32, 0) | 0;
$338 = tempRet0;
__ZdlPv($261);
$$129 = $337;
$$132 = $338;
break L20;
}
HEAP32[$271 >> 2] = 10;
HEAP32[$269 >> 2] = 0;
HEAP16[$269 + 4 >> 1] = 0;
HEAP32[$269 + 8 >> 2] = 0;
HEAP16[$269 + 12 >> 1] = 0;
HEAP32[$269 + 16 >> 2] = 0;
HEAP16[(HEAP32[$261 >> 2] | 0) + 20 >> 1] = 0;
if ((HEAP32[$271 >> 2] | 0) > 3) {
$285 = 3;
do {
HEAP32[(HEAP32[$261 >> 2] | 0) + ($285 << 3) >> 2] = 0;
HEAP16[(HEAP32[$261 >> 2] | 0) + ($285 << 3) + 4 >> 1] = 0;
$285 = $285 + 1 | 0;
} while (($285 | 0) < (HEAP32[$271 >> 2] | 0));
}
HEAP32[17866] = $261;
__THREW__ = 0;
$292 = invoke_iii(21, HEAP32[16168] | 0, 57765) | 0;
$293 = __THREW__;
__THREW__ = 0;
L136 : do if ($293 & 1) label = 129; else {
__THREW__ = 0;
$295 = invoke_iii(21, $292 | 0, 57777) | 0;
$296 = __THREW__;
__THREW__ = 0;
if ($296 & 1) {
label = 129;
break;
}
$298 = HEAP32[17866] | 0;
$299 = HEAP32[17865] | 0;
HEAP32[$vararg_buffer2 >> 2] = 0;
HEAP32[$vararg_buffer2 + 4 >> 2] = $298;
HEAP32[$vararg_buffer2 + 8 >> 2] = 0;
HEAP32[$vararg_buffer2 + 12 >> 2] = 0;
HEAP32[$vararg_buffer2 + 16 >> 2] = $299;
__THREW__ = 0;
invoke_iiii(23, $295 | 0, $vararg_buffer2 | 0, 66548) | 0;
$304 = __THREW__;
__THREW__ = 0;
L139 : do if ($304 & 1) label = 115; else {
L141 : do if (!(HEAP32[16637] | 0)) {
__THREW__ = 0;
invoke_vii(115, 57794, $vararg_buffer37 | 0);
$308 = __THREW__;
__THREW__ = 0;
if ($308 & 1) {
label = 115;
break L139;
}
HEAP32[17850] = 8;
} else {
__THREW__ = 0;
$312 = invoke_ii(20, 224) | 0;
$313 = __THREW__;
__THREW__ = 0;
if ($313 & 1) {
label = 115;
break L139;
}
__THREW__ = 0;
invoke_vii(123, $312 | 0, 1);
$315 = __THREW__;
__THREW__ = 0;
do if ($315 & 1) {
$329 = ___cxa_find_matching_catch_5(232, 32, 0) | 0;
$eh$lpad$body$i$index47Z2D = tempRet0;
$eh$lpad$body$i$indexZ2D = $329;
} else {
__THREW__ = 0;
invoke_vii(123, $312 + 112 | 0, 0);
$318 = __THREW__;
__THREW__ = 0;
if (!($318 & 1)) {
HEAP32[16638] = $312;
__THREW__ = 0;
invoke_vii(188, HEAP32[16637] | 0, $312 | 0);
$327 = __THREW__;
__THREW__ = 0;
if ($327 & 1) {
label = 115;
break L139;
} else break L141;
}
$320 = ___cxa_find_matching_catch_5(232, 32, 0) | 0;
$321 = tempRet0;
__THREW__ = 0;
invoke_vi(101, $312 | 0);
$322 = __THREW__;
__THREW__ = 0;
if (!($322 & 1)) {
$eh$lpad$body$i$index47Z2D = $321;
$eh$lpad$body$i$indexZ2D = $320;
break;
}
$324 = ___cxa_find_matching_catch_3(0) | 0;
___clang_call_terminate($324);
} while (0);
__ZdlPv($312);
$$0$i92 = $eh$lpad$body$i$index47Z2D;
$$04$i = $eh$lpad$body$i$indexZ2D;
break L139;
} while (0);
__THREW__ = 0;
invoke_v(14);
$331 = __THREW__;
__THREW__ = 0;
if ($331 & 1) {
label = 129;
break L136;
}
if (HEAP32[17850] | 0) {
$$1 = 0;
break L39;
}
__THREW__ = 0;
$341 = invoke_ii(20, 352) | 0;
$342 = __THREW__;
__THREW__ = 0;
if ($342 & 1) {
label = 129;
break L136;
}
__THREW__ = 0;
invoke_vi(169, $341 | 0);
$344 = __THREW__;
__THREW__ = 0;
if ($344 & 1) {
$356 = ___cxa_find_matching_catch_5(232, 32, 0) | 0;
$357 = tempRet0;
__ZdlPv($341);
$eh$lpad$body96$index53Z2D = $357;
$eh$lpad$body96$indexZ2D = $356;
break L136;
}
HEAP32[17859] = $341;
HEAP32[$341 >> 2] = 0;
HEAP32[$341 + 4 >> 2] = HEAP32[17865];
HEAP32[$341 + 12 >> 2] = 0;
$349 = $341 + 28 | 0;
HEAP32[$349 >> 2] = 0;
HEAP32[$349 + 4 >> 2] = 0;
HEAP32[$349 + 8 >> 2] = 0;
HEAP32[$349 + 12 >> 2] = 0;
HEAP32[$349 + 16 >> 2] = 0;
HEAP32[$349 + 20 >> 2] = 0;
__THREW__ = 0;
invoke_vi(170, $341 | 0);
$350 = __THREW__;
__THREW__ = 0;
if ($350 & 1) {
label = 129;
break L136;
}
$352 = HEAP32[17859] | 0;
HEAP32[$352 + 20 >> 2] = 5;
__THREW__ = 0;
invoke_ii(34, $352 | 0) | 0;
$354 = __THREW__;
__THREW__ = 0;
if ($354 & 1) {
label = 129;
break L136;
}
HEAP8[72311] = 1;
$$1 = 1;
break L39;
} while (0);
if ((label | 0) == 115) {
$310 = ___cxa_find_matching_catch_5(232, 32, 0) | 0;
$$0$i92 = tempRet0;
$$04$i = $310;
}
$eh$lpad$body96$index53Z2D = $$0$i92;
$eh$lpad$body96$indexZ2D = $$04$i;
} while (0);
if ((label | 0) == 129) {
$339 = ___cxa_find_matching_catch_5(232, 32, 0) | 0;
$eh$lpad$body96$index53Z2D = tempRet0;
$eh$lpad$body96$indexZ2D = $339;
}
$$129 = $eh$lpad$body96$indexZ2D;
$$132 = $eh$lpad$body96$index53Z2D;
break L20;
} while (0);
$eh$lpad$body$index41Z2D = $$0$i;
$eh$lpad$body$indexZ2D = $$06$i;
label = 34;
break L20;
} else $$1 = 0; while (0);
$$2 = $$1;
STACKTOP = sp;
return $$2 | 0;
}
}
}
}
}
}
}
}
} while (0);
if ((label | 0) == 33) {
$91 = ___cxa_find_matching_catch_5(232, 32, 0) | 0;
$eh$lpad$body$index41Z2D = tempRet0;
$eh$lpad$body$indexZ2D = $91;
label = 34;
}
if ((label | 0) == 34) {
$$129 = $eh$lpad$body$indexZ2D;
$$132 = $eh$lpad$body$index41Z2D;
}
$$230 = $$129;
$$233 = $$132;
}
}
}
} while (0);
if ((label | 0) == 6) {
$17 = ___cxa_find_matching_catch_5(232, 32, 0) | 0;
$$230 = $17;
$$233 = tempRet0;
}
if (($$233 | 0) == (_llvm_eh_typeid_for(232) | 0)) {
___cxa_begin_catch($$230 | 0) | 0;
_emscripten_asm_const_ii(10, $1 | 0) | 0;
___cxa_end_catch();
$$2 = 0;
STACKTOP = sp;
return $$2 | 0;
}
$362 = ($$233 | 0) == (_llvm_eh_typeid_for(32) | 0);
___cxa_begin_catch($$230 | 0) | 0;
if ($362) {
_emscripten_asm_const_ii(11, $1 | 0) | 0;
___cxa_end_catch();
$$2 = 0;
STACKTOP = sp;
return $$2 | 0;
} else {
_emscripten_asm_const_ii(12, $1 | 0) | 0;
___cxa_end_catch();
$$2 = 0;
STACKTOP = sp;
return $$2 | 0;
}
return 0;
}
function __ZN11ParMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$ = f0, $$0269388 = 0, $$0272$lcssa402403 = 0, $$0272$lcssa402404 = 0, $$0272381 = 0, $$0273380 = 0, $$0274374 = 0, $$0275349 = 0, $$0276$lcssa = 0, $$0276348 = 0, $$0278$lcssa = 0, $$0278347 = 0, $$0280$lcssa = 0, $$0280346 = 0, $$0282372 = 0, $$0283367 = 0, $$0285358 = 0, $$0286$lcssa = 0, $$0286357 = 0, $$0288$lcssa = 0, $$0288356 = 0, $$0290366 = 0, $$0292362 = 0, $$0293365 = 0, $$0295364 = 0, $$0323$lcssa401405 = f0, $$0323$lcssa401406 = f0, $$0323379 = f0, $$0324$lcssa400407 = f0, $$0324$lcssa400408 = f0, $$0324378 = f0, $$0327$lcssa399409 = f0, $$0327$lcssa399410 = f0, $$0327377 = f0, $$0345 = 0, $$1 = f0, $$1277 = 0, $$1279 = 0, $$1281 = 0, $$1287 = 0, $$1289 = 0, $$1325 = f0, $$2326 = f0, $$byval_copy = 0, $$pre = 0, $$pre393 = 0, $$pre394 = 0, $10 = 0, $102 = 0, $105 = f0, $11 = 0, $117 = 0, $119 = 0, $12 = 0, $120 = 0, $122 = 0, $126 = 0, $13 = 0, $134 = 0, $135 = 0, $136 = 0, $138 = f0, $139 = 0, $14 = 0, $142 = f0, $143 = 0, $144 = 0, $147 = 0, $15 = 0, $151 = f0, $153 = 0, $158 = 0, $159 = 0, $16 = 0, $162 = 0, $164 = 0, $167 = 0, $17 = 0, $171 = 0, $179 = 0, $195 = 0, $203 = 0, $21 = 0, $216 = f0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $226 = 0, $24 = 0, $243 = 0, $244 = 0, $248 = 0, $277 = 0, $278 = 0, $28 = 0, $287 = 0, $29 = 0, $3 = 0, $319 = f0, $321 = f0, $323 = f0, $324 = f0, $325 = 0, $329 = 0, $33 = 0, $34 = 0, $35 = 0, $357 = 0, $358 = 0, $36 = 0, $363 = 0, $364 = 0, $37 = 0, $38 = 0, $380 = 0, $381 = 0, $387 = 0, $389 = 0, $39 = 0, $390 = 0, $394 = 0, $4 = 0, $40 = 0, $41 = 0, $411 = 0, $42 = 0, $43 = 0, $44 = 0, $440 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $85 = 0, $87 = 0, $89 = 0, $9 = 0, $95 = 0, $or$cond9 = 0, $sext = 0, $vararg_buffer100 = 0, $vararg_buffer102 = 0, $vararg_buffer104 = 0, $vararg_buffer106 = 0, $vararg_buffer108 = 0, $vararg_buffer11 = 0, $vararg_buffer110 = 0, $vararg_buffer112 = 0, $vararg_buffer114 = 0, $vararg_buffer116 = 0, $vararg_buffer118 = 0, $vararg_buffer120 = 0, $vararg_buffer124 = 0, $vararg_buffer126 = 0, $vararg_buffer128 = 0, $vararg_buffer130 = 0, $vararg_buffer132 = 0, $vararg_buffer134 = 0, $vararg_buffer137 = 0, $vararg_buffer139 = 0, $vararg_buffer142 = 0, $vararg_buffer144 = 0, $vararg_buffer147 = 0, $vararg_buffer149 = 0, $vararg_buffer15 = 0, $vararg_buffer152 = 0, $vararg_buffer154 = 0, $vararg_buffer156 = 0, $vararg_buffer158 = 0, $vararg_buffer160 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer41 = 0, $vararg_buffer44 = 0, $vararg_buffer48 = 0, $vararg_buffer5 = 0, $vararg_buffer51 = 0, $vararg_buffer55 = 0, $vararg_buffer58 = 0, $vararg_buffer61 = 0, $vararg_buffer64 = 0, $vararg_buffer66 = 0, $vararg_buffer68 = 0, $vararg_buffer7 = 0, $vararg_buffer70 = 0, $vararg_buffer72 = 0, $vararg_buffer74 = 0, $vararg_buffer76 = 0, $vararg_buffer78 = 0, $vararg_buffer80 = 0, $vararg_buffer82 = 0, $vararg_buffer84 = 0, $vararg_buffer86 = 0, $vararg_buffer88 = 0, $vararg_buffer90 = 0, $vararg_buffer92 = 0, $vararg_buffer94 = 0, $vararg_buffer96 = 0, $vararg_buffer98 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 768 | 0;
$$byval_copy = sp + 744 | 0;
$vararg_buffer160 = sp + 560 | 0;
$vararg_buffer158 = sp + 552 | 0;
$vararg_buffer156 = sp + 544 | 0;
$vararg_buffer154 = sp + 536 | 0;
$vararg_buffer152 = sp + 528 | 0;
$vararg_buffer149 = sp + 520 | 0;
$vararg_buffer147 = sp + 512 | 0;
$vararg_buffer144 = sp + 504 | 0;
$vararg_buffer142 = sp + 496 | 0;
$vararg_buffer139 = sp + 488 | 0;
$vararg_buffer137 = sp + 480 | 0;
$vararg_buffer134 = sp + 472 | 0;
$vararg_buffer132 = sp + 464 | 0;
$vararg_buffer130 = sp + 456 | 0;
$vararg_buffer128 = sp + 448 | 0;
$vararg_buffer126 = sp + 440 | 0;
$vararg_buffer124 = sp + 432 | 0;
$vararg_buffer120 = sp + 424 | 0;
$vararg_buffer118 = sp + 416 | 0;
$vararg_buffer116 = sp + 408 | 0;
$vararg_buffer114 = sp + 400 | 0;
$vararg_buffer112 = sp + 392 | 0;
$vararg_buffer110 = sp + 384 | 0;
$vararg_buffer108 = sp + 376 | 0;
$vararg_buffer106 = sp + 368 | 0;
$vararg_buffer104 = sp + 360 | 0;
$vararg_buffer102 = sp + 352 | 0;
$vararg_buffer100 = sp + 344 | 0;
$vararg_buffer98 = sp + 336 | 0;
$vararg_buffer96 = sp + 328 | 0;
$vararg_buffer94 = sp + 320 | 0;
$vararg_buffer92 = sp + 312 | 0;
$vararg_buffer90 = sp + 304 | 0;
$vararg_buffer88 = sp + 296 | 0;
$vararg_buffer86 = sp + 288 | 0;
$vararg_buffer84 = sp + 280 | 0;
$vararg_buffer82 = sp + 272 | 0;
$vararg_buffer80 = sp + 264 | 0;
$vararg_buffer78 = sp + 256 | 0;
$vararg_buffer76 = sp + 248 | 0;
$vararg_buffer74 = sp + 240 | 0;
$vararg_buffer72 = sp + 232 | 0;
$vararg_buffer70 = sp + 224 | 0;
$vararg_buffer68 = sp + 216 | 0;
$vararg_buffer66 = sp + 208 | 0;
$vararg_buffer64 = sp + 200 | 0;
$vararg_buffer61 = sp + 192 | 0;
$vararg_buffer58 = sp + 184 | 0;
$vararg_buffer55 = sp + 176 | 0;
$vararg_buffer51 = sp + 168 | 0;
$vararg_buffer48 = sp + 160 | 0;
$vararg_buffer44 = sp + 152 | 0;
$vararg_buffer41 = sp + 144 | 0;
$vararg_buffer37 = sp + 136 | 0;
$vararg_buffer35 = sp + 128 | 0;
$vararg_buffer33 = sp + 120 | 0;
$vararg_buffer31 = sp + 112 | 0;
$vararg_buffer29 = sp + 104 | 0;
$vararg_buffer27 = sp + 96 | 0;
$vararg_buffer25 = sp + 88 | 0;
$vararg_buffer23 = sp + 80 | 0;
$vararg_buffer21 = sp + 72 | 0;
$vararg_buffer19 = sp + 64 | 0;
$vararg_buffer17 = sp + 56 | 0;
$vararg_buffer15 = sp + 48 | 0;
$vararg_buffer11 = sp + 40 | 0;
$vararg_buffer7 = sp + 32 | 0;
$vararg_buffer5 = sp + 24 | 0;
$vararg_buffer3 = sp + 16 | 0;
$3 = sp + 732 | 0;
$4 = sp + 720 | 0;
$5 = sp + 708 | 0;
$6 = sp + 696 | 0;
$7 = sp + 684 | 0;
$8 = sp + 672 | 0;
$9 = sp + 660 | 0;
$10 = sp + 648 | 0;
$11 = sp + 636 | 0;
$12 = sp + 624 | 0;
$13 = sp + 612 | 0;
$14 = sp + 600 | 0;
$15 = sp + 588 | 0;
$16 = sp + 576 | 0;
$17 = sp + 564 | 0;
__ZN13BasicMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture($0, $1, $2);
if (0) {
__Z7eprintfPKcz(42779, sp);
__ZNK25TwoHConcretePostureChange5printEP8_IO_FILE($0 + 60 | 0, HEAP32[16082] | 0);
}
$21 = $0 + 528 | 0;
$22 = $0 + 540 | 0;
$sext = HEAP32[$22 >> 2] << 16;
$24 = $sext >> 16;
if (!$24) {
STACKTOP = sp;
return;
}
if (0) __Z7eprintfPKcz(42796, sp + 8 | 0);
$28 = _malloc($sext >> 14) | 0;
$29 = ($sext | 0) > 0;
L10 : do if ($29) {
$$pre = HEAP32[$1 + 20 >> 2] | 0;
$$pre393 = HEAP32[$1 + 24 >> 2] | 0;
$$pre394 = HEAP32[$1 + 40 >> 2] | 0;
$33 = $$pre + 20 | 0;
$34 = $$pre + 24 | 0;
$35 = $$pre + 28 | 0;
$36 = $$pre + 32 | 0;
$37 = $$pre + 36 | 0;
$38 = $$pre + 40 | 0;
$39 = $$pre393 + 20 | 0;
$40 = $$pre393 + 24 | 0;
$41 = $$pre393 + 28 | 0;
$42 = $$pre393 + 32 | 0;
$43 = $$pre393 + 36 | 0;
$44 = $$pre393 + 40 | 0;
$45 = ($$pre394 | 0) == 0;
$46 = $$pre394 + 44 | 0;
$$0269388 = 0;
do {
$49 = __Znwj(168) | 0;
HEAP32[$49 >> 2] = HEAP32[$$pre >> 2];
HEAP32[$49 + 4 >> 2] = HEAP32[$$pre + 4 >> 2];
HEAP32[$49 + 8 >> 2] = HEAP32[$$pre + 8 >> 2];
HEAP32[$49 + 12 >> 2] = HEAP32[$$pre + 12 >> 2];
HEAP32[$49 + 16 >> 2] = HEAP32[$$pre + 16 >> 2];
HEAP32[$49 + 20 >> 2] = HEAP32[$33 >> 2];
HEAP32[$49 + 24 >> 2] = HEAP32[$34 >> 2];
HEAP32[$49 + 28 >> 2] = HEAP32[$35 >> 2];
HEAP32[$49 + 32 >> 2] = HEAP32[$36 >> 2];
HEAP32[$49 + 36 >> 2] = HEAP32[$37 >> 2];
$60 = $49 + 40 | 0;
HEAP32[$60 >> 2] = HEAP32[$38 >> 2];
HEAP32[$60 + 4 >> 2] = HEAP32[$38 + 4 >> 2];
HEAP32[$60 + 8 >> 2] = HEAP32[$38 + 8 >> 2];
HEAP32[$60 + 12 >> 2] = HEAP32[$38 + 12 >> 2];
HEAP32[$60 + 16 >> 2] = HEAP32[$38 + 16 >> 2];
HEAP32[$60 + 20 >> 2] = HEAP32[$38 + 20 >> 2];
HEAP32[$60 + 24 >> 2] = HEAP32[$38 + 24 >> 2];
HEAP32[$60 + 28 >> 2] = HEAP32[$38 + 28 >> 2];
$61 = $49 + 72 | 0;
HEAP32[$61 >> 2] = HEAP32[$$pre393 >> 2];
HEAP32[$61 + 4 >> 2] = HEAP32[$$pre393 + 4 >> 2];
HEAP32[$61 + 8 >> 2] = HEAP32[$$pre393 + 8 >> 2];
HEAP32[$61 + 12 >> 2] = HEAP32[$$pre393 + 12 >> 2];
HEAP32[$61 + 16 >> 2] = HEAP32[$$pre393 + 16 >> 2];
HEAP32[$49 + 92 >> 2] = HEAP32[$39 >> 2];
HEAP32[$49 + 96 >> 2] = HEAP32[$40 >> 2];
HEAP32[$49 + 100 >> 2] = HEAP32[$41 >> 2];
HEAP32[$49 + 104 >> 2] = HEAP32[$42 >> 2];
HEAP32[$49 + 108 >> 2] = HEAP32[$43 >> 2];
$72 = $49 + 112 | 0;
HEAP32[$72 >> 2] = HEAP32[$44 >> 2];
HEAP32[$72 + 4 >> 2] = HEAP32[$44 + 4 >> 2];
HEAP32[$72 + 8 >> 2] = HEAP32[$44 + 8 >> 2];
HEAP32[$72 + 12 >> 2] = HEAP32[$44 + 12 >> 2];
HEAP32[$72 + 16 >> 2] = HEAP32[$44 + 16 >> 2];
HEAP32[$72 + 20 >> 2] = HEAP32[$44 + 20 >> 2];
HEAP32[$72 + 24 >> 2] = HEAP32[$44 + 24 >> 2];
HEAP32[$72 + 28 >> 2] = HEAP32[$44 + 28 >> 2];
$73 = $49 + 144 | 0;
$74 = $49 + 164 | 0;
HEAP16[$74 >> 1] = 0;
HEAP8[$74 + 2 >> 0] = 0;
HEAP32[$73 >> 2] = 0;
HEAP32[$73 + 4 >> 2] = 0;
HEAP32[$73 + 8 >> 2] = 0;
HEAP32[$73 + 12 >> 2] = 0;
HEAP16[$73 + 16 >> 1] = 0;
HEAP8[$73 + 18 >> 0] = 0;
HEAP8[$49 + 52 >> 0] = 0;
HEAP8[$49 + 124 >> 0] = 0;
if (!$45) HEAP32[$73 >> 2] = HEAP32[$46 >> 2];
HEAP32[$28 + ($$0269388 << 2) >> 2] = $49;
$$0269388 = $$0269388 + 1 | 0;
} while (($$0269388 | 0) < ($24 | 0));
$47 = $0 + 12 | 0;
HEAP32[$3 >> 2] = HEAP32[$47 >> 2];
HEAP32[$3 + 4 >> 2] = HEAP32[$47 + 4 >> 2];
HEAP32[$3 + 8 >> 2] = HEAP32[$47 + 8 >> 2];
if ($29) {
$48 = $0 + 60 | 0;
$$0272381 = 0;
$$0273380 = 0;
$$0323379 = Math_fround(0.0);
$$0324378 = Math_fround(0.0);
$$0327377 = Math_fround(0.0);
while (1) {
if ((HEAP32[$22 >> 2] | 0) > ($$0273380 | 0)) {
$85 = HEAP32[(HEAP32[$21 >> 2] | 0) + ($$0273380 << 2) >> 2] | 0;
$87 = $85;
$89 = $85;
} else {
$87 = 0;
$89 = 0;
}
__ZN25TwoHConcretePostureChange11setCopyRestERKS_($87 + 60 | 0, $48);
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$89 >> 2] | 0) + 20 >> 2] & 127]($87, $1, HEAP32[$28 + ($$0273380 << 2) >> 2] | 0);
$95 = $87 + 12 | 0;
if ((HEAP32[$3 >> 2] | 0) < (HEAP32[$95 >> 2] | 0)) {
if (1) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(42844, $vararg_buffer3);
__ZNK11MannerFlags5printEP8_IO_FILE($47, HEAP32[16082] | 0);
__Z5eputsPKc(42891);
__ZNK11MannerFlags5printEP8_IO_FILE($3, HEAP32[16082] | 0);
HEAP32[$vararg_buffer5 >> 2] = $$0273380;
__Z7eprintfPKcz(42896, $vararg_buffer5);
}
dest = $$byval_copy;
src = $95;
stop = dest + 12 | 0;
do {
HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
dest = dest + 1 | 0;
src = src + 1 | 0;
} while ((dest | 0) < (stop | 0));
__ZN11MannerFlags14addMannerFlagsES_($3, $$byval_copy);
}
$102 = HEAP32[$87 + 24 >> 2] | 0;
$$0272381 = ($$0272381 | 0) < ($102 | 0) ? $102 : $$0272381;
$105 = Math_fround(HEAPF32[$87 + 40 >> 2]);
$$0327377 = $$0327377 < $105 ? $105 : $$0327377;
if ((HEAP32[$87 + 4 >> 2] | 0) == 10) {
$$1 = $$0323379;
$$2326 = $$0324378;
} else {
$$1325 = $$0324378 < $105 ? $105 : $$0324378;
if ($$0323379 < $105) {
$$1 = (HEAP32[$87 + 12 >> 2] | 0) == 1 ? $$0323379 : $105;
$$2326 = $$1325;
} else {
$$1 = $$0323379;
$$2326 = $$1325;
}
}
$$0273380 = $$0273380 + 1 | 0;
if (($$0273380 | 0) >= ($24 | 0)) break; else {
$$0323379 = $$1;
$$0324378 = $$2326;
}
}
if ($29) {
$$0274374 = 0;
while (1) {
$119 = $28 + ($$0274374 << 2) | 0;
$120 = HEAP32[$119 >> 2] | 0;
if ($120 | 0) {
__THREW__ = 0;
invoke_vi(132, $120 | 0);
$122 = __THREW__;
__THREW__ = 0;
if ($122 & 1) break;
__ZdlPv($120);
HEAP32[$119 >> 2] = 0;
}
$$0274374 = $$0274374 + 1 | 0;
if (($$0274374 | 0) >= ($24 | 0)) {
$$0272$lcssa402403 = $$0272381;
$$0323$lcssa401405 = $$1;
$$0324$lcssa400407 = $$2326;
$$0327$lcssa399409 = $$0327377;
$442 = $3;
$443 = $47;
$444 = $47;
label = 29;
break L10;
}
}
$440 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($120);
___resumeException($440 | 0);
} else {
$$0272$lcssa402403 = $$0272381;
$$0323$lcssa401405 = $$1;
$$0324$lcssa400407 = $$2326;
$$0327$lcssa399409 = $$0327377;
$442 = $3;
$443 = $47;
$444 = $47;
label = 29;
}
} else {
$$0272$lcssa402403 = 0;
$$0323$lcssa401405 = Math_fround(0.0);
$$0324$lcssa400407 = Math_fround(0.0);
$$0327$lcssa399409 = Math_fround(0.0);
$442 = $3;
$443 = $47;
$444 = $47;
label = 29;
}
} else {
$117 = $0 + 12 | 0;
HEAP32[$3 >> 2] = HEAP32[$117 >> 2];
HEAP32[$3 + 4 >> 2] = HEAP32[$117 + 4 >> 2];
HEAP32[$3 + 8 >> 2] = HEAP32[$117 + 8 >> 2];
if (!$28) {
$$0272$lcssa402404 = 0;
$$0323$lcssa401406 = Math_fround(0.0);
$$0324$lcssa400408 = Math_fround(0.0);
$$0327$lcssa399410 = Math_fround(0.0);
$143 = $117;
$153 = $117;
$445 = $3;
} else {
$$0272$lcssa402403 = 0;
$$0323$lcssa401405 = Math_fround(0.0);
$$0324$lcssa400407 = Math_fround(0.0);
$$0327$lcssa399409 = Math_fround(0.0);
$442 = $3;
$443 = $117;
$444 = $117;
label = 29;
}
} while (0);
if ((label | 0) == 29) {
_free($28);
$$0272$lcssa402404 = $$0272$lcssa402403;
$$0323$lcssa401406 = $$0323$lcssa401405;
$$0324$lcssa400408 = $$0324$lcssa400407;
$$0327$lcssa399410 = $$0327$lcssa399409;
$143 = $444;
$153 = $443;
$445 = $442;
}
$126 = $0 + 24 | 0;
if ((HEAP32[$126 >> 2] | 0) != ($$0272$lcssa402404 | 0)) {
if (1) {
__Z7LogTimev() | 0;
$134 = HEAP32[2944 + ($$0272$lcssa402404 << 2) >> 2] | 0;
HEAP32[$vararg_buffer7 >> 2] = HEAP32[2944 + (HEAP32[$126 >> 2] << 2) >> 2];
HEAP32[$vararg_buffer7 + 4 >> 2] = $134;
__Z7eprintfPKcz(42915, $vararg_buffer7);
}
HEAP32[$126 >> 2] = $$0272$lcssa402404;
}
$135 = $$0323$lcssa401406 > Math_fround(0.0);
$136 = $$0324$lcssa400408 > Math_fround(0.0);
$138 = $135 ? $$0323$lcssa401406 : $136 ? $$0324$lcssa400408 : $$0327$lcssa399410;
$139 = $0 + 40 | 0;
HEAPF32[$139 >> 2] = $138;
if ($29) {
$$0282372 = 0;
$151 = $138;
do {
$147 = HEAP32[(HEAP32[$21 >> 2] | 0) + ($$0282372 << 2) >> 2] | 0;
FUNCTION_TABLE_vifi[HEAP32[(HEAP32[$147 >> 2] | 0) + 64 >> 2] & 7]($147, $151, 1);
_memmove($147 + 12 | 0, $153 | 0, 9) | 0;
$$0282372 = $$0282372 + 1 | 0;
$151 = Math_fround(HEAPF32[$139 >> 2]);
} while (($$0282372 | 0) < ($24 | 0));
$142 = Math_fround(Math_fround(HEAPF32[$0 + 44 >> 2]) + $151);
HEAPF32[$139 >> 2] = $142;
HEAP32[$143 >> 2] = 11;
HEAP32[$126 >> 2] = 0;
if ($29) {
$144 = HEAP32[$21 >> 2] | 0;
$$0283367 = -1;
$$0290366 = -1;
$$0293365 = 0;
$$0295364 = 0;
do {
$158 = HEAP32[$144 + ($$0295364 << 2) >> 2] | 0;
$159 = $158 + 508 | 0;
$162 = ((HEAPU8[$159 >> 0] | HEAPU8[$159 + 1 >> 0] << 8) & 48) == 0;
$$0283367 = $162 ? $$0283367 : $$0295364;
$164 = $158 + 510 | 0;
$167 = ((HEAPU8[$164 >> 0] | HEAPU8[$164 + 1 >> 0] << 8) & 48) == 0;
$$0293365 = $$0293365 + (($162 ^ 1) & 1) + (($167 ^ 1) & 1) | 0;
$$0290366 = $167 ? $$0290366 : $$0295364;
$$0295364 = $$0295364 + 1 | 0;
} while (($$0295364 | 0) < ($24 | 0));
if (($$0283367 | 0) != -1) {
$171 = $0 + 324 | 0;
if (($$0283367 | 0) < 0) $179 = 0; else if ((HEAP32[$22 >> 2] | 0) > ($$0283367 | 0)) $179 = HEAP32[(HEAP32[$21 >> 2] | 0) + ($$0283367 << 2) >> 2] | 0; else $179 = 0;
HEAP32[$171 >> 2] = HEAP32[$179 + 324 >> 2];
HEAP32[$0 + 328 >> 2] = HEAP32[$179 + 328 >> 2];
HEAP32[$0 + 332 >> 2] = HEAP32[$179 + 332 >> 2];
HEAP32[$0 + 336 >> 2] = HEAP32[$179 + 336 >> 2];
if (($$0293365 | 0) > 1 & 1 != 0) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer11 >> 2] = $$0293365;
HEAP32[$vararg_buffer11 + 4 >> 2] = ($$0293365 | 0) == 2 ? 35831 : 42976;
__Z7eprintfPKcz(42980, $vararg_buffer11);
}
}
if (($$0290366 | 0) != -1) {
$195 = $0 + 436 | 0;
if (($$0290366 | 0) < 0) $203 = 0; else if ((HEAP32[$22 >> 2] | 0) > ($$0290366 | 0)) $203 = HEAP32[(HEAP32[$21 >> 2] | 0) + ($$0290366 << 2) >> 2] | 0; else $203 = 0;
HEAP32[$195 >> 2] = HEAP32[$203 + 436 >> 2];
HEAP32[$0 + 440 >> 2] = HEAP32[$203 + 440 >> 2];
HEAP32[$0 + 444 >> 2] = HEAP32[$203 + 444 >> 2];
HEAP32[$0 + 448 >> 2] = HEAP32[$203 + 448 >> 2];
}
}
} else {
$216 = Math_fround(Math_fround(HEAPF32[$0 + 44 >> 2]) + $138);
HEAPF32[$139 >> 2] = $216;
HEAP32[$143 >> 2] = 11;
HEAP32[$126 >> 2] = 0;
}
if (0) __Z7eprintfPKcz(43106, $vararg_buffer15);
if ($29) {
$218 = $0 + 412 | 0;
$219 = $0 + 424 | 0;
$220 = $0 + 300 | 0;
$221 = $0 + 312 | 0;
$$0292362 = 0;
do {
$226 = HEAP32[(HEAP32[$21 >> 2] | 0) + ($$0292362 << 2) >> 2] | 0;
if (HEAP16[$226 + 508 >> 1] & 8) {
__ZN6Vector7setFromERKS_($220, $226 + 300 | 0);
__ZN6Vector7setFromERKS_($221, $226 + 312 | 0);
}
if (HEAP16[$226 + 510 >> 1] & 8) {
__ZN6Vector7setFromERKS_($218, $226 + 412 | 0);
__ZN6Vector7setFromERKS_($219, $226 + 424 | 0);
}
$$0292362 = $$0292362 + 1 | 0;
} while (($$0292362 | 0) < ($24 | 0));
}
__ZN6VectorC2Ev($$byval_copy);
__ZN6VectorC2Ev($4);
$222 = $0 + 60 | 0;
__ZNK25TwoHConcretePostureChange18CalcHandSiteChangeER6VectorS1_($222, $$byval_copy, $4);
if (0) {
__Z7eprintfPKcz(43155, $vararg_buffer17);
__ZNK6Vector5printEP8_IO_FILEi($$byval_copy, HEAP32[16082] | 0, 3);
__Z7eprintfPKcz(43177, $vararg_buffer19);
__ZNK6Vector5printEP8_IO_FILEi($4, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(43199, $vararg_buffer21);
}
__ZN6VectorC2Ev($5);
__ZN6VectorC2Ev($6);
if ($29) {
$$0285358 = 0;
$$0286357 = 0;
$$0288356 = 0;
while (1) {
$248 = HEAP32[(HEAP32[$21 >> 2] | 0) + ($$0285358 << 2) >> 2] | 0;
if (!(HEAP16[$248 + 508 >> 1] & 1)) $$1289 = $$0288356; else {
__ZN6Vector6setAddERKS_($5, $248 + 288 | 0);
__ZN6Vector11setSubtractERKS_($5, $248 + 64 | 0);
$$1289 = $$0288356 + 1 | 0;
}
if (!(HEAP16[$248 + 510 >> 1] & 1)) $$1287 = $$0286357; else {
__ZN6Vector6setAddERKS_($6, $248 + 400 | 0);
__ZN6Vector11setSubtractERKS_($6, $248 + 176 | 0);
$$1287 = $$0286357 + 1 | 0;
}
$$0285358 = $$0285358 + 1 | 0;
if (($$0285358 | 0) >= ($24 | 0)) {
$$0286$lcssa = $$1287;
$$0288$lcssa = $$1289;
break;
} else {
$$0286357 = $$1287;
$$0288356 = $$1289;
}
}
} else {
$$0286$lcssa = 0;
$$0288$lcssa = 0;
}
$243 = $0 + 64 | 0;
__ZN6VectorC2ERKS_($7, $243);
__ZN6Vector6setAddERKS_($7, $5);
$244 = $0 + 176 | 0;
__ZN6VectorC2ERKS_($8, $244);
__ZN6Vector6setAddERKS_($8, $6);
if (0) {
__Z7eprintfPKcz(43252, $vararg_buffer23);
__ZNK6Vector5printEP8_IO_FILEi($5, HEAP32[16082] | 0, 3);
__Z7eprintfPKcz(43277, $vararg_buffer25);
__ZNK6Vector5printEP8_IO_FILEi($243, HEAP32[16082] | 0, 3);
__Z7eprintfPKcz(42891, $vararg_buffer27);
__ZNK6Vector5printEP8_IO_FILEi($7, HEAP32[16082] | 0, 3);
__Z7eprintfPKcz(43284, $vararg_buffer29);
__ZNK6Vector5printEP8_IO_FILEi($6, HEAP32[16082] | 0, 3);
__Z7eprintfPKcz(43277, $vararg_buffer31);
__ZNK6Vector5printEP8_IO_FILEi($244, HEAP32[16082] | 0, 3);
__Z7eprintfPKcz(42891, $vararg_buffer33);
__ZNK6Vector5printEP8_IO_FILEi($8, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(43297, $vararg_buffer35);
}
__ZN6VectorC2Ev($9);
__ZN6VectorC2Ev($10);
__ZN6VectorC2Ev($11);
if ($29) {
$$0275349 = 0;
$$0276348 = -1;
$$0278347 = -1;
$$0280346 = -1;
while (1) {
if ((HEAP32[$22 >> 2] | 0) > ($$0275349 | 0)) $278 = HEAP32[(HEAP32[$21 >> 2] | 0) + ($$0275349 << 2) >> 2] | 0; else $278 = 0;
$277 = $278 + 508 | 0;
if (!(HEAP16[$277 >> 1] & 2)) $$1281 = $$0280346; else {
if (($$0280346 | 0) != -1 & 1 != 0) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer37 >> 2] = $$0280346;
HEAP32[$vararg_buffer37 + 4 >> 2] = $$0275349;
__Z7eprintfPKcz(43367, $vararg_buffer37);
}
__ZN6Vector7setFromERKS_($9, $278 + 288 | 0);
if (!0) $$1281 = $$0275349; else {
HEAP32[$vararg_buffer41 >> 2] = $$0275349;
__Z7eprintfPKcz(43482, $vararg_buffer41);
__ZNK6Vector5printEP8_IO_FILEi($9, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
$$1281 = $$0275349;
}
}
$287 = $278 + 510 | 0;
if (!(HEAP16[$287 >> 1] & 2)) $$1279 = $$0278347; else {
if (($$0278347 | 0) != -1) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer44 >> 2] = $$0278347;
HEAP32[$vararg_buffer44 + 4 >> 2] = $$0275349;
__Z7eprintfPKcz(43520, $vararg_buffer44);
}
__ZN6Vector7setFromERKS_($10, $278 + 400 | 0);
if (!0) $$1279 = $$0275349; else {
HEAP32[$vararg_buffer48 >> 2] = $$0275349;
__Z7eprintfPKcz(43634, $vararg_buffer48);
__ZNK6Vector5printEP8_IO_FILEi($10, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
$$1279 = $$0275349;
}
}
if (!(HEAP16[$277 >> 1] & 4)) if (!(HEAP16[$287 >> 1] & 4)) $$1277 = $$0276348; else label = 89; else label = 89;
do if ((label | 0) == 89) {
label = 0;
if (($$0276348 | 0) != -1 & 1 != 0) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer51 >> 2] = $$0276348;
HEAP32[$vararg_buffer51 + 4 >> 2] = $$0275349;
__Z7eprintfPKcz(43671, $vararg_buffer51);
}
__ZN6Vector11setSubtractERKS_S1_($11, $278 + 400 | 0, $278 + 288 | 0);
if (!0) {
$$1277 = $$0275349;
break;
}
HEAP32[$vararg_buffer55 >> 2] = $$0275349;
__Z7eprintfPKcz(43785, $vararg_buffer55);
__ZNK6Vector5printEP8_IO_FILEi($11, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
$$1277 = $$0275349;
} while (0);
$$0275349 = $$0275349 + 1 | 0;
if (($$0275349 | 0) >= ($24 | 0)) {
$$0276$lcssa = $$1277;
$$0278$lcssa = $$1279;
$$0280$lcssa = $$1281;
break;
} else {
$$0276348 = $$1277;
$$0278347 = $$1279;
$$0280346 = $$1281;
}
}
} else {
$$0276$lcssa = -1;
$$0278$lcssa = -1;
$$0280$lcssa = -1;
}
if (0) {
if (($$0280$lcssa | 0) != -1) {
HEAP32[$vararg_buffer58 >> 2] = $$0280$lcssa;
__Z7eprintfPKcz(43812, $vararg_buffer58);
__ZNK6Vector5printEP8_IO_FILEi($9, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
if (($$0278$lcssa | 0) != -1) {
HEAP32[$vararg_buffer61 >> 2] = $$0278$lcssa;
__Z7eprintfPKcz(43835, $vararg_buffer61);
__ZNK6Vector5printEP8_IO_FILEi($10, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
if (0) __Z7eprintfPKcz(43857, $vararg_buffer64);
}
if (!$$0288$lcssa) $319 = Math_fround(0.0); else $319 = Math_fround(__ZNK6Vector6lengthEv($5));
if (!$$0286$lcssa) $321 = Math_fround(0.0); else $321 = Math_fround(__ZNK6Vector6lengthEv($6));
$or$cond9 = $319 == Math_fround(0.0) & $321 == Math_fround(0.0);
$323 = Math_fround($319 / Math_fround($319 + $321));
$$ = $or$cond9 ? Math_fround(.5) : $323;
$324 = Math_fround(Math_fround(1.0) - $$);
$325 = $0 + 544 | 0;
__ZN6Vector11setMidPointERKS_S1_f($325, $$byval_copy, $4, $$);
__ZN6VectorC2Ev($12);
__ZN6VectorC2Ev($13);
do if (($$0276$lcssa | 0) == -1) label = 127; else {
if (0) __Z7eprintfPKcz(43895, $vararg_buffer66);
$329 = ($$0278$lcssa | 0) != -1;
if (($$0280$lcssa | 0) != -1) if ($329) {
__ZN6VectorC2ERKS_($14, $10);
__ZN6Vector11setSubtractERKS_($14, $9);
__ZN6VectorC2ERKS_($15, $14);
__ZN6Vector11setSubtractERKS_($15, $11);
__ZN6VectorC2ERKS_($16, $15);
__ZN6Vector8setScaleEf($16, $$);
__ZN6VectorC2ERKS_($17, $15);
__ZN6Vector8setScaleEf($17, $324);
__ZN6Vector6setAddERKS_($9, $16);
__ZN6Vector11setSubtractERKS_($10, $17);
if (0) {
__Z7eprintfPKcz(43928, $vararg_buffer68);
__ZNK6Vector5printEP8_IO_FILEi($14, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(43941, $vararg_buffer70);
__ZNK6Vector5printEP8_IO_FILEi($15, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(43956, $vararg_buffer72);
__ZNK6Vector5printEP8_IO_FILEi($16, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(43974, $vararg_buffer74);
__ZNK6Vector5printEP8_IO_FILEi($9, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(43994, $vararg_buffer76);
__ZNK6Vector5printEP8_IO_FILEi($17, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(44011, $vararg_buffer78);
__ZNK6Vector5printEP8_IO_FILEi($10, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
label = 127;
break;
} else {
__ZN6VectorC2ERKS_($14, $8);
__ZN6Vector11setSubtractERKS_($14, $9);
__ZN6VectorC2ERKS_($15, $14);
__ZN6Vector11setSubtractERKS_($15, $11);
__ZN6Vector11setSubtractERKS_($10, $15);
if (0) {
__Z7eprintfPKcz(43928, $vararg_buffer80);
__ZNK6Vector5printEP8_IO_FILEi($14, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(43941, $vararg_buffer82);
__ZNK6Vector5printEP8_IO_FILEi($15, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(44011, $vararg_buffer84);
__ZNK6Vector5printEP8_IO_FILEi($10, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
label = 127;
break;
}
if ($329) {
__ZN6VectorC2ERKS_($14, $10);
__ZN6Vector11setSubtractERKS_($14, $7);
__ZN6VectorC2ERKS_($15, $14);
__ZN6Vector11setSubtractERKS_($15, $11);
__ZN6Vector6setAddERKS_($9, $15);
if (0) {
__Z7eprintfPKcz(43928, $vararg_buffer86);
__ZNK6Vector5printEP8_IO_FILEi($14, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(43941, $vararg_buffer88);
__ZNK6Vector5printEP8_IO_FILEi($15, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(43974, $vararg_buffer90);
__ZNK6Vector5printEP8_IO_FILEi($9, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
} else {
__ZN6VectorC2ERKS_($14, $8);
__ZN6Vector11setSubtractERKS_($14, $7);
__ZN6VectorC2ERKS_($15, $14);
__ZN6Vector11setSubtractERKS_($15, $11);
do if (($$0288$lcssa | 0) > 0) {
__ZN6Vector7setFromERKS_($12, $15);
__ZN6Vector8setScaleEf($12, $$);
if (!0) break;
__Z7eprintfPKcz(43928, $vararg_buffer92);
__ZNK6Vector5printEP8_IO_FILEi($14, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(43941, $vararg_buffer94);
__ZNK6Vector5printEP8_IO_FILEi($15, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(44030, $vararg_buffer96);
__ZNK6Vector5printEP8_IO_FILEi($12, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
} while (0);
do if (($$0286$lcssa | 0) > 0) {
__ZN6Vector7setFromERKS_($13, $15);
__ZN6Vector8setScaleEf($13, Math_fround(-$324));
if (!0) break;
__Z7eprintfPKcz(43928, $vararg_buffer98);
__ZNK6Vector5printEP8_IO_FILEi($14, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(43941, $vararg_buffer100);
__ZNK6Vector5printEP8_IO_FILEi($15, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(44048, $vararg_buffer102);
__ZNK6Vector5printEP8_IO_FILEi($13, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
} while (0);
}
$446 = ($$0288$lcssa | 0) > 0;
$447 = 0;
} while (0);
if ((label | 0) == 127) {
$357 = ($$0280$lcssa | 0) != -1;
$358 = ($$0288$lcssa | 0) > 0;
if ($358 & $357) {
__ZN6Vector11setSubtractERKS_S1_($12, $9, $7);
if (!0) {
$446 = 1;
$447 = 1;
} else {
__Z7eprintfPKcz(44065, $vararg_buffer104);
__Z7eprintfPKcz(43974, $vararg_buffer106);
__ZNK6Vector5printEP8_IO_FILEi($9, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(44126, $vararg_buffer108);
__ZNK6Vector5printEP8_IO_FILEi($7, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(44030, $vararg_buffer110);
__ZNK6Vector5printEP8_IO_FILEi($12, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
$446 = 1;
$447 = 1;
}
} else {
$446 = $358;
$447 = $357;
}
}
$363 = ($$0278$lcssa | 0) != -1;
$364 = ($$0286$lcssa | 0) > 0;
if ($364 & $363) {
__ZN6Vector11setSubtractERKS_S1_($13, $10, $8);
if (0) {
__Z7eprintfPKcz(44150, $vararg_buffer112);
__Z7eprintfPKcz(44011, $vararg_buffer114);
__ZNK6Vector5printEP8_IO_FILEi($10, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(44208, $vararg_buffer116);
__ZNK6Vector5printEP8_IO_FILEi($8, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(44048, $vararg_buffer118);
__ZNK6Vector5printEP8_IO_FILEi($13, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
}
__ZN6VectorC2Ev($14);
__ZN6VectorC2Ev($15);
if ($447) __ZN6Vector7setFromERKS_($14, $9); else {
__ZN6Vector7setFromERKS_($14, $7);
__ZN6Vector6setAddERKS_($14, $12);
}
if ($363) __ZN6Vector7setFromERKS_($15, $10); else {
__ZN6Vector7setFromERKS_($15, $8);
__ZN6Vector6setAddERKS_($15, $13);
}
if ($446) __ZN6Vector8setScaleEf($12, Math_fround(1.0 / +($$0288$lcssa | 0)));
if ($364) __ZN6Vector8setScaleEf($13, Math_fround(1.0 / +($$0286$lcssa | 0)));
if (0) {
HEAP32[$vararg_buffer120 >> 2] = $$0280$lcssa;
HEAP32[$vararg_buffer120 + 4 >> 2] = $$0278$lcssa;
__Z7eprintfPKcz(44231, $vararg_buffer120);
__Z7eprintfPKcz(44261, $vararg_buffer124);
__ZNK6Vector5printEP8_IO_FILEi($14, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(44283, $vararg_buffer126);
__ZNK6Vector5printEP8_IO_FILEi($15, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(44030, $vararg_buffer128);
__ZNK6Vector5printEP8_IO_FILEi($12, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(44048, $vararg_buffer130);
__ZNK6Vector5printEP8_IO_FILEi($13, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(44304, $vararg_buffer132);
}
if ($29) {
$$0345 = 0;
do {
if ((HEAP32[$22 >> 2] | 0) > ($$0345 | 0)) {
$387 = HEAP32[(HEAP32[$21 >> 2] | 0) + ($$0345 << 2) >> 2] | 0;
$389 = $387;
$394 = $387;
} else {
$389 = 0;
$394 = 0;
}
$390 = HEAP16[$389 + 508 >> 1] | 0;
do if (!($390 & 1)) {
if (!($390 & 2)) break;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$389 >> 2] | 0) + 44 >> 2] & 127]($389, $14, 1);
if (!0) break;
HEAP32[$vararg_buffer139 >> 2] = $$0345;
__Z7eprintfPKcz(44428, $vararg_buffer139);
__ZNK6Vector5printEP8_IO_FILEi($14, HEAP32[16082] | 0, 3);
__Z7eprintfPKcz(44396, $vararg_buffer142);
__ZNK6Vector5printEP8_IO_FILEi($389 + 288 | 0, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
} else {
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$394 >> 2] | 0) + 52 >> 2] & 127]($389, $12, 1);
if (!0) break;
HEAP32[$vararg_buffer134 >> 2] = $$0345;
__Z7eprintfPKcz(44370, $vararg_buffer134);
__ZNK6Vector5printEP8_IO_FILEi($12, HEAP32[16082] | 0, 3);
__Z7eprintfPKcz(44396, $vararg_buffer137);
__ZNK6Vector5printEP8_IO_FILEi($389 + 288 | 0, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
} while (0);
$411 = HEAP16[$389 + 510 >> 1] | 0;
do if (!($411 & 1)) {
if (!($411 & 2)) break;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$389 >> 2] | 0) + 44 >> 2] & 127]($389, $15, 0);
if (!0) break;
HEAP32[$vararg_buffer149 >> 2] = $$0345;
__Z7eprintfPKcz(44428, $vararg_buffer149);
__ZNK6Vector5printEP8_IO_FILEi($15, HEAP32[16082] | 0, 3);
__Z7eprintfPKcz(44477, $vararg_buffer152);
__ZNK6Vector5printEP8_IO_FILEi($389 + 400 | 0, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
} else {
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$389 >> 2] | 0) + 52 >> 2] & 127]($389, $13, 0);
if (!0) break;
HEAP32[$vararg_buffer144 >> 2] = $$0345;
__Z7eprintfPKcz(44451, $vararg_buffer144);
__ZNK6Vector5printEP8_IO_FILEi($13, HEAP32[16082] | 0, 3);
__Z7eprintfPKcz(44477, $vararg_buffer147);
__ZNK6Vector5printEP8_IO_FILEi($389 + 400 | 0, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
} while (0);
$$0345 = $$0345 + 1 | 0;
} while (($$0345 | 0) < ($24 | 0));
}
$380 = $0 + 288 | 0;
__ZN6Vector7setFromERKS_($380, $14);
$381 = $0 + 400 | 0;
__ZN6Vector7setFromERKS_($381, $15);
__ZN6Vector6setAddERKS_($380, $325);
__ZN6Vector6setAddERKS_($381, $325);
if (0) {
__Z7eprintfPKcz(44508, $vararg_buffer154);
__ZNK6Vector5printEP8_IO_FILEi($325, HEAP32[16082] | 0, 3);
__Z7eprintfPKcz(44540, $vararg_buffer156);
__ZNK6Vector5printEP8_IO_FILEi($380, HEAP32[16082] | 0, 3);
__Z7eprintfPKcz(44550, $vararg_buffer158);
__ZNK6Vector5printEP8_IO_FILEi($381, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$0 >> 2] | 0) + 68 >> 2] & 255]($0);
if (0) {
__Z7eprintfPKcz(44556, $vararg_buffer160);
__ZNK25TwoHConcretePostureChange5printEP8_IO_FILE($222, HEAP32[16082] | 0);
}
STACKTOP = sp;
return;
}
function _normal_contentTok($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$011$ph$i$i = 0, $$012$lcssa$i$i = 0, $$0127$pn253$i = 0, $$0127$pn253$i$phi = 0, $$0127255$i = 0, $$072$pn88$i$i = 0, $$072$pn88$i$i$phi = 0, $$07290$i$i = 0, $$1$be = 0, $$1$i = 0, $$1$i$i = 0, $$1$ph = 0, $$1220 = 0, $$1252$i = 0, $$1254$i = 0, $$187$i$i = 0, $$189$i$i = 0, $$3$i = 0, $$4$i = 0, $$9$i$i = 0, $$in$i$i = 0, $$sink$i = 0, $$sink$i$i = 0, $$sink263$i = 0, $$sink264$i = 0, $$sink98$i$i = 0, $11 = 0, $139 = 0, $17 = 0, $171 = 0, $19 = 0, $199 = 0, $20 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $208 = 0, $21 = 0, $212 = 0, $214 = 0, $215 = 0, $217 = 0, $22 = 0, $224 = 0, $231 = 0, $238 = 0, $240 = 0, $242 = 0, $246 = 0, $249 = 0, $252 = 0, $255 = 0, $257 = 0, $258 = 0, $258$phi = 0, $263 = 0, $271 = 0, $278 = 0, $285 = 0, $288 = 0, $291 = 0, $294 = 0, $295 = 0, $301 = 0, $304 = 0, $308 = 0, $310 = 0, $317 = 0, $324 = 0, $331 = 0, $333 = 0, $334 = 0, $335 = 0, $341 = 0, $348 = 0, $357 = 0, $361 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $4 = 0, $423 = 0, $427 = 0, $47 = 0, $55 = 0, $6 = 0, $62 = 0, $65 = 0, $68 = 0, $71 = 0, $74 = 0, $76 = 0, $80 = 0, $86 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$4 = sp;
if (($1 | 0) == ($2 | 0)) {
$$0 = -4;
STACKTOP = sp;
return $$0 | 0;
}
$6 = $0 + 72 | 0;
L4 : do switch (HEAP8[$6 + (HEAPU8[$1 >> 0] | 0) >> 0] | 0) {
case 2:
{
$11 = $1 + 1 | 0;
if (($11 | 0) == ($2 | 0)) {
$$0 = -1;
STACKTOP = sp;
return $$0 | 0;
}
switch (HEAP8[$6 + (HEAPU8[$11 >> 0] | 0) >> 0] | 0) {
case 29:
{
HEAP32[$3 >> 2] = $11;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
case 24:
case 22:
{
$$sink263$i = 1;
break;
}
case 5:
{
if (($2 - $11 | 0) < 2) {
$$0 = -2;
STACKTOP = sp;
return $$0 | 0;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 340 >> 2] & 63]($0, $11) | 0)) {
HEAP32[$3 >> 2] = $11;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else $$sink263$i = 2;
break;
}
case 6:
{
if (($2 - $11 | 0) < 3) {
$$0 = -2;
STACKTOP = sp;
return $$0 | 0;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 344 >> 2] & 63]($0, $11) | 0)) {
HEAP32[$3 >> 2] = $11;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else $$sink263$i = 3;
break;
}
case 7:
{
if (($2 - $11 | 0) < 4) {
$$0 = -2;
STACKTOP = sp;
return $$0 | 0;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 348 >> 2] & 63]($0, $11) | 0)) {
HEAP32[$3 >> 2] = $11;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else $$sink263$i = 4;
break;
}
case 16:
{
$47 = $1 + 2 | 0;
if (($47 | 0) == ($2 | 0)) {
$$0 = -1;
STACKTOP = sp;
return $$0 | 0;
}
switch (HEAP8[$6 + (HEAPU8[$47 >> 0] | 0) >> 0] | 0) {
case 27:
{
$$0 = _normal_scanComment($0, $1 + 3 | 0, $2, $3) | 0;
STACKTOP = sp;
return $$0 | 0;
}
case 20:
{
$55 = $1 + 3 | 0;
if (($2 - $55 | 0) < 6) {
$$0 = -1;
STACKTOP = sp;
return $$0 | 0;
}
if ((HEAP8[$55 >> 0] | 0) == 67) {
$62 = $1 + 4 | 0;
if ((HEAP8[$62 >> 0] | 0) == 68) {
$65 = $1 + 5 | 0;
if ((HEAP8[$65 >> 0] | 0) == 65) {
$68 = $1 + 6 | 0;
if ((HEAP8[$68 >> 0] | 0) == 84) {
$71 = $1 + 7 | 0;
if ((HEAP8[$71 >> 0] | 0) == 65) {
$74 = $1 + 8 | 0;
$76 = (HEAP8[$74 >> 0] | 0) == 91;
$$011$ph$i$i = $76 ? 8 : 0;
$$012$lcssa$i$i = $76 ? $1 + 9 | 0 : $74;
} else {
$$011$ph$i$i = 0;
$$012$lcssa$i$i = $71;
}
} else {
$$011$ph$i$i = 0;
$$012$lcssa$i$i = $68;
}
} else {
$$011$ph$i$i = 0;
$$012$lcssa$i$i = $65;
}
} else {
$$011$ph$i$i = 0;
$$012$lcssa$i$i = $62;
}
} else {
$$011$ph$i$i = 0;
$$012$lcssa$i$i = $55;
}
HEAP32[$3 >> 2] = $$012$lcssa$i$i;
$$0 = $$011$ph$i$i;
STACKTOP = sp;
return $$0 | 0;
}
default:
{
HEAP32[$3 >> 2] = $47;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
}
break;
}
case 15:
{
$$0 = _normal_scanPi($0, $1 + 2 | 0, $2, $3) | 0;
STACKTOP = sp;
return $$0 | 0;
}
case 17:
{
$80 = $1 + 2 | 0;
if (($80 | 0) == ($2 | 0)) {
$$0 = -1;
STACKTOP = sp;
return $$0 | 0;
}
switch (HEAP8[$6 + (HEAPU8[$80 >> 0] | 0) >> 0] | 0) {
case 29:
{
HEAP32[$3 >> 2] = $80;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
case 24:
case 22:
{
$$sink$i$i = 1;
break;
}
case 5:
{
if (($2 - $80 | 0) < 2) {
$$0 = -2;
STACKTOP = sp;
return $$0 | 0;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 340 >> 2] & 63]($0, $80) | 0)) {
HEAP32[$3 >> 2] = $80;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else $$sink$i$i = 2;
break;
}
case 6:
{
if (($2 - $80 | 0) < 3) {
$$0 = -2;
STACKTOP = sp;
return $$0 | 0;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 344 >> 2] & 63]($0, $80) | 0)) {
HEAP32[$3 >> 2] = $80;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else $$sink$i$i = 3;
break;
}
case 7:
{
if (($2 - $80 | 0) < 4) {
$$0 = -2;
STACKTOP = sp;
return $$0 | 0;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 348 >> 2] & 63]($0, $80) | 0)) {
HEAP32[$3 >> 2] = $80;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else $$sink$i$i = 4;
break;
}
default:
{
HEAP32[$3 >> 2] = $80;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
}
$86 = $80 + $$sink$i$i | 0;
if (($86 | 0) == ($2 | 0)) {
$$0 = -1;
STACKTOP = sp;
return $$0 | 0;
}
$88 = $2;
$89 = $0 + 328 | 0;
$90 = $0 + 332 | 0;
$91 = $0 + 336 | 0;
$$07290$i$i = $86;
L87 : while (1) {
switch (HEAP8[$6 + (HEAPU8[$$07290$i$i >> 0] | 0) >> 0] | 0) {
case 29:
{
label = 47;
break L87;
break;
}
case 10:
case 9:
case 21:
{
label = 46;
break L87;
break;
}
case 11:
{
label = 62;
break L87;
break;
}
case 27:
case 26:
case 25:
case 24:
case 22:
{
$$sink98$i$i = 1;
break;
}
case 5:
{
if (($88 - $$07290$i$i | 0) < 2) {
$$0 = -2;
label = 222;
break L87;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$89 >> 2] & 63]($0, $$07290$i$i) | 0)) {
label = 50;
break L87;
} else $$sink98$i$i = 2;
break;
}
case 6:
{
if (($88 - $$07290$i$i | 0) < 3) {
$$0 = -2;
label = 222;
break L87;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$90 >> 2] & 63]($0, $$07290$i$i) | 0)) {
label = 53;
break L87;
} else $$sink98$i$i = 3;
break;
}
case 7:
{
if (($88 - $$07290$i$i | 0) < 4) {
$$0 = -2;
label = 222;
break L87;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$91 >> 2] & 63]($0, $$07290$i$i) | 0)) {
label = 56;
break L87;
} else $$sink98$i$i = 4;
break;
}
default:
{
label = 63;
break L87;
}
}
$139 = $$07290$i$i + $$sink98$i$i | 0;
if (($139 | 0) == ($2 | 0)) {
$$0 = -1;
label = 222;
break;
} else $$07290$i$i = $139;
}
if ((label | 0) == 46) {
$$187$i$i = $$07290$i$i + 1 | 0;
if (($$187$i$i | 0) == ($2 | 0)) {
$$0 = -1;
STACKTOP = sp;
return $$0 | 0;
} else {
$$072$pn88$i$i = $$07290$i$i;
$$189$i$i = $$187$i$i;
}
L105 : while (1) {
switch (HEAP8[$6 + (HEAPU8[$$189$i$i >> 0] | 0) >> 0] | 0) {
case 11:
{
label = 60;
break L105;
break;
}
case 10:
case 9:
case 21:
break;
default:
{
label = 61;
break L105;
}
}
$$1$i$i = $$189$i$i + 1 | 0;
if (($$1$i$i | 0) == ($2 | 0)) {
$$0 = -1;
label = 222;
break;
} else {
$$072$pn88$i$i$phi = $$189$i$i;
$$189$i$i = $$1$i$i;
$$072$pn88$i$i = $$072$pn88$i$i$phi;
}
}
if ((label | 0) == 60) {
HEAP32[$3 >> 2] = $$072$pn88$i$i + 2;
$$0 = 5;
STACKTOP = sp;
return $$0 | 0;
} else if ((label | 0) == 61) {
HEAP32[$3 >> 2] = $$189$i$i;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else if ((label | 0) == 222) {
STACKTOP = sp;
return $$0 | 0;
}
} else if ((label | 0) == 47) {
HEAP32[$3 >> 2] = $$07290$i$i;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else if ((label | 0) == 50) {
HEAP32[$3 >> 2] = $$07290$i$i;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else if ((label | 0) == 53) {
HEAP32[$3 >> 2] = $$07290$i$i;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else if ((label | 0) == 56) {
HEAP32[$3 >> 2] = $$07290$i$i;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else if ((label | 0) == 62) {
HEAP32[$3 >> 2] = $$07290$i$i + 1;
$$0 = 5;
STACKTOP = sp;
return $$0 | 0;
} else if ((label | 0) == 63) {
HEAP32[$3 >> 2] = $$07290$i$i;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else if ((label | 0) == 222) {
STACKTOP = sp;
return $$0 | 0;
}
break;
}
default:
{
HEAP32[$3 >> 2] = $11;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
}
$17 = $11 + $$sink263$i | 0;
if (($17 | 0) == ($2 | 0)) {
$$0 = -1;
STACKTOP = sp;
return $$0 | 0;
}
$19 = $2;
$20 = $0 + 328 | 0;
$21 = $0 + 332 | 0;
$22 = $0 + 336 | 0;
$$0127255$i = $17;
L130 : while (1) {
switch (HEAP8[$6 + (HEAPU8[$$0127255$i >> 0] | 0) >> 0] | 0) {
case 29:
{
label = 67;
break L130;
break;
}
case 10:
case 9:
case 21:
{
label = 66;
break L130;
break;
}
case 11:
{
$$3$i = $$0127255$i;
label = 169;
break L130;
break;
}
case 17:
{
$$4$i = $$0127255$i;
break L130;
break;
}
case 27:
case 26:
case 25:
case 24:
case 22:
{
$$sink264$i = 1;
break;
}
case 5:
{
if (($19 - $$0127255$i | 0) < 2) {
$$0 = -2;
label = 222;
break L130;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$20 >> 2] & 63]($0, $$0127255$i) | 0)) {
label = 70;
break L130;
} else $$sink264$i = 2;
break;
}
case 6:
{
if (($19 - $$0127255$i | 0) < 3) {
$$0 = -2;
label = 222;
break L130;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$21 >> 2] & 63]($0, $$0127255$i) | 0)) {
label = 73;
break L130;
} else $$sink264$i = 3;
break;
}
case 7:
{
if (($19 - $$0127255$i | 0) < 4) {
$$0 = -2;
label = 222;
break L130;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$22 >> 2] & 63]($0, $$0127255$i) | 0)) {
label = 76;
break L130;
} else $$sink264$i = 4;
break;
}
default:
{
label = 174;
break L130;
}
}
$171 = $$0127255$i + $$sink264$i | 0;
if (($171 | 0) == ($2 | 0)) {
$$0 = -1;
label = 222;
break;
} else $$0127255$i = $171;
}
L140 : do if ((label | 0) == 66) {
$$1252$i = $$0127255$i + 1 | 0;
if (($$1252$i | 0) == ($2 | 0)) {
$$0 = -1;
STACKTOP = sp;
return $$0 | 0;
} else {
$$0127$pn253$i = $$0127255$i;
$$1254$i = $$1252$i;
}
L148 : while (1) {
switch (HEAP8[$6 + (HEAPU8[$$1254$i >> 0] | 0) >> 0] | 0) {
case 11:
{
$$3$i = $$1254$i;
label = 169;
break L140;
break;
}
case 17:
{
$$4$i = $$1254$i;
break L140;
break;
}
case 29:
{
label = 80;
break L148;
break;
}
case 24:
case 22:
{
$$sink$i = 2;
break L148;
break;
}
case 5:
{
label = 81;
break L148;
break;
}
case 6:
{
label = 84;
break L148;
break;
}
case 7:
{
label = 87;
break L148;
break;
}
case 10:
case 9:
case 21:
break;
default:
{
label = 90;
break L148;
}
}
$$1$i = $$1254$i + 1 | 0;
if (($$1$i | 0) == ($2 | 0)) {
$$0 = -1;
label = 222;
break;
} else {
$$0127$pn253$i$phi = $$1254$i;
$$1254$i = $$1$i;
$$0127$pn253$i = $$0127$pn253$i$phi;
}
}
if ((label | 0) == 80) {
HEAP32[$3 >> 2] = $$1254$i;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else if ((label | 0) == 81) {
if (($19 - $$1254$i | 0) < 2) {
$$0 = -2;
STACKTOP = sp;
return $$0 | 0;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 340 >> 2] & 63]($0, $$1254$i) | 0)) {
HEAP32[$3 >> 2] = $$1254$i;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else $$sink$i = 3;
} else if ((label | 0) == 84) {
if (($19 - $$1254$i | 0) < 3) {
$$0 = -2;
STACKTOP = sp;
return $$0 | 0;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 344 >> 2] & 63]($0, $$1254$i) | 0)) {
HEAP32[$3 >> 2] = $$1254$i;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else $$sink$i = 4;
} else if ((label | 0) == 87) {
if (($19 - $$1254$i | 0) < 4) {
$$0 = -2;
STACKTOP = sp;
return $$0 | 0;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 348 >> 2] & 63]($0, $$1254$i) | 0)) {
HEAP32[$3 >> 2] = $$1254$i;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else $$sink$i = 5;
} else if ((label | 0) == 90) {
HEAP32[$3 >> 2] = $$1254$i;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else if ((label | 0) == 222) {
STACKTOP = sp;
return $$0 | 0;
}
$199 = $$0127$pn253$i + $$sink$i | 0;
HEAP32[$4 >> 2] = $199;
L176 : do if (($199 | 0) == ($2 | 0)) $$9$i$i = -1; else {
$201 = $0 + 352 | 0;
$202 = $0 + 356 | 0;
$203 = $0 + 360 | 0;
$204 = $0 + 340 | 0;
$205 = $0 + 344 | 0;
$206 = $0 + 348 | 0;
$208 = $199;
L178 : while (1) {
L180 : do switch (HEAP8[$6 + (HEAPU8[$208 >> 0] | 0) >> 0] | 0) {
case 29:
{
label = 96;
break L178;
break;
}
case 27:
case 26:
case 25:
case 24:
case 22:
{
$217 = $208 + 1 | 0;
HEAP32[$4 >> 2] = $217;
$240 = $217;
break;
}
case 5:
{
if (($19 - $208 | 0) < 2) {
$$9$i$i = -2;
break L176;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$20 >> 2] & 63]($0, $208) | 0)) {
label = 100;
break L178;
}
$224 = $208 + 2 | 0;
HEAP32[$4 >> 2] = $224;
$240 = $224;
break;
}
case 6:
{
if (($19 - $208 | 0) < 3) {
$$9$i$i = -2;
break L176;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$21 >> 2] & 63]($0, $208) | 0)) {
label = 104;
break L178;
}
$231 = $208 + 3 | 0;
HEAP32[$4 >> 2] = $231;
$240 = $231;
break;
}
case 7:
{
if (($19 - $208 | 0) < 4) {
$$9$i$i = -2;
break L176;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$22 >> 2] & 63]($0, $208) | 0)) {
label = 108;
break L178;
}
$238 = $208 + 4 | 0;
HEAP32[$4 >> 2] = $238;
$240 = $238;
break;
}
case 10:
case 9:
case 21:
{
$212 = $208 + 1 | 0;
HEAP32[$4 >> 2] = $212;
if (($212 | 0) == ($2 | 0)) {
$$9$i$i = -1;
break L176;
} else $242 = $212;
while (1) {
switch (HEAP8[$6 + (HEAPU8[$242 >> 0] | 0) >> 0] | 0) {
case 14:
{
$215 = $242;
label = 95;
break L180;
break;
}
case 9:
case 10:
case 21:
break;
default:
{
label = 113;
break L178;
}
}
$246 = $242 + 1 | 0;
HEAP32[$4 >> 2] = $246;
if (($246 | 0) == ($2 | 0)) {
$$9$i$i = -1;
break L176;
} else $242 = $246;
}
break;
}
case 14:
{
$215 = $208;
label = 95;
break;
}
default:
{
label = 167;
break L178;
}
} while (0);
do if ((label | 0) == 95) {
label = 0;
$214 = $215 + 1 | 0;
HEAP32[$4 >> 2] = $214;
if (($214 | 0) == ($2 | 0)) {
$$9$i$i = -1;
break L176;
} else {
$249 = $214;
$258 = $215;
}
while (1) {
$252 = HEAP8[$6 + (HEAPU8[$249 >> 0] | 0) >> 0] | 0;
if (($252 | 1) << 24 >> 24 == 13) break;
switch ($252 << 24 >> 24) {
case 9:
case 10:
case 21:
break;
default:
{
label = 117;
break L178;
}
}
$255 = $249 + 1 | 0;
HEAP32[$4 >> 2] = $255;
if (($255 | 0) == ($2 | 0)) {
$$9$i$i = -1;
break L176;
} else {
$258$phi = $249;
$249 = $255;
$258 = $258$phi;
}
}
$257 = $258 + 2 | 0;
HEAP32[$4 >> 2] = $257;
if (($257 | 0) == ($2 | 0)) {
$$9$i$i = -1;
break L176;
} else $$in$i$i = $257;
while (1) {
$263 = HEAP8[$6 + (HEAPU8[$$in$i$i >> 0] | 0) >> 0] | 0;
if ($263 << 24 >> 24 == $252 << 24 >> 24) break;
switch ($263 << 24 >> 24) {
case 8:
case 1:
case 0:
{
label = 133;
break L178;
break;
}
case 2:
{
label = 139;
break L178;
break;
}
case 5:
{
if (($19 - $$in$i$i | 0) < 2) {
$$9$i$i = -2;
break L176;
}
if (FUNCTION_TABLE_iii[HEAP32[$201 >> 2] & 63]($0, $$in$i$i) | 0) {
label = 123;
break L178;
}
$271 = $$in$i$i + 2 | 0;
HEAP32[$4 >> 2] = $271;
$291 = $271;
break;
}
case 6:
{
if (($19 - $$in$i$i | 0) < 3) {
$$9$i$i = -2;
break L176;
}
if (FUNCTION_TABLE_iii[HEAP32[$202 >> 2] & 63]($0, $$in$i$i) | 0) {
label = 127;
break L178;
}
$278 = $$in$i$i + 3 | 0;
HEAP32[$4 >> 2] = $278;
$291 = $278;
break;
}
case 7:
{
if (($19 - $$in$i$i | 0) < 4) {
$$9$i$i = -2;
break L176;
}
if (FUNCTION_TABLE_iii[HEAP32[$203 >> 2] & 63]($0, $$in$i$i) | 0) {
label = 131;
break L178;
}
$285 = $$in$i$i + 4 | 0;
HEAP32[$4 >> 2] = $285;
$291 = $285;
break;
}
case 3:
{
$288 = _normal_scanRef($0, $$in$i$i + 1 | 0, $2, $4) | 0;
if (($288 | 0) < 1) {
label = 137;
break L178;
}
$291 = HEAP32[$4 >> 2] | 0;
break;
}
default:
{
$294 = $$in$i$i + 1 | 0;
HEAP32[$4 >> 2] = $294;
$291 = $294;
}
}
if (($291 | 0) == ($2 | 0)) {
$$9$i$i = -1;
break L176;
} else $$in$i$i = $291;
}
$295 = $$in$i$i + 1 | 0;
HEAP32[$4 >> 2] = $295;
if (($295 | 0) == ($2 | 0)) {
$$9$i$i = -1;
break L176;
}
switch (HEAP8[$6 + (HEAPU8[$295 >> 0] | 0) >> 0] | 0) {
case 11:
{
$333 = $295;
label = 161;
break L178;
break;
}
case 17:
{
$335 = $295;
label = 162;
break L178;
break;
}
case 10:
case 9:
case 21:
break;
default:
{
label = 144;
break L178;
}
}
$301 = $$in$i$i + 2 | 0;
HEAP32[$4 >> 2] = $301;
if (($301 | 0) == ($2 | 0)) {
$$9$i$i = -1;
break L176;
} else $304 = $301;
L222 : while (1) {
switch (HEAP8[$6 + (HEAPU8[$304 >> 0] | 0) >> 0] | 0) {
case 29:
{
label = 147;
break L178;
break;
}
case 11:
{
$333 = $304;
label = 161;
break L178;
break;
}
case 17:
{
$335 = $304;
label = 162;
break L178;
break;
}
case 24:
case 22:
{
label = 148;
break L222;
break;
}
case 5:
{
label = 149;
break L222;
break;
}
case 6:
{
label = 153;
break L222;
break;
}
case 7:
{
label = 157;
break L222;
break;
}
case 10:
case 9:
case 21:
break;
default:
{
label = 166;
break L178;
}
}
$308 = $304 + 1 | 0;
HEAP32[$4 >> 2] = $308;
if (($308 | 0) == ($2 | 0)) {
$$9$i$i = -1;
break L176;
} else $304 = $308;
}
if ((label | 0) == 148) {
label = 0;
$310 = $304 + 1 | 0;
HEAP32[$4 >> 2] = $310;
$240 = $310;
break;
} else if ((label | 0) == 149) {
label = 0;
if (($19 - $304 | 0) < 2) {
$$9$i$i = -2;
break L176;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$204 >> 2] & 63]($0, $304) | 0)) {
label = 151;
break L178;
}
$317 = $304 + 2 | 0;
HEAP32[$4 >> 2] = $317;
$240 = $317;
break;
} else if ((label | 0) == 153) {
label = 0;
if (($19 - $304 | 0) < 3) {
$$9$i$i = -2;
break L176;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$205 >> 2] & 63]($0, $304) | 0)) {
label = 155;
break L178;
}
$324 = $304 + 3 | 0;
HEAP32[$4 >> 2] = $324;
$240 = $324;
break;
} else if ((label | 0) == 157) {
label = 0;
if (($19 - $304 | 0) < 4) {
$$9$i$i = -2;
break L176;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$206 >> 2] & 63]($0, $304) | 0)) {
label = 159;
break L178;
}
$331 = $304 + 4 | 0;
HEAP32[$4 >> 2] = $331;
$240 = $331;
break;
}
} while (0);
if (($240 | 0) == ($2 | 0)) {
$$9$i$i = -1;
break L176;
} else $208 = $240;
}
switch (label | 0) {
case 96:
{
HEAP32[$3 >> 2] = $208;
$$9$i$i = 0;
break L176;
break;
}
case 100:
{
HEAP32[$3 >> 2] = $208;
$$9$i$i = 0;
break L176;
break;
}
case 104:
{
HEAP32[$3 >> 2] = $208;
$$9$i$i = 0;
break L176;
break;
}
case 108:
{
HEAP32[$3 >> 2] = $208;
$$9$i$i = 0;
break L176;
break;
}
case 113:
{
HEAP32[$3 >> 2] = $242;
$$9$i$i = 0;
break L176;
break;
}
case 117:
{
HEAP32[$3 >> 2] = $249;
$$9$i$i = 0;
break L176;
break;
}
case 123:
{
HEAP32[$3 >> 2] = $$in$i$i;
$$9$i$i = 0;
break L176;
break;
}
case 127:
{
HEAP32[$3 >> 2] = $$in$i$i;
$$9$i$i = 0;
break L176;
break;
}
case 131:
{
HEAP32[$3 >> 2] = $$in$i$i;
$$9$i$i = 0;
break L176;
break;
}
case 133:
{
HEAP32[$3 >> 2] = $$in$i$i;
$$9$i$i = 0;
break L176;
break;
}
case 137:
{
if ($288 | 0) {
$$9$i$i = $288;
break L176;
}
HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
$$9$i$i = 0;
break L176;
break;
}
case 139:
{
HEAP32[$3 >> 2] = $$in$i$i;
$$9$i$i = 0;
break L176;
break;
}
case 144:
{
HEAP32[$3 >> 2] = $295;
$$9$i$i = 0;
break L176;
break;
}
case 147:
{
HEAP32[$3 >> 2] = $304;
$$9$i$i = 0;
break L176;
break;
}
case 151:
{
HEAP32[$3 >> 2] = $304;
$$9$i$i = 0;
break L176;
break;
}
case 155:
{
HEAP32[$3 >> 2] = $304;
$$9$i$i = 0;
break L176;
break;
}
case 159:
{
HEAP32[$3 >> 2] = $304;
$$9$i$i = 0;
break L176;
break;
}
case 161:
{
HEAP32[$3 >> 2] = $333 + 1;
$$9$i$i = 1;
break L176;
break;
}
case 162:
{
$334 = $335 + 1 | 0;
HEAP32[$4 >> 2] = $334;
if (($334 | 0) == ($2 | 0)) {
$$9$i$i = -1;
break L176;
}
if ((HEAP8[$334 >> 0] | 0) == 62) {
HEAP32[$3 >> 2] = $335 + 2;
$$9$i$i = 3;
break L176;
} else {
HEAP32[$3 >> 2] = $334;
$$9$i$i = 0;
break L176;
}
break;
}
case 166:
{
HEAP32[$3 >> 2] = $304;
$$9$i$i = 0;
break L176;
break;
}
case 167:
{
HEAP32[$3 >> 2] = $208;
$$9$i$i = 0;
break L176;
break;
}
}
} while (0);
$$0 = $$9$i$i;
STACKTOP = sp;
return $$0 | 0;
} else if ((label | 0) == 67) {
HEAP32[$3 >> 2] = $$0127255$i;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else if ((label | 0) == 70) {
HEAP32[$3 >> 2] = $$0127255$i;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else if ((label | 0) == 73) {
HEAP32[$3 >> 2] = $$0127255$i;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else if ((label | 0) == 76) {
HEAP32[$3 >> 2] = $$0127255$i;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else if ((label | 0) == 174) {
HEAP32[$3 >> 2] = $$0127255$i;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else if ((label | 0) == 222) {
STACKTOP = sp;
return $$0 | 0;
} while (0);
if ((label | 0) == 169) {
HEAP32[$3 >> 2] = $$3$i + 1;
$$0 = 2;
STACKTOP = sp;
return $$0 | 0;
}
$341 = $$4$i + 1 | 0;
if (($341 | 0) == ($2 | 0)) {
$$0 = -1;
STACKTOP = sp;
return $$0 | 0;
}
if ((HEAP8[$341 >> 0] | 0) == 62) {
HEAP32[$3 >> 2] = $$4$i + 2;
$$0 = 4;
STACKTOP = sp;
return $$0 | 0;
} else {
HEAP32[$3 >> 2] = $341;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
break;
}
case 3:
{
$$0 = _normal_scanRef($0, $1 + 1 | 0, $2, $3) | 0;
STACKTOP = sp;
return $$0 | 0;
}
case 9:
{
$348 = $1 + 1 | 0;
if (($348 | 0) == ($2 | 0)) {
$$0 = -3;
STACKTOP = sp;
return $$0 | 0;
}
HEAP32[$3 >> 2] = (HEAP8[$6 + (HEAPU8[$348 >> 0] | 0) >> 0] | 0) == 10 ? $1 + 2 | 0 : $348;
$$0 = 7;
STACKTOP = sp;
return $$0 | 0;
}
case 10:
{
HEAP32[$3 >> 2] = $1 + 1;
$$0 = 7;
STACKTOP = sp;
return $$0 | 0;
}
case 4:
{
$357 = $1 + 1 | 0;
if (($357 | 0) == ($2 | 0)) {
$$0 = -5;
STACKTOP = sp;
return $$0 | 0;
}
if ((HEAP8[$357 >> 0] | 0) == 93) {
$361 = $1 + 2 | 0;
if (($361 | 0) == ($2 | 0)) {
$$0 = -5;
STACKTOP = sp;
return $$0 | 0;
}
if ((HEAP8[$361 >> 0] | 0) == 62) {
HEAP32[$3 >> 2] = $361;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else $$1$ph = $357;
} else $$1$ph = $357;
break;
}
case 5:
{
if (($2 - $1 | 0) < 2) {
$$0 = -2;
STACKTOP = sp;
return $$0 | 0;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 352 >> 2] & 63]($0, $1) | 0)) {
$$1$ph = $1 + 2 | 0;
break L4;
}
HEAP32[$3 >> 2] = $1;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
case 6:
{
if (($2 - $1 | 0) < 3) {
$$0 = -2;
STACKTOP = sp;
return $$0 | 0;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 356 >> 2] & 63]($0, $1) | 0)) {
$$1$ph = $1 + 3 | 0;
break L4;
}
HEAP32[$3 >> 2] = $1;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
case 7:
{
if (($2 - $1 | 0) < 4) {
$$0 = -2;
STACKTOP = sp;
return $$0 | 0;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 360 >> 2] & 63]($0, $1) | 0)) {
$$1$ph = $1 + 4 | 0;
break L4;
}
HEAP32[$3 >> 2] = $1;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
case 8:
case 1:
case 0:
{
HEAP32[$3 >> 2] = $1;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
default:
$$1$ph = $1 + 1 | 0;
} while (0);
L334 : do if (($$1$ph | 0) != ($2 | 0)) {
$394 = $2;
$395 = $0 + 352 | 0;
$396 = $0 + 356 | 0;
$397 = $0 + 360 | 0;
$$1220 = $$1$ph;
L336 : while (1) {
switch (HEAP8[$6 + (HEAPU8[$$1220 >> 0] | 0) >> 0] | 0) {
case 10:
case 9:
case 8:
case 1:
case 0:
case 2:
case 3:
{
label = 218;
break L336;
break;
}
case 5:
{
if (($394 - $$1220 | 0) < 2) {
label = 203;
break L336;
}
if (FUNCTION_TABLE_iii[HEAP32[$395 >> 2] & 63]($0, $$1220) | 0) {
label = 203;
break L336;
}
$$1$be = $$1220 + 2 | 0;
break;
}
case 6:
{
if (($394 - $$1220 | 0) < 3) {
label = 207;
break L336;
}
if (FUNCTION_TABLE_iii[HEAP32[$396 >> 2] & 63]($0, $$1220) | 0) {
label = 207;
break L336;
}
$$1$be = $$1220 + 3 | 0;
break;
}
case 7:
{
if (($394 - $$1220 | 0) < 4) {
label = 211;
break L336;
}
if (FUNCTION_TABLE_iii[HEAP32[$397 >> 2] & 63]($0, $$1220) | 0) {
label = 211;
break L336;
}
$$1$be = $$1220 + 4 | 0;
break;
}
case 4:
{
$423 = $$1220 + 1 | 0;
if (($423 | 0) == ($2 | 0)) {
label = 218;
break L336;
}
if ((HEAP8[$423 >> 0] | 0) == 93) {
$427 = $$1220 + 2 | 0;
if (($427 | 0) == ($2 | 0)) {
label = 218;
break L336;
}
if ((HEAP8[$427 >> 0] | 0) == 62) {
label = 217;
break L336;
} else $$1$be = $423;
} else $$1$be = $423;
break;
}
default:
$$1$be = $$1220 + 1 | 0;
}
if (($$1$be | 0) == ($2 | 0)) break L334; else $$1220 = $$1$be;
}
if ((label | 0) == 203) {
HEAP32[$3 >> 2] = $$1220;
$$0 = 6;
STACKTOP = sp;
return $$0 | 0;
} else if ((label | 0) == 207) {
HEAP32[$3 >> 2] = $$1220;
$$0 = 6;
STACKTOP = sp;
return $$0 | 0;
} else if ((label | 0) == 211) {
HEAP32[$3 >> 2] = $$1220;
$$0 = 6;
STACKTOP = sp;
return $$0 | 0;
} else if ((label | 0) == 217) {
HEAP32[$3 >> 2] = $427;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else if ((label | 0) == 218) {
HEAP32[$3 >> 2] = $$1220;
$$0 = 6;
STACKTOP = sp;
return $$0 | 0;
}
} while (0);
HEAP32[$3 >> 2] = $2;
$$0 = 6;
STACKTOP = sp;
return $$0 | 0;
}
function __ZN11HanimAvatar19createSiGMLArmSitesEv($0) {
$0 = $0 | 0;
var $$ = f0, $$0330 = f0, $$0330$1 = f0, $$0332 = f0, $$0332$1 = f0, $$0334 = f0, $$pre$phi449Z2D = 0, $$pre$phi451Z2D = 0, $$pre$phi453Z2D = 0, $$pre$phi455Z2D = 0, $$pre$phi457Z2D = 0, $$pre$phiZ2D = 0, $$sroa$0$0$copyload = 0, $$sroa$0405$0$copyload = 0, $$sroa$0407$0$copyload = 0, $$sroa$0409$0$copyload = 0, $$sroa$0411$0$copyload = 0, $1 = 0, $10 = 0, $100 = f0, $102 = f0, $104 = 0, $107 = f0, $108 = 0, $109 = f0, $11 = 0, $110 = 0, $112 = f0, $113 = f0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $123 = 0, $126 = f0, $127 = 0, $129 = f0, $13 = 0, $130 = 0, $132 = f0, $133 = f0, $134 = f0, $135 = 0, $137 = 0, $138 = f0, $139 = f0, $14 = 0, $140 = 0, $141 = 0, $145 = 0, $147 = 0, $15 = 0, $153 = 0, $155 = f0, $156 = f0, $158 = f0, $16 = 0, $160 = f0, $161 = 0, $162 = 0, $166 = 0, $168 = 0, $17 = 0, $174 = f0, $175 = f0, $178 = f0, $18 = 0, $180 = 0, $181 = f0, $182 = 0, $185 = 0, $186 = f0, $187 = 0, $189 = f0, $19 = 0, $191 = f0, $194 = f0, $195 = f0, $196 = f0, $198 = f0, $2 = 0, $20 = 0, $201 = f0, $202 = f0, $203 = f0, $204 = 0, $206 = 0, $21 = 0, $210 = 0, $212 = 0, $22 = 0, $220 = f0, $221 = f0, $222 = f0, $223 = f0, $224 = 0, $226 = 0, $227 = f0, $229 = f0, $23 = 0, $230 = f0, $232 = f0, $233 = f0, $236 = f0, $237 = f0, $24 = 0, $240 = f0, $242 = f0, $243 = f0, $244 = 0, $246 = 0, $249 = f0, $250 = f0, $252 = 0.0, $253 = 0, $255 = 0, $257 = f0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $265 = 0, $266 = 0, $267 = 0, $269 = 0, $27 = f0, $271 = f0, $272 = 0, $273 = f0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = f0, $280 = 0, $283 = f0, $287 = f0, $288 = 0, $289 = f0, $29 = f0, $292 = f0, $294 = f0, $297 = f0, $299 = f0, $3 = 0, $30 = 0, $303 = f0, $304 = 0, $308 = 0, $31 = 0, $312 = 0, $314 = 0, $32 = 0, $323 = 0, $327 = 0, $329 = f0, $33 = 0, $331 = f0, $332 = f0, $335 = f0, $338 = f0, $34 = 0, $341 = f0, $342 = f0, $348 = f0, $349 = 0, $35 = 0, $350 = 0, $354 = 0, $356 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $41 = 0, $45 = 0, $47 = f0, $49 = f0, $5 = 0, $50 = f0, $53 = f0, $56 = f0, $59 = f0, $6 = 0, $60 = f0, $66 = f0, $67 = 0, $68 = 0, $7 = 0, $72 = 0, $74 = 0, $8 = 0, $80 = 0, $81 = 0, $83 = 0, $84 = 0, $86 = 0, $88 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = f0, $96 = 0, $97 = f0, $98 = f0, $indvars$iv = 0, $indvars$iv426 = 0, $indvars$iv429 = 0, $indvars$iv432 = 0, $indvars$iv435 = 0, $indvars$iv439 = 0, $indvars$iv442 = 0, $indvars$iv442$1 = 0, $switch350 = 0, $tmpcast341$byval_copy = 0, $tmpcast348$byval_copy9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 192 | 0;
$tmpcast348$byval_copy9 = sp + 180 | 0;
$tmpcast341$byval_copy = sp + 168 | 0;
$vararg_buffer = sp;
$1 = sp + 92 | 0;
$2 = sp + 164 | 0;
$3 = sp + 80 | 0;
$4 = sp + 68 | 0;
$5 = sp + 160 | 0;
$6 = sp + 56 | 0;
$7 = sp + 44 | 0;
$8 = sp + 156 | 0;
$9 = sp + 152 | 0;
$10 = sp + 148 | 0;
$11 = sp + 144 | 0;
$12 = sp + 140 | 0;
$13 = sp + 136 | 0;
$14 = sp + 32 | 0;
$15 = sp + 20 | 0;
$16 = sp + 8 | 0;
$17 = sp + 132 | 0;
$18 = sp + 128 | 0;
$19 = sp + 124 | 0;
$20 = sp + 120 | 0;
$21 = sp + 116 | 0;
$22 = sp + 112 | 0;
$23 = sp + 108 | 0;
$24 = sp + 104 | 0;
$26 = __ZN7XMLCell7elementEPKc(HEAP32[16168] | 0, 49746) | 0;
$27 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($26, 22678, Math_fround(.0540000014)));
$28 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($26, 22688, Math_fround(1.29999995)));
$29 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($26, 22706, Math_fround(.0270000007)));
$30 = $0 + 72 | 0;
$31 = HEAP32[17839] | 0;
$32 = $31 + 12 | 0;
$33 = $31 + 8 | 0;
$34 = $31 + 4 | 0;
$indvars$iv442 = 0;
do {
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($tmpcast341$byval_copy, 7, 2, 0, 1 << $indvars$iv442 & 65535, 1, 0);
$41 = HEAP32[$30 >> 2] | 0;
$45 = HEAP32[$41 + 52 + ($indvars$iv442 * 12 | 0) + 8 >> 2] | 0;
$47 = Math_fround(HEAPF32[(HEAP32[$41 + 52 + ($indvars$iv442 * 12 | 0) + 4 >> 2] | 0) + 72 >> 2]);
$49 = Math_fround(HEAPF32[$45 + 72 >> 2]);
$50 = Math_fround($47 - $49);
$53 = Math_fround($50 * Math_fround(HEAPF32[64824 + ($indvars$iv442 << 2) >> 2]));
if (!$indvars$iv442) {
$56 = Math_fround($53 / Math_fround(HEAPF32[16543]));
$$0330 = $56;
$$0332 = $56;
} else {
$$0330 = $53;
$$0332 = Math_fround(0.0);
}
HEAP32[$2 >> 2] = HEAP32[$tmpcast341$byval_copy >> 2];
$59 = Math_fround(HEAPF32[$45 + 68 >> 2]);
$60 = Math_fround($49 - $$0330);
__ZN6VectorC2Efff($1, $59, $60, Math_fround($$0332 + Math_fround(HEAPF32[$45 + 76 >> 2])));
$66 = Math_fround(Math_fround(HEAPF32[$45 + 28 >> 2]) * Math_fround(.25));
HEAP8[$tmpcast348$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 1 >> 0] = HEAP8[$2 + 1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 2 >> 0] = HEAP8[$2 + 2 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 3 >> 0] = HEAP8[$2 + 3 >> 0] | 0;
$67 = __ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast348$byval_copy9, $45, $1, $66) | 0;
$68 = HEAP32[$32 >> 2] | 0;
if (($68 | 0) >= 0) {
if ((HEAP32[$33 >> 2] | 0) > ($68 | 0)) {
$$pre$phi457Z2D = $68 + 1 | 0;
label = 9;
} else {
$72 = HEAP32[$34 >> 2] | 0;
$74 = $68 + 1 | 0;
__ZN13DynamicArrayPI4SiteE6resizeEi($31, ($72 | 0) > ($68 | 0) ? $72 : $74 + ($68 >>> 1) | 0);
if ((HEAP32[$32 >> 2] | 0) <= ($68 | 0)) {
$$pre$phi457Z2D = $74;
label = 9;
}
}
if ((label | 0) == 9) {
label = 0;
HEAP32[$32 >> 2] = $$pre$phi457Z2D;
}
HEAP32[(HEAP32[$31 >> 2] | 0) + ($68 << 2) >> 2] = $67;
}
$indvars$iv442 = $indvars$iv442 + 1 | 0;
} while (($indvars$iv442 | 0) != 5);
$35 = HEAP32[17840] | 0;
$36 = $35 + 12 | 0;
$37 = $35 + 8 | 0;
$38 = $35 + 4 | 0;
$indvars$iv442$1 = 0;
do {
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($tmpcast341$byval_copy, 7, 1, 0, 1 << $indvars$iv442$1 & 65535, 1, 0);
$323 = HEAP32[$30 >> 2] | 0;
$327 = HEAP32[$323 + 112 + ($indvars$iv442$1 * 12 | 0) + 8 >> 2] | 0;
$329 = Math_fround(HEAPF32[(HEAP32[$323 + 112 + ($indvars$iv442$1 * 12 | 0) + 4 >> 2] | 0) + 72 >> 2]);
$331 = Math_fround(HEAPF32[$327 + 72 >> 2]);
$332 = Math_fround($329 - $331);
$335 = Math_fround($332 * Math_fround(HEAPF32[64844 + ($indvars$iv442$1 << 2) >> 2]));
if (!$indvars$iv442$1) {
$338 = Math_fround($335 / Math_fround(HEAPF32[16543]));
$$0330$1 = $338;
$$0332$1 = $338;
} else {
$$0330$1 = $335;
$$0332$1 = Math_fround(0.0);
}
HEAP32[$2 >> 2] = HEAP32[$tmpcast341$byval_copy >> 2];
$341 = Math_fround(HEAPF32[$327 + 68 >> 2]);
$342 = Math_fround($331 - $$0330$1);
__ZN6VectorC2Efff($1, $341, $342, Math_fround($$0332$1 + Math_fround(HEAPF32[$327 + 76 >> 2])));
$348 = Math_fround(Math_fround(HEAPF32[$327 + 28 >> 2]) * Math_fround(.25));
HEAP8[$tmpcast348$byval_copy9 >> 0] = HEAP8[$2 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 1 >> 0] = HEAP8[$2 + 1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 2 >> 0] = HEAP8[$2 + 2 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 3 >> 0] = HEAP8[$2 + 3 >> 0] | 0;
$349 = __ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast348$byval_copy9, $327, $1, $348) | 0;
$350 = HEAP32[$36 >> 2] | 0;
if (($350 | 0) >= 0) {
if ((HEAP32[$37 >> 2] | 0) > ($350 | 0)) {
$$pre$phi455Z2D = $350 + 1 | 0;
label = 63;
} else {
$354 = HEAP32[$38 >> 2] | 0;
$356 = $350 + 1 | 0;
__ZN13DynamicArrayPI4SiteE6resizeEi($35, ($354 | 0) > ($350 | 0) ? $354 : $356 + ($350 >>> 1) | 0);
if ((HEAP32[$36 >> 2] | 0) <= ($350 | 0)) {
$$pre$phi455Z2D = $356;
label = 63;
}
}
if ((label | 0) == 63) {
label = 0;
HEAP32[$36 >> 2] = $$pre$phi455Z2D;
}
HEAP32[(HEAP32[$35 >> 2] | 0) + ($350 << 2) >> 2] = $349;
}
$indvars$iv442$1 = $indvars$iv442$1 + 1 | 0;
} while (($indvars$iv442$1 | 0) != 5);
$220 = Math_fround(Math_fround(__ZN7XMLCell11attrib_REALEPKcf($26, 22769, Math_fround(.0820000023))) * Math_fround(.5));
$240 = Math_fround(Math_fround(__ZN7XMLCell11attrib_REALEPKcf($26, 22786, Math_fround(.109999999))) * Math_fround(.5));
$98 = Math_fround($28 * Math_fround(2.0));
$224 = $3 + 4 | 0;
$226 = $3 + 8 | 0;
$244 = $4 + 4 | 0;
$246 = $4 + 8 | 0;
$135 = $6 + 4 | 0;
$137 = $6 + 8 | 0;
$180 = $15 + 4 | 0;
$253 = HEAP32[1832] | 0;
$indvars$iv439 = 0;
do {
$83 = HEAP32[71356 + ($indvars$iv439 << 2) >> 2] | 0;
$84 = HEAP32[$30 >> 2] | 0;
$86 = HEAP32[$84 + 20 + ($indvars$iv439 << 4) + 12 >> 2] | 0;
$88 = HEAP32[$84 + 20 + ($indvars$iv439 << 4) + 8 >> 2] | 0;
$90 = HEAP32[$84 + 20 + ($indvars$iv439 << 4) + 4 >> 2] | 0;
$91 = $86 + 68 | 0;
$92 = $88 + 68 | 0;
$93 = $90 + 68 | 0;
__ZN6VectorC2Ev($3);
__ZN6VectorC2EPKS_($tmpcast348$byval_copy9, $92);
__ZN6VectorC2EPKS_($tmpcast341$byval_copy, $91);
__ZN6Vector11setMidPointERKS_S1_f($3, $tmpcast348$byval_copy9, $tmpcast341$byval_copy, Math_fround(.5));
__ZN6VectorC2Ev($4);
__ZN6VectorC2EPKS_($tmpcast348$byval_copy9, $93);
__ZN6VectorC2EPKS_($tmpcast341$byval_copy, $92);
__ZN6Vector11setMidPointERKS_S1_f($4, $tmpcast348$byval_copy9, $tmpcast341$byval_copy, Math_fround(.5));
$94 = $86 + 28 | 0;
$95 = Math_fround(HEAPF32[$94 >> 2]);
$96 = $95 == Math_fround(0.0);
$$0334 = $96 ? $27 : $95;
$97 = Math_fround($$0334 / $98);
$100 = Math_fround(Math_fround($28 * $$0334) * Math_fround(.5));
$102 = ($indvars$iv439 | 0) == 1 ? Math_fround(1.0) : Math_fround(-1.0);
$104 = HEAP32[1744 + ($indvars$iv439 << 2) >> 2] | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($5, 6, $104, 0, 0, 1, 0);
$107 = Math_fround(Math_fround(HEAPF32[$91 >> 2]) + Math_fround($102 * $97));
$108 = $86 + 72 | 0;
$109 = Math_fround(HEAPF32[$108 >> 2]);
$110 = $86 + 76 | 0;
__ZN6VectorC2Efff($6, $107, $109, Math_fround(HEAPF32[$110 >> 2]));
$112 = Math_fround(HEAPF32[$94 >> 2]);
__ZN6VectorC2Efff($7, $102, Math_fround(0.0), Math_fround(0.0));
$113 = Math_fround(HEAPF32[16216]);
$$sroa$0$0$copyload = HEAP32[$5 >> 2] | 0;
HEAP32[$tmpcast341$byval_copy >> 2] = $$sroa$0$0$copyload;
HEAP8[$tmpcast348$byval_copy9 >> 0] = HEAP8[$tmpcast341$byval_copy >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 1 >> 0] = HEAP8[$tmpcast341$byval_copy + 1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 2 >> 0] = HEAP8[$tmpcast341$byval_copy + 2 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 3 >> 0] = HEAP8[$tmpcast341$byval_copy + 3 >> 0] | 0;
__ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast348$byval_copy9, $86, $6, $112) | 0;
HEAP32[$1 >> 2] = $$sroa$0$0$copyload;
HEAP8[$tmpcast348$byval_copy9 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $tmpcast348$byval_copy9, $7, $113);
$114 = $83 + 12 | 0;
$115 = $83 + 8 | 0;
$116 = $83 + 4 | 0;
$117 = $88 + 28 | 0;
$118 = $88 + 72 | 0;
$119 = $88 + 76 | 0;
$120 = $90 + 28 | 0;
$indvars$iv435 = 1;
do {
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($8, 6, $104, $indvars$iv435, 0, 1, 0);
$189 = Math_fround(HEAPF32[$91 >> 2]);
$191 = Math_fround(HEAPF32[1768 + ($indvars$iv435 << 2) >> 2]);
$194 = Math_fround($189 + Math_fround($102 * Math_fround($97 * $191)));
$195 = Math_fround(HEAPF32[$108 >> 2]);
$196 = Math_fround(HEAPF32[$110 >> 2]);
$198 = Math_fround(HEAPF32[1788 + ($indvars$iv435 << 2) >> 2]);
__ZN6VectorC2Efff($6, $194, $195, Math_fround($196 + Math_fround($100 * $198)));
$201 = Math_fround(HEAPF32[$94 >> 2]);
$202 = Math_fround($102 * $191);
__ZN6VectorC2Efff($7, $202, Math_fround(0.0), $198);
$203 = Math_fround(HEAPF32[16216]);
$$sroa$0405$0$copyload = HEAP32[$8 >> 2] | 0;
HEAP32[$tmpcast341$byval_copy >> 2] = $$sroa$0405$0$copyload;
HEAP8[$tmpcast348$byval_copy9 >> 0] = HEAP8[$tmpcast341$byval_copy >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 1 >> 0] = HEAP8[$tmpcast341$byval_copy + 1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 2 >> 0] = HEAP8[$tmpcast341$byval_copy + 2 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 3 >> 0] = HEAP8[$tmpcast341$byval_copy + 3 >> 0] | 0;
$204 = __ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast348$byval_copy9, $86, $6, $201) | 0;
HEAP32[$1 >> 2] = $$sroa$0405$0$copyload;
HEAP8[$tmpcast348$byval_copy9 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $tmpcast348$byval_copy9, $7, $203);
if (($indvars$iv435 + -1 | 0) >>> 0 < 2) {
$206 = HEAP32[$114 >> 2] | 0;
if (($206 | 0) >= 0) {
if ((HEAP32[$115 >> 2] | 0) > ($206 | 0)) {
$$pre$phi453Z2D = $206 + 1 | 0;
label = 32;
} else {
$210 = HEAP32[$116 >> 2] | 0;
$212 = $206 + 1 | 0;
__ZN13DynamicArrayPI4SiteE6resizeEi($83, ($210 | 0) > ($206 | 0) ? $210 : $212 + ($206 >>> 1) | 0);
if ((HEAP32[$114 >> 2] | 0) <= ($206 | 0)) {
$$pre$phi453Z2D = $212;
label = 32;
}
}
if ((label | 0) == 32) {
label = 0;
HEAP32[$114 >> 2] = $$pre$phi453Z2D;
}
HEAP32[(HEAP32[$83 >> 2] | 0) + ($206 << 2) >> 2] = $204;
}
}
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($9, 12, $104, $indvars$iv435, 0, 1, 0);
$221 = Math_fround($102 * Math_fround($220 * $191));
$222 = Math_fround(Math_fround(HEAPF32[$3 >> 2]) + $221);
$223 = Math_fround(HEAPF32[$224 >> 2]);
$227 = Math_fround($220 * $198);
__ZN6VectorC2Efff($6, $222, $223, Math_fround(Math_fround(HEAPF32[$226 >> 2]) + $227));
$229 = Math_fround(HEAPF32[$117 >> 2]);
__ZN6VectorC2Efff($7, $202, Math_fround(0.0), $198);
$230 = Math_fround(HEAPF32[16217]);
$$sroa$0409$0$copyload = HEAP32[$9 >> 2] | 0;
HEAP32[$tmpcast341$byval_copy >> 2] = $$sroa$0409$0$copyload;
HEAP8[$tmpcast348$byval_copy9 >> 0] = HEAP8[$tmpcast341$byval_copy >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 1 >> 0] = HEAP8[$tmpcast341$byval_copy + 1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 2 >> 0] = HEAP8[$tmpcast341$byval_copy + 2 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 3 >> 0] = HEAP8[$tmpcast341$byval_copy + 3 >> 0] | 0;
__ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast348$byval_copy9, $88, $6, $229) | 0;
HEAP32[$1 >> 2] = $$sroa$0409$0$copyload;
HEAP8[$tmpcast348$byval_copy9 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $tmpcast348$byval_copy9, $7, $230);
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($10, 13, $104, $indvars$iv435, 0, 1, 0);
$232 = Math_fround(Math_fround(HEAPF32[$92 >> 2]) + $221);
$233 = Math_fround(HEAPF32[$118 >> 2]);
__ZN6VectorC2Efff($6, $232, $233, Math_fround(Math_fround(HEAPF32[$119 >> 2]) + $227));
$236 = Math_fround(HEAPF32[$117 >> 2]);
__ZN6VectorC2Efff($7, $202, Math_fround(0.0), $198);
$237 = Math_fround(HEAPF32[16217]);
$$sroa$0411$0$copyload = HEAP32[$10 >> 2] | 0;
HEAP32[$tmpcast341$byval_copy >> 2] = $$sroa$0411$0$copyload;
HEAP8[$tmpcast348$byval_copy9 >> 0] = HEAP8[$tmpcast341$byval_copy >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 1 >> 0] = HEAP8[$tmpcast341$byval_copy + 1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 2 >> 0] = HEAP8[$tmpcast341$byval_copy + 2 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 3 >> 0] = HEAP8[$tmpcast341$byval_copy + 3 >> 0] | 0;
__ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast348$byval_copy9, $88, $6, $236) | 0;
HEAP32[$1 >> 2] = $$sroa$0411$0$copyload;
HEAP8[$tmpcast348$byval_copy9 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $tmpcast348$byval_copy9, $7, $237);
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($11, 15, $104, $indvars$iv435, 0, 1, 0);
$242 = Math_fround(Math_fround(HEAPF32[$4 >> 2]) + Math_fround($102 * Math_fround($240 * $191)));
$243 = Math_fround(HEAPF32[$244 >> 2]);
__ZN6VectorC2Efff($6, $242, $243, Math_fround(Math_fround(HEAPF32[$246 >> 2]) + Math_fround($240 * $198)));
$249 = Math_fround(HEAPF32[$120 >> 2]);
__ZN6VectorC2Efff($7, $202, Math_fround(0.0), $198);
$250 = Math_fround(HEAPF32[16217]);
$$sroa$0407$0$copyload = HEAP32[$11 >> 2] | 0;
HEAP32[$tmpcast341$byval_copy >> 2] = $$sroa$0407$0$copyload;
HEAP8[$tmpcast348$byval_copy9 >> 0] = HEAP8[$tmpcast341$byval_copy >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 1 >> 0] = HEAP8[$tmpcast341$byval_copy + 1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 2 >> 0] = HEAP8[$tmpcast341$byval_copy + 2 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 3 >> 0] = HEAP8[$tmpcast341$byval_copy + 3 >> 0] | 0;
__ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast348$byval_copy9, $90, $6, $249) | 0;
HEAP32[$1 >> 2] = $$sroa$0407$0$copyload;
HEAP8[$tmpcast348$byval_copy9 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $tmpcast348$byval_copy9, $7, $250);
$indvars$iv435 = $indvars$iv435 + 1 | 0;
} while (($indvars$iv435 | 0) != 5);
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($12, 13, $104, 1, 0, 1, 0);
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($13, 14, $104, 0, 0, 1, 0);
HEAP32[$tmpcast341$byval_copy >> 2] = HEAP32[$12 >> 2];
HEAP8[$tmpcast348$byval_copy9 >> 0] = HEAP8[$13 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 1 >> 0] = HEAP8[$13 + 1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 2 >> 0] = HEAP8[$13 + 2 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 3 >> 0] = HEAP8[$13 + 3 >> 0] | 0;
__ZN11HanimAvatar13duplicateSiteE6SiteIDS0_($0, $tmpcast341$byval_copy, $tmpcast348$byval_copy9) | 0;
$123 = HEAP32[(HEAP32[$30 >> 2] | 0) + 52 + ($indvars$iv439 * 60 | 0) + 24 >> 2] | 0;
__ZN6VectorC2Ev($6);
__ZN6VectorC2EPKS_($tmpcast348$byval_copy9, $91);
__ZN6VectorC2EPKS_($tmpcast341$byval_copy, $123 + 68 | 0);
__ZN6Vector11setMidPointERKS_S1_f($6, $tmpcast348$byval_copy9, $tmpcast341$byval_copy, Math_fround(.600000024));
$126 = Math_fround(HEAPF32[$123 + 28 >> 2]);
$127 = $126 == Math_fround(0.0);
$129 = Math_fround(Math_fround(($127 ? $29 : $126) * Math_fround(1.20000005)) * Math_fround(.5));
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($7, 1, $104, 0, 0, 1, 0);
$130 = HEAP32[$7 >> 2] | 0;
$132 = Math_fround($102 * $129);
$133 = Math_fround($132 + Math_fround(HEAPF32[$6 >> 2]));
$134 = Math_fround(HEAPF32[$135 >> 2]);
__ZN6VectorC2Efff($14, $133, $134, Math_fround(HEAPF32[$137 >> 2]));
$138 = Math_fround(HEAPF32[$94 >> 2]);
__ZN6VectorC2Efff($15, $102, Math_fround(0.0), Math_fround(0.0));
$139 = Math_fround(HEAPF32[16216]);
HEAP32[$tmpcast341$byval_copy >> 2] = $130;
HEAP8[$tmpcast348$byval_copy9 >> 0] = HEAP8[$tmpcast341$byval_copy >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 1 >> 0] = HEAP8[$tmpcast341$byval_copy + 1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 2 >> 0] = HEAP8[$tmpcast341$byval_copy + 2 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 3 >> 0] = HEAP8[$tmpcast341$byval_copy + 3 >> 0] | 0;
$140 = __ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast348$byval_copy9, $86, $14, $138) | 0;
HEAP32[$1 >> 2] = $130;
HEAP8[$tmpcast348$byval_copy9 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $tmpcast348$byval_copy9, $15, $139);
$141 = HEAP32[$114 >> 2] | 0;
if (($141 | 0) >= 0) {
if ((HEAP32[$115 >> 2] | 0) > ($141 | 0)) {
$$pre$phi451Z2D = $141 + 1 | 0;
label = 18;
} else {
$145 = HEAP32[$116 >> 2] | 0;
$147 = $141 + 1 | 0;
__ZN13DynamicArrayPI4SiteE6resizeEi($83, ($145 | 0) > ($141 | 0) ? $145 : $147 + ($141 >>> 1) | 0);
if ((HEAP32[$114 >> 2] | 0) <= ($141 | 0)) {
$$pre$phi451Z2D = $147;
label = 18;
}
}
if ((label | 0) == 18) {
label = 0;
HEAP32[$114 >> 2] = $$pre$phi451Z2D;
}
HEAP32[(HEAP32[$83 >> 2] | 0) + ($141 << 2) >> 2] = $140;
}
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($14, 3, $104, 0, 0, 1, 0);
$153 = HEAP32[$14 >> 2] | 0;
$155 = Math_fround(Math_fround(HEAPF32[$6 >> 2]) - $132);
$156 = Math_fround(HEAPF32[$135 >> 2]);
__ZN6VectorC2Efff($15, $155, $156, Math_fround(HEAPF32[$137 >> 2]));
$158 = Math_fround(HEAPF32[$94 >> 2]);
__ZN6VectorC2Efff($16, Math_fround(-$102), Math_fround(0.0), Math_fround(0.0));
$160 = Math_fround(HEAPF32[16216]);
HEAP32[$tmpcast341$byval_copy >> 2] = $153;
HEAP8[$tmpcast348$byval_copy9 >> 0] = HEAP8[$tmpcast341$byval_copy >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 1 >> 0] = HEAP8[$tmpcast341$byval_copy + 1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 2 >> 0] = HEAP8[$tmpcast341$byval_copy + 2 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 3 >> 0] = HEAP8[$tmpcast341$byval_copy + 3 >> 0] | 0;
$161 = __ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast348$byval_copy9, $86, $15, $158) | 0;
HEAP32[$1 >> 2] = $153;
HEAP8[$tmpcast348$byval_copy9 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $tmpcast348$byval_copy9, $16, $160);
$162 = HEAP32[$114 >> 2] | 0;
if (($162 | 0) >= 0) {
if ((HEAP32[$115 >> 2] | 0) > ($162 | 0)) {
$$pre$phi449Z2D = $162 + 1 | 0;
label = 24;
} else {
$166 = HEAP32[$116 >> 2] | 0;
$168 = $162 + 1 | 0;
__ZN13DynamicArrayPI4SiteE6resizeEi($83, ($166 | 0) > ($162 | 0) ? $166 : $168 + ($162 >>> 1) | 0);
if ((HEAP32[$114 >> 2] | 0) <= ($162 | 0)) {
$$pre$phi449Z2D = $168;
label = 24;
}
}
if ((label | 0) == 24) {
label = 0;
HEAP32[$114 >> 2] = $$pre$phi449Z2D;
}
HEAP32[(HEAP32[$83 >> 2] | 0) + ($162 << 2) >> 2] = $161;
}
__ZN6VectorC2EPKS_($tmpcast348$byval_copy9, $93);
$174 = Math_fround(__ZNK6Vector8distanceERKS_($92, $tmpcast348$byval_copy9));
__ZN6VectorC2EPKS_($tmpcast348$byval_copy9, $92);
$175 = Math_fround(__ZNK6Vector8distanceERKS_($91, $tmpcast348$byval_copy9));
__ZN6VectorC2EPKS_($tmpcast348$byval_copy9, $91);
$178 = Math_fround(Math_fround($174 + $175) + Math_fround(__ZNK6Vector8distanceERKS_($6, $tmpcast348$byval_copy9)));
__ZN6VectorC2EPKS_($15, $93);
$181 = Math_fround(Math_fround(HEAPF32[$180 >> 2]) - $178);
HEAPF32[$180 >> 2] = $181;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($16, 44, $104, 0, 0, 1, 0);
$182 = HEAP32[$16 >> 2] | 0;
$185 = HEAP32[(HEAP32[$30 >> 2] | 0) + 4 >> 2] | 0;
$186 = Math_fround(HEAPF32[16216]);
HEAP32[$tmpcast341$byval_copy >> 2] = $182;
HEAP8[$tmpcast348$byval_copy9 >> 0] = HEAP8[$tmpcast341$byval_copy >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 1 >> 0] = HEAP8[$tmpcast341$byval_copy + 1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 2 >> 0] = HEAP8[$tmpcast341$byval_copy + 2 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 3 >> 0] = HEAP8[$tmpcast341$byval_copy + 3 >> 0] | 0;
$187 = __ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast348$byval_copy9, $185, $15, $186) | 0;
HEAP32[$1 >> 2] = $182;
HEAP8[$tmpcast348$byval_copy9 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $tmpcast348$byval_copy9, 64576, $186);
if (0) {
$252 = +Math_fround(HEAPF32[$94 >> 2]);
HEAPF64[$vararg_buffer >> 3] = $252;
__Z7eprintfPKcz(22723, $vararg_buffer);
__ZNK4Site5printEP8_IO_FILE($187, $253);
}
$indvars$iv439 = $indvars$iv439 + 1 | 0;
} while (($indvars$iv439 | 0) != 2);
$80 = $3 + 4 | 0;
$81 = $3 + 8 | 0;
$indvars$iv432 = 0;
do {
$255 = HEAP32[71356 + ($indvars$iv432 << 2) >> 2] | 0;
$257 = ($indvars$iv432 | 0) == 1 ? Math_fround(1.0) : Math_fround(-1.0);
$258 = 1744 + ($indvars$iv432 << 2) | 0;
$259 = $255 + 12 | 0;
$260 = $255 + 8 | 0;
$261 = $255 + 4 | 0;
$indvars$iv429 = 0;
do {
$263 = HEAP32[$30 >> 2] | 0;
$265 = 1 << $indvars$iv429 & 65535;
$266 = ($indvars$iv429 | 0) == 0;
$267 = ($indvars$iv429 | 0) == 4;
$switch350 = $indvars$iv429 >>> 0 < 2;
$indvars$iv426 = 0;
do {
$269 = HEAP32[$263 + 52 + ($indvars$iv432 * 60 | 0) + ($indvars$iv429 * 12 | 0) + ($indvars$iv426 << 2) >> 2] | 0;
$271 = Math_fround(HEAPF32[$269 + 28 >> 2]);
$272 = $271 == Math_fround(0.0);
$$ = $272 ? $29 : $271;
$273 = Math_fround($$ * Math_fround(.5));
$274 = 1808 + ($indvars$iv426 << 2) | 0;
$275 = 1820 + ($indvars$iv426 << 2) | 0;
$276 = $269 + 68 | 0;
$277 = $269 + 72 | 0;
$278 = $269 + 76 | 0;
$279 = ($indvars$iv426 | 0) == 1;
$280 = $indvars$iv426 & 65535;
$indvars$iv = 0;
do {
$283 = Math_fround($257 * Math_fround(HEAPF32[1768 + ($indvars$iv << 2) >> 2]));
__ZN6VectorC2Efff($3, $283, Math_fround(0.0), Math_fround(HEAPF32[1788 + ($indvars$iv << 2) >> 2]));
__ZN6Vector7setUnitEv($3) | 0;
$262 = HEAP32[$258 >> 2] | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($4, HEAP32[$274 >> 2] | 0, $262, $indvars$iv, $265, 1, 0);
$287 = Math_fround(HEAPF32[$275 >> 2]);
$288 = HEAP32[$4 >> 2] | 0;
$289 = Math_fround(HEAPF32[$276 >> 2]);
$292 = Math_fround($289 + Math_fround($273 * Math_fround(HEAPF32[$3 >> 2])));
$294 = Math_fround(Math_fround(HEAPF32[$277 >> 2]) - $287);
$297 = Math_fround($294 + Math_fround($273 * Math_fround(HEAPF32[$80 >> 2])));
$299 = Math_fround(Math_fround(HEAPF32[$278 >> 2]) + Math_fround(0.0));
__ZN6VectorC2Efff($6, $292, $297, Math_fround($299 + Math_fround($273 * Math_fround(HEAPF32[$81 >> 2]))));
$303 = Math_fround(HEAPF32[16216]);
HEAP32[$tmpcast341$byval_copy >> 2] = $288;
HEAP8[$tmpcast348$byval_copy9 >> 0] = HEAP8[$tmpcast341$byval_copy >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 1 >> 0] = HEAP8[$tmpcast341$byval_copy + 1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 2 >> 0] = HEAP8[$tmpcast341$byval_copy + 2 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 3 >> 0] = HEAP8[$tmpcast341$byval_copy + 3 >> 0] | 0;
$304 = __ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast348$byval_copy9, $269, $6, $$) | 0;
HEAP32[$1 >> 2] = $288;
HEAP8[$tmpcast348$byval_copy9 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $tmpcast348$byval_copy9, $3, $303);
L76 : do switch ($280 << 16 >> 16) {
case 1:
{
switch (($indvars$iv & 65535) << 16 >> 16) {
case 2:
{
label = 48;
break L76;
break;
}
case 3:
break;
default:
{
label = 55;
break L76;
}
}
if ($266) label = 48; else label = 55;
break;
}
case 0:
{
if ($267 & ($indvars$iv | 0) == 4 | $switch350 & ($indvars$iv | 0) == 3) label = 48;
break;
}
default:
{}
} while (0);
if ((label | 0) == 48) {
label = 0;
$308 = HEAP32[$259 >> 2] | 0;
if (($308 | 0) >= 0) {
if ((HEAP32[$260 >> 2] | 0) > ($308 | 0)) {
$$pre$phiZ2D = $308 + 1 | 0;
label = 52;
} else {
$312 = HEAP32[$261 >> 2] | 0;
$314 = $308 + 1 | 0;
__ZN13DynamicArrayPI4SiteE6resizeEi($255, ($312 | 0) > ($308 | 0) ? $312 : $314 + ($308 >>> 1) | 0);
if ((HEAP32[$259 >> 2] | 0) <= ($308 | 0)) {
$$pre$phiZ2D = $314;
label = 52;
}
}
if ((label | 0) == 52) {
label = 0;
HEAP32[$259 >> 2] = $$pre$phiZ2D;
}
HEAP32[(HEAP32[$255 >> 2] | 0) + ($308 << 2) >> 2] = $304;
}
if ($279) label = 55;
}
if ((label | 0) == 55) {
label = 0;
HEAP32[$17 >> 2] = HEAP32[$4 >> 2];
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($18, 11, $262, $indvars$iv, $265, 1, 0);
HEAP32[$tmpcast341$byval_copy >> 2] = HEAP32[$17 >> 2];
HEAP8[$tmpcast348$byval_copy9 >> 0] = HEAP8[$18 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 1 >> 0] = HEAP8[$18 + 1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 2 >> 0] = HEAP8[$18 + 2 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 3 >> 0] = HEAP8[$18 + 3 >> 0] | 0;
__ZN11HanimAvatar13duplicateSiteE6SiteIDS0_($0, $tmpcast341$byval_copy, $tmpcast348$byval_copy9) | 0;
}
$indvars$iv = $indvars$iv + 1 | 0;
} while (($indvars$iv | 0) != 5);
$indvars$iv426 = $indvars$iv426 + 1 | 0;
} while (($indvars$iv426 | 0) != 3);
$indvars$iv429 = $indvars$iv429 + 1 | 0;
} while (($indvars$iv429 | 0) != 5);
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($19, 10, $262, 1, 1, 1, 0);
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($20, 2, $262, 0, 0, 1, 0);
HEAP32[$tmpcast341$byval_copy >> 2] = HEAP32[$19 >> 2];
HEAP8[$tmpcast348$byval_copy9 >> 0] = HEAP8[$20 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 1 >> 0] = HEAP8[$20 + 1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 2 >> 0] = HEAP8[$20 + 2 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 3 >> 0] = HEAP8[$20 + 3 >> 0] | 0;
__ZN11HanimAvatar13duplicateSiteE6SiteIDS0_($0, $tmpcast341$byval_copy, $tmpcast348$byval_copy9) | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($21, 10, $262, 3, 2, 1, 0);
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($22, 4, $262, 0, 0, 1, 0);
HEAP32[$tmpcast341$byval_copy >> 2] = HEAP32[$21 >> 2];
HEAP8[$tmpcast348$byval_copy9 >> 0] = HEAP8[$22 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 1 >> 0] = HEAP8[$22 + 1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 2 >> 0] = HEAP8[$22 + 2 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 3 >> 0] = HEAP8[$22 + 3 >> 0] | 0;
__ZN11HanimAvatar13duplicateSiteE6SiteIDS0_($0, $tmpcast341$byval_copy, $tmpcast348$byval_copy9) | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($23, 10, $262, 4, 16, 1, 0);
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($24, 5, $262, 0, 0, 1, 0);
HEAP32[$tmpcast341$byval_copy >> 2] = HEAP32[$23 >> 2];
HEAP8[$tmpcast348$byval_copy9 >> 0] = HEAP8[$24 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 1 >> 0] = HEAP8[$24 + 1 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 2 >> 0] = HEAP8[$24 + 2 >> 0] | 0;
HEAP8[$tmpcast348$byval_copy9 + 3 >> 0] = HEAP8[$24 + 3 >> 0] | 0;
__ZN11HanimAvatar13duplicateSiteE6SiteIDS0_($0, $tmpcast341$byval_copy, $tmpcast348$byval_copy9) | 0;
$indvars$iv432 = $indvars$iv432 + 1 | 0;
} while (($indvars$iv432 | 0) != 2);
__ZN11HanimAvatar14setSiteNormalsEv($0);
STACKTOP = sp;
return;
}
function __ZN11HanimAvatar21createSiGMLTorsoSitesEv($0) {
$0 = $0 | 0;
var $$0336 = f0, $$0337 = f0, $$1342$1 = f0, $$1342$2 = f0, $$pre418 = f0, $$sroa$0$0$copyload = 0, $$sroa$0$0$copyload$1 = 0, $$sroa$0367$0$copyload = 0, $$sroa$0369$0$copyload = 0, $$sroa$0371$0$copyload = 0, $$sroa$0373$0$copyload = 0, $$sroa$0375$0$copyload = 0, $1 = 0, $10 = 0, $100 = f0, $101 = f0, $11 = 0, $115 = f0, $116 = f0, $117 = f0, $119 = f0, $12 = 0, $120 = f0, $122 = 0, $13 = 0, $131 = f0, $136 = f0, $139 = f0, $14 = 0, $142 = f0, $15 = 0, $154 = f0, $157 = f0, $16 = 0, $17 = 0, $173 = 0, $174 = f0, $175 = f0, $176 = 0, $18 = 0, $180 = f0, $182 = f0, $183 = 0, $184 = 0.0, $185 = f0, $186 = f0, $189 = f0, $19 = 0, $191 = 0, $2 = 0, $20 = 0, $21 = 0, $210 = 0, $213 = 0, $218 = 0, $22 = 0, $227 = f0, $23 = 0, $233 = 0, $235 = 0, $238 = f0, $24 = 0, $240 = f0, $243 = 0, $246 = f0, $248 = f0, $251 = 0, $252 = 0, $253 = f0, $254 = 0, $258 = f0, $26 = 0, $262 = f0, $266 = f0, $269 = f0, $27 = f0, $271 = 0, $272 = f0, $273 = f0, $275 = f0, $277 = f0, $278 = f0, $28 = f0, $280 = f0, $282 = f0, $284 = f0, $286 = f0, $288 = f0, $29 = f0, $290 = f0, $292 = f0, $294 = f0, $296 = f0, $298 = f0, $3 = 0, $30 = f0, $300 = f0, $302 = 0, $303 = 0, $304 = f0, $305 = f0, $306 = f0, $307 = f0, $309 = f0, $31 = f0, $312 = f0, $314 = f0, $32 = f0, $321 = f0, $329 = f0, $33 = f0, $337 = f0, $34 = 0, $340 = f0, $341 = f0, $342 = 0, $347 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $44 = f0, $47 = f0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = f0, $54 = f0, $55 = f0, $57 = f0, $58 = 0, $6 = 0, $62 = f0, $68 = f0, $7 = 0, $71 = f0, $74 = f0, $75 = f0, $76 = f0, $8 = 0, $80 = f0, $82 = f0, $83 = 0, $86 = f0, $9 = 0, $90 = f0, $93 = 0, $94 = f0, $95 = f0, $96 = 0, $97 = f0, $98 = f0, $indvars$iv = 0, $indvars$iv$next404 = 0, $indvars$iv$next413 = 0, $indvars$iv403 = 0, $indvars$iv409 = 0, $indvars$iv412 = 0, $tmpcast347$byval_copy58 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer40 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer47 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, dest = 0, sp = 0, stop = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 576 | 0;
$tmpcast347$byval_copy58 = sp + 564 | 0;
$vararg_buffer47 = sp + 184 | 0;
$vararg_buffer45 = sp + 176 | 0;
$vararg_buffer42 = sp + 168 | 0;
$vararg_buffer40 = sp + 160 | 0;
$vararg_buffer38 = sp + 152 | 0;
$vararg_buffer35 = sp + 144 | 0;
$vararg_buffer33 = sp + 136 | 0;
$vararg_buffer31 = sp + 128 | 0;
$vararg_buffer28 = sp + 120 | 0;
$vararg_buffer26 = sp + 112 | 0;
$vararg_buffer24 = sp + 104 | 0;
$vararg_buffer21 = sp + 96 | 0;
$vararg_buffer19 = sp + 88 | 0;
$vararg_buffer14 = sp + 64 | 0;
$vararg_buffer12 = sp + 56 | 0;
$vararg_buffer9 = sp + 48 | 0;
$vararg_buffer7 = sp + 40 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$1 = sp + 500 | 0;
$2 = sp + 496 | 0;
$3 = sp + 488 | 0;
$4 = sp + 464 | 0;
$5 = sp + 428 | 0;
$6 = sp + 552 | 0;
$7 = sp + 392 | 0;
$8 = sp + 356 | 0;
$9 = sp + 320 | 0;
$10 = sp + 284 | 0;
$11 = sp + 272 | 0;
$12 = sp + 212 | 0;
$13 = sp + 200 | 0;
$14 = sp + 188 | 0;
$15 = sp + 548 | 0;
$16 = sp + 544 | 0;
$17 = sp + 540 | 0;
$18 = sp + 536 | 0;
$19 = sp + 532 | 0;
$20 = sp + 528 | 0;
$21 = sp + 524 | 0;
$22 = sp + 520 | 0;
$23 = sp + 516 | 0;
$24 = sp + 512 | 0;
$26 = __ZN7XMLCell7elementEPKc(HEAP32[16168] | 0, 22804) | 0;
$27 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($26, 22817, Math_fround(0.0)));
$28 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($26, 22831, Math_fround(0.0)));
$29 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($26, 22845, Math_fround(0.0)));
$30 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($26, 22858, Math_fround(0.0)));
$31 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($26, 22872, Math_fround(0.0)));
$32 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($26, 51246, Math_fround(0.0)));
$33 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($26, 22876, Math_fround(0.0)));
$34 = $0 + 72 | 0;
$35 = HEAP32[$34 >> 2] | 0;
$37 = HEAP32[$35 + 4 >> 2] | 0;
$39 = HEAP32[$35 + 24 >> 2] | 0;
$41 = HEAP32[$35 + 40 >> 2] | 0;
$44 = Math_fround(Math_fround(HEAPF32[$39 + 28 >> 2]) * Math_fround(.5));
HEAPF32[$3 >> 2] = $44;
$47 = Math_fround(Math_fround(HEAPF32[$41 + 28 >> 2]) * Math_fround(.5));
$48 = $3 + 4 | 0;
HEAPF32[$48 >> 2] = $47;
$49 = $39 + 68 | 0;
$50 = $41 + 68 | 0;
$51 = Math_fround(HEAPF32[$49 >> 2]);
$54 = Math_fround(Math_fround($51 - Math_fround(HEAPF32[$50 >> 2])) * Math_fround(.5));
$55 = Math_fround($28 * $54);
$57 = Math_fround(Math_fround(__ZN7XMLCell11attrib_REALEPKcf($26, 22886, Math_fround(0.0))) * $55);
$58 = HEAP32[$34 >> 2] | 0;
$62 = Math_fround(HEAPF32[(HEAP32[$58 + 12 >> 2] | 0) + 72 >> 2]);
$68 = Math_fround(Math_fround($62 + Math_fround(HEAPF32[(HEAP32[$58 + 16 >> 2] | 0) + 72 >> 2])) * Math_fround(.5));
if (!0) $347 = 1; else {
HEAPF64[$vararg_buffer >> 3] = +$57;
__Z7eprintfPKcz(22904, $vararg_buffer);
$347 = 0 == 0;
}
$71 = Math_fround(HEAPF32[$49 >> 2]);
$74 = Math_fround(Math_fround($71 + Math_fround(HEAPF32[$50 >> 2])) * Math_fround(.5));
$75 = Math_fround($55 + $74);
$76 = Math_fround($55 + $75);
HEAPF32[$4 >> 2] = $76;
HEAPF32[$4 + 4 >> 2] = $75;
HEAPF32[$4 + 8 >> 2] = $74;
$80 = Math_fround($74 - $55);
HEAPF32[$4 + 12 >> 2] = $80;
$82 = Math_fround($80 - $55);
HEAPF32[$4 + 16 >> 2] = $82;
$83 = $58 + 32 | 0;
$86 = Math_fround(HEAPF32[(HEAP32[$83 >> 2] | 0) + 72 >> 2]);
$90 = Math_fround(HEAPF32[(HEAP32[$58 + 48 >> 2] | 0) + 72 >> 2]);
$93 = $39 + 72 | 0;
$94 = Math_fround(HEAPF32[$93 >> 2]);
$95 = Math_fround($94 - $86);
$96 = $41 + 72 | 0;
$97 = Math_fround(HEAPF32[$96 >> 2]);
$98 = Math_fround($97 - $90);
$100 = Math_fround(Math_fround($95 + $98) * Math_fround(.5));
$101 = Math_fround($29 * $100);
if ($347) {
$115 = $94;
$116 = $97;
} else {
HEAPF64[$vararg_buffer1 >> 3] = +$95;
HEAPF64[$vararg_buffer1 + 8 >> 3] = +$98;
HEAPF64[$vararg_buffer1 + 16 >> 3] = +$100;
HEAPF64[$vararg_buffer1 + 24 >> 3] = +$101;
__Z7eprintfPKcz(22967, $vararg_buffer1);
__Z5eputsPKc(23046);
__ZNK9Transform5printEP8_IO_FILEi((HEAP32[(HEAP32[$34 >> 2] | 0) + 24 >> 2] | 0) + 68 | 0, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z5eputsPKc(23057);
__ZNK9Transform5printEP8_IO_FILEi((HEAP32[$83 >> 2] | 0) + 68 | 0, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
$$pre418 = Math_fround(HEAPF32[$93 >> 2]);
$115 = $$pre418;
$116 = Math_fround(HEAPF32[$96 >> 2]);
}
$117 = Math_fround(Math_fround($115 + $116) * Math_fround(.5));
$119 = Math_fround(Math_fround($101 / Math_fround(3.0)) + $117);
$120 = Math_fround($119 + Math_fround(.0299999993));
$122 = HEAP32[$0 + 488 >> 2] | 0;
if ((HEAP32[$122 + 12 >> 2] | 0) > 6) __ZN6VectorC2ERKS_($6, (HEAP32[$122 >> 2] | 0) + 72 | 0); else __ZN6VectorC2Ev($6);
HEAP32[$5 >> 2] = HEAP32[$6 + 4 >> 2];
$131 = Math_fround($68 + Math_fround(-.0199999996));
HEAPF32[$5 + 4 >> 2] = $131;
HEAPF32[$5 + 8 >> 2] = $120;
HEAPF32[$5 + 12 >> 2] = $119;
HEAPF32[$5 + 16 >> 2] = $117;
$136 = Math_fround($117 - $101);
HEAPF32[$5 + 20 >> 2] = $136;
$139 = Math_fround($117 - Math_fround($101 * Math_fround(2.0)));
HEAPF32[$5 + 24 >> 2] = $139;
$142 = Math_fround($117 - Math_fround($101 * Math_fround(3.0)));
HEAPF32[$5 + 28 >> 2] = $142;
HEAPF32[$5 + 32 >> 2] = $86 > $90 ? $86 : $90;
HEAP32[$7 >> 2] = 16;
HEAP32[$7 + 4 >> 2] = 17;
HEAP32[$7 + 8 >> 2] = 18;
HEAP32[$7 + 12 >> 2] = 19;
HEAP32[$7 + 16 >> 2] = 20;
HEAP32[$7 + 20 >> 2] = 21;
HEAP32[$7 + 24 >> 2] = 22;
HEAP32[$7 + 28 >> 2] = 23;
HEAP32[$7 + 32 >> 2] = 24;
$154 = Math_fround($54 - Math_fround(Math_fround($44 + $47) * Math_fround(.5)));
HEAP32[$8 >> 2] = 0;
HEAP32[$8 + 4 >> 2] = 0;
HEAP32[$8 + 8 >> 2] = 0;
HEAP32[$8 + 12 >> 2] = 0;
HEAPF32[$8 + 16 >> 2] = $54;
$157 = Math_fround($154 * Math_fround(.800000011));
HEAPF32[$8 + 20 >> 2] = $157;
HEAPF32[$8 + 24 >> 2] = $157;
HEAPF32[$8 + 28 >> 2] = $157;
HEAPF32[$8 + 32 >> 2] = $157;
dest = $9;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAPF32[$9 + 16 >> 2] = Math_fround(.0729999989);
HEAPF32[$9 + 20 >> 2] = Math_fround(.158000007);
HEAPF32[$9 + 24 >> 2] = Math_fround(.163000003);
HEAPF32[$9 + 28 >> 2] = Math_fround(.159999996);
dest = $10;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAPF32[$10 + 16 >> 2] = Math_fround(.0729999989);
HEAPF32[$10 + 20 >> 2] = Math_fround(.158000007);
HEAPF32[$10 + 24 >> 2] = Math_fround(.163000003);
HEAPF32[$10 + 28 >> 2] = Math_fround(.159999996);
__ZN6VectorC2EPKS_($11, $49);
__ZN6VectorC2EPKS_($tmpcast347$byval_copy58, $50);
__ZN6Vector11setMidPointERKS_S1_f($11, $11, $tmpcast347$byval_copy58, Math_fround(.5));
__ZN6VectorC2ERKS_($12, 64528);
__ZN6VectorC2Efff($12 + 12 | 0, Math_fround(1.0), Math_fround(0.0), Math_fround(1.0));
__ZN6VectorC2ERKS_($12 + 24 | 0, 64552);
__ZN6VectorC2Efff($12 + 36 | 0, Math_fround(-1.0), Math_fround(0.0), Math_fround(1.0));
__ZN6VectorC2ERKS_($12 + 48 | 0, 64564);
$173 = $11 + 8 | 0;
$174 = Math_fround(HEAPF32[$3 >> 2]);
$175 = Math_fround(HEAPF32[$48 >> 2]);
$180 = Math_fround(0.0);
$indvars$iv412 = 0;
while (1) {
L13 : do if ($180 > Math_fround(0.0)) {
$182 = Math_fround(HEAPF32[$5 + ($indvars$iv412 << 2) >> 2]);
$183 = $7 + ($indvars$iv412 << 2) | 0;
$184 = +$182;
$185 = Math_fround($74 + $180);
$186 = Math_fround($74 - $180);
$indvars$iv409 = 0;
while (1) {
$189 = Math_fround(HEAPF32[(($indvars$iv409 | 0) == 2 ? $9 : $10) + ($indvars$iv412 << 2) >> 2]);
$191 = HEAP32[1724 + ($indvars$iv409 << 2) >> 2] | 0;
switch ($191 | 0) {
case 4:
{
$$0336 = Math_fround(Math_fround(HEAPF32[$49 >> 2]) - $174);
$$0337 = Math_fround(HEAPF32[$173 >> 2]);
break;
}
case 3:
{
$$0336 = Math_fround(Math_fround(HEAPF32[$50 >> 2]) + $175);
$$0337 = Math_fround(HEAPF32[$173 >> 2]);
break;
}
case 2:
{
$$0336 = $185;
$$0337 = Math_fround(Math_fround($189 + Math_fround(HEAPF32[$173 >> 2])) + Math_fround(0.0));
break;
}
case 1:
{
$$0336 = $186;
$$0337 = Math_fround(Math_fround($189 + Math_fround(HEAPF32[$173 >> 2])) + Math_fround(0.0));
break;
}
default:
{
$$0336 = $74;
$$0337 = Math_fround(Math_fround($189 + Math_fround(HEAPF32[$173 >> 2])) + Math_fround(0.0));
}
}
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($13, HEAP32[$183 >> 2] | 0, $191, 0, 0, 1, 0);
if (0) {
__ZN6VectorC2Ev($1);
HEAP32[$2 >> 2] = 0;
HEAP32[$14 >> 2] = 0;
HEAP32[$15 >> 2] = HEAP32[$13 >> 2];
HEAP8[$tmpcast347$byval_copy58 >> 0] = HEAP8[$15 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 1 >> 0] = HEAP8[$15 + 1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 2 >> 0] = HEAP8[$15 + 2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 3 >> 0] = HEAP8[$15 + 3 >> 0] | 0;
__ZNK11HanimAvatar12locateSiteIDEb6SiteIDP6VectorRP5JointRP4Site($0, 1, $tmpcast347$byval_copy58, $1, $2, $14);
__Z7eprintfPKcz(23065, $vararg_buffer7);
$210 = HEAP32[$14 >> 2] | 0;
if (!$210) $213 = 23101; else $213 = HEAP32[$210 >> 2] | 0;
HEAP32[$vararg_buffer9 >> 2] = $213;
__Z7eprintfPKcz(23111, $vararg_buffer9);
__ZNK6SiteID5printEP8_IO_FILE($13, HEAP32[16082] | 0);
__Z7eprintfPKcz(23124, $vararg_buffer12);
__ZNK6Vector5printEP8_IO_FILEi($1, HEAP32[16082] | 0, 3);
HEAPF64[$vararg_buffer14 >> 3] = +$$0336;
HEAPF64[$vararg_buffer14 + 8 >> 3] = $184;
HEAPF64[$vararg_buffer14 + 16 >> 3] = +$$0337;
__Z7eprintfPKcz(23126, $vararg_buffer14);
}
$218 = HEAP32[$13 >> 2] | 0;
__ZN6VectorC2Efff($14, $$0336, $182, $$0337);
HEAP32[$1 >> 2] = $218;
HEAP8[$tmpcast347$byval_copy58 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast347$byval_copy58, $37, $14, $27) | 0;
HEAP32[$2 >> 2] = $218;
HEAP8[$tmpcast347$byval_copy58 >> 0] = HEAP8[$2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 1 >> 0] = HEAP8[$2 + 1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 2 >> 0] = HEAP8[$2 + 2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 3 >> 0] = HEAP8[$2 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $tmpcast347$byval_copy58, $12 + ($indvars$iv409 * 12 | 0) | 0, $57);
if (0) {
__ZN6VectorC2Ev($1);
HEAP32[$2 >> 2] = 0;
HEAP32[$14 >> 2] = 0;
HEAP32[$16 >> 2] = HEAP32[$13 >> 2];
HEAP8[$tmpcast347$byval_copy58 >> 0] = HEAP8[$16 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 1 >> 0] = HEAP8[$16 + 1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 2 >> 0] = HEAP8[$16 + 2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 3 >> 0] = HEAP8[$16 + 3 >> 0] | 0;
__ZNK11HanimAvatar12locateSiteIDEb6SiteIDP6VectorRP5JointRP4Site($0, 1, $tmpcast347$byval_copy58, $1, $2, $14);
__Z7eprintfPKcz(23148, $vararg_buffer19);
__ZNK6Vector5printEP8_IO_FILEi($1, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
$indvars$iv409 = $indvars$iv409 + 1 | 0;
if (($indvars$iv409 | 0) == 5) break L13;
}
} while (0);
$indvars$iv$next413 = $indvars$iv412 + 1 | 0;
if (($indvars$iv$next413 | 0) == 9) break;
$180 = Math_fround(HEAPF32[$8 + ($indvars$iv$next413 << 2) >> 2]);
$indvars$iv412 = $indvars$iv$next413;
}
$176 = $13 + 8 | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($1, 20, 0, 0, 0, 1, 0);
HEAP32[$2 >> 2] = 0;
HEAP32[$12 >> 2] = 0;
__ZN6VectorC2Ev($13);
HEAP32[$17 >> 2] = HEAP32[$1 >> 2];
HEAP8[$tmpcast347$byval_copy58 >> 0] = HEAP8[$17 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 1 >> 0] = HEAP8[$17 + 1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 2 >> 0] = HEAP8[$17 + 2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 3 >> 0] = HEAP8[$17 + 3 >> 0] | 0;
__ZNK11HanimAvatar12locateSiteIDEb6SiteIDP6VectorRP5JointRP4Site($0, 1, $tmpcast347$byval_copy58, $13, $2, $12);
if (0) {
HEAP32[$vararg_buffer21 >> 2] = HEAP32[HEAP32[$12 >> 2] >> 2];
__Z7eprintfPKcz(23166, $vararg_buffer21);
__Z7eprintfPKcz(23124, $vararg_buffer24);
__ZNK6SiteID5printEP8_IO_FILE($1, HEAP32[16082] | 0);
__Z7eprintfPKcz(23124, $vararg_buffer26);
__ZNK6Vector5printEP8_IO_FILEi($13, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
$227 = Math_fround(HEAPF32[$176 >> 2]);
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($1, 21, 0, 0, 0, 1, 0);
HEAP32[$2 >> 2] = 0;
HEAP32[$12 >> 2] = 0;
__ZN6VectorC2Ev($13);
HEAP32[$17 >> 2] = HEAP32[$1 >> 2];
HEAP8[$tmpcast347$byval_copy58 >> 0] = HEAP8[$17 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 1 >> 0] = HEAP8[$17 + 1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 2 >> 0] = HEAP8[$17 + 2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 3 >> 0] = HEAP8[$17 + 3 >> 0] | 0;
__ZNK11HanimAvatar12locateSiteIDEb6SiteIDP6VectorRP5JointRP4Site($0, 1, $tmpcast347$byval_copy58, $13, $2, $12);
if (0) {
HEAP32[$vararg_buffer28 >> 2] = HEAP32[HEAP32[$12 >> 2] >> 2];
__Z7eprintfPKcz(23166, $vararg_buffer28);
__Z7eprintfPKcz(23124, $vararg_buffer31);
__ZNK6SiteID5printEP8_IO_FILE($1, HEAP32[16082] | 0);
__Z7eprintfPKcz(23124, $vararg_buffer33);
__ZNK6Vector5printEP8_IO_FILEi($13, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
$321 = Math_fround(HEAPF32[$176 >> 2]);
$$1342$1 = $227 < $321 ? $321 : $227;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($1, 22, 0, 0, 0, 1, 0);
HEAP32[$2 >> 2] = 0;
HEAP32[$12 >> 2] = 0;
__ZN6VectorC2Ev($13);
HEAP32[$17 >> 2] = HEAP32[$1 >> 2];
HEAP8[$tmpcast347$byval_copy58 >> 0] = HEAP8[$17 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 1 >> 0] = HEAP8[$17 + 1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 2 >> 0] = HEAP8[$17 + 2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 3 >> 0] = HEAP8[$17 + 3 >> 0] | 0;
__ZNK11HanimAvatar12locateSiteIDEb6SiteIDP6VectorRP5JointRP4Site($0, 1, $tmpcast347$byval_copy58, $13, $2, $12);
if (0) {
HEAP32[$vararg_buffer35 >> 2] = HEAP32[HEAP32[$12 >> 2] >> 2];
__Z7eprintfPKcz(23166, $vararg_buffer35);
__Z7eprintfPKcz(23124, $vararg_buffer38);
__ZNK6SiteID5printEP8_IO_FILE($1, HEAP32[16082] | 0);
__Z7eprintfPKcz(23124, $vararg_buffer40);
__ZNK6Vector5printEP8_IO_FILEi($13, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
$329 = Math_fround(HEAPF32[$176 >> 2]);
$$1342$2 = $$1342$1 < $329 ? $329 : $$1342$1;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($1, 23, 0, 0, 0, 1, 0);
HEAP32[$2 >> 2] = 0;
HEAP32[$12 >> 2] = 0;
__ZN6VectorC2Ev($13);
HEAP32[$17 >> 2] = HEAP32[$1 >> 2];
HEAP8[$tmpcast347$byval_copy58 >> 0] = HEAP8[$17 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 1 >> 0] = HEAP8[$17 + 1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 2 >> 0] = HEAP8[$17 + 2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 3 >> 0] = HEAP8[$17 + 3 >> 0] | 0;
__ZNK11HanimAvatar12locateSiteIDEb6SiteIDP6VectorRP5JointRP4Site($0, 1, $tmpcast347$byval_copy58, $13, $2, $12);
if (0) {
HEAP32[$vararg_buffer42 >> 2] = HEAP32[HEAP32[$12 >> 2] >> 2];
__Z7eprintfPKcz(23166, $vararg_buffer42);
__Z7eprintfPKcz(23124, $vararg_buffer45);
__ZNK6SiteID5printEP8_IO_FILE($1, HEAP32[16082] | 0);
__Z7eprintfPKcz(23124, $vararg_buffer47);
__ZNK6Vector5printEP8_IO_FILEi($13, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
$337 = Math_fround(HEAPF32[$176 >> 2]);
$304 = Math_fround(Math_fround($33 * $100) + ($$1342$2 < $337 ? $337 : $$1342$2));
$340 = Math_fround($30 * $100);
$305 = Math_fround($340 + $304);
$306 = Math_fround($340 + $305);
$341 = Math_fround(HEAPF32[$4 >> 2]);
$277 = Math_fround($341 - $74);
$342 = $32 != Math_fround(0.0);
$275 = Math_fround($31 * Math_fround($304 - $304));
$309 = Math_fround($305 - $304);
$280 = Math_fround($31 * $309);
$314 = Math_fround($306 - $304);
$284 = Math_fround($31 * $314);
$288 = Math_fround($31 * Math_fround($304 - $304));
$292 = Math_fround($31 * Math_fround($305 - $304));
$296 = Math_fround($31 * Math_fround($306 - $304));
$273 = $341;
$indvars$iv403 = 0;
while (1) {
$271 = 1724 + ($indvars$iv403 << 2) | 0;
$272 = Math_fround($273 - $74);
$278 = Math_fround($273 + Math_fround(Math_fround($272 * $275) / $277));
$282 = Math_fround($273 + Math_fround(Math_fround($272 * $280) / $277));
$286 = Math_fround($273 + Math_fround(Math_fround($272 * $284) / $277));
$290 = Math_fround($273 + Math_fround(Math_fround($272 * $288) / $277));
$294 = Math_fround($273 + Math_fround(Math_fround($272 * $292) / $277));
$298 = Math_fround($273 + Math_fround(Math_fround($272 * $296) / $277));
$indvars$iv = 0;
do {
$300 = Math_fround(HEAPF32[$5 + ($indvars$iv << 2) >> 2]);
__ZN6VectorC2Ev($1);
$302 = HEAP32[$7 + ($indvars$iv << 2) >> 2] | 0;
$303 = HEAP32[$271 >> 2] | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($2, $302, $303, 0, 0, 2, 0);
__ZN6VectorC2Ev($12);
if ($342) {
__ZN6Vector7setFromEfff($1, $278, $300, $304);
__ZN6Vector7setFromERKS_($12, $1);
HEAP32[$18 >> 2] = HEAP32[$2 >> 2];
HEAP8[$tmpcast347$byval_copy58 >> 0] = HEAP8[$18 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 1 >> 0] = HEAP8[$18 + 1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 2 >> 0] = HEAP8[$18 + 2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 3 >> 0] = HEAP8[$18 + 3 >> 0] | 0;
__ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast347$byval_copy58, $37, $12, $57) | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($2, $302, $303, 0, 0, 3, 0);
__ZN6VectorC2Ev($12);
__ZN6Vector7setFromEfff($12, $282, $300, $305);
__ZN6Vector11setSubtractERKS_($12, $1);
$307 = Math_fround(__ZNK6Vector6lengthEv($12));
__ZN6Vector9setLengthEf($12, Math_fround($307 + Math_fround($32 * Math_fround($309 - $307)))) | 0;
__ZN6Vector6setAddERKS_($12, $1);
HEAP32[$18 >> 2] = HEAP32[$2 >> 2];
HEAP8[$tmpcast347$byval_copy58 >> 0] = HEAP8[$18 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 1 >> 0] = HEAP8[$18 + 1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 2 >> 0] = HEAP8[$18 + 2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 3 >> 0] = HEAP8[$18 + 3 >> 0] | 0;
__ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast347$byval_copy58, $37, $12, $57) | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($2, $302, $303, 0, 0, 4, 0);
__ZN6VectorC2Ev($12);
__ZN6Vector7setFromEfff($12, $286, $300, $306);
__ZN6Vector11setSubtractERKS_($12, $1);
$312 = Math_fround(__ZNK6Vector6lengthEv($12));
__ZN6Vector9setLengthEf($12, Math_fround($312 + Math_fround($32 * Math_fround($314 - $312)))) | 0;
__ZN6Vector6setAddERKS_($12, $1);
HEAP32[$18 >> 2] = HEAP32[$2 >> 2];
HEAP8[$tmpcast347$byval_copy58 >> 0] = HEAP8[$18 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 1 >> 0] = HEAP8[$18 + 1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 2 >> 0] = HEAP8[$18 + 2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 3 >> 0] = HEAP8[$18 + 3 >> 0] | 0;
__ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast347$byval_copy58, $37, $12, $57) | 0;
} else {
__ZN6Vector7setFromEfff($1, $290, $300, $304);
__ZN6Vector7setFromERKS_($12, $1);
HEAP32[$18 >> 2] = HEAP32[$2 >> 2];
HEAP8[$tmpcast347$byval_copy58 >> 0] = HEAP8[$18 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 1 >> 0] = HEAP8[$18 + 1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 2 >> 0] = HEAP8[$18 + 2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 3 >> 0] = HEAP8[$18 + 3 >> 0] | 0;
__ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast347$byval_copy58, $37, $12, $57) | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($2, $302, $303, 0, 0, 3, 0);
__ZN6VectorC2Ev($12);
__ZN6Vector7setFromEfff($12, $294, $300, $305);
HEAP32[$18 >> 2] = HEAP32[$2 >> 2];
HEAP8[$tmpcast347$byval_copy58 >> 0] = HEAP8[$18 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 1 >> 0] = HEAP8[$18 + 1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 2 >> 0] = HEAP8[$18 + 2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 3 >> 0] = HEAP8[$18 + 3 >> 0] | 0;
__ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast347$byval_copy58, $37, $12, $57) | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($2, $302, $303, 0, 0, 4, 0);
__ZN6VectorC2Ev($12);
__ZN6Vector7setFromEfff($12, $298, $300, $306);
HEAP32[$18 >> 2] = HEAP32[$2 >> 2];
HEAP8[$tmpcast347$byval_copy58 >> 0] = HEAP8[$18 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 1 >> 0] = HEAP8[$18 + 1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 2 >> 0] = HEAP8[$18 + 2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 3 >> 0] = HEAP8[$18 + 3 >> 0] | 0;
__ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast347$byval_copy58, $37, $12, $57) | 0;
}
$indvars$iv = $indvars$iv + 1 | 0;
} while (($indvars$iv | 0) != 9);
$indvars$iv$next404 = $indvars$iv403 + 1 | 0;
if (($indvars$iv$next404 | 0) == 5) break;
$273 = Math_fround(HEAPF32[$4 + ($indvars$iv$next404 << 2) >> 2]);
$indvars$iv403 = $indvars$iv$next404;
}
$233 = $4 + (HEAP16[4148] << 2) | 0;
$235 = HEAP32[(HEAP32[$34 >> 2] | 0) + 24 >> 2] | 0;
__ZN6VectorC2ERKS_($4, $235 + 68 | 0);
$238 = Math_fround($174 + Math_fround(HEAPF32[$233 >> 2]));
HEAPF32[$233 >> 2] = $238;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($19, 19, 2, 0, 0, 1, 0);
$240 = Math_fround(HEAPF32[$235 + 28 >> 2]);
$$sroa$0$0$copyload = HEAP32[$19 >> 2] | 0;
HEAP32[$1 >> 2] = $$sroa$0$0$copyload;
HEAP8[$tmpcast347$byval_copy58 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast347$byval_copy58, $37, $4, $240) | 0;
HEAP32[$2 >> 2] = $$sroa$0$0$copyload;
HEAP8[$tmpcast347$byval_copy58 >> 0] = HEAP8[$2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 1 >> 0] = HEAP8[$2 + 1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 2 >> 0] = HEAP8[$2 + 2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 3 >> 0] = HEAP8[$2 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $tmpcast347$byval_copy58, 64540, $27);
$243 = HEAP32[(HEAP32[$34 >> 2] | 0) + 40 >> 2] | 0;
__ZN6VectorC2ERKS_($4, $243 + 68 | 0);
$246 = Math_fround($175 + Math_fround(HEAPF32[$233 >> 2]));
HEAPF32[$233 >> 2] = $246;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($19, 19, 1, 0, 0, 1, 0);
$248 = Math_fround(HEAPF32[$243 + 28 >> 2]);
$$sroa$0$0$copyload$1 = HEAP32[$19 >> 2] | 0;
HEAP32[$1 >> 2] = $$sroa$0$0$copyload$1;
HEAP8[$tmpcast347$byval_copy58 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast347$byval_copy58, $37, $4, $248) | 0;
HEAP32[$2 >> 2] = $$sroa$0$0$copyload$1;
HEAP8[$tmpcast347$byval_copy58 >> 0] = HEAP8[$2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 1 >> 0] = HEAP8[$2 + 1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 2 >> 0] = HEAP8[$2 + 2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 3 >> 0] = HEAP8[$2 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $tmpcast347$byval_copy58, 64540, $27);
$251 = HEAP32[(HEAP32[$34 >> 2] | 0) + 8 >> 2] | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($20, 18, 0, 0, 0, 1, 0);
$252 = $37 + 68 | 0;
$253 = Math_fround(HEAPF32[$252 >> 2]);
$254 = $37 + 76 | 0;
__ZN6VectorC2Efff($4, $253, $120, Math_fround(Math_fround(HEAPF32[$254 >> 2]) + Math_fround(.0799999982)));
$$sroa$0375$0$copyload = HEAP32[$20 >> 2] | 0;
HEAP32[$1 >> 2] = $$sroa$0375$0$copyload;
HEAP8[$tmpcast347$byval_copy58 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast347$byval_copy58, $251, $4, Math_fround(.0799999982)) | 0;
HEAP32[$2 >> 2] = $$sroa$0375$0$copyload;
HEAP8[$tmpcast347$byval_copy58 >> 0] = HEAP8[$2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 1 >> 0] = HEAP8[$2 + 1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 2 >> 0] = HEAP8[$2 + 2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 3 >> 0] = HEAP8[$2 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $tmpcast347$byval_copy58, 64552, Math_fround(.0799999982));
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($21, 18, 2, 0, 0, 1, 0);
$258 = Math_fround(Math_fround(HEAPF32[$252 >> 2]) + Math_fround(.0565599985));
__ZN6VectorC2Efff($4, $258, $120, Math_fround(Math_fround(HEAPF32[$254 >> 2]) + Math_fround(.0565599985)));
__ZN6VectorC2Efff($5, Math_fround(.707000017), Math_fround(0.0), Math_fround(.707000017));
$$sroa$0373$0$copyload = HEAP32[$21 >> 2] | 0;
HEAP32[$1 >> 2] = $$sroa$0373$0$copyload;
HEAP8[$tmpcast347$byval_copy58 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast347$byval_copy58, $251, $4, Math_fround(.0799999982)) | 0;
HEAP32[$2 >> 2] = $$sroa$0373$0$copyload;
HEAP8[$tmpcast347$byval_copy58 >> 0] = HEAP8[$2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 1 >> 0] = HEAP8[$2 + 1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 2 >> 0] = HEAP8[$2 + 2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 3 >> 0] = HEAP8[$2 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $tmpcast347$byval_copy58, $5, Math_fround(.0799999982));
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($22, 18, 1, 0, 0, 1, 0);
$262 = Math_fround(Math_fround(HEAPF32[$252 >> 2]) + Math_fround(-.0565599985));
__ZN6VectorC2Efff($4, $262, $120, Math_fround(Math_fround(HEAPF32[$254 >> 2]) + Math_fround(.0565599985)));
__ZN6VectorC2Efff($5, Math_fround(-.707000017), Math_fround(0.0), Math_fround(.707000017));
$$sroa$0371$0$copyload = HEAP32[$22 >> 2] | 0;
HEAP32[$1 >> 2] = $$sroa$0371$0$copyload;
HEAP8[$tmpcast347$byval_copy58 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast347$byval_copy58, $251, $4, Math_fround(.0799999982)) | 0;
HEAP32[$2 >> 2] = $$sroa$0371$0$copyload;
HEAP8[$tmpcast347$byval_copy58 >> 0] = HEAP8[$2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 1 >> 0] = HEAP8[$2 + 1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 2 >> 0] = HEAP8[$2 + 2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 3 >> 0] = HEAP8[$2 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $tmpcast347$byval_copy58, $5, Math_fround(.0799999982));
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($23, 18, 4, 0, 0, 1, 0);
$266 = Math_fround(Math_fround(HEAPF32[$252 >> 2]) + Math_fround(.0799999982));
__ZN6VectorC2Efff($4, $266, $120, Math_fround(HEAPF32[$254 >> 2]));
$$sroa$0369$0$copyload = HEAP32[$23 >> 2] | 0;
HEAP32[$1 >> 2] = $$sroa$0369$0$copyload;
HEAP8[$tmpcast347$byval_copy58 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast347$byval_copy58, $251, $4, Math_fround(.0799999982)) | 0;
HEAP32[$2 >> 2] = $$sroa$0369$0$copyload;
HEAP8[$tmpcast347$byval_copy58 >> 0] = HEAP8[$2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 1 >> 0] = HEAP8[$2 + 1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 2 >> 0] = HEAP8[$2 + 2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 3 >> 0] = HEAP8[$2 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $tmpcast347$byval_copy58, 64528, Math_fround(.0799999982));
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($24, 18, 3, 0, 0, 1, 0);
$269 = Math_fround(Math_fround(HEAPF32[$252 >> 2]) + Math_fround(-.0799999982));
__ZN6VectorC2Efff($4, $269, $120, Math_fround(HEAPF32[$254 >> 2]));
$$sroa$0367$0$copyload = HEAP32[$24 >> 2] | 0;
HEAP32[$1 >> 2] = $$sroa$0367$0$copyload;
HEAP8[$tmpcast347$byval_copy58 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast347$byval_copy58, $251, $4, Math_fround(.0799999982)) | 0;
HEAP32[$2 >> 2] = $$sroa$0367$0$copyload;
HEAP8[$tmpcast347$byval_copy58 >> 0] = HEAP8[$2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 1 >> 0] = HEAP8[$2 + 1 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 2 >> 0] = HEAP8[$2 + 2 >> 0] | 0;
HEAP8[$tmpcast347$byval_copy58 + 3 >> 0] = HEAP8[$2 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $tmpcast347$byval_copy58, 64564, Math_fround(.0799999982));
STACKTOP = sp;
return;
}
function __Z17DeleteSiGMLTablesv() {
var $$0 = 0, $$02 = 0, $0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $104 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $110 = 0, $112 = 0, $113 = 0, $114 = 0, $116 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $125 = 0, $126 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $134 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $140 = 0, $142 = 0, $143 = 0, $144 = 0, $146 = 0, $148 = 0, $149 = 0, $150 = 0, $152 = 0, $154 = 0, $155 = 0, $156 = 0, $158 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $170 = 0, $172 = 0, $173 = 0, $174 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $182 = 0, $184 = 0, $185 = 0, $186 = 0, $188 = 0, $190 = 0, $191 = 0, $192 = 0, $194 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $200 = 0, $202 = 0, $203 = 0, $204 = 0, $206 = 0, $208 = 0, $209 = 0, $210 = 0, $212 = 0, $214 = 0, $215 = 0, $216 = 0, $218 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $224 = 0, $226 = 0, $227 = 0, $228 = 0, $23 = 0, $230 = 0, $232 = 0, $233 = 0, $234 = 0, $236 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $242 = 0, $244 = 0, $245 = 0, $246 = 0, $248 = 0, $250 = 0, $251 = 0, $252 = 0, $254 = 0, $256 = 0, $257 = 0, $258 = 0, $26 = 0, $260 = 0, $262 = 0, $263 = 0, $264 = 0, $266 = 0, $268 = 0, $269 = 0, $270 = 0, $272 = 0, $274 = 0, $275 = 0, $276 = 0, $278 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $284 = 0, $286 = 0, $287 = 0, $288 = 0, $29 = 0, $290 = 0, $292 = 0, $293 = 0, $294 = 0, $296 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $302 = 0, $304 = 0, $305 = 0, $306 = 0, $308 = 0, $310 = 0, $311 = 0, $312 = 0, $314 = 0, $316 = 0, $318 = 0, $32 = 0, $320 = 0, $322 = 0, $324 = 0, $325 = 0, $326 = 0, $328 = 0, $330 = 0, $331 = 0, $332 = 0, $334 = 0, $336 = 0, $337 = 0, $338 = 0, $34 = 0, $340 = 0, $342 = 0, $343 = 0, $344 = 0, $346 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $352 = 0, $354 = 0, $356 = 0, $357 = 0, $358 = 0, $36 = 0, $360 = 0, $362 = 0, $363 = 0, $364 = 0, $366 = 0, $368 = 0, $369 = 0, $370 = 0, $372 = 0, $374 = 0, $375 = 0, $376 = 0, $378 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $384 = 0, $386 = 0, $387 = 0, $388 = 0, $390 = 0, $392 = 0, $393 = 0, $394 = 0, $396 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $402 = 0, $404 = 0, $405 = 0, $406 = 0, $408 = 0, $41 = 0, $410 = 0, $412 = 0, $413 = 0, $414 = 0, $416 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $422 = 0, $424 = 0, $425 = 0, $426 = 0, $428 = 0, $430 = 0, $431 = 0, $432 = 0, $434 = 0, $436 = 0, $437 = 0, $438 = 0, $44 = 0, $440 = 0, $442 = 0, $443 = 0, $444 = 0, $446 = 0, $448 = 0, $449 = 0, $450 = 0, $452 = 0, $454 = 0, $455 = 0, $456 = 0, $458 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $464 = 0, $466 = 0, $467 = 0, $468 = 0, $47 = 0, $470 = 0, $472 = 0, $473 = 0, $474 = 0, $476 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $482 = 0, $484 = 0, $486 = 0, $5 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $74 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $86 = 0, $88 = 0, $89 = 0, $90 = 0, $92 = 0, $94 = 0, $95 = 0, $96 = 0, $98 = 0;
__Z21DeleteNonmanualTablesv();
$0 = HEAP32[17766] | 0;
do if ($0 | 0) {
__THREW__ = 0;
invoke_vi(93, $0 | 0);
$2 = __THREW__;
__THREW__ = 0;
if (!($2 & 1)) {
__ZdlPv($0);
HEAP32[17766] = 0;
break;
}
$4 = ___cxa_find_matching_catch_2() | 0;
$5 = tempRet0;
__ZdlPv($0);
$$0 = $5;
$$02 = $4;
___resumeException($$02 | 0);
} while (0);
$6 = HEAP32[17767] | 0;
do if ($6 | 0) {
__THREW__ = 0;
invoke_vi(149, $6 | 0);
$8 = __THREW__;
__THREW__ = 0;
if (!($8 & 1)) {
__ZdlPv($6);
HEAP32[17767] = 0;
break;
}
$10 = ___cxa_find_matching_catch_2() | 0;
$11 = tempRet0;
__ZdlPv($6);
$$0 = $11;
$$02 = $10;
___resumeException($$02 | 0);
} while (0);
$12 = HEAP32[17770] | 0;
do if ($12 | 0) {
__THREW__ = 0;
invoke_vi(93, $12 | 0);
$14 = __THREW__;
__THREW__ = 0;
if (!($14 & 1)) {
__ZdlPv($12);
HEAP32[17770] = 0;
break;
}
$16 = ___cxa_find_matching_catch_2() | 0;
$17 = tempRet0;
__ZdlPv($12);
$$0 = $17;
$$02 = $16;
___resumeException($$02 | 0);
} while (0);
$18 = HEAP32[17771] | 0;
do if ($18 | 0) {
__THREW__ = 0;
invoke_vi(93, $18 | 0);
$20 = __THREW__;
__THREW__ = 0;
if (!($20 & 1)) {
__ZdlPv($18);
HEAP32[17771] = 0;
break;
}
$22 = ___cxa_find_matching_catch_2() | 0;
$23 = tempRet0;
__ZdlPv($18);
$$0 = $23;
$$02 = $22;
___resumeException($$02 | 0);
} while (0);
$24 = HEAP32[17772] | 0;
do if ($24 | 0) {
__THREW__ = 0;
invoke_vi(93, $24 | 0);
$26 = __THREW__;
__THREW__ = 0;
if (!($26 & 1)) {
__ZdlPv($24);
HEAP32[17772] = 0;
break;
}
$28 = ___cxa_find_matching_catch_2() | 0;
$29 = tempRet0;
__ZdlPv($24);
$$0 = $29;
$$02 = $28;
___resumeException($$02 | 0);
} while (0);
$30 = HEAP32[17773] | 0;
do if ($30 | 0) {
__THREW__ = 0;
invoke_vi(93, $30 | 0);
$32 = __THREW__;
__THREW__ = 0;
if (!($32 & 1)) {
__ZdlPv($30);
HEAP32[17773] = 0;
break;
}
$34 = ___cxa_find_matching_catch_2() | 0;
$35 = tempRet0;
__ZdlPv($30);
$$0 = $35;
$$02 = $34;
___resumeException($$02 | 0);
} while (0);
$36 = HEAP32[17774] | 0;
do if ($36 | 0) {
__THREW__ = 0;
invoke_vi(93, $36 | 0);
$38 = __THREW__;
__THREW__ = 0;
if (!($38 & 1)) {
__ZdlPv($36);
HEAP32[17774] = 0;
break;
}
$40 = ___cxa_find_matching_catch_2() | 0;
$41 = tempRet0;
__ZdlPv($36);
$$0 = $41;
$$02 = $40;
___resumeException($$02 | 0);
} while (0);
$42 = HEAP32[17775] | 0;
do if ($42 | 0) {
__THREW__ = 0;
invoke_vi(93, $42 | 0);
$44 = __THREW__;
__THREW__ = 0;
if (!($44 & 1)) {
__ZdlPv($42);
HEAP32[17775] = 0;
break;
}
$46 = ___cxa_find_matching_catch_2() | 0;
$47 = tempRet0;
__ZdlPv($42);
$$0 = $47;
$$02 = $46;
___resumeException($$02 | 0);
} while (0);
$48 = HEAP32[17776] | 0;
do if ($48 | 0) {
__THREW__ = 0;
invoke_vi(93, $48 | 0);
$50 = __THREW__;
__THREW__ = 0;
if (!($50 & 1)) {
__ZdlPv($48);
HEAP32[17776] = 0;
break;
}
$52 = ___cxa_find_matching_catch_2() | 0;
$53 = tempRet0;
__ZdlPv($48);
$$0 = $53;
$$02 = $52;
___resumeException($$02 | 0);
} while (0);
$54 = HEAP32[17777] | 0;
do if ($54 | 0) {
__THREW__ = 0;
invoke_vi(93, $54 | 0);
$56 = __THREW__;
__THREW__ = 0;
if (!($56 & 1)) {
__ZdlPv($54);
HEAP32[17777] = 0;
break;
}
$58 = ___cxa_find_matching_catch_2() | 0;
$59 = tempRet0;
__ZdlPv($54);
$$0 = $59;
$$02 = $58;
___resumeException($$02 | 0);
} while (0);
$60 = HEAP32[17778] | 0;
do if ($60 | 0) {
__THREW__ = 0;
invoke_vi(93, $60 | 0);
$62 = __THREW__;
__THREW__ = 0;
if (!($62 & 1)) {
__ZdlPv($60);
HEAP32[17778] = 0;
break;
}
$64 = ___cxa_find_matching_catch_2() | 0;
$65 = tempRet0;
__ZdlPv($60);
$$0 = $65;
$$02 = $64;
___resumeException($$02 | 0);
} while (0);
$66 = HEAP32[17779] | 0;
do if ($66 | 0) {
__THREW__ = 0;
invoke_vi(93, $66 | 0);
$68 = __THREW__;
__THREW__ = 0;
if (!($68 & 1)) {
__ZdlPv($66);
HEAP32[17779] = 0;
break;
}
$70 = ___cxa_find_matching_catch_2() | 0;
$71 = tempRet0;
__ZdlPv($66);
$$0 = $71;
$$02 = $70;
___resumeException($$02 | 0);
} while (0);
$72 = HEAP32[17780] | 0;
do if ($72 | 0) {
__THREW__ = 0;
invoke_vi(93, $72 | 0);
$74 = __THREW__;
__THREW__ = 0;
if (!($74 & 1)) {
__ZdlPv($72);
HEAP32[17780] = 0;
break;
}
$76 = ___cxa_find_matching_catch_2() | 0;
$77 = tempRet0;
__ZdlPv($72);
$$0 = $77;
$$02 = $76;
___resumeException($$02 | 0);
} while (0);
$78 = HEAP32[17781] | 0;
do if ($78 | 0) {
__THREW__ = 0;
invoke_vi(93, $78 | 0);
$80 = __THREW__;
__THREW__ = 0;
if (!($80 & 1)) {
__ZdlPv($78);
HEAP32[17781] = 0;
break;
}
$82 = ___cxa_find_matching_catch_2() | 0;
$83 = tempRet0;
__ZdlPv($78);
$$0 = $83;
$$02 = $82;
___resumeException($$02 | 0);
} while (0);
$84 = HEAP32[17782] | 0;
do if ($84 | 0) {
__THREW__ = 0;
invoke_vi(93, $84 | 0);
$86 = __THREW__;
__THREW__ = 0;
if (!($86 & 1)) {
__ZdlPv($84);
HEAP32[17782] = 0;
break;
}
$88 = ___cxa_find_matching_catch_2() | 0;
$89 = tempRet0;
__ZdlPv($84);
$$0 = $89;
$$02 = $88;
___resumeException($$02 | 0);
} while (0);
$90 = HEAP32[17783] | 0;
do if ($90 | 0) {
__THREW__ = 0;
invoke_vi(93, $90 | 0);
$92 = __THREW__;
__THREW__ = 0;
if (!($92 & 1)) {
__ZdlPv($90);
HEAP32[17783] = 0;
break;
}
$94 = ___cxa_find_matching_catch_2() | 0;
$95 = tempRet0;
__ZdlPv($90);
$$0 = $95;
$$02 = $94;
___resumeException($$02 | 0);
} while (0);
$96 = HEAP32[17784] | 0;
do if ($96 | 0) {
__THREW__ = 0;
invoke_vi(93, $96 | 0);
$98 = __THREW__;
__THREW__ = 0;
if (!($98 & 1)) {
__ZdlPv($96);
HEAP32[17784] = 0;
break;
}
$100 = ___cxa_find_matching_catch_2() | 0;
$101 = tempRet0;
__ZdlPv($96);
$$0 = $101;
$$02 = $100;
___resumeException($$02 | 0);
} while (0);
$102 = HEAP32[17785] | 0;
do if ($102 | 0) {
__THREW__ = 0;
invoke_vi(93, $102 | 0);
$104 = __THREW__;
__THREW__ = 0;
if (!($104 & 1)) {
__ZdlPv($102);
HEAP32[17785] = 0;
break;
}
$106 = ___cxa_find_matching_catch_2() | 0;
$107 = tempRet0;
__ZdlPv($102);
$$0 = $107;
$$02 = $106;
___resumeException($$02 | 0);
} while (0);
$108 = HEAP32[17786] | 0;
do if ($108 | 0) {
__THREW__ = 0;
invoke_vi(93, $108 | 0);
$110 = __THREW__;
__THREW__ = 0;
if (!($110 & 1)) {
__ZdlPv($108);
HEAP32[17786] = 0;
break;
}
$112 = ___cxa_find_matching_catch_2() | 0;
$113 = tempRet0;
__ZdlPv($108);
$$0 = $113;
$$02 = $112;
___resumeException($$02 | 0);
} while (0);
$114 = HEAP32[17787] | 0;
do if ($114 | 0) {
__THREW__ = 0;
invoke_vi(93, $114 | 0);
$116 = __THREW__;
__THREW__ = 0;
if (!($116 & 1)) {
__ZdlPv($114);
HEAP32[17787] = 0;
break;
}
$118 = ___cxa_find_matching_catch_2() | 0;
$119 = tempRet0;
__ZdlPv($114);
$$0 = $119;
$$02 = $118;
___resumeException($$02 | 0);
} while (0);
$120 = HEAP32[17788] | 0;
do if ($120 | 0) {
__THREW__ = 0;
invoke_vi(93, $120 | 0);
$122 = __THREW__;
__THREW__ = 0;
if (!($122 & 1)) {
__ZdlPv($120);
HEAP32[17788] = 0;
break;
}
$124 = ___cxa_find_matching_catch_2() | 0;
$125 = tempRet0;
__ZdlPv($120);
$$0 = $125;
$$02 = $124;
___resumeException($$02 | 0);
} while (0);
$126 = HEAP32[17789] | 0;
do if ($126 | 0) {
__THREW__ = 0;
invoke_vi(93, $126 | 0);
$128 = __THREW__;
__THREW__ = 0;
if (!($128 & 1)) {
__ZdlPv($126);
HEAP32[17789] = 0;
break;
}
$130 = ___cxa_find_matching_catch_2() | 0;
$131 = tempRet0;
__ZdlPv($126);
$$0 = $131;
$$02 = $130;
___resumeException($$02 | 0);
} while (0);
$132 = HEAP32[17790] | 0;
do if ($132 | 0) {
__THREW__ = 0;
invoke_vi(93, $132 | 0);
$134 = __THREW__;
__THREW__ = 0;
if (!($134 & 1)) {
__ZdlPv($132);
HEAP32[17790] = 0;
break;
}
$136 = ___cxa_find_matching_catch_2() | 0;
$137 = tempRet0;
__ZdlPv($132);
$$0 = $137;
$$02 = $136;
___resumeException($$02 | 0);
} while (0);
$138 = HEAP32[17791] | 0;
do if ($138 | 0) {
__THREW__ = 0;
invoke_vi(93, $138 | 0);
$140 = __THREW__;
__THREW__ = 0;
if (!($140 & 1)) {
__ZdlPv($138);
HEAP32[17791] = 0;
break;
}
$142 = ___cxa_find_matching_catch_2() | 0;
$143 = tempRet0;
__ZdlPv($138);
$$0 = $143;
$$02 = $142;
___resumeException($$02 | 0);
} while (0);
$144 = HEAP32[17792] | 0;
do if ($144 | 0) {
__THREW__ = 0;
invoke_vi(93, $144 | 0);
$146 = __THREW__;
__THREW__ = 0;
if (!($146 & 1)) {
__ZdlPv($144);
HEAP32[17792] = 0;
break;
}
$148 = ___cxa_find_matching_catch_2() | 0;
$149 = tempRet0;
__ZdlPv($144);
$$0 = $149;
$$02 = $148;
___resumeException($$02 | 0);
} while (0);
$150 = HEAP32[17793] | 0;
do if ($150 | 0) {
__THREW__ = 0;
invoke_vi(93, $150 | 0);
$152 = __THREW__;
__THREW__ = 0;
if (!($152 & 1)) {
__ZdlPv($150);
HEAP32[17793] = 0;
break;
}
$154 = ___cxa_find_matching_catch_2() | 0;
$155 = tempRet0;
__ZdlPv($150);
$$0 = $155;
$$02 = $154;
___resumeException($$02 | 0);
} while (0);
$156 = HEAP32[17794] | 0;
do if ($156 | 0) {
__THREW__ = 0;
invoke_vi(93, $156 | 0);
$158 = __THREW__;
__THREW__ = 0;
if (!($158 & 1)) {
__ZdlPv($156);
HEAP32[17794] = 0;
break;
}
$160 = ___cxa_find_matching_catch_2() | 0;
$161 = tempRet0;
__ZdlPv($156);
$$0 = $161;
$$02 = $160;
___resumeException($$02 | 0);
} while (0);
$162 = HEAP32[17795] | 0;
do if ($162 | 0) {
__THREW__ = 0;
invoke_vi(93, $162 | 0);
$164 = __THREW__;
__THREW__ = 0;
if (!($164 & 1)) {
__ZdlPv($162);
HEAP32[17795] = 0;
break;
}
$166 = ___cxa_find_matching_catch_2() | 0;
$167 = tempRet0;
__ZdlPv($162);
$$0 = $167;
$$02 = $166;
___resumeException($$02 | 0);
} while (0);
$168 = HEAP32[17796] | 0;
do if ($168 | 0) {
__THREW__ = 0;
invoke_vi(93, $168 | 0);
$170 = __THREW__;
__THREW__ = 0;
if (!($170 & 1)) {
__ZdlPv($168);
HEAP32[17796] = 0;
break;
}
$172 = ___cxa_find_matching_catch_2() | 0;
$173 = tempRet0;
__ZdlPv($168);
$$0 = $173;
$$02 = $172;
___resumeException($$02 | 0);
} while (0);
$174 = HEAP32[17797] | 0;
do if ($174 | 0) {
__THREW__ = 0;
invoke_vi(93, $174 | 0);
$176 = __THREW__;
__THREW__ = 0;
if (!($176 & 1)) {
__ZdlPv($174);
HEAP32[17797] = 0;
break;
}
$178 = ___cxa_find_matching_catch_2() | 0;
$179 = tempRet0;
__ZdlPv($174);
$$0 = $179;
$$02 = $178;
___resumeException($$02 | 0);
} while (0);
$180 = HEAP32[17798] | 0;
do if ($180 | 0) {
__THREW__ = 0;
invoke_vi(93, $180 | 0);
$182 = __THREW__;
__THREW__ = 0;
if (!($182 & 1)) {
__ZdlPv($180);
HEAP32[17798] = 0;
break;
}
$184 = ___cxa_find_matching_catch_2() | 0;
$185 = tempRet0;
__ZdlPv($180);
$$0 = $185;
$$02 = $184;
___resumeException($$02 | 0);
} while (0);
$186 = HEAP32[17799] | 0;
do if ($186 | 0) {
__THREW__ = 0;
invoke_vi(93, $186 | 0);
$188 = __THREW__;
__THREW__ = 0;
if (!($188 & 1)) {
__ZdlPv($186);
HEAP32[17799] = 0;
break;
}
$190 = ___cxa_find_matching_catch_2() | 0;
$191 = tempRet0;
__ZdlPv($186);
$$0 = $191;
$$02 = $190;
___resumeException($$02 | 0);
} while (0);
$192 = HEAP32[17800] | 0;
do if ($192 | 0) {
__THREW__ = 0;
invoke_vi(93, $192 | 0);
$194 = __THREW__;
__THREW__ = 0;
if (!($194 & 1)) {
__ZdlPv($192);
HEAP32[17800] = 0;
break;
}
$196 = ___cxa_find_matching_catch_2() | 0;
$197 = tempRet0;
__ZdlPv($192);
$$0 = $197;
$$02 = $196;
___resumeException($$02 | 0);
} while (0);
$198 = HEAP32[17801] | 0;
do if ($198 | 0) {
__THREW__ = 0;
invoke_vi(93, $198 | 0);
$200 = __THREW__;
__THREW__ = 0;
if (!($200 & 1)) {
__ZdlPv($198);
HEAP32[17801] = 0;
break;
}
$202 = ___cxa_find_matching_catch_2() | 0;
$203 = tempRet0;
__ZdlPv($198);
$$0 = $203;
$$02 = $202;
___resumeException($$02 | 0);
} while (0);
$204 = HEAP32[17802] | 0;
do if ($204 | 0) {
__THREW__ = 0;
invoke_vi(93, $204 | 0);
$206 = __THREW__;
__THREW__ = 0;
if (!($206 & 1)) {
__ZdlPv($204);
HEAP32[17802] = 0;
break;
}
$208 = ___cxa_find_matching_catch_2() | 0;
$209 = tempRet0;
__ZdlPv($204);
$$0 = $209;
$$02 = $208;
___resumeException($$02 | 0);
} while (0);
$210 = HEAP32[17803] | 0;
do if ($210 | 0) {
__THREW__ = 0;
invoke_vi(93, $210 | 0);
$212 = __THREW__;
__THREW__ = 0;
if (!($212 & 1)) {
__ZdlPv($210);
HEAP32[17803] = 0;
break;
}
$214 = ___cxa_find_matching_catch_2() | 0;
$215 = tempRet0;
__ZdlPv($210);
$$0 = $215;
$$02 = $214;
___resumeException($$02 | 0);
} while (0);
$216 = HEAP32[17804] | 0;
do if ($216 | 0) {
__THREW__ = 0;
invoke_vi(93, $216 | 0);
$218 = __THREW__;
__THREW__ = 0;
if (!($218 & 1)) {
__ZdlPv($216);
HEAP32[17804] = 0;
break;
}
$220 = ___cxa_find_matching_catch_2() | 0;
$221 = tempRet0;
__ZdlPv($216);
$$0 = $221;
$$02 = $220;
___resumeException($$02 | 0);
} while (0);
$222 = HEAP32[17805] | 0;
do if ($222 | 0) {
__THREW__ = 0;
invoke_vi(93, $222 | 0);
$224 = __THREW__;
__THREW__ = 0;
if (!($224 & 1)) {
__ZdlPv($222);
HEAP32[17805] = 0;
break;
}
$226 = ___cxa_find_matching_catch_2() | 0;
$227 = tempRet0;
__ZdlPv($222);
$$0 = $227;
$$02 = $226;
___resumeException($$02 | 0);
} while (0);
$228 = HEAP32[17806] | 0;
do if ($228 | 0) {
__THREW__ = 0;
invoke_vi(93, $228 | 0);
$230 = __THREW__;
__THREW__ = 0;
if (!($230 & 1)) {
__ZdlPv($228);
HEAP32[17806] = 0;
break;
}
$232 = ___cxa_find_matching_catch_2() | 0;
$233 = tempRet0;
__ZdlPv($228);
$$0 = $233;
$$02 = $232;
___resumeException($$02 | 0);
} while (0);
$234 = HEAP32[17807] | 0;
do if ($234 | 0) {
__THREW__ = 0;
invoke_vi(93, $234 | 0);
$236 = __THREW__;
__THREW__ = 0;
if (!($236 & 1)) {
__ZdlPv($234);
HEAP32[17807] = 0;
break;
}
$238 = ___cxa_find_matching_catch_2() | 0;
$239 = tempRet0;
__ZdlPv($234);
$$0 = $239;
$$02 = $238;
___resumeException($$02 | 0);
} while (0);
$240 = HEAP32[17808] | 0;
do if ($240 | 0) {
__THREW__ = 0;
invoke_vi(93, $240 | 0);
$242 = __THREW__;
__THREW__ = 0;
if (!($242 & 1)) {
__ZdlPv($240);
HEAP32[17808] = 0;
break;
}
$244 = ___cxa_find_matching_catch_2() | 0;
$245 = tempRet0;
__ZdlPv($240);
$$0 = $245;
$$02 = $244;
___resumeException($$02 | 0);
} while (0);
$246 = HEAP32[17809] | 0;
do if ($246 | 0) {
__THREW__ = 0;
invoke_vi(93, $246 | 0);
$248 = __THREW__;
__THREW__ = 0;
if (!($248 & 1)) {
__ZdlPv($246);
HEAP32[17809] = 0;
break;
}
$250 = ___cxa_find_matching_catch_2() | 0;
$251 = tempRet0;
__ZdlPv($246);
$$0 = $251;
$$02 = $250;
___resumeException($$02 | 0);
} while (0);
$252 = HEAP32[17810] | 0;
do if ($252 | 0) {
__THREW__ = 0;
invoke_vi(93, $252 | 0);
$254 = __THREW__;
__THREW__ = 0;
if (!($254 & 1)) {
__ZdlPv($252);
HEAP32[17810] = 0;
break;
}
$256 = ___cxa_find_matching_catch_2() | 0;
$257 = tempRet0;
__ZdlPv($252);
$$0 = $257;
$$02 = $256;
___resumeException($$02 | 0);
} while (0);
$258 = HEAP32[17811] | 0;
do if ($258 | 0) {
__THREW__ = 0;
invoke_vi(93, $258 | 0);
$260 = __THREW__;
__THREW__ = 0;
if (!($260 & 1)) {
__ZdlPv($258);
HEAP32[17811] = 0;
break;
}
$262 = ___cxa_find_matching_catch_2() | 0;
$263 = tempRet0;
__ZdlPv($258);
$$0 = $263;
$$02 = $262;
___resumeException($$02 | 0);
} while (0);
$264 = HEAP32[17812] | 0;
do if ($264 | 0) {
__THREW__ = 0;
invoke_vi(93, $264 | 0);
$266 = __THREW__;
__THREW__ = 0;
if (!($266 & 1)) {
__ZdlPv($264);
HEAP32[17812] = 0;
break;
}
$268 = ___cxa_find_matching_catch_2() | 0;
$269 = tempRet0;
__ZdlPv($264);
$$0 = $269;
$$02 = $268;
___resumeException($$02 | 0);
} while (0);
$270 = HEAP32[17813] | 0;
do if ($270 | 0) {
__THREW__ = 0;
invoke_vi(93, $270 | 0);
$272 = __THREW__;
__THREW__ = 0;
if (!($272 & 1)) {
__ZdlPv($270);
HEAP32[17813] = 0;
break;
}
$274 = ___cxa_find_matching_catch_2() | 0;
$275 = tempRet0;
__ZdlPv($270);
$$0 = $275;
$$02 = $274;
___resumeException($$02 | 0);
} while (0);
$276 = HEAP32[17814] | 0;
do if ($276 | 0) {
__THREW__ = 0;
invoke_vi(93, $276 | 0);
$278 = __THREW__;
__THREW__ = 0;
if (!($278 & 1)) {
__ZdlPv($276);
HEAP32[17814] = 0;
break;
}
$280 = ___cxa_find_matching_catch_2() | 0;
$281 = tempRet0;
__ZdlPv($276);
$$0 = $281;
$$02 = $280;
___resumeException($$02 | 0);
} while (0);
$282 = HEAP32[17815] | 0;
do if ($282 | 0) {
__THREW__ = 0;
invoke_vi(93, $282 | 0);
$284 = __THREW__;
__THREW__ = 0;
if (!($284 & 1)) {
__ZdlPv($282);
HEAP32[17815] = 0;
break;
}
$286 = ___cxa_find_matching_catch_2() | 0;
$287 = tempRet0;
__ZdlPv($282);
$$0 = $287;
$$02 = $286;
___resumeException($$02 | 0);
} while (0);
$288 = HEAP32[17816] | 0;
do if ($288 | 0) {
__THREW__ = 0;
invoke_vi(93, $288 | 0);
$290 = __THREW__;
__THREW__ = 0;
if (!($290 & 1)) {
__ZdlPv($288);
HEAP32[17816] = 0;
break;
}
$292 = ___cxa_find_matching_catch_2() | 0;
$293 = tempRet0;
__ZdlPv($288);
$$0 = $293;
$$02 = $292;
___resumeException($$02 | 0);
} while (0);
$294 = HEAP32[17817] | 0;
do if ($294 | 0) {
__THREW__ = 0;
invoke_vi(93, $294 | 0);
$296 = __THREW__;
__THREW__ = 0;
if (!($296 & 1)) {
__ZdlPv($294);
HEAP32[17817] = 0;
break;
}
$298 = ___cxa_find_matching_catch_2() | 0;
$299 = tempRet0;
__ZdlPv($294);
$$0 = $299;
$$02 = $298;
___resumeException($$02 | 0);
} while (0);
$300 = HEAP32[17818] | 0;
do if ($300 | 0) {
__THREW__ = 0;
invoke_vi(93, $300 | 0);
$302 = __THREW__;
__THREW__ = 0;
if (!($302 & 1)) {
__ZdlPv($300);
HEAP32[17818] = 0;
break;
}
$304 = ___cxa_find_matching_catch_2() | 0;
$305 = tempRet0;
__ZdlPv($300);
$$0 = $305;
$$02 = $304;
___resumeException($$02 | 0);
} while (0);
$306 = HEAP32[17819] | 0;
do if ($306 | 0) {
__THREW__ = 0;
invoke_vi(93, $306 | 0);
$308 = __THREW__;
__THREW__ = 0;
if (!($308 & 1)) {
__ZdlPv($306);
HEAP32[17819] = 0;
break;
}
$310 = ___cxa_find_matching_catch_2() | 0;
$311 = tempRet0;
__ZdlPv($306);
$$0 = $311;
$$02 = $310;
___resumeException($$02 | 0);
} while (0);
$312 = HEAP32[17187] | 0;
if ($312 | 0) {
_free($312);
HEAP32[17187] = 0;
}
$314 = HEAP32[17188] | 0;
if ($314 | 0) {
_free($314);
HEAP32[17188] = 0;
}
$316 = HEAP32[17189] | 0;
if ($316 | 0) {
_free($316);
HEAP32[17189] = 0;
}
$318 = HEAP32[17190] | 0;
if ($318 | 0) {
_free($318);
HEAP32[17190] = 0;
}
$320 = HEAP32[17191] | 0;
do if ($320 | 0) {
__THREW__ = 0;
invoke_vi(93, $320 | 0);
$322 = __THREW__;
__THREW__ = 0;
if (!($322 & 1)) {
__ZdlPv($320);
HEAP32[17191] = 0;
break;
}
$324 = ___cxa_find_matching_catch_2() | 0;
$325 = tempRet0;
__ZdlPv($320);
$$0 = $325;
$$02 = $324;
___resumeException($$02 | 0);
} while (0);
$326 = HEAP32[17192] | 0;
do if ($326 | 0) {
__THREW__ = 0;
invoke_vi(144, $326 | 0);
$328 = __THREW__;
__THREW__ = 0;
if (!($328 & 1)) {
__ZdlPv($326);
HEAP32[17192] = 0;
break;
}
$330 = ___cxa_find_matching_catch_2() | 0;
$331 = tempRet0;
__ZdlPv($326);
$$0 = $331;
$$02 = $330;
___resumeException($$02 | 0);
} while (0);
$332 = HEAP32[17193] | 0;
do if ($332 | 0) {
__THREW__ = 0;
invoke_vi(93, $332 | 0);
$334 = __THREW__;
__THREW__ = 0;
if (!($334 & 1)) {
__ZdlPv($332);
HEAP32[17193] = 0;
break;
}
$336 = ___cxa_find_matching_catch_2() | 0;
$337 = tempRet0;
__ZdlPv($332);
$$0 = $337;
$$02 = $336;
___resumeException($$02 | 0);
} while (0);
$338 = HEAP32[17194] | 0;
do if ($338 | 0) {
__THREW__ = 0;
invoke_vi(93, $338 | 0);
$340 = __THREW__;
__THREW__ = 0;
if (!($340 & 1)) {
__ZdlPv($338);
HEAP32[17194] = 0;
break;
}
$342 = ___cxa_find_matching_catch_2() | 0;
$343 = tempRet0;
__ZdlPv($338);
$$0 = $343;
$$02 = $342;
___resumeException($$02 | 0);
} while (0);
$344 = HEAP32[17195] | 0;
do if ($344 | 0) {
__THREW__ = 0;
invoke_vi(93, $344 | 0);
$346 = __THREW__;
__THREW__ = 0;
if (!($346 & 1)) {
__ZdlPv($344);
HEAP32[17195] = 0;
break;
}
$348 = ___cxa_find_matching_catch_2() | 0;
$349 = tempRet0;
__ZdlPv($344);
$$0 = $349;
$$02 = $348;
___resumeException($$02 | 0);
} while (0);
$350 = HEAP32[17196] | 0;
if ($350 | 0) {
_free($350);
HEAP32[17196] = 0;
}
$352 = HEAP32[17197] | 0;
do if ($352 | 0) {
__THREW__ = 0;
invoke_vi(144, $352 | 0);
$354 = __THREW__;
__THREW__ = 0;
if (!($354 & 1)) {
__ZdlPv($352);
HEAP32[17197] = 0;
break;
}
$356 = ___cxa_find_matching_catch_2() | 0;
$357 = tempRet0;
__ZdlPv($352);
$$0 = $357;
$$02 = $356;
___resumeException($$02 | 0);
} while (0);
$358 = HEAP32[17198] | 0;
do if ($358 | 0) {
__THREW__ = 0;
invoke_vi(93, $358 | 0);
$360 = __THREW__;
__THREW__ = 0;
if (!($360 & 1)) {
__ZdlPv($358);
HEAP32[17198] = 0;
break;
}
$362 = ___cxa_find_matching_catch_2() | 0;
$363 = tempRet0;
__ZdlPv($358);
$$0 = $363;
$$02 = $362;
___resumeException($$02 | 0);
} while (0);
$364 = HEAP32[17199] | 0;
do if ($364 | 0) {
__THREW__ = 0;
invoke_vi(93, $364 | 0);
$366 = __THREW__;
__THREW__ = 0;
if (!($366 & 1)) {
__ZdlPv($364);
HEAP32[17199] = 0;
break;
}
$368 = ___cxa_find_matching_catch_2() | 0;
$369 = tempRet0;
__ZdlPv($364);
$$0 = $369;
$$02 = $368;
___resumeException($$02 | 0);
} while (0);
$370 = HEAP32[17200] | 0;
do if ($370 | 0) {
__THREW__ = 0;
invoke_vi(144, $370 | 0);
$372 = __THREW__;
__THREW__ = 0;
if (!($372 & 1)) {
__ZdlPv($370);
HEAP32[17200] = 0;
break;
}
$374 = ___cxa_find_matching_catch_2() | 0;
$375 = tempRet0;
__ZdlPv($370);
$$0 = $375;
$$02 = $374;
___resumeException($$02 | 0);
} while (0);
$376 = HEAP32[17201] | 0;
do if ($376 | 0) {
__THREW__ = 0;
invoke_vi(144, $376 | 0);
$378 = __THREW__;
__THREW__ = 0;
if (!($378 & 1)) {
__ZdlPv($376);
HEAP32[17201] = 0;
break;
}
$380 = ___cxa_find_matching_catch_2() | 0;
$381 = tempRet0;
__ZdlPv($376);
$$0 = $381;
$$02 = $380;
___resumeException($$02 | 0);
} while (0);
$382 = HEAP32[17751] | 0;
do if ($382 | 0) {
__THREW__ = 0;
invoke_vi(144, $382 | 0);
$384 = __THREW__;
__THREW__ = 0;
if (!($384 & 1)) {
__ZdlPv($382);
HEAP32[17751] = 0;
break;
}
$386 = ___cxa_find_matching_catch_2() | 0;
$387 = tempRet0;
__ZdlPv($382);
$$0 = $387;
$$02 = $386;
___resumeException($$02 | 0);
} while (0);
$388 = HEAP32[17752] | 0;
do if ($388 | 0) {
__THREW__ = 0;
invoke_vi(93, $388 | 0);
$390 = __THREW__;
__THREW__ = 0;
if (!($390 & 1)) {
__ZdlPv($388);
HEAP32[17752] = 0;
break;
}
$392 = ___cxa_find_matching_catch_2() | 0;
$393 = tempRet0;
__ZdlPv($388);
$$0 = $393;
$$02 = $392;
___resumeException($$02 | 0);
} while (0);
$394 = HEAP32[17753] | 0;
do if ($394 | 0) {
__THREW__ = 0;
invoke_vi(144, $394 | 0);
$396 = __THREW__;
__THREW__ = 0;
if (!($396 & 1)) {
__ZdlPv($394);
HEAP32[17753] = 0;
break;
}
$398 = ___cxa_find_matching_catch_2() | 0;
$399 = tempRet0;
__ZdlPv($394);
$$0 = $399;
$$02 = $398;
___resumeException($$02 | 0);
} while (0);
$400 = HEAP32[17754] | 0;
do if ($400 | 0) {
__THREW__ = 0;
invoke_vi(144, $400 | 0);
$402 = __THREW__;
__THREW__ = 0;
if (!($402 & 1)) {
__ZdlPv($400);
HEAP32[17754] = 0;
break;
}
$404 = ___cxa_find_matching_catch_2() | 0;
$405 = tempRet0;
__ZdlPv($400);
$$0 = $405;
$$02 = $404;
___resumeException($$02 | 0);
} while (0);
$406 = HEAP32[17755] | 0;
if ($406 | 0) {
__ZdlPv($406);
HEAP32[17755] = 0;
}
$408 = HEAP32[17756] | 0;
do if ($408 | 0) {
__THREW__ = 0;
invoke_vi(93, $408 | 0);
$410 = __THREW__;
__THREW__ = 0;
if (!($410 & 1)) {
__ZdlPv($408);
HEAP32[17756] = 0;
break;
}
$412 = ___cxa_find_matching_catch_2() | 0;
$413 = tempRet0;
__ZdlPv($408);
$$0 = $413;
$$02 = $412;
___resumeException($$02 | 0);
} while (0);
$414 = HEAP32[17759] | 0;
do if ($414 | 0) {
__THREW__ = 0;
invoke_vi(144, $414 | 0);
$416 = __THREW__;
__THREW__ = 0;
if (!($416 & 1)) {
__ZdlPv($414);
HEAP32[17759] = 0;
break;
}
$418 = ___cxa_find_matching_catch_2() | 0;
$419 = tempRet0;
__ZdlPv($414);
$$0 = $419;
$$02 = $418;
___resumeException($$02 | 0);
} while (0);
$420 = HEAP32[17760] | 0;
do if ($420 | 0) {
__THREW__ = 0;
invoke_vi(144, $420 | 0);
$422 = __THREW__;
__THREW__ = 0;
if (!($422 & 1)) {
__ZdlPv($420);
HEAP32[17760] = 0;
break;
}
$424 = ___cxa_find_matching_catch_2() | 0;
$425 = tempRet0;
__ZdlPv($420);
$$0 = $425;
$$02 = $424;
___resumeException($$02 | 0);
} while (0);
$426 = HEAP32[17761] | 0;
do if ($426 | 0) {
__THREW__ = 0;
invoke_vi(144, $426 | 0);
$428 = __THREW__;
__THREW__ = 0;
if (!($428 & 1)) {
__ZdlPv($426);
HEAP32[17761] = 0;
break;
}
$430 = ___cxa_find_matching_catch_2() | 0;
$431 = tempRet0;
__ZdlPv($426);
$$0 = $431;
$$02 = $430;
___resumeException($$02 | 0);
} while (0);
$432 = HEAP32[17762] | 0;
do if ($432 | 0) {
__THREW__ = 0;
invoke_vi(144, $432 | 0);
$434 = __THREW__;
__THREW__ = 0;
if (!($434 & 1)) {
__ZdlPv($432);
HEAP32[17762] = 0;
break;
}
$436 = ___cxa_find_matching_catch_2() | 0;
$437 = tempRet0;
__ZdlPv($432);
$$0 = $437;
$$02 = $436;
___resumeException($$02 | 0);
} while (0);
$438 = HEAP32[17763] | 0;
do if ($438 | 0) {
__THREW__ = 0;
invoke_vi(144, $438 | 0);
$440 = __THREW__;
__THREW__ = 0;
if (!($440 & 1)) {
__ZdlPv($438);
HEAP32[17763] = 0;
break;
}
$442 = ___cxa_find_matching_catch_2() | 0;
$443 = tempRet0;
__ZdlPv($438);
$$0 = $443;
$$02 = $442;
___resumeException($$02 | 0);
} while (0);
$444 = HEAP32[17764] | 0;
do if ($444 | 0) {
__THREW__ = 0;
invoke_vi(144, $444 | 0);
$446 = __THREW__;
__THREW__ = 0;
if (!($446 & 1)) {
__ZdlPv($444);
HEAP32[17764] = 0;
break;
}
$448 = ___cxa_find_matching_catch_2() | 0;
$449 = tempRet0;
__ZdlPv($444);
$$0 = $449;
$$02 = $448;
___resumeException($$02 | 0);
} while (0);
$450 = HEAP32[17765] | 0;
do if ($450 | 0) {
__THREW__ = 0;
invoke_vi(93, $450 | 0);
$452 = __THREW__;
__THREW__ = 0;
if (!($452 & 1)) {
__ZdlPv($450);
HEAP32[17765] = 0;
break;
}
$454 = ___cxa_find_matching_catch_2() | 0;
$455 = tempRet0;
__ZdlPv($450);
$$0 = $455;
$$02 = $454;
___resumeException($$02 | 0);
} while (0);
$456 = HEAP32[17768] | 0;
do if ($456 | 0) {
__THREW__ = 0;
invoke_vi(93, $456 | 0);
$458 = __THREW__;
__THREW__ = 0;
if (!($458 & 1)) {
__ZdlPv($456);
HEAP32[17768] = 0;
break;
}
$460 = ___cxa_find_matching_catch_2() | 0;
$461 = tempRet0;
__ZdlPv($456);
$$0 = $461;
$$02 = $460;
___resumeException($$02 | 0);
} while (0);
$462 = HEAP32[17769] | 0;
do if ($462 | 0) {
__THREW__ = 0;
invoke_vi(93, $462 | 0);
$464 = __THREW__;
__THREW__ = 0;
if (!($464 & 1)) {
__ZdlPv($462);
HEAP32[17769] = 0;
break;
}
$466 = ___cxa_find_matching_catch_2() | 0;
$467 = tempRet0;
__ZdlPv($462);
$$0 = $467;
$$02 = $466;
___resumeException($$02 | 0);
} while (0);
$468 = HEAP32[17758] | 0;
do if ($468 | 0) {
__THREW__ = 0;
invoke_vi(93, $468 | 0);
$470 = __THREW__;
__THREW__ = 0;
if (!($470 & 1)) {
__ZdlPv($468);
HEAP32[17758] = 0;
break;
}
$472 = ___cxa_find_matching_catch_2() | 0;
$473 = tempRet0;
__ZdlPv($468);
$$0 = $473;
$$02 = $472;
___resumeException($$02 | 0);
} while (0);
$474 = HEAP32[17757] | 0;
do if ($474 | 0) {
__THREW__ = 0;
invoke_vi(144, $474 | 0);
$476 = __THREW__;
__THREW__ = 0;
if (!($476 & 1)) {
__ZdlPv($474);
HEAP32[17757] = 0;
break;
}
$478 = ___cxa_find_matching_catch_2() | 0;
$479 = tempRet0;
__ZdlPv($474);
$$0 = $479;
$$02 = $478;
___resumeException($$02 | 0);
} while (0);
$480 = HEAP32[17837] | 0;
if ($480 | 0) {
$482 = HEAP32[$480 >> 2] | 0;
if ($482 | 0) _free($482);
__ZdlPv($480);
HEAP32[17837] = 0;
}
HEAP32[17839] = 0;
$484 = HEAP32[17838] | 0;
if (!$484) {
HEAP32[17840] = 0;
return;
}
$486 = HEAP32[$484 >> 2] | 0;
if ($486 | 0) _free($486);
__ZdlPv($484);
HEAP32[17838] = 0;
HEAP32[17840] = 0;
return;
}
function __ZN17TargettedMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$$$i$i202 = 0, $$$$i$i205 = 0, $$0$i = 0, $$0$i198 = 0, $$0166 = f0, $$0167 = f0, $$0168 = f0, $$0169 = f0, $$0170 = f0, $$0172 = f0, $$0173$off0 = 0, $$0174$off0 = 0, $$0211 = f0, $$0212 = f0, $$0213 = f0, $$0215 = f0, $$1 = f0, $$1171 = f0, $$off$i$i = 0, $$off$i$i197 = 0, $$pre$phi222Z2D = 0, $$pre$phi224Z2D = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink4$v = 0, $$sink8 = 0, $$sink9$v = 0, $$sroa$3$0$copyload = f0, $$sroa$3210$0$copyload = f0, $10 = 0, $11 = 0, $111 = 0, $112 = 0, $118 = f0, $12 = 0, $124 = f0, $125 = f0, $126 = 0, $128 = 0, $133 = 0, $138 = 0, $140 = 0, $141 = 0, $142 = 0, $147 = 0, $148 = 0, $153 = 0, $154 = 0, $159 = 0, $160 = 0, $168 = f0, $169 = f0, $175 = 0, $176 = 0, $198 = 0, $199 = 0, $200 = 0, $201 = 0, $202 = 0, $210 = 0, $215 = 0, $218 = 0, $220 = 0, $221 = 0, $222 = 0, $230 = 0, $231 = 0, $239 = 0, $24 = 0, $25 = 0, $258 = f0, $272 = 0.0, $273 = 0, $274 = 0, $29 = 0, $293 = f0, $3 = 0, $30 = 0, $307 = f0, $31 = f0, $32 = 0, $328 = f0, $33 = 0, $330 = 0, $333 = f0, $345 = 0, $352 = 0, $359 = 0, $360 = 0, $366 = 0, $367 = 0, $369 = 0, $37 = 0, $379 = 0, $380 = 0, $382 = 0, $390 = f0, $394 = f0, $397 = 0.0, $398 = f0, $399 = f0, $4 = 0, $415 = f0, $418 = 0, $423 = f0, $428 = 0, $431 = 0, $432 = 0, $442 = 0, $443 = 0, $461 = 0, $462 = 0, $465 = 0, $473 = 0, $477 = 0.0, $479 = 0.0, $481 = 0, $485 = f0, $490 = 0, $495 = f0, $5 = 0, $503 = 0, $509 = 0.0, $515 = f0, $516 = f0, $54 = 0, $55 = 0, $6 = 0, $61 = f0, $67 = f0, $69 = 0, $7 = 0, $72 = 0, $78 = 0, $8 = 0, $85 = f0, $86 = 0, $88 = 0, $9 = 0, $90 = 0, $93 = 0, $94 = 0, $tmpcast$byval_copy = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer101 = 0, $vararg_buffer107 = 0, $vararg_buffer110 = 0, $vararg_buffer113 = 0, $vararg_buffer116 = 0, $vararg_buffer119 = 0, $vararg_buffer123 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer52 = 0, $vararg_buffer55 = 0, $vararg_buffer59 = 0, $vararg_buffer6 = 0, $vararg_buffer63 = 0, $vararg_buffer65 = 0, $vararg_buffer67 = 0, $vararg_buffer71 = 0, $vararg_buffer73 = 0, $vararg_buffer75 = 0, $vararg_buffer79 = 0, $vararg_buffer8 = 0, $vararg_buffer82 = 0, $vararg_buffer84 = 0, $vararg_buffer86 = 0, $vararg_buffer90 = 0, $vararg_buffer92 = 0, $vararg_buffer95 = 0, $vararg_buffer98 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 496 | 0;
$tmpcast$byval_copy = sp + 476 | 0;
$vararg_buffer123 = sp + 384 | 0;
$vararg_buffer119 = sp + 368 | 0;
$vararg_buffer116 = sp + 360 | 0;
$vararg_buffer113 = sp + 352 | 0;
$vararg_buffer110 = sp + 344 | 0;
$vararg_buffer107 = sp + 336 | 0;
$vararg_buffer101 = sp + 312 | 0;
$vararg_buffer98 = sp + 304 | 0;
$vararg_buffer95 = sp + 296 | 0;
$vararg_buffer92 = sp + 288 | 0;
$vararg_buffer90 = sp + 280 | 0;
$vararg_buffer86 = sp + 264 | 0;
$vararg_buffer84 = sp + 256 | 0;
$vararg_buffer82 = sp + 248 | 0;
$vararg_buffer79 = sp + 240 | 0;
$vararg_buffer75 = sp + 232 | 0;
$vararg_buffer73 = sp + 224 | 0;
$vararg_buffer71 = sp + 216 | 0;
$vararg_buffer67 = sp + 208 | 0;
$vararg_buffer65 = sp + 200 | 0;
$vararg_buffer63 = sp + 192 | 0;
$vararg_buffer59 = sp + 184 | 0;
$vararg_buffer55 = sp + 168 | 0;
$vararg_buffer52 = sp + 160 | 0;
$vararg_buffer49 = sp + 152 | 0;
$vararg_buffer46 = sp + 144 | 0;
$vararg_buffer43 = sp + 136 | 0;
$vararg_buffer40 = sp + 128 | 0;
$vararg_buffer38 = sp + 120 | 0;
$vararg_buffer35 = sp + 112 | 0;
$vararg_buffer32 = sp + 104 | 0;
$vararg_buffer29 = sp + 96 | 0;
$vararg_buffer27 = sp + 88 | 0;
$vararg_buffer24 = sp + 80 | 0;
$vararg_buffer21 = sp + 72 | 0;
$vararg_buffer18 = sp + 64 | 0;
$vararg_buffer14 = sp + 56 | 0;
$vararg_buffer10 = sp + 40 | 0;
$vararg_buffer8 = sp + 32 | 0;
$vararg_buffer6 = sp + 24 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer2 = sp + 8 | 0;
$vararg_buffer = sp;
$3 = sp + 460 | 0;
$4 = sp + 444 | 0;
$5 = sp + 472 | 0;
$6 = sp + 424 | 0;
$7 = sp + 456 | 0;
$8 = sp + 440 | 0;
$9 = sp + 436 | 0;
$10 = sp + 412 | 0;
$11 = sp + 400 | 0;
$12 = sp + 388 | 0;
__ZN13BasicMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture($0, $1, $2);
if (0) {
HEAP32[$vararg_buffer >> 2] = $0;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
__Z7eprintfPKcz(40058, $vararg_buffer);
__ZNK6Vector5printEP8_IO_FILEi($0 + 64 | 0, HEAP32[16082] | 0, 3);
__Z5eputsPKc(40088);
__ZNK6Vector5printEP8_IO_FILEi($0 + 176 | 0, HEAP32[16082] | 0, 3);
__Z5eputsPKc(40096);
__ZNK6Vector5printEP8_IO_FILEi($0 + 288 | 0, HEAP32[16082] | 0, 3);
__Z5eputsPKc(40104);
__ZNK6Vector5printEP8_IO_FILEi($0 + 400 | 0, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
$24 = $0 + 528 | 0;
$25 = HEAP32[$24 >> 2] | 0;
$29 = (HEAP8[$25 + 13 >> 0] & 64) != 0;
$30 = $0 + 40 | 0;
$31 = Math_fround(HEAPF32[$30 >> 2]);
$32 = $0 + 8 | 0;
$33 = HEAP32[$32 >> 2] | 0;
if ($29) switch ($33 | 0) {
case 3:
case 5:
{
label = 6;
break;
}
default:
{
$$0213 = $31;
$515 = $31;
$88 = $33;
label = 18;
}
} else if (($33 | 1 | 0) == 5) label = 6; else {
$$0215 = $31;
$516 = $31;
$90 = $33;
label = 19;
}
if ((label | 0) == 6) {
$37 = HEAP32[$25 + 20 >> 2] | 0;
HEAP32[$2 >> 2] = HEAP32[$37 >> 2];
HEAP32[$2 + 4 >> 2] = HEAP32[$37 + 4 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$37 + 8 >> 2];
HEAP32[$2 + 12 >> 2] = HEAP32[$37 + 12 >> 2];
HEAP32[$2 + 16 >> 2] = HEAP32[$37 + 16 >> 2];
if (($2 | 0) != ($37 | 0)) {
HEAP32[$2 + 20 >> 2] = HEAP32[$37 + 20 >> 2];
HEAP32[$2 + 24 >> 2] = HEAP32[$37 + 24 >> 2];
HEAP32[$2 + 28 >> 2] = HEAP32[$37 + 28 >> 2];
HEAP32[$2 + 32 >> 2] = HEAP32[$37 + 32 >> 2];
HEAP32[$2 + 36 >> 2] = HEAP32[$37 + 36 >> 2];
}
$54 = $2 + 40 | 0;
$55 = $37 + 40 | 0;
HEAP32[$54 >> 2] = HEAP32[$55 >> 2];
HEAP32[$54 + 4 >> 2] = HEAP32[$55 + 4 >> 2];
HEAP32[$54 + 8 >> 2] = HEAP32[$55 + 8 >> 2];
HEAP32[$54 + 12 >> 2] = HEAP32[$55 + 12 >> 2];
HEAP32[$54 + 16 >> 2] = HEAP32[$55 + 16 >> 2];
HEAP32[$54 + 20 >> 2] = HEAP32[$55 + 20 >> 2];
HEAP32[$54 + 24 >> 2] = HEAP32[$55 + 24 >> 2];
HEAP32[$54 + 28 >> 2] = HEAP32[$55 + 28 >> 2];
HEAP8[$2 + 52 >> 0] = 0;
$61 = Math_fround(Math_abs(Math_fround(HEAPF32[(HEAP32[$2 + 56 >> 2] | 0) + 228 >> 2])));
$67 = Math_fround($31 * Math_fround(Math_fround($61 * Math_fround(HEAPF32[(HEAP32[$1 >> 2] | 0) + 264 >> 2])) + Math_fround(1.0)));
if (!0) $$pre$phi224Z2D = $2 + 44 | 0; else {
__Z7eprintfPKcz(40112, $vararg_buffer2);
$69 = $2 + 44 | 0;
__ZNK19PostureChangeTiming5printEP8_IO_FILE($69, HEAP32[16082] | 0);
__Z5eputcc(10);
__Z5eputcc(10);
$$pre$phi224Z2D = $69;
}
$72 = HEAP32[HEAP32[$24 >> 2] >> 2] | 0;
if (Math_fround(HEAPF32[$2 + 44 >> 2]) == Math_fround(-2.0)) HEAP32[$$pre$phi224Z2D >> 2] = HEAP32[$72 + 272 >> 2];
$78 = $2 + 48 | 0;
if (Math_fround(HEAPF32[$78 >> 2]) == Math_fround(-2.0)) HEAP32[$78 >> 2] = HEAP32[$72 + 276 >> 2];
if (0) {
__Z7eprintfPKcz(40140, $vararg_buffer4);
__ZNK19PostureChangeTiming5printEP8_IO_FILE($$pre$phi224Z2D, HEAP32[16082] | 0);
__Z5eputcc(10);
__Z5eputcc(10);
}
$85 = Math_fround(HEAPF32[$30 >> 2]);
$86 = HEAP32[$32 >> 2] | 0;
if ($29) {
$$0213 = $67;
$515 = $85;
$88 = $86;
label = 18;
} else {
$$0215 = $67;
$516 = $85;
$90 = $86;
label = 19;
}
}
if ((label | 0) == 18) if (($88 | 1 | 0) == 5) {
$$0212 = $$0213;
$125 = $515;
label = 20;
} else {
$$0168 = $515;
$$0211 = $$0213;
} else if ((label | 0) == 19) switch ($90 | 0) {
case 3:
case 5:
{
$$0212 = $$0215;
$125 = $516;
label = 20;
break;
}
default:
{
$$0168 = $516;
$$0211 = $$0215;
}
}
if ((label | 0) == 20) {
$93 = HEAP32[(HEAP32[$24 >> 2] | 0) + 24 >> 2] | 0;
$94 = $2 + 72 | 0;
HEAP32[$94 >> 2] = HEAP32[$93 >> 2];
HEAP32[$94 + 4 >> 2] = HEAP32[$93 + 4 >> 2];
HEAP32[$94 + 8 >> 2] = HEAP32[$93 + 8 >> 2];
HEAP32[$94 + 12 >> 2] = HEAP32[$93 + 12 >> 2];
HEAP32[$94 + 16 >> 2] = HEAP32[$93 + 16 >> 2];
if (($94 | 0) != ($93 | 0)) {
HEAP32[$2 + 92 >> 2] = HEAP32[$93 + 20 >> 2];
HEAP32[$2 + 96 >> 2] = HEAP32[$93 + 24 >> 2];
HEAP32[$2 + 100 >> 2] = HEAP32[$93 + 28 >> 2];
HEAP32[$2 + 104 >> 2] = HEAP32[$93 + 32 >> 2];
HEAP32[$2 + 108 >> 2] = HEAP32[$93 + 36 >> 2];
}
$111 = $2 + 112 | 0;
$112 = $93 + 40 | 0;
HEAP32[$111 >> 2] = HEAP32[$112 >> 2];
HEAP32[$111 + 4 >> 2] = HEAP32[$112 + 4 >> 2];
HEAP32[$111 + 8 >> 2] = HEAP32[$112 + 8 >> 2];
HEAP32[$111 + 12 >> 2] = HEAP32[$112 + 12 >> 2];
HEAP32[$111 + 16 >> 2] = HEAP32[$112 + 16 >> 2];
HEAP32[$111 + 20 >> 2] = HEAP32[$112 + 20 >> 2];
HEAP32[$111 + 24 >> 2] = HEAP32[$112 + 24 >> 2];
HEAP32[$111 + 28 >> 2] = HEAP32[$112 + 28 >> 2];
HEAP8[$2 + 124 >> 0] = 0;
$118 = Math_fround(Math_abs(Math_fround(HEAPF32[(HEAP32[$2 + 128 >> 2] | 0) + 228 >> 2])));
$124 = Math_fround($125 * Math_fround(Math_fround($118 * Math_fround(HEAPF32[(HEAP32[$1 >> 2] | 0) + 264 >> 2])) + Math_fround(1.0)));
$126 = $2 + 116 | 0;
$128 = HEAP32[HEAP32[$24 >> 2] >> 2] | 0;
if (Math_fround(HEAPF32[$126 >> 2]) == Math_fround(-2.0)) HEAP32[$126 >> 2] = HEAP32[$128 + 272 >> 2];
$133 = $2 + 120 | 0;
if (Math_fround(HEAPF32[$133 >> 2]) == Math_fround(-2.0)) {
HEAP32[$133 >> 2] = HEAP32[$128 + 276 >> 2];
$$0168 = $124;
$$0211 = $$0212;
} else {
$$0168 = $124;
$$0211 = $$0212;
}
}
$138 = $2 + 72 | 0;
$$sink = $29 ? $2 : $138;
$140 = $0 + 60 | 0;
$141 = $0 + 512 | 0;
$142 = $$sink + 44 | 0;
$147 = HEAP32[$142 + 4 >> 2] | 0;
$148 = $141;
HEAP32[$148 >> 2] = HEAP32[$142 >> 2];
HEAP32[$148 + 4 >> 2] = $147;
$153 = $0 + 520 | 0;
$154 = $2 + 116 | 0;
$159 = HEAP32[$154 + 4 >> 2] | 0;
$160 = $153;
HEAP32[$160 >> 2] = HEAP32[$154 >> 2];
HEAP32[$160 + 4 >> 2] = $159;
if (0) {
__Z7eprintfPKcz(40185, $vararg_buffer6);
__ZNK19PostureChangeTiming5printEP8_IO_FILE($141, HEAP32[16082] | 0);
__Z5eputcc(10);
__Z7eprintfPKcz(40229, $vararg_buffer8);
__ZNK19PostureChangeTiming5printEP8_IO_FILE($153, HEAP32[16082] | 0);
__Z5eputcc(10);
__Z5eputcc(10);
}
$168 = $$0211 > $$0168 ? $$0211 : $$0168;
$169 = Math_fround(HEAPF32[$30 >> 2]);
if ($169 != $168) {
if (0) {
HEAPF64[$vararg_buffer10 >> 3] = +$169;
HEAPF64[$vararg_buffer10 + 8 >> 3] = +$168;
__Z7eprintfPKcz(40272, $vararg_buffer10);
}
HEAPF32[$30 >> 2] = $168;
}
$175 = $0 + 284 | 0;
__ZN7Gesture12InitPosture1ER19TwoHConcretePosture(HEAP32[$24 >> 2] | 0, $175);
$176 = HEAP32[$32 >> 2] | 0;
switch ($176 | 0) {
case 3:
case 5:
break;
default:
HEAP32[$0 + 340 >> 2] = HEAP32[$0 + 116 >> 2];
}
if (($176 | 1 | 0) != 5) HEAP32[$0 + 452 >> 2] = HEAP32[$0 + 228 >> 2];
if (0) {
HEAP32[$vararg_buffer14 >> 2] = $0;
HEAP32[$vararg_buffer14 + 4 >> 2] = $1;
__Z7eprintfPKcz(40317, $vararg_buffer14);
__ZNK6Vector5printEP8_IO_FILEi($0 + 64 | 0, HEAP32[16082] | 0, 3);
__Z5eputsPKc(40088);
__ZNK6Vector5printEP8_IO_FILEi($0 + 176 | 0, HEAP32[16082] | 0, 3);
__Z5eputsPKc(40096);
__ZNK6Vector5printEP8_IO_FILEi($0 + 288 | 0, HEAP32[16082] | 0, 3);
__Z5eputsPKc(40104);
__ZNK6Vector5printEP8_IO_FILEi($0 + 400 | 0, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
$198 = HEAP32[(HEAP32[$24 >> 2] | 0) + 40 >> 2] | 0;
$199 = $198 + 64 | 0;
$200 = $198 + 63 | 0;
$201 = (HEAP8[($29 ? $200 : $199) >> 0] | 0) != 0;
$202 = (HEAP8[($29 ? $199 : $200) >> 0] | 0) != 0;
if (!((HEAP32[$198 + 24 >> 2] ^ HEAP32[$198 + 12 >> 2]) & 16777215)) {
$$sroa$3$0$copyload = Math_fround(HEAPF32[$198 + 32 >> 2]);
$$sroa$3210$0$copyload = Math_fround(HEAPF32[$198 + 20 >> 2]);
$210 = $$sroa$3210$0$copyload == $$sroa$3$0$copyload ? ((HEAP32[$198 + 16 >> 2] ^ HEAP32[$198 + 28 >> 2]) & 16777215 | 0) == 0 : 0;
} else $210 = 0;
do if (0) {
HEAP32[$vararg_buffer18 >> 2] = $210 ? 84 : 70;
__Z7eprintfPKcz(40360, $vararg_buffer18);
HEAP32[$vararg_buffer21 >> 2] = $201 ? 84 : 70;
__Z7eprintfPKcz(40377, $vararg_buffer21);
HEAP32[$vararg_buffer24 >> 2] = $202 ? 84 : 70;
__Z7eprintfPKcz(40404, $vararg_buffer24);
__Z5eputsPKc(40430);
$215 = HEAP32[(HEAP32[$24 >> 2] | 0) + 40 >> 2] | 0;
if (!$215) {
__Z5eputsPKc(61277);
break;
} else {
__ZNK20ArmHandConstellation5printEP8_IO_FILE($215, HEAP32[16082] | 0);
break;
}
} while (0);
$218 = HEAP32[$24 >> 2] | 0;
$220 = HEAP32[$218 + 40 >> 2] | 0;
$221 = $220 + 12 | 0;
$222 = HEAPU16[$221 >> 1] | HEAPU8[$221 + 2 >> 0] << 16;
$$$$i$i205 = ($222 & 252 | 0) == 12 | (($222 & 1015808 | 0) != 0 | (($222 & 255) + -1 | 0) >>> 0 < 11);
$230 = $220 + 24 | 0;
$231 = HEAPU16[$230 >> 1] | HEAPU8[$230 + 2 >> 0] << 16;
$$$$i$i202 = ($231 & 252 | 0) == 12 | (($231 & 1015808 | 0) != 0 | (($231 & 255) + -1 | 0) >>> 0 < 11);
$$sink4$v = $29 ? $$$$i$i202 : $$$$i$i205;
if ($201 & ($210 | ($29 ? $$$$i$i205 : $$$$i$i202))) {
HEAP32[$3 >> 2] = 0;
HEAP32[$4 >> 2] = 0;
$239 = HEAP32[$218 >> 2] | 0;
HEAP32[$5 >> 2] = HEAP32[(HEAP32[$218 + 28 >> 2] | 0) + 16 >> 2];
HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$5 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$5 + 1 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 2 >> 0] = HEAP8[$5 + 2 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 3 >> 0] = HEAP8[$5 + 3 >> 0] | 0;
__ZNK11HanimAvatar12locateSiteIDEb6SiteIDP6VectorRP5JointRP4Site($239, 0, $tmpcast$byval_copy, 0, $3, $4);
if (!(HEAP32[$4 >> 2] | 0)) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(40455, $vararg_buffer27);
__ZNK6SiteID5printEP8_IO_FILE((HEAP32[(HEAP32[$24 >> 2] | 0) + 28 >> 2] | 0) + 16 | 0, HEAP32[16082] | 0);
__Z5eputcc(10);
$$0169 = Math_fround(0.0);
} else {
__ZN6VectorC2Ev($tmpcast$byval_copy);
__ZNK10Quaternion15invRotateVectorERK6VectorRS0_($0 + 324 | 0, 64528, $tmpcast$byval_copy);
__ZN6VectorC2Ev($6);
$258 = Math_fround(__ZN9Handshape16SiteToHullVectorEP4SiteRK6VectorRS2_(HEAP32[(HEAP32[(HEAP32[$24 >> 2] | 0) + 28 >> 2] | 0) + 56 >> 2] | 0, HEAP32[$4 >> 2] | 0, $tmpcast$byval_copy, $6));
if ($258 > Math_fround(0.0) & 1 != 0) {
__Z7LogTimev() | 0;
HEAPF64[$vararg_buffer29 >> 3] = +$258;
__Z7eprintfPKcz(40497, $vararg_buffer29);
__ZNK6SiteID5printEP8_IO_FILE((HEAP32[(HEAP32[$24 >> 2] | 0) + 28 >> 2] | 0) + 16 | 0, HEAP32[16082] | 0);
__Z5eputcc(10);
}
if (0) {
HEAP32[$vararg_buffer32 >> 2] = $0;
__Z7eprintfPKcz(40586, $vararg_buffer32);
__ZNK6Vector5printEP8_IO_FILEi($0 + 288 | 0, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
$272 = +Math_fround(-$258);
HEAPF64[$vararg_buffer35 >> 3] = $272;
__Z7eprintfPKcz(40614, $vararg_buffer35);
__Z5eputcc(10);
}
$$0169 = $258;
}
$$1 = $$0169;
} else $$1 = Math_fround(0.0);
if ($202 & ($210 | $$sink4$v)) {
HEAP32[$3 >> 2] = 0;
HEAP32[$4 >> 2] = 0;
$273 = HEAP32[$24 >> 2] | 0;
$274 = HEAP32[$273 >> 2] | 0;
HEAP32[$7 >> 2] = HEAP32[(HEAP32[$273 + 32 >> 2] | 0) + 16 >> 2];
HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$7 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$7 + 1 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 2 >> 0] = HEAP8[$7 + 2 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 3 >> 0] = HEAP8[$7 + 3 >> 0] | 0;
__ZNK11HanimAvatar12locateSiteIDEb6SiteIDP6VectorRP5JointRP4Site($274, 0, $tmpcast$byval_copy, 0, $3, $4);
if (!(HEAP32[$4 >> 2] | 0)) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(40627, $vararg_buffer38);
__ZNK6SiteID5printEP8_IO_FILE((HEAP32[(HEAP32[$24 >> 2] | 0) + 32 >> 2] | 0) + 16 | 0, HEAP32[16082] | 0);
__Z5eputcc(10);
$$0170 = Math_fround(0.0);
} else {
__ZN6VectorC2Ev($tmpcast$byval_copy);
__ZNK10Quaternion15invRotateVectorERK6VectorRS0_($0 + 436 | 0, 64564, $tmpcast$byval_copy);
__ZN6VectorC2Ev($6);
$293 = Math_fround(__ZN9Handshape16SiteToHullVectorEP4SiteRK6VectorRS2_(HEAP32[(HEAP32[(HEAP32[$24 >> 2] | 0) + 32 >> 2] | 0) + 56 >> 2] | 0, HEAP32[$4 >> 2] | 0, $tmpcast$byval_copy, $6));
if ($293 > Math_fround(0.0) & 1 != 0) {
__Z7LogTimev() | 0;
HEAPF64[$vararg_buffer40 >> 3] = +$293;
__Z7eprintfPKcz(40668, $vararg_buffer40);
__ZNK6SiteID5printEP8_IO_FILE((HEAP32[(HEAP32[$24 >> 2] | 0) + 32 >> 2] | 0) + 16 | 0, HEAP32[16082] | 0);
__Z5eputcc(10);
}
if (0) {
HEAP32[$vararg_buffer43 >> 2] = $0;
__Z7eprintfPKcz(40756, $vararg_buffer43);
__ZNK6Vector5printEP8_IO_FILEi($0 + 400 | 0, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
HEAPF64[$vararg_buffer46 >> 3] = +$293;
__Z7eprintfPKcz(40784, $vararg_buffer46);
__Z5eputcc(10);
}
$$0170 = $293;
}
$$1171 = $$0170;
} else $$1171 = Math_fround(0.0);
$307 = Math_fround($$1 + $$1171);
if (!(HEAP32[(HEAP32[(HEAP32[$24 >> 2] | 0) + 40 >> 2] | 0) + 44 >> 2] | 0)) $$0172 = $307; else {
if (1) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer49 >> 2] = HEAP32[(HEAP32[(HEAP32[$24 >> 2] | 0) + 40 >> 2] | 0) + 44 >> 2];
__Z7eprintfPKcz(40797, $vararg_buffer49);
}
if (0) {
HEAP32[$vararg_buffer52 >> 2] = HEAP32[(HEAP32[(HEAP32[$24 >> 2] | 0) + 40 >> 2] | 0) + 44 >> 2];
__Z7eprintfPKcz(40879, $vararg_buffer52);
}
$328 = Math_fround(HEAPF32[(HEAP32[$24 >> 2] | 0) + 16 >> 2]);
$330 = $2 + 4 | 0;
$333 = Math_fround($307 + Math_fround($328 * Math_fround(__ZNK11HanimAvatar15siteStdDistanceERK10SiteIDPair(HEAP32[$1 >> 2] | 0, $330))));
if (!0) $$0172 = $333; else {
HEAP32[$vararg_buffer55 >> 2] = $0;
HEAPF64[$vararg_buffer55 + 8 >> 3] = +$333;
__Z7eprintfPKcz(40992, $vararg_buffer55);
__ZNK10SiteIDPair5printEP8_IO_FILE($330, HEAP32[16082] | 0);
__Z5eputcc(10);
$$0172 = $333;
}
}
if ($$0172 >= Math_fround(0.0)) if (HEAP32[(HEAP32[(HEAP32[$24 >> 2] | 0) + 40 >> 2] | 0) + 44 >> 2] | 0) {
$345 = $2 + 16 | 0;
$$off$i$i197 = ((HEAPU16[$345 >> 1] | HEAPU8[$345 + 2 >> 0] << 16) & 255) + -1 | 0;
if ($$off$i$i197 >>> 0 < 11) $$0$i198 = HEAP16[9036 + ($$off$i$i197 << 1) >> 1] | 0; else $$0$i198 = 0;
$352 = $2 + 88 | 0;
$$off$i$i = ((HEAPU16[$352 >> 1] | HEAPU8[$352 + 2 >> 0] << 16) & 255) + -1 | 0;
if ($$off$i$i >>> 0 < 11) $$0$i = HEAP16[9036 + ($$off$i$i << 1) >> 1] | 0; else $$0$i = 0;
$359 = $$0$i198 << 16 >> 16 > $$0$i << 16 >> 16;
$360 = $$0$i << 16 >> 16 > $$0$i198 << 16 >> 16;
$$sink8 = $29 ? $359 : $360;
$$sink9$v = $29 ? $360 : $359;
if (0) {
HEAP32[$vararg_buffer59 >> 2] = $$sink8 ? 84 : 70;
HEAP32[$vararg_buffer59 + 4 >> 2] = $$sink9$v ? 84 : 70;
__Z7eprintfPKcz(41024, $vararg_buffer59);
}
__ZN6VectorC2Ev($3);
do if ($201 | $$sink9$v) if (!1) $$0174$off0 = 0; else {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer67 >> 2] = $201 ? 84 : 70;
HEAP32[$vararg_buffer67 + 4 >> 2] = $$sink9$v ? 84 : 70;
__Z7eprintfPKcz(41130, $vararg_buffer67);
$$0174$off0 = 0;
} else {
$366 = HEAP32[(HEAP32[$24 >> 2] | 0) + 28 >> 2] | 0;
$367 = $$sink + 16 | 0;
HEAP32[$8 >> 2] = HEAP32[$367 >> 2];
HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$8 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$8 + 1 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 2 >> 0] = HEAP8[$8 + 2 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 3 >> 0] = HEAP8[$8 + 3 >> 0] | 0;
$369 = __ZN11OneHGesture35transferHandsiteNormalToGlobalFrameER6Vector6SiteID($366, $3, $tmpcast$byval_copy) | 0;
if (!1) $$0174$off0 = $369; else {
__Z7LogTimev() | 0;
if ($369) {
__Z7eprintfPKcz(41051, $vararg_buffer63);
__ZNK6SiteID5printEP8_IO_FILE($367, HEAP32[16082] | 0);
__Z5eputsPKc(63577);
__ZNK6Vector5printEP8_IO_FILEi($3, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
$$0174$off0 = 1;
break;
} else {
__Z7eprintfPKcz(41092, $vararg_buffer65);
__ZNK6SiteID5printEP8_IO_FILE($367, HEAP32[16082] | 0);
__Z5eputcc(10);
$$0174$off0 = 0;
break;
}
}
} while (0);
__ZN6VectorC2Ev($4);
do if ($202 | $$sink8) {
if (!1) {
$$0173$off0 = 0;
break;
}
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer75 >> 2] = $202 ? 84 : 70;
HEAP32[$vararg_buffer75 + 4 >> 2] = $$sink8 ? 84 : 70;
__Z7eprintfPKcz(41299, $vararg_buffer75);
$$0173$off0 = 0;
} else {
$379 = HEAP32[(HEAP32[$24 >> 2] | 0) + 32 >> 2] | 0;
$380 = ($29 ? $138 : $2) + 16 | 0;
HEAP32[$9 >> 2] = HEAP32[$380 >> 2];
HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$9 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$9 + 1 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 2 >> 0] = HEAP8[$9 + 2 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 3 >> 0] = HEAP8[$9 + 3 >> 0] | 0;
$382 = __ZN11OneHGesture35transferHandsiteNormalToGlobalFrameER6Vector6SiteID($379, $4, $tmpcast$byval_copy) | 0;
if (!1) {
$$0173$off0 = $382;
break;
}
__Z7LogTimev() | 0;
if ($382) {
__Z7eprintfPKcz(41222, $vararg_buffer71);
__ZNK6SiteID5printEP8_IO_FILE($380, HEAP32[16082] | 0);
__Z5eputsPKc(63577);
__ZNK6Vector5printEP8_IO_FILEi($4, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
$$0173$off0 = 1;
break;
} else {
__Z7eprintfPKcz(41262, $vararg_buffer73);
__ZNK6SiteID5printEP8_IO_FILE($380, HEAP32[16082] | 0);
__Z5eputcc(10);
$$0173$off0 = 0;
break;
}
} while (0);
__ZN6VectorC2Ev($tmpcast$byval_copy);
do if ($$0174$off0) {
if (!$$0173$off0) {
__ZN6Vector7setFromERKS_($tmpcast$byval_copy, $3);
break;
}
$390 = Math_fround(__ZNK6Vector12cosAngleWithERKS_($3, $4));
if ($390 > Math_fround(.800000011)) {
__ZN6Vector7setFromEfff($tmpcast$byval_copy, Math_fround(1.0), Math_fround(0.0), Math_fround(0.0));
if (!1) break;
__Z7LogTimev() | 0;
$394 = Math_fround(Math_fround(+Math_acos(+$390)) * Math_fround(180.0));
$397 = +Math_fround($394 / Math_fround(HEAPF32[588]));
HEAPF64[$vararg_buffer79 >> 3] = $397;
__Z7eprintfPKcz(41390, $vararg_buffer79);
break;
} else {
__ZN6Vector11setSubtractERKS_S1_($tmpcast$byval_copy, $3, $4);
$398 = Math_fround(__ZNK6Vector8lengthsqEv($3));
$399 = Math_fround(__ZNK6Vector8lengthsqEv($4));
__ZN6Vector9setLengthEf($tmpcast$byval_copy, Math_fround(Math_sqrt(Math_fround($398 < $399 ? $398 : $399)))) | 0;
if (!1) break;
__Z7LogTimev() | 0;
__Z7eprintfPKcz(41485, $vararg_buffer82);
__Z5eputsPKc(53852);
__ZNK6Vector5printEP8_IO_FILEi($3, HEAP32[16082] | 0, 3);
__Z5eputsPKc(53852);
__ZNK6Vector5printEP8_IO_FILEi($4, HEAP32[16082] | 0, 3);
__Z5eputsPKc(53852);
__ZNK6Vector5printEP8_IO_FILEi($tmpcast$byval_copy, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
break;
}
} else if ($$0173$off0) {
__ZN6Vector11setSubtractERKS_($tmpcast$byval_copy, $4);
break;
} else {
__ZN6Vector7setFromEfff($tmpcast$byval_copy, Math_fround(1.0), Math_fround(0.0), Math_fround(0.0));
break;
} while (0);
do if (Math_fround(HEAPF32[$tmpcast$byval_copy >> 2]) == Math_fround(0.0)) {
if (!(Math_fround(HEAPF32[$tmpcast$byval_copy + 4 >> 2]) == Math_fround(0.0))) break;
if (!(Math_fround(HEAPF32[$tmpcast$byval_copy + 8 >> 2]) == Math_fround(0.0))) break;
__ZN6Vector7setFromEfff($tmpcast$byval_copy, Math_fround(1.0), Math_fround(0.0), Math_fround(0.0));
} while (0);
$415 = Math_fround(HEAPF32[16285]);
$418 = HEAP8[(HEAP32[$24 >> 2] | 0) + 13 >> 0] | 0;
do if (!($418 & 1)) {
$423 = Math_fround(Math_fround(1.0) - $415);
if (!($418 & 2)) {
$$0166 = $29 ? $415 : $423;
$$0167 = $29 ? $423 : $415;
break;
} else {
$$0166 = $29 ? $423 : $415;
$$0167 = $29 ? $415 : $423;
break;
}
} else {
$$0166 = Math_fround(.5);
$$0167 = Math_fround(.5);
} while (0);
__ZN6Vector9setLengthEf($tmpcast$byval_copy, $$0172) | 0;
if (1) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(41533, $vararg_buffer84);
__ZNK6Vector5printEP8_IO_FILEi($tmpcast$byval_copy, HEAP32[16082] | 0, 3);
__Z5eputsPKc(41569);
__Z7LogTimev() | 0;
HEAPF64[$vararg_buffer86 >> 3] = +$$0167;
HEAPF64[$vararg_buffer86 + 8 >> 3] = +$$0166;
__Z7eprintfPKcz(41574, $vararg_buffer86);
}
__ZN6VectorC2Ev($6);
$428 = HEAP32[$24 >> 2] | 0;
$431 = (HEAP32[$428 + 28 >> 2] | 0) + 4 | 0;
$432 = HEAPU16[$431 >> 1] | HEAPU8[$431 + 2 >> 0] << 16;
do if (!(($432 & 252 | 0) == 12 | (($432 & 1015808 | 0) != 0 | (($432 & 255) + -1 | 0) >>> 0 < 11))) {
$442 = (HEAP32[$428 + 32 >> 2] | 0) + 4 | 0;
$443 = HEAPU16[$442 >> 1] | HEAPU8[$442 + 2 >> 0] << 16;
if (($443 & 252 | 0) == 12 | (($443 & 1015808 | 0) != 0 | (($443 & 255) + -1 | 0) >>> 0 < 11)) break;
__ZN6Vector11setSubtractERKS_S1_($6, $0 + 400 | 0, $0 + 288 | 0);
} while (0);
if (0) {
__Z7eprintfPKcz(41622, $vararg_buffer90);
__ZNK6Vector5printEP8_IO_FILEi($6, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
__ZN6VectorC2Ev($10);
__ZN6Vector11setSubtractERKS_S1_($10, $tmpcast$byval_copy, $6);
if (0) {
HEAP32[$vararg_buffer92 >> 2] = $0;
__Z7eprintfPKcz(41642, $vararg_buffer92);
__ZNK6Vector5printEP8_IO_FILEi($tmpcast$byval_copy, HEAP32[16082] | 0, 3);
__Z5eputsPKc(41661);
__ZNK6Vector5printEP8_IO_FILEi($6, HEAP32[16082] | 0, 3);
__Z5eputsPKc(41670);
__ZNK6Vector5printEP8_IO_FILEi($10, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
__ZN6VectorC2ERKS_($11, $10);
__ZN6Vector8setScaleEf($11, $$0167);
__ZN6VectorC2ERKS_($12, $10);
__ZN6Vector8setScaleEf($12, $$0166);
if (!0) {
$$pre$phi222Z2D = $0 + 400 | 0;
$$pre$phiZ2D = $0 + 288 | 0;
} else {
$461 = $0;
HEAP32[$vararg_buffer95 >> 2] = $461;
__Z7eprintfPKcz(41679, $vararg_buffer95);
$462 = $0 + 288 | 0;
__ZNK6Vector5printEP8_IO_FILEi($462, HEAP32[16082] | 0, 3);
__Z5eputsPKc(41714);
__ZNK6Vector5printEP8_IO_FILEi($11, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
HEAP32[$vararg_buffer98 >> 2] = $461;
__Z7eprintfPKcz(41721, $vararg_buffer98);
$465 = $0 + 400 | 0;
__ZNK6Vector5printEP8_IO_FILEi($465, HEAP32[16082] | 0, 3);
__Z5eputsPKc(41714);
__ZNK6Vector5printEP8_IO_FILEi($12, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
$$pre$phi222Z2D = $465;
$$pre$phiZ2D = $462;
}
__ZN6Vector11setSubtractERKS_($$pre$phiZ2D, $11);
__ZN6Vector6setAddERKS_($$pre$phi222Z2D, $12);
if (0) {
__Z5eputsPKc(41756);
__ZNK6Vector5printEP8_IO_FILEi($$pre$phiZ2D, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z5eputsPKc(41770);
__ZNK6Vector5printEP8_IO_FILEi($$pre$phi222Z2D, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
$473 = HEAP32[$2 + 144 >> 2] | 0;
$477 = +Math_fround(HEAPF32[(HEAP32[$24 >> 2] | 0) + 16 >> 2]);
$479 = +Math_fround($$0166 - $$0167);
HEAP32[$vararg_buffer101 >> 2] = $0;
HEAP32[$vararg_buffer101 + 4 >> 2] = $473;
HEAPF64[$vararg_buffer101 + 8 >> 3] = $477;
HEAPF64[$vararg_buffer101 + 16 >> 3] = $479;
__Z7eprintfPKcz(41784, $vararg_buffer101);
}
}
__ZN25TwoHConcretePostureChange9fixWristsEv($140);
__ZNK7Gesture11ShiftToPalmER19TwoHConcretePosture(HEAP32[$24 >> 2] | 0, $175);
$481 = HEAP32[$32 >> 2] | 0;
switch ($481 | 0) {
case 3:
case 5:
{
$485 = Math_fround(HEAPF32[(HEAP32[$2 + 56 >> 2] | 0) + 228 >> 2]);
HEAPF32[$0 + 356 >> 2] = $485;
if (!0) $490 = $481; else {
HEAPF64[$vararg_buffer107 >> 3] = +$485;
__Z7eprintfPKcz(41853, $vararg_buffer107);
$490 = HEAP32[$32 >> 2] | 0;
}
break;
}
default:
$490 = $481;
}
if (($490 | 1 | 0) == 5) {
$495 = Math_fround(HEAPF32[(HEAP32[$2 + 128 >> 2] | 0) + 228 >> 2]);
HEAPF32[$0 + 468 >> 2] = $495;
if (0) {
HEAPF64[$vararg_buffer110 >> 3] = +$495;
__Z7eprintfPKcz(41898, $vararg_buffer110);
}
}
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$0 >> 2] | 0) + 68 >> 2] & 255]($0);
if (0) {
$503 = $0;
HEAP32[$vararg_buffer113 >> 2] = $503;
__Z7eprintfPKcz(41943, $vararg_buffer113);
__ZNK6Vector5printEP8_IO_FILEi($0 + 288 | 0, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
HEAP32[$vararg_buffer116 >> 2] = $503;
__Z7eprintfPKcz(41970, $vararg_buffer116);
__ZNK6Vector5printEP8_IO_FILEi($0 + 400 | 0, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
$509 = +Math_fround(HEAPF32[$30 >> 2]);
HEAP32[$vararg_buffer119 >> 2] = $503;
HEAPF64[$vararg_buffer119 + 8 >> 3] = $509;
__Z7eprintfPKcz(41997, $vararg_buffer119);
}
if (!1) {
STACKTOP = sp;
return;
}
if (__ZNK19TwoHConcretePosture14totallyDefinedE12SET_OF_HANDS($175, HEAP32[$32 >> 2] | 0) | 0) {
STACKTOP = sp;
return;
}
__Z7LogTimev() | 0;
__Z7eprintfPKcz(42036, $vararg_buffer123);
__ZNK25TwoHConcretePostureChange19printFinalUndefinedEP8_IO_FILE12SET_OF_HANDS($140, HEAP32[16082] | 0, HEAP32[$32 >> 2] | 0);
STACKTOP = sp;
return;
}
function __ZNK11HanimAvatar19computeArmRotationsEPP13JointRotationbRK6VectorRK10QuaternionS8_ff($0, $1, $2, $3, $4, $5, $6, $7) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
$6 = Math_fround($6);
$7 = Math_fround($7);
var $$ = f0, $$0 = f0, $$0386 = f0, $$0387 = f0, $$0389 = f0, $$0392$ph = f0, $$0393 = f0, $$0394 = f0, $$0396 = f0, $$0399 = f0, $$0402 = f0, $$0403 = f0, $$0406 = f0, $$0408 = f0, $$0409 = f0, $$1 = f0, $$1384 = f0, $$1388 = f0, $$1390 = f0, $$1395 = f0, $$1397 = f0, $$1400 = f0, $$1411 = f0, $$2385 = f0, $$2398 = f0, $$2401 = f0, $$2405 = f0, $$3 = f0, $$pre$phi423Z2D = 0, $10 = 0, $103 = f0, $104 = f0, $11 = 0, $110 = 0.0, $111 = f0, $112 = f0, $114 = f0, $12 = 0, $122 = f0, $124 = 0, $125 = f0, $126 = f0, $128 = f0, $129 = f0, $13 = 0, $130 = f0, $131 = f0, $132 = f0, $133 = f0, $138 = f0, $139 = f0, $14 = 0, $140 = f0, $141 = 0, $143 = f0, $146 = f0, $148 = f0, $15 = 0, $152 = f0, $155 = f0, $157 = f0, $16 = 0, $161 = f0, $162 = 0, $163 = f0, $168 = f0, $169 = f0, $17 = 0, $170 = f0, $173 = f0, $176 = f0, $179 = f0, $18 = 0, $187 = f0, $188 = f0, $189 = f0, $19 = 0, $191 = f0, $193 = f0, $194 = 0, $199 = f0, $20 = 0, $203 = f0, $208 = f0, $209 = f0, $21 = 0, $211 = f0, $213 = f0, $214 = f0, $216 = f0, $217 = 0, $219 = f0, $22 = 0, $220 = 0, $222 = f0, $223 = 0, $225 = f0, $226 = f0, $228 = f0, $23 = 0, $230 = f0, $232 = f0, $234 = f0, $235 = f0, $237 = f0, $24 = 0, $244 = f0, $25 = 0, $251 = f0, $259 = f0, $261 = f0, $262 = f0, $264 = f0, $266 = f0, $268 = f0, $270 = f0, $271 = f0, $273 = f0, $280 = f0, $287 = f0, $29 = 0, $295 = f0, $296 = 0, $297 = 0, $298 = f0, $301 = f0, $304 = f0, $308 = f0, $309 = f0, $310 = f0, $312 = 0.0, $314 = 0.0, $316 = 0.0, $320 = f0, $323 = f0, $326 = 0, $327 = 0.0, $33 = 0, $332 = f0, $333 = f0, $337 = f0, $338 = f0, $34 = 0, $349 = f0, $350 = f0, $357 = 0, $358 = f0, $360 = 0, $365 = 0, $366 = f0, $368 = 0, $369 = f0, $37 = 0, $371 = 0, $373 = 0, $38 = 0, $386 = f0, $387 = f0, $389 = f0, $393 = f0, $394 = f0, $395 = f0, $396 = 0, $406 = f0, $407 = f0, $409 = f0, $411 = f0, $413 = f0, $414 = f0, $415 = f0, $417 = f0, $418 = f0, $420 = f0, $421 = f0, $423 = f0, $430 = f0, $437 = f0, $445 = f0, $446 = 0, $447 = f0, $448 = f0, $449 = 0, $450 = f0, $452 = f0, $453 = 0, $454 = f0, $456 = f0, $457 = f0, $481 = f0, $482 = f0, $483 = f0, $484 = f0, $486 = f0, $487 = f0, $489 = f0, $491 = f0, $493 = f0, $495 = f0, $496 = f0, $498 = f0, $50 = 0, $505 = f0, $512 = f0, $520 = f0, $522 = f0, $523 = f0, $525 = f0, $527 = f0, $529 = f0, $531 = f0, $532 = f0, $534 = f0, $541 = f0, $548 = f0, $55 = f0, $556 = f0, $557 = 0, $561 = 0, $565 = 0, $566 = 0, $57 = f0, $570 = 0, $574 = 0, $575 = 0, $584 = f0, $586 = 0, $587 = 0, $588 = 0, $589 = f0, $59 = f0, $590 = f0, $591 = f0, $592 = f0, $593 = f0, $595 = f0, $596 = f0, $597 = f0, $599 = f0, $60 = f0, $600 = f0, $601 = f0, $603 = f0, $61 = 0, $610 = f0, $617 = f0, $62 = f0, $625 = f0, $627 = 0, $63 = 0, $630 = 0, $632 = 0, $637 = f0, $64 = f0, $67 = f0, $68 = f0, $70 = f0, $71 = f0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $79 = f0, $8 = 0, $81 = f0, $82 = f0, $84 = f0, $85 = f0, $86 = f0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = f0, $97 = f0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer23 = 0, $vararg_buffer29 = 0, $vararg_buffer34 = 0, $vararg_buffer42 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer55 = 0, $vararg_buffer59 = 0, $vararg_buffer68 = 0, $vararg_buffer70 = 0, $vararg_buffer72 = 0, $vararg_buffer74 = 0, $vararg_buffer76 = 0, $vararg_buffer78 = 0, $vararg_buffer8 = 0, $vararg_buffer80 = 0, $vararg_buffer82 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 672 | 0;
$vararg_buffer82 = sp + 392 | 0;
$vararg_buffer80 = sp + 384 | 0;
$vararg_buffer78 = sp + 376 | 0;
$vararg_buffer76 = sp + 368 | 0;
$vararg_buffer74 = sp + 360 | 0;
$vararg_buffer72 = sp + 352 | 0;
$vararg_buffer70 = sp + 344 | 0;
$vararg_buffer68 = sp + 336 | 0;
$vararg_buffer59 = sp + 280 | 0;
$vararg_buffer55 = sp + 272 | 0;
$vararg_buffer49 = sp + 240 | 0;
$vararg_buffer46 = sp + 232 | 0;
$vararg_buffer42 = sp + 216 | 0;
$vararg_buffer34 = sp + 168 | 0;
$vararg_buffer29 = sp + 144 | 0;
$vararg_buffer23 = sp + 112 | 0;
$vararg_buffer17 = sp + 80 | 0;
$vararg_buffer11 = sp + 48 | 0;
$vararg_buffer8 = sp + 40 | 0;
$vararg_buffer2 = sp + 8 | 0;
$vararg_buffer = sp;
$8 = sp + 656 | 0;
$9 = sp + 640 | 0;
$10 = sp + 628 | 0;
$11 = sp + 616 | 0;
$12 = sp + 604 | 0;
$13 = sp + 592 | 0;
$14 = sp + 576 | 0;
$15 = sp + 560 | 0;
$16 = sp + 544 | 0;
$17 = sp + 528 | 0;
$18 = sp + 512 | 0;
$19 = sp + 496 | 0;
$20 = sp + 480 | 0;
$21 = sp + 468 | 0;
$22 = sp + 456 | 0;
$23 = sp + 440 | 0;
$24 = sp + 424 | 0;
$25 = sp + 408 | 0;
if (0) {
$29 = HEAP16[36080] | 0;
HEAP32[$vararg_buffer >> 2] = $2 ? 82 : 76;
HEAP32[$vararg_buffer + 4 >> 2] = $29;
__Z7eprintfPKcz(23288, $vararg_buffer);
HEAP16[36080] = (HEAP16[36080] | 0) + 1 << 16 >> 16;
}
$33 = HEAP32[$0 + 72 >> 2] | 0;
$34 = $2 & 1;
$37 = (HEAP32[$33 + 20 + ($34 << 4) >> 2] | 0) + 68 | 0;
$38 = $33 + 20 + ($34 << 4) + 8 | 0;
__ZN6VectorC2ERKS_($9, (HEAP32[$38 >> 2] | 0) + 68 | 0);
__ZN6VectorC2ERKS_($10, (HEAP32[$33 + 20 + ($34 << 4) + 12 >> 2] | 0) + 68 | 0);
__ZN6VectorC2ERKS_($11, (HEAP32[$33 + 20 + ($34 << 4) + 4 >> 2] | 0) + 68 | 0);
__ZN6VectorC2ERKS_($12, $11);
__ZN6Vector11setSubtractERKS_($12, $37);
__ZN6VectorC2ERKS_($13, $12);
HEAPF32[$14 >> 2] = Math_fround(0.0);
HEAPF32[$14 + 4 >> 2] = Math_fround(0.0);
HEAPF32[$14 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$14 + 12 >> 2] = Math_fround(1.0);
$50 = HEAP32[$1 >> 2] | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$50 >> 2] | 0) + 8 >> 2] & 255]($50, $14);
__ZNK10Quaternion12rotateVectorER6Vector($14, $13);
__ZN6Vector11setSubtractERKS_($13, $12);
__ZN6Vector6setAddERKS_($11, $13);
__ZN6Vector6setAddERKS_($9, $13);
__ZN6Vector6setAddERKS_($10, $13);
$55 = Math_fround(HEAPF32[$0 + ($34 * 28 | 0) + 4 >> 2]);
$57 = Math_fround(HEAPF32[$0 + ($34 * 28 | 0) + 8 >> 2]);
$59 = Math_fround(HEAPF32[$0 + ($34 * 28 | 0) + 24 >> 2]);
__ZN6VectorC2ERKS_($15, $3);
__ZN6Vector11setSubtractERKS_($15, $11);
$60 = Math_fround(HEAPF32[$15 >> 2]);
$61 = $15 + 4 | 0;
$62 = Math_fround(HEAPF32[$61 >> 2]);
$63 = $15 + 8 | 0;
$64 = Math_fround(HEAPF32[$63 >> 2]);
$67 = Math_fround(Math_fround($60 * $60) + Math_fround($64 * $64));
$68 = Math_fround(Math_sqrt(Math_fround($67)));
$70 = Math_fround(Math_fround($62 * $62) + $67);
$71 = Math_fround(Math_sqrt(Math_fround($70)));
HEAPF32[$16 >> 2] = Math_fround(0.0);
$72 = $16 + 4 | 0;
HEAPF32[$72 >> 2] = Math_fround(0.0);
$73 = $16 + 8 | 0;
HEAPF32[$73 >> 2] = Math_fround(0.0);
$74 = $16 + 12 | 0;
HEAPF32[$74 >> 2] = Math_fround(1.0);
$75 = $0 + 228 | 0;
$76 = HEAP32[$75 >> 2] | 0;
$79 = Math_fround($59 * Math_fround(HEAPF32[$76 + 32 >> 2]));
$81 = Math_fround(HEAPF32[$76 + 36 >> 2]);
$82 = Math_fround($59 * $81);
$84 = Math_fround(HEAPF32[$76 + 40 >> 2]);
$85 = Math_fround($82 * $84);
$86 = Math_fround($59 - $79);
$87 = $71 > $79;
$88 = $71 < $85;
$89 = $87 | $88;
if ($89) {
if ($87) {
$90 = Math_fround($71 - $79);
$$0402 = Math_fround($71 - Math_fround(Math_fround(Math_sqrt(Math_fround(Math_fround($86 * $86) + Math_fround($90 * $90)))) - $86));
} else {
$97 = Math_fround($85 - $71);
$103 = Math_fround(Math_fround($97 * Math_fround(Math_fround($84 * Math_fround(2.0)) - Math_fround($97 / $81))) / Math_fround($84 * $84));
$104 = Math_fround($71 + $103);
if (!0) $$0402 = $104; else {
$110 = +Math_fround($103 / $81);
HEAPF64[$vararg_buffer2 >> 3] = +$97;
HEAPF64[$vararg_buffer2 + 8 >> 3] = +$84;
HEAPF64[$vararg_buffer2 + 16 >> 3] = +$81;
HEAPF64[$vararg_buffer2 + 24 >> 3] = $110;
__Z7eprintfPKcz(23328, $vararg_buffer2);
$$0402 = $104;
}
}
__ZN6VectorC2ERKS_($8, $11);
__ZN6Vector11setSubtractERKS_($8, $37);
__ZN6VectorC2ERKS_($17, $3);
__ZN6Vector11setSubtractERKS_($17, $37);
$111 = Math_fround(__ZNK6Vector9angleWithERKS_($8, $17));
$112 = Math_fround(__ZNK6Vector6lengthEv($8));
$114 = Math_fround(__Z7cosRulefff($112, Math_fround(__ZNK6Vector6lengthEv($17)), $$0402));
if ($114 < Math_fround(-1.0) | $114 > Math_fround(1.0)) $$0403 = $111; else $$0403 = Math_fround($111 - Math_fround(+Math_acos(+$114)));
if ($87) {
$122 = Math_fround($111 * Math_fround(HEAPF32[(HEAP32[$75 >> 2] | 0) + 12 >> 2]));
$$2405 = $$0403 > $122 ? $122 : $$0403;
} else $$2405 = $$0403;
__ZN6VectorC2Ev($18);
__ZN6Vector15setCrossProductERKS_S1_($18, $8, $17);
$124 = $18 + 4 | 0;
$125 = Math_fround(HEAPF32[$124 >> 2]);
if ($88) {
$126 = Math_fround($125 * Math_fround(2.0));
HEAPF32[$124 >> 2] = $126;
$132 = $126;
} else $132 = $125;
$128 = Math_fround(HEAPF32[$18 + 8 >> 2]);
$129 = Math_fround(-$128);
$130 = $2 ? $129 : $128;
$131 = Math_fround(-$132);
$133 = $2 ? $132 : $131;
$138 = Math_fround($$2405 / Math_fround(Math_sqrt(Math_fround(Math_fround($130 * $130) + Math_fround($133 * $133)))));
$139 = Math_fround($130 * $138);
$140 = Math_fround($133 * $138);
$141 = HEAP32[$75 >> 2] | 0;
$143 = Math_fround(HEAPF32[$141 + 16 >> 2]);
if ($139 > $143) $$0408 = Math_fround($139 / $143); else {
$146 = Math_fround(-$139);
$148 = Math_fround(HEAPF32[$141 + 20 >> 2]);
if ($148 < $146) $$0408 = Math_fround($146 / $148); else $$0408 = Math_fround(0.0);
}
$152 = Math_fround(HEAPF32[$141 + 24 >> 2]);
if ($140 > $152) $$0409 = Math_fround($140 / $152); else {
$155 = Math_fround(-$140);
$157 = Math_fround(HEAPF32[$141 + 28 >> 2]);
if ($157 < $155) $$0409 = Math_fround($155 / $157); else $$0409 = Math_fround(0.0);
}
$161 = $$0408 > $$0409 ? $$0408 : $$0409;
$162 = $161 != Math_fround(0.0);
$163 = Math_fround($$2405 / $161);
$$3 = $162 ? $163 : $$2405;
__ZN10Quaternion15setFromVecAngleERK6Vectorfb($16, $18, $$3, 0);
if ($$0402 > $71 & 0 != 0) {
HEAPF64[$vararg_buffer8 >> 3] = +$$3;
__Z7eprintfPKcz(23391, $vararg_buffer8);
__ZN10Quaternion5printEP8_IO_FILEi($16, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
__ZN6VectorC2EPKS_($19, $37);
__ZNK10Quaternion23rotateVectorAboutCentreERK6VectorRS0_($16, $19, $11);
__ZN6Vector11setSubtractERKS_S1_($15, $3, $11);
$168 = Math_fround(HEAPF32[$15 >> 2]);
$169 = Math_fround(HEAPF32[$61 >> 2]);
$170 = Math_fround(HEAPF32[$63 >> 2]);
$173 = Math_fround(Math_fround($168 * $168) + Math_fround($170 * $170));
$176 = Math_fround(Math_fround($169 * $169) + $173);
$$0 = $168;
$$0387 = $169;
$$0389 = $170;
$$0394 = Math_fround(Math_sqrt(Math_fround($173)));
$$0396 = $176;
$$0399 = Math_fround(Math_sqrt(Math_fround($176)));
} else {
$$0 = $60;
$$0387 = $62;
$$0389 = $64;
$$0394 = $68;
$$0396 = $70;
$$0399 = $71;
}
if ($59 < $$0399) {
$179 = Math_fround($59 / $$0399);
$$1 = Math_fround($179 * $$0);
$$1388 = Math_fround($179 * $$0387);
$$1390 = Math_fround($179 * $$0389);
$$1395 = Math_fround($179 * $$0394);
$$1397 = Math_fround($$0396 * Math_fround($179 * $179));
$$1400 = Math_fround($$0399 * $179);
} else {
$$1 = $$0;
$$1388 = $$0387;
$$1390 = $$0389;
$$1395 = $$0394;
$$1397 = $$0396;
$$1400 = $$0399;
}
$187 = Math_fround($55 * $55);
$188 = Math_fround($57 * $57);
$189 = Math_fround($187 + $188);
$191 = Math_fround($55 * Math_fround(2.0));
$193 = Math_fround(Math_fround($189 - $$1397) / Math_fround($191 * $57));
$194 = $193 < Math_fround(-1.0);
$or$cond3 = $194 | $193 > Math_fround(1.0);
$$ = $194 ? Math_fround(-.995000004) : Math_fround(.995000004);
$199 = Math_fround($189 - Math_fround($57 * Math_fround($55 * Math_fround($$ * Math_fround(2.0)))));
if ($or$cond3) {
$$1411 = $$;
$$2398 = $199;
$$2401 = Math_fround(Math_sqrt(Math_fround($199)));
} else {
$$1411 = $193;
$$2398 = $$1397;
$$2401 = $$1400;
}
$203 = Math_fround(Math_fround(HEAPF32[16542]) - Math_fround(+Math_acos(+$$1411)));
$208 = Math_fround(+Math_acos(+Math_fround(Math_fround(Math_fround($187 + $$2398) - $188) / Math_fround($191 * $$2401))));
$209 = Math_fround(+Math_atan2(+$$1, +$$1390));
$211 = Math_fround(Math_fround(+Math_atan2(+$$1388, +$$1395)) - $208);
$213 = Math_fround($211 + Math_fround(HEAPF32[16541]));
__ZN6VectorC2Efff($8, Math_fround(0.0), Math_fround(1.0), Math_fround(0.0));
__ZN10QuaternionC2ERK6Vectorfb($17, $8, $209, 1);
__ZN6VectorC2Efff($8, Math_fround(-1.0), Math_fround(0.0), Math_fround(0.0));
__ZN10QuaternionC2ERK6Vectorfb($18, $8, $213, 1);
__ZN6VectorC2Efff($8, Math_fround(0.0), Math_fround(1.0), Math_fround(0.0));
__ZN10QuaternionC2ERK6Vectorfb($19, $8, Math_fround(0.0), 1);
$214 = Math_fround(HEAPF32[$17 >> 2]);
$216 = Math_fround(HEAPF32[$17 + 4 >> 2]);
$217 = $20 + 4 | 0;
$219 = Math_fround(HEAPF32[$17 + 8 >> 2]);
$220 = $20 + 8 | 0;
$222 = Math_fround(HEAPF32[$17 + 12 >> 2]);
$223 = $20 + 12 | 0;
$225 = Math_fround(HEAPF32[$18 + 8 >> 2]);
$226 = Math_fround($225 * $216);
$228 = Math_fround(HEAPF32[$18 + 4 >> 2]);
$230 = Math_fround($226 - Math_fround($228 * $219));
$232 = Math_fround(HEAPF32[$18 + 12 >> 2]);
$234 = Math_fround($230 + Math_fround($232 * $214));
$235 = Math_fround(HEAPF32[$18 >> 2]);
$237 = Math_fround($234 + Math_fround($235 * $222));
$244 = Math_fround(Math_fround($228 * $222) + Math_fround(Math_fround($232 * $216) + Math_fround(Math_fround($235 * $219) - Math_fround($225 * $214))));
$251 = Math_fround(Math_fround($225 * $222) + Math_fround(Math_fround($232 * $219) + Math_fround(Math_fround($228 * $214) - Math_fround($235 * $216))));
$259 = Math_fround(Math_fround($232 * $222) + Math_fround(Math_fround(Math_fround(-Math_fround($235 * $214)) - Math_fround($228 * $216)) - Math_fround($225 * $219)));
$261 = Math_fround(HEAPF32[$19 + 8 >> 2]);
$262 = Math_fround($244 * $261);
$264 = Math_fround(HEAPF32[$19 + 4 >> 2]);
$266 = Math_fround($262 - Math_fround($251 * $264));
$268 = Math_fround(HEAPF32[$19 + 12 >> 2]);
$270 = Math_fround($266 + Math_fround($237 * $268));
$271 = Math_fround(HEAPF32[$19 >> 2]);
$273 = Math_fround($270 + Math_fround($259 * $271));
$280 = Math_fround(Math_fround($259 * $264) + Math_fround(Math_fround($244 * $268) + Math_fround(Math_fround($251 * $271) - Math_fround($261 * $237))));
$287 = Math_fround(Math_fround($259 * $261) + Math_fround(Math_fround($251 * $268) + Math_fround(Math_fround($264 * $237) - Math_fround($244 * $271))));
$295 = Math_fround(Math_fround($259 * $268) + Math_fround(Math_fround(Math_fround(-Math_fround($237 * $271)) - Math_fround($244 * $264)) - Math_fround($251 * $261)));
HEAPF32[$20 >> 2] = $273;
HEAPF32[$217 >> 2] = $280;
HEAPF32[$220 >> 2] = $287;
HEAPF32[$223 >> 2] = $295;
$296 = HEAP32[$75 >> 2] | 0;
$297 = $296 + 52 + ($34 << 4) | 0;
$298 = Math_fround(HEAPF32[16542]);
$301 = Math_fround($298 - Math_fround(HEAPF32[$296 + 52 + ($34 << 4) + 12 >> 2]));
__ZN6VectorC2ERKS_($21, $9);
__ZN6Vector11setSubtractERKS_($21, $11);
__ZNK10Quaternion12rotateVectorER6Vector($20, $21);
__ZN6VectorC2EPKS_($8, $297);
$304 = Math_fround(+Math_acos(+Math_fround(-Math_fround(__ZNK6Vector12cosAngleWithERKS_($21, $8)))));
L40 : do if ($304 > $301) {
__ZN6VectorC2EPKS_($8, $297);
$308 = Math_fround(+Math_acos(+Math_fround(-Math_fround(__ZNK6Vector12cosAngleWithERKS_($15, $8)))));
$309 = Math_fround(__Z15sphTriFaceAnglefff($208, $308, $304));
$310 = Math_fround(__Z15sphTriFaceAnglefff($208, $308, $301));
if ($310 < Math_fround(0.0)) {
$312 = +$310;
$314 = +$301;
$316 = +Math_fround(HEAPF32[16541]);
HEAPF64[$vararg_buffer11 >> 3] = $312;
HEAPF64[$vararg_buffer11 + 8 >> 3] = +$304;
HEAPF64[$vararg_buffer11 + 16 >> 3] = $314;
HEAPF64[$vararg_buffer11 + 24 >> 3] = $316;
__Z7eprintfPKcz(23419, $vararg_buffer11);
HEAPF64[$vararg_buffer17 >> 3] = $312;
HEAPF64[$vararg_buffer17 + 8 >> 3] = +$208;
HEAPF64[$vararg_buffer17 + 16 >> 3] = +$308;
HEAPF64[$vararg_buffer17 + 24 >> 3] = $314;
__Z7eprintfPKcz(23483, $vararg_buffer17);
$$0393 = Math_fround(HEAPF32[16541]);
} else $$0393 = $310;
$320 = Math_fround($$0393 - $309);
$323 = Math_fround(HEAPF32[(HEAP32[$75 >> 2] | 0) + 4 >> 2]);
$326 = 0 != 0;
$327 = +$320;
do if ($320 < Math_fround(-$323)) {
if ($326) {
HEAPF64[$vararg_buffer23 >> 3] = $327;
HEAPF64[$vararg_buffer23 + 8 >> 3] = +$323;
HEAPF64[$vararg_buffer23 + 16 >> 3] = +$309;
HEAPF64[$vararg_buffer23 + 24 >> 3] = +$$0393;
__Z7eprintfPKcz(23554, $vararg_buffer23);
$332 = Math_fround(HEAPF32[(HEAP32[$75 >> 2] | 0) + 4 >> 2]);
} else $332 = $323;
$$0392$ph = Math_fround(-$332);
} else if ($326) {
HEAPF64[$vararg_buffer29 >> 3] = $327;
HEAPF64[$vararg_buffer29 + 8 >> 3] = +$309;
HEAPF64[$vararg_buffer29 + 16 >> 3] = +$$0393;
__Z7eprintfPKcz(23615, $vararg_buffer29);
$$0392$ph = $320;
break;
} else {
$333 = Math_fround(-$320);
$$0406 = $2 ? $320 : $333;
break L40;
} while (0);
$337 = Math_fround(-$$0392$ph);
$338 = $2 ? $$0392$ph : $337;
if (!0) $$0406 = $338; else {
HEAP32[$vararg_buffer34 >> 2] = $2 ? 82 : 76;
HEAPF64[$vararg_buffer34 + 8 >> 3] = +$304;
HEAPF64[$vararg_buffer34 + 16 >> 3] = +$301;
HEAPF64[$vararg_buffer34 + 24 >> 3] = +$309;
HEAPF64[$vararg_buffer34 + 32 >> 3] = +$$0393;
HEAPF64[$vararg_buffer34 + 40 >> 3] = +$338;
__Z7eprintfPKcz(23667, $vararg_buffer34);
$$0406 = $338;
}
} else $$0406 = Math_fround(0.0); while (0);
$349 = Math_fround(__ZNK18SphereInterpolator11interpolateERK6Vector(HEAP32[($2 ? $0 + 92 | 0 : $0 + 96 | 0) >> 2] | 0, $15));
$350 = Math_fround(-$6);
$$0386 = Math_fround(($2 ? $350 : $6) + $349);
if (0 << 24 >> 24) {
HEAP32[$vararg_buffer42 >> 2] = $2 ? 82 : 76;
HEAPF64[$vararg_buffer42 + 8 >> 3] = +$6;
__Z7eprintfPKcz(23761, $vararg_buffer42);
}
if (0) {
HEAPF64[$vararg_buffer46 >> 3] = +$$0386;
__Z7eprintfPKcz(23792, $vararg_buffer46);
}
$357 = $$0406 < Math_fround(0.0);
$358 = Math_fround(-$$0406);
$360 = ($357 ? $358 : $$0406) > Math_fround(0.0);
$$1384 = $360 ? $$0406 : Math_fround(0.0);
if (0) {
HEAPF64[$vararg_buffer49 >> 3] = +$$0386;
HEAPF64[$vararg_buffer49 + 8 >> 3] = +$$1384;
HEAPF64[$vararg_buffer49 + 16 >> 3] = +$$0406;
HEAPF64[$vararg_buffer49 + 24 >> 3] = 0.0;
__Z7eprintfPKcz(23879, $vararg_buffer49);
}
$365 = $$0386 < Math_fround(0.0);
$366 = Math_fround(-$$0386);
$368 = $$1384 < Math_fround(0.0);
$369 = Math_fround(-$$1384);
$371 = ($365 ? $366 : $$0386) > ($368 ? $369 : $$1384);
$$2385 = $371 ? $$0386 : $$1384;
if (0) {
$373 = $2 ? 82 : 76;
HEAP32[$vararg_buffer55 >> 2] = $373;
HEAP32[$vararg_buffer55 + 4 >> 2] = $371 ? 23946 : $360 ? 23851 : 23826;
__Z7eprintfPKcz(23976, $vararg_buffer55);
HEAP32[$vararg_buffer59 >> 2] = $373;
HEAPF64[$vararg_buffer59 + 8 >> 3] = +$$0406;
HEAPF64[$vararg_buffer59 + 16 >> 3] = +$$0386;
HEAPF64[$vararg_buffer59 + 24 >> 3] = 0.0;
HEAPF64[$vararg_buffer59 + 32 >> 3] = -10.0;
HEAPF64[$vararg_buffer59 + 40 >> 3] = 0.0;
HEAPF64[$vararg_buffer59 + 48 >> 3] = +$$2385;
__Z7eprintfPKcz(23991, $vararg_buffer59);
__Z7eprintfPKcz(24062, $vararg_buffer68);
__ZNK6Vector5printEP8_IO_FILEi($15, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(24076, $vararg_buffer70);
__ZNK6Vector5printEP8_IO_FILEi($21, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(24090, $vararg_buffer72);
__ZNK6Vector5printEP8_IO_FILEi($297, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
if ($$2385 != Math_fround(0.0)) {
__ZN10QuaternionC2ERK6Vectorfb($8, $15, $$2385, 0);
if (0) {
__Z7eprintfPKcz(24103, $vararg_buffer74);
__ZN10Quaternion5printEP8_IO_FILEi($8, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(24121, $vararg_buffer76);
__ZN10Quaternion5printEP8_IO_FILEi($20, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
__ZN10Quaternion13setPreComposeERKS_($20, $8);
if (0) {
__Z7eprintfPKcz(24139, $vararg_buffer78);
__ZN10Quaternion5printEP8_IO_FILEi($20, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
}
if ($89) {
$386 = Math_fround(HEAPF32[$16 >> 2]);
$387 = Math_fround(HEAPF32[$72 >> 2]);
$389 = Math_fround(HEAPF32[$73 >> 2]);
HEAP32[$8 + 12 >> 2] = HEAP32[$74 >> 2];
$393 = Math_fround(-$386);
HEAPF32[$8 >> 2] = $393;
$394 = Math_fround(-$387);
HEAPF32[$8 + 4 >> 2] = $394;
$395 = Math_fround(-$389);
HEAPF32[$8 + 8 >> 2] = $395;
__ZN10Quaternion13setPreComposeERKS_($20, $8);
}
__ZN6VectorC2Ev($22);
$396 = HEAP32[$38 >> 2] | 0;
if ((HEAP32[$396 + 24 >> 2] | 0) == 5) {
__ZN6VectorC2EPKS_($8, (HEAP32[$396 + 36 >> 2] | 0) + 8 | 0);
HEAP32[$22 >> 2] = HEAP32[$8 >> 2];
HEAP32[$22 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
HEAP32[$22 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
} else {
__ZN6VectorC2EPKS_($8, (HEAP32[$396 + 36 >> 2] | 0) + 8 | 0);
HEAP32[$22 >> 2] = HEAP32[$8 >> 2];
HEAP32[$22 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
HEAP32[$22 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
}
__ZN10QuaternionC2ERK6Vectorfb($23, $22, $203, 1);
$406 = Math_fround(HEAPF32[$16 >> 2]);
$407 = Math_fround(HEAPF32[$72 >> 2]);
$409 = Math_fround(HEAPF32[$73 >> 2]);
$411 = Math_fround(HEAPF32[$74 >> 2]);
$413 = Math_fround(HEAPF32[$220 >> 2]);
$414 = Math_fround($413 * $407);
$415 = Math_fround(HEAPF32[$217 >> 2]);
$417 = Math_fround($414 - Math_fround($415 * $409));
$418 = Math_fround(HEAPF32[$223 >> 2]);
$420 = Math_fround($417 + Math_fround($418 * $406));
$421 = Math_fround(HEAPF32[$20 >> 2]);
$423 = Math_fround($420 + Math_fround($421 * $411));
$430 = Math_fround(Math_fround($415 * $411) + Math_fround(Math_fround($418 * $407) + Math_fround(Math_fround($421 * $409) - Math_fround($413 * $406))));
$437 = Math_fround(Math_fround($413 * $411) + Math_fround(Math_fround($418 * $409) + Math_fround(Math_fround($415 * $406) - Math_fround($421 * $407))));
$445 = Math_fround(Math_fround($418 * $411) + Math_fround(Math_fround(Math_fround(-Math_fround($421 * $406)) - Math_fround($415 * $407)) - Math_fround($413 * $409)));
$446 = $23 + 8 | 0;
$447 = Math_fround(HEAPF32[$446 >> 2]);
$448 = Math_fround($430 * $447);
$449 = $23 + 4 | 0;
$450 = Math_fround(HEAPF32[$449 >> 2]);
$452 = Math_fround($448 - Math_fround($437 * $450));
$453 = $23 + 12 | 0;
$454 = Math_fround(HEAPF32[$453 >> 2]);
$456 = Math_fround($452 + Math_fround($423 * $454));
$457 = Math_fround(HEAPF32[$23 >> 2]);
$481 = Math_fround(Math_fround($445 * $454) + Math_fround(Math_fround(Math_fround(-Math_fround($423 * $457)) - Math_fround($430 * $450)) - Math_fround($437 * $447)));
$482 = Math_fround(-Math_fround($456 + Math_fround($445 * $457)));
$483 = Math_fround(-Math_fround(Math_fround($445 * $450) + Math_fround(Math_fround($430 * $454) + Math_fround(Math_fround($437 * $457) - Math_fround($447 * $423)))));
$484 = Math_fround(-Math_fround(Math_fround($445 * $447) + Math_fround(Math_fround($437 * $454) + Math_fround(Math_fround($450 * $423) - Math_fround($430 * $457)))));
$486 = Math_fround(HEAPF32[$4 + 8 >> 2]);
$487 = Math_fround($486 * $483);
$489 = Math_fround(HEAPF32[$4 + 4 >> 2]);
$491 = Math_fround($487 - Math_fround($489 * $484));
$493 = Math_fround(HEAPF32[$4 + 12 >> 2]);
$495 = Math_fround($491 + Math_fround($493 * $482));
$496 = Math_fround(HEAPF32[$4 >> 2]);
$498 = Math_fround($495 + Math_fround($481 * $496));
$505 = Math_fround(Math_fround($489 * $481) + Math_fround(Math_fround($493 * $483) + Math_fround(Math_fround($496 * $484) - Math_fround($486 * $482))));
$512 = Math_fround(Math_fround($486 * $481) + Math_fround(Math_fround($493 * $484) + Math_fround(Math_fround($489 * $482) - Math_fround($496 * $483))));
$520 = Math_fround(Math_fround($493 * $481) + Math_fround(Math_fround(Math_fround(-Math_fround($496 * $482)) - Math_fround($489 * $483)) - Math_fround($486 * $484)));
$522 = Math_fround(HEAPF32[$5 + 8 >> 2]);
$523 = Math_fround($505 * $522);
$525 = Math_fround(HEAPF32[$5 + 4 >> 2]);
$527 = Math_fround($523 - Math_fround($512 * $525));
$529 = Math_fround(HEAPF32[$5 + 12 >> 2]);
$531 = Math_fround($527 + Math_fround($498 * $529));
$532 = Math_fround(HEAPF32[$5 >> 2]);
$534 = Math_fround($531 + Math_fround($520 * $532));
$541 = Math_fround(Math_fround($520 * $525) + Math_fround(Math_fround($505 * $529) + Math_fround(Math_fround($512 * $532) - Math_fround($522 * $498))));
$548 = Math_fround(Math_fround($520 * $522) + Math_fround(Math_fround($512 * $529) + Math_fround(Math_fround($525 * $498) - Math_fround($505 * $532))));
$556 = Math_fround(Math_fround($520 * $529) + Math_fround(Math_fround(Math_fround(-Math_fround($498 * $532)) - Math_fround($505 * $525)) - Math_fround($512 * $522)));
HEAPF32[$24 >> 2] = $534;
HEAPF32[$24 + 4 >> 2] = $541;
HEAPF32[$24 + 8 >> 2] = $548;
HEAPF32[$24 + 12 >> 2] = $556;
$557 = HEAP32[$1 >> 2] | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$557 >> 2] | 0) + 16 >> 2] & 255]($557, $16);
$561 = HEAP32[$1 >> 2] | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$561 >> 2] | 0) + 20 >> 2] & 255]($561, $14);
$565 = $1 + 4 | 0;
$566 = HEAP32[$565 >> 2] | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$566 >> 2] | 0) + 16 >> 2] & 255]($566, $20);
$570 = HEAP32[$565 >> 2] | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$570 >> 2] | 0) + 28 >> 2] & 255]($570, $14);
$574 = $1 + 8 | 0;
$575 = HEAP32[$574 >> 2] | 0;
if ((HEAP32[(HEAP32[$575 + 4 >> 2] | 0) + 24 >> 2] | 0) == 5) HEAPF32[$575 + 20 >> 2] = $203; else {
HEAPF32[$25 >> 2] = Math_fround(0.0);
$584 = Math_fround(HEAPF32[(HEAP32[$75 >> 2] | 0) + 44 >> 2]);
if ($584 == Math_fround(0.0)) {
$$pre$phi423Z2D = $574;
$627 = $575;
$630 = 0;
} else {
HEAPF32[$8 >> 2] = Math_fround(0.0);
$586 = $8 + 4 | 0;
HEAPF32[$586 >> 2] = Math_fround(0.0);
$587 = $8 + 8 | 0;
HEAPF32[$587 >> 2] = Math_fround(0.0);
$588 = $8 + 12 | 0;
HEAPF32[$588 >> 2] = Math_fround(1.0);
__ZN10Quaternion15decomposeQuatMYERS_Rff($24, $8, $25, $584);
$589 = Math_fround(HEAPF32[$449 >> 2]);
$590 = Math_fround(HEAPF32[$587 >> 2]);
$591 = Math_fround($589 * $590);
$592 = Math_fround(HEAPF32[$446 >> 2]);
$593 = Math_fround(HEAPF32[$586 >> 2]);
$595 = Math_fround($591 - Math_fround($592 * $593));
$596 = Math_fround(HEAPF32[$23 >> 2]);
$597 = Math_fround(HEAPF32[$588 >> 2]);
$599 = Math_fround($595 + Math_fround($596 * $597));
$600 = Math_fround(HEAPF32[$453 >> 2]);
$601 = Math_fround(HEAPF32[$8 >> 2]);
$603 = Math_fround($599 + Math_fround($600 * $601));
$610 = Math_fround(Math_fround($593 * $600) + Math_fround(Math_fround($589 * $597) + Math_fround(Math_fround($592 * $601) - Math_fround($590 * $596))));
$617 = Math_fround(Math_fround($590 * $600) + Math_fround(Math_fround($592 * $597) + Math_fround(Math_fround($593 * $596) - Math_fround($589 * $601))));
$625 = Math_fround(Math_fround($597 * $600) + Math_fround(Math_fround(Math_fround(-Math_fround($596 * $601)) - Math_fround($589 * $593)) - Math_fround($590 * $592)));
HEAPF32[$23 >> 2] = $603;
HEAPF32[$449 >> 2] = $610;
HEAPF32[$446 >> 2] = $617;
HEAPF32[$453 >> 2] = $625;
$$pre$phi423Z2D = $574;
$627 = HEAP32[$574 >> 2] | 0;
$630 = HEAP32[$25 >> 2] | 0;
}
HEAPF32[$627 + 32 >> 2] = $203;
HEAP32[(HEAP32[$$pre$phi423Z2D >> 2] | 0) + 36 >> 2] = $630;
}
$632 = HEAP32[$1 + 12 >> 2] | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$632 >> 2] | 0) + 16 >> 2] & 255]($632, $24);
if (!0) {
STACKTOP = sp;
return;
}
__ZN6VectorC2Efff($8, Math_fround(0.0), Math_fround(-1.0), Math_fround(0.0));
__ZNK10Quaternion12rotateVectorER6Vector($20, $8);
__ZN6VectorC2EPKS_($25, $297);
$637 = Math_fround(__ZNK6Vector9angleWithERKS_($8, $25));
__Z7eprintfPKcz(24157, $vararg_buffer80);
__ZNK6Vector5printEP8_IO_FILEi($8, HEAP32[16082] | 0, 3);
HEAPF64[$vararg_buffer82 >> 3] = +$637;
HEAPF64[$vararg_buffer82 + 8 >> 3] = +$301;
__Z7eprintfPKcz(24175, $vararg_buffer82);
STACKTOP = sp;
return;
}
function __ZNK11HanimAvatar16createArmSegmentEPKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$012$i$i$i = 0, $$012$i$i$i$i = 0, $$012$i$i$i$i$1 = 0, $$012$i$i$i$i$2 = 0, $$012$i$i$i$i$3 = 0, $$012$i$i$i$i109 = 0, $$012$i$i$i$i109$1 = 0, $$012$i$i$i$i109$2 = 0, $$012$i$i$i$i109$3 = 0, $$012$i$i$i$i120 = 0, $$012$i$i$i$i120$1 = 0, $$012$i$i$i$i120$2 = 0, $$012$i$i$i$i120$3 = 0, $$012$i$i$i131 = 0, $$01215$i$i$i = 0, $$01215$i$i$i$i = 0, $$01215$i$i$i$i$1 = 0, $$01215$i$i$i$i$2 = 0, $$01215$i$i$i$i$3 = 0, $$01215$i$i$i$i106 = 0, $$01215$i$i$i$i106$1 = 0, $$01215$i$i$i$i106$2 = 0, $$01215$i$i$i$i106$3 = 0, $$01215$i$i$i$i117 = 0, $$01215$i$i$i$i117$1 = 0, $$01215$i$i$i$i117$2 = 0, $$01215$i$i$i$i117$3 = 0, $$01215$i$i$i128 = 0, $$01216$i$i$i = 0, $$01216$i$i$i$i = 0, $$01216$i$i$i$i$1 = 0, $$01216$i$i$i$i$2 = 0, $$01216$i$i$i$i$3 = 0, $$01216$i$i$i$i107 = 0, $$01216$i$i$i$i107$1 = 0, $$01216$i$i$i$i107$2 = 0, $$01216$i$i$i$i107$3 = 0, $$01216$i$i$i$i118 = 0, $$01216$i$i$i$i118$1 = 0, $$01216$i$i$i$i118$2 = 0, $$01216$i$i$i$i118$3 = 0, $$01216$i$i$i129 = 0, $$pre$i$i = 0, $$sink$i$i$i = 0, $$sink$i$i$i$i = 0, $$sink$i$i$i$i$1 = 0, $$sink$i$i$i$i$2 = 0, $$sink$i$i$i$i$3 = 0, $$sink$i$i$i$i113 = 0, $$sink$i$i$i$i113$1 = 0, $$sink$i$i$i$i113$2 = 0, $$sink$i$i$i$i113$3 = 0, $$sink$i$i$i$i124 = 0, $$sink$i$i$i$i124$1 = 0, $$sink$i$i$i$i124$2 = 0, $$sink$i$i$i$i124$3 = 0, $$sink$i$i$i135 = 0, $109 = 0, $112 = 0, $119 = 0, $121 = 0, $122 = 0, $123 = 0, $127 = 0, $129 = 0, $130 = 0, $141 = 0, $144 = 0, $15 = 0, $151 = 0, $154 = 0, $155 = 0, $162 = 0, $165 = 0, $17 = 0, $172 = 0, $175 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $188 = 0, $191 = 0, $192 = 0, $2 = 0, $203 = 0, $206 = 0, $21 = 0, $213 = 0, $215 = 0, $217 = 0, $219 = 0, $22 = 0, $220 = 0, $231 = 0, $234 = 0, $24 = 0, $241 = 0, $243 = 0, $245 = 0, $247 = 0, $248 = 0, $25 = 0, $259 = 0, $26 = 0, $262 = 0, $269 = 0, $271 = 0, $276 = 0, $279 = 0, $280 = 0, $29 = 0, $291 = 0, $294 = 0, $3 = 0, $30 = 0, $301 = 0, $303 = 0, $306 = 0, $307 = 0, $318 = 0, $321 = 0, $328 = 0, $330 = 0, $333 = 0, $334 = 0, $345 = 0, $348 = 0, $363 = 0, $366 = 0, $373 = 0, $375 = 0, $378 = 0, $379 = 0, $390 = 0, $393 = 0, $400 = 0, $402 = 0, $405 = 0, $406 = 0, $41 = 0, $417 = 0, $420 = 0, $427 = 0, $429 = 0, $44 = 0, $51 = 0, $53 = 0, $54 = 0, $56 = 0, $58 = 0, $59 = 0, $64 = 0, $65 = 0, $72 = 0, $75 = 0, $82 = 0, $87 = 0, $89 = 0, $95 = 0, $97 = 0, $98 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 192 | 0;
$vararg_buffer7 = sp + 24 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$2 = sp + 32 | 0;
$3 = sp + 176 | 0;
__ZN6VectorC2Ev($2);
__ZN6VectorC2Ev($2 + 12 | 0);
__ZN6VectorC2Ev($2 + 24 | 0);
__ZN6VectorC2Ev($2 + 36 | 0);
__ZN6VectorC2Ev($2 + 48 | 0);
__ZN6VectorC2Ev($2 + 60 | 0);
__ZN6VectorC2Ev($2 + 72 | 0);
__ZN6VectorC2Ev($2 + 84 | 0);
__ZN6VectorC2Ev($2 + 96 | 0);
__ZN6VectorC2Ev($2 + 108 | 0);
__ZN6VectorC2Ev($2 + 120 | 0);
__ZN6VectorC2Ev($2 + 132 | 0);
$15 = HEAP8[$1 >> 0] | 0;
$17 = $1 + 4 | 0;
HEAP8[$3 >> 0] = 65;
HEAP8[$3 + 1 >> 0] = 45;
HEAP8[$3 + 2 >> 0] = $15;
$21 = $3 + 3 | 0;
HEAP8[$21 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
$22 = $3 + 4 | 0;
HEAP8[$3 + 5 >> 0] = 0;
$24 = $0 + 148 | 0;
$25 = $0 + 144 | 0;
$$pre$i$i = $0 + 164 | 0;
$26 = $0 + 108 | 0;
HEAP8[$22 >> 0] = HEAP8[$17 >> 0] | 0;
$29 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($3, HEAP32[$24 >> 2] | 0) | 0;
$30 = HEAP32[$25 >> 2] | 0;
L1 : do if ((HEAP16[$30 + ($29 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i$i = HEAP32[$30 + ($29 << 3) >> 2] | 0;
if (!$$01215$i$i$i$i) $$sink$i$i$i$i = $$pre$i$i; else {
$$01216$i$i$i$i = $$01215$i$i$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($3, HEAP32[$$01216$i$i$i$i >> 2] | 0) | 0) break;
$$012$i$i$i$i = HEAP32[$$01216$i$i$i$i + 8 >> 2] | 0;
if (!$$012$i$i$i$i) {
$$sink$i$i$i$i = $$pre$i$i;
break L1;
} else $$01216$i$i$i$i = $$012$i$i$i$i;
}
$$sink$i$i$i$i = $$01216$i$i$i$i + 4 | 0;
}
} else $$sink$i$i$i$i = $$pre$i$i; while (0);
$41 = HEAP32[$$sink$i$i$i$i >> 2] | 0;
do if (($41 | 0) != (HEAP32[$$pre$i$i >> 2] | 0)) {
$44 = HEAP32[$26 >> 2] | 0;
if (($41 | 0) >= 0) if ((HEAP32[$44 + 12 >> 2] | 0) > ($41 | 0)) {
$51 = HEAP32[(HEAP32[$44 >> 2] | 0) + ($41 << 2) >> 2] | 0;
if ($51 | 0) {
$53 = $51 + 28 | 0;
HEAP32[$2 >> 2] = HEAP32[$53 >> 2];
HEAP32[$2 + 4 >> 2] = HEAP32[$53 + 4 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$53 + 8 >> 2];
$54 = $1 + 5 | 0;
HEAP8[$22 >> 0] = HEAP8[$54 >> 0] | 0;
$56 = $2 + 12 | 0;
$58 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($3, HEAP32[$24 >> 2] | 0) | 0;
$59 = HEAP32[$25 >> 2] | 0;
L13 : do if ((HEAP16[$59 + ($58 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i$i$1 = HEAP32[$59 + ($58 << 3) >> 2] | 0;
if (!$$01215$i$i$i$i$1) $$sink$i$i$i$i$1 = $$pre$i$i; else {
$$01216$i$i$i$i$1 = $$01215$i$i$i$i$1;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($3, HEAP32[$$01216$i$i$i$i$1 >> 2] | 0) | 0) break;
$$012$i$i$i$i$1 = HEAP32[$$01216$i$i$i$i$1 + 8 >> 2] | 0;
if (!$$012$i$i$i$i$1) {
$$sink$i$i$i$i$1 = $$pre$i$i;
break L13;
} else $$01216$i$i$i$i$1 = $$012$i$i$i$i$1;
}
$$sink$i$i$i$i$1 = $$01216$i$i$i$i$1 + 4 | 0;
}
} else $$sink$i$i$i$i$1 = $$pre$i$i; while (0);
$363 = HEAP32[$$sink$i$i$i$i$1 >> 2] | 0;
if (($363 | 0) != (HEAP32[$$pre$i$i >> 2] | 0)) {
$366 = HEAP32[$26 >> 2] | 0;
if (($363 | 0) >= 0) if ((HEAP32[$366 + 12 >> 2] | 0) > ($363 | 0)) {
$373 = HEAP32[(HEAP32[$366 >> 2] | 0) + ($363 << 2) >> 2] | 0;
if ($373 | 0) {
$375 = $373 + 28 | 0;
HEAP32[$56 >> 2] = HEAP32[$375 >> 2];
HEAP32[$56 + 4 >> 2] = HEAP32[$375 + 4 >> 2];
HEAP32[$56 + 8 >> 2] = HEAP32[$375 + 8 >> 2];
$217 = $1 + 6 | 0;
HEAP8[$22 >> 0] = HEAP8[$217 >> 0] | 0;
$182 = $2 + 24 | 0;
$378 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($3, HEAP32[$24 >> 2] | 0) | 0;
$379 = HEAP32[$25 >> 2] | 0;
L24 : do if ((HEAP16[$379 + ($378 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i$i$2 = HEAP32[$379 + ($378 << 3) >> 2] | 0;
if (!$$01215$i$i$i$i$2) $$sink$i$i$i$i$2 = $$pre$i$i; else {
$$01216$i$i$i$i$2 = $$01215$i$i$i$i$2;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($3, HEAP32[$$01216$i$i$i$i$2 >> 2] | 0) | 0) break;
$$012$i$i$i$i$2 = HEAP32[$$01216$i$i$i$i$2 + 8 >> 2] | 0;
if (!$$012$i$i$i$i$2) {
$$sink$i$i$i$i$2 = $$pre$i$i;
break L24;
} else $$01216$i$i$i$i$2 = $$012$i$i$i$i$2;
}
$$sink$i$i$i$i$2 = $$01216$i$i$i$i$2 + 4 | 0;
}
} else $$sink$i$i$i$i$2 = $$pre$i$i; while (0);
$390 = HEAP32[$$sink$i$i$i$i$2 >> 2] | 0;
if (($390 | 0) != (HEAP32[$$pre$i$i >> 2] | 0)) {
$393 = HEAP32[$26 >> 2] | 0;
if (($390 | 0) >= 0) if ((HEAP32[$393 + 12 >> 2] | 0) > ($390 | 0)) {
$400 = HEAP32[(HEAP32[$393 >> 2] | 0) + ($390 << 2) >> 2] | 0;
if ($400 | 0) {
$402 = $400 + 28 | 0;
HEAP32[$182 >> 2] = HEAP32[$402 >> 2];
HEAP32[$182 + 4 >> 2] = HEAP32[$402 + 4 >> 2];
HEAP32[$182 + 8 >> 2] = HEAP32[$402 + 8 >> 2];
$245 = $1 + 7 | 0;
HEAP8[$22 >> 0] = HEAP8[$245 >> 0] | 0;
$183 = $2 + 36 | 0;
$405 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($3, HEAP32[$24 >> 2] | 0) | 0;
$406 = HEAP32[$25 >> 2] | 0;
L35 : do if ((HEAP16[$406 + ($405 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i$i$3 = HEAP32[$406 + ($405 << 3) >> 2] | 0;
if (!$$01215$i$i$i$i$3) $$sink$i$i$i$i$3 = $$pre$i$i; else {
$$01216$i$i$i$i$3 = $$01215$i$i$i$i$3;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($3, HEAP32[$$01216$i$i$i$i$3 >> 2] | 0) | 0) break;
$$012$i$i$i$i$3 = HEAP32[$$01216$i$i$i$i$3 + 8 >> 2] | 0;
if (!$$012$i$i$i$i$3) {
$$sink$i$i$i$i$3 = $$pre$i$i;
break L35;
} else $$01216$i$i$i$i$3 = $$012$i$i$i$i$3;
}
$$sink$i$i$i$i$3 = $$01216$i$i$i$i$3 + 4 | 0;
}
} else $$sink$i$i$i$i$3 = $$pre$i$i; while (0);
$417 = HEAP32[$$sink$i$i$i$i$3 >> 2] | 0;
if (($417 | 0) != (HEAP32[$$pre$i$i >> 2] | 0)) {
$420 = HEAP32[$26 >> 2] | 0;
if (($417 | 0) >= 0) if ((HEAP32[$420 + 12 >> 2] | 0) > ($417 | 0)) {
$427 = HEAP32[(HEAP32[$420 >> 2] | 0) + ($417 << 2) >> 2] | 0;
if (!$427) break;
$429 = $427 + 28 | 0;
HEAP32[$183 >> 2] = HEAP32[$429 >> 2];
HEAP32[$183 + 4 >> 2] = HEAP32[$429 + 4 >> 2];
HEAP32[$183 + 8 >> 2] = HEAP32[$429 + 8 >> 2];
$65 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($3, HEAP32[$24 >> 2] | 0) | 0;
$64 = HEAP32[$25 >> 2] | 0;
L46 : do if ((HEAP16[$64 + ($65 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i = HEAP32[$64 + ($65 << 3) >> 2] | 0;
if (!$$01215$i$i$i) {
$$sink$i$i$i = $$pre$i$i;
break;
} else $$01216$i$i$i = $$01215$i$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($3, HEAP32[$$01216$i$i$i >> 2] | 0) | 0) break;
$$012$i$i$i = HEAP32[$$01216$i$i$i + 8 >> 2] | 0;
if (!$$012$i$i$i) {
$$sink$i$i$i = $$pre$i$i;
break L46;
} else $$01216$i$i$i = $$012$i$i$i;
}
$$sink$i$i$i = $$01216$i$i$i + 4 | 0;
} else $$sink$i$i$i = $$pre$i$i; while (0);
$72 = HEAP32[$$sink$i$i$i >> 2] | 0;
do if (($72 | 0) == (HEAP32[$$pre$i$i >> 2] | 0)) $87 = 0; else {
$75 = HEAP32[$26 >> 2] | 0;
if (($72 | 0) < 0) {
$87 = 0;
break;
}
if ((HEAP32[$75 + 12 >> 2] | 0) <= ($72 | 0)) {
$87 = 0;
break;
}
$82 = HEAP32[(HEAP32[$75 >> 2] | 0) + ($72 << 2) >> 2] | 0;
if (!$82) {
$87 = 0;
break;
}
$87 = HEAP32[$82 + 16 >> 2] | 0;
} while (0);
$89 = HEAP32[$87 + 20 >> 2] | 0;
HEAP8[$21 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$22 >> 0] = HEAP8[$17 >> 0] | 0;
do if (($87 | 0) != 0 & ($89 | 0) != 0) {
$95 = $2 + 48 | 0;
$97 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($3, HEAP32[$24 >> 2] | 0) | 0;
$98 = HEAP32[$25 >> 2] | 0;
L61 : do if ((HEAP16[$98 + ($97 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i$i106 = HEAP32[$98 + ($97 << 3) >> 2] | 0;
if (!$$01215$i$i$i$i106) {
$$sink$i$i$i$i113 = $$pre$i$i;
break;
} else $$01216$i$i$i$i107 = $$01215$i$i$i$i106;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($3, HEAP32[$$01216$i$i$i$i107 >> 2] | 0) | 0) break;
$$012$i$i$i$i109 = HEAP32[$$01216$i$i$i$i107 + 8 >> 2] | 0;
if (!$$012$i$i$i$i109) {
$$sink$i$i$i$i113 = $$pre$i$i;
break L61;
} else $$01216$i$i$i$i107 = $$012$i$i$i$i109;
}
$$sink$i$i$i$i113 = $$01216$i$i$i$i107 + 4 | 0;
} else $$sink$i$i$i$i113 = $$pre$i$i; while (0);
$109 = HEAP32[$$sink$i$i$i$i113 >> 2] | 0;
if (($109 | 0) == (HEAP32[$$pre$i$i >> 2] | 0)) break;
$112 = HEAP32[$26 >> 2] | 0;
if (($109 | 0) < 0) break;
if ((HEAP32[$112 + 12 >> 2] | 0) <= ($109 | 0)) break;
$119 = HEAP32[(HEAP32[$112 >> 2] | 0) + ($109 << 2) >> 2] | 0;
if (!$119) break;
$276 = $119 + 28 | 0;
HEAP32[$95 >> 2] = HEAP32[$276 >> 2];
HEAP32[$95 + 4 >> 2] = HEAP32[$276 + 4 >> 2];
HEAP32[$95 + 8 >> 2] = HEAP32[$276 + 8 >> 2];
HEAP8[$22 >> 0] = HEAP8[$54 >> 0] | 0;
$184 = $2 + 60 | 0;
$279 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($3, HEAP32[$24 >> 2] | 0) | 0;
$280 = HEAP32[$25 >> 2] | 0;
L72 : do if ((HEAP16[$280 + ($279 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i$i106$1 = HEAP32[$280 + ($279 << 3) >> 2] | 0;
if (!$$01215$i$i$i$i106$1) {
$$sink$i$i$i$i113$1 = $$pre$i$i;
break;
} else $$01216$i$i$i$i107$1 = $$01215$i$i$i$i106$1;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($3, HEAP32[$$01216$i$i$i$i107$1 >> 2] | 0) | 0) break;
$$012$i$i$i$i109$1 = HEAP32[$$01216$i$i$i$i107$1 + 8 >> 2] | 0;
if (!$$012$i$i$i$i109$1) {
$$sink$i$i$i$i113$1 = $$pre$i$i;
break L72;
} else $$01216$i$i$i$i107$1 = $$012$i$i$i$i109$1;
}
$$sink$i$i$i$i113$1 = $$01216$i$i$i$i107$1 + 4 | 0;
} else $$sink$i$i$i$i113$1 = $$pre$i$i; while (0);
$291 = HEAP32[$$sink$i$i$i$i113$1 >> 2] | 0;
if (($291 | 0) == (HEAP32[$$pre$i$i >> 2] | 0)) break;
$294 = HEAP32[$26 >> 2] | 0;
if (($291 | 0) < 0) break;
if ((HEAP32[$294 + 12 >> 2] | 0) <= ($291 | 0)) break;
$301 = HEAP32[(HEAP32[$294 >> 2] | 0) + ($291 << 2) >> 2] | 0;
if (!$301) break;
$303 = $301 + 28 | 0;
HEAP32[$184 >> 2] = HEAP32[$303 >> 2];
HEAP32[$184 + 4 >> 2] = HEAP32[$303 + 4 >> 2];
HEAP32[$184 + 8 >> 2] = HEAP32[$303 + 8 >> 2];
HEAP8[$22 >> 0] = HEAP8[$217 >> 0] | 0;
$185 = $2 + 72 | 0;
$306 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($3, HEAP32[$24 >> 2] | 0) | 0;
$307 = HEAP32[$25 >> 2] | 0;
L83 : do if ((HEAP16[$307 + ($306 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i$i106$2 = HEAP32[$307 + ($306 << 3) >> 2] | 0;
if (!$$01215$i$i$i$i106$2) {
$$sink$i$i$i$i113$2 = $$pre$i$i;
break;
} else $$01216$i$i$i$i107$2 = $$01215$i$i$i$i106$2;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($3, HEAP32[$$01216$i$i$i$i107$2 >> 2] | 0) | 0) break;
$$012$i$i$i$i109$2 = HEAP32[$$01216$i$i$i$i107$2 + 8 >> 2] | 0;
if (!$$012$i$i$i$i109$2) {
$$sink$i$i$i$i113$2 = $$pre$i$i;
break L83;
} else $$01216$i$i$i$i107$2 = $$012$i$i$i$i109$2;
}
$$sink$i$i$i$i113$2 = $$01216$i$i$i$i107$2 + 4 | 0;
} else $$sink$i$i$i$i113$2 = $$pre$i$i; while (0);
$318 = HEAP32[$$sink$i$i$i$i113$2 >> 2] | 0;
if (($318 | 0) == (HEAP32[$$pre$i$i >> 2] | 0)) break;
$321 = HEAP32[$26 >> 2] | 0;
if (($318 | 0) < 0) break;
if ((HEAP32[$321 + 12 >> 2] | 0) <= ($318 | 0)) break;
$328 = HEAP32[(HEAP32[$321 >> 2] | 0) + ($318 << 2) >> 2] | 0;
if (!$328) break;
$330 = $328 + 28 | 0;
HEAP32[$185 >> 2] = HEAP32[$330 >> 2];
HEAP32[$185 + 4 >> 2] = HEAP32[$330 + 4 >> 2];
HEAP32[$185 + 8 >> 2] = HEAP32[$330 + 8 >> 2];
HEAP8[$22 >> 0] = HEAP8[$245 >> 0] | 0;
$123 = $2 + 84 | 0;
$333 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($3, HEAP32[$24 >> 2] | 0) | 0;
$334 = HEAP32[$25 >> 2] | 0;
L94 : do if ((HEAP16[$334 + ($333 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i$i106$3 = HEAP32[$334 + ($333 << 3) >> 2] | 0;
if (!$$01215$i$i$i$i106$3) {
$$sink$i$i$i$i113$3 = $$pre$i$i;
break;
} else $$01216$i$i$i$i107$3 = $$01215$i$i$i$i106$3;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($3, HEAP32[$$01216$i$i$i$i107$3 >> 2] | 0) | 0) break;
$$012$i$i$i$i109$3 = HEAP32[$$01216$i$i$i$i107$3 + 8 >> 2] | 0;
if (!$$012$i$i$i$i109$3) {
$$sink$i$i$i$i113$3 = $$pre$i$i;
break L94;
} else $$01216$i$i$i$i107$3 = $$012$i$i$i$i109$3;
}
$$sink$i$i$i$i113$3 = $$01216$i$i$i$i107$3 + 4 | 0;
} else $$sink$i$i$i$i113$3 = $$pre$i$i; while (0);
$345 = HEAP32[$$sink$i$i$i$i113$3 >> 2] | 0;
if (($345 | 0) == (HEAP32[$$pre$i$i >> 2] | 0)) break;
$348 = HEAP32[$26 >> 2] | 0;
if (($345 | 0) < 0) break;
if ((HEAP32[$348 + 12 >> 2] | 0) <= ($345 | 0)) break;
$122 = HEAP32[(HEAP32[$348 >> 2] | 0) + ($345 << 2) >> 2] | 0;
if (!$122) break;
$121 = $122 + 28 | 0;
HEAP32[$123 >> 2] = HEAP32[$121 >> 2];
HEAP32[$123 + 4 >> 2] = HEAP32[$121 + 4 >> 2];
HEAP32[$123 + 8 >> 2] = HEAP32[$121 + 8 >> 2];
HEAP8[$21 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
HEAP8[$22 >> 0] = HEAP8[$17 >> 0] | 0;
$127 = $2 + 96 | 0;
$129 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($3, HEAP32[$24 >> 2] | 0) | 0;
$130 = HEAP32[$25 >> 2] | 0;
L105 : do if ((HEAP16[$130 + ($129 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i$i117 = HEAP32[$130 + ($129 << 3) >> 2] | 0;
if (!$$01215$i$i$i$i117) {
$$sink$i$i$i$i124 = $$pre$i$i;
break;
} else $$01216$i$i$i$i118 = $$01215$i$i$i$i117;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($3, HEAP32[$$01216$i$i$i$i118 >> 2] | 0) | 0) break;
$$012$i$i$i$i120 = HEAP32[$$01216$i$i$i$i118 + 8 >> 2] | 0;
if (!$$012$i$i$i$i120) {
$$sink$i$i$i$i124 = $$pre$i$i;
break L105;
} else $$01216$i$i$i$i118 = $$012$i$i$i$i120;
}
$$sink$i$i$i$i124 = $$01216$i$i$i$i118 + 4 | 0;
} else $$sink$i$i$i$i124 = $$pre$i$i; while (0);
$141 = HEAP32[$$sink$i$i$i$i124 >> 2] | 0;
do if (($141 | 0) != (HEAP32[$$pre$i$i >> 2] | 0)) {
$144 = HEAP32[$26 >> 2] | 0;
if (($141 | 0) < 0) break;
if ((HEAP32[$144 + 12 >> 2] | 0) <= ($141 | 0)) break;
$151 = HEAP32[(HEAP32[$144 >> 2] | 0) + ($141 << 2) >> 2] | 0;
if (!$151) break;
$188 = $151 + 28 | 0;
HEAP32[$127 >> 2] = HEAP32[$188 >> 2];
HEAP32[$127 + 4 >> 2] = HEAP32[$188 + 4 >> 2];
HEAP32[$127 + 8 >> 2] = HEAP32[$188 + 8 >> 2];
HEAP8[$22 >> 0] = HEAP8[$54 >> 0] | 0;
$178 = $2 + 108 | 0;
$191 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($3, HEAP32[$24 >> 2] | 0) | 0;
$192 = HEAP32[$25 >> 2] | 0;
L117 : do if ((HEAP16[$192 + ($191 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i$i117$1 = HEAP32[$192 + ($191 << 3) >> 2] | 0;
if (!$$01215$i$i$i$i117$1) {
$$sink$i$i$i$i124$1 = $$pre$i$i;
break;
} else $$01216$i$i$i$i118$1 = $$01215$i$i$i$i117$1;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($3, HEAP32[$$01216$i$i$i$i118$1 >> 2] | 0) | 0) break;
$$012$i$i$i$i120$1 = HEAP32[$$01216$i$i$i$i118$1 + 8 >> 2] | 0;
if (!$$012$i$i$i$i120$1) {
$$sink$i$i$i$i124$1 = $$pre$i$i;
break L117;
} else $$01216$i$i$i$i118$1 = $$012$i$i$i$i120$1;
}
$$sink$i$i$i$i124$1 = $$01216$i$i$i$i118$1 + 4 | 0;
} else $$sink$i$i$i$i124$1 = $$pre$i$i; while (0);
$203 = HEAP32[$$sink$i$i$i$i124$1 >> 2] | 0;
if (($203 | 0) == (HEAP32[$$pre$i$i >> 2] | 0)) break;
$206 = HEAP32[$26 >> 2] | 0;
if (($203 | 0) < 0) break;
if ((HEAP32[$206 + 12 >> 2] | 0) <= ($203 | 0)) break;
$213 = HEAP32[(HEAP32[$206 >> 2] | 0) + ($203 << 2) >> 2] | 0;
if (!$213) break;
$215 = $213 + 28 | 0;
HEAP32[$178 >> 2] = HEAP32[$215 >> 2];
HEAP32[$178 + 4 >> 2] = HEAP32[$215 + 4 >> 2];
HEAP32[$178 + 8 >> 2] = HEAP32[$215 + 8 >> 2];
HEAP8[$22 >> 0] = HEAP8[$217 >> 0] | 0;
$179 = $2 + 120 | 0;
$219 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($3, HEAP32[$24 >> 2] | 0) | 0;
$220 = HEAP32[$25 >> 2] | 0;
L128 : do if ((HEAP16[$220 + ($219 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i$i117$2 = HEAP32[$220 + ($219 << 3) >> 2] | 0;
if (!$$01215$i$i$i$i117$2) {
$$sink$i$i$i$i124$2 = $$pre$i$i;
break;
} else $$01216$i$i$i$i118$2 = $$01215$i$i$i$i117$2;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($3, HEAP32[$$01216$i$i$i$i118$2 >> 2] | 0) | 0) break;
$$012$i$i$i$i120$2 = HEAP32[$$01216$i$i$i$i118$2 + 8 >> 2] | 0;
if (!$$012$i$i$i$i120$2) {
$$sink$i$i$i$i124$2 = $$pre$i$i;
break L128;
} else $$01216$i$i$i$i118$2 = $$012$i$i$i$i120$2;
}
$$sink$i$i$i$i124$2 = $$01216$i$i$i$i118$2 + 4 | 0;
} else $$sink$i$i$i$i124$2 = $$pre$i$i; while (0);
$231 = HEAP32[$$sink$i$i$i$i124$2 >> 2] | 0;
if (($231 | 0) == (HEAP32[$$pre$i$i >> 2] | 0)) break;
$234 = HEAP32[$26 >> 2] | 0;
if (($231 | 0) < 0) break;
if ((HEAP32[$234 + 12 >> 2] | 0) <= ($231 | 0)) break;
$241 = HEAP32[(HEAP32[$234 >> 2] | 0) + ($231 << 2) >> 2] | 0;
if (!$241) break;
$243 = $241 + 28 | 0;
HEAP32[$179 >> 2] = HEAP32[$243 >> 2];
HEAP32[$179 + 4 >> 2] = HEAP32[$243 + 4 >> 2];
HEAP32[$179 + 8 >> 2] = HEAP32[$243 + 8 >> 2];
HEAP8[$22 >> 0] = HEAP8[$245 >> 0] | 0;
$180 = $2 + 132 | 0;
$247 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($3, HEAP32[$24 >> 2] | 0) | 0;
$248 = HEAP32[$25 >> 2] | 0;
L139 : do if ((HEAP16[$248 + ($247 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i$i117$3 = HEAP32[$248 + ($247 << 3) >> 2] | 0;
if (!$$01215$i$i$i$i117$3) {
$$sink$i$i$i$i124$3 = $$pre$i$i;
break;
} else $$01216$i$i$i$i118$3 = $$01215$i$i$i$i117$3;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($3, HEAP32[$$01216$i$i$i$i118$3 >> 2] | 0) | 0) break;
$$012$i$i$i$i120$3 = HEAP32[$$01216$i$i$i$i118$3 + 8 >> 2] | 0;
if (!$$012$i$i$i$i120$3) {
$$sink$i$i$i$i124$3 = $$pre$i$i;
break L139;
} else $$01216$i$i$i$i118$3 = $$012$i$i$i$i120$3;
}
$$sink$i$i$i$i124$3 = $$01216$i$i$i$i118$3 + 4 | 0;
} else $$sink$i$i$i$i124$3 = $$pre$i$i; while (0);
$259 = HEAP32[$$sink$i$i$i$i124$3 >> 2] | 0;
if (($259 | 0) == (HEAP32[$$pre$i$i >> 2] | 0)) break;
$262 = HEAP32[$26 >> 2] | 0;
if (($259 | 0) < 0) break;
if ((HEAP32[$262 + 12 >> 2] | 0) <= ($259 | 0)) break;
$269 = HEAP32[(HEAP32[$262 >> 2] | 0) + ($259 << 2) >> 2] | 0;
if (!$269) break;
$271 = $269 + 28 | 0;
HEAP32[$180 >> 2] = HEAP32[$271 >> 2];
HEAP32[$180 + 4 >> 2] = HEAP32[$271 + 4 >> 2];
HEAP32[$180 + 8 >> 2] = HEAP32[$271 + 8 >> 2];
$155 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($3, HEAP32[$24 >> 2] | 0) | 0;
$154 = HEAP32[$25 >> 2] | 0;
L150 : do if ((HEAP16[$154 + ($155 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i128 = HEAP32[$154 + ($155 << 3) >> 2] | 0;
if (!$$01215$i$i$i128) {
$$sink$i$i$i135 = $$pre$i$i;
break;
} else $$01216$i$i$i129 = $$01215$i$i$i128;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($3, HEAP32[$$01216$i$i$i129 >> 2] | 0) | 0) break;
$$012$i$i$i131 = HEAP32[$$01216$i$i$i129 + 8 >> 2] | 0;
if (!$$012$i$i$i131) {
$$sink$i$i$i135 = $$pre$i$i;
break L150;
} else $$01216$i$i$i129 = $$012$i$i$i131;
}
$$sink$i$i$i135 = $$01216$i$i$i129 + 4 | 0;
} else $$sink$i$i$i135 = $$pre$i$i; while (0);
$162 = HEAP32[$$sink$i$i$i135 >> 2] | 0;
do if (($162 | 0) != (HEAP32[$$pre$i$i >> 2] | 0)) {
$165 = HEAP32[$26 >> 2] | 0;
if (($162 | 0) < 0) break;
if ((HEAP32[$165 + 12 >> 2] | 0) <= ($162 | 0)) break;
$172 = HEAP32[(HEAP32[$165 >> 2] | 0) + ($162 << 2) >> 2] | 0;
if (!$172) break;
$175 = HEAP32[$172 + 16 >> 2] | 0;
if (!$175) break;
$177 = $175 + 40 | 0;
__ZNK9Transform15transformVectorER6Vector($177, $127);
__ZNK9Transform15transformVectorER6Vector($177, $178);
__ZNK9Transform15transformVectorER6Vector($177, $179);
__ZNK9Transform15transformVectorER6Vector($177, $180);
$181 = $87 + 68 | 0;
__ZNK9Transform15transformVectorER6Vector($181, $2);
__ZNK9Transform15transformVectorER6Vector($181, $56);
__ZNK9Transform15transformVectorER6Vector($181, $182);
__ZNK9Transform15transformVectorER6Vector($181, $183);
__ZNK9Transform15transformVectorER6Vector($181, $95);
__ZNK9Transform15transformVectorER6Vector($181, $184);
__ZNK9Transform15transformVectorER6Vector($181, $185);
__ZNK9Transform15transformVectorER6Vector($181, $123);
__ZNK9Transform15transformVectorER6Vector($181, $127);
__ZNK9Transform15transformVectorER6Vector($181, $178);
__ZNK9Transform15transformVectorER6Vector($181, $179);
__ZNK9Transform15transformVectorER6Vector($181, $180);
$186 = __ZN8IFS_spec17OctagonalCylinderEsPK6Vector(3, $2) | 0;
HEAP32[$89 + 16 >> 2] = $186;
STACKTOP = sp;
return;
} while (0);
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer7 >> 2] = $1;
__Z7eprintfPKcz(22508, $vararg_buffer7);
STACKTOP = sp;
return;
} while (0);
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer4 >> 2] = $3;
__Z7eprintfPKcz(22463, $vararg_buffer4);
STACKTOP = sp;
return;
} while (0);
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer1 >> 2] = $3;
__Z7eprintfPKcz(22463, $vararg_buffer1);
STACKTOP = sp;
return;
}
}
}
}
}
}
}
}
}
}
} while (0);
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer >> 2] = $3;
__Z7eprintfPKcz(22463, $vararg_buffer);
STACKTOP = sp;
return;
}
function __ZN20HanimAnimationRecord21generate1ARPAnimationEP7Gestureb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$02156$i = 0, $$07$i = 0, $$07828$i = 0, $$079$lcssa$i = 0, $$07927$i = 0, $$08030$i = 0, $$08030$us$i = 0, $$08135$i = 0, $$08135$us$i = 0, $$1$i = 0, $$1$off0 = 0, $$3$lcssa$i = 0, $$344$i = 0, $$4$i = 0, $$7$lcssa$i = 0, $$734$i = 0, $$929$i = 0, $$pre8$i = f0, $10 = f0, $103 = 0, $107 = 0, $109 = 0, $11 = 0, $110 = 0, $114 = 0, $115 = 0, $118 = 0, $120 = 0, $123 = 0, $124 = 0, $13 = f0, $130 = f0, $131 = f0, $132 = f0, $134 = 0, $135 = 0, $139 = f0, $14 = 0, $140 = f0, $141 = f0, $144 = 0, $152 = f0, $153 = f0, $154 = f0, $157 = 0, $16 = 0, $165 = f0, $166 = f0, $167 = f0, $170 = 0, $177 = f0, $178 = f0, $179 = f0, $186 = f0, $187 = f0, $188 = f0, $19 = f0, $191 = 0, $195 = 0, $20 = 0, $201 = f0, $202 = f0, $203 = f0, $206 = 0, $21 = f0, $210 = 0, $216 = f0, $217 = f0, $218 = f0, $221 = 0, $225 = 0, $23 = 0, $231 = f0, $232 = f0, $233 = f0, $236 = 0, $24 = 0, $240 = 0, $246 = f0, $247 = f0, $248 = f0, $25 = 0, $251 = 0, $255 = 0, $261 = f0, $262 = f0, $263 = f0, $266 = 0, $270 = 0, $276 = f0, $277 = f0, $278 = f0, $28 = 0, $281 = 0, $289 = f0, $29 = f0, $290 = f0, $291 = f0, $294 = 0, $3 = 0, $30 = 0, $302 = f0, $303 = f0, $304 = f0, $307 = 0, $314 = f0, $315 = f0, $316 = f0, $32 = 0, $321 = 0, $325 = 0, $33 = 0, $332 = 0, $334 = f0, $335 = f0, $336 = f0, $338 = 0, $339 = 0, $34 = 0, $343 = 0, $344 = 0, $347 = 0, $349 = 0, $35 = 0, $352 = 0, $353 = 0, $359 = f0, $36 = 0, $360 = f0, $361 = f0, $363 = 0, $364 = 0, $368 = 0, $369 = 0, $37 = 0, $372 = 0, $374 = 0, $377 = 0, $38 = 0, $380 = 0, $382 = f0, $383 = f0, $384 = f0, $386 = 0, $387 = 0, $39 = 0, $395 = 0, $396 = 0, $399 = 0, $4 = 0, $40 = 0, $401 = 0, $404 = 0, $408 = f0, $409 = f0, $41 = 0, $410 = f0, $412 = 0, $413 = 0, $418 = 0, $419 = f0, $42 = 0, $43 = 0, $433 = 0, $44 = 0, $440 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $74 = f0, $76 = f0, $77 = f0, $79 = f0, $8 = 0, $81 = f0, $87 = 0, $9 = 0, $92 = 0, $93 = 0, $94 = 0, $96 = 0, $98 = f0, $indvars$iv$i = 0, $indvars$iv74$i = 0, $indvars$iv77$i = 0, $sext$i = 0, $sext1$i = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$3 = sp + 16 | 0;
$4 = sp;
$6 = HEAP32[$1 + 44 >> 2] | 0;
$8 = HEAP32[$1 + 48 >> 2] | 0;
$9 = $0 + 56 | 0;
$10 = Math_fround(HEAPF32[$9 >> 2]);
$11 = $6 + 40 | 0;
$13 = Math_fround($10 + Math_fround(HEAPF32[$11 >> 2]));
$14 = $0 + 100 | 0;
__ZN14TwoArmAnimator11setMovementEP13BasicMovement(HEAP32[$14 >> 2] | 0, $6);
$16 = $0 + 104 | 0;
HEAP32[(HEAP32[$16 >> 2] | 0) + 8 >> 2] = $8;
$19 = Math_fround(HEAPF32[$9 >> 2]);
$20 = $0 + 8 | 0;
$21 = Math_fround(HEAPF32[$20 >> 2]);
$23 = ~~Math_fround($19 / $21);
$24 = $0 + 108 | 0;
$25 = HEAP32[$24 >> 2] | 0;
if (($25 | 0) < ($23 | 0)) {
HEAP32[$24 >> 2] = $23;
$28 = $23;
} else $28 = $25;
$29 = Math_fround($21 * Math_fround($28 | 0));
$30 = $0 + 60 | 0;
HEAPF32[$30 >> 2] = $29;
if (!($29 <= $13)) {
HEAPF32[$9 >> 2] = $13;
STACKTOP = sp;
return;
}
$32 = $0 + 120 | 0;
$33 = $0 + 348 | 0;
$34 = $0 + 344 | 0;
$35 = $0 + 24 | 0;
$36 = $0 + 68 | 0;
$37 = $0 + 76 | 0;
$38 = $3 + 4 | 0;
$39 = $3 + 8 | 0;
$40 = $3 + 12 | 0;
$41 = $4 + 4 | 0;
$42 = $4 + 8 | 0;
$43 = $4 + 12 | 0;
$44 = $3 + 4 | 0;
$45 = $3 + 8 | 0;
$46 = $3 + 12 | 0;
$47 = $4 + 4 | 0;
$48 = $4 + 8 | 0;
$49 = $4 + 12 | 0;
$50 = $3 + 4 | 0;
$51 = $3 + 8 | 0;
$52 = $3 + 12 | 0;
$53 = $4 + 4 | 0;
$54 = $4 + 8 | 0;
$55 = $4 + 12 | 0;
$56 = $0 + 320 | 0;
$57 = $3 + 4 | 0;
$58 = $3 + 8 | 0;
$59 = $3 + 12 | 0;
$60 = $4 + 4 | 0;
$61 = $4 + 8 | 0;
$62 = $4 + 12 | 0;
$63 = $0 + 308 | 0;
$64 = $0 + 336 | 0;
$65 = $3 + 4 | 0;
$66 = $3 + 8 | 0;
$67 = $3 + 12 | 0;
$68 = $4 + 4 | 0;
$69 = $4 + 8 | 0;
$70 = $4 + 12 | 0;
$71 = $0 + 324 | 0;
do {
__ZN24AvatarJointRotationIndex17ZeroBodyRotationsEv($32);
$74 = Math_fround((HEAP32[$24 >> 2] | 0) + 1 | 0);
$76 = Math_fround(Math_fround(HEAPF32[$20 >> 2]) * $74);
$77 = Math_fround(HEAPF32[$30 >> 2]);
$79 = Math_fround($77 - Math_fround(HEAPF32[$9 >> 2]));
$81 = Math_fround(HEAPF32[$11 >> 2]);
__ZN12FaceAnimator7newTimeEffPfb(HEAP32[$16 >> 2] | 0, $79, $81, HEAP32[$33 >> 2] | 0, $76 > $13 & $2);
$$07$i = 0;
do {
$87 = Math_fround(HEAPF32[(HEAP32[$34 >> 2] | 0) + ($$07$i << 2) >> 2]) != Math_fround(0.0);
$$pre8$i = Math_fround(HEAPF32[(HEAP32[$33 >> 2] | 0) + ($$07$i << 2) >> 2]);
if ($87 | $$pre8$i != Math_fround(0.0)) __ZN20HanimAnimationRecord16ApplyPseudoMorphEsf($0, $$07$i & 65535, $$pre8$i);
$$07$i = $$07$i + 1 | 0;
} while (($$07$i | 0) != 18);
__ZN14TwoArmAnimator7newTimeEf(HEAP32[$14 >> 2] | 0, $79);
$92 = HEAP32[16165] | 0;
$93 = HEAP32[$34 >> 2] | 0;
$94 = HEAP32[$33 >> 2] | 0;
$96 = (HEAP8[$35 >> 0] | 0) != 0;
if ($92 | 0) {
$98 = Math_fround(HEAPF32[$20 >> 2]);
__ZN7SSFrame12SetTimestampEf($92, Math_fround(HEAPF32[$30 >> 2]));
__ZN7SSFrame11SetDurationEf($92, $98);
if (!(0 << 24 >> 24)) {
$$02156$i = 0;
$indvars$iv77$i = 0;
while (1) {
$103 = HEAP32[$0 + 120 + ($indvars$iv77$i << 4) >> 2] | 0;
HEAPF32[$3 >> 2] = Math_fround(0.0);
HEAPF32[$38 >> 2] = Math_fround(0.0);
HEAPF32[$39 >> 2] = Math_fround(0.0);
HEAPF32[$40 >> 2] = Math_fround(1.0);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$103 >> 2] | 0) + 8 >> 2] & 255]($103, $3);
HEAPF32[$4 >> 2] = Math_fround(0.0);
HEAPF32[$41 >> 2] = Math_fround(0.0);
HEAPF32[$42 >> 2] = Math_fround(0.0);
HEAPF32[$43 >> 2] = Math_fround(1.0);
$107 = $103 + 4 | 0;
__ZN5Joint26transformHanimToJointFrameER10QuaternionRKS0_(HEAP32[$107 >> 2] | 0, $4, $3);
if ($96) {
$186 = Math_fround(HEAPF32[$4 >> 2]);
$187 = Math_fround(HEAPF32[$41 >> 2]);
$188 = Math_fround(HEAPF32[$42 >> 2]);
__ZN7SSFrame15SetBoneRotationEiffff($92, HEAP32[(HEAP32[$107 >> 2] | 0) + 4 >> 2] << 16 >> 16, $186, $187, $188, Math_fround(HEAPF32[$43 >> 2]));
$191 = HEAP32[$0 + 120 + ($indvars$iv77$i << 4) + 4 >> 2] | 0;
HEAPF32[$3 >> 2] = Math_fround(0.0);
HEAPF32[$38 >> 2] = Math_fround(0.0);
HEAPF32[$39 >> 2] = Math_fround(0.0);
HEAPF32[$40 >> 2] = Math_fround(1.0);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$191 >> 2] | 0) + 8 >> 2] & 255]($191, $3);
HEAPF32[$4 >> 2] = Math_fround(0.0);
HEAPF32[$41 >> 2] = Math_fround(0.0);
HEAPF32[$42 >> 2] = Math_fround(0.0);
HEAPF32[$43 >> 2] = Math_fround(1.0);
$195 = $191 + 4 | 0;
__ZN5Joint26transformHanimToJointFrameER10QuaternionRKS0_(HEAP32[$195 >> 2] | 0, $4, $3);
$201 = Math_fround(HEAPF32[$4 >> 2]);
$202 = Math_fround(HEAPF32[$41 >> 2]);
$203 = Math_fround(HEAPF32[$42 >> 2]);
__ZN7SSFrame15SetBoneRotationEiffff($92, HEAP32[(HEAP32[$195 >> 2] | 0) + 4 >> 2] << 16 >> 16, $201, $202, $203, Math_fround(HEAPF32[$43 >> 2]));
$206 = HEAP32[$0 + 120 + ($indvars$iv77$i << 4) + 8 >> 2] | 0;
HEAPF32[$3 >> 2] = Math_fround(0.0);
HEAPF32[$38 >> 2] = Math_fround(0.0);
HEAPF32[$39 >> 2] = Math_fround(0.0);
HEAPF32[$40 >> 2] = Math_fround(1.0);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$206 >> 2] | 0) + 8 >> 2] & 255]($206, $3);
HEAPF32[$4 >> 2] = Math_fround(0.0);
HEAPF32[$41 >> 2] = Math_fround(0.0);
HEAPF32[$42 >> 2] = Math_fround(0.0);
HEAPF32[$43 >> 2] = Math_fround(1.0);
$210 = $206 + 4 | 0;
__ZN5Joint26transformHanimToJointFrameER10QuaternionRKS0_(HEAP32[$210 >> 2] | 0, $4, $3);
$216 = Math_fround(HEAPF32[$4 >> 2]);
$217 = Math_fround(HEAPF32[$41 >> 2]);
$218 = Math_fround(HEAPF32[$42 >> 2]);
__ZN7SSFrame15SetBoneRotationEiffff($92, HEAP32[(HEAP32[$210 >> 2] | 0) + 4 >> 2] << 16 >> 16, $216, $217, $218, Math_fround(HEAPF32[$43 >> 2]));
$221 = HEAP32[$0 + 120 + ($indvars$iv77$i << 4) + 12 >> 2] | 0;
HEAPF32[$3 >> 2] = Math_fround(0.0);
HEAPF32[$38 >> 2] = Math_fround(0.0);
HEAPF32[$39 >> 2] = Math_fround(0.0);
HEAPF32[$40 >> 2] = Math_fround(1.0);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$221 >> 2] | 0) + 8 >> 2] & 255]($221, $3);
HEAPF32[$4 >> 2] = Math_fround(0.0);
HEAPF32[$41 >> 2] = Math_fround(0.0);
HEAPF32[$42 >> 2] = Math_fround(0.0);
HEAPF32[$43 >> 2] = Math_fround(1.0);
$225 = $221 + 4 | 0;
__ZN5Joint26transformHanimToJointFrameER10QuaternionRKS0_(HEAP32[$225 >> 2] | 0, $4, $3);
$231 = Math_fround(HEAPF32[$4 >> 2]);
$232 = Math_fround(HEAPF32[$41 >> 2]);
$233 = Math_fround(HEAPF32[$42 >> 2]);
__ZN7SSFrame15SetBoneRotationEiffff($92, HEAP32[(HEAP32[$225 >> 2] | 0) + 4 >> 2] << 16 >> 16, $231, $232, $233, Math_fround(HEAPF32[$43 >> 2]));
$indvars$iv74$i = 0;
do {
$236 = HEAP32[$0 + 152 + ($indvars$iv77$i * 60 | 0) + ($indvars$iv74$i * 12 | 0) >> 2] | 0;
HEAPF32[$3 >> 2] = Math_fround(0.0);
HEAPF32[$44 >> 2] = Math_fround(0.0);
HEAPF32[$45 >> 2] = Math_fround(0.0);
HEAPF32[$46 >> 2] = Math_fround(1.0);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$236 >> 2] | 0) + 8 >> 2] & 255]($236, $3);
HEAPF32[$4 >> 2] = Math_fround(0.0);
HEAPF32[$47 >> 2] = Math_fround(0.0);
HEAPF32[$48 >> 2] = Math_fround(0.0);
HEAPF32[$49 >> 2] = Math_fround(1.0);
$240 = $236 + 4 | 0;
__ZN5Joint26transformHanimToJointFrameER10QuaternionRKS0_(HEAP32[$240 >> 2] | 0, $4, $3);
$246 = Math_fround(HEAPF32[$4 >> 2]);
$247 = Math_fround(HEAPF32[$47 >> 2]);
$248 = Math_fround(HEAPF32[$48 >> 2]);
__ZN7SSFrame15SetBoneRotationEiffff($92, HEAP32[(HEAP32[$240 >> 2] | 0) + 4 >> 2] << 16 >> 16, $246, $247, $248, Math_fround(HEAPF32[$49 >> 2]));
$251 = HEAP32[$0 + 152 + ($indvars$iv77$i * 60 | 0) + ($indvars$iv74$i * 12 | 0) + 4 >> 2] | 0;
HEAPF32[$3 >> 2] = Math_fround(0.0);
HEAPF32[$44 >> 2] = Math_fround(0.0);
HEAPF32[$45 >> 2] = Math_fround(0.0);
HEAPF32[$46 >> 2] = Math_fround(1.0);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$251 >> 2] | 0) + 8 >> 2] & 255]($251, $3);
HEAPF32[$4 >> 2] = Math_fround(0.0);
HEAPF32[$47 >> 2] = Math_fround(0.0);
HEAPF32[$48 >> 2] = Math_fround(0.0);
HEAPF32[$49 >> 2] = Math_fround(1.0);
$255 = $251 + 4 | 0;
__ZN5Joint26transformHanimToJointFrameER10QuaternionRKS0_(HEAP32[$255 >> 2] | 0, $4, $3);
$261 = Math_fround(HEAPF32[$4 >> 2]);
$262 = Math_fround(HEAPF32[$47 >> 2]);
$263 = Math_fround(HEAPF32[$48 >> 2]);
__ZN7SSFrame15SetBoneRotationEiffff($92, HEAP32[(HEAP32[$255 >> 2] | 0) + 4 >> 2] << 16 >> 16, $261, $262, $263, Math_fround(HEAPF32[$49 >> 2]));
$266 = HEAP32[$0 + 152 + ($indvars$iv77$i * 60 | 0) + ($indvars$iv74$i * 12 | 0) + 8 >> 2] | 0;
HEAPF32[$3 >> 2] = Math_fround(0.0);
HEAPF32[$44 >> 2] = Math_fround(0.0);
HEAPF32[$45 >> 2] = Math_fround(0.0);
HEAPF32[$46 >> 2] = Math_fround(1.0);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$266 >> 2] | 0) + 8 >> 2] & 255]($266, $3);
HEAPF32[$4 >> 2] = Math_fround(0.0);
HEAPF32[$47 >> 2] = Math_fround(0.0);
HEAPF32[$48 >> 2] = Math_fround(0.0);
HEAPF32[$49 >> 2] = Math_fround(1.0);
$270 = $266 + 4 | 0;
__ZN5Joint26transformHanimToJointFrameER10QuaternionRKS0_(HEAP32[$270 >> 2] | 0, $4, $3);
$276 = Math_fround(HEAPF32[$4 >> 2]);
$277 = Math_fround(HEAPF32[$47 >> 2]);
$278 = Math_fround(HEAPF32[$48 >> 2]);
__ZN7SSFrame15SetBoneRotationEiffff($92, HEAP32[(HEAP32[$270 >> 2] | 0) + 4 >> 2] << 16 >> 16, $276, $277, $278, Math_fround(HEAPF32[$49 >> 2]));
$indvars$iv74$i = $indvars$iv74$i + 1 | 0;
} while (($indvars$iv74$i | 0) != 5);
$$3$lcssa$i = $$02156$i;
} else {
$139 = Math_fround(HEAPF32[$4 >> 2]);
$140 = Math_fround(HEAPF32[$41 >> 2]);
$141 = Math_fround(HEAPF32[$42 >> 2]);
__ZN7SSFrame15SetBoneRotationEiffff($92, $$02156$i << 16 >> 16, $139, $140, $141, Math_fround(HEAPF32[$43 >> 2]));
$144 = HEAP32[$0 + 120 + ($indvars$iv77$i << 4) + 4 >> 2] | 0;
HEAPF32[$3 >> 2] = Math_fround(0.0);
HEAPF32[$38 >> 2] = Math_fround(0.0);
HEAPF32[$39 >> 2] = Math_fround(0.0);
HEAPF32[$40 >> 2] = Math_fround(1.0);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$144 >> 2] | 0) + 8 >> 2] & 255]($144, $3);
HEAPF32[$4 >> 2] = Math_fround(0.0);
HEAPF32[$41 >> 2] = Math_fround(0.0);
HEAPF32[$42 >> 2] = Math_fround(0.0);
HEAPF32[$43 >> 2] = Math_fround(1.0);
__ZN5Joint26transformHanimToJointFrameER10QuaternionRKS0_(HEAP32[$144 + 4 >> 2] | 0, $4, $3);
$152 = Math_fround(HEAPF32[$4 >> 2]);
$153 = Math_fround(HEAPF32[$41 >> 2]);
$154 = Math_fround(HEAPF32[$42 >> 2]);
__ZN7SSFrame15SetBoneRotationEiffff($92, $$02156$i + 1 << 16 >> 16 << 16 >> 16, $152, $153, $154, Math_fround(HEAPF32[$43 >> 2]));
$157 = HEAP32[$0 + 120 + ($indvars$iv77$i << 4) + 8 >> 2] | 0;
HEAPF32[$3 >> 2] = Math_fround(0.0);
HEAPF32[$38 >> 2] = Math_fround(0.0);
HEAPF32[$39 >> 2] = Math_fround(0.0);
HEAPF32[$40 >> 2] = Math_fround(1.0);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$157 >> 2] | 0) + 8 >> 2] & 255]($157, $3);
HEAPF32[$4 >> 2] = Math_fround(0.0);
HEAPF32[$41 >> 2] = Math_fround(0.0);
HEAPF32[$42 >> 2] = Math_fround(0.0);
HEAPF32[$43 >> 2] = Math_fround(1.0);
__ZN5Joint26transformHanimToJointFrameER10QuaternionRKS0_(HEAP32[$157 + 4 >> 2] | 0, $4, $3);
$165 = Math_fround(HEAPF32[$4 >> 2]);
$166 = Math_fround(HEAPF32[$41 >> 2]);
$167 = Math_fround(HEAPF32[$42 >> 2]);
__ZN7SSFrame15SetBoneRotationEiffff($92, $$02156$i + 2 << 16 >> 16 << 16 >> 16, $165, $166, $167, Math_fround(HEAPF32[$43 >> 2]));
$170 = HEAP32[$0 + 120 + ($indvars$iv77$i << 4) + 12 >> 2] | 0;
HEAPF32[$3 >> 2] = Math_fround(0.0);
HEAPF32[$38 >> 2] = Math_fround(0.0);
HEAPF32[$39 >> 2] = Math_fround(0.0);
HEAPF32[$40 >> 2] = Math_fround(1.0);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$170 >> 2] | 0) + 8 >> 2] & 255]($170, $3);
HEAPF32[$4 >> 2] = Math_fround(0.0);
HEAPF32[$41 >> 2] = Math_fround(0.0);
HEAPF32[$42 >> 2] = Math_fround(0.0);
HEAPF32[$43 >> 2] = Math_fround(1.0);
__ZN5Joint26transformHanimToJointFrameER10QuaternionRKS0_(HEAP32[$170 + 4 >> 2] | 0, $4, $3);
$177 = Math_fround(HEAPF32[$4 >> 2]);
$178 = Math_fround(HEAPF32[$41 >> 2]);
$179 = Math_fround(HEAPF32[$42 >> 2]);
__ZN7SSFrame15SetBoneRotationEiffff($92, $$02156$i + 3 << 16 >> 16 << 16 >> 16, $177, $178, $179, Math_fround(HEAPF32[$43 >> 2]));
$$344$i = $$02156$i + 4 << 16 >> 16;
$indvars$iv$i = 0;
while (1) {
$281 = HEAP32[$0 + 152 + ($indvars$iv77$i * 60 | 0) + ($indvars$iv$i * 12 | 0) >> 2] | 0;
HEAPF32[$3 >> 2] = Math_fround(0.0);
HEAPF32[$44 >> 2] = Math_fround(0.0);
HEAPF32[$45 >> 2] = Math_fround(0.0);
HEAPF32[$46 >> 2] = Math_fround(1.0);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$281 >> 2] | 0) + 8 >> 2] & 255]($281, $3);
HEAPF32[$4 >> 2] = Math_fround(0.0);
HEAPF32[$47 >> 2] = Math_fround(0.0);
HEAPF32[$48 >> 2] = Math_fround(0.0);
HEAPF32[$49 >> 2] = Math_fround(1.0);
__ZN5Joint26transformHanimToJointFrameER10QuaternionRKS0_(HEAP32[$281 + 4 >> 2] | 0, $4, $3);
$289 = Math_fround(HEAPF32[$4 >> 2]);
$290 = Math_fround(HEAPF32[$47 >> 2]);
$291 = Math_fround(HEAPF32[$48 >> 2]);
__ZN7SSFrame15SetBoneRotationEiffff($92, $$344$i << 16 >> 16, $289, $290, $291, Math_fround(HEAPF32[$49 >> 2]));
$294 = HEAP32[$0 + 152 + ($indvars$iv77$i * 60 | 0) + ($indvars$iv$i * 12 | 0) + 4 >> 2] | 0;
HEAPF32[$3 >> 2] = Math_fround(0.0);
HEAPF32[$44 >> 2] = Math_fround(0.0);
HEAPF32[$45 >> 2] = Math_fround(0.0);
HEAPF32[$46 >> 2] = Math_fround(1.0);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$294 >> 2] | 0) + 8 >> 2] & 255]($294, $3);
HEAPF32[$4 >> 2] = Math_fround(0.0);
HEAPF32[$47 >> 2] = Math_fround(0.0);
HEAPF32[$48 >> 2] = Math_fround(0.0);
HEAPF32[$49 >> 2] = Math_fround(1.0);
__ZN5Joint26transformHanimToJointFrameER10QuaternionRKS0_(HEAP32[$294 + 4 >> 2] | 0, $4, $3);
$302 = Math_fround(HEAPF32[$4 >> 2]);
$303 = Math_fround(HEAPF32[$47 >> 2]);
$304 = Math_fround(HEAPF32[$48 >> 2]);
__ZN7SSFrame15SetBoneRotationEiffff($92, $$344$i + 1 << 16 >> 16 << 16 >> 16, $302, $303, $304, Math_fround(HEAPF32[$49 >> 2]));
$307 = HEAP32[$0 + 152 + ($indvars$iv77$i * 60 | 0) + ($indvars$iv$i * 12 | 0) + 8 >> 2] | 0;
HEAPF32[$3 >> 2] = Math_fround(0.0);
HEAPF32[$44 >> 2] = Math_fround(0.0);
HEAPF32[$45 >> 2] = Math_fround(0.0);
HEAPF32[$46 >> 2] = Math_fround(1.0);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$307 >> 2] | 0) + 8 >> 2] & 255]($307, $3);
HEAPF32[$4 >> 2] = Math_fround(0.0);
HEAPF32[$47 >> 2] = Math_fround(0.0);
HEAPF32[$48 >> 2] = Math_fround(0.0);
HEAPF32[$49 >> 2] = Math_fround(1.0);
__ZN5Joint26transformHanimToJointFrameER10QuaternionRKS0_(HEAP32[$307 + 4 >> 2] | 0, $4, $3);
$314 = Math_fround(HEAPF32[$4 >> 2]);
$315 = Math_fround(HEAPF32[$47 >> 2]);
$316 = Math_fround(HEAPF32[$48 >> 2]);
__ZN7SSFrame15SetBoneRotationEiffff($92, $$344$i + 2 << 16 >> 16 << 16 >> 16, $314, $315, $316, Math_fround(HEAPF32[$49 >> 2]));
$indvars$iv$i = $indvars$iv$i + 1 | 0;
if (($indvars$iv$i | 0) == 5) break; else $$344$i = $$344$i + 3 << 16 >> 16;
}
$$3$lcssa$i = $$02156$i + 19 << 16 >> 16;
}
$321 = HEAP32[$0 + 296 + ($indvars$iv77$i << 2) >> 2] | 0;
HEAPF32[$3 >> 2] = Math_fround(0.0);
HEAPF32[$50 >> 2] = Math_fround(0.0);
HEAPF32[$51 >> 2] = Math_fround(0.0);
HEAPF32[$52 >> 2] = Math_fround(1.0);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$321 >> 2] | 0) + 8 >> 2] & 255]($321, $3);
HEAPF32[$4 >> 2] = Math_fround(0.0);
HEAPF32[$53 >> 2] = Math_fround(0.0);
HEAPF32[$54 >> 2] = Math_fround(0.0);
HEAPF32[$55 >> 2] = Math_fround(1.0);
$325 = $321 + 4 | 0;
__ZN5Joint26transformHanimToJointFrameER10QuaternionRKS0_(HEAP32[$325 >> 2] | 0, $4, $3);
if ($96) {
$$4$i = $$3$lcssa$i;
$332 = HEAP32[(HEAP32[$325 >> 2] | 0) + 4 >> 2] | 0;
} else {
$$4$i = $$3$lcssa$i + 1 << 16 >> 16;
$332 = $$3$lcssa$i << 16 >> 16;
}
$334 = Math_fround(HEAPF32[$4 >> 2]);
$335 = Math_fround(HEAPF32[$53 >> 2]);
$336 = Math_fround(HEAPF32[$54 >> 2]);
__ZN7SSFrame15SetBoneRotationEiffff($92, $332 << 16 >> 16, $334, $335, $336, Math_fround(HEAPF32[$55 >> 2]));
$indvars$iv77$i = $indvars$iv77$i + 1 | 0;
if (($indvars$iv77$i | 0) == 2) break; else $$02156$i = $$4$i;
}
$109 = HEAP32[$56 >> 2] | 0;
$sext$i = $109 << 16;
$110 = $sext$i >> 16;
L33 : do if (($sext$i | 0) > 0) if ($96) {
$$08135$us$i = 0;
$114 = $109;
$115 = 0;
while (1) {
if (($114 | 0) > ($115 | 0) & $$08135$us$i << 16 >> 16 > -1) {
$118 = HEAP32[(HEAP32[$63 >> 2] | 0) + ($115 << 2) >> 2] | 0;
$120 = $118;
$123 = $118;
} else {
$120 = 0;
$123 = 0;
}
HEAPF32[$3 >> 2] = Math_fround(0.0);
HEAPF32[$57 >> 2] = Math_fround(0.0);
HEAPF32[$58 >> 2] = Math_fround(0.0);
HEAPF32[$59 >> 2] = Math_fround(1.0);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$120 >> 2] | 0) + 8 >> 2] & 255]($123, $3);
HEAPF32[$4 >> 2] = Math_fround(0.0);
HEAPF32[$60 >> 2] = Math_fround(0.0);
HEAPF32[$61 >> 2] = Math_fround(0.0);
HEAPF32[$62 >> 2] = Math_fround(1.0);
$124 = $123 + 4 | 0;
__ZN5Joint26transformHanimToJointFrameER10QuaternionRKS0_(HEAP32[$124 >> 2] | 0, $4, $3);
$130 = Math_fround(HEAPF32[$4 >> 2]);
$131 = Math_fround(HEAPF32[$60 >> 2]);
$132 = Math_fround(HEAPF32[$61 >> 2]);
__ZN7SSFrame15SetBoneRotationEiffff($92, HEAP32[(HEAP32[$124 >> 2] | 0) + 4 >> 2] << 16 >> 16, $130, $131, $132, Math_fround(HEAPF32[$62 >> 2]));
$134 = $$08135$us$i + 1 << 16 >> 16;
$135 = $134 << 16 >> 16;
if (($110 | 0) <= ($135 | 0)) {
$$7$lcssa$i = $$4$i;
break L33;
}
$$08135$us$i = $134;
$114 = HEAP32[$56 >> 2] | 0;
$115 = $135;
}
} else {
$$08135$i = 0;
$$734$i = $$4$i;
$368 = $109;
$369 = 0;
while (1) {
if (($368 | 0) > ($369 | 0) & $$08135$i << 16 >> 16 > -1) {
$372 = HEAP32[(HEAP32[$63 >> 2] | 0) + ($369 << 2) >> 2] | 0;
$374 = $372;
$377 = $372;
} else {
$374 = 0;
$377 = 0;
}
HEAPF32[$3 >> 2] = Math_fround(0.0);
HEAPF32[$57 >> 2] = Math_fround(0.0);
HEAPF32[$58 >> 2] = Math_fround(0.0);
HEAPF32[$59 >> 2] = Math_fround(1.0);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$374 >> 2] | 0) + 8 >> 2] & 255]($377, $3);
HEAPF32[$4 >> 2] = Math_fround(0.0);
HEAPF32[$60 >> 2] = Math_fround(0.0);
HEAPF32[$61 >> 2] = Math_fround(0.0);
HEAPF32[$62 >> 2] = Math_fround(1.0);
__ZN5Joint26transformHanimToJointFrameER10QuaternionRKS0_(HEAP32[$377 + 4 >> 2] | 0, $4, $3);
$380 = $$734$i + 1 << 16 >> 16;
$382 = Math_fround(HEAPF32[$4 >> 2]);
$383 = Math_fround(HEAPF32[$60 >> 2]);
$384 = Math_fround(HEAPF32[$61 >> 2]);
__ZN7SSFrame15SetBoneRotationEiffff($92, $$734$i << 16 >> 16, $382, $383, $384, Math_fround(HEAPF32[$62 >> 2]));
$386 = $$08135$i + 1 << 16 >> 16;
$387 = $386 << 16 >> 16;
if (($110 | 0) <= ($387 | 0)) {
$$7$lcssa$i = $380;
break L33;
}
$$08135$i = $386;
$$734$i = $380;
$368 = HEAP32[$56 >> 2] | 0;
$369 = $387;
}
} else $$7$lcssa$i = $$4$i; while (0);
$338 = HEAP32[$64 >> 2] | 0;
$sext1$i = $338 << 16;
$339 = $sext1$i >> 16;
L49 : do if (($sext1$i | 0) > 0) if ($96) {
$$08030$us$i = 0;
$343 = $338;
$344 = 0;
while (1) {
if (($343 | 0) > ($344 | 0) & $$08030$us$i << 16 >> 16 > -1) {
$347 = HEAP32[(HEAP32[$71 >> 2] | 0) + ($344 << 2) >> 2] | 0;
$349 = $347;
$352 = $347;
} else {
$349 = 0;
$352 = 0;
}
HEAPF32[$3 >> 2] = Math_fround(0.0);
HEAPF32[$65 >> 2] = Math_fround(0.0);
HEAPF32[$66 >> 2] = Math_fround(0.0);
HEAPF32[$67 >> 2] = Math_fround(1.0);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$349 >> 2] | 0) + 8 >> 2] & 255]($352, $3);
HEAPF32[$4 >> 2] = Math_fround(0.0);
HEAPF32[$68 >> 2] = Math_fround(0.0);
HEAPF32[$69 >> 2] = Math_fround(0.0);
HEAPF32[$70 >> 2] = Math_fround(1.0);
$353 = $352 + 4 | 0;
__ZN5Joint26transformHanimToJointFrameER10QuaternionRKS0_(HEAP32[$353 >> 2] | 0, $4, $3);
$359 = Math_fround(HEAPF32[$4 >> 2]);
$360 = Math_fround(HEAPF32[$68 >> 2]);
$361 = Math_fround(HEAPF32[$69 >> 2]);
__ZN7SSFrame15SetBoneRotationEiffff($92, HEAP32[(HEAP32[$353 >> 2] | 0) + 4 >> 2] << 16 >> 16, $359, $360, $361, Math_fround(HEAPF32[$70 >> 2]));
$363 = $$08030$us$i + 1 << 16 >> 16;
$364 = $363 << 16 >> 16;
if (($339 | 0) <= ($364 | 0)) break L49;
$$08030$us$i = $363;
$343 = HEAP32[$64 >> 2] | 0;
$344 = $364;
}
} else {
$$08030$i = 0;
$$929$i = $$7$lcssa$i;
$395 = $338;
$396 = 0;
while (1) {
if (($395 | 0) > ($396 | 0) & $$08030$i << 16 >> 16 > -1) {
$399 = HEAP32[(HEAP32[$71 >> 2] | 0) + ($396 << 2) >> 2] | 0;
$401 = $399;
$404 = $399;
} else {
$401 = 0;
$404 = 0;
}
HEAPF32[$3 >> 2] = Math_fround(0.0);
HEAPF32[$65 >> 2] = Math_fround(0.0);
HEAPF32[$66 >> 2] = Math_fround(0.0);
HEAPF32[$67 >> 2] = Math_fround(1.0);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$401 >> 2] | 0) + 8 >> 2] & 255]($404, $3);
HEAPF32[$4 >> 2] = Math_fround(0.0);
HEAPF32[$68 >> 2] = Math_fround(0.0);
HEAPF32[$69 >> 2] = Math_fround(0.0);
HEAPF32[$70 >> 2] = Math_fround(1.0);
__ZN5Joint26transformHanimToJointFrameER10QuaternionRKS0_(HEAP32[$404 + 4 >> 2] | 0, $4, $3);
$408 = Math_fround(HEAPF32[$4 >> 2]);
$409 = Math_fround(HEAPF32[$68 >> 2]);
$410 = Math_fround(HEAPF32[$69 >> 2]);
__ZN7SSFrame15SetBoneRotationEiffff($92, $$929$i << 16 >> 16, $408, $409, $410, Math_fround(HEAPF32[$70 >> 2]));
$412 = $$08030$i + 1 << 16 >> 16;
$413 = $412 << 16 >> 16;
if (($339 | 0) <= ($413 | 0)) break L49;
$$08030$i = $412;
$$929$i = $$929$i + 1 << 16 >> 16;
$395 = HEAP32[$64 >> 2] | 0;
$396 = $413;
}
} while (0);
if ($94 | 0) {
if ((__ZNK28InvertibleDynamicStringArray6lengthEv(HEAP32[17820] | 0) | 0) > 18) {
$$07828$i = 18;
$$07927$i = 0;
$418 = 18;
while (1) {
$419 = Math_fround(HEAPF32[$94 + ($418 << 2) >> 2]);
if ($419 != Math_fround(0.0)) label = 46; else if (Math_fround(HEAPF32[$93 + ($418 << 2) >> 2]) != Math_fround(0.0)) label = 46; else $$1$i = $$07927$i;
if ((label | 0) == 46) {
label = 0;
__ZN7SSFrame8SetMorphEjPcf($92, $$07927$i << 16 >> 16, __ZNK28InvertibleDynamicStringArray14valueFromIndexEi(HEAP32[17820] | 0, $418) | 0, $419);
$$1$i = $$07927$i + 1 << 16 >> 16;
}
$$07828$i = $$07828$i + 1 << 16 >> 16;
$418 = $$07828$i << 16 >> 16;
if ((__ZNK28InvertibleDynamicStringArray6lengthEv(HEAP32[17820] | 0) | 0) <= ($418 | 0)) {
$$079$lcssa$i = $$1$i;
break;
} else $$07927$i = $$1$i;
}
} else $$079$lcssa$i = 0;
__ZN7SSFrame10TrimMorphsEj($92, $$079$lcssa$i << 16 >> 16);
}
}
}
$433 = HEAP32[$36 >> 2] | 0;
if (!$433) $$1$off0 = 1; else $$1$off0 = FUNCTION_TABLE_iii[$433 & 63](HEAP32[$37 >> 2] | 0, HEAP32[16165] | 0) | 0;
HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 1;
HEAPF32[$30 >> 2] = $76;
$440 = HEAP32[$34 >> 2] | 0;
HEAP32[$34 >> 2] = HEAP32[$33 >> 2];
HEAP32[$33 >> 2] = $440;
} while ($$1$off0 & $76 <= $13);
HEAPF32[$9 >> 2] = $13;
STACKTOP = sp;
return;
}
function _storeAtts($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$$lcssa714 = 0, $$0$i = 0, $$0$lcssa$i155$i = 0, $$0$lcssa$i155$i542 = 0, $$0146189$i = 0, $$0146189$i546 = 0, $$034$i153$i = 0, $$034$i153$i540 = 0, $$0447692 = 0, $$0448691 = 0, $$0450697 = 0, $$0454$lcssa = 0, $$0454729871 = 0, $$0462$lcssa = 0, $$0462688 = 0, $$0466 = 0, $$0468727872 = 0, $$0479 = 0, $$0482 = 0, $$0482579 = 0, $$0482580$ph = 0, $$0486713 = 0, $$0489$lcssa = 0, $$0489726873 = 0, $$05$i152$i = 0, $$05$i152$i539 = 0, $$0500682 = 0, $$0500683 = 0, $$0502724 = 0, $$0505 = 0, $$057$i$i = 0, $$057$i$i548 = 0, $$0680 = 0, $$0681 = 0, $$08$i$i = 0, $$08$i$i547 = 0, $$10478 = 0, $$10499$ph = 0, $$1139190$i = 0, $$1147$i = 0, $$1147$i551 = 0, $$1451 = 0, $$1453 = 0, $$1467 = 0, $$1469722 = 0, $$1480 = 0, $$1487687 = 0, $$1501 = 0, $$1504 = 0, $$1506 = 0, $$2464 = 0, $$2470716 = 0, $$2481 = 0, $$2485 = 0, $$2488$be = 0, $$2488$lcssa = 0, $$2488696 = 0, $$2491565 = 0, $$32 = 0, $$3457566 = 0, $$3471706 = 0, $$3492$lcssa = 0, $$3492715 = 0, $$4458$lcssa = 0, $$4458717 = 0, $$4493 = 0, $$6495570 = 0, $$7461571 = 0, $$7496705 = 0, $$9477$ph = 0, $$9477685 = 0, $$lcssa644 = 0, $$phi$trans$insert = 0, $$pn608 = 0, $$pre$phi790Z2D = 0, $$pre$phiZ2D = 0, $$sink = 0, $101 = 0, $105 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $119 = 0, $122 = 0, $123 = 0, $13 = 0, $134 = 0, $136 = 0, $143 = 0, $149 = 0, $155 = 0, $158 = 0, $162 = 0, $167 = 0, $171 = 0, $177 = 0, $18 = 0, $19 = 0, $190 = 0, $197 = 0, $198 = 0, $203 = 0, $210 = 0, $217 = 0, $22 = 0, $220 = 0, $228 = 0, $23 = 0, $230 = 0, $24 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $247 = 0, $250 = 0, $251 = 0, $254 = 0, $259 = 0, $26 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $278 = 0, $283 = 0, $286 = 0, $289 = 0, $29 = 0, $296 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $313 = 0, $314 = 0, $315 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $324 = 0, $325 = 0, $328 = 0, $33 = 0, $330 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $339 = 0, $353 = 0, $360 = 0, $362 = 0, $365 = 0, $368 = 0, $369 = 0, $37 = 0, $375 = 0, $378 = 0, $382 = 0, $385 = 0, $386 = 0, $392 = 0, $393 = 0, $400 = 0, $401 = 0, $405 = 0, $409 = 0, $411 = 0, $412 = 0, $415 = 0, $418 = 0, $421 = 0, $430 = 0, $443 = 0, $448 = 0, $450 = 0, $454 = 0, $462 = 0, $464 = 0, $482 = 0, $485 = 0, $488 = 0, $492 = 0, $499 = 0, $5 = 0, $501 = 0, $506 = 0, $51 = 0, $513 = 0, $517 = 0, $519 = 0, $520 = 0, $525 = 0, $526 = 0, $528 = 0, $533 = 0, $541 = 0, $542 = 0, $543 = 0, $545 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $67 = 0, $69 = 0, $7 = 0, $73 = 0, $74 = 0, $77 = 0, $8 = 0, $85 = 0, $86 = 0, $88 = 0, $9 = 0, $90 = 0, $92 = 0, $93 = 0, $94 = 0, $96 = 0, label = 0, sp = 0, $278$looptemp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$5 = sp;
$6 = $0 + 340 | 0;
$7 = HEAP32[$6 >> 2] | 0;
$8 = $7 + 20 | 0;
$9 = HEAP32[$3 >> 2] | 0;
$11 = HEAP32[$7 + 28 >> 2] | 0;
L1 : do if (!$11) label = 13; else {
$13 = HEAP8[$9 >> 0] | 0;
if (!($13 << 24 >> 24)) $$0$lcssa$i155$i = 0; else {
$$034$i153$i = $9;
$$05$i152$i = 0;
$18 = $13;
while (1) {
$$034$i153$i = $$034$i153$i + 1 | 0;
$19 = $$05$i152$i * 1000003 ^ $18 & 255;
$18 = HEAP8[$$034$i153$i >> 0] | 0;
if (!($18 << 24 >> 24)) {
$$0$lcssa$i155$i = $19;
break;
} else $$05$i152$i = $19;
}
}
$22 = $11 + -1 | 0;
$23 = $$0$lcssa$i155$i & $22;
$24 = HEAP32[$8 >> 2] | 0;
$26 = HEAP32[$24 + ($23 << 2) >> 2] | 0;
if (!$26) label = 13; else {
$29 = $$0$lcssa$i155$i & 0 - $11;
$30 = $7 + 24 | 0;
$31 = $22 >>> 2;
$$0146189$i = 0;
$$1139190$i = $23;
$33 = $26;
L8 : while (1) {
$32 = HEAP32[$33 >> 2] | 0;
if ($13 << 24 >> 24 == (HEAP8[$32 >> 0] | 0)) {
$$057$i$i = $9;
$$08$i$i = $32;
$37 = $13;
do {
if (!($37 << 24 >> 24)) break L8;
$$057$i$i = $$057$i$i + 1 | 0;
$$08$i$i = $$08$i$i + 1 | 0;
$37 = HEAP8[$$057$i$i >> 0] | 0;
} while ($37 << 24 >> 24 == (HEAP8[$$08$i$i >> 0] | 0));
}
if (!($$0146189$i << 24 >> 24)) $$1147$i = ($29 >>> ((HEAPU8[$30 >> 0] | 0) + -1 | 0) & $31 | 1) & 255; else $$1147$i = $$0146189$i;
$51 = $$1147$i & 255;
$$1139190$i = ($$1139190$i >>> 0 < $51 >>> 0 ? $11 : 0) + ($$1139190$i - $51) | 0;
$56 = HEAP32[$24 + ($$1139190$i << 2) >> 2] | 0;
if (!$56) {
label = 13;
break L1;
} else {
$$0146189$i = $$1147$i;
$33 = $56;
}
}
if (!$33) label = 13; else $$1453 = $33;
}
} while (0);
if ((label | 0) == 13) {
$59 = $7 + 80 | 0;
$60 = $7 + 92 | 0;
$61 = $7 + 88 | 0;
$$0$i = $9;
while (1) {
$62 = HEAP32[$60 >> 2] | 0;
if (($62 | 0) == (HEAP32[$61 >> 2] | 0)) {
if (!((_poolGrow($59) | 0) << 24 >> 24)) {
$$32 = 1;
label = 160;
break;
}
$69 = HEAP32[$60 >> 2] | 0;
} else $69 = $62;
$67 = HEAP8[$$0$i >> 0] | 0;
HEAP32[$60 >> 2] = $69 + 1;
HEAP8[$69 >> 0] = $67;
if (!(HEAP8[$$0$i >> 0] | 0)) break; else $$0$i = $$0$i + 1 | 0;
}
if ((label | 0) == 160) {
STACKTOP = sp;
return $$32 | 0;
}
$73 = $7 + 96 | 0;
$74 = HEAP32[$73 >> 2] | 0;
HEAP32[$73 >> 2] = HEAP32[$60 >> 2];
if (!$74) {
$$32 = 1;
STACKTOP = sp;
return $$32 | 0;
}
$77 = _lookup($8, $74, 24) | 0;
if (!$77) {
$$32 = 1;
STACKTOP = sp;
return $$32 | 0;
}
if (!(HEAP8[$0 + 232 >> 0] | 0)) $$1453 = $77; else if (!(_setElementTypePrefix(HEAP32[$6 >> 2] | 0, $77) | 0)) {
$$32 = 1;
STACKTOP = sp;
return $$32 | 0;
} else $$1453 = $77;
}
$85 = HEAP32[$$1453 + 12 >> 2] | 0;
$86 = $1 + 36 | 0;
$88 = $0 + 364 | 0;
$90 = $0 + 376 | 0;
$92 = FUNCTION_TABLE_iiiii[HEAP32[$86 >> 2] & 63]($1, $2, HEAP32[$88 >> 2] | 0, HEAP32[$90 >> 2] | 0) | 0;
$93 = $92 + $85 | 0;
$94 = HEAP32[$88 >> 2] | 0;
if (($93 | 0) > ($94 | 0)) {
$96 = $93 + 16 | 0;
HEAP32[$88 >> 2] = $96;
$101 = FUNCTION_TABLE_iii[HEAP32[$0 + 16 >> 2] & 63](HEAP32[$90 >> 2] | 0, $96 << 4) | 0;
if (!$101) {
$$32 = 1;
STACKTOP = sp;
return $$32 | 0;
}
HEAP32[$90 >> 2] = $101;
if (($92 | 0) > ($94 | 0)) FUNCTION_TABLE_iiiii[HEAP32[$86 >> 2] & 63]($1, $2, $92, $101) | 0;
}
$105 = HEAP32[$90 >> 2] | 0;
L46 : do if (($92 | 0) > 0) {
$107 = $1 + 28 | 0;
$108 = $0 + 400 | 0;
$109 = $0 + 412 | 0;
$110 = $0 + 416 | 0;
$111 = $0 + 408 | 0;
$112 = ($85 | 0) < 1;
$113 = $$1453 + 20 | 0;
$114 = $1 + 56 | 0;
$115 = HEAP32[$105 >> 2] | 0;
$119 = _getAttributeId($0, $1, $115, $115 + (FUNCTION_TABLE_iii[HEAP32[$107 >> 2] & 63]($1, $115) | 0) | 0) | 0;
if (!$119) {
$$32 = 1;
STACKTOP = sp;
return $$32 | 0;
} else {
$$0454729871 = 0;
$$0468727872 = 0;
$$0489726873 = 0;
$122 = $119;
}
L50 : while (1) {
$123 = (HEAP32[$122 >> 2] | 0) + -1 | 0;
if (HEAP8[$123 >> 0] | 0) {
label = 29;
break;
}
HEAP8[$123 >> 0] = 1;
$134 = $$0454729871 + 1 | 0;
HEAP32[$105 + ($$0454729871 << 2) >> 2] = HEAP32[$122 >> 2];
$136 = HEAP32[$90 >> 2] | 0;
if (!(HEAP8[$136 + ($$0468727872 << 4) + 12 >> 0] | 0)) {
L55 : do if ((HEAP8[$122 + 8 >> 0] | 0) == 0 | $112) $$1504 = 1; else {
$143 = HEAP32[$113 >> 2] | 0;
$$0502724 = 0;
while (1) {
if (($122 | 0) == (HEAP32[$143 + ($$0502724 * 12 | 0) >> 2] | 0)) break;
$149 = $$0502724 + 1 | 0;
if (($149 | 0) < ($85 | 0)) $$0502724 = $149; else {
$$1504 = 1;
break L55;
}
}
$$1504 = HEAP8[$143 + ($$0502724 * 12 | 0) + 4 >> 0] | 0;
} while (0);
$155 = _appendAttributeValue($0, $1, $$1504, HEAP32[$136 + ($$0468727872 << 4) + 4 >> 2] | 0, HEAP32[$136 + ($$0468727872 << 4) + 8 >> 2] | 0, $108) | 0;
if ($155 | 0) {
$$32 = $155;
label = 160;
break;
}
$158 = HEAP32[$109 >> 2] | 0;
if (!($$1504 << 24 >> 24)) if ((HEAP32[$110 >> 2] | 0) == ($158 | 0)) $167 = $158; else {
$162 = $158 + -1 | 0;
if ((HEAP8[$162 >> 0] | 0) == 32) {
HEAP32[$109 >> 2] = $162;
$167 = $162;
} else $167 = $158;
} else $167 = $158;
if (($167 | 0) == (HEAP32[$111 >> 2] | 0)) {
if (!((_poolGrow($108) | 0) << 24 >> 24)) {
$$32 = 1;
label = 160;
break;
}
$171 = HEAP32[$109 >> 2] | 0;
} else $171 = $167;
HEAP32[$109 >> 2] = $171 + 1;
HEAP8[$171 >> 0] = 0;
HEAP32[$105 + ($134 << 2) >> 2] = HEAP32[$110 >> 2];
} else {
$177 = HEAP32[$136 + ($$0468727872 << 4) + 8 >> 2] | 0;
HEAP32[$5 >> 2] = HEAP32[$136 + ($$0468727872 << 4) + 4 >> 2];
if (!(HEAP32[$109 >> 2] | 0)) if (!((_poolGrow($108) | 0) << 24 >> 24)) {
label = 50;
break;
}
while (1) {
FUNCTION_TABLE_viiiii[HEAP32[$114 >> 2] & 15]($1, $5, $177, $109, HEAP32[$111 >> 2] | 0);
if ((HEAP32[$5 >> 2] | 0) == ($177 | 0)) break;
if (!((_poolGrow($108) | 0) << 24 >> 24)) {
label = 50;
break L50;
}
}
if (!(HEAP32[$110 >> 2] | 0)) break;
$190 = HEAP32[$109 >> 2] | 0;
if (($190 | 0) == (HEAP32[$111 >> 2] | 0)) {
if (!((_poolGrow($108) | 0) << 24 >> 24)) break;
$197 = HEAP32[$109 >> 2] | 0;
} else $197 = $190;
HEAP32[$109 >> 2] = $197 + 1;
HEAP8[$197 >> 0] = 0;
$198 = HEAP32[$110 >> 2] | 0;
HEAP32[$105 + ($134 << 2) >> 2] = $198;
if (!$198) {
$$32 = 1;
label = 160;
break;
}
}
HEAP32[$110 >> 2] = HEAP32[$109 >> 2];
$203 = HEAP32[$122 + 4 >> 2] | 0;
do if (!$203) {
$$2491565 = $$0489726873;
$$3457566 = $$0454729871 + 2 | 0;
} else if (!(HEAP8[$122 + 9 >> 0] | 0)) {
HEAP8[(HEAP32[$122 >> 2] | 0) + -1 >> 0] = 2;
$$2491565 = $$0489726873 + 1 | 0;
$$3457566 = $$0454729871 + 2 | 0;
break;
} else {
$210 = _addBinding($0, $203, $122, HEAP32[$105 + ($134 << 2) >> 2] | 0, $4) | 0;
if (!$210) {
$$2491565 = $$0489726873;
$$3457566 = $$0454729871;
break;
} else {
$$32 = $210;
label = 160;
break L50;
}
} while (0);
$217 = $$0468727872 + 1 | 0;
if (($217 | 0) >= ($92 | 0)) {
$$0454$lcssa = $$3457566;
$$0489$lcssa = $$2491565;
break L46;
}
$220 = HEAP32[(HEAP32[$90 >> 2] | 0) + ($217 << 4) >> 2] | 0;
$122 = _getAttributeId($0, $1, $220, $220 + (FUNCTION_TABLE_iii[HEAP32[$107 >> 2] & 63]($1, $220) | 0) | 0) | 0;
if (!$122) {
$$32 = 1;
label = 160;
break;
} else {
$$0454729871 = $$3457566;
$$0468727872 = $217;
$$0489726873 = $$2491565;
}
}
if ((label | 0) == 29) {
if ((HEAP32[$0 + 144 >> 2] | 0) != ($1 | 0)) {
$$32 = 8;
STACKTOP = sp;
return $$32 | 0;
}
HEAP32[$0 + 272 >> 2] = HEAP32[(HEAP32[$90 >> 2] | 0) + ($$0468727872 << 4) >> 2];
$$32 = 8;
STACKTOP = sp;
return $$32 | 0;
} else if ((label | 0) == 50) {} else if ((label | 0) == 160) {
STACKTOP = sp;
return $$32 | 0;
}
HEAP32[$105 + ($134 << 2) >> 2] = 0;
$$32 = 1;
STACKTOP = sp;
return $$32 | 0;
} else {
$$0454$lcssa = 0;
$$0489$lcssa = 0;
} while (0);
HEAP32[$0 + 368 >> 2] = $$0454$lcssa;
$228 = HEAP32[$$1453 + 8 >> 2] | 0;
L108 : do if (!$228) {
$$sink = -1;
label = 69;
} else {
$230 = HEAP32[$228 >> 2] | 0;
if (!(HEAP8[$230 + -1 >> 0] | 0)) {
$$sink = -1;
label = 69;
} else if (($$0454$lcssa | 0) > 0) {
$$1469722 = 0;
do {
if ((HEAP32[$105 + ($$1469722 << 2) >> 2] | 0) == ($230 | 0)) {
$$sink = $$1469722;
label = 69;
break L108;
}
$$1469722 = $$1469722 + 2 | 0;
} while (($$1469722 | 0) < ($$0454$lcssa | 0));
}
} while (0);
if ((label | 0) == 69) HEAP32[$0 + 372 >> 2] = $$sink;
L117 : do if (($85 | 0) > 0) {
$242 = $$1453 + 20 | 0;
$$2470716 = 0;
$$3492715 = $$0489$lcssa;
$$4458717 = $$0454$lcssa;
L119 : while (1) {
$243 = HEAP32[$242 >> 2] | 0;
$244 = $243 + ($$2470716 * 12 | 0) | 0;
$245 = HEAP32[$244 >> 2] | 0;
$247 = (HEAP32[$245 >> 2] | 0) + -1 | 0;
L121 : do if (!(HEAP8[$247 >> 0] | 0)) {
$250 = $243 + ($$2470716 * 12 | 0) + 8 | 0;
$251 = HEAP32[$250 >> 2] | 0;
if (!$251) {
$$6495570 = $$3492715;
$$7461571 = $$4458717;
} else {
$254 = HEAP32[$245 + 4 >> 2] | 0;
do if (!$254) {
HEAP8[$247 >> 0] = 1;
$$4493 = $$3492715;
} else if (!(HEAP8[$245 + 9 >> 0] | 0)) {
HEAP8[$247 >> 0] = 2;
$$4493 = $$3492715 + 1 | 0;
break;
} else {
$259 = _addBinding($0, $254, $245, $251, $4) | 0;
if (!$259) {
$$6495570 = $$3492715;
$$7461571 = $$4458717;
break L121;
} else {
$$32 = $259;
break L119;
}
} while (0);
HEAP32[$105 + ($$4458717 << 2) >> 2] = HEAP32[HEAP32[$244 >> 2] >> 2];
HEAP32[$105 + ($$4458717 + 1 << 2) >> 2] = HEAP32[$250 >> 2];
$$6495570 = $$4493;
$$7461571 = $$4458717 + 2 | 0;
}
} else {
$$6495570 = $$3492715;
$$7461571 = $$4458717;
} while (0);
$$2470716 = $$2470716 + 1 | 0;
if (($$2470716 | 0) >= ($85 | 0)) {
$$3492$lcssa = $$6495570;
$$4458$lcssa = $$7461571;
break L117;
} else {
$$3492715 = $$6495570;
$$4458717 = $$7461571;
}
}
STACKTOP = sp;
return $$32 | 0;
} else {
$$3492$lcssa = $$0489$lcssa;
$$4458$lcssa = $$0454$lcssa;
} while (0);
HEAP32[$105 + ($$4458$lcssa << 2) >> 2] = 0;
L134 : do if (!$$3492$lcssa) $$9477$ph = 0; else {
$269 = $0 + 384 | 0;
$270 = HEAP32[$269 >> 2] | 0;
$271 = $0 + 388 | 0;
$272 = HEAP8[$271 >> 0] | 0;
$273 = $272 & 255;
do if (!($$3492$lcssa << 1 >> $273)) {
$$0482 = 1 << $273;
if (!$270) {
$$0482580$ph = $$0482;
$$pre$phi790Z2D = $0 + 380 | 0;
label = 88;
} else {
$$0482579 = $$0482;
$$2485 = $270;
}
} else {
$278 = $272;
do {
$278$looptemp = $278;
$278 = $278 + 1 << 24 >> 24;
} while (($$3492$lcssa >> ($278$looptemp & 255) | 0) != 0);
$$$lcssa714 = ($278 & 255) > 3 ? $278 : 3;
HEAP8[$271 >> 0] = $$$lcssa714;
$283 = $$$lcssa714 & 255;
$286 = $0 + 380 | 0;
$289 = FUNCTION_TABLE_iii[HEAP32[$0 + 16 >> 2] & 63](HEAP32[$286 >> 2] | 0, 12 << $283) | 0;
if (!$289) {
$$32 = 1;
STACKTOP = sp;
return $$32 | 0;
} else {
HEAP32[$286 >> 2] = $289;
$$0482580$ph = 1 << $283;
$$pre$phi790Z2D = $286;
label = 88;
break;
}
} while (0);
if ((label | 0) == 88) {
$$0486713 = $$0482580$ph;
do {
$$0486713 = $$0486713 + -1 | 0;
HEAP32[(HEAP32[$$pre$phi790Z2D >> 2] | 0) + ($$0486713 * 12 | 0) >> 2] = -1;
} while (($$0486713 | 0) != 0);
$$0482579 = $$0482580$ph;
$$2485 = -1;
}
$296 = $$2485 + -1 | 0;
HEAP32[$269 >> 2] = $296;
if (($$4458$lcssa | 0) > 0) {
$298 = $7 + 48 | 0;
$299 = $7 + 40 | 0;
$300 = $7 + 44 | 0;
$301 = $0 + 400 | 0;
$302 = $0 + 412 | 0;
$303 = $0 + 408 | 0;
$304 = $$0482579 + -1 | 0;
$305 = $0 + 380 | 0;
$306 = $0 + 233 | 0;
$307 = $0 + 416 | 0;
$308 = $0 + 456 | 0;
$309 = 0 - $$0482579 | 0;
$310 = $304 >>> 2;
$$3471706 = 0;
$$7496705 = $$3492$lcssa;
L151 : while (1) {
$313 = $105 + ($$3471706 << 2) | 0;
$314 = HEAP32[$313 >> 2] | 0;
$315 = $314 + -1 | 0;
$317 = (HEAP8[$315 >> 0] | 0) == 2;
HEAP8[$315 >> 0] = 0;
if ($317) {
$318 = HEAP32[$298 >> 2] | 0;
$319 = HEAP8[$314 >> 0] | 0;
if (!($319 << 24 >> 24)) $$0$lcssa$i155$i542 = 0; else {
$$034$i153$i540 = $314;
$$05$i152$i539 = 0;
$324 = $319;
while (1) {
$$034$i153$i540 = $$034$i153$i540 + 1 | 0;
$325 = $$05$i152$i539 * 1000003 ^ $324 & 255;
$324 = HEAP8[$$034$i153$i540 >> 0] | 0;
if (!($324 << 24 >> 24)) {
$$0$lcssa$i155$i542 = $325;
break;
} else $$05$i152$i539 = $325;
}
}
$328 = $318 + -1 | 0;
$330 = HEAP32[$299 >> 2] | 0;
$332 = $$0$lcssa$i155$i542 & 0 - $318;
$333 = $328 >>> 2;
$$0146189$i546 = 0;
$$pn608 = $$0$lcssa$i155$i542 & $328;
L159 : while (1) {
$334 = HEAP32[$330 + ($$pn608 << 2) >> 2] | 0;
$335 = HEAP32[$334 >> 2] | 0;
if ($319 << 24 >> 24 == (HEAP8[$335 >> 0] | 0)) {
$$057$i$i548 = $314;
$$08$i$i547 = $335;
$339 = $319;
do {
if (!($339 << 24 >> 24)) break L159;
$$057$i$i548 = $$057$i$i548 + 1 | 0;
$$08$i$i547 = $$08$i$i547 + 1 | 0;
$339 = HEAP8[$$057$i$i548 >> 0] | 0;
} while ($339 << 24 >> 24 == (HEAP8[$$08$i$i547 >> 0] | 0));
}
if (!($$0146189$i546 << 24 >> 24)) $$1147$i551 = ($332 >>> ((HEAPU8[$300 >> 0] | 0) + -1 | 0) & $333 | 1) & 255; else $$1147$i551 = $$0146189$i546;
$353 = $$1147$i551 & 255;
$$0146189$i546 = $$1147$i551;
$$pn608 = $$pn608 - $353 + ($$pn608 >>> 0 < $353 >>> 0 ? $318 : 0) | 0;
}
$360 = HEAP32[(HEAP32[$334 + 4 >> 2] | 0) + 4 >> 2] | 0;
if (!$360) {
$$32 = 27;
label = 160;
break;
}
$362 = $360 + 20 | 0;
if ((HEAP32[$362 >> 2] | 0) > 0) {
$365 = $360 + 16 | 0;
$$0462688 = 0;
$$1487687 = 0;
while (1) {
$368 = HEAP8[(HEAP32[$365 >> 2] | 0) + $$1487687 >> 0] | 0;
$369 = HEAP32[$302 >> 2] | 0;
if (($369 | 0) == (HEAP32[$303 >> 2] | 0)) {
if (!((_poolGrow($301) | 0) << 24 >> 24)) {
$$32 = 1;
label = 160;
break L151;
}
$375 = HEAP32[$302 >> 2] | 0;
} else $375 = $369;
HEAP32[$302 >> 2] = $375 + 1;
HEAP8[$375 >> 0] = $368;
$378 = $$0462688 * 1000003 ^ $368 & 255;
$$1487687 = $$1487687 + 1 | 0;
if (($$1487687 | 0) >= (HEAP32[$362 >> 2] | 0)) {
$$0462$lcssa = $378;
break;
} else $$0462688 = $378;
}
} else $$0462$lcssa = 0;
$$0479 = $314;
while (1) {
$382 = $$0479 + 1 | 0;
if ((HEAP8[$$0479 >> 0] | 0) == 58) {
$$1480 = $382;
$$2464 = $$0462$lcssa;
break;
} else $$0479 = $382;
}
while (1) {
$385 = HEAP8[$$1480 >> 0] | 0;
$386 = HEAP32[$302 >> 2] | 0;
if (($386 | 0) == (HEAP32[$303 >> 2] | 0)) {
if (!((_poolGrow($301) | 0) << 24 >> 24)) {
$$32 = 1;
label = 160;
break L151;
}
$392 = HEAP32[$302 >> 2] | 0;
$393 = HEAP8[$$1480 >> 0] | 0;
} else {
$392 = $386;
$393 = $385;
}
HEAP32[$302 >> 2] = $392 + 1;
HEAP8[$392 >> 0] = $393;
$$2464 = $$2464 * 1000003 ^ $385 & 255;
if (!(HEAP8[$$1480 >> 0] | 0)) break; else $$1480 = $$1480 + 1 | 0;
}
$400 = $$2464 & $304;
$401 = HEAP32[$305 >> 2] | 0;
if ((HEAP32[$401 + ($400 * 12 | 0) >> 2] | 0) == ($296 | 0)) {
$405 = $$2464 & $309;
$$0450697 = 0;
$$2488696 = $400;
while (1) {
if (($$2464 | 0) == (HEAP32[$401 + ($$2488696 * 12 | 0) + 4 >> 2] | 0)) {
$409 = HEAP32[$307 >> 2] | 0;
$411 = HEAP32[$401 + ($$2488696 * 12 | 0) + 8 >> 2] | 0;
$412 = HEAP8[$409 >> 0] | 0;
$415 = $412 << 24 >> 24 == 0;
if ($415 | $412 << 24 >> 24 != (HEAP8[$411 >> 0] | 0)) $$lcssa644 = $415; else {
$$0447692 = $411;
$$0448691 = $409;
do {
$$0448691 = $$0448691 + 1 | 0;
$$0447692 = $$0447692 + 1 | 0;
$418 = HEAP8[$$0448691 >> 0] | 0;
$421 = $418 << 24 >> 24 == 0;
} while (!($421 | $418 << 24 >> 24 != (HEAP8[$$0447692 >> 0] | 0)));
$$lcssa644 = $421;
}
if ($$lcssa644) {
$$32 = 8;
label = 160;
break L151;
}
}
if (!($$0450697 << 24 >> 24)) $$1451 = ($405 >>> ((HEAPU8[$271 >> 0] | 0) + -1 | 0) & $310 | 1) & 255; else $$1451 = $$0450697;
$430 = $$1451 & 255;
$$2488$be = $$2488696 + ($$2488696 >>> 0 < $430 >>> 0 ? $$0482579 : 0) - $430 | 0;
if ((HEAP32[$401 + ($$2488$be * 12 | 0) >> 2] | 0) == ($296 | 0)) {
$$0450697 = $$1451;
$$2488696 = $$2488$be;
} else {
$$2488$lcssa = $$2488$be;
break;
}
}
} else $$2488$lcssa = $400;
if (HEAP8[$306 >> 0] | 0) {
HEAP8[(HEAP32[$302 >> 2] | 0) + -1 >> 0] = HEAP8[$308 >> 0] | 0;
$$2481 = HEAP32[HEAP32[$360 >> 2] >> 2] | 0;
while (1) {
$443 = HEAP32[$302 >> 2] | 0;
if (($443 | 0) == (HEAP32[$303 >> 2] | 0)) {
if (!((_poolGrow($301) | 0) << 24 >> 24)) {
$$32 = 1;
label = 160;
break L151;
}
$450 = HEAP32[$302 >> 2] | 0;
} else $450 = $443;
$448 = HEAP8[$$2481 >> 0] | 0;
HEAP32[$302 >> 2] = $450 + 1;
HEAP8[$450 >> 0] = $448;
if (!(HEAP8[$$2481 >> 0] | 0)) break; else $$2481 = $$2481 + 1 | 0;
}
}
$454 = HEAP32[$307 >> 2] | 0;
HEAP32[$307 >> 2] = HEAP32[$302 >> 2];
HEAP32[$313 >> 2] = $454;
HEAP32[(HEAP32[$305 >> 2] | 0) + ($$2488$lcssa * 12 | 0) >> 2] = $296;
HEAP32[(HEAP32[$305 >> 2] | 0) + ($$2488$lcssa * 12 | 0) + 4 >> 2] = $$2464;
HEAP32[(HEAP32[$305 >> 2] | 0) + ($$2488$lcssa * 12 | 0) + 8 >> 2] = $454;
$462 = $$7496705 + -1 | 0;
if (!$462) {
label = 92;
break;
} else $$10499$ph = $462;
} else $$10499$ph = $$7496705;
$464 = $$3471706 + 2 | 0;
if (($464 | 0) < ($$4458$lcssa | 0)) {
$$3471706 = $464;
$$7496705 = $$10499$ph;
} else {
$$9477$ph = $464;
break L134;
}
}
if ((label | 0) == 92) {
$$9477$ph = $$3471706 + 2 | 0;
break;
} else if ((label | 0) == 160) {
STACKTOP = sp;
return $$32 | 0;
}
} else $$9477$ph = 0;
} while (0);
if (($$9477$ph | 0) < ($$4458$lcssa | 0)) {
$$9477685 = $$9477$ph;
do {
HEAP8[(HEAP32[$105 + ($$9477685 << 2) >> 2] | 0) + -1 >> 0] = 0;
$$9477685 = $$9477685 + 2 | 0;
} while (($$9477685 | 0) < ($$4458$lcssa | 0));
}
$$0500682 = HEAP32[$4 >> 2] | 0;
if ($$0500682 | 0) {
$$0500683 = $$0500682;
do {
HEAP8[(HEAP32[HEAP32[$$0500683 + 12 >> 2] >> 2] | 0) + -1 >> 0] = 0;
$$0500683 = HEAP32[$$0500683 + 4 >> 2] | 0;
} while (($$0500683 | 0) != 0);
}
if (!(HEAP8[$0 + 232 >> 0] | 0)) {
$$32 = 0;
STACKTOP = sp;
return $$32 | 0;
}
$482 = HEAP32[$$1453 + 4 >> 2] | 0;
do if (!$482) {
$492 = HEAP32[$7 + 136 >> 2] | 0;
if (!$492) {
$$32 = 0;
STACKTOP = sp;
return $$32 | 0;
} else {
$$1501 = $492;
$$1506 = HEAP32[$3 >> 2] | 0;
break;
}
} else {
$485 = HEAP32[$482 + 4 >> 2] | 0;
if (!$485) {
$$32 = 27;
STACKTOP = sp;
return $$32 | 0;
}
$$0505 = HEAP32[$3 >> 2] | 0;
while (1) {
$488 = $$0505 + 1 | 0;
if ((HEAP8[$$0505 >> 0] | 0) == 58) {
$$1501 = $485;
$$1506 = $488;
break;
} else $$0505 = $488;
}
} while (0);
if (!(HEAP8[$0 + 233 >> 0] | 0)) $$1467 = 0; else {
$499 = HEAP32[HEAP32[$$1501 >> 2] >> 2] | 0;
if (!$499) $$1467 = 0; else {
$$0466 = 0;
while (1) {
$501 = $$0466 + 1 | 0;
if (!(HEAP8[$499 + $$0466 >> 0] | 0)) {
$$1467 = $501;
break;
} else $$0466 = $501;
}
}
}
HEAP32[$3 + 4 >> 2] = $$1506;
$506 = $$1501 + 20 | 0;
HEAP32[$3 + 16 >> 2] = HEAP32[$506 >> 2];
HEAP32[$3 + 8 >> 2] = HEAP32[HEAP32[$$1501 >> 2] >> 2];
HEAP32[$3 + 20 >> 2] = $$1467;
$$10478 = 0;
while (1) {
$513 = $$10478 + 1 | 0;
if (!(HEAP8[$$1506 + $$10478 >> 0] | 0)) break; else $$10478 = $513;
}
$517 = HEAP32[$506 >> 2] | 0;
$519 = $513 + $$1467 + $517 | 0;
$520 = $$1501 + 24 | 0;
if (($519 | 0) > (HEAP32[$520 >> 2] | 0)) {
$525 = $519 + 24 | 0;
$526 = FUNCTION_TABLE_ii[HEAP32[$0 + 12 >> 2] & 63]($525) | 0;
if (!$526) {
$$32 = 1;
STACKTOP = sp;
return $$32 | 0;
}
HEAP32[$520 >> 2] = $525;
$528 = $$1501 + 16 | 0;
_memcpy($526 | 0, HEAP32[$528 >> 2] | 0, HEAP32[$506 >> 2] | 0) | 0;
$$0680 = HEAP32[$0 + 348 >> 2] | 0;
if ($$0680 | 0) {
$$0681 = $$0680;
do {
$533 = $$0681 + 12 | 0;
if ((HEAP32[$533 >> 2] | 0) == (HEAP32[$528 >> 2] | 0)) HEAP32[$533 >> 2] = $526;
$$0681 = HEAP32[$$0681 >> 2] | 0;
} while (($$0681 | 0) != 0);
}
FUNCTION_TABLE_vi[HEAP32[$0 + 20 >> 2] & 255](HEAP32[$528 >> 2] | 0);
HEAP32[$528 >> 2] = $526;
$$pre$phiZ2D = $528;
$542 = $526;
$543 = HEAP32[$506 >> 2] | 0;
} else {
$$phi$trans$insert = $$1501 + 16 | 0;
$$pre$phiZ2D = $$phi$trans$insert;
$542 = HEAP32[$$phi$trans$insert >> 2] | 0;
$543 = $517;
}
$541 = $542 + $543 | 0;
_memcpy($541 | 0, $$1506 | 0, $513 | 0) | 0;
if ($$1467 | 0) {
$545 = $541 + $$10478 | 0;
HEAP8[$545 >> 0] = HEAP8[$0 + 456 >> 0] | 0;
_memcpy($545 + 1 | 0, HEAP32[HEAP32[$$1501 >> 2] >> 2] | 0, $$1467 | 0) | 0;
}
HEAP32[$3 >> 2] = HEAP32[$$pre$phiZ2D >> 2];
$$32 = 0;
STACKTOP = sp;
return $$32 | 0;
}
function __GLOBAL__sub_I_SiGML_cpp() {
var $$idx$i = 0;
HEAPF32[17841] = Math_fround(1.57079637);
HEAPF32[17842] = Math_fround(3.14159274);
HEAPF32[17843] = Math_fround(1.41421354);
HEAPF32[17844] = Math_fround(.707106769);
HEAPF32[17845] = Math_fround(0.0);
HEAPF32[17846] = Math_fround(0.0);
HEAPF32[17847] = Math_fround(0.0);
HEAPF32[16663] = Math_fround(-.707106769);
HEAPF32[16664] = Math_fround(0.0);
HEAPF32[16665] = Math_fround(0.0);
HEAPF32[16666] = Math_fround(.707106769);
$$idx$i = 0;
do {
HEAPF32[66668 + ($$idx$i * 160 | 0) >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 4 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 8 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 12 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 16 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 20 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 24 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 28 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 32 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 36 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 40 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 44 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 48 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 52 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 56 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 60 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 64 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 68 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 72 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 76 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 80 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 84 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 88 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 92 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 96 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 100 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 104 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 108 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 112 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 116 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 120 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 124 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 128 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 132 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 136 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 140 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 144 >> 2] = Math_fround(-100.0);
HEAPF32[66668 + ($$idx$i * 160 | 0) + 148 >> 2] = Math_fround(-100.0);
HEAP16[66668 + ($$idx$i * 160 | 0) + 152 >> 1] = 0;
HEAP32[66668 + ($$idx$i * 160 | 0) + 156 >> 2] = 0;
$$idx$i = $$idx$i + 1 | 0;
} while (($$idx$i | 0) != 13);
HEAPF32[17202] = Math_fround(-100.0);
HEAPF32[17203] = Math_fround(-100.0);
HEAPF32[17204] = Math_fround(-100.0);
HEAPF32[17205] = Math_fround(-100.0);
HEAPF32[17206] = Math_fround(-100.0);
HEAPF32[17207] = Math_fround(-100.0);
HEAPF32[17208] = Math_fround(-100.0);
HEAPF32[17209] = Math_fround(-100.0);
HEAPF32[17210] = Math_fround(-100.0);
HEAPF32[17211] = Math_fround(-100.0);
HEAPF32[17212] = Math_fround(-100.0);
HEAPF32[17213] = Math_fround(-100.0);
HEAPF32[17214] = Math_fround(-100.0);
HEAPF32[17215] = Math_fround(-100.0);
HEAPF32[17216] = Math_fround(-100.0);
HEAPF32[17217] = Math_fround(-100.0);
HEAPF32[17218] = Math_fround(-100.0);
HEAPF32[17219] = Math_fround(-100.0);
HEAPF32[17220] = Math_fround(-100.0);
HEAPF32[17221] = Math_fround(-100.0);
HEAPF32[17222] = Math_fround(-100.0);
HEAPF32[17223] = Math_fround(-100.0);
HEAPF32[17224] = Math_fround(-100.0);
HEAPF32[17225] = Math_fround(-100.0);
HEAPF32[17226] = Math_fround(-100.0);
HEAPF32[17227] = Math_fround(-100.0);
HEAPF32[17228] = Math_fround(-100.0);
HEAPF32[17229] = Math_fround(-100.0);
HEAPF32[17230] = Math_fround(-100.0);
HEAPF32[17231] = Math_fround(-100.0);
HEAPF32[17232] = Math_fround(-100.0);
HEAPF32[17233] = Math_fround(-100.0);
HEAPF32[17234] = Math_fround(-100.0);
HEAPF32[17235] = Math_fround(-100.0);
HEAPF32[17236] = Math_fround(-100.0);
HEAPF32[17237] = Math_fround(-100.0);
HEAPF32[17238] = Math_fround(-100.0);
HEAPF32[17239] = Math_fround(-100.0);
HEAPF32[17240] = Math_fround(-100.0);
HEAPF32[17241] = Math_fround(-100.0);
HEAPF32[17242] = Math_fround(-100.0);
HEAPF32[17243] = Math_fround(-100.0);
HEAPF32[17244] = Math_fround(-100.0);
HEAPF32[17245] = Math_fround(-100.0);
HEAPF32[17246] = Math_fround(-100.0);
HEAPF32[17247] = Math_fround(-100.0);
HEAPF32[17248] = Math_fround(-100.0);
HEAPF32[17249] = Math_fround(-100.0);
HEAPF32[17250] = Math_fround(-100.0);
HEAPF32[17251] = Math_fround(-100.0);
HEAPF32[17252] = Math_fround(-100.0);
HEAPF32[17253] = Math_fround(-100.0);
HEAPF32[17254] = Math_fround(-100.0);
HEAPF32[17255] = Math_fround(-100.0);
HEAPF32[17256] = Math_fround(-100.0);
HEAPF32[17257] = Math_fround(-100.0);
HEAPF32[17258] = Math_fround(-100.0);
HEAPF32[17259] = Math_fround(-100.0);
HEAPF32[17260] = Math_fround(-100.0);
HEAPF32[17261] = Math_fround(-100.0);
HEAPF32[17262] = Math_fround(-100.0);
HEAPF32[17263] = Math_fround(-100.0);
HEAPF32[17264] = Math_fround(-100.0);
HEAPF32[17265] = Math_fround(-100.0);
HEAPF32[17266] = Math_fround(-100.0);
HEAPF32[17267] = Math_fround(-100.0);
HEAPF32[17268] = Math_fround(-100.0);
HEAPF32[17269] = Math_fround(-100.0);
HEAPF32[17270] = Math_fround(-100.0);
HEAPF32[17271] = Math_fround(-100.0);
HEAPF32[17272] = Math_fround(-100.0);
HEAPF32[17273] = Math_fround(-100.0);
HEAPF32[17274] = Math_fround(-100.0);
HEAPF32[17275] = Math_fround(-100.0);
HEAPF32[17276] = Math_fround(-100.0);
HEAPF32[17277] = Math_fround(-100.0);
HEAPF32[17278] = Math_fround(-100.0);
HEAPF32[17279] = Math_fround(-100.0);
HEAPF32[17280] = Math_fround(-100.0);
HEAPF32[17281] = Math_fround(-100.0);
HEAPF32[17282] = Math_fround(-100.0);
HEAPF32[17283] = Math_fround(-100.0);
HEAPF32[17284] = Math_fround(-100.0);
HEAPF32[17285] = Math_fround(-100.0);
HEAPF32[17286] = Math_fround(-100.0);
HEAPF32[17287] = Math_fround(-100.0);
HEAPF32[17288] = Math_fround(-100.0);
HEAPF32[17289] = Math_fround(-100.0);
HEAPF32[17290] = Math_fround(-100.0);
HEAPF32[17291] = Math_fround(-100.0);
HEAPF32[17292] = Math_fround(-100.0);
HEAPF32[17293] = Math_fround(-100.0);
HEAPF32[17294] = Math_fround(-100.0);
HEAPF32[17295] = Math_fround(-100.0);
HEAPF32[17296] = Math_fround(-100.0);
HEAPF32[17297] = Math_fround(-100.0);
HEAPF32[17298] = Math_fround(-100.0);
HEAPF32[17299] = Math_fround(-100.0);
HEAPF32[17300] = Math_fround(-100.0);
HEAPF32[17301] = Math_fround(-100.0);
HEAPF32[17302] = Math_fround(-100.0);
HEAPF32[17303] = Math_fround(-100.0);
HEAPF32[17304] = Math_fround(-100.0);
HEAPF32[17305] = Math_fround(-100.0);
HEAPF32[17306] = Math_fround(-100.0);
HEAPF32[17307] = Math_fround(-100.0);
HEAPF32[17308] = Math_fround(-100.0);
HEAPF32[17309] = Math_fround(-100.0);
HEAPF32[17310] = Math_fround(-100.0);
HEAPF32[17311] = Math_fround(-100.0);
HEAPF32[17312] = Math_fround(-100.0);
HEAPF32[17313] = Math_fround(-100.0);
HEAPF32[17314] = Math_fround(-100.0);
HEAPF32[17315] = Math_fround(-100.0);
HEAPF32[17316] = Math_fround(-100.0);
HEAPF32[17317] = Math_fround(-100.0);
HEAPF32[17318] = Math_fround(-100.0);
HEAPF32[17319] = Math_fround(-100.0);
HEAPF32[17320] = Math_fround(-100.0);
HEAPF32[17321] = Math_fround(-100.0);
HEAPF32[17322] = Math_fround(-100.0);
HEAPF32[17323] = Math_fround(-100.0);
HEAPF32[17324] = Math_fround(-100.0);
HEAPF32[17325] = Math_fround(-100.0);
HEAPF32[17326] = Math_fround(-100.0);
HEAPF32[17327] = Math_fround(-100.0);
HEAPF32[17328] = Math_fround(-100.0);
HEAPF32[17329] = Math_fround(-100.0);
HEAPF32[17330] = Math_fround(-100.0);
HEAPF32[17331] = Math_fround(-100.0);
HEAPF32[17332] = Math_fround(-100.0);
HEAPF32[17333] = Math_fround(-100.0);
HEAPF32[17334] = Math_fround(-100.0);
HEAPF32[17335] = Math_fround(-100.0);
HEAPF32[17336] = Math_fround(-100.0);
HEAPF32[17337] = Math_fround(-100.0);
HEAPF32[17338] = Math_fround(-100.0);
HEAPF32[17339] = Math_fround(-100.0);
HEAPF32[17340] = Math_fround(-100.0);
HEAPF32[17341] = Math_fround(-100.0);
HEAPF32[17342] = Math_fround(-100.0);
HEAPF32[17343] = Math_fround(-100.0);
HEAPF32[17344] = Math_fround(-100.0);
HEAPF32[17345] = Math_fround(-100.0);
HEAPF32[17346] = Math_fround(-100.0);
HEAPF32[17347] = Math_fround(-100.0);
HEAPF32[17348] = Math_fround(-100.0);
HEAPF32[17349] = Math_fround(-100.0);
HEAPF32[17350] = Math_fround(-100.0);
HEAPF32[17351] = Math_fround(-100.0);
HEAPF32[17352] = Math_fround(-100.0);
HEAPF32[17353] = Math_fround(-100.0);
HEAPF32[17354] = Math_fround(-100.0);
HEAPF32[17355] = Math_fround(-100.0);
HEAPF32[17356] = Math_fround(-100.0);
HEAPF32[17357] = Math_fround(-100.0);
HEAPF32[17358] = Math_fround(-100.0);
HEAPF32[17359] = Math_fround(-100.0);
HEAPF32[17360] = Math_fround(-100.0);
HEAPF32[17361] = Math_fround(-100.0);
HEAPF32[17362] = Math_fround(-100.0);
HEAPF32[17363] = Math_fround(-100.0);
HEAPF32[17364] = Math_fround(-100.0);
HEAPF32[17365] = Math_fround(-100.0);
HEAPF32[17366] = Math_fround(-100.0);
HEAPF32[17367] = Math_fround(-100.0);
HEAPF32[17368] = Math_fround(-100.0);
HEAPF32[17369] = Math_fround(-100.0);
HEAPF32[17370] = Math_fround(-100.0);
HEAPF32[17371] = Math_fround(-100.0);
HEAPF32[17372] = Math_fround(-100.0);
HEAPF32[17373] = Math_fround(-100.0);
HEAPF32[17374] = Math_fround(-100.0);
HEAPF32[17375] = Math_fround(-100.0);
HEAPF32[17376] = Math_fround(-100.0);
HEAPF32[17377] = Math_fround(-100.0);
HEAPF32[17378] = Math_fround(-100.0);
HEAPF32[17379] = Math_fround(-100.0);
HEAPF32[17380] = Math_fround(-100.0);
HEAPF32[17381] = Math_fround(-100.0);
HEAPF32[17382] = Math_fround(-100.0);
HEAPF32[17383] = Math_fround(-100.0);
HEAPF32[17384] = Math_fround(-100.0);
HEAPF32[17385] = Math_fround(-100.0);
HEAPF32[17386] = Math_fround(-100.0);
HEAPF32[17387] = Math_fround(-100.0);
HEAPF32[17388] = Math_fround(-100.0);
HEAPF32[17389] = Math_fround(-100.0);
HEAPF32[17390] = Math_fround(-100.0);
HEAPF32[17391] = Math_fround(-100.0);
HEAPF32[17392] = Math_fround(-100.0);
HEAPF32[17393] = Math_fround(-100.0);
HEAPF32[17394] = Math_fround(-100.0);
HEAPF32[17395] = Math_fround(-100.0);
HEAPF32[17396] = Math_fround(-100.0);
HEAPF32[17397] = Math_fround(-100.0);
HEAPF32[17398] = Math_fround(-100.0);
HEAPF32[17399] = Math_fround(-100.0);
HEAPF32[17400] = Math_fround(-100.0);
HEAPF32[17401] = Math_fround(-100.0);
HEAPF32[17402] = Math_fround(-100.0);
HEAPF32[17403] = Math_fround(-100.0);
HEAPF32[17404] = Math_fround(-100.0);
HEAPF32[17405] = Math_fround(-100.0);
HEAPF32[17406] = Math_fround(-100.0);
HEAPF32[17407] = Math_fround(-100.0);
HEAPF32[17408] = Math_fround(-100.0);
HEAPF32[17409] = Math_fround(-100.0);
HEAPF32[17410] = Math_fround(-100.0);
HEAPF32[17411] = Math_fround(-100.0);
HEAPF32[17412] = Math_fround(-100.0);
HEAPF32[17413] = Math_fround(-100.0);
HEAPF32[17414] = Math_fround(-100.0);
HEAPF32[17415] = Math_fround(-100.0);
HEAPF32[17416] = Math_fround(-100.0);
HEAPF32[17417] = Math_fround(-100.0);
HEAPF32[17418] = Math_fround(-100.0);
HEAPF32[17419] = Math_fround(-100.0);
HEAPF32[17420] = Math_fround(-100.0);
HEAPF32[17421] = Math_fround(-100.0);
HEAPF32[17422] = Math_fround(-100.0);
HEAPF32[17423] = Math_fround(-100.0);
HEAPF32[17424] = Math_fround(-100.0);
HEAPF32[17425] = Math_fround(-100.0);
HEAPF32[17426] = Math_fround(-100.0);
HEAPF32[17427] = Math_fround(-100.0);
HEAPF32[17428] = Math_fround(-100.0);
HEAPF32[17429] = Math_fround(-100.0);
HEAPF32[17430] = Math_fround(-100.0);
HEAPF32[17431] = Math_fround(-100.0);
HEAPF32[17432] = Math_fround(-100.0);
HEAPF32[17433] = Math_fround(-100.0);
HEAPF32[17434] = Math_fround(-100.0);
HEAPF32[17435] = Math_fround(-100.0);
HEAPF32[17436] = Math_fround(-100.0);
HEAPF32[17437] = Math_fround(-100.0);
HEAPF32[17438] = Math_fround(-100.0);
HEAPF32[17439] = Math_fround(-100.0);
HEAPF32[17440] = Math_fround(-100.0);
HEAPF32[17441] = Math_fround(-100.0);
HEAPF32[17442] = Math_fround(-100.0);
HEAPF32[17443] = Math_fround(-100.0);
HEAPF32[17444] = Math_fround(-100.0);
HEAPF32[17445] = Math_fround(-100.0);
HEAPF32[17446] = Math_fround(-100.0);
HEAPF32[17447] = Math_fround(-100.0);
HEAPF32[17448] = Math_fround(-100.0);
HEAPF32[17449] = Math_fround(-100.0);
HEAPF32[17450] = Math_fround(-100.0);
HEAPF32[17451] = Math_fround(-100.0);
HEAPF32[17452] = Math_fround(-100.0);
HEAPF32[17453] = Math_fround(-100.0);
HEAPF32[17454] = Math_fround(-100.0);
HEAPF32[17455] = Math_fround(-100.0);
HEAPF32[17456] = Math_fround(-100.0);
HEAPF32[17457] = Math_fround(-100.0);
HEAPF32[17471] = Math_fround(-100.0);
HEAPF32[17472] = Math_fround(-100.0);
HEAPF32[17473] = Math_fround(-100.0);
HEAPF32[17474] = Math_fround(-100.0);
HEAPF32[17475] = Math_fround(-100.0);
HEAPF32[17476] = Math_fround(-100.0);
HEAPF32[17477] = Math_fround(-100.0);
HEAPF32[17478] = Math_fround(-100.0);
HEAPF32[17479] = Math_fround(-100.0);
HEAPF32[17480] = Math_fround(-100.0);
HEAPF32[17481] = Math_fround(-100.0);
HEAPF32[17482] = Math_fround(-100.0);
HEAPF32[17483] = Math_fround(-100.0);
HEAPF32[17484] = Math_fround(-100.0);
HEAPF32[17485] = Math_fround(-100.0);
HEAPF32[17486] = Math_fround(-100.0);
HEAPF32[17487] = Math_fround(-100.0);
HEAPF32[17488] = Math_fround(-100.0);
HEAPF32[17489] = Math_fround(-100.0);
HEAPF32[17490] = Math_fround(-100.0);
HEAPF32[17491] = Math_fround(-100.0);
HEAPF32[17492] = Math_fround(-100.0);
HEAPF32[17493] = Math_fround(-100.0);
HEAPF32[17494] = Math_fround(-100.0);
HEAPF32[17495] = Math_fround(-100.0);
HEAPF32[17496] = Math_fround(-100.0);
HEAPF32[17497] = Math_fround(-100.0);
HEAPF32[17498] = Math_fround(-100.0);
HEAPF32[17499] = Math_fround(-100.0);
HEAPF32[17500] = Math_fround(-100.0);
HEAPF32[17501] = Math_fround(-100.0);
HEAPF32[17502] = Math_fround(-100.0);
HEAPF32[17503] = Math_fround(-100.0);
HEAPF32[17504] = Math_fround(-100.0);
HEAPF32[17505] = Math_fround(-100.0);
HEAPF32[17506] = Math_fround(-100.0);
HEAPF32[17507] = Math_fround(-100.0);
HEAPF32[17508] = Math_fround(-100.0);
HEAPF32[17509] = Math_fround(-100.0);
HEAPF32[17510] = Math_fround(-100.0);
HEAPF32[17511] = Math_fround(-100.0);
HEAPF32[17512] = Math_fround(-100.0);
HEAPF32[17513] = Math_fround(-100.0);
HEAPF32[17514] = Math_fround(-100.0);
HEAPF32[17515] = Math_fround(-100.0);
HEAPF32[17516] = Math_fround(-100.0);
HEAPF32[17517] = Math_fround(-100.0);
HEAPF32[17518] = Math_fround(-100.0);
HEAPF32[17519] = Math_fround(-100.0);
HEAPF32[17520] = Math_fround(-100.0);
HEAPF32[17521] = Math_fround(-100.0);
HEAPF32[17522] = Math_fround(-100.0);
HEAPF32[17523] = Math_fround(-100.0);
HEAPF32[17524] = Math_fround(-100.0);
HEAPF32[17525] = Math_fround(-100.0);
HEAPF32[17526] = Math_fround(-100.0);
HEAPF32[17527] = Math_fround(-100.0);
HEAPF32[17528] = Math_fround(-100.0);
HEAPF32[17529] = Math_fround(-100.0);
HEAPF32[17530] = Math_fround(-100.0);
HEAPF32[17531] = Math_fround(-100.0);
HEAPF32[17532] = Math_fround(-100.0);
HEAPF32[17533] = Math_fround(-100.0);
HEAPF32[17534] = Math_fround(-100.0);
HEAPF32[17535] = Math_fround(-100.0);
HEAPF32[17536] = Math_fround(-100.0);
HEAPF32[17537] = Math_fround(-100.0);
HEAPF32[17538] = Math_fround(-100.0);
HEAPF32[17539] = Math_fround(-100.0);
HEAPF32[17540] = Math_fround(-100.0);
HEAPF32[17541] = Math_fround(-100.0);
HEAPF32[17542] = Math_fround(-100.0);
HEAPF32[17543] = Math_fround(-100.0);
HEAPF32[17544] = Math_fround(-100.0);
HEAPF32[17545] = Math_fround(-100.0);
HEAPF32[17546] = Math_fround(-100.0);
HEAPF32[17547] = Math_fround(-100.0);
HEAPF32[17548] = Math_fround(-100.0);
HEAPF32[17549] = Math_fround(-100.0);
HEAPF32[17550] = Math_fround(-100.0);
HEAPF32[17551] = Math_fround(-100.0);
HEAPF32[17552] = Math_fround(-100.0);
HEAPF32[17553] = Math_fround(-100.0);
HEAPF32[17554] = Math_fround(-100.0);
HEAPF32[17555] = Math_fround(-100.0);
HEAPF32[17556] = Math_fround(-100.0);
HEAPF32[17557] = Math_fround(-100.0);
HEAPF32[17558] = Math_fround(-100.0);
HEAPF32[17559] = Math_fround(-100.0);
HEAPF32[17560] = Math_fround(-100.0);
HEAPF32[17561] = Math_fround(-100.0);
HEAPF32[17562] = Math_fround(-100.0);
HEAPF32[17563] = Math_fround(-100.0);
HEAPF32[17564] = Math_fround(-100.0);
HEAPF32[17565] = Math_fround(-100.0);
HEAPF32[17566] = Math_fround(-100.0);
HEAPF32[17567] = Math_fround(-100.0);
HEAPF32[17568] = Math_fround(-100.0);
HEAPF32[17569] = Math_fround(-100.0);
HEAPF32[17570] = Math_fround(-100.0);
HEAPF32[17571] = Math_fround(-100.0);
HEAPF32[17572] = Math_fround(-100.0);
HEAPF32[17573] = Math_fround(-100.0);
HEAPF32[17574] = Math_fround(-100.0);
HEAPF32[17575] = Math_fround(-100.0);
HEAPF32[17576] = Math_fround(-100.0);
HEAPF32[17577] = Math_fround(-100.0);
HEAPF32[17578] = Math_fround(-100.0);
HEAPF32[17579] = Math_fround(-100.0);
HEAPF32[17580] = Math_fround(-100.0);
HEAPF32[17581] = Math_fround(-100.0);
HEAPF32[17582] = Math_fround(-100.0);
HEAPF32[17583] = Math_fround(-100.0);
HEAPF32[17584] = Math_fround(-100.0);
HEAPF32[17585] = Math_fround(-100.0);
HEAPF32[17586] = Math_fround(-100.0);
HEAPF32[17587] = Math_fround(-100.0);
HEAPF32[17588] = Math_fround(-100.0);
HEAPF32[17589] = Math_fround(-100.0);
HEAPF32[17590] = Math_fround(-100.0);
HEAPF32[17591] = Math_fround(-100.0);
HEAPF32[17592] = Math_fround(-100.0);
HEAPF32[17593] = Math_fround(-100.0);
HEAPF32[17594] = Math_fround(-100.0);
HEAPF32[17595] = Math_fround(-100.0);
HEAPF32[17596] = Math_fround(-100.0);
HEAPF32[17597] = Math_fround(-100.0);
HEAPF32[17598] = Math_fround(-100.0);
HEAPF32[17599] = Math_fround(-100.0);
HEAPF32[17600] = Math_fround(-100.0);
HEAPF32[17601] = Math_fround(-100.0);
HEAPF32[17602] = Math_fround(-100.0);
HEAPF32[17603] = Math_fround(-100.0);
HEAPF32[17604] = Math_fround(-100.0);
HEAPF32[17605] = Math_fround(-100.0);
HEAPF32[17606] = Math_fround(-100.0);
HEAPF32[17607] = Math_fround(-100.0);
HEAPF32[17608] = Math_fround(-100.0);
HEAPF32[17609] = Math_fround(-100.0);
HEAPF32[17610] = Math_fround(-100.0);
HEAPF32[17611] = Math_fround(-100.0);
HEAPF32[17612] = Math_fround(-100.0);
HEAPF32[17613] = Math_fround(-100.0);
HEAPF32[17614] = Math_fround(-100.0);
HEAPF32[17615] = Math_fround(-100.0);
HEAPF32[17616] = Math_fround(-100.0);
HEAPF32[17617] = Math_fround(-100.0);
HEAPF32[17618] = Math_fround(-100.0);
HEAPF32[17619] = Math_fround(-100.0);
HEAPF32[17620] = Math_fround(-100.0);
HEAPF32[17621] = Math_fround(-100.0);
HEAPF32[17622] = Math_fround(-100.0);
HEAPF32[17623] = Math_fround(-100.0);
HEAPF32[17624] = Math_fround(-100.0);
HEAPF32[17625] = Math_fround(-100.0);
HEAPF32[17626] = Math_fround(-100.0);
HEAPF32[17627] = Math_fround(-100.0);
HEAPF32[17628] = Math_fround(-100.0);
HEAPF32[17629] = Math_fround(-100.0);
HEAPF32[17630] = Math_fround(-100.0);
HEAPF32[17631] = Math_fround(-100.0);
HEAPF32[17632] = Math_fround(-100.0);
HEAPF32[17633] = Math_fround(-100.0);
HEAPF32[17634] = Math_fround(-100.0);
HEAPF32[17635] = Math_fround(-100.0);
HEAPF32[17636] = Math_fround(-100.0);
HEAPF32[17637] = Math_fround(-100.0);
HEAPF32[17638] = Math_fround(-100.0);
HEAPF32[17639] = Math_fround(-100.0);
HEAPF32[17640] = Math_fround(-100.0);
HEAPF32[17641] = Math_fround(-100.0);
HEAPF32[17642] = Math_fround(-100.0);
HEAPF32[17643] = Math_fround(-100.0);
HEAPF32[17644] = Math_fround(-100.0);
HEAPF32[17645] = Math_fround(-100.0);
HEAPF32[17646] = Math_fround(-100.0);
HEAPF32[17647] = Math_fround(-100.0);
HEAPF32[17648] = Math_fround(-100.0);
HEAPF32[17649] = Math_fround(-100.0);
HEAPF32[17650] = Math_fround(-100.0);
HEAPF32[17651] = Math_fround(-100.0);
HEAPF32[17652] = Math_fround(-100.0);
HEAPF32[17653] = Math_fround(-100.0);
HEAPF32[17654] = Math_fround(-100.0);
HEAPF32[17655] = Math_fround(-100.0);
HEAPF32[17656] = Math_fround(-100.0);
HEAPF32[17657] = Math_fround(-100.0);
HEAPF32[17658] = Math_fround(-100.0);
HEAPF32[17659] = Math_fround(-100.0);
HEAPF32[17660] = Math_fround(-100.0);
HEAPF32[17661] = Math_fround(-100.0);
HEAPF32[17662] = Math_fround(-100.0);
HEAPF32[17663] = Math_fround(-100.0);
HEAPF32[17664] = Math_fround(-100.0);
HEAPF32[17665] = Math_fround(-100.0);
HEAPF32[17666] = Math_fround(-100.0);
HEAPF32[17667] = Math_fround(-100.0);
HEAPF32[17668] = Math_fround(-100.0);
HEAPF32[17669] = Math_fround(-100.0);
HEAPF32[17670] = Math_fround(-100.0);
HEAPF32[17671] = Math_fround(-100.0);
HEAPF32[17672] = Math_fround(-100.0);
HEAPF32[17673] = Math_fround(-100.0);
HEAPF32[17674] = Math_fround(-100.0);
HEAPF32[17675] = Math_fround(-100.0);
HEAPF32[17676] = Math_fround(-100.0);
HEAPF32[17677] = Math_fround(-100.0);
HEAPF32[17678] = Math_fround(-100.0);
HEAPF32[17679] = Math_fround(-100.0);
HEAPF32[17680] = Math_fround(-100.0);
HEAPF32[17681] = Math_fround(-100.0);
HEAPF32[17682] = Math_fround(-100.0);
HEAPF32[17683] = Math_fround(-100.0);
HEAPF32[17684] = Math_fround(-100.0);
HEAPF32[17685] = Math_fround(-100.0);
HEAPF32[17686] = Math_fround(-100.0);
HEAPF32[17687] = Math_fround(-100.0);
HEAPF32[17688] = Math_fround(-100.0);
HEAPF32[17689] = Math_fround(-100.0);
HEAPF32[17690] = Math_fround(-100.0);
HEAPF32[17691] = Math_fround(-100.0);
HEAPF32[17692] = Math_fround(-100.0);
HEAPF32[17693] = Math_fround(-100.0);
HEAPF32[17694] = Math_fround(-100.0);
HEAPF32[17695] = Math_fround(-100.0);
HEAPF32[17696] = Math_fround(-100.0);
HEAPF32[17697] = Math_fround(-100.0);
HEAPF32[17698] = Math_fround(-100.0);
HEAPF32[17699] = Math_fround(-100.0);
HEAPF32[17700] = Math_fround(-100.0);
HEAPF32[17701] = Math_fround(-100.0);
HEAPF32[17702] = Math_fround(-100.0);
HEAPF32[17703] = Math_fround(-100.0);
HEAPF32[17704] = Math_fround(-100.0);
HEAPF32[17705] = Math_fround(-100.0);
HEAPF32[17706] = Math_fround(-100.0);
HEAPF32[17707] = Math_fround(-100.0);
HEAPF32[17708] = Math_fround(-100.0);
HEAPF32[17709] = Math_fround(-100.0);
HEAPF32[17710] = Math_fround(-100.0);
HEAPF32[17711] = Math_fround(-100.0);
HEAPF32[17712] = Math_fround(-100.0);
HEAPF32[17713] = Math_fround(-100.0);
HEAPF32[17714] = Math_fround(-100.0);
HEAPF32[17715] = Math_fround(-100.0);
HEAPF32[17716] = Math_fround(-100.0);
HEAPF32[17717] = Math_fround(-100.0);
HEAPF32[17718] = Math_fround(-100.0);
HEAPF32[17719] = Math_fround(-100.0);
HEAPF32[17720] = Math_fround(-100.0);
HEAPF32[17721] = Math_fround(-100.0);
HEAPF32[17722] = Math_fround(-100.0);
HEAPF32[17723] = Math_fround(-100.0);
HEAPF32[17724] = Math_fround(-100.0);
HEAPF32[17725] = Math_fround(-100.0);
HEAPF32[17726] = Math_fround(-100.0);
HEAPF32[17727] = Math_fround(-100.0);
HEAPF32[17728] = Math_fround(-100.0);
HEAPF32[17729] = Math_fround(-100.0);
HEAPF32[17730] = Math_fround(-100.0);
HEAPF32[17731] = Math_fround(-100.0);
HEAPF32[17732] = Math_fround(-100.0);
HEAPF32[17733] = Math_fround(-100.0);
HEAPF32[17734] = Math_fround(-100.0);
HEAPF32[17735] = Math_fround(-100.0);
HEAPF32[17736] = Math_fround(-100.0);
HEAPF32[17737] = Math_fround(-100.0);
HEAPF32[17738] = Math_fround(-100.0);
HEAPF32[17739] = Math_fround(-100.0);
HEAPF32[17740] = Math_fround(-100.0);
HEAPF32[17741] = Math_fround(-100.0);
HEAPF32[17742] = Math_fround(-100.0);
HEAPF32[17743] = Math_fround(-100.0);
HEAPF32[17744] = Math_fround(-100.0);
HEAPF32[17745] = Math_fround(-100.0);
HEAPF32[17746] = Math_fround(-100.0);
HEAPF32[17747] = Math_fround(-100.0);
HEAPF32[17748] = Math_fround(-100.0);
HEAPF32[17749] = Math_fround(-100.0);
HEAPF32[17750] = Math_fround(-100.0);
return;
}
function __Z20GetDefaultAvatarInfoP7XMLCell($0) {
$0 = $0 | 0;
var $$0294 = 0, $$sroa$0$0296 = 0, $$sroa$0$1 = 0, $$sroa$0271$0297 = 0, $$sroa$0271$1 = 0, $$sroa$9$0295 = 0, $$sroa$9277$0298 = 0, $100 = 0, $101 = f0, $102 = f0, $103 = f0, $104 = 0, $105 = 0, $106 = f0, $107 = f0, $11 = 0, $112 = f0, $113 = f0, $114 = f0, $115 = 0, $116 = 0, $118 = f0, $119 = f0, $12 = 0, $120 = f0, $121 = f0, $122 = f0, $123 = f0, $124 = f0, $125 = f0, $126 = f0, $127 = f0, $128 = f0, $129 = f0, $131 = f0, $145 = f0, $153 = f0, $154 = f0, $156 = f0, $158 = f0, $160 = f0, $161 = f0, $162 = f0, $163 = f0, $164 = f0, $165 = f0, $166 = f0, $167 = f0, $168 = f0, $169 = f0, $170 = f0, $171 = f0, $174 = f0, $176 = f0, $177 = 0, $178 = f0, $179 = f0, $180 = f0, $181 = f0, $182 = f0, $183 = f0, $184 = 0, $187 = 0, $194 = 0, $196 = 0, $197 = 0, $2 = 0, $20 = 0, $200 = 0, $203 = 0, $206 = 0, $209 = 0, $212 = 0, $215 = 0, $218 = 0, $221 = 0, $224 = 0, $227 = 0, $23 = 0, $235 = 0, $239 = 0, $24 = 0, $240 = 0, $242 = 0, $244 = f0, $246 = f0, $248 = f0, $250 = f0, $252 = f0, $254 = f0, $259 = 0, $261 = f0, $262 = f0, $263 = f0, $266 = 0, $267 = f0, $268 = f0, $269 = f0, $27 = 0, $270 = f0, $271 = f0, $272 = f0, $273 = f0, $274 = f0, $275 = f0, $276 = f0, $279 = 0, $280 = f0, $281 = f0, $282 = f0, $29 = 0, $33 = f0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $49 = 0, $52 = 0, $53 = 0, $56 = 0, $58 = 0, $6 = 0, $61 = f0, $63 = f0, $66 = f0, $69 = f0, $70 = f0, $72 = f0, $74 = f0, $76 = f0, $81 = f0, $83 = f0, $87 = f0, $88 = 0, $89 = f0, $9 = 0, $90 = f0, $91 = f0, $92 = f0, $93 = f0, $94 = f0, $95 = f0, $96 = f0, $97 = f0, $98 = f0, $99 = 0, $phitmp = 0, $phitmp243 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer5 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
if (!$0) {
STACKTOP = sp;
return;
}
$2 = __ZN7XMLCell7elementEPKc($0, 49746) | 0;
if (!$2) {
STACKTOP = sp;
return;
}
$4 = __ZN7XMLCell7elementEPKc($2, 19482) | 0;
if (!$4) {
STACKTOP = sp;
return;
}
$6 = __ZN7XMLCell7elementEPKc($2, 19497) | 0;
if (!$6) {
STACKTOP = sp;
return;
}
$9 = HEAP32[$4 + 8 >> 2] | 0;
L13 : do if ($9 | 0) {
$11 = $9 + 12 | 0;
$$sroa$0271$0297 = 0;
$$sroa$9277$0298 = -1;
while (1) {
$12 = HEAP32[$11 >> 2] | 0;
$$sroa$0271$1 = $$sroa$0271$0297;
do {
if (($$sroa$0271$1 | 0) >= ($12 | 0)) break L13;
if (($$sroa$0271$1 | 0) < 0) $20 = 0; else $20 = HEAP32[(HEAP32[$9 >> 2] | 0) + ($$sroa$0271$1 << 2) >> 2] | 0;
$$sroa$0271$1 = $$sroa$0271$1 + 1 | 0;
} while ((_strcmp(19510, HEAP32[$20 >> 2] | 0) | 0) != 0);
$23 = $$sroa$9277$0298 + 1 | 0;
$24 = $23 << 16 >> 16;
$27 = (__ZN7XMLCell12attrib_int32EPKci($20, 19528, $24 + 1 | 0) | 0) + -1 | 0;
$29 = __ZN7XMLCell13attrib_stringEPKc($20, 52031) | 0;
if (!$29) $36 = 0; else $36 = (_strcmp($29, 35820) | 0) == 0 & 1;
$33 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($20, 19534, Math_fround(1.0)));
HEAPF32[64824 + ($36 * 20 | 0) + (($27 >>> 0 > 4 ? $24 : $27) << 16 >> 16 << 2) >> 2] = $33;
$$sroa$0271$0297 = $$sroa$0271$1;
$$sroa$9277$0298 = $23;
}
} while (0);
$38 = HEAP32[$6 + 8 >> 2] | 0;
L28 : do if ($38 | 0) {
$40 = $38 + 12 | 0;
$$sroa$0$0296 = 0;
$$sroa$9$0295 = -1;
while (1) {
$41 = HEAP32[$40 >> 2] | 0;
$$sroa$0$1 = $$sroa$0$0296;
do {
if (($$sroa$0$1 | 0) >= ($41 | 0)) break L28;
if (($$sroa$0$1 | 0) < 0) $49 = 0; else $49 = HEAP32[(HEAP32[$38 >> 2] | 0) + ($$sroa$0$1 << 2) >> 2] | 0;
$$sroa$0$1 = $$sroa$0$1 + 1 | 0;
} while ((_strcmp(19543, HEAP32[$49 >> 2] | 0) | 0) != 0);
$52 = $$sroa$9$0295 + 1 | 0;
$53 = $52 << 16 >> 16;
$56 = (__ZN7XMLCell12attrib_int32EPKci($49, 19528, $53 + 1 | 0) | 0) + -1 | 0;
$58 = ($56 >>> 0 > 4 ? $53 : $56) << 16 >> 16;
$61 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($49, 52026, Math_fround(HEAPF32[16541])));
HEAPF32[1496 + ($58 << 4) >> 2] = $61;
$63 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($49, 52017, Math_fround(HEAPF32[16541])));
HEAPF32[1496 + ($58 << 4) + 4 >> 2] = $63;
$66 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($49, 19559, Math_fround(HEAPF32[16541])));
HEAPF32[1496 + ($58 << 4) + 8 >> 2] = $66;
$69 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($49, 19568, Math_fround(0.0)));
HEAPF32[1616 + ($58 << 4) >> 2] = $69;
$70 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($49, 19577, Math_fround(0.0)));
HEAPF32[1616 + ($58 << 4) + 4 >> 2] = $70;
$72 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($49, 19590, Math_fround(0.0)));
HEAPF32[1616 + ($58 << 4) + 8 >> 2] = $72;
$74 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($49, 19603, Math_fround(-.300000012)));
HEAPF32[65380 + ($58 << 2) >> 2] = $74;
$76 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($49, 19612, Math_fround(.300000012)));
HEAPF32[65360 + ($58 << 2) >> 2] = $76;
if (!$52) {
HEAPF32[1576 + ($58 << 2) >> 2] = Math_fround(0.0);
HEAPF32[65400 + ($58 << 2) >> 2] = Math_fround(0.0);
$87 = Math_fround(0.0);
} else {
$81 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($49, 19621, Math_fround(0.0)));
HEAPF32[1576 + ($58 << 2) >> 2] = $81;
$83 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($49, 19631, Math_fround(0.0)));
HEAPF32[65400 + ($58 << 2) >> 2] = $83;
$87 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($49, 19641, Math_fround(0.0)));
}
HEAPF32[1596 + ($58 << 2) >> 2] = $87;
$$sroa$0$0296 = $$sroa$0$1;
$$sroa$9$0295 = $52;
}
} while (0);
$88 = __ZN7XMLCell7elementEPKc($0, 19651) | 0;
$89 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($88, 19665, Math_fround(.5)));
HEAPF32[16169] = $89;
$90 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($88, 19674, Math_fround(1.0)));
HEAPF32[16170] = $90;
$91 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($88, 19681, Math_fround(3.5)));
HEAPF32[16171] = $91;
$92 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($88, 19688, Math_fround(3.0)));
HEAPF32[16172] = $92;
$93 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($88, 19700, Math_fround(.699999988)));
HEAPF32[16173] = $93;
$94 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($88, 19712, Math_fround(.600000024)));
HEAPF32[16174] = $94;
$95 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($88, 19725, Math_fround(.300000012)));
HEAPF32[16175] = $95;
$96 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($88, 19734, Math_fround(2.5999999)));
HEAPF32[16176] = $96;
$97 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($88, 19745, Math_fround(.5)));
HEAPF32[16177] = $97;
$98 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($88, 49246, Math_fround(0.0)));
$99 = $98 < Math_fround(-.999000012);
$100 = $98 > Math_fround(.999000012);
$101 = $100 ? Math_fround(.999000012) : $98;
$102 = $99 ? Math_fround(-.999000012) : $101;
HEAPF32[16179] = $102;
$103 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($88, 49257, Math_fround(0.0)));
$104 = $103 < Math_fround(-.999000012);
$105 = $103 > Math_fround(.999000012);
$106 = $105 ? Math_fround(.999000012) : $103;
$107 = $104 ? Math_fround(-.999000012) : $106;
HEAPF32[16180] = $107;
if (0) {
HEAPF64[$vararg_buffer >> 3] = +$98;
__Z7eprintfPKcz(19764, $vararg_buffer);
__ZNK19PostureChangeTiming5printEP8_IO_FILE(64716, HEAP32[16082] | 0);
__Z5eputcc(10);
__ZN7XMLCell5printEP8_IO_FILE($88, HEAP32[16082] | 0);
}
$112 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($88, 19805, Math_fround(1.04999995)));
HEAPF32[16194] = $112;
$113 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($88, 19816, Math_fround(1.10000002)));
HEAPF32[16195] = $113;
$114 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($88, 19828, Math_fround(1.20000005)));
HEAPF32[16196] = $114;
$115 = __ZN7XMLCell7elementEPKc($0, 19837) | 0;
$116 = __ZN7XMLCell7elementEPKc($115, 19853) | 0;
if (!$116) {
$153 = Math_fround(Math_fround(HEAPF32[16542]) / Math_fround(180.0));
$154 = Math_fround($153 * Math_fround(-80.0));
$156 = Math_fround($153 * Math_fround(-20.0));
__ZN18SphereInterpolator7setFromEffffff(65420, $154, Math_fround($153 * Math_fround(-10.0)), $154, $156, $156, $156);
$158 = Math_fround(Math_fround(HEAPF32[16542]) / Math_fround(180.0));
$160 = Math_fround($158 * Math_fround(80.0));
$161 = Math_fround($158 * Math_fround(20.0));
__ZN18SphereInterpolator7setFromEffffff(65760, Math_fround($158 * Math_fround(10.0)), $160, $160, $161, $161, $161);
} else {
$118 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($116, 52489, Math_fround(10.0)));
$119 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($116, 19869, Math_fround(80.0)));
$120 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($116, 19872, Math_fround(80.0)));
$121 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($116, 19875, Math_fround(20.0)));
$122 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($116, 19880, Math_fround(20.0)));
$123 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($116, 19888, Math_fround(20.0)));
$124 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($116, 19893, $118));
$125 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($116, 19902, $119));
$126 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($116, 19910, $120));
$127 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($116, 19918, $121));
$128 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($116, 19928, $122));
$129 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($116, 19941, $123));
$131 = Math_fround(Math_fround(HEAPF32[16542]) / Math_fround(180.0));
__ZN18SphereInterpolator7setFromEffffff(65420, Math_fround(-Math_fround($119 * $131)), Math_fround(-Math_fround($118 * $131)), Math_fround(-Math_fround($120 * $131)), Math_fround(-Math_fround($121 * $131)), Math_fround(-Math_fround($122 * $131)), Math_fround(-Math_fround($123 * $131)));
$145 = Math_fround(Math_fround(HEAPF32[16542]) / Math_fround(180.0));
__ZN18SphereInterpolator7setFromEffffff(65760, Math_fround($124 * $145), Math_fround($125 * $145), Math_fround($126 * $145), Math_fround($127 * $145), Math_fround($128 * $145), Math_fround($129 * $145));
}
$162 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($115, 19951, Math_fround(.100000001)));
HEAPF32[16216] = $162;
$163 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($115, 19964, Math_fround(.100000001)));
HEAPF32[16217] = $163;
$164 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($115, 19976, Math_fround(.100000001)));
HEAPF32[16218] = $164;
$165 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($115, 19989, Math_fround(.100000001)));
HEAPF32[16219] = $165;
$166 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($115, 20003, Math_fround(.5)));
HEAPF32[16220] = $166;
$167 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($115, 20015, Math_fround(.5)));
HEAPF32[16221] = $167;
$168 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($115, 20028, Math_fround(.800000011)));
HEAPF32[16222] = $168;
$169 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($115, 20041, Math_fround(.5)));
HEAPF32[16223] = $169;
$170 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($115, 20057, Math_fround(2.0)));
HEAPF32[16224] = $170;
$171 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($115, 20080, Math_fround(15.0)));
$174 = Math_fround($171 * Math_fround(Math_fround(HEAPF32[16542]) / Math_fround(180.0)));
HEAPF32[16225] = $174;
$176 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf(__ZN7XMLCell7elementEPKc($0, 20091) | 0, 20104, Math_fround(0.0)));
HEAPF32[16285] = $176;
$177 = __ZN7XMLCell7elementEPKc($115, 51565) | 0;
$178 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($177, 20126, Math_fround(.5)));
HEAPF32[16334] = $178;
$179 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($177, 20137, Math_fround(-.100000001)));
HEAPF32[16335] = $179;
$180 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($177, 20148, Math_fround(3.0)));
HEAPF32[16336] = $180;
$181 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($177, 51282, Math_fround(1.0)));
HEAPF32[16337] = $181;
$182 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($177, 20003, Math_fround(1.5)));
HEAPF32[16338] = $182;
$183 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($177, 20015, Math_fround(1.5)));
HEAPF32[16339] = $183;
$184 = __ZN7XMLCell7elementEPKc($115, 20158) | 0;
if (!$184) {
$194 = 0;
label = 34;
} else {
$187 = HEAP32[$184 + 8 >> 2] | 0;
if (!$187) {
$194 = 0;
label = 34;
} else {
$phitmp = HEAP32[$187 + 12 >> 2] << 16;
$phitmp243 = $phitmp >> 16;
if (!$phitmp243) {
$194 = $187;
label = 34;
} else if (($phitmp | 0) > 0) {
$196 = $187 + 12 | 0;
$$0294 = 0;
$235 = 0;
do {
if ($$0294 << 16 >> 16 < 0) $240 = 0; else if ((HEAP32[$196 >> 2] | 0) > ($235 | 0)) $240 = HEAP32[(HEAP32[$187 >> 2] | 0) + ($235 << 2) >> 2] | 0; else $240 = 0;
$239 = HEAP32[$240 >> 2] | 0;
$242 = __ZNK21InvertibleStringArray14indexFromValueEPKc(HEAP32[17764] | 0, $239) | 0;
if (!$242) {
HEAP32[$vararg_buffer5 >> 2] = $239;
__Z7eprintfPKcz(20408, $vararg_buffer5);
} else {
$244 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($240, 20126, Math_fround(0.0)));
HEAPF32[65192 + ($242 * 24 | 0) >> 2] = $244;
$246 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($240, 20137, Math_fround(0.0)));
HEAPF32[65192 + ($242 * 24 | 0) + 4 >> 2] = $246;
$248 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($240, 20148, Math_fround(0.0)));
HEAPF32[65192 + ($242 * 24 | 0) + 8 >> 2] = $248;
$250 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($240, 51282, Math_fround(0.0)));
HEAPF32[65192 + ($242 * 24 | 0) + 12 >> 2] = $250;
$252 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($240, 20003, Math_fround(0.0)));
HEAPF32[65192 + ($242 * 24 | 0) + 16 >> 2] = $252;
$254 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($240, 20015, Math_fround(0.0)));
HEAPF32[65192 + ($242 * 24 | 0) + 20 >> 2] = $254;
}
$$0294 = $$0294 + 1 << 16 >> 16;
$235 = $$0294 << 16 >> 16;
} while (($phitmp243 | 0) > ($235 | 0));
}
}
}
if ((label | 0) == 34) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer1 >> 2] = $184;
HEAP32[$vararg_buffer1 + 4 >> 2] = $194;
__Z7eprintfPKcz(20173, $vararg_buffer1);
}
$197 = __ZN7XMLCell7elementEPKc($115, 20229) | 0;
HEAPF32[16226] = Math_fround(1.0);
HEAPF32[16227] = Math_fround(.5);
HEAPF32[16228] = Math_fround(.699999988);
HEAPF32[16229] = Math_fround(1.0);
HEAPF32[16230] = Math_fround(1.60000002);
if ($197 | 0) {
__ZN7XMLCell11attrib_REALERfPKc($197, 64908, 50615) | 0;
__ZN7XMLCell11attrib_REALERfPKc($197, 64912, 50625) | 0;
__ZN7XMLCell11attrib_REALERfPKc($197, 64920, 50638) | 0;
__ZN7XMLCell11attrib_REALERfPKc($197, 64916, 50631) | 0;
HEAP32[16226] = HEAP32[16229];
__ZN7XMLCell11attrib_REALERfPKc($197, 64904, 53768) | 0;
}
$200 = __ZN7XMLCell7elementEPKc($115, 20244) | 0;
HEAPF32[16231] = Math_fround(1.0);
HEAPF32[16232] = Math_fround(.5);
HEAPF32[16233] = Math_fround(.699999988);
HEAPF32[16234] = Math_fround(1.0);
HEAPF32[16235] = Math_fround(1.60000002);
if ($200 | 0) {
__ZN7XMLCell11attrib_REALERfPKc($200, 64928, 50615) | 0;
__ZN7XMLCell11attrib_REALERfPKc($200, 64932, 50625) | 0;
__ZN7XMLCell11attrib_REALERfPKc($200, 64940, 50638) | 0;
__ZN7XMLCell11attrib_REALERfPKc($200, 64936, 50631) | 0;
HEAP32[16231] = HEAP32[16234];
__ZN7XMLCell11attrib_REALERfPKc($200, 64924, 53768) | 0;
}
$203 = __ZN7XMLCell7elementEPKc($115, 20257) | 0;
HEAPF32[16236] = Math_fround(1.0);
HEAPF32[16237] = Math_fround(.5);
HEAPF32[16238] = Math_fround(.699999988);
HEAPF32[16239] = Math_fround(1.0);
HEAPF32[16240] = Math_fround(1.60000002);
if ($203 | 0) {
__ZN7XMLCell11attrib_REALERfPKc($203, 64948, 50615) | 0;
__ZN7XMLCell11attrib_REALERfPKc($203, 64952, 50625) | 0;
__ZN7XMLCell11attrib_REALERfPKc($203, 64960, 50638) | 0;
__ZN7XMLCell11attrib_REALERfPKc($203, 64956, 50631) | 0;
HEAP32[16236] = HEAP32[16239];
__ZN7XMLCell11attrib_REALERfPKc($203, 64944, 53768) | 0;
}
$206 = __ZN7XMLCell7elementEPKc($115, 20277) | 0;
HEAPF32[16241] = Math_fround(1.0);
HEAPF32[16242] = Math_fround(.5);
HEAPF32[16243] = Math_fround(.699999988);
HEAPF32[16244] = Math_fround(1.0);
HEAPF32[16245] = Math_fround(1.60000002);
if ($206 | 0) {
__ZN7XMLCell11attrib_REALERfPKc($206, 64968, 50615) | 0;
__ZN7XMLCell11attrib_REALERfPKc($206, 64972, 50625) | 0;
__ZN7XMLCell11attrib_REALERfPKc($206, 64980, 50638) | 0;
__ZN7XMLCell11attrib_REALERfPKc($206, 64976, 50631) | 0;
HEAP32[16241] = HEAP32[16244];
__ZN7XMLCell11attrib_REALERfPKc($206, 64964, 53768) | 0;
}
$209 = __ZN7XMLCell7elementEPKc($115, 20293) | 0;
HEAPF32[16246] = Math_fround(1.0);
HEAPF32[16247] = Math_fround(.5);
HEAPF32[16248] = Math_fround(.699999988);
HEAPF32[16249] = Math_fround(1.0);
HEAPF32[16250] = Math_fround(1.60000002);
if ($209 | 0) {
__ZN7XMLCell11attrib_REALERfPKc($209, 64988, 50615) | 0;
__ZN7XMLCell11attrib_REALERfPKc($209, 64992, 50625) | 0;
__ZN7XMLCell11attrib_REALERfPKc($209, 65e3, 50638) | 0;
__ZN7XMLCell11attrib_REALERfPKc($209, 64996, 50631) | 0;
HEAP32[16246] = HEAP32[16249];
__ZN7XMLCell11attrib_REALERfPKc($209, 64984, 53768) | 0;
}
$212 = __ZN7XMLCell7elementEPKc($115, 20306) | 0;
HEAPF32[16251] = Math_fround(1.0);
HEAPF32[16252] = Math_fround(.5);
HEAPF32[16253] = Math_fround(.699999988);
HEAPF32[16254] = Math_fround(1.0);
HEAPF32[16255] = Math_fround(1.60000002);
if ($212 | 0) {
__ZN7XMLCell11attrib_REALERfPKc($212, 65008, 50615) | 0;
__ZN7XMLCell11attrib_REALERfPKc($212, 65012, 50625) | 0;
__ZN7XMLCell11attrib_REALERfPKc($212, 65020, 50638) | 0;
__ZN7XMLCell11attrib_REALERfPKc($212, 65016, 50631) | 0;
HEAP32[16251] = HEAP32[16254];
__ZN7XMLCell11attrib_REALERfPKc($212, 65004, 53768) | 0;
}
$215 = __ZN7XMLCell7elementEPKc($115, 20323) | 0;
HEAPF32[16256] = Math_fround(1.0);
HEAPF32[16257] = Math_fround(.5);
HEAPF32[16258] = Math_fround(.699999988);
HEAPF32[16259] = Math_fround(1.0);
HEAPF32[16260] = Math_fround(1.60000002);
if ($215 | 0) {
__ZN7XMLCell11attrib_REALERfPKc($215, 65028, 50615) | 0;
__ZN7XMLCell11attrib_REALERfPKc($215, 65032, 50625) | 0;
__ZN7XMLCell11attrib_REALERfPKc($215, 65040, 50638) | 0;
__ZN7XMLCell11attrib_REALERfPKc($215, 65036, 50631) | 0;
HEAP32[16256] = HEAP32[16259];
__ZN7XMLCell11attrib_REALERfPKc($215, 65024, 53768) | 0;
}
$218 = __ZN7XMLCell7elementEPKc($115, 20336) | 0;
HEAPF32[16261] = Math_fround(1.0);
HEAPF32[16262] = Math_fround(.5);
HEAPF32[16263] = Math_fround(.699999988);
HEAPF32[16264] = Math_fround(1.0);
HEAPF32[16265] = Math_fround(1.60000002);
if ($218 | 0) {
__ZN7XMLCell11attrib_REALERfPKc($218, 65048, 50615) | 0;
__ZN7XMLCell11attrib_REALERfPKc($218, 65052, 50625) | 0;
__ZN7XMLCell11attrib_REALERfPKc($218, 65060, 50638) | 0;
__ZN7XMLCell11attrib_REALERfPKc($218, 65056, 50631) | 0;
HEAP32[16261] = HEAP32[16264];
__ZN7XMLCell11attrib_REALERfPKc($218, 65044, 53768) | 0;
}
$221 = __ZN7XMLCell7elementEPKc($115, 20351) | 0;
HEAPF32[16266] = Math_fround(1.0);
HEAPF32[16267] = Math_fround(.5);
HEAPF32[16268] = Math_fround(.699999988);
HEAPF32[16269] = Math_fround(1.0);
HEAPF32[16270] = Math_fround(1.60000002);
if ($221 | 0) {
__ZN7XMLCell11attrib_REALERfPKc($221, 65068, 50615) | 0;
__ZN7XMLCell11attrib_REALERfPKc($221, 65072, 50625) | 0;
__ZN7XMLCell11attrib_REALERfPKc($221, 65080, 50638) | 0;
__ZN7XMLCell11attrib_REALERfPKc($221, 65076, 50631) | 0;
HEAP32[16266] = HEAP32[16269];
__ZN7XMLCell11attrib_REALERfPKc($221, 65064, 53768) | 0;
}
$224 = __ZN7XMLCell7elementEPKc($115, 20370) | 0;
HEAPF32[16271] = Math_fround(1.0);
HEAPF32[16272] = Math_fround(.5);
HEAPF32[16273] = Math_fround(.699999988);
HEAPF32[16274] = Math_fround(1.0);
HEAPF32[16275] = Math_fround(1.60000002);
if ($224 | 0) {
__ZN7XMLCell11attrib_REALERfPKc($224, 65088, 50615) | 0;
__ZN7XMLCell11attrib_REALERfPKc($224, 65092, 50625) | 0;
__ZN7XMLCell11attrib_REALERfPKc($224, 65100, 50638) | 0;
__ZN7XMLCell11attrib_REALERfPKc($224, 65096, 50631) | 0;
HEAP32[16271] = HEAP32[16274];
__ZN7XMLCell11attrib_REALERfPKc($224, 65084, 53768) | 0;
}
$227 = __ZN7XMLCell7elementEPKc($115, 20388) | 0;
HEAPF32[16279] = Math_fround(1.0);
HEAPF32[16280] = Math_fround(.5);
HEAPF32[16281] = Math_fround(.699999988);
HEAPF32[16282] = Math_fround(1.0);
HEAPF32[16283] = Math_fround(1.60000002);
if ($227 | 0) {
__ZN7XMLCell11attrib_REALERfPKc($227, 65120, 50615) | 0;
__ZN7XMLCell11attrib_REALERfPKc($227, 65124, 50625) | 0;
__ZN7XMLCell11attrib_REALERfPKc($227, 65132, 50638) | 0;
__ZN7XMLCell11attrib_REALERfPKc($227, 65128, 50631) | 0;
HEAP32[16279] = HEAP32[16282];
__ZN7XMLCell11attrib_REALERfPKc($227, 65116, 53768) | 0;
}
if (HEAP8[72310] | 0) {
HEAPF32[16241] = Math_fround(1.0);
HEAPF32[16242] = Math_fround(1.0);
HEAPF32[16243] = Math_fround(1.0);
HEAPF32[16244] = Math_fround(1.0);
HEAPF32[16245] = Math_fround(1.0);
HEAPF32[16251] = Math_fround(1.0);
HEAPF32[16252] = Math_fround(1.0);
HEAPF32[16253] = Math_fround(1.0);
HEAPF32[16254] = Math_fround(1.0);
HEAPF32[16255] = Math_fround(1.0);
}
$259 = __ZN7XMLCell7elementEPKc($115, 20465) | 0;
if ($259 | 0) {
$261 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($259, 53768, Math_fround(1.0)));
HEAPF32[16276] = $261;
$262 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($259, 53768, Math_fround(1.70000005)));
HEAPF32[16277] = $262;
$263 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($259, 53768, Math_fround(.600000024)));
HEAPF32[16278] = $263;
}
if (!(HEAP8[72310] | 0)) {
$266 = __ZN7XMLCell7elementEPKc($0, 20489) | 0;
HEAPF32[16183] = Math_fround(0.0);
$267 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($266, 50551, Math_fround(1.0)));
HEAPF32[16184] = $267;
$268 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($266, 50561, Math_fround(.550000012)));
HEAPF32[16185] = $268;
$269 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($266, 50566, Math_fround(1.66999996)));
HEAPF32[16186] = $269;
$270 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($266, 50571, Math_fround(2.29999995)));
HEAPF32[16187] = $270;
$271 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($266, 50577, Math_fround(2.0)));
HEAPF32[16188] = $271;
$272 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($266, 50582, Math_fround(1.0)));
HEAPF32[16189] = $272;
$273 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($266, 50587, Math_fround(1.20000005)));
HEAPF32[16182] = $273;
$274 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($266, 50591, Math_fround(1.10000002)));
HEAPF32[16190] = $274;
$275 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($266, 50603, Math_fround(.550000012)));
HEAPF32[16191] = $275;
$276 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($266, 57284, Math_fround(1.0)));
HEAPF32[16192] = $276;
HEAP32[16199] = HEAP32[16185];
HEAPF32[16185] = Math_fround(1.0);
HEAP32[16201] = HEAP32[16186];
HEAPF32[16186] = Math_fround(1.0);
$279 = __ZN7XMLCell7elementEPKc($0, 20501) | 0;
$280 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($279, 50561, Math_fround(.600000024)));
HEAPF32[16203] = $280;
$281 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($279, 50631, Math_fround(1.0)));
HEAPF32[16204] = $281;
$282 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($279, 50566, Math_fround(2.0)));
HEAPF32[16205] = $282;
}
__Z19MakeHandshapeTablesv();
STACKTOP = sp;
return;
}
function __ZNK10TorsoCurve12ForceOutsideERK6VectorRS0_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0$i$i = f0, $$0$i$i169 = f0, $$0$i$i173 = f0, $$0$i$i179 = f0, $$8 = 0, $$phi$trans$insert = 0, $$phi$trans$insert219 = 0, $$pre = f0, $$pre$phi228Z2D = 0, $$pre$phi230Z2D = 0, $$pre$phi232Z2D = 0, $$pre$phi234Z2D = 0, $$pre$phi236Z2D = f0, $$pre$phi238Z2D = 0, $$pre$phi240Z2D = 0, $$pre$phi242Z2D = 0, $$pre$phi244Z2D = 0, $$pre$phi246Z2D = 0, $$pre$phi248Z2D = f0, $$pre$phiZ2D = 0, $$pre204 = f0, $$pre205 = f0, $$pre206 = f0, $$pre208 = f0, $$pre210 = f0, $$pre214 = f0, $$pre215 = f0, $$pre216 = f0, $$pre218 = f0, $100 = f0, $101 = f0, $102 = f0, $104 = f0, $106 = f0, $107 = f0, $11 = 0.0, $112 = f0, $116 = f0, $118 = f0, $12 = 0, $120 = f0, $122 = f0, $124 = f0, $126 = f0, $131 = f0, $132 = f0, $136 = f0, $138 = f0, $139 = 0, $14 = 0.0, $140 = f0, $141 = f0, $147 = 0.0, $149 = f0, $15 = 0, $150 = f0, $151 = f0, $152 = f0, $153 = f0, $154 = f0, $155 = 0, $156 = f0, $157 = f0, $160 = f0, $161 = 0, $162 = f0, $165 = 0, $166 = 0, $167 = f0, $17 = 0.0, $173 = 0.0, $176 = f0, $18 = 0, $180 = f0, $181 = f0, $183 = f0, $184 = f0, $186 = f0, $188 = f0, $189 = f0, $192 = f0, $195 = f0, $196 = f0, $20 = 0.0, $201 = 0.0, $204 = 0.0, $205 = 0, $207 = 0.0, $208 = 0, $21 = 0, $210 = 0.0, $211 = 0, $213 = 0.0, $214 = 0, $216 = 0.0, $219 = 0.0, $222 = 0.0, $223 = 0, $224 = f0, $225 = f0, $226 = f0, $227 = f0, $228 = f0, $229 = f0, $23 = 0.0, $230 = f0, $231 = f0, $232 = f0, $233 = f0, $234 = 0, $235 = f0, $239 = f0, $241 = 0, $246 = f0, $248 = f0, $250 = f0, $251 = f0, $252 = 0, $253 = f0, $258 = f0, $26 = 0.0, $260 = f0, $263 = f0, $265 = f0, $266 = 0, $267 = f0, $269 = f0, $273 = f0, $277 = f0, $280 = 0.0, $283 = 0.0, $286 = 0.0, $287 = f0, $29 = 0.0, $293 = f0, $294 = f0, $295 = f0, $297 = f0, $299 = f0, $3 = f0, $30 = 0, $300 = f0, $305 = f0, $309 = f0, $31 = f0, $311 = f0, $313 = f0, $315 = f0, $317 = f0, $319 = f0, $32 = f0, $324 = f0, $325 = f0, $329 = f0, $33 = f0, $331 = f0, $332 = 0, $333 = f0, $334 = f0, $34 = f0, $340 = 0.0, $342 = f0, $343 = f0, $344 = f0, $345 = f0, $346 = f0, $347 = f0, $348 = 0, $349 = f0, $35 = f0, $350 = f0, $353 = f0, $354 = 0, $355 = f0, $358 = 0, $359 = 0, $36 = f0, $360 = f0, $366 = 0.0, $369 = f0, $37 = f0, $374 = f0, $375 = f0, $377 = f0, $378 = f0, $38 = f0, $380 = f0, $382 = f0, $383 = f0, $386 = f0, $389 = f0, $39 = f0, $390 = f0, $395 = 0.0, $396 = f0, $397 = f0, $4 = 0, $40 = f0, $41 = 0, $42 = f0, $46 = f0, $48 = 0, $5 = f0, $53 = f0, $55 = f0, $57 = f0, $58 = f0, $59 = 0, $60 = f0, $65 = f0, $67 = f0, $70 = f0, $72 = f0, $73 = 0, $74 = f0, $76 = f0, $8 = 0, $80 = f0, $84 = f0, $87 = 0.0, $90 = 0.0, $93 = 0.0, $94 = f0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer103 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer25 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer36 = 0, $vararg_buffer42 = 0, $vararg_buffer48 = 0, $vararg_buffer53 = 0, $vararg_buffer55 = 0, $vararg_buffer64 = 0, $vararg_buffer70 = 0, $vararg_buffer73 = 0, $vararg_buffer80 = 0, $vararg_buffer86 = 0, $vararg_buffer89 = 0, $vararg_buffer9 = 0, $vararg_buffer91 = 0, $vararg_buffer97 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 560 | 0;
$vararg_buffer103 = sp + 536 | 0;
$vararg_buffer97 = sp + 504 | 0;
$vararg_buffer91 = sp + 472 | 0;
$vararg_buffer89 = sp + 464 | 0;
$vararg_buffer86 = sp + 456 | 0;
$vararg_buffer80 = sp + 424 | 0;
$vararg_buffer73 = sp + 384 | 0;
$vararg_buffer70 = sp + 376 | 0;
$vararg_buffer64 = sp + 344 | 0;
$vararg_buffer55 = sp + 288 | 0;
$vararg_buffer53 = sp + 280 | 0;
$vararg_buffer48 = sp + 256 | 0;
$vararg_buffer42 = sp + 224 | 0;
$vararg_buffer36 = sp + 192 | 0;
$vararg_buffer34 = sp + 184 | 0;
$vararg_buffer31 = sp + 176 | 0;
$vararg_buffer25 = sp + 144 | 0;
$vararg_buffer18 = sp + 104 | 0;
$vararg_buffer15 = sp + 96 | 0;
$vararg_buffer9 = sp + 64 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
$3 = Math_fround(HEAPF32[$2 >> 2]);
$4 = $0 + 124 | 0;
$5 = Math_fround(HEAPF32[$4 >> 2]);
$8 = 0 != 0;
if (!(Math_fround($3 - $5) >= $5)) {
if ($8) {
__Z7eprintfPKcz(10887, $vararg_buffer53);
__ZNK6Vector5printEP8_IO_FILEi($1, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
$204 = +Math_fround(HEAPF32[$4 >> 2]);
$205 = $0 + 132 | 0;
$207 = +Math_fround(HEAPF32[$205 >> 2]);
$208 = $0 + 120 | 0;
$210 = +Math_fround(HEAPF32[$208 >> 2]);
$211 = $0 + 116 | 0;
$213 = +Math_fround(HEAPF32[$211 >> 2]);
$214 = $0 + 44 | 0;
$216 = +Math_fround(HEAPF32[$214 >> 2]);
$219 = +Math_fround(HEAPF32[$0 + 108 >> 2]);
$222 = +Math_fround(HEAPF32[$0 + 112 >> 2]);
HEAPF64[$vararg_buffer55 >> 3] = $204;
HEAPF64[$vararg_buffer55 + 8 >> 3] = $207;
HEAPF64[$vararg_buffer55 + 16 >> 3] = $210;
HEAPF64[$vararg_buffer55 + 24 >> 3] = $213;
HEAPF64[$vararg_buffer55 + 32 >> 3] = $216;
HEAPF64[$vararg_buffer55 + 40 >> 3] = $219;
HEAPF64[$vararg_buffer55 + 48 >> 3] = $222;
__Z7eprintfPKcz(10904, $vararg_buffer55);
$$pre210 = Math_fround(HEAPF32[$2 >> 2]);
$$pre$phi228Z2D = $208;
$$pre$phi230Z2D = $214;
$$pre$phi232Z2D = $211;
$$pre$phiZ2D = $205;
$230 = $$pre210;
$231 = Math_fround(HEAPF32[$4 >> 2]);
$241 = 0;
} else {
$$pre$phi228Z2D = $0 + 120 | 0;
$$pre$phi230Z2D = $0 + 44 | 0;
$$pre$phi232Z2D = $0 + 116 | 0;
$$pre$phiZ2D = $0 + 132 | 0;
$230 = $3;
$231 = $5;
$241 = 0;
}
$223 = $2 + 8 | 0;
$224 = Math_fround(HEAPF32[$223 >> 2]);
$225 = Math_fround(HEAPF32[$$pre$phiZ2D >> 2]);
$226 = Math_fround($224 - $225);
$227 = Math_fround(HEAPF32[$$pre$phi228Z2D >> 2]);
$228 = Math_fround($226 - $227);
$229 = Math_fround($230 - $231);
$232 = Math_fround(HEAPF32[$$pre$phi230Z2D >> 2]);
$233 = Math_fround(HEAPF32[$$pre$phi232Z2D >> 2]);
$234 = $0 + 88 | 0;
$235 = Math_fround(HEAPF32[$234 >> 2]);
$239 = Math_fround(Math_fround(Math_fround($232 - Math_fround($233 / $235)) - $225) - $227);
if (!($241 << 24 >> 24)) $248 = $235; else {
HEAPF64[$vararg_buffer64 >> 3] = +$228;
HEAPF64[$vararg_buffer64 + 8 >> 3] = +$229;
HEAPF64[$vararg_buffer64 + 16 >> 3] = +$239;
HEAPF64[$vararg_buffer64 + 24 >> 3] = +$235;
__Z7eprintfPKcz(10979, $vararg_buffer64);
$248 = Math_fround(HEAPF32[$234 >> 2]);
}
$246 = Math_fround($228 - $239);
if (!(Math_fround($246 * $248) < $229)) {
$342 = Math_fround(HEAPF32[$223 >> 2]);
$343 = Math_fround(HEAPF32[$$pre$phiZ2D >> 2]);
$344 = Math_fround($342 - $343);
$345 = Math_fround(HEAPF32[$2 >> 2]);
$346 = Math_fround(HEAPF32[$4 >> 2]);
$347 = Math_fround($345 - $346);
$348 = $0 + 76 | 0;
$349 = Math_fround(HEAPF32[$348 >> 2]);
$350 = Math_fround($347 - $349);
$353 = Math_fround(Math_fround($344 * $344) + Math_fround($350 * $350));
$354 = $0 + 80 | 0;
$355 = Math_fround(HEAPF32[$354 >> 2]);
$358 = 0 != 0;
if ($353 >= Math_fround($355 * $355)) {
if (!$358) {
$$8 = 0;
STACKTOP = sp;
return $$8 | 0;
}
$359 = $355 < Math_fround(0.0);
$360 = Math_fround(-$355);
$366 = +Math_fround(Math_sqrt(Math_fround($353)));
HEAPF64[$vararg_buffer91 >> 3] = +$350;
HEAPF64[$vararg_buffer91 + 8 >> 3] = +$344;
HEAPF64[$vararg_buffer91 + 16 >> 3] = $366;
HEAPF64[$vararg_buffer91 + 24 >> 3] = +($359 ? $360 : $355);
__Z7eprintfPKcz(11267, $vararg_buffer91);
$$8 = 0;
STACKTOP = sp;
return $$8 | 0;
}
if ($358) {
$369 = Math_fround(Math_sqrt(Math_fround($353)));
HEAPF64[$vararg_buffer97 >> 3] = +$350;
HEAPF64[$vararg_buffer97 + 8 >> 3] = +$344;
HEAPF64[$vararg_buffer97 + 16 >> 3] = +$369;
HEAPF64[$vararg_buffer97 + 24 >> 3] = +$355;
__Z7eprintfPKcz(11333, $vararg_buffer97);
__ZNK6Vector5printEP8_IO_FILEi($1, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
$$pre214 = Math_fround(HEAPF32[$354 >> 2]);
$$pre215 = Math_fround(HEAPF32[$4 >> 2]);
$$pre216 = Math_fround(HEAPF32[$348 >> 2]);
$$pre$phi236Z2D = $369;
$374 = $$pre214;
$377 = $$pre215;
$378 = $$pre216;
$383 = Math_fround(HEAPF32[$$pre$phiZ2D >> 2]);
} else {
$$pre$phi236Z2D = Math_fround(Math_sqrt(Math_fround($353)));
$374 = $355;
$377 = $346;
$378 = $349;
$383 = $343;
}
$375 = Math_fround(-Math_fround($374 / $$pre$phi236Z2D));
$380 = Math_fround(Math_fround($350 * $375) + Math_fround($377 + $378));
$382 = Math_fround(Math_fround($344 * $375) + $383);
HEAPF32[$2 >> 2] = $380;
HEAPF32[$223 >> 2] = $382;
if (!0) {
$$8 = 1;
STACKTOP = sp;
return $$8 | 0;
}
$386 = Math_fround($380 - Math_fround(HEAPF32[$348 >> 2]));
$389 = Math_fround(Math_fround($382 * $382) + Math_fround($386 * $386));
$390 = Math_fround(HEAPF32[$354 >> 2]);
$395 = +Math_fround($389 - Math_fround($390 * $390));
HEAPF64[$vararg_buffer103 >> 3] = +$380;
HEAPF64[$vararg_buffer103 + 8 >> 3] = +$382;
HEAPF64[$vararg_buffer103 + 16 >> 3] = $395;
__Z7eprintfPKcz(10840, $vararg_buffer103);
$$8 = 1;
STACKTOP = sp;
return $$8 | 0;
}
$250 = Math_fround(HEAPF32[$$pre$phi228Z2D >> 2]);
$251 = Math_fround($228 + $250);
$252 = $0 + 108 | 0;
$253 = Math_fround(HEAPF32[$252 >> 2]);
if ($253 < $229 | $229 < Math_fround(-$253)) $277 = Math_fround(10.0); else {
if ($253 == Math_fround(0.0)) {
$258 = Math_fround($229 * $229);
$260 = Math_fround(HEAPF32[$0 + 112 >> 2]);
$$0$i$i169 = Math_fround($250 - Math_fround($258 * $260));
$397 = $260;
} else {
$263 = Math_fround($229 / $253);
$265 = Math_fround(Math_fround(1.0) - Math_fround($263 * $263));
$266 = $265 > Math_fround(0.0);
$267 = $266 ? $265 : Math_fround(0.0);
$269 = Math_fround(HEAPF32[$0 + 112 >> 2]);
$$0$i$i169 = Math_fround($250 + Math_fround($269 * Math_fround(Math_sqrt(Math_fround($267)))));
$397 = $269;
}
$273 = Math_fround($251 - $$0$i$i169);
if (!($273 >= Math_fround(0.0))) {
$287 = Math_fround($229 / $246);
if (!0) {
$$pre$phi234Z2D = $0 + 112 | 0;
$294 = $253;
$297 = $397;
} else {
HEAPF64[$vararg_buffer80 >> 3] = +$273;
HEAPF64[$vararg_buffer80 + 8 >> 3] = +$248;
HEAPF64[$vararg_buffer80 + 16 >> 3] = +$239;
HEAPF64[$vararg_buffer80 + 24 >> 3] = +$287;
__Z7eprintfPKcz(11125, $vararg_buffer80);
$$pre218 = Math_fround(HEAPF32[$252 >> 2]);
$$phi$trans$insert219 = $0 + 112 | 0;
$$pre$phi234Z2D = $$phi$trans$insert219;
$294 = $$pre218;
$297 = Math_fround(HEAPF32[$$phi$trans$insert219 >> 2]);
}
$293 = Math_fround($287 / $294);
$295 = Math_fround($293 * $293);
$299 = Math_fround($295 + Math_fround(Math_fround(1.0) / Math_fround($297 * $297)));
$300 = Math_fround($239 * $295);
$305 = Math_fround(Math_fround($300 * $300) - Math_fround($299 * Math_fround(Math_fround($239 * $300) + Math_fround(-1.0))));
if (!($305 >= Math_fround(0.0))) {
if (!0) {
$$8 = 0;
STACKTOP = sp;
return $$8 | 0;
}
__Z7eprintfPKcz(11193, $vararg_buffer89);
$$8 = 0;
STACKTOP = sp;
return $$8 | 0;
}
$309 = Math_fround(Math_fround($300 + Math_fround(Math_sqrt(Math_fround($305)))) / $299);
$311 = Math_fround($287 * Math_fround($309 - $239));
$313 = Math_fround(Math_fround(HEAPF32[$4 >> 2]) + $311);
HEAPF32[$2 >> 2] = $313;
$315 = Math_fround($309 + Math_fround(HEAPF32[$$pre$phi228Z2D >> 2]));
$317 = Math_fround($315 + Math_fround(HEAPF32[$$pre$phiZ2D >> 2]));
HEAPF32[$223 >> 2] = $317;
if (!0) {
$$8 = 1;
STACKTOP = sp;
return $$8 | 0;
}
$319 = Math_fround(HEAPF32[$252 >> 2]);
if ($319 < $313 | $313 < Math_fround(-$319)) $340 = 10.0; else {
if ($319 == Math_fround(0.0)) {
$324 = Math_fround(HEAPF32[$$pre$phi228Z2D >> 2]);
$325 = Math_fround($313 * $313);
$$0$i$i = Math_fround($324 - Math_fround($325 * Math_fround(HEAPF32[$$pre$phi234Z2D >> 2])));
} else {
$329 = Math_fround($313 / $319);
$331 = Math_fround(Math_fround(1.0) - Math_fround($329 * $329));
$332 = $331 > Math_fround(0.0);
$333 = $332 ? $331 : Math_fround(0.0);
$334 = Math_fround(HEAPF32[$$pre$phi228Z2D >> 2]);
$$0$i$i = Math_fround($334 + Math_fround(Math_fround(HEAPF32[$$pre$phi234Z2D >> 2]) * Math_fround(Math_sqrt(Math_fround($333)))));
}
$340 = +Math_fround($317 - $$0$i$i);
}
HEAPF64[$vararg_buffer86 >> 3] = $340;
__Z7eprintfPKcz(10614, $vararg_buffer86);
$$8 = 1;
STACKTOP = sp;
return $$8 | 0;
} else $277 = $273;
}
if (!0) {
$$8 = 0;
STACKTOP = sp;
return $$8 | 0;
}
HEAPF64[$vararg_buffer70 >> 3] = +$277;
__Z7eprintfPKcz(11031, $vararg_buffer70);
$280 = +Math_fround(HEAPF32[$252 >> 2]);
$283 = +Math_fround(HEAPF32[$$pre$phi228Z2D >> 2]);
$286 = +Math_fround(HEAPF32[$0 + 112 >> 2]);
HEAPF64[$vararg_buffer73 >> 3] = +$229;
HEAPF64[$vararg_buffer73 + 8 >> 3] = $280;
HEAPF64[$vararg_buffer73 + 16 >> 3] = +$228;
HEAPF64[$vararg_buffer73 + 24 >> 3] = $283;
HEAPF64[$vararg_buffer73 + 32 >> 3] = $286;
__Z7eprintfPKcz(11074, $vararg_buffer73);
$$8 = 0;
STACKTOP = sp;
return $$8 | 0;
} else {
if ($8) {
__Z7eprintfPKcz(10312, $vararg_buffer);
__ZNK6Vector5printEP8_IO_FILEi($1, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
$11 = +Math_fround(HEAPF32[$4 >> 2]);
$12 = $0 + 128 | 0;
$14 = +Math_fround(HEAPF32[$12 >> 2]);
$15 = $0 + 104 | 0;
$17 = +Math_fround(HEAPF32[$15 >> 2]);
$18 = $0 + 100 | 0;
$20 = +Math_fround(HEAPF32[$18 >> 2]);
$21 = $0 + 20 | 0;
$23 = +Math_fround(HEAPF32[$21 >> 2]);
$26 = +Math_fround(HEAPF32[$0 + 92 >> 2]);
$29 = +Math_fround(HEAPF32[$0 + 96 >> 2]);
HEAPF64[$vararg_buffer1 >> 3] = $11;
HEAPF64[$vararg_buffer1 + 8 >> 3] = $14;
HEAPF64[$vararg_buffer1 + 16 >> 3] = $17;
HEAPF64[$vararg_buffer1 + 24 >> 3] = $20;
HEAPF64[$vararg_buffer1 + 32 >> 3] = $23;
HEAPF64[$vararg_buffer1 + 40 >> 3] = $26;
HEAPF64[$vararg_buffer1 + 48 >> 3] = $29;
__Z7eprintfPKcz(10328, $vararg_buffer1);
$$pre = Math_fround(HEAPF32[$2 >> 2]);
$$pre$phi238Z2D = $12;
$$pre$phi240Z2D = $15;
$$pre$phi242Z2D = $21;
$$pre$phi244Z2D = $18;
$37 = $$pre;
$38 = Math_fround(HEAPF32[$4 >> 2]);
$48 = 0;
} else {
$$pre$phi238Z2D = $0 + 128 | 0;
$$pre$phi240Z2D = $0 + 104 | 0;
$$pre$phi242Z2D = $0 + 20 | 0;
$$pre$phi244Z2D = $0 + 100 | 0;
$37 = $3;
$38 = $5;
$48 = 0;
}
$30 = $2 + 8 | 0;
$31 = Math_fround(HEAPF32[$30 >> 2]);
$32 = Math_fround(HEAPF32[$$pre$phi238Z2D >> 2]);
$33 = Math_fround($31 - $32);
$34 = Math_fround(HEAPF32[$$pre$phi240Z2D >> 2]);
$35 = Math_fround($33 - $34);
$36 = Math_fround($37 - $38);
$39 = Math_fround(HEAPF32[$$pre$phi242Z2D >> 2]);
$40 = Math_fround(HEAPF32[$$pre$phi244Z2D >> 2]);
$41 = $0 + 72 | 0;
$42 = Math_fround(HEAPF32[$41 >> 2]);
$46 = Math_fround(Math_fround(Math_fround($39 - Math_fround($40 / $42)) - $32) - $34);
if (!($48 << 24 >> 24)) $55 = $42; else {
HEAPF64[$vararg_buffer9 >> 3] = +$35;
HEAPF64[$vararg_buffer9 + 8 >> 3] = +$36;
HEAPF64[$vararg_buffer9 + 16 >> 3] = +$46;
HEAPF64[$vararg_buffer9 + 24 >> 3] = +$42;
__Z7eprintfPKcz(10403, $vararg_buffer9);
$55 = Math_fround(HEAPF32[$41 >> 2]);
}
$53 = Math_fround($35 - $46);
if (!(Math_fround($53 * $55) > $36)) {
$149 = Math_fround(HEAPF32[$30 >> 2]);
$150 = Math_fround(HEAPF32[$$pre$phi238Z2D >> 2]);
$151 = Math_fround($149 - $150);
$152 = Math_fround(HEAPF32[$2 >> 2]);
$153 = Math_fround(HEAPF32[$4 >> 2]);
$154 = Math_fround($152 - $153);
$155 = $0 + 60 | 0;
$156 = Math_fround(HEAPF32[$155 >> 2]);
$157 = Math_fround($154 - $156);
$160 = Math_fround(Math_fround($151 * $151) + Math_fround($157 * $157));
$161 = $0 + 64 | 0;
$162 = Math_fround(HEAPF32[$161 >> 2]);
$165 = 0 != 0;
if ($160 >= Math_fround($162 * $162)) {
if (!$165) {
$$8 = 0;
STACKTOP = sp;
return $$8 | 0;
}
$166 = $162 < Math_fround(0.0);
$167 = Math_fround(-$162);
$173 = +Math_fround(Math_sqrt(Math_fround($160)));
HEAPF64[$vararg_buffer36 >> 3] = +$157;
HEAPF64[$vararg_buffer36 + 8 >> 3] = +$151;
HEAPF64[$vararg_buffer36 + 16 >> 3] = $173;
HEAPF64[$vararg_buffer36 + 24 >> 3] = +($166 ? $167 : $162);
__Z7eprintfPKcz(10710, $vararg_buffer36);
$$8 = 0;
STACKTOP = sp;
return $$8 | 0;
}
if ($165) {
$176 = Math_fround(Math_sqrt(Math_fround($160)));
HEAPF64[$vararg_buffer42 >> 3] = +$157;
HEAPF64[$vararg_buffer42 + 8 >> 3] = +$151;
HEAPF64[$vararg_buffer42 + 16 >> 3] = +$176;
HEAPF64[$vararg_buffer42 + 24 >> 3] = +$162;
__Z7eprintfPKcz(10775, $vararg_buffer42);
__ZNK6Vector5printEP8_IO_FILEi($1, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
$$pre204 = Math_fround(HEAPF32[$161 >> 2]);
$$pre205 = Math_fround(HEAPF32[$4 >> 2]);
$$pre206 = Math_fround(HEAPF32[$155 >> 2]);
$$pre$phi248Z2D = $176;
$181 = $$pre204;
$183 = $$pre205;
$184 = $$pre206;
$189 = Math_fround(HEAPF32[$$pre$phi238Z2D >> 2]);
} else {
$$pre$phi248Z2D = Math_fround(Math_sqrt(Math_fround($160)));
$181 = $162;
$183 = $153;
$184 = $156;
$189 = $150;
}
$180 = Math_fround($181 / $$pre$phi248Z2D);
$186 = Math_fround(Math_fround($157 * $180) + Math_fround($183 + $184));
$188 = Math_fround(Math_fround($151 * $180) + $189);
HEAPF32[$2 >> 2] = $186;
HEAPF32[$30 >> 2] = $188;
if (!0) {
$$8 = 1;
STACKTOP = sp;
return $$8 | 0;
}
$192 = Math_fround($186 - Math_fround(HEAPF32[$155 >> 2]));
$195 = Math_fround(Math_fround($188 * $188) + Math_fround($192 * $192));
$196 = Math_fround(HEAPF32[$161 >> 2]);
$201 = +Math_fround($195 - Math_fround($196 * $196));
HEAPF64[$vararg_buffer48 >> 3] = +$186;
HEAPF64[$vararg_buffer48 + 8 >> 3] = +$188;
HEAPF64[$vararg_buffer48 + 16 >> 3] = $201;
__Z7eprintfPKcz(10840, $vararg_buffer48);
$$8 = 1;
STACKTOP = sp;
return $$8 | 0;
}
$57 = Math_fround(HEAPF32[$$pre$phi240Z2D >> 2]);
$58 = Math_fround($35 + $57);
$59 = $0 + 92 | 0;
$60 = Math_fround(HEAPF32[$59 >> 2]);
if ($60 < $36 | $36 < Math_fround(-$60)) $84 = Math_fround(10.0); else {
if ($60 == Math_fround(0.0)) {
$65 = Math_fround($36 * $36);
$67 = Math_fround(HEAPF32[$0 + 96 >> 2]);
$$0$i$i173 = Math_fround($57 - Math_fround($65 * $67));
$396 = $67;
} else {
$70 = Math_fround($36 / $60);
$72 = Math_fround(Math_fround(1.0) - Math_fround($70 * $70));
$73 = $72 > Math_fround(0.0);
$74 = $73 ? $72 : Math_fround(0.0);
$76 = Math_fround(HEAPF32[$0 + 96 >> 2]);
$$0$i$i173 = Math_fround($57 + Math_fround($76 * Math_fround(Math_sqrt(Math_fround($74)))));
$396 = $76;
}
$80 = Math_fround($58 - $$0$i$i173);
if (!($80 >= Math_fround(0.0))) {
$94 = Math_fround($36 / $53);
if (!0) {
$$pre$phi246Z2D = $0 + 96 | 0;
$101 = $60;
$104 = $396;
} else {
HEAPF64[$vararg_buffer25 >> 3] = +$80;
HEAPF64[$vararg_buffer25 + 8 >> 3] = +$55;
HEAPF64[$vararg_buffer25 + 16 >> 3] = +$46;
HEAPF64[$vararg_buffer25 + 24 >> 3] = +$94;
__Z7eprintfPKcz(10547, $vararg_buffer25);
$$pre208 = Math_fround(HEAPF32[$59 >> 2]);
$$phi$trans$insert = $0 + 96 | 0;
$$pre$phi246Z2D = $$phi$trans$insert;
$101 = $$pre208;
$104 = Math_fround(HEAPF32[$$phi$trans$insert >> 2]);
}
$100 = Math_fround($94 / $101);
$102 = Math_fround($100 * $100);
$106 = Math_fround($102 + Math_fround(Math_fround(1.0) / Math_fround($104 * $104)));
$107 = Math_fround($46 * $102);
$112 = Math_fround(Math_fround($107 * $107) - Math_fround($106 * Math_fround(Math_fround($46 * $107) + Math_fround(-1.0))));
if (!($112 >= Math_fround(0.0))) {
if (!0) {
$$8 = 0;
STACKTOP = sp;
return $$8 | 0;
}
__Z7eprintfPKcz(10637, $vararg_buffer34);
$$8 = 0;
STACKTOP = sp;
return $$8 | 0;
}
$116 = Math_fround(Math_fround($107 + Math_fround(Math_sqrt(Math_fround($112)))) / $106);
$118 = Math_fround($94 * Math_fround($116 - $46));
$120 = Math_fround(Math_fround(HEAPF32[$4 >> 2]) + $118);
HEAPF32[$2 >> 2] = $120;
$122 = Math_fround($116 + Math_fround(HEAPF32[$$pre$phi240Z2D >> 2]));
$124 = Math_fround($122 + Math_fround(HEAPF32[$$pre$phi238Z2D >> 2]));
HEAPF32[$30 >> 2] = $124;
if (!0) {
$$8 = 1;
STACKTOP = sp;
return $$8 | 0;
}
$126 = Math_fround(HEAPF32[$59 >> 2]);
if ($126 < $120 | $120 < Math_fround(-$126)) $147 = 10.0; else {
if ($126 == Math_fround(0.0)) {
$131 = Math_fround(HEAPF32[$$pre$phi240Z2D >> 2]);
$132 = Math_fround($120 * $120);
$$0$i$i179 = Math_fround($131 - Math_fround($132 * Math_fround(HEAPF32[$$pre$phi246Z2D >> 2])));
} else {
$136 = Math_fround($120 / $126);
$138 = Math_fround(Math_fround(1.0) - Math_fround($136 * $136));
$139 = $138 > Math_fround(0.0);
$140 = $139 ? $138 : Math_fround(0.0);
$141 = Math_fround(HEAPF32[$$pre$phi240Z2D >> 2]);
$$0$i$i179 = Math_fround($141 + Math_fround(Math_fround(HEAPF32[$$pre$phi246Z2D >> 2]) * Math_fround(Math_sqrt(Math_fround($140)))));
}
$147 = +Math_fround($124 - $$0$i$i179);
}
HEAPF64[$vararg_buffer31 >> 3] = $147;
__Z7eprintfPKcz(10614, $vararg_buffer31);
$$8 = 1;
STACKTOP = sp;
return $$8 | 0;
} else $84 = $80;
}
if (!0) {
$$8 = 0;
STACKTOP = sp;
return $$8 | 0;
}
HEAPF64[$vararg_buffer15 >> 3] = +$84;
__Z7eprintfPKcz(10454, $vararg_buffer15);
$87 = +Math_fround(HEAPF32[$59 >> 2]);
$90 = +Math_fround(HEAPF32[$$pre$phi240Z2D >> 2]);
$93 = +Math_fround(HEAPF32[$0 + 96 >> 2]);
HEAPF64[$vararg_buffer18 >> 3] = +$36;
HEAPF64[$vararg_buffer18 + 8 >> 3] = $87;
HEAPF64[$vararg_buffer18 + 16 >> 3] = +$35;
HEAPF64[$vararg_buffer18 + 24 >> 3] = $90;
HEAPF64[$vararg_buffer18 + 32 >> 3] = $93;
__Z7eprintfPKcz(10496, $vararg_buffer18);
$$8 = 0;
STACKTOP = sp;
return $$8 | 0;
}
return 0;
}
function _vfscanf($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$ = 0, $$$0268 = 0, $$$0305 = 0, $$$3 = 0, $$0266$lcssa = 0, $$0266403 = 0, $$0268 = 0, $$0272 = 0, $$0273415 = 0, $$0276$ph = 0, $$0278$ph = 0, $$0278$ph$phi = 0, $$0278$ph339 = 0, $$0283414 = 0, $$0286406 = 0, $$0288411 = 0, $$0292 = 0, $$0293 = 0, $$0305409 = 0, $$10 = 0, $$11 = 0, $$1267 = 0, $$1271 = 0, $$1274 = 0, $$1277$ph = 0, $$1279 = 0, $$1284 = 0, $$1289 = 0, $$2 = 0, $$2275 = 0, $$2280 = 0, $$2280$ph = 0, $$2280$ph$phi = 0, $$2285 = 0, $$2290 = 0, $$2307$ph = 0, $$3$lcssa = 0, $$3281 = 0, $$329 = 0, $$3291 = 0, $$330$le425 = 0, $$3402 = 0, $$4282 = 0, $$4309 = 0, $$5 = 0, $$5299 = 0, $$5310 = 0, $$6 = 0, $$6$pn = 0, $$6311 = 0, $$7 = 0, $$7$ph = 0, $$7312 = 0, $$8 = 0, $$8313 = 0, $$9 = 0, $$9314 = 0, $$9314$ph = 0, $$lcssa356 = 0, $$ph = 0, $$ph354 = 0, $$sink333 = 0, $$sroa$2$0$$sroa_idx13 = 0, $100 = 0, $101 = 0, $104 = 0, $107 = 0, $11 = 0, $110 = 0, $112 = 0, $117 = 0, $124 = 0, $13 = 0, $130 = 0, $136 = 0, $138 = 0, $139 = 0, $14 = 0, $145 = 0, $148 = 0, $15 = 0, $152 = 0, $154 = 0, $157 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $163 = 0, $167 = 0, $17 = 0, $170 = 0, $174 = 0, $177 = 0, $178 = 0, $18 = 0, $180 = 0, $182 = 0, $183 = 0, $19 = 0, $191 = 0, $20 = 0, $201 = 0, $203 = 0, $207 = 0, $209 = 0, $217 = 0, $22 = 0, $225 = 0, $226 = 0, $229 = 0, $231 = 0, $237 = 0, $244 = 0, $246 = 0, $25 = 0, $252 = 0, $259 = 0, $264 = 0, $265 = 0, $272 = 0, $281 = 0.0, $288 = f0, $3 = 0, $30 = 0, $300 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $37 = 0, $4 = 0, $43 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $56 = 0, $6 = 0, $66 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $97 = 0, $98 = 0, $isdigittmp = 0, $narrow = 0, $narrow449 = 0, $trunc = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 288 | 0;
$3 = sp + 8 | 0;
$4 = sp + 17 | 0;
$5 = sp;
$6 = sp + 16 | 0;
if ((HEAP32[$0 + 76 >> 2] | 0) > -1) $302 = ___lockfile($0) | 0; else $302 = 0;
$11 = HEAP8[$1 >> 0] | 0;
L4 : do if (!($11 << 24 >> 24)) $$3291 = 0; else {
$13 = $0 + 4 | 0;
$14 = $0 + 100 | 0;
$15 = $0 + 108 | 0;
$16 = $0 + 8 | 0;
$17 = $4 + 10 | 0;
$18 = $4 + 33 | 0;
$$sroa$2$0$$sroa_idx13 = $3 + 4 | 0;
$19 = $4 + 1 | 0;
$20 = $4 + 1 | 0;
$$0273415 = $1;
$$0283414 = 0;
$$0288411 = 0;
$$0305409 = 0;
$100 = 0;
$22 = $11;
L6 : while (1) {
L8 : do if (!(_isspace($22 & 255) | 0)) {
$51 = $22 << 24 >> 24 == 37;
L10 : do if ($51) {
$52 = $$0273415 + 1 | 0;
$53 = HEAP8[$52 >> 0] | 0;
L12 : do switch ($53 << 24 >> 24) {
case 37:
{
break L10;
break;
}
case 42:
{
$$0293 = 0;
$$2275 = $$0273415 + 2 | 0;
break;
}
default:
{
$isdigittmp = ($53 & 255) + -48 | 0;
if ($isdigittmp >>> 0 < 10) if ((HEAP8[$$0273415 + 2 >> 0] | 0) == 36) {
$$0293 = _arg_n($2, $isdigittmp) | 0;
$$2275 = $$0273415 + 3 | 0;
break L12;
}
$86 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$87 = HEAP32[$86 >> 2] | 0;
HEAP32[$2 >> 2] = $86 + 4;
$$0293 = $87;
$$2275 = $52;
}
} while (0);
$88 = HEAP8[$$2275 >> 0] | 0;
$89 = $88 & 255;
if (($89 + -48 | 0) >>> 0 < 10) {
$$0266403 = 0;
$$3402 = $$2275;
$93 = $89;
while (1) {
$92 = ($$0266403 * 10 | 0) + -48 + $93 | 0;
$94 = $$3402 + 1 | 0;
$95 = HEAP8[$94 >> 0] | 0;
$93 = $95 & 255;
if (($93 + -48 | 0) >>> 0 >= 10) {
$$0266$lcssa = $92;
$$3$lcssa = $94;
$$lcssa356 = $95;
break;
} else {
$$0266403 = $92;
$$3402 = $94;
}
}
} else {
$$0266$lcssa = 0;
$$3$lcssa = $$2275;
$$lcssa356 = $88;
}
$97 = $$lcssa356 << 24 >> 24 == 109;
$98 = ($$0293 | 0) != 0;
$$$0305 = $97 ? 0 : $$0305409;
$$329 = $97 ? 0 : $100;
$$$3 = $97 ? $$3$lcssa + 1 | 0 : $$3$lcssa;
$narrow = $98 & $97;
$101 = $$$3 + 1 | 0;
switch (HEAP8[$$$3 >> 0] | 0) {
case 104:
{
$104 = (HEAP8[$101 >> 0] | 0) == 104;
$$0268 = $104 ? -2 : -1;
$$5 = $104 ? $$$3 + 2 | 0 : $101;
break;
}
case 108:
{
$107 = (HEAP8[$101 >> 0] | 0) == 108;
$$0268 = $107 ? 3 : 1;
$$5 = $107 ? $$$3 + 2 | 0 : $101;
break;
}
case 106:
{
$$0268 = 3;
$$5 = $101;
break;
}
case 116:
case 122:
{
$$0268 = 1;
$$5 = $101;
break;
}
case 76:
{
$$0268 = 2;
$$5 = $101;
break;
}
case 110:
case 112:
case 67:
case 83:
case 91:
case 99:
case 115:
case 88:
case 71:
case 70:
case 69:
case 65:
case 103:
case 102:
case 101:
case 97:
case 120:
case 117:
case 111:
case 105:
case 100:
{
$$0268 = 0;
$$5 = $$$3;
break;
}
default:
{
$$7312 = $$$0305;
$305 = $$329;
$narrow449 = $narrow;
label = 135;
break L6;
}
}
$110 = HEAPU8[$$5 >> 0] | 0;
$112 = ($110 & 47 | 0) == 3;
$$ = $112 ? $110 | 32 : $110;
$$$0268 = $112 ? 1 : $$0268;
$trunc = $$ & 255;
switch ($trunc << 24 >> 24) {
case 99:
{
$$1267 = ($$0266$lcssa | 0) > 1 ? $$0266$lcssa : 1;
$$1284 = $$0283414;
break;
}
case 91:
{
$$1267 = $$0266$lcssa;
$$1284 = $$0283414;
break;
}
case 110:
{
_store_int($$0293, $$$0268, $$0283414, (($$0283414 | 0) < 0) << 31 >> 31);
$$11 = $$5;
$$1289 = $$0288411;
$$2285 = $$0283414;
$$6311 = $$$0305;
$303 = $$329;
break L8;
break;
}
default:
{
___shlim($0, 0);
do {
$117 = HEAP32[$13 >> 2] | 0;
if ($117 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
HEAP32[$13 >> 2] = $117 + 1;
$124 = HEAPU8[$117 >> 0] | 0;
} else $124 = ___shgetc($0) | 0;
} while ((_isspace($124) | 0) != 0);
if (!(HEAP32[$14 >> 2] | 0)) $136 = HEAP32[$13 >> 2] | 0; else {
$130 = (HEAP32[$13 >> 2] | 0) + -1 | 0;
HEAP32[$13 >> 2] = $130;
$136 = $130;
}
$$1267 = $$0266$lcssa;
$$1284 = (HEAP32[$15 >> 2] | 0) + $$0283414 + $136 - (HEAP32[$16 >> 2] | 0) | 0;
}
}
___shlim($0, $$1267);
$138 = HEAP32[$13 >> 2] | 0;
$139 = HEAP32[$14 >> 2] | 0;
if ($138 >>> 0 < $139 >>> 0) {
HEAP32[$13 >> 2] = $138 + 1;
$145 = $139;
} else {
if ((___shgetc($0) | 0) < 0) {
$$7312 = $$$0305;
$305 = $$329;
$narrow449 = $narrow;
label = 135;
break L6;
}
$145 = HEAP32[$14 >> 2] | 0;
}
if ($145 | 0) HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1;
L55 : do switch ($trunc << 24 >> 24) {
case 91:
case 99:
case 115:
{
$148 = ($$ | 0) == 99;
L57 : do if (($$ | 16 | 0) == 115) {
_memset($19 | 0, -1, 256) | 0;
HEAP8[$4 >> 0] = 0;
if (($$ | 0) == 115) {
HEAP8[$18 >> 0] = 0;
HEAP8[$17 >> 0] = 0;
HEAP8[$17 + 1 >> 0] = 0;
HEAP8[$17 + 2 >> 0] = 0;
HEAP8[$17 + 3 >> 0] = 0;
HEAP8[$17 + 4 >> 0] = 0;
$$9 = $$5;
} else $$9 = $$5;
} else {
$152 = $$5 + 1 | 0;
$154 = (HEAP8[$152 >> 0] | 0) == 94;
$$0292 = $154 & 1;
$$6 = $154 ? $$5 + 2 | 0 : $152;
_memset($20 | 0, $154 & 1 | 0, 256) | 0;
HEAP8[$4 >> 0] = 0;
$157 = HEAP8[$$6 >> 0] | 0;
switch ($157 << 24 >> 24) {
case 45:
{
$$6$pn = $$6;
$$sink333 = 46;
label = 63;
break;
}
case 93:
{
$$6$pn = $$6;
$$sink333 = 94;
label = 63;
break;
}
default:
{
$$7 = $$6;
$159 = $157;
}
}
while (1) {
if ((label | 0) == 63) {
label = 0;
HEAP8[$4 + $$sink333 >> 0] = $$0292 ^ 1;
$$7$ph = $$6$pn + 1 | 0;
$$7 = $$7$ph;
$159 = HEAP8[$$7$ph >> 0] | 0;
}
L67 : do switch ($159 << 24 >> 24) {
case 0:
{
$$7312 = $$$0305;
$305 = $$329;
$narrow449 = $narrow;
label = 135;
break L6;
break;
}
case 93:
{
$$9 = $$7;
break L57;
break;
}
case 45:
{
$160 = $$7 + 1 | 0;
$161 = HEAP8[$160 >> 0] | 0;
switch ($161 << 24 >> 24) {
case 93:
case 0:
{
$$8 = $$7;
$174 = 45;
break L67;
break;
}
default:
{}
}
$163 = HEAP8[$$7 + -1 >> 0] | 0;
if (($163 & 255) < ($161 & 255)) {
$167 = ($$0292 ^ 1) & 255;
$$0286406 = $163 & 255;
do {
$$0286406 = $$0286406 + 1 | 0;
HEAP8[$4 + $$0286406 >> 0] = $167;
$170 = HEAP8[$160 >> 0] | 0;
} while (($$0286406 | 0) < ($170 & 255 | 0));
$$8 = $160;
$174 = $170;
} else {
$$8 = $160;
$174 = $161;
}
break;
}
default:
{
$$8 = $$7;
$174 = $159;
}
} while (0);
$$6$pn = $$8;
$$sink333 = ($174 & 255) + 1 | 0;
label = 63;
}
} while (0);
$177 = $148 ? $$1267 + 1 | 0 : 31;
$178 = ($$$0268 | 0) == 1;
L75 : do if ($178) {
if ($narrow) {
$180 = _malloc($177 << 2) | 0;
if (!$180) {
$$7312 = 0;
$305 = 0;
$narrow449 = 1;
label = 135;
break L6;
} else $307 = $180;
} else $307 = $$0293;
HEAP32[$3 >> 2] = 0;
HEAP32[$$sroa$2$0$$sroa_idx13 >> 2] = 0;
$$0276$ph = $177;
$$0278$ph = 0;
$$ph = $307;
L80 : while (1) {
$182 = ($$ph | 0) == 0;
$$0278$ph339 = $$0278$ph;
while (1) {
L84 : while (1) {
$183 = HEAP32[$13 >> 2] | 0;
if ($183 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
HEAP32[$13 >> 2] = $183 + 1;
$191 = HEAPU8[$183 >> 0] | 0;
} else $191 = ___shgetc($0) | 0;
if (!(HEAP8[$4 + ($191 + 1) >> 0] | 0)) break L80;
HEAP8[$6 >> 0] = $191;
switch (_mbrtowc($5, $6, 1, $3) | 0) {
case -1:
{
$$7312 = 0;
$305 = $$ph;
$narrow449 = $narrow;
label = 135;
break L6;
break;
}
case -2:
break;
default:
break L84;
}
}
if ($182) $$1279 = $$0278$ph339; else {
HEAP32[$$ph + ($$0278$ph339 << 2) >> 2] = HEAP32[$5 >> 2];
$$1279 = $$0278$ph339 + 1 | 0;
}
if ($narrow & ($$1279 | 0) == ($$0276$ph | 0)) break; else $$0278$ph339 = $$1279;
}
$201 = $$0276$ph << 1 | 1;
$203 = _realloc($$ph, $201 << 2) | 0;
if (!$203) {
$$7312 = 0;
$305 = $$ph;
$narrow449 = 1;
label = 135;
break L6;
} else {
$$0278$ph$phi = $$0276$ph;
$$0276$ph = $201;
$$ph = $203;
$$0278$ph = $$0278$ph$phi;
}
}
if (!(_mbsinit($3) | 0)) {
$$7312 = 0;
$305 = $$ph;
$narrow449 = $narrow;
label = 135;
break L6;
} else {
$$4282 = $$0278$ph339;
$$4309 = 0;
$$5299 = $$ph;
$308 = $$ph;
}
} else {
if ($narrow) {
$207 = _malloc($177) | 0;
if (!$207) {
$$7312 = 0;
$305 = 0;
$narrow449 = 1;
label = 135;
break L6;
} else {
$$1277$ph = $177;
$$2280$ph = 0;
$$2307$ph = $207;
}
while (1) {
$$2280 = $$2280$ph;
do {
$209 = HEAP32[$13 >> 2] | 0;
if ($209 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
HEAP32[$13 >> 2] = $209 + 1;
$217 = HEAPU8[$209 >> 0] | 0;
} else $217 = ___shgetc($0) | 0;
if (!(HEAP8[$4 + ($217 + 1) >> 0] | 0)) {
$$4282 = $$2280;
$$4309 = $$2307$ph;
$$5299 = 0;
$308 = 0;
break L75;
}
HEAP8[$$2307$ph + $$2280 >> 0] = $217;
$$2280 = $$2280 + 1 | 0;
} while (($$2280 | 0) != ($$1277$ph | 0));
$225 = $$1277$ph << 1 | 1;
$226 = _realloc($$2307$ph, $225) | 0;
if (!$226) {
$$7312 = $$2307$ph;
$305 = 0;
$narrow449 = 1;
label = 135;
break L6;
} else {
$$2280$ph$phi = $$1277$ph;
$$1277$ph = $225;
$$2307$ph = $226;
$$2280$ph = $$2280$ph$phi;
}
}
}
if (!$$0293) {
$246 = $145;
while (1) {
$244 = HEAP32[$13 >> 2] | 0;
if ($244 >>> 0 < $246 >>> 0) {
HEAP32[$13 >> 2] = $244 + 1;
$252 = HEAPU8[$244 >> 0] | 0;
} else $252 = ___shgetc($0) | 0;
if (!(HEAP8[$4 + ($252 + 1) >> 0] | 0)) {
$$4282 = 0;
$$4309 = 0;
$$5299 = 0;
$308 = 0;
break L75;
}
$246 = HEAP32[$14 >> 2] | 0;
}
} else {
$$3281 = 0;
$231 = $145;
while (1) {
$229 = HEAP32[$13 >> 2] | 0;
if ($229 >>> 0 < $231 >>> 0) {
HEAP32[$13 >> 2] = $229 + 1;
$237 = HEAPU8[$229 >> 0] | 0;
} else $237 = ___shgetc($0) | 0;
if (!(HEAP8[$4 + ($237 + 1) >> 0] | 0)) {
$$4282 = $$3281;
$$4309 = $$0293;
$$5299 = 0;
$308 = 0;
break L75;
}
HEAP8[$$0293 + $$3281 >> 0] = $237;
$$3281 = $$3281 + 1 | 0;
$231 = HEAP32[$14 >> 2] | 0;
}
}
} while (0);
if (!(HEAP32[$14 >> 2] | 0)) $264 = HEAP32[$13 >> 2] | 0; else {
$259 = (HEAP32[$13 >> 2] | 0) + -1 | 0;
HEAP32[$13 >> 2] = $259;
$264 = $259;
}
$265 = $264 - (HEAP32[$16 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) | 0;
if (!$265) {
$$9314$ph = $$4309;
$$ph354 = $308;
label = 137;
break L6;
}
if (!(($265 | 0) == ($$1267 | 0) | $148 ^ 1)) {
$$9314$ph = $$4309;
$$ph354 = $308;
label = 137;
break L6;
}
do if ($narrow) if ($178) {
HEAP32[$$0293 >> 2] = $$5299;
break;
} else {
HEAP32[$$0293 >> 2] = $$4309;
break;
} while (0);
if ($148) {
$$10 = $$9;
$$5310 = $$4309;
$306 = $308;
} else {
if ($$5299 | 0) HEAP32[$$5299 + ($$4282 << 2) >> 2] = 0;
if (!$$4309) {
$$10 = $$9;
$$5310 = 0;
$306 = $308;
break L55;
}
HEAP8[$$4309 + $$4282 >> 0] = 0;
$$10 = $$9;
$$5310 = $$4309;
$306 = $308;
}
break;
}
case 120:
case 88:
case 112:
{
$$0272 = 16;
label = 123;
break;
}
case 111:
{
$$0272 = 8;
label = 123;
break;
}
case 117:
case 100:
{
$$0272 = 10;
label = 123;
break;
}
case 105:
{
$$0272 = 0;
label = 123;
break;
}
case 71:
case 103:
case 70:
case 102:
case 69:
case 101:
case 65:
case 97:
{
$281 = +___floatscan($0, $$$0268, 0);
if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
$$9314$ph = $$$0305;
$$ph354 = $$329;
label = 137;
break L6;
}
if (!$$0293) {
$$10 = $$5;
$$5310 = $$$0305;
$306 = $$329;
} else switch ($$$0268 | 0) {
case 0:
{
$288 = Math_fround($281);
HEAPF32[$$0293 >> 2] = $288;
$$10 = $$5;
$$5310 = $$$0305;
$306 = $$329;
break L55;
break;
}
case 1:
{
HEAPF64[$$0293 >> 3] = $281;
$$10 = $$5;
$$5310 = $$$0305;
$306 = $$329;
break L55;
break;
}
case 2:
{
HEAPF64[$$0293 >> 3] = $281;
$$10 = $$5;
$$5310 = $$$0305;
$306 = $$329;
break L55;
break;
}
default:
{
$$10 = $$5;
$$5310 = $$$0305;
$306 = $$329;
break L55;
}
}
break;
}
default:
{
$$10 = $$5;
$$5310 = $$$0305;
$306 = $$329;
}
} while (0);
do if ((label | 0) == 123) {
label = 0;
$272 = ___intscan($0, $$0272, 0, -1, -1) | 0;
if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
$$9314$ph = $$$0305;
$$ph354 = $$329;
label = 137;
break L6;
}
if ($98 & ($$ | 0) == 112) {
HEAP32[$$0293 >> 2] = $272;
$$10 = $$5;
$$5310 = $$$0305;
$306 = $$329;
break;
} else {
_store_int($$0293, $$$0268, $272, tempRet0);
$$10 = $$5;
$$5310 = $$$0305;
$306 = $$329;
break;
}
} while (0);
$$11 = $$10;
$$1289 = $$0288411 + ($98 & 1) | 0;
$$2285 = (HEAP32[$15 >> 2] | 0) + $$1284 + (HEAP32[$13 >> 2] | 0) - (HEAP32[$16 >> 2] | 0) | 0;
$$6311 = $$5310;
$303 = $306;
break L8;
} while (0);
$55 = $$0273415 + ($51 & 1) | 0;
___shlim($0, 0);
$56 = HEAP32[$13 >> 2] | 0;
if ($56 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
HEAP32[$13 >> 2] = $56 + 1;
$66 = HEAPU8[$56 >> 0] | 0;
} else $66 = ___shgetc($0) | 0;
if (($66 | 0) != (HEAPU8[$55 >> 0] | 0)) {
label = 22;
break L6;
}
$$11 = $55;
$$1289 = $$0288411;
$$2285 = $$0283414 + 1 | 0;
$$6311 = $$0305409;
$303 = $100;
} else {
$$1274 = $$0273415;
while (1) {
$25 = $$1274 + 1 | 0;
if (!(_isspace(HEAPU8[$25 >> 0] | 0) | 0)) break; else $$1274 = $25;
}
___shlim($0, 0);
do {
$30 = HEAP32[$13 >> 2] | 0;
if ($30 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
HEAP32[$13 >> 2] = $30 + 1;
$37 = HEAPU8[$30 >> 0] | 0;
} else $37 = ___shgetc($0) | 0;
} while ((_isspace($37) | 0) != 0);
if (!(HEAP32[$14 >> 2] | 0)) $49 = HEAP32[$13 >> 2] | 0; else {
$43 = (HEAP32[$13 >> 2] | 0) + -1 | 0;
HEAP32[$13 >> 2] = $43;
$49 = $43;
}
$$11 = $$1274;
$$1289 = $$0288411;
$$2285 = (HEAP32[$15 >> 2] | 0) + $$0283414 + $49 - (HEAP32[$16 >> 2] | 0) | 0;
$$6311 = $$0305409;
$303 = $100;
} while (0);
$$0273415 = $$11 + 1 | 0;
$22 = HEAP8[$$0273415 >> 0] | 0;
if (!($22 << 24 >> 24)) {
$$3291 = $$1289;
break L4;
} else {
$$0283414 = $$2285;
$$0288411 = $$1289;
$$0305409 = $$6311;
$100 = $303;
}
}
if ((label | 0) == 22) {
if (HEAP32[$14 >> 2] | 0) HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1;
if (($$0288411 | 0) != 0 | ($66 | 0) > -1) {
$$3291 = $$0288411;
break;
} else {
$$1271 = 0;
$$8313 = $$0305409;
$304 = $100;
label = 136;
}
} else if ((label | 0) == 135) {
$$330$le425 = $narrow449 & 1;
if (!$$0288411) {
$$1271 = $$330$le425;
$$8313 = $$7312;
$304 = $305;
label = 136;
} else {
$$2 = $$330$le425;
$$2290 = $$0288411;
$$9314 = $$7312;
$300 = $305;
}
} else if ((label | 0) == 137) {
$$2 = $narrow & 1;
$$2290 = $$0288411;
$$9314 = $$9314$ph;
$300 = $$ph354;
}
if ((label | 0) == 136) {
$$2 = $$1271;
$$2290 = -1;
$$9314 = $$8313;
$300 = $304;
}
if (!$$2) $$3291 = $$2290; else {
_free($$9314);
_free($300);
$$3291 = $$2290;
}
} while (0);
if ($302 | 0) ___unlockfile($0);
STACKTOP = sp;
return $$3291 | 0;
}
function __ZN14OneArmAnimator5resetEP19OneHConcretePosturef($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
var $$1 = 0, $$138 = 0, $$2 = 0, $$239 = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $104 = 0, $106 = 0, $109 = 0, $11 = 0, $111 = 0, $118 = 0, $12 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $133 = 0, $134 = 0, $138 = 0, $14 = 0, $140 = 0, $144 = 0, $148 = 0, $15 = 0, $153 = 0, $157 = 0, $162 = 0, $165 = 0, $168 = 0, $170 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $177 = 0, $179 = 0, $181 = 0, $183 = 0, $186 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0, $200 = 0, $209 = 0, $212 = 0, $215 = 0, $216 = 0, $217 = 0, $219 = 0, $221 = 0, $222 = 0, $225 = 0, $226 = 0, $227 = 0, $232 = 0, $234 = 0, $235 = 0, $238 = 0, $24 = 0, $240 = 0, $242 = 0, $244 = 0, $246 = 0, $248 = 0, $25 = 0, $250 = 0, $252 = 0, $254 = 0, $255 = 0, $259 = 0, $261 = 0, $265 = 0, $269 = 0, $274 = 0, $278 = 0, $283 = 0, $286 = 0, $289 = 0, $29 = 0, $290 = 0, $294 = 0, $296 = 0, $3 = 0, $30 = 0, $300 = 0, $304 = 0, $309 = 0, $313 = 0, $318 = 0, $321 = 0, $324 = 0, $325 = 0, $329 = 0, $331 = 0, $335 = 0, $339 = 0, $344 = 0, $348 = 0, $353 = 0, $4 = 0, $41 = 0, $46 = 0, $49 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $73 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $82 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $92 = 0, $94 = 0, $95 = 0, $97 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 272 | 0;
$vararg_buffer = sp;
$3 = sp + 152 | 0;
$4 = sp + 136 | 0;
$5 = sp + 120 | 0;
$6 = sp + 104 | 0;
$7 = sp + 88 | 0;
$8 = sp + 76 | 0;
$9 = sp + 64 | 0;
$10 = sp + 48 | 0;
$11 = sp + 32 | 0;
$12 = sp + 16 | 0;
$13 = sp + 4 | 0;
$14 = $0 + 16 | 0;
$15 = HEAP32[$14 >> 2] | 0;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$15 >> 2] | 0) + 12 >> 2] & 255]($15);
$19 = $0 + 20 | 0;
$20 = HEAP32[$19 >> 2] | 0;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$20 >> 2] | 0) + 12 >> 2] & 255]($20);
$24 = $0 + 24 | 0;
$25 = HEAP32[$24 >> 2] | 0;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$25 >> 2] | 0) + 12 >> 2] & 255]($25);
$29 = $0 + 28 | 0;
$30 = HEAP32[$29 >> 2] | 0;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$30 >> 2] | 0) + 12 >> 2] & 255]($30);
HEAP32[$0 >> 2] = 0;
HEAP8[$3 >> 0] = HEAP8[$1 >> 0] | 0;
__ZN6VectorC2ERKS_($3 + 4 | 0, $1 + 4 | 0);
__ZN6VectorC2ERKS_($3 + 16 | 0, $1 + 16 | 0);
__ZN6VectorC2ERKS_($3 + 28 | 0, $1 + 28 | 0);
$41 = $3 + 40 | 0;
HEAP32[$41 >> 2] = HEAP32[$1 + 40 >> 2];
$46 = $3 + 44 | 0;
HEAP32[$46 >> 2] = HEAP32[$1 + 44 >> 2];
$49 = $3 + 48 | 0;
HEAP32[$49 >> 2] = HEAP32[$1 + 48 >> 2];
$52 = $3 + 52 | 0;
HEAP32[$52 >> 2] = HEAP32[$1 + 52 >> 2];
$53 = $3 + 56 | 0;
$54 = $1 + 56 | 0;
HEAP32[$53 >> 2] = HEAP32[$54 >> 2];
HEAP32[$53 + 4 >> 2] = HEAP32[$54 + 4 >> 2];
HEAP32[$53 + 8 >> 2] = HEAP32[$54 + 8 >> 2];
HEAP32[$53 + 12 >> 2] = HEAP32[$54 + 12 >> 2];
HEAP32[$53 + 16 >> 2] = HEAP32[$54 + 16 >> 2];
HEAP32[$3 + 76 >> 2] = HEAP32[$1 + 76 >> 2];
HEAP32[$3 + 80 >> 2] = HEAP32[$1 + 80 >> 2];
HEAP32[$3 + 84 >> 2] = HEAP32[$1 + 84 >> 2];
HEAP32[$3 + 88 >> 2] = HEAP32[$1 + 88 >> 2];
$67 = $3 + 92 | 0;
$68 = $1 + 92 | 0;
HEAP32[$67 >> 2] = HEAP32[$68 >> 2];
HEAP32[$67 + 4 >> 2] = HEAP32[$68 + 4 >> 2];
HEAP32[$67 + 8 >> 2] = HEAP32[$68 + 8 >> 2];
HEAP32[$67 + 12 >> 2] = HEAP32[$68 + 12 >> 2];
HEAP32[$67 + 16 >> 2] = HEAP32[$68 + 16 >> 2];
$69 = $0 + 12 | 0;
$70 = HEAP32[$69 >> 2] | 0;
do if (!$70) {
__THREW__ = 0;
$78 = invoke_ii(20, 64) | 0;
$79 = __THREW__;
__THREW__ = 0;
if ($79 & 1) label = 4; else {
__THREW__ = 0;
invoke_vii(119, $78 | 0, HEAP32[$54 >> 2] | 0);
$82 = __THREW__;
__THREW__ = 0;
if ($82 & 1) {
$85 = ___cxa_find_matching_catch_2() | 0;
$86 = tempRet0;
__ZdlPv($78);
$$2 = $85;
$$239 = $86;
break;
} else {
HEAP32[$69 >> 2] = $78;
$87 = $78;
$97 = $78;
label = 9;
break;
}
}
} else {
__THREW__ = 0;
invoke_vii(118, $70 | 0, HEAP32[$54 >> 2] | 0);
$73 = __THREW__;
__THREW__ = 0;
if ($73 & 1) label = 4; else {
$$pre = HEAP32[$69 >> 2] | 0;
$87 = $$pre;
$97 = $$pre;
label = 9;
}
} while (0);
L9 : do if ((label | 0) == 9) {
HEAP32[$53 >> 2] = $87;
$88 = $0 + 976 | 0;
$89 = HEAP32[$88 >> 2] | 0;
do if (!$89) {
__THREW__ = 0;
$94 = invoke_ii(20, 64) | 0;
$95 = __THREW__;
__THREW__ = 0;
if ($95 & 1) {
label = 4;
break L9;
}
__THREW__ = 0;
invoke_vii(119, $94 | 0, $97 | 0);
$98 = __THREW__;
__THREW__ = 0;
if ($98 & 1) {
$100 = ___cxa_find_matching_catch_2() | 0;
$101 = tempRet0;
__ZdlPv($94);
$$2 = $100;
$$239 = $101;
break L9;
} else {
HEAP32[$88 >> 2] = $94;
break;
}
} else {
__THREW__ = 0;
invoke_vii(118, $89 | 0, HEAP32[$54 >> 2] | 0);
$92 = __THREW__;
__THREW__ = 0;
if ($92 & 1) {
label = 4;
break L9;
}
} while (0);
__THREW__ = 0;
invoke_vi(98, $4 | 0);
$102 = __THREW__;
__THREW__ = 0;
L19 : do if ($102 & 1) label = 19; else {
$104 = $0 + 4 | 0;
__THREW__ = 0;
invoke_viii(77, $3 | 0, HEAP32[$104 >> 2] | 0, $4 | 0);
$106 = __THREW__;
__THREW__ = 0;
if ($106 & 1) label = 19; else {
if (0) {
__THREW__ = 0;
invoke_vii(115, 11957, $vararg_buffer | 0);
$109 = __THREW__;
__THREW__ = 0;
if ($109 & 1) {
label = 19;
break;
}
}
__THREW__ = 0;
invoke_viiiiiiff(1, HEAP32[$104 >> 2] | 0, $14 | 0, (HEAP8[$0 + 8 >> 0] | 0) != 0 | 0, $4 | 0, $41 | 0, $3 + 76 | 0, 0.0, 0.0);
$118 = __THREW__;
__THREW__ = 0;
if ($118 & 1) label = 19; else {
$121 = $5 + 4 | 0;
$122 = $5 + 8 | 0;
$123 = $5 + 12 | 0;
$124 = $6 + 4 | 0;
$125 = $6 + 8 | 0;
$126 = $6 + 12 | 0;
$127 = $7 + 4 | 0;
$128 = $7 + 8 | 0;
$129 = $7 + 12 | 0;
$130 = (HEAP32[16161] | 0) + 96 | 0;
if (Math_fround(HEAPF32[$130 >> 2]) != Math_fround(0.0)) {
$133 = $0 + 1432 | 0;
HEAP32[$133 >> 2] = HEAP32[$130 >> 2];
HEAP32[$133 + 4 >> 2] = HEAP32[$130 + 4 >> 2];
HEAP32[$133 + 8 >> 2] = HEAP32[$130 + 8 >> 2];
HEAP32[$133 + 12 >> 2] = HEAP32[$130 + 12 >> 2];
}
$134 = $0 + 980 | 0;
__THREW__ = 0;
invoke_vif(HEAP32[(HEAP32[$134 >> 2] | 0) + 8 >> 2] | 0, $134 | 0, +$2);
$138 = __THREW__;
__THREW__ = 0;
L29 : do if (!($138 & 1)) {
HEAPF32[$5 >> 2] = Math_fround(0.0);
HEAPF32[$121 >> 2] = Math_fround(0.0);
HEAPF32[$122 >> 2] = Math_fround(0.0);
HEAPF32[$123 >> 2] = Math_fround(1.0);
$140 = HEAP32[$14 >> 2] | 0;
__THREW__ = 0;
invoke_vii(HEAP32[(HEAP32[$140 >> 2] | 0) + 8 >> 2] | 0, $140 | 0, $5 | 0);
$144 = __THREW__;
__THREW__ = 0;
do if (!($144 & 1)) {
$148 = HEAP32[(HEAP32[$134 >> 2] | 0) + 16 >> 2] | 0;
HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
HEAP32[$124 >> 2] = HEAP32[$121 >> 2];
HEAP32[$125 >> 2] = HEAP32[$122 >> 2];
HEAP32[$126 >> 2] = HEAP32[$123 >> 2];
__THREW__ = 0;
invoke_vii($148 | 0, $134 | 0, $6 | 0);
$153 = __THREW__;
__THREW__ = 0;
if (!($153 & 1)) {
$157 = HEAP32[(HEAP32[$134 >> 2] | 0) + 28 >> 2] | 0;
HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
HEAP32[$127 >> 2] = HEAP32[$121 >> 2];
HEAP32[$128 >> 2] = HEAP32[$122 >> 2];
HEAP32[$129 >> 2] = HEAP32[$123 >> 2];
__THREW__ = 0;
invoke_vii($157 | 0, $134 | 0, $7 | 0);
$162 = __THREW__;
__THREW__ = 0;
if (!($162 & 1)) {
$165 = (HEAP32[16161] | 0) + 96 | 0;
if (Math_fround(HEAPF32[$165 >> 2]) != Math_fround(0.0)) {
$254 = $0 + 2076 | 0;
HEAP32[$254 >> 2] = HEAP32[$165 >> 2];
HEAP32[$254 + 4 >> 2] = HEAP32[$165 + 4 >> 2];
HEAP32[$254 + 8 >> 2] = HEAP32[$165 + 8 >> 2];
HEAP32[$254 + 12 >> 2] = HEAP32[$165 + 12 >> 2];
}
$255 = $0 + 1624 | 0;
__THREW__ = 0;
invoke_vif(HEAP32[(HEAP32[$255 >> 2] | 0) + 8 >> 2] | 0, $255 | 0, +$2);
$259 = __THREW__;
__THREW__ = 0;
if ($259 & 1) break L29;
HEAPF32[$5 >> 2] = Math_fround(0.0);
HEAPF32[$121 >> 2] = Math_fround(0.0);
HEAPF32[$122 >> 2] = Math_fround(0.0);
HEAPF32[$123 >> 2] = Math_fround(1.0);
$261 = HEAP32[$19 >> 2] | 0;
__THREW__ = 0;
invoke_vii(HEAP32[(HEAP32[$261 >> 2] | 0) + 8 >> 2] | 0, $261 | 0, $5 | 0);
$265 = __THREW__;
__THREW__ = 0;
if (!($265 & 1)) {
$269 = HEAP32[(HEAP32[$255 >> 2] | 0) + 16 >> 2] | 0;
HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
HEAP32[$124 >> 2] = HEAP32[$121 >> 2];
HEAP32[$125 >> 2] = HEAP32[$122 >> 2];
HEAP32[$126 >> 2] = HEAP32[$123 >> 2];
__THREW__ = 0;
invoke_vii($269 | 0, $255 | 0, $6 | 0);
$274 = __THREW__;
__THREW__ = 0;
if (!($274 & 1)) {
$278 = HEAP32[(HEAP32[$255 >> 2] | 0) + 28 >> 2] | 0;
HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
HEAP32[$127 >> 2] = HEAP32[$121 >> 2];
HEAP32[$128 >> 2] = HEAP32[$122 >> 2];
HEAP32[$129 >> 2] = HEAP32[$123 >> 2];
__THREW__ = 0;
invoke_vii($278 | 0, $255 | 0, $7 | 0);
$283 = __THREW__;
__THREW__ = 0;
if (!($283 & 1)) {
$286 = (HEAP32[16161] | 0) + 96 | 0;
if (Math_fround(HEAPF32[$286 >> 2]) != Math_fround(0.0)) {
$289 = $0 + 2720 | 0;
HEAP32[$289 >> 2] = HEAP32[$286 >> 2];
HEAP32[$289 + 4 >> 2] = HEAP32[$286 + 4 >> 2];
HEAP32[$289 + 8 >> 2] = HEAP32[$286 + 8 >> 2];
HEAP32[$289 + 12 >> 2] = HEAP32[$286 + 12 >> 2];
}
$290 = $0 + 2268 | 0;
__THREW__ = 0;
invoke_vif(HEAP32[(HEAP32[$290 >> 2] | 0) + 8 >> 2] | 0, $290 | 0, +$2);
$294 = __THREW__;
__THREW__ = 0;
if ($294 & 1) break L29;
HEAPF32[$5 >> 2] = Math_fround(0.0);
HEAPF32[$121 >> 2] = Math_fround(0.0);
HEAPF32[$122 >> 2] = Math_fround(0.0);
HEAPF32[$123 >> 2] = Math_fround(1.0);
$296 = HEAP32[$24 >> 2] | 0;
__THREW__ = 0;
invoke_vii(HEAP32[(HEAP32[$296 >> 2] | 0) + 8 >> 2] | 0, $296 | 0, $5 | 0);
$300 = __THREW__;
__THREW__ = 0;
if ($300 & 1) break;
$304 = HEAP32[(HEAP32[$290 >> 2] | 0) + 16 >> 2] | 0;
HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
HEAP32[$124 >> 2] = HEAP32[$121 >> 2];
HEAP32[$125 >> 2] = HEAP32[$122 >> 2];
HEAP32[$126 >> 2] = HEAP32[$123 >> 2];
__THREW__ = 0;
invoke_vii($304 | 0, $290 | 0, $6 | 0);
$309 = __THREW__;
__THREW__ = 0;
if ($309 & 1) break;
$313 = HEAP32[(HEAP32[$290 >> 2] | 0) + 28 >> 2] | 0;
HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
HEAP32[$127 >> 2] = HEAP32[$121 >> 2];
HEAP32[$128 >> 2] = HEAP32[$122 >> 2];
HEAP32[$129 >> 2] = HEAP32[$123 >> 2];
__THREW__ = 0;
invoke_vii($313 | 0, $290 | 0, $7 | 0);
$318 = __THREW__;
__THREW__ = 0;
if ($318 & 1) break;
$321 = (HEAP32[16161] | 0) + 80 | 0;
if (Math_fround(HEAPF32[$321 >> 2]) != Math_fround(0.0)) {
$324 = $0 + 3364 | 0;
HEAP32[$324 >> 2] = HEAP32[$321 >> 2];
HEAP32[$324 + 4 >> 2] = HEAP32[$321 + 4 >> 2];
HEAP32[$324 + 8 >> 2] = HEAP32[$321 + 8 >> 2];
HEAP32[$324 + 12 >> 2] = HEAP32[$321 + 12 >> 2];
}
$325 = $0 + 2912 | 0;
__THREW__ = 0;
invoke_vif(HEAP32[(HEAP32[$325 >> 2] | 0) + 8 >> 2] | 0, $325 | 0, +$2);
$329 = __THREW__;
__THREW__ = 0;
if ($329 & 1) break L29;
HEAPF32[$5 >> 2] = Math_fround(0.0);
HEAPF32[$121 >> 2] = Math_fround(0.0);
HEAPF32[$122 >> 2] = Math_fround(0.0);
HEAPF32[$123 >> 2] = Math_fround(1.0);
$331 = HEAP32[$29 >> 2] | 0;
__THREW__ = 0;
invoke_vii(HEAP32[(HEAP32[$331 >> 2] | 0) + 8 >> 2] | 0, $331 | 0, $5 | 0);
$335 = __THREW__;
__THREW__ = 0;
if ($335 & 1) break;
$339 = HEAP32[(HEAP32[$325 >> 2] | 0) + 16 >> 2] | 0;
HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
HEAP32[$124 >> 2] = HEAP32[$121 >> 2];
HEAP32[$125 >> 2] = HEAP32[$122 >> 2];
HEAP32[$126 >> 2] = HEAP32[$123 >> 2];
__THREW__ = 0;
invoke_vii($339 | 0, $325 | 0, $6 | 0);
$344 = __THREW__;
__THREW__ = 0;
if ($344 & 1) break;
$348 = HEAP32[(HEAP32[$325 >> 2] | 0) + 28 >> 2] | 0;
HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
HEAP32[$127 >> 2] = HEAP32[$121 >> 2];
HEAP32[$128 >> 2] = HEAP32[$122 >> 2];
HEAP32[$129 >> 2] = HEAP32[$123 >> 2];
__THREW__ = 0;
invoke_vii($348 | 0, $325 | 0, $7 | 0);
$353 = __THREW__;
__THREW__ = 0;
if ($353 & 1) break;
$173 = (HEAP32[16161] | 0) + 32 | 0;
if (Math_fround(HEAPF32[$173 >> 2]) != Math_fround(0.0)) {
$172 = $0 + 152 | 0;
HEAP32[$172 >> 2] = HEAP32[$173 >> 2];
HEAP32[$172 + 4 >> 2] = HEAP32[$173 + 4 >> 2];
HEAP32[$172 + 8 >> 2] = HEAP32[$173 + 8 >> 2];
HEAP32[$172 + 12 >> 2] = HEAP32[$173 + 12 >> 2];
}
$174 = $0 + 36 | 0;
__THREW__ = 0;
invoke_vif(8, $174 | 0, +$2);
$175 = __THREW__;
__THREW__ = 0;
if ($175 & 1) {
label = 19;
break L19;
}
__THREW__ = 0;
invoke_vii(120, $8 | 0, $4 | 0);
$177 = __THREW__;
__THREW__ = 0;
if ($177 & 1) {
label = 19;
break L19;
}
__THREW__ = 0;
invoke_vii(3, $174 | 0, $8 | 0);
$179 = __THREW__;
__THREW__ = 0;
if ($179 & 1) {
label = 19;
break L19;
}
__THREW__ = 0;
invoke_vii(120, $9 | 0, $4 | 0);
$181 = __THREW__;
__THREW__ = 0;
if ($181 & 1) {
label = 19;
break L19;
}
__THREW__ = 0;
invoke_vii(6, $174 | 0, $9 | 0);
$183 = __THREW__;
__THREW__ = 0;
if ($183 & 1) {
label = 19;
break L19;
}
$186 = (HEAP32[16161] | 0) + 48 | 0;
if (Math_fround(HEAPF32[$186 >> 2]) != Math_fround(0.0)) {
$189 = $0 + 676 | 0;
HEAP32[$189 >> 2] = HEAP32[$186 >> 2];
HEAP32[$189 + 4 >> 2] = HEAP32[$186 + 4 >> 2];
HEAP32[$189 + 8 >> 2] = HEAP32[$186 + 8 >> 2];
HEAP32[$189 + 12 >> 2] = HEAP32[$186 + 12 >> 2];
}
$190 = $0 + 224 | 0;
__THREW__ = 0;
invoke_vif(10, $190 | 0, +$2);
$191 = __THREW__;
__THREW__ = 0;
if ($191 & 1) {
label = 19;
break L19;
}
HEAP32[$10 >> 2] = HEAP32[$41 >> 2];
HEAP32[$10 + 4 >> 2] = HEAP32[$46 >> 2];
HEAP32[$10 + 8 >> 2] = HEAP32[$49 >> 2];
HEAP32[$10 + 12 >> 2] = HEAP32[$52 >> 2];
__THREW__ = 0;
invoke_vii(9, $190 | 0, $10 | 0);
$200 = __THREW__;
__THREW__ = 0;
if ($200 & 1) {
label = 19;
break L19;
}
HEAP32[$11 >> 2] = HEAP32[$41 >> 2];
HEAP32[$11 + 4 >> 2] = HEAP32[$46 >> 2];
HEAP32[$11 + 8 >> 2] = HEAP32[$49 >> 2];
HEAP32[$11 + 12 >> 2] = HEAP32[$52 >> 2];
__THREW__ = 0;
invoke_vii(12, $190 | 0, $11 | 0);
$209 = __THREW__;
__THREW__ = 0;
if ($209 & 1) {
label = 19;
break L19;
}
$212 = (HEAP32[16161] | 0) + 64 | 0;
if (Math_fround(HEAPF32[$212 >> 2]) != Math_fround(0.0)) {
$215 = $0 + 884 | 0;
HEAP32[$215 >> 2] = HEAP32[$212 >> 2];
HEAP32[$215 + 4 >> 2] = HEAP32[$212 + 4 >> 2];
HEAP32[$215 + 8 >> 2] = HEAP32[$212 + 8 >> 2];
HEAP32[$215 + 12 >> 2] = HEAP32[$212 + 12 >> 2];
}
$216 = $0 + 868 | 0;
__THREW__ = 0;
invoke_vif(1, $216 | 0, +$2);
$217 = __THREW__;
__THREW__ = 0;
if ($217 & 1) {
label = 19;
break L19;
}
__THREW__ = 0;
invoke_vif(2, $216 | 0, 0.0);
$219 = __THREW__;
__THREW__ = 0;
if ($219 & 1) {
label = 19;
break L19;
}
$221 = $0 + 184 | 0;
$222 = $0 + 220 | 0;
$225 = (HEAP32[16161] | 0) + 32 | 0;
$226 = (HEAP32[$222 >> 2] | 0) + 16 | 0;
HEAP32[$226 >> 2] = HEAP32[$225 >> 2];
HEAP32[$226 + 4 >> 2] = HEAP32[$225 + 4 >> 2];
HEAP32[$226 + 8 >> 2] = HEAP32[$225 + 8 >> 2];
HEAP32[$226 + 12 >> 2] = HEAP32[$225 + 12 >> 2];
$227 = HEAP32[$222 >> 2] | 0;
if (!$227) label = 47; else {
__THREW__ = 0;
invoke_vif(HEAP32[(HEAP32[$227 >> 2] | 0) + 8 >> 2] | 0, $227 | 0, +$2);
$232 = __THREW__;
__THREW__ = 0;
if (!($232 & 1)) label = 47;
}
do if ((label | 0) == 47) {
$234 = $0 + 196 | 0;
__THREW__ = 0;
invoke_vii(121, $234 | 0, $221 | 0);
$235 = __THREW__;
__THREW__ = 0;
if ($235 & 1) break;
__THREW__ = 0;
invoke_vii(121, $0 + 208 | 0, $221 | 0);
$238 = __THREW__;
__THREW__ = 0;
if ($238 & 1) break;
__THREW__ = 0;
invoke_vii(120, $12 | 0, $4 | 0);
$240 = __THREW__;
__THREW__ = 0;
if ($240 & 1) break;
__THREW__ = 0;
invoke_vii(122, $221 | 0, $12 | 0);
$242 = __THREW__;
__THREW__ = 0;
if ($242 & 1) break;
__THREW__ = 0;
invoke_vii(120, $13 | 0, $4 | 0);
$244 = __THREW__;
__THREW__ = 0;
if ($244 & 1) break;
__THREW__ = 0;
invoke_vii(121, $234 | 0, $13 | 0);
$246 = __THREW__;
__THREW__ = 0;
if ($246 & 1) break;
__ZN19OneHConcretePostureD2Ev($3);
STACKTOP = sp;
return;
} while (0);
$248 = ___cxa_find_matching_catch_2() | 0;
$$1 = $248;
$$138 = tempRet0;
break L19;
}
}
}
}
}
} while (0);
$170 = ___cxa_find_matching_catch_2() | 0;
$$1 = $170;
$$138 = tempRet0;
break L19;
} while (0);
$168 = ___cxa_find_matching_catch_2() | 0;
$$1 = $168;
$$138 = tempRet0;
}
}
} while (0);
if ((label | 0) == 19) {
$111 = ___cxa_find_matching_catch_2() | 0;
$$1 = $111;
$$138 = tempRet0;
}
$$2 = $$1;
$$239 = $$138;
} while (0);
if ((label | 0) == 4) {
$76 = ___cxa_find_matching_catch_2() | 0;
$$2 = $76;
$$239 = tempRet0;
}
__THREW__ = 0;
invoke_vi(101, $3 | 0);
$250 = __THREW__;
__THREW__ = 0;
if ($250 & 1) {
$252 = ___cxa_find_matching_catch_3(0) | 0;
___clang_call_terminate($252);
} else ___resumeException($$2 | 0);
}
function __Z16SimplifyMovementRP13BasicMovement($0) {
$0 = $0 | 0;
var $$0$111 = f0, $$0$ph36$i = 0, $$014$i$i = 0, $$026$ph$lcssa$i = 0, $$026$ph35$i = 0, $$02851$i = 0, $$02950$i = 0, $$033$i = 0, $$058$i$i = 0, $$098121 = 0, $$1$i = 0, $$pr = 0, $$pre$phi58$iZ2D = 0, $$pre$phiZ2D = 0, $$pre128 = 0, $$pre54$i = 0, $$pre56$i$pre$phiZZZ2D = 0, $1 = 0, $10 = 0.0, $100 = 0, $106 = 0, $111 = 0, $126 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $133 = 0, $134 = 0, $136 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $153 = 0, $156 = 0, $159 = 0, $160 = 0, $162 = f0, $164 = f0, $166 = f0, $168 = f0, $17 = 0, $170 = f0, $172 = f0, $175 = 0, $179 = 0, $18 = 0, $181 = 0, $183 = 0, $184 = 0, $186 = 0, $188 = 0, $19 = 0, $191 = 0, $192 = 0, $196 = 0, $197 = 0, $199 = 0, $2 = 0, $201 = 0, $202 = 0, $204 = 0, $206 = 0, $209 = 0, $21 = 0, $210 = 0, $214 = 0, $215 = 0, $22 = 0, $220 = 0, $221 = 0, $225 = 0, $227 = 0, $230 = 0, $237 = 0, $242 = 0, $245 = 0, $249 = 0, $25 = 0, $251 = 0, $254 = 0, $262 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $283 = 0, $288 = 0, $289 = 0, $292 = 0, $3 = 0, $305 = 0, $307 = 0, $309 = 0, $31 = 0, $318 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $329 = 0, $330 = 0, $333 = f0, $334 = 0, $336 = 0, $339 = 0, $34 = 0, $341 = 0, $347 = 0, $348 = 0, $35 = 0, $361 = 0, $365 = 0, $372 = 0, $375 = 0, $38 = 0, $381 = 0.0, $384 = 0.0, $43 = 0, $45 = f0, $49 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $60 = 0, $61 = 0, $64 = 0, $69 = 0, $71 = f0, $76 = 0, $85 = 0, $86 = 0, $88 = 0, $92 = 0, $94 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer23 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 128 | 0;
$vararg_buffer23 = sp + 96 | 0;
$vararg_buffer18 = sp + 72 | 0;
$vararg_buffer16 = sp + 64 | 0;
$vararg_buffer14 = sp + 56 | 0;
$vararg_buffer12 = sp + 48 | 0;
$vararg_buffer10 = sp + 40 | 0;
$vararg_buffer7 = sp + 32 | 0;
$vararg_buffer5 = sp + 24 | 0;
$vararg_buffer = sp;
$1 = sp + 104 | 0;
$2 = sp + 100 | 0;
$3 = HEAP32[$0 >> 2] | 0;
if (!$3) {
STACKTOP = sp;
return;
}
if (!0) $15 = $3; else {
$10 = +Math_fround(HEAPF32[$3 + 52 >> 2]);
$13 = +Math_fround(HEAPF32[$3 + 40 >> 2]);
HEAP32[$vararg_buffer >> 2] = HEAP32[$3 + 4 >> 2];
HEAPF64[$vararg_buffer + 8 >> 3] = $10;
HEAPF64[$vararg_buffer + 16 >> 3] = $13;
__Z7eprintfPKcz(47553, $vararg_buffer);
$15 = HEAP32[$0 >> 2] | 0;
}
L7 : do switch (HEAP32[$15 + 4 >> 2] | 0) {
case 8:
{
__Z16SimplifyMovementRP13BasicMovement($15 + 696 | 0);
break;
}
case 7:
{
$323 = $15 + 528 | 0;
__Z16SimplifyMovementRP13BasicMovement($323);
$324 = $15 + 532 | 0;
__Z16SimplifyMovementRP13BasicMovement($324);
$325 = HEAP32[$324 >> 2] | 0;
$326 = ($325 | 0) == 0;
if ($326) $$0$111 = Math_fround(0.0); else $$0$111 = Math_fround(HEAPF32[$325 + 52 >> 2]);
HEAPF32[$1 >> 2] = $$0$111;
$329 = HEAP32[$323 >> 2] | 0;
$330 = ($329 | 0) == 0;
if ($330) $333 = Math_fround(0.0); else $333 = Math_fround(HEAPF32[$329 + 52 >> 2]);
HEAPF32[$2 >> 2] = $333;
$334 = $15 + 52 | 0;
$336 = $$0$111 < $333 ? $2 : $1;
$339 = Math_fround(HEAPF32[$334 >> 2]) < Math_fround(HEAPF32[$336 >> 2]);
$341 = HEAP32[($339 ? $336 : $334) >> 2] | 0;
do if ($330) label = 128; else if ((HEAP32[$329 + 4 >> 2] | 0) == 10) label = 128; else {
if (!$326) if ((HEAP32[$325 + 4 >> 2] | 0) != 10) {
label = 140;
break;
}
if (!1) $361 = $325; else {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(47805, $vararg_buffer14);
$361 = HEAP32[$324 >> 2] | 0;
}
if (!$361) label = 140; else {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$361 >> 2] | 0) + 4 >> 2] & 255]($361);
HEAP32[$324 >> 2] = 0;
$365 = HEAP32[$323 >> 2] | 0;
HEAP32[$323 >> 2] = 0;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$15 >> 2] | 0) + 4 >> 2] & 255]($15);
HEAP32[$0 >> 2] = $365;
if (!$365) {
__Z7eprintfPKcz(47861, $vararg_buffer16);
label = 140;
} else {
$372 = $365;
label = 141;
}
}
} while (0);
if ((label | 0) == 128) {
if (!1) $347 = $329; else {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(47713, $vararg_buffer10);
$347 = HEAP32[$323 >> 2] | 0;
}
if (!$347) label = 140; else {
$348 = HEAP32[$324 >> 2] | 0;
HEAP32[$324 >> 2] = 0;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$347 >> 2] | 0) + 4 >> 2] & 255]($347);
HEAP32[$323 >> 2] = 0;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$15 >> 2] | 0) + 4 >> 2] & 255]($15);
HEAP32[$0 >> 2] = $348;
if (!$348) {
__Z7eprintfPKcz(47770, $vararg_buffer12);
label = 140;
} else {
$372 = $348;
label = 141;
}
}
}
if ((label | 0) == 140) {
$$pr = HEAP32[$0 >> 2] | 0;
if ($$pr | 0) {
$372 = $$pr;
label = 141;
}
}
if ((label | 0) == 141) HEAP32[$372 + 52 >> 2] = $341;
break;
}
case 5:
case 6:
{
$17 = $15 + 528 | 0;
$18 = $15 + 540 | 0;
$19 = HEAP32[$18 >> 2] | 0;
switch ($19 | 0) {
case 0:
{
$22 = __Znwj(528) | 0;
__THREW__ = 0;
invoke_viii(89, $22 | 0, 10, HEAP32[$15 + 8 >> 2] | 0);
$25 = __THREW__;
__THREW__ = 0;
if ($25 & 1) {
$49 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($22);
___resumeException($49 | 0);
}
HEAP32[$22 >> 2] = 2368;
HEAP32[$0 >> 2] = $22;
$27 = $15 + 52 | 0;
$28 = $22 + 52 | 0;
$31 = Math_fround(HEAPF32[$27 >> 2]) < Math_fround(HEAPF32[$28 >> 2]);
HEAP32[$28 >> 2] = HEAP32[($31 ? $28 : $27) >> 2];
$34 = $15 + 40 | 0;
$35 = $22 + 40 | 0;
$38 = Math_fround(HEAPF32[$34 >> 2]) < Math_fround(HEAPF32[$35 >> 2]);
HEAP32[$35 >> 2] = HEAP32[($38 ? $35 : $34) >> 2];
$43 = $22 + 56 | 0;
$45 = Math_fround(Math_fround(HEAPF32[$15 + 56 >> 2]) * Math_fround(HEAPF32[$43 >> 2]));
HEAPF32[$43 >> 2] = $45;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$15 >> 2] | 0) + 4 >> 2] & 255]($15);
STACKTOP = sp;
return;
}
case 1:
{
$52 = HEAP32[HEAP32[$17 >> 2] >> 2] | 0;
HEAP32[$0 >> 2] = $52;
$53 = $15 + 52 | 0;
$54 = $52 + 52 | 0;
$57 = Math_fround(HEAPF32[$53 >> 2]) < Math_fround(HEAPF32[$54 >> 2]);
HEAP32[$54 >> 2] = HEAP32[($57 ? $54 : $53) >> 2];
$60 = $15 + 40 | 0;
$61 = $52 + 40 | 0;
$64 = Math_fround(HEAPF32[$60 >> 2]) < Math_fround(HEAPF32[$61 >> 2]);
HEAP32[$61 >> 2] = HEAP32[($64 ? $61 : $60) >> 2];
$69 = $52 + 56 | 0;
$71 = Math_fround(Math_fround(HEAPF32[$15 + 56 >> 2]) * Math_fround(HEAPF32[$69 >> 2]));
HEAPF32[$69 >> 2] = $71;
if ((HEAP32[$15 + 536 >> 2] | 0) <= 0) {
$76 = HEAP32[$15 + 532 >> 2] | 0;
__ZN13DynamicArrayPI13BasicMovementE6resizeEi($17, ($76 | 0) > 1 ? $76 : 1);
}
if ((HEAP32[$18 >> 2] | 0) <= 0) HEAP32[$18 >> 2] = 1;
HEAP32[HEAP32[$17 >> 2] >> 2] = 0;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$15 >> 2] | 0) + 4 >> 2] & 255]($15);
__Z16SimplifyMovementRP13BasicMovement($0);
STACKTOP = sp;
return;
}
default:
{
L42 : do if (($19 | 0) > 0) {
$21 = $15 + 536 | 0;
$$098121 = 0;
do {
if ((HEAP32[$21 >> 2] | 0) > ($$098121 | 0)) $126 = (HEAP32[$17 >> 2] | 0) + ($$098121 << 2) | 0; else $126 = 0;
__Z16SimplifyMovementRP13BasicMovement($126);
$$098121 = $$098121 + 1 | 0;
} while (($$098121 | 0) != ($19 | 0));
$$pre128 = HEAP32[$18 >> 2] | 0;
if (($$pre128 | 0) > 0) {
$85 = $15 + 536 | 0;
$86 = $15 + 532 | 0;
$$0$ph36$i = 0;
$$026$ph35$i = 0;
while (1) {
$$033$i = $$0$ph36$i;
while (1) {
$88 = HEAP32[$18 >> 2] | 0;
if (($$033$i | 0) > -1 & ($88 | 0) > ($$033$i | 0)) {
$92 = HEAP32[(HEAP32[$17 >> 2] | 0) + ($$033$i << 2) >> 2] | 0;
if ($92 | 0) break;
}
$94 = $$033$i + 1 | 0;
if (0) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(47599, $vararg_buffer5);
}
if (($94 | 0) < ($$pre128 | 0)) $$033$i = $94; else {
$$026$ph$lcssa$i = $$026$ph35$i;
break L42;
}
}
if (($$026$ph35$i | 0) < ($$033$i | 0)) {
if ((HEAP32[$85 >> 2] | 0) > ($$026$ph35$i | 0)) $106 = $88; else {
$100 = HEAP32[$86 >> 2] | 0;
__ZN13DynamicArrayPI13BasicMovementE6resizeEi($17, ($100 | 0) > ($$026$ph35$i | 0) ? $100 : $$026$ph35$i + 1 + ($$026$ph35$i >>> 1) | 0);
$106 = HEAP32[$18 >> 2] | 0;
}
if (($106 | 0) <= ($$026$ph35$i | 0)) HEAP32[$18 >> 2] = $$026$ph35$i + 1;
HEAP32[(HEAP32[$17 >> 2] | 0) + ($$026$ph35$i << 2) >> 2] = $92;
}
$$0$ph36$i = $$033$i + 1 | 0;
$111 = $$026$ph35$i + 1 | 0;
if (($$0$ph36$i | 0) >= ($$pre128 | 0)) {
$$026$ph$lcssa$i = $111;
break;
} else $$026$ph35$i = $111;
}
} else $$026$ph$lcssa$i = 0;
} else $$026$ph$lcssa$i = 0; while (0);
if (!(0 == 0 ? 1 : ($$026$ph$lcssa$i | 0) == (HEAP32[$18 >> 2] | 0))) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer7 >> 2] = (HEAP32[$18 >> 2] | 0) - $$026$ph$lcssa$i;
__Z7eprintfPKcz(47626, $vararg_buffer7);
}
HEAP32[$18 >> 2] = $$026$ph$lcssa$i;
__ZN16CompoundMovement6DeNestEv($15);
if ((HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0) != 5) break L7;
$128 = HEAP32[$18 >> 2] | 0;
$129 = $1 + 4 | 0;
HEAP32[$129 >> 2] = 10;
$130 = $1 + 12 | 0;
HEAP32[$130 >> 2] = 0;
HEAP32[$1 >> 2] = 0;
$131 = $1 + 8 | 0;
HEAP32[$131 >> 2] = 0;
L76 : do if (($128 | 0) > 0) {
$133 = $15 + 536 | 0;
$134 = $15 + 532 | 0;
$$02851$i = 0;
$$02950$i = 0;
$237 = $128;
while (1) {
if (($237 | 0) > ($$02950$i | 0)) $242 = HEAP32[(HEAP32[$17 >> 2] | 0) + ($$02950$i << 2) >> 2] | 0; else $242 = 0;
if ((HEAP32[$242 + 4 >> 2] | 0) == 9) {
$245 = HEAP32[$130 >> 2] | 0;
if (($245 | 0) < 0) $$1$i = $$02851$i; else {
if ((HEAP32[$131 >> 2] | 0) > ($245 | 0)) {
$$pre$phi58$iZ2D = $245 + 1 | 0;
label = 89;
} else {
$249 = HEAP32[$129 >> 2] | 0;
$251 = $245 + 1 | 0;
__THREW__ = 0;
invoke_vii(167, $1 | 0, (($249 | 0) > ($245 | 0) ? $249 : $251 + ($245 >>> 1) | 0) | 0);
$254 = __THREW__;
__THREW__ = 0;
if ($254 & 1) break L76;
if ((HEAP32[$130 >> 2] | 0) <= ($245 | 0)) {
$$pre$phi58$iZ2D = $251;
label = 89;
}
}
if ((label | 0) == 89) {
label = 0;
HEAP32[$130 >> 2] = $$pre$phi58$iZ2D;
}
HEAP32[(HEAP32[$1 >> 2] | 0) + ($245 << 2) >> 2] = $242;
$$1$i = $$02851$i;
}
} else {
if (($$02851$i | 0) >= 0) {
if ((HEAP32[$133 >> 2] | 0) > ($$02851$i | 0)) $270 = $237; else {
$262 = HEAP32[$134 >> 2] | 0;
__THREW__ = 0;
invoke_vii(167, $17 | 0, (($262 | 0) > ($$02851$i | 0) ? $262 : $$02851$i + 1 + ($$02851$i >>> 1) | 0) | 0);
$267 = __THREW__;
__THREW__ = 0;
if ($267 & 1) break L76;
$270 = HEAP32[$18 >> 2] | 0;
}
if (($270 | 0) <= ($$02851$i | 0)) HEAP32[$18 >> 2] = $$02851$i + 1;
HEAP32[(HEAP32[$17 >> 2] | 0) + ($$02851$i << 2) >> 2] = $242;
}
$$1$i = $$02851$i + 1 | 0;
}
$275 = $$02950$i + 1 | 0;
if (($275 | 0) >= ($128 | 0)) break;
$$02851$i = $$1$i;
$$02950$i = $275;
$237 = HEAP32[$18 >> 2] | 0;
}
$$pre54$i = HEAP32[$130 >> 2] | 0;
HEAP32[$18 >> 2] = $$1$i;
if (($$pre54$i | 0) < 2) {
$$pre$phiZ2D = $133;
$278 = $$1$i;
$279 = $$pre54$i;
label = 101;
} else {
__THREW__ = 0;
$136 = __THREW__;
__THREW__ = 0;
if (!($136 & 1)) {
$138 = HEAP32[$130 >> 2] | 0;
L109 : do if (($138 | 0) > 0) {
$141 = HEAP32[HEAP32[$1 >> 2] >> 2] | 0;
$143 = HEAP32[$141 + 528 >> 2] | 0;
if (($138 | 0) != 1) {
$145 = $141 + 12 | 0;
$146 = $141 + 40 | 0;
$147 = $141 + 52 | 0;
$148 = $141 + 56 | 0;
$149 = $143 + 36 | 0;
$150 = $143 + 20 | 0;
$151 = $143 + 24 | 0;
$$058$i$i = 1;
$153 = $138;
while (1) {
if (($153 | 0) > ($$058$i$i | 0)) {
$156 = HEAP32[(HEAP32[$1 >> 2] | 0) + ($$058$i$i << 2) >> 2] | 0;
$159 = $156;
$220 = $156;
} else {
$159 = 0;
$220 = 0;
}
$160 = HEAP32[$159 + 12 >> 2] | 0;
if ((HEAP32[$145 >> 2] | 0) < ($160 | 0)) HEAP32[$145 >> 2] = $160;
$162 = Math_fround(HEAPF32[$146 >> 2]);
$164 = Math_fround(HEAPF32[$159 + 40 >> 2]);
if ($162 > $164) HEAPF32[$146 >> 2] = $164;
$166 = Math_fround(HEAPF32[$147 >> 2]);
$168 = Math_fround(HEAPF32[$159 + 52 >> 2]);
if ($166 > $168) HEAPF32[$147 >> 2] = $168;
$170 = Math_fround(HEAPF32[$148 >> 2]);
$172 = Math_fround(HEAPF32[$159 + 56 >> 2]);
if ($170 > $172) HEAPF32[$148 >> 2] = $172;
$175 = HEAP32[$159 + 528 >> 2] | 0;
__THREW__ = 0;
invoke_vii(172, HEAP32[$149 >> 2] | 0, HEAP32[$175 + 36 >> 2] | 0);
$179 = __THREW__;
__THREW__ = 0;
if ($179 & 1) break L76;
$181 = HEAP32[$150 >> 2] | 0;
$183 = $175 + 20 | 0;
$184 = HEAP32[$183 >> 2] | 0;
do if (!$181) {
HEAP32[$150 >> 2] = $184;
HEAP32[$183 >> 2] = 0;
} else {
if (!$184) break;
$186 = $181 + 4 | 0;
$188 = HEAP32[16607] | 0;
if (!(($188 ^ HEAP32[$186 >> 2]) & 16777215)) {
$191 = $184 + 4 | 0;
HEAP32[$186 >> 2] = HEAP32[$191 >> 2];
HEAP32[$186 + 4 >> 2] = HEAP32[$191 + 4 >> 2];
HEAP32[$186 + 8 >> 2] = HEAP32[$191 + 8 >> 2];
}
$192 = $181 + 16 | 0;
if (!((HEAP32[$192 >> 2] ^ $188) & 16777215)) {
$196 = $184 + 16 | 0;
HEAP16[$192 >> 1] = HEAP16[$196 >> 1] | 0;
HEAP8[$192 + 2 >> 0] = HEAP8[$196 + 2 >> 0] | 0;
}
__THREW__ = 0;
invoke_vii(173, $181 | 0, $184 | 0);
$197 = __THREW__;
__THREW__ = 0;
if ($197 & 1) break L76;
} while (0);
$199 = HEAP32[$151 >> 2] | 0;
$201 = $175 + 24 | 0;
$202 = HEAP32[$201 >> 2] | 0;
do if (!$199) {
HEAP32[$151 >> 2] = $202;
HEAP32[$201 >> 2] = 0;
} else {
if (!$202) break;
$204 = $199 + 4 | 0;
$206 = HEAP32[16607] | 0;
if (!(($206 ^ HEAP32[$204 >> 2]) & 16777215)) {
$209 = $202 + 4 | 0;
HEAP32[$204 >> 2] = HEAP32[$209 >> 2];
HEAP32[$204 + 4 >> 2] = HEAP32[$209 + 4 >> 2];
HEAP32[$204 + 8 >> 2] = HEAP32[$209 + 8 >> 2];
}
$210 = $199 + 16 | 0;
if (!((HEAP32[$210 >> 2] ^ $206) & 16777215)) {
$214 = $202 + 16 | 0;
HEAP16[$210 >> 1] = HEAP16[$214 >> 1] | 0;
HEAP8[$210 + 2 >> 0] = HEAP8[$214 + 2 >> 0] | 0;
}
__THREW__ = 0;
invoke_vii(173, $199 | 0, $202 | 0);
$215 = __THREW__;
__THREW__ = 0;
if ($215 & 1) break L76;
} while (0);
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$159 >> 2] | 0) + 4 >> 2] | 0, $220 | 0);
$221 = __THREW__;
__THREW__ = 0;
if ($221 & 1) break L76;
if ((HEAP32[$131 >> 2] | 0) > ($$058$i$i | 0)) $$pre56$i$pre$phiZZZ2D = $$058$i$i + 1 | 0; else {
$225 = HEAP32[$129 >> 2] | 0;
$227 = $$058$i$i + 1 | 0;
__THREW__ = 0;
invoke_vii(167, $1 | 0, (($225 | 0) > ($$058$i$i | 0) ? $225 : $227 + ($$058$i$i >>> 1) | 0) | 0);
$230 = __THREW__;
__THREW__ = 0;
if ($230 & 1) break L76; else $$pre56$i$pre$phiZZZ2D = $227;
}
if ((HEAP32[$130 >> 2] | 0) <= ($$058$i$i | 0)) HEAP32[$130 >> 2] = $$pre56$i$pre$phiZZZ2D;
HEAP32[(HEAP32[$1 >> 2] | 0) + ($$058$i$i << 2) >> 2] = 0;
if (($$pre56$i$pre$phiZZZ2D | 0) == ($138 | 0)) break L109;
$$058$i$i = $$pre56$i$pre$phiZZZ2D;
$153 = HEAP32[$130 >> 2] | 0;
}
}
} while (0);
HEAP32[$130 >> 2] = 1;
$$pre$phiZ2D = $133;
$278 = HEAP32[$18 >> 2] | 0;
$279 = 1;
label = 101;
}
}
} else {
HEAP32[$18 >> 2] = 0;
$$pre$phiZ2D = $15 + 536 | 0;
$278 = 0;
$279 = 0;
label = 101;
} while (0);
do if ((label | 0) == 101) {
$277 = $278 + $279 | 0;
$280 = HEAP32[$$pre$phiZ2D >> 2] | 0;
if (($280 | 0) < ($277 | 0)) {
$283 = HEAP32[$15 + 532 >> 2] | 0;
if (($283 | 0) > ($277 | 0)) $288 = $283; else $288 = $277 + 1 + (($277 | 0) / 2 | 0) | 0;
__THREW__ = 0;
invoke_vii(167, $17 | 0, $288 | 0);
$289 = __THREW__;
__THREW__ = 0;
if ($289 & 1) break;
$292 = HEAP32[$$pre$phiZ2D >> 2] | 0;
} else $292 = $280;
if (($277 | 0) <= ($292 | 0)) {
if ((HEAP32[$130 >> 2] | 0) > 0) {
$$014$i$i = 0;
do {
HEAP32[(HEAP32[$17 >> 2] | 0) + ((HEAP32[$18 >> 2] | 0) + $$014$i$i << 2) >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + ($$014$i$i << 2) >> 2];
$$014$i$i = $$014$i$i + 1 | 0;
} while (($$014$i$i | 0) < (HEAP32[$130 >> 2] | 0));
}
HEAP32[$18 >> 2] = $277;
}
HEAP32[$130 >> 2] = 0;
$305 = HEAP32[$1 >> 2] | 0;
if ($305 | 0) {
_free($305);
HEAP32[$1 >> 2] = 0;
}
if ((HEAP32[$18 >> 2] | 0) != 1) break L7;
HEAP32[$0 >> 2] = HEAP32[HEAP32[$17 >> 2] >> 2];
if ((HEAP32[$$pre$phiZ2D >> 2] | 0) <= 0) {
$318 = HEAP32[$15 + 532 >> 2] | 0;
__ZN13DynamicArrayPI13BasicMovementE6resizeEi($17, ($318 | 0) > 1 ? $318 : 1);
}
if ((HEAP32[$18 >> 2] | 0) <= 0) HEAP32[$18 >> 2] = 1;
HEAP32[HEAP32[$17 >> 2] >> 2] = 0;
break L7;
} while (0);
$307 = ___cxa_find_matching_catch_2() | 0;
$309 = HEAP32[$1 >> 2] | 0;
if (!$309) ___resumeException($307 | 0);
_free($309);
HEAP32[$1 >> 2] = 0;
___resumeException($307 | 0);
}
}
break;
}
default:
{}
} while (0);
if (!0) {
STACKTOP = sp;
return;
}
$375 = HEAP32[$0 >> 2] | 0;
if (!$375) {
__Z7eprintfPKcz(47941, $vararg_buffer23);
STACKTOP = sp;
return;
} else {
$381 = +Math_fround(HEAPF32[$375 + 52 >> 2]);
$384 = +Math_fround(HEAPF32[$375 + 40 >> 2]);
HEAP32[$vararg_buffer18 >> 2] = HEAP32[$375 + 4 >> 2];
HEAPF64[$vararg_buffer18 + 8 >> 3] = $381;
HEAPF64[$vararg_buffer18 + 16 >> 3] = $384;
__Z7eprintfPKcz(47896, $vararg_buffer18);
STACKTOP = sp;
return;
}
}
function __ZN14RepeatMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$pre$phi73Z2D = 0, $$pre$phi75Z2D = 0, $$pre$phi77Z2D = 0, $$pre78 = 0, $$sink = f0, $$sink$i = f0, $$sink$i32 = f0, $$sink2$i = 0, $$sink2$i31 = 0, $$sink3 = f0, $$sink67 = 0, $$sroa$040$0$$sroa_idx = 0, $$sroa$241$0$$sroa_idx42 = 0, $$sroa$343$0$$sroa_idx = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $143 = 0, $202 = f0, $203 = 0, $206 = f0, $210 = 0, $213 = f0, $216 = f0, $219 = 0, $221 = f0, $222 = f0, $226 = f0, $227 = 0, $230 = f0, $232 = f0, $233 = f0, $237 = f0, $238 = 0, $241 = f0, $245 = f0, $246 = f0, $247 = 0, $250 = 0, $252 = f0, $255 = f0, $257 = f0, $259 = 0, $264 = f0, $265 = 0, $268 = 0, $269 = f0, $270 = 0, $280 = f0, $281 = 0, $292 = 0, $293 = 0, $294 = 0, $297 = 0, $3 = 0, $300 = 0, $302 = 0, $317 = 0, $319 = 0, $320 = 0, $323 = 0, $326 = 0, $328 = 0, $339 = f0, $347 = 0.0, $350 = 0.0, $353 = 0.0, $356 = 0.0, $359 = 0.0, $362 = 0.0, $370 = 0.0, $373 = 0.0, $376 = 0, $377 = 0, $379 = 0, $383 = 0, $384 = 0, $389 = 0, $390 = 0, $393 = 0, $396 = 0, $399 = 0, $4 = 0, $401 = 0, $404 = 0, $409 = 0, $410 = 0, $411 = 0, $414 = 0, $415 = 0, $416 = 0, $421 = f0, $427 = f0, $430 = 0, $436 = f0, $442 = f0, $449 = f0, $450 = 0, $451 = 0, $452 = 0, $454 = 0, $456 = 0, $457 = 0, $461 = 0, $465 = 0, $469 = 0, $476 = f0, $481 = 0, $486 = 0, $493 = f0, $5 = 0, $502 = 0.0, $6 = 0, $63 = 0, $67 = 0, $68 = 0, $74 = f0, $8 = 0, $80 = f0, $87 = f0, $88 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $96 = 0, $97 = 0, $tmpcast$i25$byval_copy = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer5 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 144 | 0;
$tmpcast$i25$byval_copy = sp + 128 | 0;
$vararg_buffer18 = sp + 88 | 0;
$vararg_buffer15 = sp + 80 | 0;
$vararg_buffer10 = sp + 56 | 0;
$vararg_buffer5 = sp + 32 | 0;
$vararg_buffer1 = sp + 8 | 0;
$3 = sp + 116 | 0;
$4 = sp + 140 | 0;
$5 = sp + 104 | 0;
$6 = sp + 92 | 0;
if (0) __Z7eprintfPKcz(39693, sp);
$8 = $0 + 696 | 0;
$9 = HEAP32[$8 >> 2] | 0;
$10 = $0 + 60 | 0;
__ZN6Vector7setFromERKS_($9 + 64 | 0, $0 + 64 | 0);
__ZN6Vector7setFromERKS_($9 + 76 | 0, $0 + 76 | 0);
__ZN6Vector7setFromERKS_($9 + 88 | 0, $0 + 88 | 0);
HEAP32[$9 + 124 >> 2] = HEAP32[$0 + 124 >> 2];
HEAP32[$9 + 128 >> 2] = HEAP32[$0 + 128 >> 2];
dest = $9 + 136 | 0;
src = $0 + 136 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[$9 + 100 >> 2] = HEAP32[$0 + 100 >> 2];
HEAP32[$9 + 104 >> 2] = HEAP32[$0 + 104 >> 2];
HEAP32[$9 + 108 >> 2] = HEAP32[$0 + 108 >> 2];
HEAP32[$9 + 112 >> 2] = HEAP32[$0 + 112 >> 2];
__ZN6Vector7setFromERKS_($9 + 176 | 0, $0 + 176 | 0);
__ZN6Vector7setFromERKS_($9 + 188 | 0, $0 + 188 | 0);
__ZN6Vector7setFromERKS_($9 + 200 | 0, $0 + 200 | 0);
HEAP32[$9 + 236 >> 2] = HEAP32[$0 + 236 >> 2];
HEAP32[$9 + 240 >> 2] = HEAP32[$0 + 240 >> 2];
dest = $9 + 248 | 0;
src = $0 + 248 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[$9 + 212 >> 2] = HEAP32[$0 + 212 >> 2];
HEAP32[$9 + 216 >> 2] = HEAP32[$0 + 216 >> 2];
HEAP32[$9 + 220 >> 2] = HEAP32[$0 + 220 >> 2];
HEAP32[$9 + 224 >> 2] = HEAP32[$0 + 224 >> 2];
$63 = HEAP32[$8 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$63 >> 2] | 0) + 20 >> 2] & 127]($63, $1, $2);
$67 = HEAP32[$8 >> 2] | 0;
$$sroa$040$0$$sroa_idx = $0 + 12 | 0;
$$sroa$241$0$$sroa_idx42 = $0 + 16 | 0;
$$sroa$343$0$$sroa_idx = $0 + 20 | 0;
$68 = $0 + 24 | 0;
if (!(HEAP8[72310] | 0)) {
$74 = Math_fround(HEAPF32[64724 + (HEAP32[$$sroa$040$0$$sroa_idx >> 2] << 2) >> 2]);
$$sink$i = Math_fround($74 * Math_fround(HEAPF32[64772 + (HEAP32[$68 >> 2] << 2) >> 2]));
$$sink2$i = 64792 + (HEAP32[$$sroa$241$0$$sroa_idx42 >> 2] << 2) | 0;
} else {
$$sink$i = Math_fround(HEAPF32[16184]);
$$sink2$i = 64800;
}
$80 = Math_fround($$sink$i * Math_fround(HEAPF32[$$sink2$i >> 2]));
if ($80 != Math_fround(1.0)) {
$87 = Math_fround($80 * Math_fround(HEAPF32[$67 + 40 >> 2]));
FUNCTION_TABLE_vifi[HEAP32[(HEAP32[$67 >> 2] | 0) + 64 >> 2] & 7]($67, $87, 1);
}
__ZN13BasicMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture($0, $1, $2);
$88 = $0 + 592 | 0;
$89 = HEAP32[$8 >> 2] | 0;
__ZN6Vector11setSubtractERKS_S1_($88, $89 + 288 | 0, $89 + 64 | 0);
$92 = $0 + 640 | 0;
$93 = HEAP32[$8 >> 2] | 0;
__ZN6Vector11setSubtractERKS_S1_($92, $93 + 400 | 0, $93 + 176 | 0);
$96 = $0 + 568 | 0;
$97 = $0 + 570 | 0;
$100 = $0 + 284 | 0;
$101 = HEAP32[$8 >> 2] | 0;
if (!(HEAP8[$97 >> 0] | 0)) {
$143 = $101 + 284 | 0;
__ZN6Vector7setFromERKS_($0 + 288 | 0, $101 + 288 | 0);
__ZN6Vector7setFromERKS_($0 + 300 | 0, $101 + 300 | 0);
__ZN6Vector7setFromERKS_($0 + 312 | 0, $101 + 312 | 0);
HEAP32[$0 + 348 >> 2] = HEAP32[$101 + 348 >> 2];
HEAP32[$0 + 352 >> 2] = HEAP32[$101 + 352 >> 2];
dest = $0 + 360 | 0;
src = $101 + 360 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[$0 + 324 >> 2] = HEAP32[$101 + 324 >> 2];
HEAP32[$0 + 328 >> 2] = HEAP32[$101 + 328 >> 2];
HEAP32[$0 + 332 >> 2] = HEAP32[$101 + 332 >> 2];
HEAP32[$0 + 336 >> 2] = HEAP32[$101 + 336 >> 2];
__ZN6Vector7setFromERKS_($0 + 400 | 0, $101 + 400 | 0);
__ZN6Vector7setFromERKS_($0 + 412 | 0, $101 + 412 | 0);
__ZN6Vector7setFromERKS_($0 + 424 | 0, $101 + 424 | 0);
HEAP32[$0 + 460 >> 2] = HEAP32[$101 + 460 >> 2];
HEAP32[$0 + 464 >> 2] = HEAP32[$101 + 464 >> 2];
dest = $0 + 472 | 0;
src = $101 + 472 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
$$sink67 = $143;
} else {
$102 = $101 + 60 | 0;
__ZN6Vector7setFromERKS_($0 + 288 | 0, $101 + 64 | 0);
__ZN6Vector7setFromERKS_($0 + 300 | 0, $101 + 76 | 0);
__ZN6Vector7setFromERKS_($0 + 312 | 0, $101 + 88 | 0);
HEAP32[$0 + 348 >> 2] = HEAP32[$101 + 124 >> 2];
HEAP32[$0 + 352 >> 2] = HEAP32[$101 + 128 >> 2];
dest = $0 + 360 | 0;
src = $101 + 136 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[$0 + 324 >> 2] = HEAP32[$101 + 100 >> 2];
HEAP32[$0 + 328 >> 2] = HEAP32[$101 + 104 >> 2];
HEAP32[$0 + 332 >> 2] = HEAP32[$101 + 108 >> 2];
HEAP32[$0 + 336 >> 2] = HEAP32[$101 + 112 >> 2];
__ZN6Vector7setFromERKS_($0 + 400 | 0, $101 + 176 | 0);
__ZN6Vector7setFromERKS_($0 + 412 | 0, $101 + 188 | 0);
__ZN6Vector7setFromERKS_($0 + 424 | 0, $101 + 200 | 0);
HEAP32[$0 + 460 >> 2] = HEAP32[$101 + 236 >> 2];
HEAP32[$0 + 464 >> 2] = HEAP32[$101 + 240 >> 2];
dest = $0 + 472 | 0;
src = $101 + 248 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
$$sink67 = $102;
}
HEAP32[$0 + 436 >> 2] = HEAP32[$$sink67 + 152 >> 2];
HEAP32[$0 + 440 >> 2] = HEAP32[$$sink67 + 156 >> 2];
HEAP32[$0 + 444 >> 2] = HEAP32[$$sink67 + 160 >> 2];
HEAP32[$0 + 448 >> 2] = HEAP32[$$sink67 + 164 >> 2];
do if (!(HEAP8[72310] | 0)) if (!(HEAP8[$0 + 571 >> 0] | 0)) {
$232 = Math_fround(HEAPF32[$0 + 576 >> 2]);
$233 = Math_fround($232 + Math_fround(1.0));
HEAPF32[$0 + 584 >> 2] = $233;
$237 = Math_fround($233 * Math_fround(HEAP16[$96 >> 1] | 0));
$238 = $0 + 588 | 0;
HEAPF32[$238 >> 2] = $237;
if (HEAP8[$97 >> 0] | 0) {
$246 = $237;
break;
}
$241 = Math_fround($237 - $232);
HEAPF32[$238 >> 2] = $241;
$246 = $241;
break;
} else {
$210 = HEAP32[$8 >> 2] | 0;
$213 = Math_fround(__ZL19OneHPostureDistanceRK19OneHConcretePostureS1_($210 + 60 | 0, $210 + 284 | 0));
$216 = Math_fround(__ZL19OneHPostureDistanceRK19OneHConcretePostureS1_($210 + 172 | 0, $210 + 396 | 0));
$219 = $0 + 576 | 0;
$221 = Math_fround(Math_fround(HEAPF32[$219 >> 2]) * ($213 > $216 ? $213 : $216));
HEAPF32[$219 >> 2] = $221;
$222 = Math_fround($221 + Math_fround(1.0));
HEAPF32[$0 + 584 >> 2] = $222;
$226 = Math_fround($222 * Math_fround(HEAP16[$96 >> 1] | 0));
$227 = $0 + 588 | 0;
HEAPF32[$227 >> 2] = $226;
if (HEAP8[$97 >> 0] | 0) {
$246 = $226;
break;
}
$230 = Math_fround($226 - $221);
HEAPF32[$227 >> 2] = $230;
$246 = $230;
break;
} else {
HEAPF32[$0 + 576 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 584 >> 2] = Math_fround(2.0);
$202 = Math_fround(Math_fround(HEAP16[$96 >> 1] | 0) * Math_fround(2.0));
$203 = $0 + 588 | 0;
HEAPF32[$203 >> 2] = $202;
if (!(HEAP8[$97 >> 0] | 0)) {
$206 = Math_fround($202 + Math_fround(-1.0));
HEAPF32[$203 >> 2] = $206;
$246 = $206;
} else $246 = $202;
} while (0);
$245 = Math_fround(Math_fround(HEAPF32[(HEAP32[$8 >> 2] | 0) + 40 >> 2]) * $246);
$247 = $0 + 40 | 0;
HEAPF32[$247 >> 2] = $245;
if (HEAP8[$$sroa$343$0$$sroa_idx >> 0] | 0) {
$250 = HEAP32[$1 >> 2] | 0;
$252 = Math_fround(HEAPF32[$250 + 268 >> 2]);
$255 = Math_fround($252 * Math_fround(HEAPF32[$250 + 232 >> 2]));
HEAPF32[$0 + 44 >> 2] = $255;
$257 = Math_fround($255 + $245);
HEAPF32[$247 >> 2] = $257;
}
$259 = HEAP32[$0 + 536 >> 2] | 0;
if (!$259) {
$$pre$phi75Z2D = $0 + 688 | 0;
$$sink = Math_fround(1.0);
label = 25;
} else {
$264 = Math_fround(HEAPF32[65044 + (HEAP32[$0 + 540 >> 2] << 2) >> 2]);
$265 = $0 + 688 | 0;
HEAPF32[$265 >> 2] = $264;
if (($259 | 0) == 2) {
$$pre$phi75Z2D = $265;
$$sink = Math_fround(Math_fround(1.0) / $264);
label = 25;
}
}
if ((label | 0) == 25) HEAPF32[$$pre$phi75Z2D >> 2] = $$sink;
$268 = $0 + 544 | 0;
$269 = Math_fround(HEAPF32[$268 >> 2]);
$270 = $269 == Math_fround(0.0);
if ($270) if (Math_fround(HEAPF32[$0 + 548 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 552 >> 2]) != Math_fround(0.0)) label = 30; else {
$$pre$phi77Z2D = $0 + 692 | 0;
$$sink3 = Math_fround(1.0);
label = 32;
} else label = 30; else label = 30;
if ((label | 0) == 30) {
$280 = Math_fround(HEAPF32[65044 + (HEAP32[$0 + 564 >> 2] << 2) >> 2]);
$281 = $0 + 692 | 0;
HEAPF32[$281 >> 2] = $280;
if ((HEAP32[$0 + 560 >> 2] | 0) == 2) {
$$pre$phi77Z2D = $281;
$$sink3 = Math_fround(Math_fround(1.0) / $280);
label = 32;
}
}
if ((label | 0) == 32) HEAPF32[$$pre$phi77Z2D >> 2] = $$sink3;
if ($270) if (Math_fround(HEAPF32[$0 + 548 >> 2]) == Math_fround(0.0)) {
if (Math_fround(HEAPF32[$0 + 552 >> 2]) != Math_fround(0.0)) label = 36;
} else label = 36; else label = 36;
if ((label | 0) == 36) {
$292 = $0 + 8 | 0;
$293 = HEAP32[$292 >> 2] | 0;
switch ($293 | 0) {
case 3:
case 5:
{
$294 = $0 + 628 | 0;
HEAPF32[$5 >> 2] = $269;
$297 = HEAP32[$0 + 548 >> 2] | 0;
HEAP32[$5 + 4 >> 2] = $297;
$300 = HEAP32[$0 + 552 >> 2] | 0;
HEAP32[$5 + 8 >> 2] = $300;
$302 = HEAP32[$0 + 556 >> 2] | 0;
if (!(HEAP8[$1 + 13 >> 0] & 32)) {
HEAP16[$4 >> 1] = HEAP16[36081] | 0;
HEAP8[$tmpcast$i25$byval_copy >> 0] = HEAP8[$4 >> 0] | 0;
HEAP8[$tmpcast$i25$byval_copy + 1 >> 0] = HEAP8[$4 + 1 >> 0] | 0;
__ZNK10Direction310makeMirrorE9Mirroring($3, $5, $tmpcast$i25$byval_copy);
} else {
HEAPF32[$3 >> 2] = $269;
HEAP32[$3 + 4 >> 2] = $297;
HEAP32[$3 + 8 >> 2] = $300;
}
__ZN5SiGML19convertDirectionVecER6Vector10Direction3($294, $3);
__ZN6Vector8setScaleEf($294, Math_fround(HEAPF32[64904 + ($302 << 2) >> 2]));
__ZN6Vector8setScaleEf($294, Math_fround(Math_fround(HEAPF32[$0 + 48 >> 2]) * Math_fround(HEAPF32[16223])));
$317 = HEAP32[$292 >> 2] | 0;
break;
}
default:
$317 = $293;
}
if (($317 | 1 | 0) == 5) {
$319 = $0 + 676 | 0;
$320 = HEAP32[$268 >> 2] | 0;
HEAP32[$6 >> 2] = $320;
$323 = HEAP32[$0 + 548 >> 2] | 0;
HEAP32[$6 + 4 >> 2] = $323;
$326 = HEAP32[$0 + 552 >> 2] | 0;
HEAP32[$6 + 8 >> 2] = $326;
$328 = HEAP32[$0 + 556 >> 2] | 0;
if (!(HEAP8[$1 + 13 >> 0] & 32)) {
HEAP16[$4 >> 1] = HEAP16[36081] | 0;
HEAP8[$tmpcast$i25$byval_copy >> 0] = HEAP8[$4 >> 0] | 0;
HEAP8[$tmpcast$i25$byval_copy + 1 >> 0] = HEAP8[$4 + 1 >> 0] | 0;
__ZNK10Direction310makeMirrorE9Mirroring($3, $6, $tmpcast$i25$byval_copy);
} else {
HEAP32[$3 >> 2] = $320;
HEAP32[$3 + 4 >> 2] = $323;
HEAP32[$3 + 8 >> 2] = $326;
}
__ZN5SiGML19convertDirectionVecER6Vector10Direction3($319, $3);
__ZN6Vector8setScaleEf($319, Math_fround(HEAPF32[64904 + ($328 << 2) >> 2]));
$339 = Math_fround(HEAPF32[$0 + 48 >> 2]);
__ZN6Vector8setScaleEf($319, Math_fround($339 * Math_fround(HEAPF32[16223])));
}
if (!((HEAP32[16082] | 0) == 0 | 0 == 0)) {
$347 = +Math_fround(HEAPF32[$0 + 628 >> 2]);
$350 = +Math_fround(HEAPF32[$0 + 632 >> 2]);
$353 = +Math_fround(HEAPF32[$0 + 636 >> 2]);
HEAPF64[$vararg_buffer1 >> 3] = $347;
HEAPF64[$vararg_buffer1 + 8 >> 3] = $350;
HEAPF64[$vararg_buffer1 + 16 >> 3] = $353;
__Z7eprintfPKcz(39711, $vararg_buffer1);
$356 = +Math_fround(HEAPF32[$0 + 676 >> 2]);
$359 = +Math_fround(HEAPF32[$0 + 680 >> 2]);
$362 = +Math_fround(HEAPF32[$0 + 684 >> 2]);
HEAPF64[$vararg_buffer5 >> 3] = $356;
HEAPF64[$vararg_buffer5 + 8 >> 3] = $359;
HEAPF64[$vararg_buffer5 + 16 >> 3] = $362;
__Z7eprintfPKcz(39759, $vararg_buffer5);
}
}
$$pre78 = $0 + 571 | 0;
if (0) {
$370 = +Math_fround(HEAPF32[(HEAP32[$8 >> 2] | 0) + 40 >> 2]);
$373 = +Math_fround(HEAPF32[$0 + 576 >> 2]);
HEAP32[$vararg_buffer10 >> 2] = HEAP8[$$pre78 >> 0] | 0 ? 84 : 70;
HEAPF64[$vararg_buffer10 + 8 >> 3] = $370;
HEAPF64[$vararg_buffer10 + 16 >> 3] = $373;
__Z7eprintfPKcz(39807, $vararg_buffer10);
}
if (!(HEAP8[$$pre78 >> 0] | 0)) {
$450 = $0 + 8 | 0;
$451 = HEAP32[$450 >> 2] | 0;
switch ($451 | 0) {
case 3:
case 5:
{
$452 = $0 + 604 | 0;
__ZN6Vector7setFromERKS_($452, $88);
__ZN6Vector8setScaleEf($452, Math_fround(-1.0));
$454 = HEAP32[$450 >> 2] | 0;
break;
}
default:
$454 = $451;
}
if (($454 | 1 | 0) == 5) {
$456 = $0 + 652 | 0;
__ZN6Vector7setFromERKS_($456, $92);
__ZN6Vector8setScaleEf($456, Math_fround(-1.0));
$$pre$phi73Z2D = $450;
} else $$pre$phi73Z2D = $450;
} else {
$376 = __Znwj(536) | 0;
$377 = $0 + 8 | 0;
__THREW__ = 0;
invoke_viii(89, $376 | 0, 9, HEAP32[$377 >> 2] | 0);
$379 = __THREW__;
__THREW__ = 0;
if ($379 & 1) {
$396 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($376);
___resumeException($396 | 0);
}
HEAP32[$376 >> 2] = 2752;
HEAP32[$376 + 528 >> 2] = 0;
HEAP8[$376 + 532 >> 0] = 0;
$383 = $0 + 700 | 0;
HEAP32[$383 >> 2] = $376;
$384 = HEAP32[$8 >> 2] | 0;
_memcpy($376 + 60 | 0, $384 + 284 | 0, 224) | 0;
_memcpy($376 + 284 | 0, $384 + 60 | 0, 224) | 0;
$389 = HEAP32[$377 >> 2] | 0;
switch ($389 | 0) {
case 3:
case 5:
{
$390 = $0 + 604 | 0;
__ZN6Vector7setFromERKS_($390, $88);
__ZN6Vector8setScaleEf($390, Math_fround(HEAPF32[$0 + 580 >> 2]));
$393 = HEAP32[$383 >> 2] | 0;
__ZN6Vector6setAddERKS_S1_($393 + 288 | 0, $393 + 64 | 0, $390);
$399 = HEAP32[$377 >> 2] | 0;
break;
}
default:
$399 = $389;
}
if (($399 | 1 | 0) == 5) {
$401 = $0 + 652 | 0;
__ZN6Vector7setFromERKS_($401, $92);
__ZN6Vector8setScaleEf($401, Math_fround(HEAPF32[$0 + 580 >> 2]));
$404 = HEAP32[$383 >> 2] | 0;
__ZN6Vector6setAddERKS_S1_($404 + 400 | 0, $404 + 176 | 0, $401);
}
$409 = (HEAP32[$8 >> 2] | 0) + 508 | 0;
$410 = (HEAP32[$383 >> 2] | 0) + 508 | 0;
$411 = HEAPU8[$409 >> 0] | HEAPU8[$409 + 1 >> 0] << 8;
HEAP8[$410 >> 0] = $411;
HEAP8[$410 + 1 >> 0] = $411 >> 8;
$414 = (HEAP32[$8 >> 2] | 0) + 510 | 0;
$415 = (HEAP32[$383 >> 2] | 0) + 510 | 0;
$416 = HEAPU8[$414 >> 0] | HEAPU8[$414 + 1 >> 0] << 8;
HEAP8[$415 >> 0] = $416;
HEAP8[$415 + 1 >> 0] = $416 >> 8;
$421 = Math_fround(HEAPF32[(HEAP32[$8 >> 2] | 0) + 40 >> 2]);
if (!(HEAP8[72310] | 0)) $427 = Math_fround($421 * Math_fround(HEAPF32[$0 + 576 >> 2])); else $427 = $421;
HEAPF32[(HEAP32[$383 >> 2] | 0) + 40 >> 2] = $427;
__ZN11MannerFlags9setMannerE6Manner((HEAP32[$383 >> 2] | 0) + 12 | 0, 1);
$430 = HEAP32[$383 >> 2] | 0;
if (!(HEAP8[72310] | 0)) {
$436 = Math_fround(HEAPF32[64724 + (HEAP32[$$sroa$040$0$$sroa_idx >> 2] << 2) >> 2]);
$$sink$i32 = Math_fround($436 * Math_fround(HEAPF32[64772 + (HEAP32[$68 >> 2] << 2) >> 2]));
$$sink2$i31 = 64792 + (HEAP32[$$sroa$241$0$$sroa_idx42 >> 2] << 2) | 0;
} else {
$$sink$i32 = Math_fround(HEAPF32[16184]);
$$sink2$i31 = 64800;
}
$442 = Math_fround($$sink$i32 * Math_fround(HEAPF32[$$sink2$i31 >> 2]));
if ($442 != Math_fround(1.0)) {
$449 = Math_fround($442 * Math_fround(HEAPF32[$430 + 40 >> 2]));
FUNCTION_TABLE_vifi[HEAP32[(HEAP32[$430 >> 2] | 0) + 64 >> 2] & 7]($430, $449, 1);
$$pre$phi73Z2D = $377;
} else $$pre$phi73Z2D = $377;
}
$457 = HEAP32[$$pre$phi73Z2D >> 2] | 0;
switch ($457 | 0) {
case 3:
case 5:
{
__ZN6Vector6setAddERKS_S1_($0 + 616 | 0, $88, $0 + 604 | 0);
$461 = HEAP32[$$pre$phi73Z2D >> 2] | 0;
break;
}
default:
$461 = $457;
}
if (($461 | 1 | 0) == 5) {
__ZN6Vector6setAddERKS_S1_($0 + 664 | 0, $92, $0 + 652 | 0);
$465 = HEAP32[$$pre$phi73Z2D >> 2] | 0;
} else $465 = $461;
switch ($465 | 0) {
case 3:
case 5:
{
__ZN6VectorC2Ev($tmpcast$i25$byval_copy);
$469 = (HEAP8[$97 >> 0] | 0) != 0;
$476 = Math_fround(HEAPF32[$0 + 692 >> 2]);
__ZL19CalcStartEndRepDispP6VectorS0_ibRKS_S2_S2_S2_ff($tmpcast$i25$byval_copy, 0, (HEAP16[$96 >> 1] | 0) - (($469 ^ 1) & 1) | 0, $469, $88, $0 + 604 | 0, $0 + 616 | 0, $0 + 628 | 0, $476, Math_fround(HEAPF32[$0 + 688 >> 2]));
__ZN6Vector6setAddERKS_($0 + 288 | 0, $tmpcast$i25$byval_copy);
$481 = HEAP32[$$pre$phi73Z2D >> 2] | 0;
break;
}
default:
$481 = $465;
}
if (($481 | 1 | 0) == 5) {
__ZN6VectorC2Ev($tmpcast$i25$byval_copy);
$486 = (HEAP8[$97 >> 0] | 0) != 0;
$493 = Math_fround(HEAPF32[$0 + 692 >> 2]);
__ZL19CalcStartEndRepDispP6VectorS0_ibRKS_S2_S2_S2_ff($tmpcast$i25$byval_copy, 0, (HEAP16[$96 >> 1] | 0) - (($486 ^ 1) & 1) | 0, $486, $92, $0 + 652 | 0, $0 + 664 | 0, $0 + 676 | 0, $493, Math_fround(HEAPF32[$0 + 688 >> 2]));
__ZN6Vector6setAddERKS_($0 + 400 | 0, $tmpcast$i25$byval_copy);
}
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$0 >> 2] | 0) + 68 >> 2] & 255]($0);
if (0) {
$502 = +Math_fround(HEAPF32[$247 >> 2]);
HEAPF64[$vararg_buffer15 >> 3] = $502;
__Z7eprintfPKcz(39856, $vararg_buffer15);
__ZNK25TwoHConcretePostureChange5printEP8_IO_FILE($10, HEAP32[16082] | 0);
}
if (!1) {
STACKTOP = sp;
return;
}
if (__ZNK19TwoHConcretePosture14totallyDefinedE12SET_OF_HANDS($100, HEAP32[$$pre$phi73Z2D >> 2] | 0) | 0) {
STACKTOP = sp;
return;
}
__Z7LogTimev() | 0;
__Z7eprintfPKcz(39877, $vararg_buffer18);
__ZNK25TwoHConcretePostureChange19printFinalUndefinedEP8_IO_FILE12SET_OF_HANDS($10, HEAP32[16082] | 0, HEAP32[$$pre$phi73Z2D >> 2] | 0);
STACKTOP = sp;
return;
}
function _big2_prologTok($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0178$ph = 0, $$0182258 = 0, $$0182258$phi = 0, $$037$i = 0, $$03757$i = 0, $$03759$i = 0, $$056$i = 0, $$05673$i = 0, $$05675$i = 0, $$1 = 0, $$1183 = 0, $$1183255 = 0, $$1183257 = 0, $$mux = 0, $$pn256 = 0, $$pn256$phi = 0, $$pn58$i = 0, $$pn58$i$phi = 0, $$pn74$i = 0, $$pn74$i$phi = 0, $10 = 0, $101 = 0, $11 = 0, $114 = 0, $116 = 0, $118 = 0, $120 = 0, $130 = 0, $131 = 0, $14 = 0, $152 = 0, $154 = 0, $156 = 0, $16 = 0, $165 = 0, $166 = 0, $17 = 0, $19 = 0, $197 = 0, $202 = 0, $203 = 0, $204 = 0, $209 = 0, $222 = 0, $223 = 0, $225 = 0, $227 = 0, $23 = 0, $236 = 0, $237 = 0, $29 = 0, $39 = 0, $58 = 0, $6 = 0, $7 = 0, $71 = 0, $77 = 0, $85 = 0, $9 = 0, $92 = 0, label = 0;
if (($1 | 0) == ($2 | 0)) {
$$1 = -4;
return $$1 | 0;
}
$6 = $1;
$7 = $2 - $6 | 0;
$9 = ($7 & 1 | 0) == 0;
$10 = $7 & -2;
$11 = ($10 | 0) == 0;
$$mux = $9 | $11 ? $2 : $1 + $10 | 0;
if (!($9 | $11 ^ 1)) {
$$1 = -1;
return $$1 | 0;
}
$14 = HEAP8[$1 >> 0] | 0;
L7 : do switch ($14 << 24 >> 24) {
case 0:
{
$17 = $0 + 72 | 0;
$19 = HEAP8[$1 + 1 >> 0] | 0;
do switch (HEAP8[$17 + ($19 & 255) >> 0] | 0) {
case 7:
{
label = 97;
break L7;
break;
}
case 24:
case 22:
{
$$0178$ph = 18;
break L7;
break;
}
case 29:
{
$203 = $19;
label = 100;
break L7;
break;
}
case 12:
{
$$1 = _big2_scanLit(12, $0, $1 + 2 | 0, $$mux, $3) | 0;
return $$1 | 0;
}
case 13:
{
$$1 = _big2_scanLit(13, $0, $1 + 2 | 0, $$mux, $3) | 0;
return $$1 | 0;
}
case 2:
{
$29 = $1 + 2 | 0;
if (($29 | 0) == ($$mux | 0)) {
$$1 = -1;
return $$1 | 0;
}
L19 : do switch (HEAP8[$29 >> 0] | 0) {
case 0:
{
switch (HEAP8[$17 + (HEAPU8[$1 + 3 >> 0] | 0) >> 0] | 0) {
case 7:
case 6:
case 5:
case 29:
case 24:
case 22:
{
label = 31;
break L19;
break;
}
case 16:
break;
case 15:
{
$$1 = _big2_scanPi($0, $1 + 4 | 0, $$mux, $3) | 0;
return $$1 | 0;
}
default:
{
label = 32;
break L19;
}
}
$39 = $1 + 4 | 0;
if (($39 | 0) == ($$mux | 0)) {
$$1 = -1;
return $$1 | 0;
}
L28 : do if (!(HEAP8[$39 >> 0] | 0)) switch (HEAP8[$17 + (HEAPU8[$1 + 5 >> 0] | 0) >> 0] | 0) {
case 27:
{
$$1 = _big2_scanComment($0, $1 + 6 | 0, $$mux, $3) | 0;
return $$1 | 0;
}
case 20:
{
HEAP32[$3 >> 2] = $1 + 6;
$$1 = 33;
return $$1 | 0;
}
case 24:
case 22:
{
$$03757$i = $1 + 6 | 0;
if (($$03757$i | 0) == ($$mux | 0)) {
$$1 = -1;
return $$1 | 0;
} else {
$$03759$i = $$03757$i;
$$pn58$i = $39;
}
L38 : while (1) {
if (HEAP8[$$03759$i >> 0] | 0) {
label = 29;
break;
}
switch (HEAP8[$17 + (HEAPU8[$$pn58$i + 3 >> 0] | 0) >> 0] | 0) {
case 30:
{
label = 24;
break L38;
break;
}
case 10:
case 9:
case 21:
{
break L38;
break;
}
case 24:
case 22:
break;
default:
{
label = 29;
break L38;
}
}
$$037$i = $$03759$i + 2 | 0;
if (($$037$i | 0) == ($$mux | 0)) {
$$1 = -1;
label = 130;
break;
} else {
$$pn58$i$phi = $$03759$i;
$$03759$i = $$037$i;
$$pn58$i = $$pn58$i$phi;
}
}
L42 : do if ((label | 0) == 24) {
$58 = $$pn58$i + 4 | 0;
if (($58 | 0) == ($$mux | 0)) {
$$1 = -1;
return $$1 | 0;
}
if (!(HEAP8[$58 >> 0] | 0)) {
switch (HEAP8[$17 + (HEAPU8[$$pn58$i + 5 >> 0] | 0) >> 0] | 0) {
case 30:
case 10:
case 9:
case 21:
break;
default:
break L42;
}
HEAP32[$3 >> 2] = $$03759$i;
$$1 = 0;
return $$1 | 0;
}
} else if ((label | 0) == 29) {
HEAP32[$3 >> 2] = $$03759$i;
$$1 = 0;
return $$1 | 0;
} else if ((label | 0) == 130) return $$1 | 0; while (0);
HEAP32[$3 >> 2] = $$03759$i;
$$1 = 16;
return $$1 | 0;
}
default:
break L28;
} while (0);
HEAP32[$3 >> 2] = $39;
$$1 = 0;
return $$1 | 0;
}
case -1:
{
if ((HEAPU8[$1 + 3 >> 0] | 0) > 253) label = 32; else label = 31;
break;
}
case -36:
case -35:
case -34:
case -33:
{
label = 32;
break;
}
default:
label = 31;
} while (0);
if ((label | 0) == 31) {
HEAP32[$3 >> 2] = $1;
$$1 = 29;
return $$1 | 0;
} else if ((label | 0) == 32) {
HEAP32[$3 >> 2] = $29;
$$1 = 0;
return $$1 | 0;
}
break;
}
case 9:
{
if (($1 + 2 | 0) == ($$mux | 0)) {
HEAP32[$3 >> 2] = $$mux;
$$1 = -15;
return $$1 | 0;
}
break;
}
case 10:
case 21:
break;
case 30:
{
$$1 = _big2_scanPercent($0, $1 + 2 | 0, $$mux, $3) | 0;
return $$1 | 0;
}
case 35:
{
HEAP32[$3 >> 2] = $1 + 2;
$$1 = 38;
return $$1 | 0;
}
case 20:
{
HEAP32[$3 >> 2] = $1 + 2;
$$1 = 25;
return $$1 | 0;
}
case 4:
{
$85 = $1 + 2 | 0;
if (($85 | 0) == ($$mux | 0)) {
$$1 = -26;
return $$1 | 0;
}
if (!(HEAP8[$85 >> 0] | 0)) if ((HEAP8[$1 + 3 >> 0] | 0) == 93) {
$92 = $1 + 4 | 0;
if (($92 | 0) == ($$mux | 0)) {
$$1 = -1;
return $$1 | 0;
}
if (!(HEAP8[$92 >> 0] | 0)) if ((HEAP8[$1 + 5 >> 0] | 0) == 62) {
HEAP32[$3 >> 2] = $1 + 6;
$$1 = 34;
return $$1 | 0;
}
}
HEAP32[$3 >> 2] = $85;
$$1 = 26;
return $$1 | 0;
}
case 31:
{
HEAP32[$3 >> 2] = $1 + 2;
$$1 = 23;
return $$1 | 0;
}
case 32:
{
$101 = $1 + 2 | 0;
if (($101 | 0) == ($$mux | 0)) {
$$1 = -24;
return $$1 | 0;
}
L93 : do if (!(HEAP8[$101 >> 0] | 0)) switch (HEAP8[$17 + (HEAPU8[$1 + 3 >> 0] | 0) >> 0] | 0) {
case 33:
{
HEAP32[$3 >> 2] = $1 + 4;
$$1 = 36;
return $$1 | 0;
}
case 15:
{
HEAP32[$3 >> 2] = $1 + 4;
$$1 = 35;
return $$1 | 0;
}
case 34:
{
HEAP32[$3 >> 2] = $1 + 4;
$$1 = 37;
return $$1 | 0;
}
case 32:
case 36:
case 35:
case 11:
case 21:
case 10:
case 9:
{
HEAP32[$3 >> 2] = $101;
$$1 = 24;
return $$1 | 0;
}
default:
break L93;
} while (0);
HEAP32[$3 >> 2] = $101;
$$1 = 0;
return $$1 | 0;
}
case 36:
{
HEAP32[$3 >> 2] = $1 + 2;
$$1 = 21;
return $$1 | 0;
}
case 11:
{
HEAP32[$3 >> 2] = $1 + 2;
$$1 = 17;
return $$1 | 0;
}
case 19:
{
$114 = $1 + 2 | 0;
if (($114 | 0) == ($$mux | 0)) {
$$1 = -1;
return $$1 | 0;
}
$116 = HEAP8[$114 >> 0] | 0;
L114 : do switch ($116 << 24 >> 24) {
case 0:
{
$120 = HEAP8[$1 + 3 >> 0] | 0;
switch (HEAP8[$17 + ($120 & 255) >> 0] | 0) {
case 29:
{
$131 = $120;
label = 69;
break L114;
break;
}
case 24:
case 22:
{
break L114;
break;
}
case 7:
{
label = 75;
break L114;
break;
}
case 5:
{
if (($$mux - $114 | 0) < 2) {
$$1 = -2;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $114;
$$1 = 0;
return $$1 | 0;
}
case 6:
{
if (($$mux - $114 | 0) < 3) {
$$1 = -2;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $114;
$$1 = 0;
return $$1 | 0;
}
default:
{
label = 77;
break L114;
}
}
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 75;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 77;
break;
}
case -1:
{
$118 = HEAP8[$1 + 3 >> 0] | 0;
if (($118 & 255) > 253) label = 77; else {
$131 = $118;
label = 69;
}
break;
}
default:
{
$131 = HEAP8[$1 + 3 >> 0] | 0;
label = 69;
}
} while (0);
if ((label | 0) == 69) {
$130 = $131 & 255;
if (!(1 << ($130 & 31) & HEAP32[3996 + ((HEAPU8[59947 + ($116 & 255) >> 0] << 3 | $130 >>> 5) << 2) >> 2])) {
HEAP32[$3 >> 2] = $114;
$$1 = 0;
return $$1 | 0;
}
} else if ((label | 0) == 75) {
if (($$mux - $114 | 0) < 4) {
$$1 = -2;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $114;
$$1 = 0;
return $$1 | 0;
} else if ((label | 0) == 77) {
HEAP32[$3 >> 2] = $114;
$$1 = 0;
return $$1 | 0;
}
$$05673$i = $1 + 4 | 0;
if (($$05673$i | 0) == ($$mux | 0)) {
$$1 = -20;
return $$1 | 0;
} else {
$$05675$i = $$05673$i;
$$pn74$i = $114;
}
L143 : while (1) {
$152 = HEAP8[$$05675$i >> 0] | 0;
switch ($152 << 24 >> 24) {
case -37:
case -38:
case -39:
case -40:
{
label = 89;
break L143;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 92;
break L143;
break;
}
case 0:
{
$156 = HEAP8[$$pn74$i + 3 >> 0] | 0;
switch (HEAP8[$17 + ($156 & 255) >> 0] | 0) {
case 7:
{
label = 89;
break L143;
break;
}
case 5:
{
label = 85;
break L143;
break;
}
case 6:
{
label = 87;
break L143;
break;
}
case 36:
case 30:
case 11:
case 32:
case 21:
case 10:
case 9:
{
label = 91;
break L143;
break;
}
case 29:
{
$166 = $156;
label = 82;
break;
}
case 27:
case 26:
case 25:
case 24:
case 22:
break;
default:
{
label = 92;
break L143;
}
}
break;
}
case -1:
{
$154 = HEAP8[$$pn74$i + 3 >> 0] | 0;
if (($154 & 255) > 253) {
label = 92;
break L143;
} else {
$166 = $154;
label = 82;
}
break;
}
default:
{
$166 = HEAP8[$$pn74$i + 3 >> 0] | 0;
label = 82;
}
}
if ((label | 0) == 82) {
label = 0;
$165 = $166 & 255;
if (!(1 << ($165 & 31) & HEAP32[3996 + ((HEAPU8[60203 + ($152 & 255) >> 0] << 3 | $165 >>> 5) << 2) >> 2])) {
label = 84;
break;
}
}
$$056$i = $$05675$i + 2 | 0;
if (($$056$i | 0) == ($$mux | 0)) {
$$1 = -20;
label = 130;
break;
} else {
$$pn74$i$phi = $$05675$i;
$$05675$i = $$056$i;
$$pn74$i = $$pn74$i$phi;
}
}
if ((label | 0) == 84) {
HEAP32[$3 >> 2] = $$05675$i;
$$1 = 0;
return $$1 | 0;
} else if ((label | 0) == 85) {
if (($$mux - $$05675$i | 0) < 2) {
$$1 = -2;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $$05675$i;
$$1 = 0;
return $$1 | 0;
} else if ((label | 0) == 87) {
if (($$mux - $$05675$i | 0) < 3) {
$$1 = -2;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $$05675$i;
$$1 = 0;
return $$1 | 0;
} else if ((label | 0) == 89) {
if (($$mux - $$05675$i | 0) < 4) {
$$1 = -2;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $$05675$i;
$$1 = 0;
return $$1 | 0;
} else if ((label | 0) == 91) {
HEAP32[$3 >> 2] = $$05675$i;
$$1 = 20;
return $$1 | 0;
} else if ((label | 0) == 92) {
HEAP32[$3 >> 2] = $$05675$i;
$$1 = 0;
return $$1 | 0;
} else if ((label | 0) == 130) return $$1 | 0;
break;
}
case 5:
{
if (($$mux - $6 | 0) < 2) {
$$1 = -2;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $1;
$$1 = 0;
return $$1 | 0;
}
case 6:
{
if (($$mux - $6 | 0) < 3) {
$$1 = -2;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $1;
$$1 = 0;
return $$1 | 0;
}
case 27:
case 26:
case 25:
{
$$0178$ph = 19;
break L7;
break;
}
default:
{
label = 104;
break L7;
}
} while (0);
$23 = $1 + 2 | 0;
L187 : do if (($23 | 0) != ($$mux | 0)) {
$$0182258 = $1;
$71 = $23;
L188 : while (1) {
if (HEAP8[$71 >> 0] | 0) break;
switch (HEAP8[$17 + (HEAPU8[$$0182258 + 3 >> 0] | 0) >> 0] | 0) {
case 10:
case 21:
break;
case 9:
{
if (($$0182258 + 4 | 0) == ($$mux | 0)) break L188;
break;
}
default:
break L188;
}
$77 = $71 + 2 | 0;
if (($77 | 0) == ($$mux | 0)) break L187; else {
$$0182258$phi = $71;
$71 = $77;
$$0182258 = $$0182258$phi;
}
}
HEAP32[$3 >> 2] = $71;
$$1 = 15;
return $$1 | 0;
} while (0);
HEAP32[$3 >> 2] = $$mux;
$$1 = 15;
return $$1 | 0;
}
case -37:
case -38:
case -39:
case -40:
{
label = 97;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 104;
break;
}
case -1:
{
$16 = HEAP8[$1 + 1 >> 0] | 0;
if (($16 & 255) > 253) label = 104; else {
$203 = $16;
label = 100;
}
break;
}
default:
{
$203 = HEAP8[$1 + 1 >> 0] | 0;
label = 100;
}
} while (0);
if ((label | 0) == 97) {
if (($$mux - $6 | 0) < 4) {
$$1 = -2;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $1;
$$1 = 0;
return $$1 | 0;
} else if ((label | 0) == 100) {
$197 = $14 & 255;
$202 = $203 & 255;
$204 = $202 >>> 5;
$209 = 1 << ($202 & 31);
if (!($209 & HEAP32[3996 + (($204 | HEAPU8[59947 + $197 >> 0] << 3) << 2) >> 2])) if (!(HEAP32[3996 + ((HEAPU8[60203 + $197 >> 0] << 3 | $204) << 2) >> 2] & $209)) label = 104; else $$0178$ph = 19; else $$0178$ph = 18;
}
if ((label | 0) == 104) {
HEAP32[$3 >> 2] = $1;
$$1 = 0;
return $$1 | 0;
}
$$1183255 = $1 + 2 | 0;
L211 : do if (($$1183255 | 0) != ($$mux | 0)) {
$222 = $0 + 72 | 0;
$$1183257 = $$1183255;
$$pn256 = $1;
L213 : while (1) {
$223 = HEAP8[$$1183257 >> 0] | 0;
switch ($223 << 24 >> 24) {
case -37:
case -38:
case -39:
case -40:
{
label = 116;
break L213;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 128;
break L213;
break;
}
case 0:
{
$227 = HEAP8[$$pn256 + 3 >> 0] | 0;
switch (HEAP8[$222 + ($227 & 255) >> 0] | 0) {
case 7:
{
label = 116;
break L213;
break;
}
case 5:
{
label = 112;
break L213;
break;
}
case 6:
{
label = 114;
break L213;
break;
}
case 10:
case 9:
case 21:
case 30:
case 20:
case 36:
case 35:
case 32:
case 11:
{
label = 118;
break L213;
break;
}
case 34:
{
label = 119;
break L213;
break;
}
case 33:
{
label = 122;
break L213;
break;
}
case 15:
{
label = 125;
break L213;
break;
}
case 29:
{
$237 = $227;
label = 109;
break;
}
case 27:
case 26:
case 25:
case 24:
case 22:
break;
default:
{
label = 128;
break L213;
}
}
break;
}
case -1:
{
$225 = HEAP8[$$pn256 + 3 >> 0] | 0;
if (($225 & 255) > 253) {
label = 128;
break L213;
} else {
$237 = $225;
label = 109;
}
break;
}
default:
{
$237 = HEAP8[$$pn256 + 3 >> 0] | 0;
label = 109;
}
}
if ((label | 0) == 109) {
label = 0;
$236 = $237 & 255;
if (!(1 << ($236 & 31) & HEAP32[3996 + (($236 >>> 5 | HEAPU8[60203 + ($223 & 255) >> 0] << 3) << 2) >> 2])) {
label = 111;
break;
}
}
$$1183 = $$1183257 + 2 | 0;
if (($$1183 | 0) == ($$mux | 0)) break L211; else {
$$pn256$phi = $$1183257;
$$1183257 = $$1183;
$$pn256 = $$pn256$phi;
}
}
if ((label | 0) == 111) {
HEAP32[$3 >> 2] = $$1183257;
$$1 = 0;
return $$1 | 0;
} else if ((label | 0) == 112) {
if (($$mux - $$1183257 | 0) < 2) {
$$1 = -2;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $$1183257;
$$1 = 0;
return $$1 | 0;
} else if ((label | 0) == 114) {
if (($$mux - $$1183257 | 0) < 3) {
$$1 = -2;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $$1183257;
$$1 = 0;
return $$1 | 0;
} else if ((label | 0) == 116) {
if (($$mux - $$1183257 | 0) < 4) {
$$1 = -2;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $$1183257;
$$1 = 0;
return $$1 | 0;
} else if ((label | 0) == 118) {
HEAP32[$3 >> 2] = $$1183257;
$$1 = $$0178$ph;
return $$1 | 0;
} else if ((label | 0) == 119) if (($$0178$ph | 0) == 19) {
HEAP32[$3 >> 2] = $$1183257;
$$1 = 0;
return $$1 | 0;
} else {
HEAP32[$3 >> 2] = $$pn256 + 4;
$$1 = 32;
return $$1 | 0;
} else if ((label | 0) == 122) if (($$0178$ph | 0) == 19) {
HEAP32[$3 >> 2] = $$1183257;
$$1 = 0;
return $$1 | 0;
} else {
HEAP32[$3 >> 2] = $$pn256 + 4;
$$1 = 31;
return $$1 | 0;
} else if ((label | 0) == 125) if (($$0178$ph | 0) == 19) {
HEAP32[$3 >> 2] = $$1183257;
$$1 = 0;
return $$1 | 0;
} else {
HEAP32[$3 >> 2] = $$pn256 + 4;
$$1 = 30;
return $$1 | 0;
} else if ((label | 0) == 128) {
HEAP32[$3 >> 2] = $$1183257;
$$1 = 0;
return $$1 | 0;
}
} while (0);
$$1 = 0 - $$0178$ph | 0;
return $$1 | 0;
}
function _little2_prologTok($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0178$ph = 0, $$0182258 = 0, $$0182258$phi = 0, $$037$i = 0, $$03757$i = 0, $$03759$i = 0, $$056$i = 0, $$05673$i = 0, $$05675$i = 0, $$1 = 0, $$1183 = 0, $$1183255 = 0, $$1183257 = 0, $$mux = 0, $$pn256 = 0, $$pn256$phi = 0, $$pn58$i = 0, $$pn58$i$phi = 0, $$pn74$i = 0, $$pn74$i$phi = 0, $10 = 0, $11 = 0, $112 = 0, $115 = 0, $116 = 0, $117 = 0, $127 = 0, $128 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $193 = 0, $198 = 0, $199 = 0, $200 = 0, $205 = 0, $218 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $231 = 0, $232 = 0, $28 = 0, $37 = 0, $56 = 0, $6 = 0, $7 = 0, $71 = 0, $75 = 0, $83 = 0, $9 = 0, $90 = 0, $99 = 0, label = 0;
if (($1 | 0) == ($2 | 0)) {
$$1 = -4;
return $$1 | 0;
}
$6 = $1;
$7 = $2 - $6 | 0;
$9 = ($7 & 1 | 0) == 0;
$10 = $7 & -2;
$11 = ($10 | 0) == 0;
$$mux = $9 | $11 ? $2 : $1 + $10 | 0;
if (!($9 | $11 ^ 1)) {
$$1 = -1;
return $$1 | 0;
}
$15 = HEAP8[$1 + 1 >> 0] | 0;
L7 : do switch ($15 << 24 >> 24) {
case 0:
{
$17 = $0 + 72 | 0;
$18 = HEAP8[$1 >> 0] | 0;
do switch (HEAP8[$17 + ($18 & 255) >> 0] | 0) {
case 7:
{
label = 97;
break L7;
break;
}
case 24:
case 22:
{
$$0178$ph = 18;
break L7;
break;
}
case 29:
{
$199 = $18;
label = 100;
break L7;
break;
}
case 12:
{
$$1 = _little2_scanLit(12, $0, $1 + 2 | 0, $$mux, $3) | 0;
return $$1 | 0;
}
case 13:
{
$$1 = _little2_scanLit(13, $0, $1 + 2 | 0, $$mux, $3) | 0;
return $$1 | 0;
}
case 2:
{
$28 = $1 + 2 | 0;
if (($28 | 0) == ($$mux | 0)) {
$$1 = -1;
return $$1 | 0;
}
L19 : do switch (HEAP8[$1 + 3 >> 0] | 0) {
case 0:
{
switch (HEAP8[$17 + (HEAPU8[$28 >> 0] | 0) >> 0] | 0) {
case 7:
case 6:
case 5:
case 29:
case 24:
case 22:
{
label = 31;
break L19;
break;
}
case 16:
break;
case 15:
{
$$1 = _little2_scanPi($0, $1 + 4 | 0, $$mux, $3) | 0;
return $$1 | 0;
}
default:
{
label = 32;
break L19;
}
}
$37 = $1 + 4 | 0;
if (($37 | 0) == ($$mux | 0)) {
$$1 = -1;
return $$1 | 0;
}
L28 : do if (!(HEAP8[$1 + 5 >> 0] | 0)) switch (HEAP8[$17 + (HEAPU8[$37 >> 0] | 0) >> 0] | 0) {
case 27:
{
$$1 = _little2_scanComment($0, $1 + 6 | 0, $$mux, $3) | 0;
return $$1 | 0;
}
case 20:
{
HEAP32[$3 >> 2] = $1 + 6;
$$1 = 33;
return $$1 | 0;
}
case 24:
case 22:
{
$$03757$i = $1 + 6 | 0;
if (($$03757$i | 0) == ($$mux | 0)) {
$$1 = -1;
return $$1 | 0;
} else {
$$03759$i = $$03757$i;
$$pn58$i = $37;
}
L38 : while (1) {
if (HEAP8[$$pn58$i + 3 >> 0] | 0) {
label = 29;
break;
}
switch (HEAP8[$17 + (HEAPU8[$$03759$i >> 0] | 0) >> 0] | 0) {
case 30:
{
label = 24;
break L38;
break;
}
case 10:
case 9:
case 21:
{
break L38;
break;
}
case 24:
case 22:
break;
default:
{
label = 29;
break L38;
}
}
$$037$i = $$03759$i + 2 | 0;
if (($$037$i | 0) == ($$mux | 0)) {
$$1 = -1;
label = 130;
break;
} else {
$$pn58$i$phi = $$03759$i;
$$03759$i = $$037$i;
$$pn58$i = $$pn58$i$phi;
}
}
L42 : do if ((label | 0) == 24) {
$56 = $$pn58$i + 4 | 0;
if (($56 | 0) == ($$mux | 0)) {
$$1 = -1;
return $$1 | 0;
}
if (!(HEAP8[$$pn58$i + 5 >> 0] | 0)) {
switch (HEAP8[$17 + (HEAPU8[$56 >> 0] | 0) >> 0] | 0) {
case 30:
case 10:
case 9:
case 21:
break;
default:
break L42;
}
HEAP32[$3 >> 2] = $$03759$i;
$$1 = 0;
return $$1 | 0;
}
} else if ((label | 0) == 29) {
HEAP32[$3 >> 2] = $$03759$i;
$$1 = 0;
return $$1 | 0;
} else if ((label | 0) == 130) return $$1 | 0; while (0);
HEAP32[$3 >> 2] = $$03759$i;
$$1 = 16;
return $$1 | 0;
}
default:
break L28;
} while (0);
HEAP32[$3 >> 2] = $37;
$$1 = 0;
return $$1 | 0;
}
case -1:
{
if ((HEAPU8[$28 >> 0] | 0) > 253) label = 32; else label = 31;
break;
}
case -36:
case -35:
case -34:
case -33:
{
label = 32;
break;
}
default:
label = 31;
} while (0);
if ((label | 0) == 31) {
HEAP32[$3 >> 2] = $1;
$$1 = 29;
return $$1 | 0;
} else if ((label | 0) == 32) {
HEAP32[$3 >> 2] = $28;
$$1 = 0;
return $$1 | 0;
}
break;
}
case 9:
{
if (($1 + 2 | 0) == ($$mux | 0)) {
HEAP32[$3 >> 2] = $$mux;
$$1 = -15;
return $$1 | 0;
}
break;
}
case 10:
case 21:
break;
case 30:
{
$$1 = _little2_scanPercent($0, $1 + 2 | 0, $$mux, $3) | 0;
return $$1 | 0;
}
case 35:
{
HEAP32[$3 >> 2] = $1 + 2;
$$1 = 38;
return $$1 | 0;
}
case 20:
{
HEAP32[$3 >> 2] = $1 + 2;
$$1 = 25;
return $$1 | 0;
}
case 4:
{
$83 = $1 + 2 | 0;
if (($83 | 0) == ($$mux | 0)) {
$$1 = -26;
return $$1 | 0;
}
if (!(HEAP8[$1 + 3 >> 0] | 0)) if ((HEAP8[$83 >> 0] | 0) == 93) {
$90 = $1 + 4 | 0;
if (($90 | 0) == ($$mux | 0)) {
$$1 = -1;
return $$1 | 0;
}
if (!(HEAP8[$1 + 5 >> 0] | 0)) if ((HEAP8[$90 >> 0] | 0) == 62) {
HEAP32[$3 >> 2] = $1 + 6;
$$1 = 34;
return $$1 | 0;
}
}
HEAP32[$3 >> 2] = $83;
$$1 = 26;
return $$1 | 0;
}
case 31:
{
HEAP32[$3 >> 2] = $1 + 2;
$$1 = 23;
return $$1 | 0;
}
case 32:
{
$99 = $1 + 2 | 0;
if (($99 | 0) == ($$mux | 0)) {
$$1 = -24;
return $$1 | 0;
}
L93 : do if (!(HEAP8[$1 + 3 >> 0] | 0)) switch (HEAP8[$17 + (HEAPU8[$99 >> 0] | 0) >> 0] | 0) {
case 33:
{
HEAP32[$3 >> 2] = $1 + 4;
$$1 = 36;
return $$1 | 0;
}
case 15:
{
HEAP32[$3 >> 2] = $1 + 4;
$$1 = 35;
return $$1 | 0;
}
case 34:
{
HEAP32[$3 >> 2] = $1 + 4;
$$1 = 37;
return $$1 | 0;
}
case 32:
case 36:
case 35:
case 11:
case 21:
case 10:
case 9:
{
HEAP32[$3 >> 2] = $99;
$$1 = 24;
return $$1 | 0;
}
default:
break L93;
} while (0);
HEAP32[$3 >> 2] = $99;
$$1 = 0;
return $$1 | 0;
}
case 36:
{
HEAP32[$3 >> 2] = $1 + 2;
$$1 = 21;
return $$1 | 0;
}
case 11:
{
HEAP32[$3 >> 2] = $1 + 2;
$$1 = 17;
return $$1 | 0;
}
case 19:
{
$112 = $1 + 2 | 0;
if (($112 | 0) == ($$mux | 0)) {
$$1 = -1;
return $$1 | 0;
}
$115 = HEAP8[$1 + 3 >> 0] | 0;
L114 : do switch ($115 << 24 >> 24) {
case 0:
{
$117 = HEAP8[$112 >> 0] | 0;
switch (HEAP8[$17 + ($117 & 255) >> 0] | 0) {
case 29:
{
$128 = $117;
label = 69;
break L114;
break;
}
case 24:
case 22:
{
break L114;
break;
}
case 7:
{
label = 75;
break L114;
break;
}
case 5:
{
if (($$mux - $112 | 0) < 2) {
$$1 = -2;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $112;
$$1 = 0;
return $$1 | 0;
}
case 6:
{
if (($$mux - $112 | 0) < 3) {
$$1 = -2;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $112;
$$1 = 0;
return $$1 | 0;
}
default:
{
label = 77;
break L114;
}
}
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 75;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 77;
break;
}
case -1:
{
$116 = HEAP8[$112 >> 0] | 0;
if (($116 & 255) > 253) label = 77; else {
$128 = $116;
label = 69;
}
break;
}
default:
{
$128 = HEAP8[$112 >> 0] | 0;
label = 69;
}
} while (0);
if ((label | 0) == 69) {
$127 = $128 & 255;
if (!(1 << ($127 & 31) & HEAP32[3996 + ((HEAPU8[59947 + ($115 & 255) >> 0] << 3 | $127 >>> 5) << 2) >> 2])) {
HEAP32[$3 >> 2] = $112;
$$1 = 0;
return $$1 | 0;
}
} else if ((label | 0) == 75) {
if (($$mux - $112 | 0) < 4) {
$$1 = -2;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $112;
$$1 = 0;
return $$1 | 0;
} else if ((label | 0) == 77) {
HEAP32[$3 >> 2] = $112;
$$1 = 0;
return $$1 | 0;
}
$$05673$i = $1 + 4 | 0;
if (($$05673$i | 0) == ($$mux | 0)) {
$$1 = -20;
return $$1 | 0;
} else {
$$05675$i = $$05673$i;
$$pn74$i = $112;
}
L143 : while (1) {
$150 = HEAP8[$$pn74$i + 3 >> 0] | 0;
switch ($150 << 24 >> 24) {
case -37:
case -38:
case -39:
case -40:
{
label = 89;
break L143;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 92;
break L143;
break;
}
case 0:
{
$152 = HEAP8[$$05675$i >> 0] | 0;
switch (HEAP8[$17 + ($152 & 255) >> 0] | 0) {
case 7:
{
label = 89;
break L143;
break;
}
case 5:
{
label = 85;
break L143;
break;
}
case 6:
{
label = 87;
break L143;
break;
}
case 36:
case 30:
case 11:
case 32:
case 21:
case 10:
case 9:
{
label = 91;
break L143;
break;
}
case 29:
{
$162 = $152;
label = 82;
break;
}
case 27:
case 26:
case 25:
case 24:
case 22:
break;
default:
{
label = 92;
break L143;
}
}
break;
}
case -1:
{
$151 = HEAP8[$$05675$i >> 0] | 0;
if (($151 & 255) > 253) {
label = 92;
break L143;
} else {
$162 = $151;
label = 82;
}
break;
}
default:
{
$162 = HEAP8[$$05675$i >> 0] | 0;
label = 82;
}
}
if ((label | 0) == 82) {
label = 0;
$161 = $162 & 255;
if (!(1 << ($161 & 31) & HEAP32[3996 + ((HEAPU8[60203 + ($150 & 255) >> 0] << 3 | $161 >>> 5) << 2) >> 2])) {
label = 84;
break;
}
}
$$056$i = $$05675$i + 2 | 0;
if (($$056$i | 0) == ($$mux | 0)) {
$$1 = -20;
label = 130;
break;
} else {
$$pn74$i$phi = $$05675$i;
$$05675$i = $$056$i;
$$pn74$i = $$pn74$i$phi;
}
}
if ((label | 0) == 84) {
HEAP32[$3 >> 2] = $$05675$i;
$$1 = 0;
return $$1 | 0;
} else if ((label | 0) == 85) {
if (($$mux - $$05675$i | 0) < 2) {
$$1 = -2;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $$05675$i;
$$1 = 0;
return $$1 | 0;
} else if ((label | 0) == 87) {
if (($$mux - $$05675$i | 0) < 3) {
$$1 = -2;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $$05675$i;
$$1 = 0;
return $$1 | 0;
} else if ((label | 0) == 89) {
if (($$mux - $$05675$i | 0) < 4) {
$$1 = -2;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $$05675$i;
$$1 = 0;
return $$1 | 0;
} else if ((label | 0) == 91) {
HEAP32[$3 >> 2] = $$05675$i;
$$1 = 20;
return $$1 | 0;
} else if ((label | 0) == 92) {
HEAP32[$3 >> 2] = $$05675$i;
$$1 = 0;
return $$1 | 0;
} else if ((label | 0) == 130) return $$1 | 0;
break;
}
case 5:
{
if (($$mux - $6 | 0) < 2) {
$$1 = -2;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $1;
$$1 = 0;
return $$1 | 0;
}
case 6:
{
if (($$mux - $6 | 0) < 3) {
$$1 = -2;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $1;
$$1 = 0;
return $$1 | 0;
}
case 27:
case 26:
case 25:
{
$$0178$ph = 19;
break L7;
break;
}
default:
{
label = 104;
break L7;
}
} while (0);
$22 = $1 + 2 | 0;
L187 : do if (($22 | 0) != ($$mux | 0)) {
$$0182258 = $1;
$71 = $22;
L188 : while (1) {
if (HEAP8[$$0182258 + 3 >> 0] | 0) break;
switch (HEAP8[$17 + (HEAPU8[$71 >> 0] | 0) >> 0] | 0) {
case 10:
case 21:
break;
case 9:
{
if (($$0182258 + 4 | 0) == ($$mux | 0)) break L188;
break;
}
default:
break L188;
}
$75 = $71 + 2 | 0;
if (($75 | 0) == ($$mux | 0)) break L187; else {
$$0182258$phi = $71;
$71 = $75;
$$0182258 = $$0182258$phi;
}
}
HEAP32[$3 >> 2] = $71;
$$1 = 15;
return $$1 | 0;
} while (0);
HEAP32[$3 >> 2] = $$mux;
$$1 = 15;
return $$1 | 0;
}
case -37:
case -38:
case -39:
case -40:
{
label = 97;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 104;
break;
}
case -1:
{
$16 = HEAP8[$1 >> 0] | 0;
if (($16 & 255) > 253) label = 104; else {
$199 = $16;
label = 100;
}
break;
}
default:
{
$199 = HEAP8[$1 >> 0] | 0;
label = 100;
}
} while (0);
if ((label | 0) == 97) {
if (($$mux - $6 | 0) < 4) {
$$1 = -2;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $1;
$$1 = 0;
return $$1 | 0;
} else if ((label | 0) == 100) {
$193 = $15 & 255;
$198 = $199 & 255;
$200 = $198 >>> 5;
$205 = 1 << ($198 & 31);
if (!($205 & HEAP32[3996 + (($200 | HEAPU8[59947 + $193 >> 0] << 3) << 2) >> 2])) if (!(HEAP32[3996 + ((HEAPU8[60203 + $193 >> 0] << 3 | $200) << 2) >> 2] & $205)) label = 104; else $$0178$ph = 19; else $$0178$ph = 18;
}
if ((label | 0) == 104) {
HEAP32[$3 >> 2] = $1;
$$1 = 0;
return $$1 | 0;
}
$$1183255 = $1 + 2 | 0;
L211 : do if (($$1183255 | 0) != ($$mux | 0)) {
$218 = $0 + 72 | 0;
$$1183257 = $$1183255;
$$pn256 = $1;
L213 : while (1) {
$220 = HEAP8[$$pn256 + 3 >> 0] | 0;
switch ($220 << 24 >> 24) {
case -37:
case -38:
case -39:
case -40:
{
label = 116;
break L213;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 128;
break L213;
break;
}
case 0:
{
$222 = HEAP8[$$1183257 >> 0] | 0;
switch (HEAP8[$218 + ($222 & 255) >> 0] | 0) {
case 7:
{
label = 116;
break L213;
break;
}
case 5:
{
label = 112;
break L213;
break;
}
case 6:
{
label = 114;
break L213;
break;
}
case 10:
case 9:
case 21:
case 30:
case 20:
case 36:
case 35:
case 32:
case 11:
{
label = 118;
break L213;
break;
}
case 34:
{
label = 119;
break L213;
break;
}
case 33:
{
label = 122;
break L213;
break;
}
case 15:
{
label = 125;
break L213;
break;
}
case 29:
{
$232 = $222;
label = 109;
break;
}
case 27:
case 26:
case 25:
case 24:
case 22:
break;
default:
{
label = 128;
break L213;
}
}
break;
}
case -1:
{
$221 = HEAP8[$$1183257 >> 0] | 0;
if (($221 & 255) > 253) {
label = 128;
break L213;
} else {
$232 = $221;
label = 109;
}
break;
}
default:
{
$232 = HEAP8[$$1183257 >> 0] | 0;
label = 109;
}
}
if ((label | 0) == 109) {
label = 0;
$231 = $232 & 255;
if (!(1 << ($231 & 31) & HEAP32[3996 + (($231 >>> 5 | HEAPU8[60203 + ($220 & 255) >> 0] << 3) << 2) >> 2])) {
label = 111;
break;
}
}
$$1183 = $$1183257 + 2 | 0;
if (($$1183 | 0) == ($$mux | 0)) break L211; else {
$$pn256$phi = $$1183257;
$$1183257 = $$1183;
$$pn256 = $$pn256$phi;
}
}
if ((label | 0) == 111) {
HEAP32[$3 >> 2] = $$1183257;
$$1 = 0;
return $$1 | 0;
} else if ((label | 0) == 112) {
if (($$mux - $$1183257 | 0) < 2) {
$$1 = -2;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $$1183257;
$$1 = 0;
return $$1 | 0;
} else if ((label | 0) == 114) {
if (($$mux - $$1183257 | 0) < 3) {
$$1 = -2;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $$1183257;
$$1 = 0;
return $$1 | 0;
} else if ((label | 0) == 116) {
if (($$mux - $$1183257 | 0) < 4) {
$$1 = -2;
return $$1 | 0;
}
HEAP32[$3 >> 2] = $$1183257;
$$1 = 0;
return $$1 | 0;
} else if ((label | 0) == 118) {
HEAP32[$3 >> 2] = $$1183257;
$$1 = $$0178$ph;
return $$1 | 0;
} else if ((label | 0) == 119) if (($$0178$ph | 0) == 19) {
HEAP32[$3 >> 2] = $$1183257;
$$1 = 0;
return $$1 | 0;
} else {
HEAP32[$3 >> 2] = $$pn256 + 4;
$$1 = 32;
return $$1 | 0;
} else if ((label | 0) == 122) if (($$0178$ph | 0) == 19) {
HEAP32[$3 >> 2] = $$1183257;
$$1 = 0;
return $$1 | 0;
} else {
HEAP32[$3 >> 2] = $$pn256 + 4;
$$1 = 31;
return $$1 | 0;
} else if ((label | 0) == 125) if (($$0178$ph | 0) == 19) {
HEAP32[$3 >> 2] = $$1183257;
$$1 = 0;
return $$1 | 0;
} else {
HEAP32[$3 >> 2] = $$pn256 + 4;
$$1 = 30;
return $$1 | 0;
} else if ((label | 0) == 128) {
HEAP32[$3 >> 2] = $$1183257;
$$1 = 0;
return $$1 | 0;
}
} while (0);
$$1 = 0 - $$0178$ph | 0;
return $$1 | 0;
}
function _decfloat($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
var $$0329 = 0, $$0332488 = 0, $$0333 = 0, $$0334 = 0, $$0336484 = 0, $$0340494 = 0, $$0341$lcssa = 0, $$0341461 = 0, $$0341462 = 0, $$0341463 = 0, $$0341511 = 0, $$0345$lcssa = 0, $$0345465 = 0, $$0345466 = 0, $$0345467 = 0, $$0345510 = 0, $$0350$lcssa553 = 0, $$0350492 = 0, $$0360 = 0.0, $$0361 = 0.0, $$0365482 = 0.0, $$0372 = 0, $$0380 = 0, $$0380$ph = 0, $$0385$lcssa552 = 0, $$0385491 = 0, $$0393 = 0, $$0396 = 0, $$0401$lcssa = 0, $$0401471 = 0, $$0401472 = 0, $$0401473 = 0, $$0401507 = 0, $$1 = 0.0, $$10 = 0, $$1330$be = 0, $$1330$ph = 0, $$1335 = 0, $$1337 = 0, $$1362 = 0.0, $$1366 = 0.0, $$1373 = 0, $$1373$ph446 = 0, $$1381 = 0, $$1381$ph = 0, $$1381$ph557 = 0, $$1394$lcssa = 0, $$1394509 = 0, $$2 = 0, $$2343 = 0, $$2347 = 0, $$2352$ph447 = 0, $$2367 = 0.0, $$2374 = 0, $$2387$ph445 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3$be = 0, $$3$lcssa = 0, $$3344501 = 0, $$3348 = 0, $$3364 = 0.0, $$3368 = 0.0, $$3383 = 0, $$3399$lcssa = 0, $$3399508 = 0, $$3512 = 0, $$423 = 0, $$4349493 = 0, $$4354 = 0, $$4354$ph = 0, $$4354$ph558 = 0, $$4376 = 0, $$4384 = 0, $$4389$ph = 0, $$4389$ph443 = 0, $$4400 = 0, $$4483 = 0, $$5 = 0, $$5$in = 0, $$5355486 = 0, $$5390485 = 0, $$6378$ph = 0, $$6487 = 0, $$9481 = 0, $$pre = 0, $$pre551 = 0, $$sink = 0, $$sink419$off0 = 0, $10 = 0, $100 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $122 = 0, $124 = 0, $130 = 0, $134 = 0, $136 = 0, $142 = 0, $148 = 0, $150 = 0, $17 = 0, $172 = 0, $184 = 0, $188 = 0, $191 = 0, $193 = 0, $194 = 0, $195 = 0, $198 = 0, $212 = 0, $213 = 0, $214 = 0, $218 = 0, $220 = 0, $222 = 0, $223 = 0, $229 = 0, $231 = 0, $236 = 0, $243 = 0, $246 = 0, $249 = 0, $25 = 0, $256 = 0, $259 = 0, $26 = 0, $261 = 0, $264 = 0, $267 = 0, $268 = 0, $27 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $277 = 0, $28 = 0, $289 = 0, $29 = 0, $294 = 0, $299 = 0, $302 = 0, $311 = 0.0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0, $320 = 0.0, $323 = 0.0, $327 = 0, $330 = 0, $354 = 0.0, $359 = 0, $366 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $39 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $54 = 0, $55 = 0, $59 = 0, $6 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $99 = 0, $or$cond418 = 0, $or$cond424 = 0, $sum = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 512 | 0;
$6 = sp;
$sum = $3 + $2 | 0;
$7 = 0 - $sum | 0;
$8 = $0 + 4 | 0;
$9 = $0 + 100 | 0;
$$0329 = $1;
$$0396 = 0;
L1 : while (1) {
switch ($$0329 | 0) {
case 46:
{
label = 6;
break L1;
break;
}
case 48:
break;
default:
{
$$0393 = 0;
$$2 = $$0329;
$$2398 = $$0396;
$368 = 0;
$369 = 0;
break L1;
}
}
$10 = HEAP32[$8 >> 2] | 0;
if ($10 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
HEAP32[$8 >> 2] = $10 + 1;
$$0329 = HEAPU8[$10 >> 0] | 0;
$$0396 = 1;
continue;
} else {
$$0329 = ___shgetc($0) | 0;
$$0396 = 1;
continue;
}
}
if ((label | 0) == 6) {
$17 = HEAP32[$8 >> 2] | 0;
if ($17 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
HEAP32[$8 >> 2] = $17 + 1;
$$1330$ph = HEAPU8[$17 >> 0] | 0;
} else $$1330$ph = ___shgetc($0) | 0;
if (($$1330$ph | 0) == 48) {
$25 = 0;
$26 = 0;
while (1) {
$27 = _i64Add($25 | 0, $26 | 0, -1, -1) | 0;
$28 = tempRet0;
$29 = HEAP32[$8 >> 2] | 0;
if ($29 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
HEAP32[$8 >> 2] = $29 + 1;
$$1330$be = HEAPU8[$29 >> 0] | 0;
} else $$1330$be = ___shgetc($0) | 0;
if (($$1330$be | 0) == 48) {
$25 = $27;
$26 = $28;
} else {
$$0393 = 1;
$$2 = $$1330$be;
$$2398 = 1;
$368 = $27;
$369 = $28;
break;
}
}
} else {
$$0393 = 1;
$$2 = $$1330$ph;
$$2398 = $$0396;
$368 = 0;
$369 = 0;
}
}
HEAP32[$6 >> 2] = 0;
$37 = $$2 + -48 | 0;
$39 = ($$2 | 0) == 46;
L20 : do if ($39 | $37 >>> 0 < 10) {
$41 = $6 + 496 | 0;
$$0341511 = 0;
$$0345510 = 0;
$$0401507 = 0;
$$1394509 = $$0393;
$$3399508 = $$2398;
$$3512 = $$2;
$370 = $39;
$371 = $37;
$372 = $368;
$373 = $369;
$44 = 0;
$45 = 0;
L22 : while (1) {
do if ($370) if (!$$1394509) {
$$2343 = $$0341511;
$$2347 = $$0345510;
$$2395 = 1;
$$2403 = $$0401507;
$$4400 = $$3399508;
$374 = $44;
$375 = $45;
$376 = $44;
$377 = $45;
} else break L22; else {
$46 = _i64Add($44 | 0, $45 | 0, 1, 0) | 0;
$47 = tempRet0;
$48 = ($$3512 | 0) != 48;
if (($$0345510 | 0) >= 125) {
if (!$48) {
$$2343 = $$0341511;
$$2347 = $$0345510;
$$2395 = $$1394509;
$$2403 = $$0401507;
$$4400 = $$3399508;
$374 = $372;
$375 = $373;
$376 = $46;
$377 = $47;
break;
}
HEAP32[$41 >> 2] = HEAP32[$41 >> 2] | 1;
$$2343 = $$0341511;
$$2347 = $$0345510;
$$2395 = $$1394509;
$$2403 = $$0401507;
$$4400 = $$3399508;
$374 = $372;
$375 = $373;
$376 = $46;
$377 = $47;
break;
}
$$pre551 = $6 + ($$0345510 << 2) | 0;
if (!$$0341511) $$sink = $371; else $$sink = $$3512 + -48 + ((HEAP32[$$pre551 >> 2] | 0) * 10 | 0) | 0;
HEAP32[$$pre551 >> 2] = $$sink;
$54 = $$0341511 + 1 | 0;
$55 = ($54 | 0) == 9;
$$2343 = $55 ? 0 : $54;
$$2347 = $$0345510 + ($55 & 1) | 0;
$$2395 = $$1394509;
$$2403 = $48 ? $46 : $$0401507;
$$4400 = 1;
$374 = $372;
$375 = $373;
$376 = $46;
$377 = $47;
} while (0);
$59 = HEAP32[$8 >> 2] | 0;
if ($59 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
HEAP32[$8 >> 2] = $59 + 1;
$$3$be = HEAPU8[$59 >> 0] | 0;
} else $$3$be = ___shgetc($0) | 0;
$371 = $$3$be + -48 | 0;
$370 = ($$3$be | 0) == 46;
if (!($370 | $371 >>> 0 < 10)) {
$$0341$lcssa = $$2343;
$$0345$lcssa = $$2347;
$$0401$lcssa = $$2403;
$$1394$lcssa = $$2395;
$$3$lcssa = $$3$be;
$$3399$lcssa = $$4400;
$72 = $376;
$73 = $374;
$75 = $377;
$76 = $375;
label = 29;
break L20;
} else {
$$0341511 = $$2343;
$$0345510 = $$2347;
$$0401507 = $$2403;
$$1394509 = $$2395;
$$3399508 = $$4400;
$$3512 = $$3$be;
$372 = $374;
$373 = $375;
$44 = $376;
$45 = $377;
}
}
$$0341463 = $$0341511;
$$0345467 = $$0345510;
$$0401473 = $$0401507;
$378 = $44;
$379 = $45;
$380 = $372;
$381 = $373;
$382 = ($$3399508 | 0) != 0;
label = 37;
} else {
$$0341$lcssa = 0;
$$0345$lcssa = 0;
$$0401$lcssa = 0;
$$1394$lcssa = $$0393;
$$3$lcssa = $$2;
$$3399$lcssa = $$2398;
$72 = 0;
$73 = $368;
$75 = 0;
$76 = $369;
label = 29;
} while (0);
do if ((label | 0) == 29) {
$70 = ($$1394$lcssa | 0) == 0;
$71 = $70 ? $72 : $73;
$74 = $70 ? $75 : $76;
$77 = ($$3399$lcssa | 0) != 0;
if (!($77 & ($$3$lcssa | 32 | 0) == 101)) if (($$3$lcssa | 0) > -1) {
$$0341463 = $$0341$lcssa;
$$0345467 = $$0345$lcssa;
$$0401473 = $$0401$lcssa;
$378 = $72;
$379 = $75;
$380 = $71;
$381 = $74;
$382 = $77;
label = 37;
break;
} else {
$$0341462 = $$0341$lcssa;
$$0345466 = $$0345$lcssa;
$$0401472 = $$0401$lcssa;
$383 = $72;
$384 = $75;
$385 = $77;
$386 = $71;
$387 = $74;
label = 39;
break;
}
$80 = _scanexp($0, $5) | 0;
$81 = tempRet0;
if (($80 | 0) == 0 & ($81 | 0) == -2147483648) {
if (!$5) {
___shlim($0, 0);
$$1 = 0.0;
break;
}
if (!(HEAP32[$9 >> 2] | 0)) {
$90 = 0;
$91 = 0;
} else {
HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1;
$90 = 0;
$91 = 0;
}
} else {
$90 = $80;
$91 = $81;
}
$92 = _i64Add($90 | 0, $91 | 0, $71 | 0, $74 | 0) | 0;
$$0341461 = $$0341$lcssa;
$$0345465 = $$0345$lcssa;
$$0401471 = $$0401$lcssa;
$105 = $92;
$106 = $72;
$108 = tempRet0;
$109 = $75;
label = 41;
} while (0);
if ((label | 0) == 37) if (!(HEAP32[$9 >> 2] | 0)) {
$$0341462 = $$0341463;
$$0345466 = $$0345467;
$$0401472 = $$0401473;
$383 = $378;
$384 = $379;
$385 = $382;
$386 = $380;
$387 = $381;
label = 39;
} else {
HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1;
if ($382) {
$$0341461 = $$0341463;
$$0345465 = $$0345467;
$$0401471 = $$0401473;
$105 = $380;
$106 = $378;
$108 = $381;
$109 = $379;
label = 41;
} else label = 40;
}
if ((label | 0) == 39) if ($385) {
$$0341461 = $$0341462;
$$0345465 = $$0345466;
$$0401471 = $$0401472;
$105 = $386;
$106 = $383;
$108 = $387;
$109 = $384;
label = 41;
} else label = 40;
do if ((label | 0) == 40) {
$99 = ___errno_location() | 0;
HEAP32[$99 >> 2] = 22;
___shlim($0, 0);
$$1 = 0.0;
} else if ((label | 0) == 41) {
$100 = HEAP32[$6 >> 2] | 0;
if (!$100) {
$$1 = +($4 | 0) * 0.0;
break;
}
if ((($109 | 0) < 0 | ($109 | 0) == 0 & $106 >>> 0 < 10) & (($105 | 0) == ($106 | 0) & ($108 | 0) == ($109 | 0))) if (($2 | 0) > 30 | ($100 >>> $2 | 0) == 0) {
$$1 = +($4 | 0) * +($100 >>> 0);
break;
}
$122 = ($3 | 0) / -2 | 0;
$124 = (($122 | 0) < 0) << 31 >> 31;
if (($108 | 0) > ($124 | 0) | ($108 | 0) == ($124 | 0) & $105 >>> 0 > $122 >>> 0) {
$130 = ___errno_location() | 0;
HEAP32[$130 >> 2] = 34;
$$1 = +($4 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
break;
}
$134 = $3 + -106 | 0;
$136 = (($134 | 0) < 0) << 31 >> 31;
if (($108 | 0) < ($136 | 0) | ($108 | 0) == ($136 | 0) & $105 >>> 0 < $134 >>> 0) {
$142 = ___errno_location() | 0;
HEAP32[$142 >> 2] = 34;
$$1 = +($4 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
break;
}
if (!$$0341461) $$3348 = $$0345465; else {
if (($$0341461 | 0) < 9) {
$148 = $6 + ($$0345465 << 2) | 0;
$$3344501 = $$0341461;
$150 = HEAP32[$148 >> 2] | 0;
while (1) {
$150 = $150 * 10 | 0;
if (($$3344501 | 0) >= 8) break; else $$3344501 = $$3344501 + 1 | 0;
}
HEAP32[$148 >> 2] = $150;
}
$$3348 = $$0345465 + 1 | 0;
}
if (($$0401471 | 0) < 9) if (($$0401471 | 0) <= ($105 | 0) & ($105 | 0) < 18) {
if (($105 | 0) == 9) {
$$1 = +($4 | 0) * +((HEAP32[$6 >> 2] | 0) >>> 0);
break;
}
if (($105 | 0) < 9) {
$$1 = +($4 | 0) * +((HEAP32[$6 >> 2] | 0) >>> 0) / +(HEAP32[7952 + (8 - $105 << 2) >> 2] | 0);
break;
}
$172 = $2 + 27 + (Math_imul($105, -3) | 0) | 0;
$$pre = HEAP32[$6 >> 2] | 0;
if (($172 | 0) > 30 | ($$pre >>> $172 | 0) == 0) {
$$1 = +($4 | 0) * +($$pre >>> 0) * +(HEAP32[7952 + ($105 + -10 << 2) >> 2] | 0);
break;
}
}
$184 = ($105 | 0) % 9 | 0;
if (!$184) {
$$0380$ph = 0;
$$1373$ph446 = $$3348;
$$2352$ph447 = 0;
$$2387$ph445 = $105;
} else {
$188 = ($105 | 0) > -1 ? $184 : $184 + 9 | 0;
$191 = HEAP32[7952 + (8 - $188 << 2) >> 2] | 0;
if (!$$3348) {
$$0350$lcssa553 = 0;
$$0372 = 0;
$$0385$lcssa552 = $105;
} else {
$193 = 1e9 / ($191 | 0) | 0;
$$0340494 = 0;
$$0350492 = 0;
$$0385491 = $105;
$$4349493 = 0;
do {
$194 = $6 + ($$4349493 << 2) | 0;
$195 = HEAP32[$194 >> 2] | 0;
$198 = (($195 >>> 0) / ($191 >>> 0) | 0) + $$0340494 | 0;
HEAP32[$194 >> 2] = $198;
$$0340494 = Math_imul($193, ($195 >>> 0) % ($191 >>> 0) | 0) | 0;
$or$cond418 = ($$4349493 | 0) == ($$0350492 | 0) & ($198 | 0) == 0;
$$0385491 = $or$cond418 ? $$0385491 + -9 | 0 : $$0385491;
$$0350492 = $or$cond418 ? $$0350492 + 1 & 127 : $$0350492;
$$4349493 = $$4349493 + 1 | 0;
} while (($$4349493 | 0) != ($$3348 | 0));
if (!$$0340494) {
$$0350$lcssa553 = $$0350492;
$$0372 = $$3348;
$$0385$lcssa552 = $$0385491;
} else {
HEAP32[$6 + ($$3348 << 2) >> 2] = $$0340494;
$$0350$lcssa553 = $$0350492;
$$0372 = $$3348 + 1 | 0;
$$0385$lcssa552 = $$0385491;
}
}
$$0380$ph = 0;
$$1373$ph446 = $$0372;
$$2352$ph447 = $$0350$lcssa553;
$$2387$ph445 = 9 - $188 + $$0385$lcssa552 | 0;
}
L101 : while (1) {
$212 = ($$2387$ph445 | 0) < 18;
$213 = ($$2387$ph445 | 0) == 18;
$214 = $6 + ($$2352$ph447 << 2) | 0;
$$0380 = $$0380$ph;
$$1373 = $$1373$ph446;
while (1) {
if (!$212) {
if (!$213) {
$$1381$ph = $$0380;
$$4354$ph = $$2352$ph447;
$$4389$ph443 = $$2387$ph445;
$$6378$ph = $$1373;
break L101;
}
if ((HEAP32[$214 >> 2] | 0) >>> 0 >= 9007199) {
$$1381$ph = $$0380;
$$4354$ph = $$2352$ph447;
$$4389$ph443 = 18;
$$6378$ph = $$1373;
break L101;
}
}
$$0334 = 0;
$$2374 = $$1373;
$$5$in = $$1373 + 127 | 0;
while (1) {
$$5 = $$5$in & 127;
$218 = $6 + ($$5 << 2) | 0;
$220 = _bitshift64Shl(HEAP32[$218 >> 2] | 0, 0, 29) | 0;
$222 = _i64Add($220 | 0, tempRet0 | 0, $$0334 | 0, 0) | 0;
$223 = tempRet0;
if ($223 >>> 0 > 0 | ($223 | 0) == 0 & $222 >>> 0 > 1e9) {
$229 = ___udivdi3($222 | 0, $223 | 0, 1e9, 0) | 0;
$231 = ___uremdi3($222 | 0, $223 | 0, 1e9, 0) | 0;
$$1335 = $229;
$$sink419$off0 = $231;
} else {
$$1335 = 0;
$$sink419$off0 = $222;
}
HEAP32[$218 >> 2] = $$sink419$off0;
$236 = ($$5 | 0) == ($$2352$ph447 | 0);
$$2374 = ($$sink419$off0 | 0) == 0 & ((($$5 | 0) != ($$2374 + 127 & 127 | 0) | $236) ^ 1) ? $$5 : $$2374;
if ($236) break; else {
$$0334 = $$1335;
$$5$in = $$5 + -1 | 0;
}
}
$$0380 = $$0380 + -29 | 0;
if ($$1335 | 0) break; else $$1373 = $$2374;
}
$243 = $$2352$ph447 + 127 & 127;
$246 = $$2374 + 127 & 127;
$249 = $6 + (($$2374 + 126 & 127) << 2) | 0;
if (($243 | 0) == ($$2374 | 0)) {
HEAP32[$249 >> 2] = HEAP32[$249 >> 2] | HEAP32[$6 + ($246 << 2) >> 2];
$$4376 = $246;
} else $$4376 = $$2374;
HEAP32[$6 + ($243 << 2) >> 2] = $$1335;
$$0380$ph = $$0380;
$$1373$ph446 = $$4376;
$$2352$ph447 = $243;
$$2387$ph445 = $$2387$ph445 + 9 | 0;
}
L119 : while (1) {
$289 = $$6378$ph + 1 & 127;
$294 = $6 + (($$6378$ph + 127 & 127) << 2) | 0;
$$1381$ph557 = $$1381$ph;
$$4354$ph558 = $$4354$ph;
$$4389$ph = $$4389$ph443;
while (1) {
$267 = ($$4389$ph | 0) == 18;
$$423 = ($$4389$ph | 0) > 27 ? 9 : 1;
$$1381 = $$1381$ph557;
$$4354 = $$4354$ph558;
while (1) {
$$0336484 = 0;
while (1) {
$256 = $$0336484 + $$4354 & 127;
if (($256 | 0) == ($$6378$ph | 0)) {
$$1337 = 2;
label = 88;
break;
}
$259 = HEAP32[$6 + ($256 << 2) >> 2] | 0;
$261 = HEAP32[7984 + ($$0336484 << 2) >> 2] | 0;
if ($259 >>> 0 < $261 >>> 0) {
$$1337 = 2;
label = 88;
break;
}
if ($259 >>> 0 > $261 >>> 0) break;
$264 = $$0336484 + 1 | 0;
if (($$0336484 | 0) < 1) $$0336484 = $264; else {
$$1337 = $264;
label = 88;
break;
}
}
if ((label | 0) == 88) {
label = 0;
if ($267 & ($$1337 | 0) == 2) {
$$0365482 = 0.0;
$$4483 = 0;
$$9481 = $$6378$ph;
break L119;
}
}
$268 = $$423 + $$1381 | 0;
if (($$4354 | 0) == ($$6378$ph | 0)) {
$$1381 = $268;
$$4354 = $$6378$ph;
} else break;
}
$271 = (1 << $$423) + -1 | 0;
$272 = 1e9 >>> $$423;
$$0332488 = 0;
$$5355486 = $$4354;
$$5390485 = $$4389$ph;
$$6487 = $$4354;
do {
$273 = $6 + ($$6487 << 2) | 0;
$274 = HEAP32[$273 >> 2] | 0;
$277 = ($274 >>> $$423) + $$0332488 | 0;
HEAP32[$273 >> 2] = $277;
$$0332488 = Math_imul($274 & $271, $272) | 0;
$or$cond424 = ($$6487 | 0) == ($$5355486 | 0) & ($277 | 0) == 0;
$$5390485 = $or$cond424 ? $$5390485 + -9 | 0 : $$5390485;
$$5355486 = $or$cond424 ? $$5355486 + 1 & 127 : $$5355486;
$$6487 = $$6487 + 1 & 127;
} while (($$6487 | 0) != ($$6378$ph | 0));
if (!$$0332488) {
$$1381$ph557 = $268;
$$4354$ph558 = $$5355486;
$$4389$ph = $$5390485;
continue;
}
if (($289 | 0) != ($$5355486 | 0)) break;
HEAP32[$294 >> 2] = HEAP32[$294 >> 2] | 1;
$$1381$ph557 = $268;
$$4354$ph558 = $$5355486;
$$4389$ph = $$5390485;
}
HEAP32[$6 + ($$6378$ph << 2) >> 2] = $$0332488;
$$1381$ph = $268;
$$4354$ph = $$5355486;
$$4389$ph443 = $$5390485;
$$6378$ph = $289;
}
while (1) {
$299 = $$4483 + $$4354 & 127;
$302 = $$9481 + 1 & 127;
if (($299 | 0) == ($$9481 | 0)) {
HEAP32[$6 + ($302 + -1 << 2) >> 2] = 0;
$$10 = $302;
} else $$10 = $$9481;
$$0365482 = $$0365482 * 1.0e9 + +((HEAP32[$6 + ($299 << 2) >> 2] | 0) >>> 0);
$$4483 = $$4483 + 1 | 0;
if (($$4483 | 0) == 2) break; else $$9481 = $$10;
}
$311 = +($4 | 0);
$312 = $$0365482 * $311;
$313 = $$1381 + 53 | 0;
$314 = $313 - $3 | 0;
$315 = ($314 | 0) < ($2 | 0);
$$0333 = $315 ? (($314 | 0) > 0 ? $314 : 0) : $2;
if (($$0333 | 0) < 53) {
$320 = +_copysignl(+_scalbn(1.0, 105 - $$0333 | 0), $312);
$323 = +_fmodl($312, +_scalbn(1.0, 53 - $$0333 | 0));
$$0360 = $320;
$$0361 = $323;
$$1366 = $320 + ($312 - $323);
} else {
$$0360 = 0.0;
$$0361 = 0.0;
$$1366 = $312;
}
$327 = $$4354 + 2 & 127;
if (($327 | 0) == ($$10 | 0)) $$3364 = $$0361; else {
$330 = HEAP32[$6 + ($327 << 2) >> 2] | 0;
do if ($330 >>> 0 < 5e8) {
if (!$330) if (($$4354 + 3 & 127 | 0) == ($$10 | 0)) {
$$1362 = $$0361;
break;
}
$$1362 = $311 * .25 + $$0361;
} else {
if (($330 | 0) != 5e8) {
$$1362 = $311 * .75 + $$0361;
break;
}
if (($$4354 + 3 & 127 | 0) == ($$10 | 0)) {
$$1362 = $311 * .5 + $$0361;
break;
} else {
$$1362 = $311 * .75 + $$0361;
break;
}
} while (0);
if ((53 - $$0333 | 0) > 1) if (+_fmodl($$1362, 1.0) != 0.0) $$3364 = $$1362; else $$3364 = $$1362 + 1.0; else $$3364 = $$1362;
}
$354 = $$1366 + $$3364 - $$0360;
do if (($313 & 2147483647 | 0) > (-2 - $sum | 0)) {
$359 = !(+Math_abs(+$354) >= 9007199254740992.0);
$$3383 = $$1381 + (($359 ^ 1) & 1) | 0;
$$2367 = $359 ? $354 : $354 * .5;
if (($$3383 + 50 | 0) <= ($7 | 0)) if (!($$3364 != 0.0 & ($315 & (($$0333 | 0) != ($314 | 0) | $359)))) {
$$3368 = $$2367;
$$4384 = $$3383;
break;
}
$366 = ___errno_location() | 0;
HEAP32[$366 >> 2] = 34;
$$3368 = $$2367;
$$4384 = $$3383;
} else {
$$3368 = $354;
$$4384 = $$1381;
} while (0);
$$1 = +_scalbnl($$3368, $$4384);
} while (0);
STACKTOP = sp;
return +$$1;
}
function _fmt_fp($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = +$1;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
var $$$3484 = 0, $$$3484700 = 0, $$$4502 = 0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488655 = 0, $$0488657 = 0, $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$5605 = 0, $$561 = 0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa675 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre693 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0, $11 = 0, $113 = 0, $116 = 0, $124 = 0, $125 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $138 = 0, $140 = 0, $144 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $160 = 0, $161 = 0, $162 = 0, $174 = 0, $185 = 0, $189 = 0, $190 = 0, $193 = 0, $198 = 0, $199 = 0, $201 = 0, $209 = 0, $212 = 0, $213 = 0, $215 = 0, $217 = 0, $218 = 0, $221 = 0, $225 = 0, $230 = 0, $233 = 0, $236 = 0, $238 = 0, $240 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $253 = 0, $256 = 0, $259 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $284 = 0, $285 = 0, $289 = 0, $292 = 0, $294 = 0, $296 = 0, $300 = 0, $303 = 0, $304 = 0, $308 = 0, $31 = 0, $318 = 0, $323 = 0, $326 = 0, $327 = 0, $328 = 0, $330 = 0, $335 = 0, $347 = 0, $35 = 0.0, $351 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $369 = 0, $373 = 0, $375 = 0, $378 = 0, $381 = 0, $39 = 0, $41 = 0, $44 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $68 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 560 | 0;
$6 = sp + 8 | 0;
$7 = sp;
$8 = sp + 524 | 0;
$9 = $8;
$10 = sp + 512 | 0;
HEAP32[$7 >> 2] = 0;
$11 = $10 + 12 | 0;
___DOUBLE_BITS_680($1) | 0;
if ((tempRet0 | 0) < 0) {
$$0471 = -$1;
$$0520 = 1;
$$0521 = 61284;
} else {
$$0471 = $1;
$$0520 = ($4 & 2049 | 0) != 0 & 1;
$$0521 = ($4 & 2048 | 0) == 0 ? (($4 & 1 | 0) == 0 ? 61285 : 61290) : 61287;
}
___DOUBLE_BITS_680($$0471) | 0;
do if (0 == 0 & (tempRet0 & 2146435072 | 0) == 2146435072) {
$27 = ($5 & 32 | 0) != 0;
$31 = $$0520 + 3 | 0;
_pad_679($0, 32, $2, $31, $4 & -65537);
_out($0, $$0521, $$0520);
_out($0, $$0471 != $$0471 | 0.0 != 0.0 ? ($27 ? 63234 : 61311) : $27 ? 61303 : 61307, 3);
_pad_679($0, 32, $2, $31, $4 ^ 8192);
$$sink560 = $31;
} else {
$35 = +_frexpl($$0471, $7) * 2.0;
$36 = $35 != 0.0;
if ($36) HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
$39 = $5 | 32;
if (($39 | 0) == 97) {
$41 = $5 & 32;
$$0521$ = ($41 | 0) == 0 ? $$0521 : $$0521 + 9 | 0;
$44 = $$0520 | 2;
$46 = 12 - $3 | 0;
do if ($3 >>> 0 > 11 | ($46 | 0) == 0) $$1472 = $35; else {
$$0509585 = 8.0;
$$1508586 = $46;
do {
$$1508586 = $$1508586 + -1 | 0;
$$0509585 = $$0509585 * 16.0;
} while (($$1508586 | 0) != 0);
if ((HEAP8[$$0521$ >> 0] | 0) == 45) {
$$1472 = -($$0509585 + (-$35 - $$0509585));
break;
} else {
$$1472 = $35 + $$0509585 - $$0509585;
break;
}
} while (0);
$60 = HEAP32[$7 >> 2] | 0;
$63 = ($60 | 0) < 0 ? 0 - $60 | 0 : $60;
$66 = _fmt_u($63, (($63 | 0) < 0) << 31 >> 31, $11) | 0;
if (($66 | 0) == ($11 | 0)) {
$68 = $10 + 11 | 0;
HEAP8[$68 >> 0] = 48;
$$0511 = $68;
} else $$0511 = $66;
HEAP8[$$0511 + -1 >> 0] = ($60 >> 31 & 2) + 43;
$76 = $$0511 + -2 | 0;
HEAP8[$76 >> 0] = $5 + 15;
$77 = ($3 | 0) < 1;
$79 = ($4 & 8 | 0) == 0;
$$0523 = $8;
$$2473 = $$1472;
while (1) {
$80 = ~~$$2473;
$86 = $$0523 + 1 | 0;
HEAP8[$$0523 >> 0] = $41 | HEAPU8[61315 + $80 >> 0];
$$2473 = ($$2473 - +($80 | 0)) * 16.0;
if (($86 - $9 | 0) == 1) if ($79 & ($77 & $$2473 == 0.0)) $$1524 = $86; else {
HEAP8[$86 >> 0] = 46;
$$1524 = $$0523 + 2 | 0;
} else $$1524 = $86;
if (!($$2473 != 0.0)) break; else $$0523 = $$1524;
}
$$pre693 = $$1524;
if (!$3) label = 24; else if ((-2 - $9 + $$pre693 | 0) < ($3 | 0)) {
$$pre$phi691Z2D = $$pre693 - $9 | 0;
$$sink = $3 + 2 | 0;
} else label = 24;
if ((label | 0) == 24) {
$101 = $$pre693 - $9 | 0;
$$pre$phi691Z2D = $101;
$$sink = $101;
}
$104 = $11 - $76 | 0;
$106 = $104 + $44 + $$sink | 0;
_pad_679($0, 32, $2, $106, $4);
_out($0, $$0521$, $44);
_pad_679($0, 48, $2, $106, $4 ^ 65536);
_out($0, $8, $$pre$phi691Z2D);
_pad_679($0, 48, $$sink - $$pre$phi691Z2D | 0, 0, 0);
_out($0, $76, $104);
_pad_679($0, 32, $2, $106, $4 ^ 8192);
$$sink560 = $106;
break;
}
$$540 = ($3 | 0) < 0 ? 6 : $3;
if ($36) {
$113 = (HEAP32[$7 >> 2] | 0) + -28 | 0;
HEAP32[$7 >> 2] = $113;
$$3 = $35 * 268435456.0;
$$pr = $113;
} else {
$$3 = $35;
$$pr = HEAP32[$7 >> 2] | 0;
}
$$561 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0;
$$0498 = $$561;
$$4 = $$3;
do {
$116 = ~~$$4 >>> 0;
HEAP32[$$0498 >> 2] = $116;
$$0498 = $$0498 + 4 | 0;
$$4 = ($$4 - +($116 >>> 0)) * 1.0e9;
} while ($$4 != 0.0);
if (($$pr | 0) > 0) {
$$1482663 = $$561;
$$1499662 = $$0498;
$124 = $$pr;
while (1) {
$125 = ($124 | 0) < 29 ? $124 : 29;
$$0488655 = $$1499662 + -4 | 0;
if ($$0488655 >>> 0 < $$1482663 >>> 0) $$2483$ph = $$1482663; else {
$$0488657 = $$0488655;
$$0497656 = 0;
do {
$128 = _bitshift64Shl(HEAP32[$$0488657 >> 2] | 0, 0, $125 | 0) | 0;
$130 = _i64Add($128 | 0, tempRet0 | 0, $$0497656 | 0, 0) | 0;
$131 = tempRet0;
$132 = ___uremdi3($130 | 0, $131 | 0, 1e9, 0) | 0;
HEAP32[$$0488657 >> 2] = $132;
$$0497656 = ___udivdi3($130 | 0, $131 | 0, 1e9, 0) | 0;
$$0488657 = $$0488657 + -4 | 0;
} while ($$0488657 >>> 0 >= $$1482663 >>> 0);
if (!$$0497656) $$2483$ph = $$1482663; else {
$138 = $$1482663 + -4 | 0;
HEAP32[$138 >> 2] = $$0497656;
$$2483$ph = $138;
}
}
$$2500 = $$1499662;
while (1) {
if ($$2500 >>> 0 <= $$2483$ph >>> 0) break;
$140 = $$2500 + -4 | 0;
if (!(HEAP32[$140 >> 2] | 0)) $$2500 = $140; else break;
}
$144 = (HEAP32[$7 >> 2] | 0) - $125 | 0;
HEAP32[$7 >> 2] = $144;
if (($144 | 0) > 0) {
$$1482663 = $$2483$ph;
$$1499662 = $$2500;
$124 = $144;
} else {
$$1482$lcssa = $$2483$ph;
$$1499$lcssa = $$2500;
$$pr566 = $144;
break;
}
}
} else {
$$1482$lcssa = $$561;
$$1499$lcssa = $$0498;
$$pr566 = $$pr;
}
if (($$pr566 | 0) < 0) {
$149 = (($$540 + 25 | 0) / 9 | 0) + 1 | 0;
$150 = ($39 | 0) == 102;
$$3484650 = $$1482$lcssa;
$$3501649 = $$1499$lcssa;
$152 = $$pr566;
while (1) {
$151 = 0 - $152 | 0;
$154 = ($151 | 0) < 9 ? $151 : 9;
if ($$3484650 >>> 0 < $$3501649 >>> 0) {
$160 = (1 << $154) + -1 | 0;
$161 = 1e9 >>> $154;
$$0487644 = 0;
$$1489643 = $$3484650;
do {
$162 = HEAP32[$$1489643 >> 2] | 0;
HEAP32[$$1489643 >> 2] = ($162 >>> $154) + $$0487644;
$$0487644 = Math_imul($162 & $160, $161) | 0;
$$1489643 = $$1489643 + 4 | 0;
} while ($$1489643 >>> 0 < $$3501649 >>> 0);
$$$3484 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650;
if (!$$0487644) {
$$$3484700 = $$$3484;
$$4502 = $$3501649;
} else {
HEAP32[$$3501649 >> 2] = $$0487644;
$$$3484700 = $$$3484;
$$4502 = $$3501649 + 4 | 0;
}
} else {
$$$3484700 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650;
$$4502 = $$3501649;
}
$174 = $150 ? $$561 : $$$3484700;
$$$4502 = ($$4502 - $174 >> 2 | 0) > ($149 | 0) ? $174 + ($149 << 2) | 0 : $$4502;
$152 = (HEAP32[$7 >> 2] | 0) + $154 | 0;
HEAP32[$7 >> 2] = $152;
if (($152 | 0) >= 0) {
$$3484$lcssa = $$$3484700;
$$3501$lcssa = $$$4502;
break;
} else {
$$3484650 = $$$3484700;
$$3501649 = $$$4502;
}
}
} else {
$$3484$lcssa = $$1482$lcssa;
$$3501$lcssa = $$1499$lcssa;
}
$185 = $$561;
if ($$3484$lcssa >>> 0 < $$3501$lcssa >>> 0) {
$189 = ($185 - $$3484$lcssa >> 2) * 9 | 0;
$190 = HEAP32[$$3484$lcssa >> 2] | 0;
if ($190 >>> 0 < 10) $$1515 = $189; else {
$$0514639 = $189;
$$0530638 = 10;
while (1) {
$$0530638 = $$0530638 * 10 | 0;
$193 = $$0514639 + 1 | 0;
if ($190 >>> 0 < $$0530638 >>> 0) {
$$1515 = $193;
break;
} else $$0514639 = $193;
}
}
} else $$1515 = 0;
$198 = ($39 | 0) == 103;
$199 = ($$540 | 0) != 0;
$201 = $$540 - (($39 | 0) != 102 ? $$1515 : 0) + (($199 & $198) << 31 >> 31) | 0;
if (($201 | 0) < ((($$3501$lcssa - $185 >> 2) * 9 | 0) + -9 | 0)) {
$209 = $201 + 9216 | 0;
$212 = $$561 + 4 + ((($209 | 0) / 9 | 0) + -1024 << 2) | 0;
$213 = ($209 | 0) % 9 | 0;
if (($213 | 0) < 8) {
$$0527$in633 = $213;
$$1531632 = 10;
while (1) {
$215 = $$1531632 * 10 | 0;
if (($$0527$in633 | 0) < 7) {
$$0527$in633 = $$0527$in633 + 1 | 0;
$$1531632 = $215;
} else {
$$1531$lcssa = $215;
break;
}
}
} else $$1531$lcssa = 10;
$217 = HEAP32[$212 >> 2] | 0;
$218 = ($217 >>> 0) % ($$1531$lcssa >>> 0) | 0;
$221 = ($212 + 4 | 0) == ($$3501$lcssa | 0);
if ($221 & ($218 | 0) == 0) {
$$4492 = $212;
$$4518 = $$1515;
$$8 = $$3484$lcssa;
} else {
$$543 = ((($217 >>> 0) / ($$1531$lcssa >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
$225 = ($$1531$lcssa | 0) / 2 | 0;
$$$564 = $218 >>> 0 < $225 >>> 0 ? .5 : $221 & ($218 | 0) == ($225 | 0) ? 1.0 : 1.5;
if (!$$0520) {
$$1467 = $$$564;
$$1469 = $$543;
} else {
$230 = (HEAP8[$$0521 >> 0] | 0) == 45;
$$1467 = $230 ? -$$$564 : $$$564;
$$1469 = $230 ? -$$543 : $$543;
}
$233 = $217 - $218 | 0;
HEAP32[$212 >> 2] = $233;
if ($$1469 + $$1467 != $$1469) {
$236 = $233 + $$1531$lcssa | 0;
HEAP32[$212 >> 2] = $236;
if ($236 >>> 0 > 999999999) {
$$5486626 = $$3484$lcssa;
$$sink547625 = $212;
while (1) {
$238 = $$sink547625 + -4 | 0;
HEAP32[$$sink547625 >> 2] = 0;
if ($238 >>> 0 < $$5486626 >>> 0) {
$240 = $$5486626 + -4 | 0;
HEAP32[$240 >> 2] = 0;
$$6 = $240;
} else $$6 = $$5486626;
$242 = (HEAP32[$238 >> 2] | 0) + 1 | 0;
HEAP32[$238 >> 2] = $242;
if ($242 >>> 0 > 999999999) {
$$5486626 = $$6;
$$sink547625 = $238;
} else {
$$5486$lcssa = $$6;
$$sink547$lcssa = $238;
break;
}
}
} else {
$$5486$lcssa = $$3484$lcssa;
$$sink547$lcssa = $212;
}
$247 = ($185 - $$5486$lcssa >> 2) * 9 | 0;
$248 = HEAP32[$$5486$lcssa >> 2] | 0;
if ($248 >>> 0 < 10) {
$$4492 = $$sink547$lcssa;
$$4518 = $247;
$$8 = $$5486$lcssa;
} else {
$$2516621 = $247;
$$2532620 = 10;
while (1) {
$$2532620 = $$2532620 * 10 | 0;
$251 = $$2516621 + 1 | 0;
if ($248 >>> 0 < $$2532620 >>> 0) {
$$4492 = $$sink547$lcssa;
$$4518 = $251;
$$8 = $$5486$lcssa;
break;
} else $$2516621 = $251;
}
}
} else {
$$4492 = $212;
$$4518 = $$1515;
$$8 = $$3484$lcssa;
}
}
$253 = $$4492 + 4 | 0;
$$5519$ph = $$4518;
$$7505$ph = $$3501$lcssa >>> 0 > $253 >>> 0 ? $253 : $$3501$lcssa;
$$9$ph = $$8;
} else {
$$5519$ph = $$1515;
$$7505$ph = $$3501$lcssa;
$$9$ph = $$3484$lcssa;
}
$$7505 = $$7505$ph;
while (1) {
if ($$7505 >>> 0 <= $$9$ph >>> 0) {
$$lcssa675 = 0;
break;
}
$256 = $$7505 + -4 | 0;
if (!(HEAP32[$256 >> 2] | 0)) $$7505 = $256; else {
$$lcssa675 = 1;
break;
}
}
$259 = 0 - $$5519$ph | 0;
do if ($198) {
$$540$ = $$540 + (($199 ^ 1) & 1) | 0;
if (($$540$ | 0) > ($$5519$ph | 0) & ($$5519$ph | 0) > -5) {
$$0479 = $5 + -1 | 0;
$$2476 = $$540$ + -1 - $$5519$ph | 0;
} else {
$$0479 = $5 + -2 | 0;
$$2476 = $$540$ + -1 | 0;
}
$267 = $4 & 8;
if (!$267) {
if ($$lcssa675) {
$270 = HEAP32[$$7505 + -4 >> 2] | 0;
if (!$270) $$2529 = 9; else if (!(($270 >>> 0) % 10 | 0)) {
$$1528617 = 0;
$$3533616 = 10;
while (1) {
$$3533616 = $$3533616 * 10 | 0;
$275 = $$1528617 + 1 | 0;
if (($270 >>> 0) % ($$3533616 >>> 0) | 0 | 0) {
$$2529 = $275;
break;
} else $$1528617 = $275;
}
} else $$2529 = 0;
} else $$2529 = 9;
$284 = (($$7505 - $185 >> 2) * 9 | 0) + -9 | 0;
if (($$0479 | 32 | 0) == 102) {
$285 = $284 - $$2529 | 0;
$$548 = ($285 | 0) > 0 ? $285 : 0;
$$1480 = $$0479;
$$3477 = ($$2476 | 0) < ($$548 | 0) ? $$2476 : $$548;
$$pre$phi698Z2D = 0;
break;
} else {
$289 = $284 + $$5519$ph - $$2529 | 0;
$$550 = ($289 | 0) > 0 ? $289 : 0;
$$1480 = $$0479;
$$3477 = ($$2476 | 0) < ($$550 | 0) ? $$2476 : $$550;
$$pre$phi698Z2D = 0;
break;
}
} else {
$$1480 = $$0479;
$$3477 = $$2476;
$$pre$phi698Z2D = $267;
}
} else {
$$1480 = $5;
$$3477 = $$540;
$$pre$phi698Z2D = $4 & 8;
} while (0);
$292 = $$3477 | $$pre$phi698Z2D;
$294 = ($292 | 0) != 0 & 1;
$296 = ($$1480 | 32 | 0) == 102;
if ($296) {
$$2513 = 0;
$$pn = ($$5519$ph | 0) > 0 ? $$5519$ph : 0;
} else {
$300 = ($$5519$ph | 0) < 0 ? $259 : $$5519$ph;
$303 = _fmt_u($300, (($300 | 0) < 0) << 31 >> 31, $11) | 0;
$304 = $11;
if (($304 - $303 | 0) < 2) {
$$1512610 = $303;
while (1) {
$308 = $$1512610 + -1 | 0;
HEAP8[$308 >> 0] = 48;
if (($304 - $308 | 0) < 2) $$1512610 = $308; else {
$$1512$lcssa = $308;
break;
}
}
} else $$1512$lcssa = $303;
HEAP8[$$1512$lcssa + -1 >> 0] = ($$5519$ph >> 31 & 2) + 43;
$318 = $$1512$lcssa + -2 | 0;
HEAP8[$318 >> 0] = $$1480;
$$2513 = $318;
$$pn = $304 - $318 | 0;
}
$323 = $$0520 + 1 + $$3477 + $294 + $$pn | 0;
_pad_679($0, 32, $2, $323, $4);
_out($0, $$0521, $$0520);
_pad_679($0, 48, $2, $323, $4 ^ 65536);
if ($296) {
$$0496$$9 = $$9$ph >>> 0 > $$561 >>> 0 ? $$561 : $$9$ph;
$326 = $8 + 9 | 0;
$327 = $326;
$328 = $8 + 8 | 0;
$$5493600 = $$0496$$9;
do {
$330 = _fmt_u(HEAP32[$$5493600 >> 2] | 0, 0, $326) | 0;
if (($$5493600 | 0) == ($$0496$$9 | 0)) if (($330 | 0) == ($326 | 0)) {
HEAP8[$328 >> 0] = 48;
$$1465 = $328;
} else $$1465 = $330; else if ($330 >>> 0 > $8 >>> 0) {
_memset($8 | 0, 48, $330 - $9 | 0) | 0;
$$0464597 = $330;
while (1) {
$335 = $$0464597 + -1 | 0;
if ($335 >>> 0 > $8 >>> 0) $$0464597 = $335; else {
$$1465 = $335;
break;
}
}
} else $$1465 = $330;
_out($0, $$1465, $327 - $$1465 | 0);
$$5493600 = $$5493600 + 4 | 0;
} while ($$5493600 >>> 0 <= $$561 >>> 0);
if ($292 | 0) _out($0, 61331, 1);
if ($$5493600 >>> 0 < $$7505 >>> 0 & ($$3477 | 0) > 0) {
$$4478593 = $$3477;
$$6494592 = $$5493600;
while (1) {
$347 = _fmt_u(HEAP32[$$6494592 >> 2] | 0, 0, $326) | 0;
if ($347 >>> 0 > $8 >>> 0) {
_memset($8 | 0, 48, $347 - $9 | 0) | 0;
$$0463587 = $347;
while (1) {
$351 = $$0463587 + -1 | 0;
if ($351 >>> 0 > $8 >>> 0) $$0463587 = $351; else {
$$0463$lcssa = $351;
break;
}
}
} else $$0463$lcssa = $347;
_out($0, $$0463$lcssa, ($$4478593 | 0) < 9 ? $$4478593 : 9);
$$6494592 = $$6494592 + 4 | 0;
$356 = $$4478593 + -9 | 0;
if (!($$6494592 >>> 0 < $$7505 >>> 0 & ($$4478593 | 0) > 9)) {
$$4478$lcssa = $356;
break;
} else $$4478593 = $356;
}
} else $$4478$lcssa = $$3477;
_pad_679($0, 48, $$4478$lcssa + 9 | 0, 9, 0);
} else {
$$7505$ = $$lcssa675 ? $$7505 : $$9$ph + 4 | 0;
if (($$3477 | 0) > -1) {
$363 = $8 + 9 | 0;
$364 = ($$pre$phi698Z2D | 0) == 0;
$365 = $363;
$366 = 0 - $9 | 0;
$367 = $8 + 8 | 0;
$$5605 = $$3477;
$$7495604 = $$9$ph;
while (1) {
$369 = _fmt_u(HEAP32[$$7495604 >> 2] | 0, 0, $363) | 0;
if (($369 | 0) == ($363 | 0)) {
HEAP8[$367 >> 0] = 48;
$$0 = $367;
} else $$0 = $369;
do if (($$7495604 | 0) == ($$9$ph | 0)) {
$375 = $$0 + 1 | 0;
_out($0, $$0, 1);
if ($364 & ($$5605 | 0) < 1) {
$$2 = $375;
break;
}
_out($0, 61331, 1);
$$2 = $375;
} else {
if ($$0 >>> 0 <= $8 >>> 0) {
$$2 = $$0;
break;
}
_memset($8 | 0, 48, $$0 + $366 | 0) | 0;
$$1601 = $$0;
while (1) {
$373 = $$1601 + -1 | 0;
if ($373 >>> 0 > $8 >>> 0) $$1601 = $373; else {
$$2 = $373;
break;
}
}
} while (0);
$378 = $365 - $$2 | 0;
_out($0, $$2, ($$5605 | 0) > ($378 | 0) ? $378 : $$5605);
$381 = $$5605 - $378 | 0;
$$7495604 = $$7495604 + 4 | 0;
if (!($$7495604 >>> 0 < $$7505$ >>> 0 & ($381 | 0) > -1)) {
$$5$lcssa = $381;
break;
} else $$5605 = $381;
}
} else $$5$lcssa = $$3477;
_pad_679($0, 48, $$5$lcssa + 18 | 0, 18, 0);
_out($0, $$2513, $11 - $$2513 | 0);
}
_pad_679($0, 32, $2, $323, $4 ^ 8192);
$$sink560 = $323;
} while (0);
STACKTOP = sp;
return (($$sink560 | 0) < ($2 | 0) ? $2 : $$sink560) | 0;
}
function __ZN11SeqMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0$lcssa = 0, $$03863 = 0, $$064 = 0, $$pre$phi68Z2D = 0, $$pre$phiZ2D = 0, $$sink$i = f0, $$sink2$i = 0, $$sink59 = 0, $$sink60 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$2$0$$sroa_idx58 = 0, $10 = 0, $12 = 0, $123 = 0, $127 = 0, $13 = 0, $131 = 0, $15 = 0, $154 = 0, $157 = 0, $16 = 0, $164 = f0, $170 = f0, $175 = 0, $177 = f0, $178 = 0, $18 = 0, $180 = f0, $182 = f0, $183 = 0, $187 = 0, $189 = 0, $19 = 0, $192 = 0, $201 = 0, $203 = f0, $206 = f0, $209 = f0, $21 = 0, $212 = 0, $215 = 0, $219 = 0, $22 = 0, $223 = 0, $23 = 0, $24 = 0, $247 = 0, $25 = 0, $251 = 0, $255 = 0, $26 = 0, $28 = 0, $29 = 0, $292 = 0, $297 = 0, $298 = 0, $3 = 0, $305 = 0.0, $307 = 0.0, $308 = 0, $31 = 0, $313 = 0, $317 = 0.0, $318 = 0, $32 = 0, $321 = 0, $324 = 0, $326 = 0, $327 = 0, $329 = 0, $331 = 0, $335 = 0, $337 = 0, $339 = 0, $34 = 0, $341 = 0, $35 = 0, $37 = 0, $38 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $61 = 0, $62 = 0, $66 = 0, $67 = 0, $69 = 0, $7 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $83 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $91 = 0, $95 = 0, $99 = 0, $sext = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 208 | 0;
$vararg_buffer9 = sp + 32 | 0;
$vararg_buffer6 = sp + 24 | 0;
$vararg_buffer3 = sp + 8 | 0;
$3 = sp + 40 | 0;
__ZN13BasicMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture($0, $1, $2);
if (0) __Z7eprintfPKcz(44806, sp);
$5 = $0 + 40 | 0;
HEAPF32[$5 >> 2] = Math_fround(0.0);
HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
HEAP32[$3 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
HEAP32[$3 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
HEAP32[$3 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
HEAP32[$3 + 16 >> 2] = HEAP32[$2 + 16 >> 2];
$6 = $3 + 20 | 0;
$7 = $2 + 20 | 0;
HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
$9 = $3 + 24 | 0;
$10 = $2 + 24 | 0;
HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
$12 = $3 + 28 | 0;
$13 = $2 + 28 | 0;
HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
$15 = $3 + 32 | 0;
$16 = $2 + 32 | 0;
HEAP32[$15 >> 2] = HEAP32[$16 >> 2];
$18 = $3 + 36 | 0;
$19 = $2 + 36 | 0;
HEAP32[$18 >> 2] = HEAP32[$19 >> 2];
$21 = $3 + 40 | 0;
$22 = $2 + 40 | 0;
HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
HEAP32[$21 + 4 >> 2] = HEAP32[$22 + 4 >> 2];
HEAP32[$21 + 8 >> 2] = HEAP32[$22 + 8 >> 2];
HEAP32[$21 + 12 >> 2] = HEAP32[$22 + 12 >> 2];
HEAP32[$21 + 16 >> 2] = HEAP32[$22 + 16 >> 2];
HEAP32[$21 + 20 >> 2] = HEAP32[$22 + 20 >> 2];
HEAP32[$21 + 24 >> 2] = HEAP32[$22 + 24 >> 2];
HEAP32[$21 + 28 >> 2] = HEAP32[$22 + 28 >> 2];
$23 = $3 + 72 | 0;
$24 = $2 + 72 | 0;
HEAP32[$23 >> 2] = HEAP32[$24 >> 2];
HEAP32[$23 + 4 >> 2] = HEAP32[$24 + 4 >> 2];
HEAP32[$23 + 8 >> 2] = HEAP32[$24 + 8 >> 2];
HEAP32[$23 + 12 >> 2] = HEAP32[$24 + 12 >> 2];
HEAP32[$23 + 16 >> 2] = HEAP32[$24 + 16 >> 2];
$25 = $3 + 92 | 0;
$26 = $2 + 92 | 0;
HEAP32[$25 >> 2] = HEAP32[$26 >> 2];
$28 = $3 + 96 | 0;
$29 = $2 + 96 | 0;
HEAP32[$28 >> 2] = HEAP32[$29 >> 2];
$31 = $3 + 100 | 0;
$32 = $2 + 100 | 0;
HEAP32[$31 >> 2] = HEAP32[$32 >> 2];
$34 = $3 + 104 | 0;
$35 = $2 + 104 | 0;
HEAP32[$34 >> 2] = HEAP32[$35 >> 2];
$37 = $3 + 108 | 0;
$38 = $2 + 108 | 0;
HEAP32[$37 >> 2] = HEAP32[$38 >> 2];
$40 = $3 + 112 | 0;
$41 = $2 + 112 | 0;
HEAP32[$40 >> 2] = HEAP32[$41 >> 2];
HEAP32[$40 + 4 >> 2] = HEAP32[$41 + 4 >> 2];
HEAP32[$40 + 8 >> 2] = HEAP32[$41 + 8 >> 2];
HEAP32[$40 + 12 >> 2] = HEAP32[$41 + 12 >> 2];
HEAP32[$40 + 16 >> 2] = HEAP32[$41 + 16 >> 2];
HEAP32[$40 + 20 >> 2] = HEAP32[$41 + 20 >> 2];
HEAP32[$40 + 24 >> 2] = HEAP32[$41 + 24 >> 2];
HEAP32[$40 + 28 >> 2] = HEAP32[$41 + 28 >> 2];
$42 = $3 + 144 | 0;
$43 = $2 + 144 | 0;
HEAP32[$42 >> 2] = HEAP32[$43 >> 2];
$45 = $3 + 148 | 0;
$46 = $2 + 148 | 0;
HEAP32[$45 >> 2] = HEAP32[$46 >> 2];
$48 = $3 + 152 | 0;
$49 = $2 + 152 | 0;
HEAP32[$48 >> 2] = HEAP32[$49 >> 2];
$51 = $3 + 156 | 0;
$52 = $2 + 156 | 0;
HEAP32[$51 >> 2] = HEAP32[$52 >> 2];
$54 = $3 + 160 | 0;
$55 = $2 + 160 | 0;
$56 = $55;
$61 = HEAP32[$56 + 4 >> 2] | 0;
$62 = $54;
HEAP32[$62 >> 2] = HEAP32[$56 >> 2];
HEAP32[$62 + 4 >> 2] = $61;
$66 = $0 + 60 | 0;
$67 = $0 + 540 | 0;
$sext = HEAP32[$67 >> 2] << 16;
$69 = $sext >> 16;
L4 : do if (($sext | 0) > 0) {
$71 = $0 + 24 | 0;
$$sroa$2$0$$sroa_idx58 = $0 + 16 | 0;
$$sroa$0$0$$sroa_idx = $0 + 12 | 0;
$72 = $0 + 560 | 0;
$73 = $0 + 572 | 0;
$74 = $0 + 568 | 0;
$75 = $0 + 564 | 0;
$76 = $0 + 528 | 0;
$$03863 = 0;
$$064 = $66;
$83 = 0;
while (1) {
if ($$03863 << 16 >> 16 < 0) {
$154 = 0;
$88 = 0;
} else if ((HEAP32[$67 >> 2] | 0) > ($83 | 0)) {
$86 = HEAP32[(HEAP32[$76 >> 2] | 0) + ($83 << 2) >> 2] | 0;
$154 = $86;
$88 = $86;
} else {
$154 = 0;
$88 = 0;
}
$87 = $88 + 60 | 0;
__THREW__ = 0;
invoke_vii(121, $88 + 64 | 0, $$064 + 228 | 0);
$91 = __THREW__;
__THREW__ = 0;
if ($91 & 1) break L4;
__THREW__ = 0;
invoke_vii(121, $88 + 76 | 0, $$064 + 240 | 0);
$95 = __THREW__;
__THREW__ = 0;
if ($95 & 1) break L4;
__THREW__ = 0;
invoke_vii(121, $88 + 88 | 0, $$064 + 252 | 0);
$99 = __THREW__;
__THREW__ = 0;
if ($99 & 1) break L4;
HEAP32[$88 + 124 >> 2] = HEAP32[$$064 + 288 >> 2];
HEAP32[$88 + 128 >> 2] = HEAP32[$$064 + 292 >> 2];
dest = $88 + 136 | 0;
src = $$064 + 300 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[$88 + 100 >> 2] = HEAP32[$$064 + 264 >> 2];
HEAP32[$88 + 104 >> 2] = HEAP32[$$064 + 268 >> 2];
HEAP32[$88 + 108 >> 2] = HEAP32[$$064 + 272 >> 2];
HEAP32[$88 + 112 >> 2] = HEAP32[$$064 + 276 >> 2];
__THREW__ = 0;
invoke_vii(121, $88 + 176 | 0, $$064 + 340 | 0);
$123 = __THREW__;
__THREW__ = 0;
if ($123 & 1) break L4;
__THREW__ = 0;
invoke_vii(121, $88 + 188 | 0, $$064 + 352 | 0);
$127 = __THREW__;
__THREW__ = 0;
if ($127 & 1) break L4;
__THREW__ = 0;
invoke_vii(121, $88 + 200 | 0, $$064 + 364 | 0);
$131 = __THREW__;
__THREW__ = 0;
if ($131 & 1) break L4;
HEAP32[$88 + 236 >> 2] = HEAP32[$$064 + 400 >> 2];
HEAP32[$88 + 240 >> 2] = HEAP32[$$064 + 404 >> 2];
dest = $88 + 248 | 0;
src = $$064 + 412 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[$88 + 212 >> 2] = HEAP32[$$064 + 376 >> 2];
HEAP32[$88 + 216 >> 2] = HEAP32[$$064 + 380 >> 2];
HEAP32[$88 + 220 >> 2] = HEAP32[$$064 + 384 >> 2];
HEAP32[$88 + 224 >> 2] = HEAP32[$$064 + 388 >> 2];
__THREW__ = 0;
invoke_viii(HEAP32[(HEAP32[$154 >> 2] | 0) + 20 >> 2] | 0, $88 | 0, $1 | 0, $3 | 0);
$157 = __THREW__;
__THREW__ = 0;
if ($157 & 1) break L4;
if (!(HEAP8[72310] | 0)) {
$164 = Math_fround(HEAPF32[64724 + (HEAP32[$$sroa$0$0$$sroa_idx >> 2] << 2) >> 2]);
$$sink$i = Math_fround($164 * Math_fround(HEAPF32[64772 + (HEAP32[$71 >> 2] << 2) >> 2]));
$$sink2$i = 64792 + (HEAP32[$$sroa$2$0$$sroa_idx58 >> 2] << 2) | 0;
} else {
$$sink$i = Math_fround(HEAPF32[16184]);
$$sink2$i = 64800;
}
$170 = Math_fround($$sink$i * Math_fround(HEAPF32[$$sink2$i >> 2]));
if ($170 != Math_fround(1.0)) {
$175 = $88 + 40 | 0;
$177 = Math_fround($170 * Math_fround(HEAPF32[$175 >> 2]));
__THREW__ = 0;
invoke_vifi(HEAP32[(HEAP32[$88 >> 2] | 0) + 64 >> 2] | 0, $88 | 0, +$177, 1);
$178 = __THREW__;
__THREW__ = 0;
if ($178 & 1) break L4; else $$pre$phiZ2D = $175;
} else $$pre$phiZ2D = $88 + 40 | 0;
$180 = Math_fround(HEAPF32[$$pre$phiZ2D >> 2]);
$182 = Math_fround($180 + Math_fround(HEAPF32[$5 >> 2]));
HEAPF32[$5 >> 2] = $182;
$183 = HEAP32[$73 >> 2] | 0;
if (($183 | 0) >= 0) {
if ((HEAP32[$74 >> 2] | 0) > ($183 | 0)) {
$$pre$phi68Z2D = $183 + 1 | 0;
label = 27;
} else {
$187 = HEAP32[$75 >> 2] | 0;
$189 = $183 + 1 | 0;
__THREW__ = 0;
invoke_vii(169, $72 | 0, (($187 | 0) > ($183 | 0) ? $187 : $189 + ($183 >>> 1) | 0) | 0);
$192 = __THREW__;
__THREW__ = 0;
if ($192 & 1) break L4;
if ((HEAP32[$73 >> 2] | 0) <= ($183 | 0)) {
$$pre$phi68Z2D = $189;
label = 27;
}
}
if ((label | 0) == 27) {
label = 0;
HEAP32[$73 >> 2] = $$pre$phi68Z2D;
}
HEAP32[(HEAP32[$72 >> 2] | 0) + ($183 << 2) >> 2] = HEAP32[$5 >> 2];
}
$$03863 = $$03863 + 1 << 16 >> 16;
$83 = $$03863 << 16 >> 16;
if (($69 | 0) <= ($83 | 0)) {
$$0$lcssa = $87;
label = 5;
break;
} else $$064 = $87;
}
} else {
$$0$lcssa = $66;
label = 5;
} while (0);
do if ((label | 0) == 5) {
if (HEAP8[$0 + 20 >> 0] | 0) {
$201 = HEAP32[$1 >> 2] | 0;
$203 = Math_fround(HEAPF32[$201 + 268 >> 2]);
$206 = Math_fround($203 * Math_fround(HEAPF32[$201 + 232 >> 2]));
HEAPF32[$0 + 44 >> 2] = $206;
$209 = Math_fround($206 + Math_fround(HEAPF32[$5 >> 2]));
HEAPF32[$5 >> 2] = $209;
}
HEAP32[$0 + 12 >> 2] = 11;
HEAP32[$0 + 24 >> 2] = 0;
$212 = $0 + 284 | 0;
__THREW__ = 0;
invoke_vii(121, $0 + 288 | 0, $$0$lcssa + 228 | 0);
$215 = __THREW__;
__THREW__ = 0;
if (!($215 & 1)) {
__THREW__ = 0;
invoke_vii(121, $0 + 300 | 0, $$0$lcssa + 240 | 0);
$219 = __THREW__;
__THREW__ = 0;
if (!($219 & 1)) {
__THREW__ = 0;
invoke_vii(121, $0 + 312 | 0, $$0$lcssa + 252 | 0);
$223 = __THREW__;
__THREW__ = 0;
if (!($223 & 1)) {
HEAP32[$0 + 348 >> 2] = HEAP32[$$0$lcssa + 288 >> 2];
HEAP32[$0 + 352 >> 2] = HEAP32[$$0$lcssa + 292 >> 2];
dest = $0 + 360 | 0;
src = $$0$lcssa + 300 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[$0 + 324 >> 2] = HEAP32[$$0$lcssa + 264 >> 2];
HEAP32[$0 + 328 >> 2] = HEAP32[$$0$lcssa + 268 >> 2];
HEAP32[$0 + 332 >> 2] = HEAP32[$$0$lcssa + 272 >> 2];
HEAP32[$0 + 336 >> 2] = HEAP32[$$0$lcssa + 276 >> 2];
__THREW__ = 0;
invoke_vii(121, $0 + 400 | 0, $$0$lcssa + 340 | 0);
$247 = __THREW__;
__THREW__ = 0;
if (!($247 & 1)) {
__THREW__ = 0;
invoke_vii(121, $0 + 412 | 0, $$0$lcssa + 352 | 0);
$251 = __THREW__;
__THREW__ = 0;
if (!($251 & 1)) {
__THREW__ = 0;
invoke_vii(121, $0 + 424 | 0, $$0$lcssa + 364 | 0);
$255 = __THREW__;
__THREW__ = 0;
if (!($255 & 1)) {
HEAP32[$0 + 460 >> 2] = HEAP32[$$0$lcssa + 400 >> 2];
HEAP32[$0 + 464 >> 2] = HEAP32[$$0$lcssa + 404 >> 2];
dest = $0 + 472 | 0;
src = $$0$lcssa + 412 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[$0 + 436 >> 2] = HEAP32[$$0$lcssa + 376 >> 2];
HEAP32[$0 + 440 >> 2] = HEAP32[$$0$lcssa + 380 >> 2];
HEAP32[$0 + 444 >> 2] = HEAP32[$$0$lcssa + 384 >> 2];
HEAP32[$0 + 448 >> 2] = HEAP32[$$0$lcssa + 388 >> 2];
HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
HEAP32[$2 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
HEAP32[$2 + 16 >> 2] = HEAP32[$3 + 16 >> 2];
if (($3 | 0) == ($2 | 0)) {
HEAP32[$22 >> 2] = HEAP32[$21 >> 2];
HEAP32[$22 + 4 >> 2] = HEAP32[$21 + 4 >> 2];
HEAP32[$22 + 8 >> 2] = HEAP32[$21 + 8 >> 2];
HEAP32[$22 + 12 >> 2] = HEAP32[$21 + 12 >> 2];
HEAP32[$22 + 16 >> 2] = HEAP32[$21 + 16 >> 2];
HEAP32[$22 + 20 >> 2] = HEAP32[$21 + 20 >> 2];
HEAP32[$22 + 24 >> 2] = HEAP32[$21 + 24 >> 2];
HEAP32[$22 + 28 >> 2] = HEAP32[$21 + 28 >> 2];
HEAP32[$24 >> 2] = HEAP32[$23 >> 2];
HEAP32[$24 + 4 >> 2] = HEAP32[$23 + 4 >> 2];
HEAP32[$24 + 8 >> 2] = HEAP32[$23 + 8 >> 2];
HEAP32[$24 + 12 >> 2] = HEAP32[$23 + 12 >> 2];
HEAP32[$24 + 16 >> 2] = HEAP32[$23 + 16 >> 2];
HEAP32[$41 >> 2] = HEAP32[$40 >> 2];
HEAP32[$41 + 4 >> 2] = HEAP32[$40 + 4 >> 2];
HEAP32[$41 + 8 >> 2] = HEAP32[$40 + 8 >> 2];
HEAP32[$41 + 12 >> 2] = HEAP32[$40 + 12 >> 2];
HEAP32[$41 + 16 >> 2] = HEAP32[$40 + 16 >> 2];
HEAP32[$41 + 20 >> 2] = HEAP32[$40 + 20 >> 2];
HEAP32[$41 + 24 >> 2] = HEAP32[$40 + 24 >> 2];
HEAP32[$41 + 28 >> 2] = HEAP32[$40 + 28 >> 2];
$$sink59 = $43;
$$sink60 = $42;
} else {
HEAP32[$7 >> 2] = HEAP32[$6 >> 2];
HEAP32[$10 >> 2] = HEAP32[$9 >> 2];
HEAP32[$13 >> 2] = HEAP32[$12 >> 2];
HEAP32[$16 >> 2] = HEAP32[$15 >> 2];
HEAP32[$19 >> 2] = HEAP32[$18 >> 2];
HEAP32[$22 >> 2] = HEAP32[$21 >> 2];
HEAP32[$22 + 4 >> 2] = HEAP32[$21 + 4 >> 2];
HEAP32[$22 + 8 >> 2] = HEAP32[$21 + 8 >> 2];
HEAP32[$22 + 12 >> 2] = HEAP32[$21 + 12 >> 2];
HEAP32[$22 + 16 >> 2] = HEAP32[$21 + 16 >> 2];
HEAP32[$22 + 20 >> 2] = HEAP32[$21 + 20 >> 2];
HEAP32[$22 + 24 >> 2] = HEAP32[$21 + 24 >> 2];
HEAP32[$22 + 28 >> 2] = HEAP32[$21 + 28 >> 2];
HEAP32[$24 >> 2] = HEAP32[$23 >> 2];
HEAP32[$24 + 4 >> 2] = HEAP32[$23 + 4 >> 2];
HEAP32[$24 + 8 >> 2] = HEAP32[$23 + 8 >> 2];
HEAP32[$24 + 12 >> 2] = HEAP32[$23 + 12 >> 2];
HEAP32[$24 + 16 >> 2] = HEAP32[$23 + 16 >> 2];
HEAP32[$26 >> 2] = HEAP32[$25 >> 2];
HEAP32[$29 >> 2] = HEAP32[$28 >> 2];
HEAP32[$32 >> 2] = HEAP32[$31 >> 2];
HEAP32[$35 >> 2] = HEAP32[$34 >> 2];
HEAP32[$38 >> 2] = HEAP32[$37 >> 2];
HEAP32[$41 >> 2] = HEAP32[$40 >> 2];
HEAP32[$41 + 4 >> 2] = HEAP32[$40 + 4 >> 2];
HEAP32[$41 + 8 >> 2] = HEAP32[$40 + 8 >> 2];
HEAP32[$41 + 12 >> 2] = HEAP32[$40 + 12 >> 2];
HEAP32[$41 + 16 >> 2] = HEAP32[$40 + 16 >> 2];
HEAP32[$41 + 20 >> 2] = HEAP32[$40 + 20 >> 2];
HEAP32[$41 + 24 >> 2] = HEAP32[$40 + 24 >> 2];
HEAP32[$41 + 28 >> 2] = HEAP32[$40 + 28 >> 2];
HEAP32[$43 >> 2] = HEAP32[$42 >> 2];
HEAP32[$46 >> 2] = HEAP32[$45 >> 2];
HEAP32[$49 >> 2] = HEAP32[$48 >> 2];
$$sink59 = $52;
$$sink60 = $51;
}
HEAP32[$$sink59 >> 2] = HEAP32[$$sink60 >> 2];
$292 = $54;
$297 = HEAP32[$292 + 4 >> 2] | 0;
$298 = $55;
HEAP32[$298 >> 2] = HEAP32[$292 >> 2];
HEAP32[$298 + 4 >> 2] = $297;
if (0) {
$305 = +Math_fround(HEAPF32[$0 + 52 >> 2]);
$307 = +Math_fround(HEAPF32[$5 >> 2]);
__THREW__ = 0;
HEAPF64[$vararg_buffer3 >> 3] = $305;
HEAPF64[$vararg_buffer3 + 8 >> 3] = $307;
invoke_vii(115, 44826, $vararg_buffer3 | 0);
$308 = __THREW__;
__THREW__ = 0;
if ($308 & 1) break;
}
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$0 >> 2] | 0) + 68 >> 2] | 0, $0 | 0);
$313 = __THREW__;
__THREW__ = 0;
if (!($313 & 1)) {
if (0) {
$317 = +Math_fround(HEAPF32[$5 >> 2]);
__THREW__ = 0;
HEAPF64[$vararg_buffer6 >> 3] = $317;
invoke_vii(115, 44887, $vararg_buffer6 | 0);
$318 = __THREW__;
__THREW__ = 0;
if ($318 & 1) break;
__THREW__ = 0;
invoke_vii(170, $66 | 0, HEAP32[16082] | 0);
$321 = __THREW__;
__THREW__ = 0;
if ($321 & 1) break;
}
if (!1) {
__ZN19TwoHAbstractPostureD2Ev($3);
STACKTOP = sp;
return;
}
$324 = $0 + 8 | 0;
__THREW__ = 0;
$326 = invoke_iii(30, $212 | 0, HEAP32[$324 >> 2] | 0) | 0;
$327 = __THREW__;
__THREW__ = 0;
if (!($327 & 1)) {
if ($326) {
__ZN19TwoHAbstractPostureD2Ev($3);
STACKTOP = sp;
return;
}
__THREW__ = 0;
invoke_i(1) | 0;
$329 = __THREW__;
__THREW__ = 0;
if (!($329 & 1)) {
__THREW__ = 0;
invoke_vii(115, 44910, $vararg_buffer9 | 0);
$331 = __THREW__;
__THREW__ = 0;
if (!($331 & 1)) {
__THREW__ = 0;
invoke_viii(92, $66 | 0, HEAP32[16082] | 0, HEAP32[$324 >> 2] | 0);
$335 = __THREW__;
__THREW__ = 0;
if (!($335 & 1)) {
__ZN19TwoHAbstractPostureD2Ev($3);
STACKTOP = sp;
return;
}
}
}
}
}
}
}
}
}
}
}
} while (0);
$337 = ___cxa_find_matching_catch_2() | 0;
__THREW__ = 0;
invoke_vi(132, $3 | 0);
$339 = __THREW__;
__THREW__ = 0;
if ($339 & 1) {
$341 = ___cxa_find_matching_catch_3(0) | 0;
___clang_call_terminate($341);
} else ___resumeException($337 | 0);
}
function __ZN14SiGMLHandshape18CalcJointBendCodesEv($0) {
$0 = $0 | 0;
var $$$i = 0, $$087 = 0, $$sroa$0$0$copyload = f0, $$sroa$044$0$$sroa_idx = 0, $$sroa$044$0$copyload = f0, $$sroa$3$0$$sroa_idx35 = 0, $$sroa$3$0$copyload = f0, $$sroa$347$0$$sroa_idx48 = 0, $$sroa$347$0$copyload = f0, $$sroa$362$0$copyload$pre = f0, $$sroa$4$0$$sroa_idx38 = 0, $$sroa$4$0$copyload = f0, $$sroa$451$0$$sroa_idx52 = 0, $$sroa$451$0$copyload = f0, $$sroa$466$0$copyload = f0, $$sroa$5$0$$sroa_idx41 = 0, $$sroa$5$0$copyload = f0, $$sroa$555$0$$sroa_idx56 = 0, $$sroa$555$0$copyload = f0, $$sroa$570$0$copyload = f0, $$sroa$6$0$copyload = f0, $1 = 0, $102 = 0, $103 = 0, $107 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $123 = 0, $132 = 0, $134 = 0, $139 = f0, $146 = 0, $149 = f0, $15 = 0, $151 = f0, $154 = 0, $157 = f0, $159 = f0, $161 = 0, $18 = 0, $181 = 0, $2 = 0, $20 = 0, $204 = 0, $21 = 0, $22 = 0, $227 = 0, $23 = 0, $250 = 0, $3 = 0, $4 = 0, $42 = 0, $47 = 0, $48 = 0, $49 = 0, $51 = 0, $53 = 0, $55 = f0, $56 = 0, $61 = 0, $62 = 0, $63 = 0, $67 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $73 = 0, $75 = 0, $79 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $98 = 0, $eh$lpad$body$index4Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$1 = sp + 40 | 0;
$2 = sp;
$3 = sp + 24 | 0;
__ZN14SiGMLHandshape17RecogniseSpecialsEv($0);
$4 = HEAP32[$0 >> 2] | 0;
if (!$4) {
STACKTOP = sp;
return;
};
HEAP32[$2 >> 2] = 0;
HEAP32[$2 + 4 >> 2] = 0;
HEAP32[$2 + 8 >> 2] = 0;
HEAP32[$2 + 12 >> 2] = 0;
HEAP32[$2 + 16 >> 2] = 0;
$7 = HEAP16[$0 + 52 >> 1] | 0;
if (!($7 << 16 >> 16)) $23 = HEAP16[66668 + (($4 << 16 >> 16) * 160 | 0) + 152 >> 1] | 0; else $23 = $7;
$20 = $0 + 164 | 0;
$12 = $0 + 168 | 0;
$15 = $0 + 172 | 0;
$18 = $0 + 176 | 0;
$21 = $0 + 54 | 0;
$22 = $23 << 16 >> 16;
do if (Math_fround(HEAPF32[$0 + 160 >> 2]) != Math_fround(-100.0)) label = 13; else if (Math_fround(HEAPF32[$20 >> 2]) != Math_fround(-100.0)) label = 13; else if (Math_fround(HEAPF32[$12 >> 2]) != Math_fround(-100.0)) label = 13; else if (Math_fround(HEAPF32[$15 >> 2]) != Math_fround(-100.0)) label = 13; else if (Math_fround(HEAPF32[$18 >> 2]) != Math_fround(-100.0)) label = 13; else if (!(HEAP32[$0 + 60 >> 2] | 0)) if (!(HEAP16[$21 >> 1] & 1)) {
$42 = $22 & 1 ^ 3;
HEAP32[$2 >> 2] = $42;
$61 = $42;
break;
} else {
HEAP32[$2 >> 2] = 1;
$61 = 1;
break;
} else label = 13; while (0);
if ((label | 0) == 13) {
HEAP32[$2 >> 2] = 4;
$61 = 4;
}
do if (Math_fround(HEAPF32[$0 + 96 >> 2]) != Math_fround(-100.0)) label = 80; else if (Math_fround(HEAPF32[$0 + 100 >> 2]) != Math_fround(-100.0)) label = 80; else if (Math_fround(HEAPF32[$0 + 104 >> 2]) != Math_fround(-100.0)) label = 80; else if (Math_fround(HEAPF32[$0 + 108 >> 2]) != Math_fround(-100.0)) label = 80; else if (!(HEAP32[$0 + 64 >> 2] | 0)) {
$181 = $2 + 4 | 0;
if (!(HEAP16[$21 >> 1] & 2)) {
HEAP32[$181 >> 2] = $22 >>> 1 & 1 ^ 3;
break;
} else {
HEAP32[$181 >> 2] = 1;
break;
}
} else label = 80; while (0);
if ((label | 0) == 80) HEAP32[$2 + 4 >> 2] = 4;
do if (Math_fround(HEAPF32[$0 + 112 >> 2]) != Math_fround(-100.0)) label = 89; else if (Math_fround(HEAPF32[$0 + 116 >> 2]) != Math_fround(-100.0)) label = 89; else if (Math_fround(HEAPF32[$0 + 120 >> 2]) != Math_fround(-100.0)) label = 89; else if (Math_fround(HEAPF32[$0 + 124 >> 2]) != Math_fround(-100.0)) label = 89; else if (!(HEAP32[$0 + 68 >> 2] | 0)) {
$204 = $2 + 8 | 0;
if (!(HEAP16[$21 >> 1] & 4)) {
HEAP32[$204 >> 2] = $22 >>> 2 & 1 ^ 3;
break;
} else {
HEAP32[$204 >> 2] = 1;
break;
}
} else label = 89; while (0);
if ((label | 0) == 89) HEAP32[$2 + 8 >> 2] = 4;
do if (Math_fround(HEAPF32[$0 + 128 >> 2]) != Math_fround(-100.0)) label = 98; else if (Math_fround(HEAPF32[$0 + 132 >> 2]) != Math_fround(-100.0)) label = 98; else if (Math_fround(HEAPF32[$0 + 136 >> 2]) != Math_fround(-100.0)) label = 98; else if (Math_fround(HEAPF32[$0 + 140 >> 2]) != Math_fround(-100.0)) label = 98; else if (!(HEAP32[$0 + 72 >> 2] | 0)) {
$227 = $2 + 12 | 0;
if (!(HEAP16[$21 >> 1] & 8)) {
HEAP32[$227 >> 2] = $22 >>> 3 & 1 ^ 3;
break;
} else {
HEAP32[$227 >> 2] = 1;
break;
}
} else label = 98; while (0);
if ((label | 0) == 98) HEAP32[$2 + 12 >> 2] = 4;
do if (Math_fround(HEAPF32[$0 + 144 >> 2]) != Math_fround(-100.0)) label = 107; else if (Math_fround(HEAPF32[$0 + 148 >> 2]) != Math_fround(-100.0)) label = 107; else if (Math_fround(HEAPF32[$0 + 152 >> 2]) != Math_fround(-100.0)) label = 107; else if (Math_fround(HEAPF32[$0 + 156 >> 2]) != Math_fround(-100.0)) label = 107; else if (!(HEAP32[$0 + 76 >> 2] | 0)) {
$250 = $2 + 16 | 0;
if (!(HEAP16[$21 >> 1] & 16)) {
HEAP32[$250 >> 2] = $22 >>> 4 & 1 ^ 3;
break;
} else {
HEAP32[$250 >> 2] = 1;
break;
}
} else label = 107; while (0);
if ((label | 0) == 107) HEAP32[$2 + 16 >> 2] = 4;
$63 = $0 + 160 | 0;
$56 = Math_fround(HEAPF32[$63 >> 2]) != Math_fround(-100.0);
$$sroa$362$0$copyload$pre = Math_fround(HEAPF32[$20 >> 2]);
L68 : do if ($56 | $$sroa$362$0$copyload$pre != Math_fround(-100.0)) $55 = $$sroa$362$0$copyload$pre; else if (Math_fround(HEAPF32[$12 >> 2]) != Math_fround(-100.0)) $55 = Math_fround(-100.0); else if (Math_fround(HEAPF32[$15 >> 2]) != Math_fround(-100.0)) $55 = Math_fround(-100.0); else if (Math_fround(HEAPF32[$18 >> 2]) != Math_fround(-100.0)) $55 = Math_fround(-100.0); else switch (HEAP32[$0 + 48 >> 2] | 0) {
case 1:
{
HEAP32[$0 + 28 >> 2] = 3;
$55 = Math_fround(-100.0);
break L68;
break;
}
case 2:
{
HEAP32[$0 + 28 >> 2] = 4;
$55 = Math_fround(-100.0);
break L68;
break;
}
default:
{
$55 = Math_fround(-100.0);
break L68;
}
} while (0);
$47 = $0 + 8 | 0;
$48 = HEAP32[$47 >> 2] | 0;
$49 = $0 + 12 | 0;
HEAP32[$3 >> 2] = HEAP32[$49 >> 2];
HEAP32[$3 + 4 >> 2] = HEAP32[$49 + 4 >> 2];
HEAP32[$3 + 8 >> 2] = HEAP32[$49 + 8 >> 2];
HEAP32[$3 + 12 >> 2] = HEAP32[$49 + 12 >> 2];
$51 = HEAP32[$0 + 60 >> 2] | 0;
$$sroa$466$0$copyload = Math_fround(HEAPF32[$12 >> 2]);
$$sroa$570$0$copyload = Math_fround(HEAPF32[$15 >> 2]);
$$sroa$6$0$copyload = Math_fround(HEAPF32[$18 >> 2]);
$53 = HEAP32[$0 + 28 >> 2] | 0;
L77 : do if (!($56 | $55 != Math_fround(-100.0) | $$sroa$466$0$copyload != Math_fround(-100.0) | $$sroa$570$0$copyload != Math_fround(-100.0) | $$sroa$6$0$copyload != Math_fround(-100.0))) {
$$$i = ($53 | 0) == 0 ? 1 : $53;
L79 : do switch ($61 & 7) {
case 4:
{
$62 = 66668 + ($4 * 160 | 0) + 32 + ($$$i * 20 | 0) | 0;
HEAP32[$63 >> 2] = HEAP32[$62 >> 2];
HEAP32[$63 + 4 >> 2] = HEAP32[$62 + 4 >> 2];
HEAP32[$63 + 8 >> 2] = HEAP32[$62 + 8 >> 2];
HEAP32[$63 + 12 >> 2] = HEAP32[$62 + 12 >> 2];
HEAP32[$63 + 16 >> 2] = HEAP32[$62 + 16 >> 2];
switch ($51 | 0) {
case 1:
case 0:
{
break L77;
break;
}
case 2:
{
if ((HEAP32[66668 + ($4 * 160 | 0) + 156 >> 2] & -4 | 0) == 4) {
$69 = 66668 + ($4 * 160 | 0) + 132 | 0;
HEAP32[$63 >> 2] = HEAP32[$69 >> 2];
HEAP32[$63 + 4 >> 2] = HEAP32[$69 + 4 >> 2];
HEAP32[$63 + 8 >> 2] = HEAP32[$69 + 8 >> 2];
HEAP32[$63 + 12 >> 2] = HEAP32[$69 + 12 >> 2];
HEAP32[$63 + 16 >> 2] = HEAP32[$69 + 16 >> 2];
break L77;
}
switch ($$$i | 0) {
case 2:
case 4:
break;
default:
break L77;
}
__THREW__ = 0;
invoke_vii(155, $63 | 0, 70884);
$67 = __THREW__;
__THREW__ = 0;
if ($67 & 1) break L79; else break L77;
break;
}
default:
{
$70 = 70844 + ($51 * 20 | 0) | 0;
HEAP32[$1 >> 2] = HEAP32[$70 >> 2];
HEAP32[$1 + 4 >> 2] = HEAP32[$70 + 4 >> 2];
HEAP32[$1 + 8 >> 2] = HEAP32[$70 + 8 >> 2];
HEAP32[$1 + 12 >> 2] = HEAP32[$70 + 12 >> 2];
HEAP32[$1 + 16 >> 2] = HEAP32[$70 + 16 >> 2];
__THREW__ = 0;
invoke_vii(155, $63 | 0, $1 | 0);
$71 = __THREW__;
__THREW__ = 0;
if (!($71 & 1)) break L77;
$73 = ___cxa_find_matching_catch_2() | 0;
$eh$lpad$body$index4Z2D = tempRet0;
$eh$lpad$body$indexZ2D = $73;
___resumeException($eh$lpad$body$indexZ2D | 0);
}
}
break;
}
case 3:
case 1:
{
$75 = 66668 + ($4 * 160 | 0) + 32 + ($$$i * 20 | 0) | 0;
HEAP32[$63 >> 2] = HEAP32[$75 >> 2];
HEAP32[$63 + 4 >> 2] = HEAP32[$75 + 4 >> 2];
HEAP32[$63 + 8 >> 2] = HEAP32[$75 + 8 >> 2];
HEAP32[$63 + 12 >> 2] = HEAP32[$75 + 12 >> 2];
HEAP32[$63 + 16 >> 2] = HEAP32[$75 + 16 >> 2];
switch ($48 | 0) {
case 1:
case 0:
{
break L77;
break;
}
case 2:
{
if ((HEAP32[66668 + ($4 * 160 | 0) + 156 >> 2] & -4 | 0) == 4) {
$81 = 66668 + ($4 * 160 | 0) + 132 | 0;
HEAP32[$63 >> 2] = HEAP32[$81 >> 2];
HEAP32[$63 + 4 >> 2] = HEAP32[$81 + 4 >> 2];
HEAP32[$63 + 8 >> 2] = HEAP32[$81 + 8 >> 2];
HEAP32[$63 + 12 >> 2] = HEAP32[$81 + 12 >> 2];
HEAP32[$63 + 16 >> 2] = HEAP32[$81 + 16 >> 2];
break L77;
}
switch ($$$i | 0) {
case 2:
case 4:
break;
default:
break L77;
}
__THREW__ = 0;
invoke_vii(155, $63 | 0, 70884);
$79 = __THREW__;
__THREW__ = 0;
if ($79 & 1) break L79; else break L77;
break;
}
default:
{
$82 = 70844 + ($48 * 20 | 0) | 0;
HEAP32[$1 >> 2] = HEAP32[$82 >> 2];
HEAP32[$1 + 4 >> 2] = HEAP32[$82 + 4 >> 2];
HEAP32[$1 + 8 >> 2] = HEAP32[$82 + 8 >> 2];
HEAP32[$1 + 12 >> 2] = HEAP32[$82 + 12 >> 2];
HEAP32[$1 + 16 >> 2] = HEAP32[$82 + 16 >> 2];
__THREW__ = 0;
invoke_vii(155, $63 | 0, $1 | 0);
$83 = __THREW__;
__THREW__ = 0;
if (!($83 & 1)) break L77;
$85 = ___cxa_find_matching_catch_2() | 0;
$eh$lpad$body$index4Z2D = tempRet0;
$eh$lpad$body$indexZ2D = $85;
___resumeException($eh$lpad$body$indexZ2D | 0);
}
}
break;
}
case 2:
{
if (!(Math_fround(HEAPF32[$3 >> 2]) != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$3 + 4 >> 2]) != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$3 + 8 >> 2]) != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$3 + 12 >> 2]) != Math_fround(-100.0))) {
if (!$48) {
$102 = 66668 + (($4 << 16 >> 16) * 160 | 0) + 32 + ($$$i * 20 | 0) | 0;
HEAP32[$63 >> 2] = HEAP32[$102 >> 2];
HEAP32[$63 + 4 >> 2] = HEAP32[$102 + 4 >> 2];
HEAP32[$63 + 8 >> 2] = HEAP32[$102 + 8 >> 2];
HEAP32[$63 + 12 >> 2] = HEAP32[$102 + 12 >> 2];
HEAP32[$63 + 16 >> 2] = HEAP32[$102 + 16 >> 2];
break L77;
}
$103 = 66668 + ($4 * 160 | 0) + 32 + ($$$i * 20 | 0) | 0;
HEAP32[$63 >> 2] = HEAP32[$103 >> 2];
HEAP32[$63 + 4 >> 2] = HEAP32[$103 + 4 >> 2];
HEAP32[$63 + 8 >> 2] = HEAP32[$103 + 8 >> 2];
HEAP32[$63 + 12 >> 2] = HEAP32[$103 + 12 >> 2];
HEAP32[$63 + 16 >> 2] = HEAP32[$103 + 16 >> 2];
switch ($48 | 0) {
case 1:
{
break L77;
break;
}
case 2:
{
if ((HEAP32[66668 + ($4 * 160 | 0) + 156 >> 2] & -4 | 0) == 4) {
$110 = 66668 + ($4 * 160 | 0) + 132 | 0;
HEAP32[$63 >> 2] = HEAP32[$110 >> 2];
HEAP32[$63 + 4 >> 2] = HEAP32[$110 + 4 >> 2];
HEAP32[$63 + 8 >> 2] = HEAP32[$110 + 8 >> 2];
HEAP32[$63 + 12 >> 2] = HEAP32[$110 + 12 >> 2];
HEAP32[$63 + 16 >> 2] = HEAP32[$110 + 16 >> 2];
break L77;
}
switch ($$$i | 0) {
case 2:
case 4:
break;
default:
break L77;
}
__THREW__ = 0;
invoke_vii(155, $63 | 0, 70884);
$107 = __THREW__;
__THREW__ = 0;
if ($107 & 1) break L79; else break L77;
break;
}
default:
{
$111 = 70844 + ($48 * 20 | 0) | 0;
HEAP32[$1 >> 2] = HEAP32[$111 >> 2];
HEAP32[$1 + 4 >> 2] = HEAP32[$111 + 4 >> 2];
HEAP32[$1 + 8 >> 2] = HEAP32[$111 + 8 >> 2];
HEAP32[$1 + 12 >> 2] = HEAP32[$111 + 12 >> 2];
HEAP32[$1 + 16 >> 2] = HEAP32[$111 + 16 >> 2];
__THREW__ = 0;
invoke_vii(155, $63 | 0, $1 | 0);
$112 = __THREW__;
__THREW__ = 0;
if (!($112 & 1)) break L77;
$114 = ___cxa_find_matching_catch_2() | 0;
$eh$lpad$body$index4Z2D = tempRet0;
$eh$lpad$body$indexZ2D = $114;
___resumeException($eh$lpad$body$indexZ2D | 0);
}
}
}
__THREW__ = 0;
invoke_vii(156, $63 | 0, $3 | 0);
$98 = __THREW__;
__THREW__ = 0;
if (!($98 & 1)) break L77;
break;
}
default:
break L77;
} while (0);
$116 = ___cxa_find_matching_catch_2() | 0;
$eh$lpad$body$index4Z2D = tempRet0;
$eh$lpad$body$indexZ2D = $116;
___resumeException($eh$lpad$body$indexZ2D | 0);
} while (0);
$$sroa$044$0$$sroa_idx = $0 + 12 | 0;
$$sroa$347$0$$sroa_idx48 = $0 + 16 | 0;
$$sroa$451$0$$sroa_idx52 = $0 + 20 | 0;
$$sroa$555$0$$sroa_idx56 = $0 + 24 | 0;
$109 = $0 + 48 | 0;
$$087 = 1;
do {
$118 = $0 + 80 + ($$087 << 4) | 0;
$119 = HEAP32[$0 >> 2] | 0;
$120 = HEAP32[$47 >> 2] | 0;
$$sroa$044$0$copyload = Math_fround(HEAPF32[$$sroa$044$0$$sroa_idx >> 2]);
$$sroa$347$0$copyload = Math_fround(HEAPF32[$$sroa$347$0$$sroa_idx48 >> 2]);
$$sroa$451$0$copyload = Math_fround(HEAPF32[$$sroa$451$0$$sroa_idx52 >> 2]);
$$sroa$555$0$copyload = Math_fround(HEAPF32[$$sroa$555$0$$sroa_idx56 >> 2]);
$$sroa$0$0$copyload = Math_fround(HEAPF32[$118 >> 2]);
$$sroa$3$0$$sroa_idx35 = $0 + 80 + ($$087 << 4) + 4 | 0;
$$sroa$3$0$copyload = Math_fround(HEAPF32[$$sroa$3$0$$sroa_idx35 >> 2]);
$$sroa$4$0$$sroa_idx38 = $0 + 80 + ($$087 << 4) + 8 | 0;
$$sroa$4$0$copyload = Math_fround(HEAPF32[$$sroa$4$0$$sroa_idx38 >> 2]);
$$sroa$5$0$$sroa_idx41 = $0 + 80 + ($$087 << 4) + 12 | 0;
$$sroa$5$0$copyload = Math_fround(HEAPF32[$$sroa$5$0$$sroa_idx41 >> 2]);
$123 = HEAP32[$109 >> 2] | 0;
L130 : do if (!($$sroa$0$0$copyload != Math_fround(-100.0) | $$sroa$3$0$copyload != Math_fround(-100.0) | $$sroa$4$0$copyload != Math_fround(-100.0) | $$sroa$5$0$copyload != Math_fround(-100.0))) switch (HEAP32[$2 + ($$087 << 2) >> 2] | 0) {
case 4:
{
$132 = 68808 + (HEAP32[66668 + ($119 * 160 | 0) + 156 >> 2] << 7) + (HEAP32[$0 + 60 + ($$087 << 2) >> 2] << 4) | 0;
HEAP32[$118 >> 2] = HEAP32[$132 >> 2];
HEAP32[$118 + 4 >> 2] = HEAP32[$132 + 4 >> 2];
HEAP32[$118 + 8 >> 2] = HEAP32[$132 + 8 >> 2];
HEAP32[$118 + 12 >> 2] = HEAP32[$132 + 12 >> 2];
break L130;
break;
}
case 1:
{
$134 = 66668 + (($119 << 16 >> 16) * 160 | 0) | 0;
HEAP32[$118 >> 2] = HEAP32[$134 >> 2];
HEAP32[$118 + 4 >> 2] = HEAP32[$134 + 4 >> 2];
HEAP32[$118 + 8 >> 2] = HEAP32[$134 + 8 >> 2];
HEAP32[$118 + 12 >> 2] = HEAP32[$134 + 12 >> 2];
if (!$123) break L130;
$139 = Math_fround(Math_fround(HEAPF32[3380 + ($123 << 2) >> 2]) + Math_fround(HEAPF32[$118 >> 2]));
HEAPF32[$118 >> 2] = $139;
break L130;
break;
}
case 2:
{
if ($$sroa$044$0$copyload != Math_fround(-100.0) | $$sroa$347$0$copyload != Math_fround(-100.0) | $$sroa$451$0$copyload != Math_fround(-100.0) | $$sroa$555$0$copyload != Math_fround(-100.0)) {
HEAPF32[$118 >> 2] = $$sroa$044$0$copyload;
HEAPF32[$$sroa$3$0$$sroa_idx35 >> 2] = $$sroa$347$0$copyload;
HEAPF32[$$sroa$4$0$$sroa_idx38 >> 2] = $$sroa$451$0$copyload;
HEAPF32[$$sroa$5$0$$sroa_idx41 >> 2] = $$sroa$555$0$copyload;
break L130;
}
if (!$120) {
$146 = 66668 + (($119 << 16 >> 16) * 160 | 0) | 0;
HEAP32[$118 >> 2] = HEAP32[$146 >> 2];
HEAP32[$118 + 4 >> 2] = HEAP32[$146 + 4 >> 2];
HEAP32[$118 + 8 >> 2] = HEAP32[$146 + 8 >> 2];
HEAP32[$118 + 12 >> 2] = HEAP32[$146 + 12 >> 2];
if (!$123) break L130;
$149 = Math_fround(HEAPF32[3380 + ($123 << 2) >> 2]);
$151 = Math_fround($149 + Math_fround(HEAPF32[$118 >> 2]));
HEAPF32[$118 >> 2] = $151;
break L130;
} else {
$154 = 68808 + (HEAP32[66668 + ($119 * 160 | 0) + 156 >> 2] << 7) + ($120 << 4) | 0;
HEAP32[$118 >> 2] = HEAP32[$154 >> 2];
HEAP32[$118 + 4 >> 2] = HEAP32[$154 + 4 >> 2];
HEAP32[$118 + 8 >> 2] = HEAP32[$154 + 8 >> 2];
HEAP32[$118 + 12 >> 2] = HEAP32[$154 + 12 >> 2];
if (!$123) break L130;
$157 = Math_fround(HEAPF32[3380 + ($123 << 2) >> 2]);
$159 = Math_fround($157 + Math_fround(HEAPF32[$118 >> 2]));
HEAPF32[$118 >> 2] = $159;
break L130;
}
break;
}
case 3:
{
$161 = 66668 + (($119 << 16 >> 16) * 160 | 0) + 16 | 0;
HEAP32[$118 >> 2] = HEAP32[$161 >> 2];
HEAP32[$118 + 4 >> 2] = HEAP32[$161 + 4 >> 2];
HEAP32[$118 + 8 >> 2] = HEAP32[$161 + 8 >> 2];
HEAP32[$118 + 12 >> 2] = HEAP32[$161 + 12 >> 2];
break L130;
break;
}
default:
break L130;
} while (0);
$$087 = $$087 + 1 | 0;
} while (($$087 | 0) != 5);
STACKTOP = sp;
return;
}
function __ZNK11HanimAvatar12locateSiteIDEb6SiteIDP6VectorRP5JointRP4Site($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
var $$011$i$i = 0, $$011$i$i101 = 0, $$011$i$i112 = 0, $$01115$i$i = 0, $$01115$i$i109 = 0, $$01115$i$i98 = 0, $$01116$i$i = 0, $$01116$i$i110 = 0, $$01116$i$i99 = 0, $$067$i = 0, $$067$i89 = 0, $$08$i = 0, $$08$i88 = 0, $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $$2 = 0, $$2$1 = 0, $$2$2 = 0, $$2$3 = 0, $$2$4 = 0, $$byval_copy31 = 0, $$sink$i$i = 0, $$sink$i$i103 = 0, $$sink$i$i114 = 0, $$sroa$0$0$copyload = 0, $$sroa$0$1 = 0, $$sroa$0$1$1 = 0, $$sroa$0$1$2 = 0, $$sroa$0$1$3 = 0, $$sroa$6$0$$sroa_idx31 = 0, $$sroa$6$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $113 = 0, $121 = f0, $123 = 0, $125 = 0, $133 = 0, $135 = 0, $136 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $154 = 0, $166 = 0, $167 = 0, $175 = 0, $176 = 0, $184 = 0, $185 = 0, $192 = 0, $193 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $42 = 0, $51 = 0, $54 = 0, $6 = 0, $7 = 0, $72 = 0, $76 = 0, $77 = 0, $8 = 0, $82 = 0, $83 = 0, $9 = 0, $91 = 0, $93 = 0, $94 = 0, $97 = 0, $98 = 0, $99 = 0, $tmpcast$i$i107$byval_copy = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 160 | 0;
$$byval_copy31 = sp + 136 | 0;
$tmpcast$i$i107$byval_copy = sp + 116 | 0;
$vararg_buffer26 = sp + 96 | 0;
$vararg_buffer24 = sp + 88 | 0;
$vararg_buffer22 = sp + 80 | 0;
$vararg_buffer19 = sp + 72 | 0;
$vararg_buffer17 = sp + 64 | 0;
$vararg_buffer15 = sp + 56 | 0;
$vararg_buffer12 = sp + 48 | 0;
$vararg_buffer10 = sp + 40 | 0;
$vararg_buffer8 = sp + 32 | 0;
$vararg_buffer5 = sp + 24 | 0;
$vararg_buffer3 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$6 = sp + 108 | 0;
$7 = sp + 104 | 0;
$8 = sp + 100 | 0;
$9 = sp + 112 | 0;
$10 = ($3 | 0) != 0;
if ($10) __ZN6Vector7setZeroEv($3);
HEAP32[$4 >> 2] = 0;
HEAP32[$5 >> 2] = 0;
if (0) {
HEAP32[$vararg_buffer >> 2] = $1 ? 88 : 65;
__Z7eprintfPKcz(19108, $vararg_buffer);
__ZNK6SiteID5printEP8_IO_FILE($2, HEAP32[16082] | 0);
__Z5eputcc(10);
}
if (!$1) {
$14 = HEAPU16[$2 >> 1] | HEAPU8[$2 + 2 >> 0] << 16;
$15 = $14 & 255;
if (($15 & 16777215 | 0) != 0 & ($14 & 7340032 | 0) == 0) {
$22 = ((($15 & 16777215) + -16 | 0) >>> 0 < 9 ? 3145728 : 1048576) | $14 & 9437183;
HEAP16[$2 >> 1] = $22;
HEAP8[$2 + 2 >> 0] = $22 >>> 16;
$24 = $22;
} else $24 = $14;
$23 = $24 & 8388607;
HEAP16[$2 >> 1] = $23;
HEAP8[$2 + 2 >> 0] = $23 >>> 16;
}
$25 = HEAP32[$2 >> 2] | 0;
HEAP32[$8 >> 2] = $25;
$26 = $0 + 176 | 0;
$27 = HEAP32[$26 >> 2] | 0;
HEAP8[$$byval_copy31 >> 0] = HEAP8[$8 >> 0] | 0;
HEAP8[$$byval_copy31 + 1 >> 0] = HEAP8[$8 + 1 >> 0] | 0;
HEAP8[$$byval_copy31 + 2 >> 0] = HEAP8[$8 + 2 >> 0] | 0;
HEAP8[$$byval_copy31 + 3 >> 0] = HEAP8[$8 + 3 >> 0] | 0;
$28 = __ZN6KeyOpsIK6SiteIDE12hashFunctionES0_i($$byval_copy31, $27) | 0;
$29 = $0 + 172 | 0;
$30 = HEAP32[$29 >> 2] | 0;
L13 : do if ((HEAP16[$30 + ($28 << 3) + 4 >> 1] | 0) > 0) {
$$01115$i$i = HEAP32[$30 + ($28 << 3) >> 2] | 0;
if (!$$01115$i$i) label = 14; else {
$$01116$i$i = $$01115$i$i;
while (1) {
HEAP32[$6 >> 2] = $25;
HEAP32[$7 >> 2] = HEAP32[$$01116$i$i >> 2];
HEAP32[$tmpcast$i$i107$byval_copy >> 2] = HEAP32[$6 >> 2];
HEAP8[$$byval_copy31 >> 0] = HEAP8[$7 >> 0] | 0;
HEAP8[$$byval_copy31 + 1 >> 0] = HEAP8[$7 + 1 >> 0] | 0;
HEAP8[$$byval_copy31 + 2 >> 0] = HEAP8[$7 + 2 >> 0] | 0;
HEAP8[$$byval_copy31 + 3 >> 0] = HEAP8[$7 + 3 >> 0] | 0;
if (__ZN6KeyOpsIK6SiteIDE5eqkeyES0_S0_($tmpcast$i$i107$byval_copy, $$byval_copy31) | 0) break;
$$011$i$i = HEAP32[$$01116$i$i + 8 >> 2] | 0;
if (!$$011$i$i) {
label = 14;
break L13;
} else $$01116$i$i = $$011$i$i;
}
$$sink$i$i = $$01116$i$i + 4 | 0;
}
} else label = 14; while (0);
if ((label | 0) == 14) $$sink$i$i = $0 + 192 | 0;
$42 = HEAP32[$$sink$i$i >> 2] | 0;
HEAP32[$5 >> 2] = $42;
if ($42 | 0) {
HEAP32[$4 >> 2] = HEAP32[$42 + 16 >> 2];
if (!$10) {
STACKTOP = sp;
return;
}
__ZN6VectorC2EPKS_($$byval_copy31, __ZN4Site24getGlobalBoneTranslationEv(HEAP32[$5 >> 2] | 0) | 0);
__ZN6Vector7setFromERKS_($3, $$byval_copy31);
if (!0) {
STACKTOP = sp;
return;
}
__Z7eprintfPKcz(19134, $vararg_buffer1);
__ZNK6SiteID5printEP8_IO_FILE($2, HEAP32[16082] | 0);
__Z7eprintfPKcz(19156, $vararg_buffer3);
__ZNK6Vector5printEP8_IO_FILEi($3, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
STACKTOP = sp;
return;
}
if ($1) {
STACKTOP = sp;
return;
}
$51 = HEAPU16[$2 >> 1] | HEAPU8[$2 + 2 >> 0] << 16;
$54 = ($51 & 16777215) >>> 15 & 31;
do if (!($54 << 16 >> 16)) $91 = $51; else {
$$067$i = $54;
$$08$i = 0;
do {
$$08$i = ($$067$i & 1) + $$08$i << 16 >> 16;
$$067$i = $$067$i << 16 >> 16 >> 1;
} while ($$067$i << 16 >> 16 != 0);
if ($$08$i << 16 >> 16 > 1) {
if (!0) $$sroa$0$0$copyload = $51; else {
$$067$i89 = $54;
$$08$i88 = 0;
do {
$$08$i88 = ($$067$i89 & 1) + $$08$i88 << 16 >> 16;
$$067$i89 = $$067$i89 << 16 >> 16 >> 1;
} while ($$067$i89 << 16 >> 16 != 0);
HEAP32[$vararg_buffer5 >> 2] = $$08$i88 << 16 >> 16;
__Z7eprintfPKcz(19164, $vararg_buffer5);
__Z11printDigitsP8_IO_FILEs(HEAP32[16082] | 0, ((HEAPU16[$2 >> 1] | HEAPU8[$2 + 2 >> 0] << 16) & 16777215) >>> 15 & 31);
__Z5eputcc(10);
$$sroa$0$0$copyload = HEAPU16[$2 >> 1] | HEAPU8[$2 + 2 >> 0] << 16;
}
$$sroa$6$0$copyload = HEAP8[$2 + 3 >> 0] | 0;
$72 = ($$sroa$0$0$copyload & 16777215) >>> 15 & 31;
HEAP32[$tmpcast$i$i107$byval_copy >> 2] = 0;
HEAP32[$tmpcast$i$i107$byval_copy + 4 >> 2] = 0;
HEAP32[$tmpcast$i$i107$byval_copy + 8 >> 2] = 0;
HEAP32[$tmpcast$i$i107$byval_copy + 12 >> 2] = 0;
HEAP32[$tmpcast$i$i107$byval_copy + 16 >> 2] = 0;
$$sroa$6$0$$sroa_idx31 = $9 + 3 | 0;
if (!($72 & 1)) {
$$2 = 0;
$$sroa$0$1 = $$sroa$0$0$copyload;
} else {
$76 = $$sroa$0$0$copyload & 15761407 | 32768;
HEAP32[$6 >> 2] = 0;
HEAP32[$7 >> 2] = 0;
HEAP16[$9 >> 1] = $76;
HEAP8[$9 + 2 >> 0] = $76 >>> 16;
HEAP8[$$sroa$6$0$$sroa_idx31 >> 0] = $$sroa$6$0$copyload;
HEAP8[$$byval_copy31 >> 0] = HEAP8[$9 >> 0] | 0;
HEAP8[$$byval_copy31 + 1 >> 0] = HEAP8[$9 + 1 >> 0] | 0;
HEAP8[$$byval_copy31 + 2 >> 0] = HEAP8[$9 + 2 >> 0] | 0;
HEAP8[$$byval_copy31 + 3 >> 0] = HEAP8[$9 + 3 >> 0] | 0;
__ZNK11HanimAvatar12locateSiteIDEb6SiteIDP6VectorRP5JointRP4Site($0, 0, $$byval_copy31, 0, $6, $7);
$77 = HEAP32[$7 >> 2] | 0;
if (!$77) $$1 = 0; else {
HEAP32[$tmpcast$i$i107$byval_copy >> 2] = $77;
$$1 = 1;
}
$$2 = $$1;
$$sroa$0$1 = $76;
}
if (!($72 & 2)) {
$$2$1 = $$2;
$$sroa$0$1$1 = $$sroa$0$1;
} else {
$166 = $$sroa$0$1 & 15761407 | 65536;
HEAP32[$6 >> 2] = 0;
HEAP32[$7 >> 2] = 0;
HEAP16[$9 >> 1] = $166;
HEAP8[$9 + 2 >> 0] = $166 >>> 16;
HEAP8[$$sroa$6$0$$sroa_idx31 >> 0] = $$sroa$6$0$copyload;
HEAP8[$$byval_copy31 >> 0] = HEAP8[$9 >> 0] | 0;
HEAP8[$$byval_copy31 + 1 >> 0] = HEAP8[$9 + 1 >> 0] | 0;
HEAP8[$$byval_copy31 + 2 >> 0] = HEAP8[$9 + 2 >> 0] | 0;
HEAP8[$$byval_copy31 + 3 >> 0] = HEAP8[$9 + 3 >> 0] | 0;
__ZNK11HanimAvatar12locateSiteIDEb6SiteIDP6VectorRP5JointRP4Site($0, 0, $$byval_copy31, 0, $6, $7);
$167 = HEAP32[$7 >> 2] | 0;
if (!$167) $$1$1 = $$2; else {
HEAP32[$tmpcast$i$i107$byval_copy + ($$2 << 16 >> 16 << 2) >> 2] = $167;
$$1$1 = $$2 + 1 << 16 >> 16;
}
$$2$1 = $$1$1;
$$sroa$0$1$1 = $166;
}
if (!($72 & 4)) {
$$2$2 = $$2$1;
$$sroa$0$1$2 = $$sroa$0$1$1;
} else {
$175 = $$sroa$0$1$1 & 15761407 | 131072;
HEAP32[$6 >> 2] = 0;
HEAP32[$7 >> 2] = 0;
HEAP16[$9 >> 1] = $175;
HEAP8[$9 + 2 >> 0] = $175 >>> 16;
HEAP8[$$sroa$6$0$$sroa_idx31 >> 0] = $$sroa$6$0$copyload;
HEAP8[$$byval_copy31 >> 0] = HEAP8[$9 >> 0] | 0;
HEAP8[$$byval_copy31 + 1 >> 0] = HEAP8[$9 + 1 >> 0] | 0;
HEAP8[$$byval_copy31 + 2 >> 0] = HEAP8[$9 + 2 >> 0] | 0;
HEAP8[$$byval_copy31 + 3 >> 0] = HEAP8[$9 + 3 >> 0] | 0;
__ZNK11HanimAvatar12locateSiteIDEb6SiteIDP6VectorRP5JointRP4Site($0, 0, $$byval_copy31, 0, $6, $7);
$176 = HEAP32[$7 >> 2] | 0;
if (!$176) $$1$2 = $$2$1; else {
HEAP32[$tmpcast$i$i107$byval_copy + ($$2$1 << 16 >> 16 << 2) >> 2] = $176;
$$1$2 = $$2$1 + 1 << 16 >> 16;
}
$$2$2 = $$1$2;
$$sroa$0$1$2 = $175;
}
if (!($72 & 8)) {
$$2$3 = $$2$2;
$$sroa$0$1$3 = $$sroa$0$1$2;
} else {
$184 = $$sroa$0$1$2 & 15761407 | 262144;
HEAP32[$6 >> 2] = 0;
HEAP32[$7 >> 2] = 0;
HEAP16[$9 >> 1] = $184;
HEAP8[$9 + 2 >> 0] = $184 >>> 16;
HEAP8[$$sroa$6$0$$sroa_idx31 >> 0] = $$sroa$6$0$copyload;
HEAP8[$$byval_copy31 >> 0] = HEAP8[$9 >> 0] | 0;
HEAP8[$$byval_copy31 + 1 >> 0] = HEAP8[$9 + 1 >> 0] | 0;
HEAP8[$$byval_copy31 + 2 >> 0] = HEAP8[$9 + 2 >> 0] | 0;
HEAP8[$$byval_copy31 + 3 >> 0] = HEAP8[$9 + 3 >> 0] | 0;
__ZNK11HanimAvatar12locateSiteIDEb6SiteIDP6VectorRP5JointRP4Site($0, 0, $$byval_copy31, 0, $6, $7);
$185 = HEAP32[$7 >> 2] | 0;
if (!$185) $$1$3 = $$2$2; else {
HEAP32[$tmpcast$i$i107$byval_copy + ($$2$2 << 16 >> 16 << 2) >> 2] = $185;
$$1$3 = $$2$2 + 1 << 16 >> 16;
}
$$2$3 = $$1$3;
$$sroa$0$1$3 = $184;
}
if (!($72 & 16)) $$2$4 = $$2$3; else {
$192 = $$sroa$0$1$3 & 15761407 | 524288;
HEAP32[$6 >> 2] = 0;
HEAP32[$7 >> 2] = 0;
HEAP16[$9 >> 1] = $192;
HEAP8[$9 + 2 >> 0] = $192 >>> 16;
HEAP8[$$sroa$6$0$$sroa_idx31 >> 0] = $$sroa$6$0$copyload;
HEAP8[$$byval_copy31 >> 0] = HEAP8[$9 >> 0] | 0;
HEAP8[$$byval_copy31 + 1 >> 0] = HEAP8[$9 + 1 >> 0] | 0;
HEAP8[$$byval_copy31 + 2 >> 0] = HEAP8[$9 + 2 >> 0] | 0;
HEAP8[$$byval_copy31 + 3 >> 0] = HEAP8[$9 + 3 >> 0] | 0;
__ZNK11HanimAvatar12locateSiteIDEb6SiteIDP6VectorRP5JointRP4Site($0, 0, $$byval_copy31, 0, $6, $7);
$193 = HEAP32[$7 >> 2] | 0;
if (!$193) $$1$4 = $$2$3; else {
HEAP32[$tmpcast$i$i107$byval_copy + ($$2$3 << 16 >> 16 << 2) >> 2] = $193;
$$1$4 = $$2$3 + 1 << 16 >> 16;
}
$$2$4 = $$1$4;
}
if ($$2$4 << 16 >> 16 <= 0) {
$91 = HEAPU16[$2 >> 1] | HEAPU8[$2 + 2 >> 0] << 16;
break;
}
if ($$2$4 << 16 >> 16 != 1) {}
$82 = HEAP32[$tmpcast$i$i107$byval_copy >> 2] | 0;
$83 = $82 + 12 | 0;
HEAP16[$2 >> 1] = HEAP16[$83 >> 1] | 0;
HEAP8[$2 + 2 >> 0] = HEAP8[$83 + 2 >> 0] | 0;
HEAP32[$5 >> 2] = $82;
HEAP32[$4 >> 2] = HEAP32[$82 + 16 >> 2];
if (!$10) {
STACKTOP = sp;
return;
}
__ZN6VectorC2EPKS_($$byval_copy31, __ZN4Site24getGlobalBoneTranslationEv(HEAP32[$5 >> 2] | 0) | 0);
__ZN6Vector7setFromERKS_($3, $$byval_copy31);
if (!0) {
STACKTOP = sp;
return;
} else {
__Z7eprintfPKcz(19237, $vararg_buffer8);
__ZNK6SiteID5printEP8_IO_FILE($2, HEAP32[16082] | 0);
__Z7eprintfPKcz(19156, $vararg_buffer10);
__ZNK6Vector5printEP8_IO_FILEi($3, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
STACKTOP = sp;
return;
}
} else $91 = $51;
} while (0);
$93 = ($91 & 16777215) >>> 20 & 7;
$94 = $93 & 16777215;
do if (($93 & 16777215 | 0) == 1) $133 = $91; else {
$97 = $91 & 9437183 | 1048576;
HEAP16[$2 >> 1] = $97;
HEAP8[$2 + 2 >> 0] = $97 >>> 16;
$98 = HEAP32[$2 >> 2] | 0;
HEAP32[$8 >> 2] = $98;
$99 = HEAP32[$26 >> 2] | 0;
HEAP8[$$byval_copy31 >> 0] = HEAP8[$8 >> 0] | 0;
HEAP8[$$byval_copy31 + 1 >> 0] = HEAP8[$8 + 1 >> 0] | 0;
HEAP8[$$byval_copy31 + 2 >> 0] = HEAP8[$8 + 2 >> 0] | 0;
HEAP8[$$byval_copy31 + 3 >> 0] = HEAP8[$8 + 3 >> 0] | 0;
$100 = __ZN6KeyOpsIK6SiteIDE12hashFunctionES0_i($$byval_copy31, $99) | 0;
$101 = HEAP32[$29 >> 2] | 0;
L93 : do if ((HEAP16[$101 + ($100 << 3) + 4 >> 1] | 0) > 0) {
$$01115$i$i98 = HEAP32[$101 + ($100 << 3) >> 2] | 0;
if (!$$01115$i$i98) label = 43; else {
$$01116$i$i99 = $$01115$i$i98;
while (1) {
HEAP32[$6 >> 2] = $98;
HEAP32[$7 >> 2] = HEAP32[$$01116$i$i99 >> 2];
HEAP32[$tmpcast$i$i107$byval_copy >> 2] = HEAP32[$6 >> 2];
HEAP8[$$byval_copy31 >> 0] = HEAP8[$7 >> 0] | 0;
HEAP8[$$byval_copy31 + 1 >> 0] = HEAP8[$7 + 1 >> 0] | 0;
HEAP8[$$byval_copy31 + 2 >> 0] = HEAP8[$7 + 2 >> 0] | 0;
HEAP8[$$byval_copy31 + 3 >> 0] = HEAP8[$7 + 3 >> 0] | 0;
if (__ZN6KeyOpsIK6SiteIDE5eqkeyES0_S0_($tmpcast$i$i107$byval_copy, $$byval_copy31) | 0) break;
$$011$i$i101 = HEAP32[$$01116$i$i99 + 8 >> 2] | 0;
if (!$$011$i$i101) {
label = 43;
break L93;
} else $$01116$i$i99 = $$011$i$i101;
}
$$sink$i$i103 = $$01116$i$i99 + 4 | 0;
}
} else label = 43; while (0);
if ((label | 0) == 43) $$sink$i$i103 = $0 + 192 | 0;
$113 = HEAP32[$$sink$i$i103 >> 2] | 0;
HEAP32[$5 >> 2] = $113;
if (!$113) {
$133 = HEAPU16[$2 >> 1] | HEAPU8[$2 + 2 >> 0] << 16;
break;
}
HEAP32[$4 >> 2] = HEAP32[$113 + 16 >> 2];
if ($10) {
__ZN6VectorC2EPKS_($$byval_copy31, __ZN4Site24getGlobalBoneTranslationEv(HEAP32[$5 >> 2] | 0) | 0);
__ZN6Vector7setFromERKS_($3, $$byval_copy31);
}
$121 = Math_fround(HEAPF32[(HEAP32[17190] | 0) + ($94 << 2) >> 2]);
do if ($121 != Math_fround(0.0)) {
$123 = HEAP32[$5 >> 2] | 0;
$125 = HEAP32[$123 + 24 >> 2] | 0;
if (!$125) {
if (!0) break;
HEAP32[$vararg_buffer12 >> 2] = HEAP32[$123 >> 2];
__Z7eprintfPKcz(19259, $vararg_buffer12);
__ZNK6SiteID5printEP8_IO_FILE($2, HEAP32[16082] | 0);
__Z5eputcc(10);
break;
}
__ZN6VectorC2ERKS_($$byval_copy31, $125);
__ZN6Vector8setScaleEf($$byval_copy31, $121);
if ($10) __ZN6Vector6setAddERKS_($3, $$byval_copy31);
} while (0);
if (0 == 0 | $10 ^ 1) {
STACKTOP = sp;
return;
}
__Z7eprintfPKcz(19333, $vararg_buffer15);
__ZNK6SiteID5printEP8_IO_FILE($2, HEAP32[16082] | 0);
__Z7eprintfPKcz(19156, $vararg_buffer17);
__ZNK6Vector5printEP8_IO_FILEi($3, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
STACKTOP = sp;
return;
} while (0);
$135 = ($133 & 16777215) >>> 12 & 7;
$136 = $135 & 16777215;
if ($135 & 16777215 | 0) {
$138 = $133 & 16748543;
HEAP16[$2 >> 1] = $138;
HEAP8[$2 + 2 >> 0] = $138 >>> 16;
$139 = HEAP32[$2 >> 2] | 0;
HEAP32[$8 >> 2] = $139;
$140 = HEAP32[$26 >> 2] | 0;
HEAP8[$$byval_copy31 >> 0] = HEAP8[$8 >> 0] | 0;
HEAP8[$$byval_copy31 + 1 >> 0] = HEAP8[$8 + 1 >> 0] | 0;
HEAP8[$$byval_copy31 + 2 >> 0] = HEAP8[$8 + 2 >> 0] | 0;
HEAP8[$$byval_copy31 + 3 >> 0] = HEAP8[$8 + 3 >> 0] | 0;
$141 = __ZN6KeyOpsIK6SiteIDE12hashFunctionES0_i($$byval_copy31, $140) | 0;
$142 = HEAP32[$29 >> 2] | 0;
L125 : do if ((HEAP16[$142 + ($141 << 3) + 4 >> 1] | 0) > 0) {
$$01115$i$i109 = HEAP32[$142 + ($141 << 3) >> 2] | 0;
if (!$$01115$i$i109) label = 63; else {
$$01116$i$i110 = $$01115$i$i109;
while (1) {
HEAP32[$6 >> 2] = $139;
HEAP32[$7 >> 2] = HEAP32[$$01116$i$i110 >> 2];
HEAP32[$tmpcast$i$i107$byval_copy >> 2] = HEAP32[$6 >> 2];
HEAP8[$$byval_copy31 >> 0] = HEAP8[$7 >> 0] | 0;
HEAP8[$$byval_copy31 + 1 >> 0] = HEAP8[$7 + 1 >> 0] | 0;
HEAP8[$$byval_copy31 + 2 >> 0] = HEAP8[$7 + 2 >> 0] | 0;
HEAP8[$$byval_copy31 + 3 >> 0] = HEAP8[$7 + 3 >> 0] | 0;
if (__ZN6KeyOpsIK6SiteIDE5eqkeyES0_S0_($tmpcast$i$i107$byval_copy, $$byval_copy31) | 0) break;
$$011$i$i112 = HEAP32[$$01116$i$i110 + 8 >> 2] | 0;
if (!$$011$i$i112) {
label = 63;
break L125;
} else $$01116$i$i110 = $$011$i$i112;
}
$$sink$i$i114 = $$01116$i$i110 + 4 | 0;
}
} else label = 63; while (0);
if ((label | 0) == 63) $$sink$i$i114 = $0 + 192 | 0;
$154 = HEAP32[$$sink$i$i114 >> 2] | 0;
HEAP32[$5 >> 2] = $154;
if ($154 | 0) {
HEAP32[$4 >> 2] = HEAP32[$154 + 16 >> 2];
if ($10) {
__ZN6VectorC2EPKS_($$byval_copy31, __ZN4Site24getGlobalBoneTranslationEv(HEAP32[$5 >> 2] | 0) | 0);
__ZN6Vector7setFromERKS_($3, $$byval_copy31);
if (0) {
HEAP32[$vararg_buffer19 >> 2] = $136;
__Z7eprintfPKcz(19355, $vararg_buffer19);
__ZNK6SiteID5printEP8_IO_FILE($2, HEAP32[16082] | 0);
__Z7eprintfPKcz(19156, $vararg_buffer22);
__ZNK6Vector5printEP8_IO_FILEi($3, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
}
STACKTOP = sp;
return;
}
}
if (!1) {
STACKTOP = sp;
return;
}
__Z7LogTimev() | 0;
__Z7eprintfPKcz(19441, $vararg_buffer24);
__ZNK6SiteID5printEP8_IO_FILE($2, HEAP32[16082] | 0);
__Z7eprintfPKcz(19447, $vararg_buffer26);
STACKTOP = sp;
return;
}
function __Z18handle_sign_manualPKcPK11HanimAvatarP7XMLCell($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0 = 0, $$0$i230 = 0, $$0$i241 = 0, $$016$i = 0, $$0208 = 0, $$1$i = 0, $$1207 = 0, $$1210 = 0, $$2$i = 0, $$6 = 0, $$6205 = 0, $$not = 0, $$not246 = 0, $$pre$i = 0, $10 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $114 = 0, $12 = 0, $120 = 0, $13 = 0, $133 = 0, $140 = 0, $141 = 0, $145 = 0, $150 = 0, $154 = 0, $159 = 0, $161 = 0, $167 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $185 = 0, $187 = 0, $19 = 0, $192 = 0, $193 = 0, $194 = 0, $199 = 0, $202 = 0, $205 = 0, $206 = 0, $207 = 0, $209 = 0, $217 = 0, $227 = 0, $228 = 0, $230 = 0, $231 = 0, $232 = 0, $237 = 0, $240 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $263 = 0, $264 = 0, $266 = 0, $273 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $28 = 0, $29 = 0, $292 = 0, $296 = 0.0, $299 = 0.0, $3 = 0, $300 = 0, $301 = 0, $305 = 0.0, $308 = 0, $316 = 0, $321 = 0, $324 = 0, $328 = 0, $329 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $366 = 0, $367 = 0, $368 = 0, $37 = 0, $39 = 0, $4 = 0, $43 = 0, $46 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $68 = 0, $7 = 0, $8 = 0, $81 = 0, $9 = 0, $90 = 0, $93 = 0, $98 = 0, $tmpcast$byval_copy = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$tmpcast$byval_copy = sp + 62 | 0;
$vararg_buffer11 = sp + 40 | 0;
$vararg_buffer7 = sp + 24 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$3 = sp + 60 | 0;
$4 = sp + 59 | 0;
$5 = sp + 58 | 0;
$6 = sp + 57 | 0;
$7 = sp + 56 | 0;
$8 = sp + 55 | 0;
$9 = sp + 54 | 0;
$10 = sp + 53 | 0;
$11 = sp + 52 | 0;
$12 = sp + 50 | 0;
$13 = sp + 48 | 0;
if (!$2) {
$19 = 0;
$29 = 0;
} else {
$19 = HEAP32[$2 + 4 >> 2] | 0;
$29 = HEAP32[$2 + 8 >> 2] | 0;
}
__Z10boolAttribPK7HashAnyIPKcS1_ES1_Rbb($19, 52928, $3, 0) | 0;
__Z10boolAttribPK7HashAnyIPKcS1_ES1_Rbb($19, 30299, $4, 0) | 0;
__Z10boolAttribPK7HashAnyIPKcS1_ES1_Rbb($19, 52902, $5, 0) | 0;
__Z10boolAttribPK7HashAnyIPKcS1_ES1_Rbb($19, 52920, $6, 0) | 0;
__Z10boolAttribPK7HashAnyIPKcS1_ES1_Rbb($19, 52950, $7, 0) | 0;
__Z10boolAttribPK7HashAnyIPKcS1_ES1_Rbb($19, 52939, $8, 0) | 0;
__Z10boolAttribPK7HashAnyIPKcS1_ES1_Rbb($19, 52910, $9, 0) | 0;
__Z10boolAttribPK7HashAnyIPKcS1_ES1_Rbb($19, 30311, $10, 0) | 0;
__Z10boolAttribPK7HashAnyIPKcS1_ES1_Rbb($19, 30320, $11, 1) | 0;
if ((HEAP8[$6 >> 0] | HEAP8[$5 >> 0] | HEAP8[$7 >> 0] | HEAP8[$8 >> 0]) << 24 >> 24) HEAP8[$3 >> 0] = 1;
$28 = ($29 | 0) == 0;
if ($28) $37 = 0; else if (!(HEAP32[$29 + 12 >> 2] | 0)) $37 = 0; else if (!(HEAP8[$3 >> 0] | 0)) $37 = __ZL10whichHandsP7XMLCell(HEAP32[$2 + 8 >> 2] | 0) | 0; else $37 = 5;
$39 = (HEAP8[$4 >> 0] | 0) == 0;
$$0 = ($37 | 0) != 1 | $39 ? $37 : 2;
do if ($39) label = 14; else {
if (HEAP8[$3 >> 0] | 0) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer >> 2] = $0;
__Z7eprintfPKcz(30332, $vararg_buffer);
__Z8BadSiGMLv();
HEAP8[$4 >> 0] = 0;
label = 14;
break;
}
if (($$0 | 0) == 5) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer1 >> 2] = $0;
__Z7eprintfPKcz(30419, $vararg_buffer1);
__Z8BadSiGMLv();
HEAP8[$4 >> 0] = 0;
label = 14;
} else {
$$not246 = 1;
$61 = 0;
}
} while (0);
if ((label | 0) == 14) {
$43 = ($$0 | 0) == 5;
$$not = $43 ^ 1;
if ((HEAP8[$10 >> 0] | 0) == 0 | $$not) {
$$not246 = $$not;
$61 = $43;
} else {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer4 >> 2] = $0;
__Z7eprintfPKcz(30510, $vararg_buffer4);
HEAP8[$10 >> 0] = 0;
$$not246 = 0;
$61 = $43;
}
}
$46 = __Znwj(52) | 0;
__THREW__ = 0;
invoke_viiii(7, $46 | 0, $0 | 0, $1 | 0, (HEAP8[$11 >> 0] | 0) != 0 | 0);
$49 = __THREW__;
__THREW__ = 0;
if ($49 & 1) {
$109 = ___cxa_find_matching_catch_2() | 0;
$110 = tempRet0;
__ZdlPv($46);
$$6 = $109;
$$6205 = $110;
___resumeException($$6 | 0);
}
$51 = HEAP8[$3 >> 0] | 0;
$52 = $46 + 13 | 0;
$53 = HEAP8[$52 >> 0] | 0;
$56 = ($$0 | 4 | 0) == 5;
$59 = ($$0 | 0) == 2;
$60 = $59 | $61;
$68 = HEAP8[$5 >> 0] | 0;
$81 = $46 + 14 | 0;
HEAP8[$81 >> 0] = HEAP8[$6 >> 0] << 2 & 255 | $68 << 1 & 2 | $51 << 24 >> 24 != 0 & $68 << 24 >> 24 == 0 & 1 | HEAP8[$7 >> 0] << 3 & 255;
HEAP8[$52 >> 0] = ($60 & 1) << 3 & 255 | ($56 & 1) << 2 & 255 | $51 | $53 & -62 | HEAP8[$8 >> 0] << 4 & 255 | HEAP8[$9 >> 0] << 5 & 255;
if (!(HEAP8[$10 >> 0] | 0)) {
if (!$56) {
$90 = HEAP32[16637] | 0;
if ($90 | 0) {
$93 = HEAP32[$46 + 20 >> 2] | 0;
$98 = HEAP32[($53 & 64 ? $90 + 20 | 0 : $90 + 24 | 0) >> 2] | 0;
__ZN18HandJointRotations7setFromEPKS_(HEAP32[(HEAP32[$93 + 56 >> 2] | 0) + 236 >> 2] | 0, HEAP32[(HEAP32[$98 + 56 >> 2] | 0) + 236 >> 2] | 0);
__ZN19OneHAbstractPosture11defaultFromERKS_($93, $98);
__ZN18SiGMLConstellation13SetUnusedHandEP19OneHAbstractPostureb(HEAP32[$46 + 36 >> 2] | 0, $98, 1);
}
}
if (!$60) {
$111 = HEAP32[16637] | 0;
if ($111 | 0) {
$114 = HEAP32[$46 + 24 >> 2] | 0;
$120 = HEAP32[((HEAP8[$52 >> 0] & 64) == 0 ? $111 + 20 | 0 : $111 + 24 | 0) >> 2] | 0;
__ZN18HandJointRotations7setFromEPKS_(HEAP32[(HEAP32[$114 + 56 >> 2] | 0) + 236 >> 2] | 0, HEAP32[(HEAP32[$120 + 56 >> 2] | 0) + 236 >> 2] | 0);
__ZN19OneHAbstractPosture11defaultFromERKS_($114, $120);
__ZN18SiGMLConstellation13SetUnusedHandEP19OneHAbstractPostureb(HEAP32[$46 + 36 >> 2] | 0, $120, 0);
}
}
}
$$pre$i = $29 + 12 | 0;
if ($28) $133 = 0; else $133 = HEAP32[$$pre$i >> 2] | 0;
$$016$i = 0;
while (1) {
if (($$016$i | 0) >= ($133 | 0)) {
$$2$i = $$016$i;
break;
}
if (($$016$i | 0) < 0) $140 = 0; else if ((HEAP32[$$pre$i >> 2] | 0) > ($$016$i | 0)) $140 = HEAP32[(HEAP32[$29 >> 2] | 0) + ($$016$i << 2) >> 2] | 0; else $140 = 0;
$141 = __Z25AddToStaticGestureFromXMLP7GestureP7XMLCell($46, $140) | 0;
$$1$i = $$016$i + ($141 & 1) | 0;
if ($141) $$016$i = $$1$i; else {
$$2$i = $$1$i;
break;
}
}
if ($28) $187 = 0; else $187 = (HEAP32[$$pre$i >> 2] | 0) - $$2$i | 0;
$145 = HEAP8[$52 >> 0] | 0;
$150 = ($$0 | 0) == (2 - (($145 & 255) >>> 6 & 1) | 0);
do if (!$$0) if (!(HEAP8[$10 >> 0] | 0)) {
$154 = __Znwj(536) | 0;
__THREW__ = 0;
invoke_viii(88, $154 | 0, 4 - (($145 & 64) >>> 6) | 0, $46 | 0);
$159 = __THREW__;
__THREW__ = 0;
if ($159 & 1) {
$173 = ___cxa_find_matching_catch_2() | 0;
$174 = tempRet0;
__ZdlPv($154);
$$6 = $173;
$$6205 = $174;
___resumeException($$6 | 0);
}
__ZN13BasicMovement9setMannerE6Manner($154, 1);
$161 = __Znwj(536) | 0;
__THREW__ = 0;
invoke_viii(88, $161 | 0, ((HEAP8[$52 >> 0] & 64) >>> 6) + 3 | 0, $46 | 0);
$167 = __THREW__;
__THREW__ = 0;
if (!($167 & 1)) {
__ZN13BasicMovement9setMannerE6Manner($161, 1);
$$1207 = __Z17MakeSplitMovementP13BasicMovementS0_b($154, $161, (HEAP8[$52 >> 0] & 64) != 0) | 0;
break;
}
$175 = ___cxa_find_matching_catch_2() | 0;
$176 = tempRet0;
__ZdlPv($161);
$$6 = $175;
$$6205 = $176;
___resumeException($$6 | 0);
} else $$1207 = 0; else {
$177 = __Znwj(536) | 0;
$178 = $145 & 64;
switch ($$0 | 0) {
case 1:
{
$$0$i230 = 4 - (($178 & 255) >>> 6) | 0;
break;
}
case 2:
{
$$0$i230 = (($178 & 255) >>> 6) + 3 | 0;
break;
}
default:
$$0$i230 = $37;
}
__THREW__ = 0;
invoke_viii(88, $177 | 0, $$0$i230 | 0, $46 | 0);
$185 = __THREW__;
__THREW__ = 0;
if ($185 & 1) {
$192 = ___cxa_find_matching_catch_2() | 0;
$193 = tempRet0;
__ZdlPv($177);
$$6 = $192;
$$6205 = $193;
___resumeException($$6 | 0);
}
__ZN13BasicMovement9setMannerE6Manner($177, ($187 & 65535 | 0) == 0 ? 3 : 1);
if ($$not246 & (HEAP8[$10 >> 0] | 0) == 0) {
$194 = __Znwj(536) | 0;
$199 = (HEAP8[$52 >> 0] & 64) >>> 6;
__THREW__ = 0;
invoke_viii(88, $194 | 0, (($$0 | 0) == 1 ? $199 + 3 | 0 : 4 - $199 | 0) | 0, $46 | 0);
$202 = __THREW__;
__THREW__ = 0;
if (!($202 & 1)) {
__ZN13BasicMovement9setMannerE6Manner($194, 1);
$$1207 = __Z17MakeSplitMovementP13BasicMovementS0_b($177, $194, $150) | 0;
break;
}
$205 = ___cxa_find_matching_catch_2() | 0;
$206 = tempRet0;
__ZdlPv($194);
$$6 = $205;
$$6205 = $206;
___resumeException($$6 | 0);
} else $$1207 = $177;
} while (0);
$207 = HEAP32[16637] | 0;
if ($207 | 0) {
$209 = HEAP8[$52 >> 0] | 0;
if (!($209 & 4)) $217 = $209; else {
__ZN19OneHAbstractPosture20defaultHandstuffFromERKS_(HEAP32[$46 + 20 >> 2] | 0, HEAP32[$207 + 20 >> 2] | 0);
$217 = HEAP8[$52 >> 0] | 0;
}
if ($217 & 8) __ZN19OneHAbstractPosture20defaultHandstuffFromERKS_(HEAP32[$46 + 24 >> 2] | 0, HEAP32[(HEAP32[16637] | 0) + 24 >> 2] | 0);
}
if (!($187 & 65535)) {
if (!(HEAP8[$10 >> 0] | 0)) {
$$1210 = $$1207;
$368 = $46 + 44 | 0;
HEAP32[$368 >> 2] = $$1210;
__ZN7Gesture11PostProcessEv($46);
STACKTOP = sp;
return $46 | 0;
}
switch ($$0 | 0) {
case 0:
case 5:
{
$227 = __Znwj(528) | 0;
__THREW__ = 0;
invoke_viii(89, $227 | 0, 10, 5);
$228 = __THREW__;
__THREW__ = 0;
if ($228 & 1) {
$230 = ___cxa_find_matching_catch_2() | 0;
$231 = tempRet0;
__ZdlPv($227);
$$6 = $230;
$$6205 = $231;
___resumeException($$6 | 0);
} else {
HEAP32[$227 >> 2] = 2368;
$$1210 = $227;
$368 = $46 + 44 | 0;
HEAP32[$368 >> 2] = $$1210;
__ZN7Gesture11PostProcessEv($46);
STACKTOP = sp;
return $46 | 0;
}
break;
}
default:
{
$232 = __Znwj(528) | 0;
$237 = (HEAP8[$52 >> 0] & 64) >>> 6;
__THREW__ = 0;
invoke_viii(89, $232 | 0, 10, (($$0 | 0) == 1 ? $237 + 3 | 0 : 4 - $237 | 0) | 0);
$240 = __THREW__;
__THREW__ = 0;
if ($240 & 1) {
$243 = ___cxa_find_matching_catch_2() | 0;
$244 = tempRet0;
__ZdlPv($232);
$$6 = $243;
$$6205 = $244;
___resumeException($$6 | 0);
} else {
HEAP32[$232 >> 2] = 2368;
$$1210 = __Z17MakeSplitMovementP13BasicMovementS0_b($$1207, $232, $150) | 0;
$368 = $46 + 44 | 0;
HEAP32[$368 >> 2] = $$1210;
__ZN7Gesture11PostProcessEv($46);
STACKTOP = sp;
return $46 | 0;
}
}
}
}
$245 = __Znwj(580) | 0;
if ($61) {
__THREW__ = 0;
invoke_viii(89, $245 | 0, 6, 5);
$246 = __THREW__;
__THREW__ = 0;
if ($246 & 1) {
$263 = ___cxa_find_matching_catch_2() | 0;
$264 = tempRet0;
__ZdlPv($245);
$$6 = $263;
$$6205 = $264;
___resumeException($$6 | 0);
} else {
HEAP32[$245 + 532 >> 2] = 10;
HEAP32[$245 + 540 >> 2] = 0;
HEAP32[$245 + 528 >> 2] = 0;
HEAP32[$245 + 536 >> 2] = 0;
HEAP32[$245 >> 2] = 3068;
HEAP16[$245 + 544 >> 1] = 0;
HEAPF32[$245 + 548 >> 2] = Math_fround(0.0);
HEAPF32[$245 + 552 >> 2] = Math_fround(0.0);
HEAP16[$245 + 556 >> 1] = 0;
HEAPF32[$245 + 576 >> 2] = Math_fround(0.0);
HEAP32[$245 + 564 >> 2] = 10;
HEAP32[$245 + 572 >> 2] = 0;
HEAP32[$245 + 560 >> 2] = 0;
HEAP32[$245 + 568 >> 2] = 0;
__ZN16CompoundMovement12addComponentEP13BasicMovement($245, $$1207);
HEAP32[$46 + 44 >> 2] = $245;
HEAP16[$12 >> 1] = HEAP16[$81 >> 1] | 0;
HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$12 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$12 + 1 >> 0] | 0;
__Z19AddMovementsFromXMLPK7GestureP11SeqMovementP13DynamicArrayPI7XMLCellEibb9Mirroring8Location($46, $245, $29, $$2$i, $56, 1, $tmpcast$byval_copy, 0);
$$1210 = $245;
$368 = $46 + 44 | 0;
HEAP32[$368 >> 2] = $$1210;
__ZN7Gesture11PostProcessEv($46);
STACKTOP = sp;
return $46 | 0;
}
}
$266 = HEAP8[$52 >> 0] & 64;
switch ($$0 | 0) {
case 1:
{
$$0$i241 = 4 - (($266 & 255) >>> 6) | 0;
break;
}
case 2:
{
$$0$i241 = (($266 & 255) >>> 6) + 3 | 0;
break;
}
default:
$$0$i241 = $37;
}
__THREW__ = 0;
invoke_viii(89, $245 | 0, 6, $$0$i241 | 0);
$273 = __THREW__;
__THREW__ = 0;
if ($273 & 1) {
$300 = ___cxa_find_matching_catch_2() | 0;
$301 = tempRet0;
__ZdlPv($245);
$$6 = $300;
$$6205 = $301;
___resumeException($$6 | 0);
}
$275 = $245 + 532 | 0;
HEAP32[$275 >> 2] = 10;
$276 = $245 + 540 | 0;
HEAP32[$276 >> 2] = 0;
$277 = $245 + 528 | 0;
HEAP32[$277 >> 2] = 0;
$278 = $245 + 536 | 0;
HEAP32[$278 >> 2] = 0;
HEAP32[$245 >> 2] = 3068;
HEAP16[$245 + 544 >> 1] = 0;
HEAPF32[$245 + 548 >> 2] = Math_fround(0.0);
HEAPF32[$245 + 552 >> 2] = Math_fround(0.0);
HEAP16[$245 + 556 >> 1] = 0;
HEAPF32[$245 + 576 >> 2] = Math_fround(0.0);
HEAP32[$245 + 564 >> 2] = 10;
HEAP32[$245 + 572 >> 2] = 0;
HEAP32[$245 + 560 >> 2] = 0;
HEAP32[$245 + 568 >> 2] = 0;
HEAP16[$13 >> 1] = HEAP16[$81 >> 1] | 0;
HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$13 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$13 + 1 >> 0] | 0;
__Z19AddMovementsFromXMLPK7GestureP11SeqMovementP13DynamicArrayPI7XMLCellEibb9Mirroring8Location($46, $245, $29, $$2$i, $56, $59, $tmpcast$byval_copy, 0);
if ((HEAP32[$276 >> 2] | 0) == 1) {
$292 = HEAP32[HEAP32[$277 >> 2] >> 2] | 0;
if (0) {
$296 = +Math_fround(HEAPF32[$292 + 52 >> 2]);
$299 = +Math_fround(HEAPF32[$245 + 52 >> 2]);
HEAPF64[$vararg_buffer7 >> 3] = $296;
HEAPF64[$vararg_buffer7 + 8 >> 3] = $299;
__Z7eprintfPKcz(30598, $vararg_buffer7);
}
__ZN13BasicMovement23MergeDurationPropertiesEPKS_($292, $245);
if (0) {
$305 = +Math_fround(HEAPF32[$292 + 52 >> 2]);
HEAPF64[$vararg_buffer11 >> 3] = $305;
__Z7eprintfPKcz(30642, $vararg_buffer11);
}
if ((HEAP32[$278 >> 2] | 0) <= 0) {
$308 = HEAP32[$275 >> 2] | 0;
__ZN13DynamicArrayPI13BasicMovementE6resizeEi($277, ($308 | 0) > 1 ? $308 : 1);
}
if ((HEAP32[$276 >> 2] | 0) <= 0) HEAP32[$276 >> 2] = 1;
HEAP32[HEAP32[$277 >> 2] >> 2] = 0;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$245 >> 2] | 0) + 4 >> 2] & 255]($245);
$$0208 = $292;
} else $$0208 = $245;
$316 = __Znwj(528) | 0;
$321 = (HEAP8[$52 >> 0] & 64) >>> 6;
__THREW__ = 0;
invoke_viii(89, $316 | 0, 10, (($$0 | 0) == 1 ? $321 + 3 | 0 : 4 - $321 | 0) | 0);
$324 = __THREW__;
__THREW__ = 0;
if ($324 & 1) {
$345 = ___cxa_find_matching_catch_2() | 0;
$346 = tempRet0;
__ZdlPv($316);
$$6 = $345;
$$6205 = $346;
___resumeException($$6 | 0);
}
HEAP32[$316 >> 2] = 2368;
if (!(HEAP8[$10 >> 0] | 0)) {
$349 = __Z17MakeSplitMovementP13BasicMovementS0_b($$0208, $316, $150) | 0;
$350 = __Znwj(580) | 0;
__THREW__ = 0;
invoke_viii(89, $350 | 0, 6, 5);
$351 = __THREW__;
__THREW__ = 0;
if ($351 & 1) {
$366 = ___cxa_find_matching_catch_2() | 0;
$367 = tempRet0;
__ZdlPv($350);
$$6 = $366;
$$6205 = $367;
___resumeException($$6 | 0);
} else {
HEAP32[$350 + 532 >> 2] = 10;
HEAP32[$350 + 540 >> 2] = 0;
HEAP32[$350 + 528 >> 2] = 0;
HEAP32[$350 + 536 >> 2] = 0;
HEAP32[$350 >> 2] = 3068;
HEAP16[$350 + 544 >> 1] = 0;
HEAPF32[$350 + 548 >> 2] = Math_fround(0.0);
HEAPF32[$350 + 552 >> 2] = Math_fround(0.0);
HEAP16[$350 + 556 >> 1] = 0;
HEAPF32[$350 + 576 >> 2] = Math_fround(0.0);
HEAP32[$350 + 564 >> 2] = 10;
HEAP32[$350 + 572 >> 2] = 0;
HEAP32[$350 + 560 >> 2] = 0;
HEAP32[$350 + 568 >> 2] = 0;
__ZN16CompoundMovement12addComponentEP13BasicMovement($350, $$1207);
__ZN16CompoundMovement12addComponentEP13BasicMovement($350, $349);
$$1210 = $350;
$368 = $46 + 44 | 0;
HEAP32[$368 >> 2] = $$1210;
__ZN7Gesture11PostProcessEv($46);
STACKTOP = sp;
return $46 | 0;
}
} else {
$328 = __Znwj(580) | 0;
__THREW__ = 0;
invoke_viii(89, $328 | 0, 6, 5);
$329 = __THREW__;
__THREW__ = 0;
if ($329 & 1) {
$347 = ___cxa_find_matching_catch_2() | 0;
$348 = tempRet0;
__ZdlPv($328);
$$6 = $347;
$$6205 = $348;
___resumeException($$6 | 0);
} else {
HEAP32[$328 + 532 >> 2] = 10;
HEAP32[$328 + 540 >> 2] = 0;
HEAP32[$328 + 528 >> 2] = 0;
HEAP32[$328 + 536 >> 2] = 0;
HEAP32[$328 >> 2] = 3068;
HEAP16[$328 + 544 >> 1] = 0;
HEAPF32[$328 + 548 >> 2] = Math_fround(0.0);
HEAPF32[$328 + 552 >> 2] = Math_fround(0.0);
HEAP16[$328 + 556 >> 1] = 0;
HEAPF32[$328 + 576 >> 2] = Math_fround(0.0);
HEAP32[$328 + 564 >> 2] = 10;
HEAP32[$328 + 572 >> 2] = 0;
HEAP32[$328 + 560 >> 2] = 0;
HEAP32[$328 + 568 >> 2] = 0;
__ZN16CompoundMovement12addComponentEP13BasicMovement($328, $$1207);
__ZN16CompoundMovement12addComponentEP13BasicMovement($328, $$0208);
$$1210 = __Z17MakeSplitMovementP13BasicMovementS0_b($328, $316, $150) | 0;
$368 = $46 + 44 | 0;
HEAP32[$368 >> 2] = $$1210;
__ZN7Gesture11PostProcessEv($46);
STACKTOP = sp;
return $46 | 0;
}
}
return 0;
}
function _printf_core($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$$5 = 0, $$0 = 0, $$0228 = 0, $$0229320 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa357 = 0, $$0240319 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249307 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262313 = 0, $$0269 = 0, $$1 = 0, $$1230331 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241330 = 0, $$1244318 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242306 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3304 = 0, $$4258355 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa295 = 0, $$pre347 = 0, $$pre349 = 0, $10 = 0, $101 = 0, $106 = 0, $11 = 0, $119 = 0, $12 = 0, $123 = 0, $13 = 0, $130 = 0, $131 = 0, $133 = 0, $135 = 0, $139 = 0, $14 = 0, $144 = 0, $145 = 0, $150 = 0, $153 = 0, $158 = 0, $159 = 0, $164 = 0, $171 = 0, $172 = 0, $18 = 0, $183 = 0, $195 = 0, $20 = 0, $202 = 0, $204 = 0, $207 = 0, $209 = 0, $21 = 0, $217 = 0, $219 = 0, $222 = 0, $223 = 0, $227 = 0, $23 = 0, $231 = 0, $233 = 0, $236 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $25 = 0, $250 = 0, $251 = 0, $256 = 0, $258 = 0, $259 = 0, $265 = 0, $27 = 0, $274 = 0, $277 = 0, $280 = 0, $281 = 0, $293 = 0, $295 = 0, $30 = 0, $300 = 0, $304 = 0, $306 = 0, $31 = 0, $318 = 0, $320 = 0, $327 = 0, $331 = 0, $338 = 0, $339 = 0, $36 = 0, $38 = 0, $39 = 0, $44 = 0, $46 = 0, $48 = 0, $5 = 0, $54 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $93 = 0, $94 = 0, $95 = 0, $98 = 0, $isdigittmp = 0, $isdigittmp274 = 0, $isdigittmp276 = 0, $or$cond = 0, $or$cond282 = 0, $storemerge = 0, $storemerge278 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$5 = sp + 16 | 0;
$6 = sp;
$7 = sp + 24 | 0;
$8 = sp + 8 | 0;
$9 = sp + 20 | 0;
HEAP32[$5 >> 2] = $1;
$10 = ($0 | 0) != 0;
$11 = $7 + 40 | 0;
$12 = $11;
$13 = $7 + 39 | 0;
$14 = $8 + 4 | 0;
$$0243 = 0;
$$0247 = 0;
$$0269 = 0;
$21 = $1;
L1 : while (1) {
do if (($$0247 | 0) > -1) if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
$18 = ___errno_location() | 0;
HEAP32[$18 >> 2] = 75;
$$1248 = -1;
break;
} else {
$$1248 = $$0243 + $$0247 | 0;
break;
} else $$1248 = $$0247; while (0);
$20 = HEAP8[$21 >> 0] | 0;
if (!($20 << 24 >> 24)) {
label = 86;
break;
} else {
$23 = $20;
$25 = $21;
}
L9 : while (1) {
switch ($23 << 24 >> 24) {
case 37:
{
$$0249307 = $25;
$27 = $25;
label = 9;
break L9;
break;
}
case 0:
{
$$0249$lcssa = $25;
$39 = $25;
break L9;
break;
}
default:
{}
}
$24 = $25 + 1 | 0;
HEAP32[$5 >> 2] = $24;
$23 = HEAP8[$24 >> 0] | 0;
$25 = $24;
}
L12 : do if ((label | 0) == 9) while (1) {
label = 0;
if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
$$0249$lcssa = $$0249307;
$39 = $27;
break L12;
}
$30 = $$0249307 + 1 | 0;
$31 = $27 + 2 | 0;
HEAP32[$5 >> 2] = $31;
if ((HEAP8[$31 >> 0] | 0) == 37) {
$$0249307 = $30;
$27 = $31;
label = 9;
} else {
$$0249$lcssa = $30;
$39 = $31;
break;
}
} while (0);
$36 = $$0249$lcssa - $21 | 0;
if ($10) _out($0, $21, $36);
if ($36 | 0) {
$$0243 = $36;
$$0247 = $$1248;
$21 = $39;
continue;
}
$38 = $39 + 1 | 0;
$isdigittmp = (HEAP8[$38 >> 0] | 0) + -48 | 0;
if ($isdigittmp >>> 0 < 10) {
$44 = (HEAP8[$39 + 2 >> 0] | 0) == 36;
$$0253 = $44 ? $isdigittmp : -1;
$$1270 = $44 ? 1 : $$0269;
$storemerge = $44 ? $39 + 3 | 0 : $38;
} else {
$$0253 = -1;
$$1270 = $$0269;
$storemerge = $38;
}
HEAP32[$5 >> 2] = $storemerge;
$46 = HEAP8[$storemerge >> 0] | 0;
$48 = ($46 << 24 >> 24) + -32 | 0;
if ($48 >>> 0 > 31 | (1 << $48 & 75913 | 0) == 0) {
$$0262$lcssa = 0;
$$lcssa295 = $46;
$69 = $storemerge;
} else {
$$0262313 = 0;
$54 = $46;
$59 = $storemerge;
while (1) {
$57 = 1 << ($54 << 24 >> 24) + -32 | $$0262313;
$58 = $59 + 1 | 0;
HEAP32[$5 >> 2] = $58;
$60 = HEAP8[$58 >> 0] | 0;
$62 = ($60 << 24 >> 24) + -32 | 0;
if ($62 >>> 0 > 31 | (1 << $62 & 75913 | 0) == 0) {
$$0262$lcssa = $57;
$$lcssa295 = $60;
$69 = $58;
break;
} else {
$$0262313 = $57;
$54 = $60;
$59 = $58;
}
}
}
if ($$lcssa295 << 24 >> 24 == 42) {
$68 = $69 + 1 | 0;
$isdigittmp276 = (HEAP8[$68 >> 0] | 0) + -48 | 0;
if ($isdigittmp276 >>> 0 < 10) if ((HEAP8[$69 + 2 >> 0] | 0) == 36) {
HEAP32[$4 + ($isdigittmp276 << 2) >> 2] = 10;
$$0259 = HEAP32[$3 + ((HEAP8[$68 >> 0] | 0) + -48 << 3) >> 2] | 0;
$$2271 = 1;
$storemerge278 = $69 + 3 | 0;
} else label = 22; else label = 22;
if ((label | 0) == 22) {
label = 0;
if ($$1270 | 0) {
$$0 = -1;
break;
}
if ($10) {
$93 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$94 = HEAP32[$93 >> 2] | 0;
HEAP32[$2 >> 2] = $93 + 4;
$$0259 = $94;
$$2271 = 0;
$storemerge278 = $68;
} else {
$$0259 = 0;
$$2271 = 0;
$storemerge278 = $68;
}
}
HEAP32[$5 >> 2] = $storemerge278;
$95 = ($$0259 | 0) < 0;
$$1260 = $95 ? 0 - $$0259 | 0 : $$0259;
$$1263 = $95 ? $$0262$lcssa | 8192 : $$0262$lcssa;
$$3272 = $$2271;
$101 = $storemerge278;
} else {
$98 = _getint($5) | 0;
if (($98 | 0) < 0) {
$$0 = -1;
break;
}
$$1260 = $98;
$$1263 = $$0262$lcssa;
$$3272 = $$1270;
$101 = HEAP32[$5 >> 2] | 0;
}
do if ((HEAP8[$101 >> 0] | 0) == 46) {
if ((HEAP8[$101 + 1 >> 0] | 0) != 42) {
HEAP32[$5 >> 2] = $101 + 1;
$133 = _getint($5) | 0;
$$0254 = $133;
$$pre347 = HEAP32[$5 >> 2] | 0;
break;
}
$106 = $101 + 2 | 0;
$isdigittmp274 = (HEAP8[$106 >> 0] | 0) + -48 | 0;
if ($isdigittmp274 >>> 0 < 10) if ((HEAP8[$101 + 3 >> 0] | 0) == 36) {
HEAP32[$4 + ($isdigittmp274 << 2) >> 2] = 10;
$119 = HEAP32[$3 + ((HEAP8[$106 >> 0] | 0) + -48 << 3) >> 2] | 0;
$123 = $101 + 4 | 0;
HEAP32[$5 >> 2] = $123;
$$0254 = $119;
$$pre347 = $123;
break;
}
if ($$3272 | 0) {
$$0 = -1;
break L1;
}
if ($10) {
$130 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$131 = HEAP32[$130 >> 2] | 0;
HEAP32[$2 >> 2] = $130 + 4;
$338 = $131;
} else $338 = 0;
HEAP32[$5 >> 2] = $106;
$$0254 = $338;
$$pre347 = $106;
} else {
$$0254 = -1;
$$pre347 = $101;
} while (0);
$$0252 = 0;
$135 = $$pre347;
while (1) {
if (((HEAP8[$135 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
$$0 = -1;
break L1;
}
$139 = $135 + 1 | 0;
HEAP32[$5 >> 2] = $139;
$144 = HEAP8[(HEAP8[$135 >> 0] | 0) + -65 + (60803 + ($$0252 * 58 | 0)) >> 0] | 0;
$145 = $144 & 255;
if (($145 + -1 | 0) >>> 0 < 8) {
$$0252 = $145;
$135 = $139;
} else break;
}
if (!($144 << 24 >> 24)) {
$$0 = -1;
break;
}
$150 = ($$0253 | 0) > -1;
do if ($144 << 24 >> 24 == 19) if ($150) {
$$0 = -1;
break L1;
} else label = 48; else {
if ($150) {
HEAP32[$4 + ($$0253 << 2) >> 2] = $145;
$153 = $3 + ($$0253 << 3) | 0;
$158 = HEAP32[$153 + 4 >> 2] | 0;
$159 = $6;
HEAP32[$159 >> 2] = HEAP32[$153 >> 2];
HEAP32[$159 + 4 >> 2] = $158;
label = 48;
break;
}
if (!$10) {
$$0 = 0;
break L1;
}
_pop_arg($6, $145, $2);
} while (0);
if ((label | 0) == 48) {
label = 0;
if (!$10) {
$$0243 = 0;
$$0247 = $$1248;
$$0269 = $$3272;
$21 = $139;
continue;
}
}
$164 = HEAP8[$135 >> 0] | 0;
$$0235 = ($$0252 | 0) != 0 & ($164 & 15 | 0) == 3 ? $164 & -33 : $164;
$171 = $$1263 & -65537;
$$1263$ = ($$1263 & 8192 | 0) == 0 ? $$1263 : $171;
L70 : do switch ($$0235 | 0) {
case 110:
{
switch (($$0252 & 255) << 24 >> 24) {
case 0:
{
HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248;
$$0243 = 0;
$$0247 = $$1248;
$$0269 = $$3272;
$21 = $139;
continue L1;
break;
}
case 1:
{
HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248;
$$0243 = 0;
$$0247 = $$1248;
$$0269 = $$3272;
$21 = $139;
continue L1;
break;
}
case 2:
{
$183 = HEAP32[$6 >> 2] | 0;
HEAP32[$183 >> 2] = $$1248;
HEAP32[$183 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31;
$$0243 = 0;
$$0247 = $$1248;
$$0269 = $$3272;
$21 = $139;
continue L1;
break;
}
case 3:
{
HEAP16[HEAP32[$6 >> 2] >> 1] = $$1248;
$$0243 = 0;
$$0247 = $$1248;
$$0269 = $$3272;
$21 = $139;
continue L1;
break;
}
case 4:
{
HEAP8[HEAP32[$6 >> 2] >> 0] = $$1248;
$$0243 = 0;
$$0247 = $$1248;
$$0269 = $$3272;
$21 = $139;
continue L1;
break;
}
case 6:
{
HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248;
$$0243 = 0;
$$0247 = $$1248;
$$0269 = $$3272;
$21 = $139;
continue L1;
break;
}
case 7:
{
$195 = HEAP32[$6 >> 2] | 0;
HEAP32[$195 >> 2] = $$1248;
HEAP32[$195 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31;
$$0243 = 0;
$$0247 = $$1248;
$$0269 = $$3272;
$21 = $139;
continue L1;
break;
}
default:
{
$$0243 = 0;
$$0247 = $$1248;
$$0269 = $$3272;
$21 = $139;
continue L1;
}
}
break;
}
case 112:
{
$$1236 = 120;
$$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8;
$$3265 = $$1263$ | 8;
label = 60;
break;
}
case 88:
case 120:
{
$$1236 = $$0235;
$$1255 = $$0254;
$$3265 = $$1263$;
label = 60;
break;
}
case 111:
{
$217 = $6;
$219 = HEAP32[$217 >> 2] | 0;
$222 = HEAP32[$217 + 4 >> 2] | 0;
$223 = _fmt_o($219, $222, $11) | 0;
$227 = $12 - $223 | 0;
$$0228 = $223;
$$1233 = 0;
$$1238 = 61267;
$$2256 = ($$1263$ & 8 | 0) == 0 | ($$0254 | 0) > ($227 | 0) ? $$0254 : $227 + 1 | 0;
$$4266 = $$1263$;
$256 = $219;
$258 = $222;
label = 66;
break;
}
case 105:
case 100:
{
$231 = $6;
$233 = HEAP32[$231 >> 2] | 0;
$236 = HEAP32[$231 + 4 >> 2] | 0;
if (($236 | 0) < 0) {
$238 = _i64Subtract(0, 0, $233 | 0, $236 | 0) | 0;
$239 = tempRet0;
$240 = $6;
HEAP32[$240 >> 2] = $238;
HEAP32[$240 + 4 >> 2] = $239;
$$0232 = 1;
$$0237 = 61267;
$250 = $238;
$251 = $239;
label = 65;
break L70;
} else {
$$0232 = ($$1263$ & 2049 | 0) != 0 & 1;
$$0237 = ($$1263$ & 2048 | 0) == 0 ? (($$1263$ & 1 | 0) == 0 ? 61267 : 61269) : 61268;
$250 = $233;
$251 = $236;
label = 65;
break L70;
}
break;
}
case 117:
{
$172 = $6;
$$0232 = 0;
$$0237 = 61267;
$250 = HEAP32[$172 >> 2] | 0;
$251 = HEAP32[$172 + 4 >> 2] | 0;
label = 65;
break;
}
case 99:
{
HEAP8[$13 >> 0] = HEAP32[$6 >> 2];
$$2 = $13;
$$2234 = 0;
$$2239 = 61267;
$$2251 = $11;
$$5 = 1;
$$6268 = $171;
break;
}
case 109:
{
$274 = ___errno_location() | 0;
$$1 = _strerror(HEAP32[$274 >> 2] | 0) | 0;
label = 70;
break;
}
case 115:
{
$277 = HEAP32[$6 >> 2] | 0;
$$1 = $277 | 0 ? $277 : 61277;
label = 70;
break;
}
case 67:
{
HEAP32[$8 >> 2] = HEAP32[$6 >> 2];
HEAP32[$14 >> 2] = 0;
HEAP32[$6 >> 2] = $8;
$$4258355 = -1;
$339 = $8;
label = 74;
break;
}
case 83:
{
$$pre349 = HEAP32[$6 >> 2] | 0;
if (!$$0254) {
_pad_679($0, 32, $$1260, 0, $$1263$);
$$0240$lcssa357 = 0;
label = 83;
} else {
$$4258355 = $$0254;
$339 = $$pre349;
label = 74;
}
break;
}
case 65:
case 71:
case 70:
case 69:
case 97:
case 103:
case 102:
case 101:
{
$$0243 = _fmt_fp($0, +HEAPF64[$6 >> 3], $$1260, $$0254, $$1263$, $$0235) | 0;
$$0247 = $$1248;
$$0269 = $$3272;
$21 = $139;
continue L1;
break;
}
default:
{
$$2 = $21;
$$2234 = 0;
$$2239 = 61267;
$$2251 = $11;
$$5 = $$0254;
$$6268 = $$1263$;
}
} while (0);
L94 : do if ((label | 0) == 60) {
label = 0;
$202 = $6;
$204 = HEAP32[$202 >> 2] | 0;
$207 = HEAP32[$202 + 4 >> 2] | 0;
$209 = _fmt_x($204, $207, $11, $$1236 & 32) | 0;
$or$cond282 = ($$3265 & 8 | 0) == 0 | ($204 | 0) == 0 & ($207 | 0) == 0;
$$0228 = $209;
$$1233 = $or$cond282 ? 0 : 2;
$$1238 = $or$cond282 ? 61267 : 61267 + ($$1236 >> 4) | 0;
$$2256 = $$1255;
$$4266 = $$3265;
$256 = $204;
$258 = $207;
label = 66;
} else if ((label | 0) == 65) {
label = 0;
$$0228 = _fmt_u($250, $251, $11) | 0;
$$1233 = $$0232;
$$1238 = $$0237;
$$2256 = $$0254;
$$4266 = $$1263$;
$256 = $250;
$258 = $251;
label = 66;
} else if ((label | 0) == 70) {
label = 0;
$280 = _memchr($$1, 0, $$0254) | 0;
$281 = ($280 | 0) == 0;
$$2 = $$1;
$$2234 = 0;
$$2239 = 61267;
$$2251 = $281 ? $$1 + $$0254 | 0 : $280;
$$5 = $281 ? $$0254 : $280 - $$1 | 0;
$$6268 = $171;
} else if ((label | 0) == 74) {
label = 0;
$$0229320 = $339;
$$0240319 = 0;
$$1244318 = 0;
while (1) {
$293 = HEAP32[$$0229320 >> 2] | 0;
if (!$293) {
$$0240$lcssa = $$0240319;
$$2245 = $$1244318;
break;
}
$295 = _wctomb($9, $293) | 0;
if (($295 | 0) < 0 | $295 >>> 0 > ($$4258355 - $$0240319 | 0) >>> 0) {
$$0240$lcssa = $$0240319;
$$2245 = $295;
break;
}
$300 = $295 + $$0240319 | 0;
if ($$4258355 >>> 0 > $300 >>> 0) {
$$0229320 = $$0229320 + 4 | 0;
$$0240319 = $300;
$$1244318 = $295;
} else {
$$0240$lcssa = $300;
$$2245 = $295;
break;
}
}
if (($$2245 | 0) < 0) {
$$0 = -1;
break L1;
}
_pad_679($0, 32, $$1260, $$0240$lcssa, $$1263$);
if (!$$0240$lcssa) {
$$0240$lcssa357 = 0;
label = 83;
} else {
$$1230331 = $339;
$$1241330 = 0;
while (1) {
$304 = HEAP32[$$1230331 >> 2] | 0;
if (!$304) {
$$0240$lcssa357 = $$0240$lcssa;
label = 83;
break L94;
}
$306 = _wctomb($9, $304) | 0;
$$1241330 = $306 + $$1241330 | 0;
if (($$1241330 | 0) > ($$0240$lcssa | 0)) {
$$0240$lcssa357 = $$0240$lcssa;
label = 83;
break L94;
}
_out($0, $9, $306);
if ($$1241330 >>> 0 >= $$0240$lcssa >>> 0) {
$$0240$lcssa357 = $$0240$lcssa;
label = 83;
break;
} else $$1230331 = $$1230331 + 4 | 0;
}
}
} while (0);
if ((label | 0) == 66) {
label = 0;
$259 = ($256 | 0) != 0 | ($258 | 0) != 0;
$or$cond = ($$2256 | 0) != 0 | $259;
$265 = $12 - $$0228 + (($259 ^ 1) & 1) | 0;
$$2 = $or$cond ? $$0228 : $11;
$$2234 = $$1233;
$$2239 = $$1238;
$$2251 = $11;
$$5 = $or$cond ? (($$2256 | 0) > ($265 | 0) ? $$2256 : $265) : $$2256;
$$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266;
} else if ((label | 0) == 83) {
label = 0;
_pad_679($0, 32, $$1260, $$0240$lcssa357, $$1263$ ^ 8192);
$$0243 = ($$1260 | 0) > ($$0240$lcssa357 | 0) ? $$1260 : $$0240$lcssa357;
$$0247 = $$1248;
$$0269 = $$3272;
$21 = $139;
continue;
}
$318 = $$2251 - $$2 | 0;
$$$5 = ($$5 | 0) < ($318 | 0) ? $318 : $$5;
$320 = $$$5 + $$2234 | 0;
$$2261 = ($$1260 | 0) < ($320 | 0) ? $320 : $$1260;
_pad_679($0, 32, $$2261, $320, $$6268);
_out($0, $$2239, $$2234);
_pad_679($0, 48, $$2261, $320, $$6268 ^ 65536);
_pad_679($0, 48, $$$5, $318, 0);
_out($0, $$2, $318);
_pad_679($0, 32, $$2261, $320, $$6268 ^ 8192);
$$0243 = $$2261;
$$0247 = $$1248;
$$0269 = $$3272;
$21 = $139;
}
L113 : do if ((label | 0) == 86) if (!$0) if (!$$0269) $$0 = 0; else {
$$2242306 = 1;
while (1) {
$327 = HEAP32[$4 + ($$2242306 << 2) >> 2] | 0;
if (!$327) {
$$2242$lcssa = $$2242306;
break;
}
_pop_arg($3 + ($$2242306 << 3) | 0, $327, $2);
$331 = $$2242306 + 1 | 0;
if (($$2242306 | 0) < 9) $$2242306 = $331; else {
$$2242$lcssa = $331;
break;
}
}
if (($$2242$lcssa | 0) < 10) {
$$3304 = $$2242$lcssa;
while (1) {
if (HEAP32[$4 + ($$3304 << 2) >> 2] | 0) {
$$0 = -1;
break L113;
}
if (($$3304 | 0) < 9) $$3304 = $$3304 + 1 | 0; else {
$$0 = 1;
break;
}
}
} else $$0 = 1;
} else $$0 = $$1248; while (0);
STACKTOP = sp;
return $$0 | 0;
}
function __ZN11ParMovement18propagateHandStuffER12TwoHandStuffR20ArmHandConstellation($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0$off0$i$i = 0, $$0$off0$i$i58 = 0, $$036138 = 0, $$041139 = 0, $$1 = 0, $$138 = 0, $$3 = 0, $$340 = 0, $$sroa$21$36$$sroa_idx = 0, $$sroa$21131 = 0, $$sroa$41$80$$sroa_idx120 = 0, $$sroa$41132 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $114 = 0, $115 = 0, $12 = 0, $120 = 0, $121 = 0, $127 = 0, $128 = 0, $13 = 0, $131 = 0, $134 = 0, $135 = 0, $137 = f0, $138 = 0, $139 = 0, $14 = 0, $140 = f0, $141 = 0, $142 = 0, $147 = f0, $15 = 0, $150 = f0, $156 = f0, $158 = f0, $16 = 0, $162 = 0, $165 = 0, $166 = 0, $168 = 0, $170 = f0, $171 = 0, $172 = 0, $173 = f0, $174 = 0, $175 = 0, $180 = f0, $183 = f0, $189 = f0, $191 = f0, $195 = 0, $198 = 0, $199 = 0, $201 = 0, $203 = 0, $205 = 0, $208 = 0, $21 = 0, $213 = 0, $219 = 0, $22 = 0, $225 = 0, $23 = 0, $231 = 0, $237 = 0, $243 = 0, $249 = 0, $255 = 0, $261 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $282 = 0, $288 = 0, $29 = 0, $294 = 0, $3 = 0, $30 = 0, $300 = 0, $306 = 0, $31 = 0, $312 = 0, $318 = 0, $32 = 0, $321 = 0, $323 = 0, $326 = 0, $33 = 0, $330 = 0, $334 = 0, $338 = 0, $340 = 0, $343 = 0, $345 = 0, $348 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond$not$i = 0, $or$cond$not$i55 = 0, $or$cond7$i = 0, $or$cond7$i56 = 0, $sext = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 304 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$3 = sp + 288 | 0;
$4 = sp + 280 | 0;
$5 = sp + 264 | 0;
$6 = sp + 256 | 0;
$$sroa$21131 = sp + 248 | 0;
$$sroa$41132 = sp + 240 | 0;
$7 = sp + 172 | 0;
$8 = sp + 104 | 0;
$9 = sp + 16 | 0;
$10 = $0 + 60 | 0;
$11 = $1 + 20 | 0;
$12 = $0 + 100 | 0;
HEAP32[$12 >> 2] = HEAP32[$11 >> 2];
HEAP32[$12 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
HEAP32[$12 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
HEAP32[$12 + 12 >> 2] = HEAP32[$11 + 12 >> 2];
$13 = $1 + 64 | 0;
$14 = $0 + 212 | 0;
HEAP32[$14 >> 2] = HEAP32[$13 >> 2];
HEAP32[$14 + 4 >> 2] = HEAP32[$13 + 4 >> 2];
HEAP32[$14 + 8 >> 2] = HEAP32[$13 + 8 >> 2];
HEAP32[$14 + 12 >> 2] = HEAP32[$13 + 12 >> 2];
$15 = $1 + 36 | 0;
$16 = HEAP32[$15 >> 2] | 0;
if (!$16) $21 = 0; else $21 = HEAP32[$16 + 236 >> 2] | 0;
HEAP32[$0 + 116 >> 2] = $21;
$22 = $1 + 80 | 0;
$23 = HEAP32[$22 >> 2] | 0;
if (!$23) $28 = 0; else $28 = HEAP32[$23 + 236 >> 2] | 0;
HEAP32[$0 + 228 >> 2] = $28;
$29 = HEAP32[$1 >> 2] | 0;
$30 = $1 + 4 | 0;
$31 = HEAP32[$30 >> 2] | 0;
$32 = $1 + 8 | 0;
$33 = HEAP32[$32 >> 2] | 0;
$35 = HEAP32[$1 + 12 >> 2] | 0;
$36 = $1 + 16 | 0;
$37 = HEAP32[$36 >> 2] | 0;
$38 = HEAP32[$11 >> 2] | 0;
$40 = HEAP32[$1 + 24 >> 2] | 0;
$42 = HEAP32[$1 + 28 >> 2] | 0;
$44 = HEAP32[$1 + 32 >> 2] | 0;
HEAP32[$$sroa$21131 >> 2] = HEAP32[$15 >> 2];
HEAP8[$$sroa$21131 + 4 >> 0] = HEAP8[$15 + 4 >> 0] | 0;
$45 = $1 + 44 | 0;
$46 = HEAP32[$45 >> 2] | 0;
$47 = $1 + 48 | 0;
$48 = HEAP32[$47 >> 2] | 0;
$49 = $1 + 52 | 0;
$50 = HEAP32[$49 >> 2] | 0;
$52 = HEAP32[$1 + 56 >> 2] | 0;
$53 = $1 + 60 | 0;
$54 = HEAP32[$53 >> 2] | 0;
$55 = HEAP32[$13 >> 2] | 0;
$57 = HEAP32[$1 + 68 >> 2] | 0;
$59 = HEAP32[$1 + 72 >> 2] | 0;
$61 = HEAP32[$1 + 76 >> 2] | 0;
HEAP32[$$sroa$41132 >> 2] = HEAP32[$22 >> 2];
HEAP8[$$sroa$41132 + 4 >> 0] = HEAP8[$22 + 4 >> 0] | 0;
dest = $7;
src = $2;
stop = dest + 48 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
$62 = $7 + 48 | 0;
__THREW__ = 0;
invoke_vii(120, $62 | 0, $2 + 48 | 0);
$64 = __THREW__;
__THREW__ = 0;
if ($64 & 1) {
$121 = ___cxa_find_matching_catch_2() | 0;
$$3 = $121;
$$340 = tempRet0;
___resumeException($$3 | 0);
}
$66 = $7 + 60 | 0;
$67 = $2 + 60 | 0;
HEAP32[$66 >> 2] = HEAP32[$67 >> 2];
HEAP8[$66 + 4 >> 0] = HEAP8[$67 + 4 >> 0] | 0;
$68 = $0 + 528 | 0;
$69 = $0 + 540 | 0;
$sext = HEAP32[$69 >> 2] << 16;
$71 = $sext >> 16;
$72 = ($sext | 0) > 0;
L11 : do if ($72) {
$73 = $8 + 48 | 0;
$74 = $8 + 60 | 0;
$75 = $9 + 4 | 0;
$76 = $9 + 8 | 0;
$77 = $9 + 12 | 0;
$78 = $9 + 16 | 0;
$79 = $9 + 20 | 0;
$80 = $9 + 24 | 0;
$81 = $9 + 28 | 0;
$82 = $9 + 32 | 0;
$$sroa$21$36$$sroa_idx = $9 + 36 | 0;
$83 = $9 + 44 | 0;
$84 = $9 + 48 | 0;
$85 = $9 + 52 | 0;
$86 = $9 + 56 | 0;
$87 = $9 + 60 | 0;
$88 = $9 + 64 | 0;
$89 = $9 + 68 | 0;
$90 = $9 + 72 | 0;
$91 = $9 + 76 | 0;
$$sroa$41$80$$sroa_idx120 = $9 + 80 | 0;
$92 = $9 + 12 | 0;
$93 = $1 + 12 | 0;
$94 = $1 + 40 | 0;
$95 = $3 + 4 | 0;
$96 = $3 + 8 | 0;
$97 = $4 + 4 | 0;
$98 = $9 + 56 | 0;
$99 = $1 + 56 | 0;
$100 = $1 + 84 | 0;
$101 = $5 + 4 | 0;
$102 = $5 + 8 | 0;
$103 = $6 + 4 | 0;
$104 = $0 + 508 | 0;
$105 = $0 + 510 | 0;
$$041139 = 0;
L13 : while (1) {
if ((HEAP32[$69 >> 2] | 0) > ($$041139 | 0)) {
$127 = HEAP32[(HEAP32[$68 >> 2] | 0) + ($$041139 << 2) >> 2] | 0;
$131 = $127;
$134 = $127;
} else {
$131 = 0;
$134 = 0;
}
dest = $8;
src = $7;
stop = dest + 48 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
__THREW__ = 0;
invoke_vii(120, $73 | 0, $62 | 0);
$128 = __THREW__;
__THREW__ = 0;
if ($128 & 1) {
label = 53;
break;
};
HEAP32[$74 >> 2] = HEAP32[$66 >> 2];
HEAP8[$74 + 4 >> 0] = HEAP8[$66 + 4 >> 0] | 0;
HEAP32[$9 >> 2] = $29;
HEAP32[$75 >> 2] = $31;
HEAP32[$76 >> 2] = $33;
HEAP32[$77 >> 2] = $35;
HEAP32[$78 >> 2] = $37;
HEAP32[$79 >> 2] = $38;
HEAP32[$80 >> 2] = $40;
HEAP32[$81 >> 2] = $42;
HEAP32[$82 >> 2] = $44;
HEAP32[$$sroa$21$36$$sroa_idx >> 2] = HEAP32[$$sroa$21131 >> 2];
HEAP8[$$sroa$21$36$$sroa_idx + 4 >> 0] = HEAP8[$$sroa$21131 + 4 >> 0] | 0;
HEAP32[$83 >> 2] = $46;
HEAP32[$84 >> 2] = $48;
HEAP32[$85 >> 2] = $50;
HEAP32[$86 >> 2] = $52;
HEAP32[$87 >> 2] = $54;
HEAP32[$88 >> 2] = $55;
HEAP32[$89 >> 2] = $57;
HEAP32[$90 >> 2] = $59;
HEAP32[$91 >> 2] = $61;
HEAP32[$$sroa$41$80$$sroa_idx120 >> 2] = HEAP32[$$sroa$41132 >> 2];
HEAP8[$$sroa$41$80$$sroa_idx120 + 4 >> 0] = HEAP8[$$sroa$41132 + 4 >> 0] | 0;
__THREW__ = 0;
invoke_viii(HEAP32[(HEAP32[$131 >> 2] | 0) + 24 >> 2] | 0, $134 | 0, $9 | 0, $8 | 0);
$135 = __THREW__;
__THREW__ = 0;
if ($135 & 1) {
label = 54;
break;
}
$137 = Math_fround(HEAPF32[$9 >> 2]);
$138 = HEAP32[$75 >> 2] | 0;
$139 = HEAP32[$76 >> 2] | 0;
$140 = Math_fround(HEAPF32[$92 >> 2]);
$141 = HEAP32[$78 >> 2] | 0;
$142 = $137 != Math_fround(0.0);
$or$cond$not$i55 = $142 | (HEAP32[tempDoublePtr >> 2] = $138, Math_fround(HEAPF32[tempDoublePtr >> 2])) != Math_fround(0.0);
$or$cond7$i56 = $or$cond$not$i55 | (HEAP32[tempDoublePtr >> 2] = $139, Math_fround(HEAPF32[tempDoublePtr >> 2])) != Math_fround(0.0);
$147 = (HEAP32[tempDoublePtr >> 2] = $141, Math_fround(HEAPF32[tempDoublePtr >> 2]));
if ($or$cond7$i56) {
HEAPF32[$1 >> 2] = $137;
HEAP32[$30 >> 2] = $138;
HEAP32[$32 >> 2] = $139;
$$0$off0$i$i58 = 1;
} else $$0$off0$i$i58 = 0;
if ($140 != Math_fround(0.0) | $147 != Math_fround(0.0)) {
HEAPF32[$93 >> 2] = $140;
HEAP32[$36 >> 2] = $141;
label = 24;
} else if ($$0$off0$i$i58) label = 24;
do if ((label | 0) == 24) {
label = 0;
$150 = Math_fround(HEAPF32[$1 >> 2]);
if ($150 == Math_fround(0.0)) if (Math_fround(HEAPF32[$30 >> 2]) == Math_fround(0.0)) if (!(Math_fround(HEAPF32[$32 >> 2]) != Math_fround(0.0))) break;
$156 = Math_fround(HEAPF32[$93 >> 2]);
if ($156 == Math_fround(0.0)) {
$158 = Math_fround(HEAPF32[$36 >> 2]);
if (!($158 != Math_fround(0.0))) break;
$165 = (HEAPF32[tempDoublePtr >> 2] = $158, HEAP32[tempDoublePtr >> 2] | 0);
} else $165 = HEAP32[$36 >> 2] | 0;
$162 = (HEAP8[$94 >> 0] | 0) != 0;
HEAPF32[$3 >> 2] = $150;
HEAP32[$95 >> 2] = HEAP32[$30 >> 2];
HEAP32[$96 >> 2] = HEAP32[$32 >> 2];
HEAPF32[$4 >> 2] = $156;
HEAP32[$97 >> 2] = $165;
__THREW__ = 0;
invoke_iiiii(26, $11 | 0, $162 | 0, $3 | 0, $4 | 0) | 0;
$166 = __THREW__;
__THREW__ = 0;
if ($166 & 1) {
label = 54;
break L13;
}
} while (0);
$168 = HEAP32[$$sroa$21$36$$sroa_idx >> 2] | 0;
if ($168 | 0) HEAP32[$15 >> 2] = $168;
$170 = Math_fround(HEAPF32[$83 >> 2]);
$171 = HEAP32[$84 >> 2] | 0;
$172 = HEAP32[$85 >> 2] | 0;
$173 = Math_fround(HEAPF32[$98 >> 2]);
$174 = HEAP32[$87 >> 2] | 0;
$175 = $170 != Math_fround(0.0);
$or$cond$not$i = $175 | (HEAP32[tempDoublePtr >> 2] = $171, Math_fround(HEAPF32[tempDoublePtr >> 2])) != Math_fround(0.0);
$or$cond7$i = $or$cond$not$i | (HEAP32[tempDoublePtr >> 2] = $172, Math_fround(HEAPF32[tempDoublePtr >> 2])) != Math_fround(0.0);
$180 = (HEAP32[tempDoublePtr >> 2] = $174, Math_fround(HEAPF32[tempDoublePtr >> 2]));
if ($or$cond7$i) {
HEAPF32[$45 >> 2] = $170;
HEAP32[$47 >> 2] = $171;
HEAP32[$49 >> 2] = $172;
$$0$off0$i$i = 1;
} else $$0$off0$i$i = 0;
if ($173 != Math_fround(0.0) | $180 != Math_fround(0.0)) {
HEAPF32[$99 >> 2] = $173;
HEAP32[$53 >> 2] = $174;
label = 40;
} else if ($$0$off0$i$i) label = 40;
do if ((label | 0) == 40) {
label = 0;
$183 = Math_fround(HEAPF32[$45 >> 2]);
if ($183 == Math_fround(0.0)) if (Math_fround(HEAPF32[$47 >> 2]) == Math_fround(0.0)) if (!(Math_fround(HEAPF32[$49 >> 2]) != Math_fround(0.0))) break;
$189 = Math_fround(HEAPF32[$99 >> 2]);
if ($189 == Math_fround(0.0)) {
$191 = Math_fround(HEAPF32[$53 >> 2]);
if (!($191 != Math_fround(0.0))) break;
$198 = (HEAPF32[tempDoublePtr >> 2] = $191, HEAP32[tempDoublePtr >> 2] | 0);
} else $198 = HEAP32[$53 >> 2] | 0;
$195 = (HEAP8[$100 >> 0] | 0) != 0;
HEAPF32[$5 >> 2] = $183;
HEAP32[$101 >> 2] = HEAP32[$47 >> 2];
HEAP32[$102 >> 2] = HEAP32[$49 >> 2];
HEAPF32[$6 >> 2] = $189;
HEAP32[$103 >> 2] = $198;
__THREW__ = 0;
invoke_iiiii(26, $13 | 0, $195 | 0, $5 | 0, $6 | 0) | 0;
$199 = __THREW__;
__THREW__ = 0;
if ($199 & 1) {
label = 54;
break L13;
}
} while (0);
$201 = HEAP32[$$sroa$41$80$$sroa_idx120 >> 2] | 0;
if ($201 | 0) HEAP32[$22 >> 2] = $201;
__THREW__ = 0;
invoke_vii(165, $2 | 0, $8 | 0);
$203 = __THREW__;
__THREW__ = 0;
if ($203 & 1) {
label = 54;
break;
}
$205 = HEAPU8[$104 >> 0] | HEAPU8[$104 + 1 >> 0] << 8;
$208 = $134 + 508 | 0;
$213 = (($205 & 1) == 0 ? (HEAPU8[$208 >> 0] | HEAPU8[$208 + 1 >> 0] << 8) & 1 : 1) | $205 & -2;
HEAP8[$104 >> 0] = $213;
HEAP8[$104 + 1 >> 0] = $213 >> 8;
$219 = $213 & -3 | (($205 & 2) == 0 ? (HEAPU8[$208 >> 0] | HEAPU8[$208 + 1 >> 0] << 8) & 2 : 2);
HEAP8[$104 >> 0] = $219;
HEAP8[$104 + 1 >> 0] = $219 >> 8;
$225 = $219 & -5 | (($205 & 4) == 0 ? (HEAPU8[$208 >> 0] | HEAPU8[$208 + 1 >> 0] << 8) & 4 : 4);
HEAP8[$104 >> 0] = $225;
HEAP8[$104 + 1 >> 0] = $225 >> 8;
$231 = $225 & -9 | (($205 & 8) == 0 ? (HEAPU8[$208 >> 0] | HEAPU8[$208 + 1 >> 0] << 8) & 8 : 8);
HEAP8[$104 >> 0] = $231;
HEAP8[$104 + 1 >> 0] = $231 >> 8;
$237 = $231 & -17 | (($205 & 16) == 0 ? (HEAPU8[$208 >> 0] | HEAPU8[$208 + 1 >> 0] << 8) & 16 : 16);
HEAP8[$104 >> 0] = $237;
HEAP8[$104 + 1 >> 0] = $237 >> 8;
$243 = $237 & -33 | (($205 & 32) == 0 ? (HEAPU8[$208 >> 0] | HEAPU8[$208 + 1 >> 0] << 8) & 32 : 32);
HEAP8[$104 >> 0] = $243;
HEAP8[$104 + 1 >> 0] = $243 >> 8;
$249 = $243 & -65 | (($205 & 64) == 0 ? (HEAPU8[$208 >> 0] | HEAPU8[$208 + 1 >> 0] << 8) & 64 : 64);
HEAP8[$104 >> 0] = $249;
HEAP8[$104 + 1 >> 0] = $249 >> 8;
$255 = $249 & -129 | (($205 & 128) == 0 ? (HEAPU8[$208 >> 0] | HEAPU8[$208 + 1 >> 0] << 8) & 128 : 128);
HEAP8[$104 >> 0] = $255;
HEAP8[$104 + 1 >> 0] = $255 >> 8;
$261 = $255 & -257 | (($205 & 256) == 0 ? (HEAPU8[$208 >> 0] | HEAPU8[$208 + 1 >> 0] << 8) & 256 : 256);
HEAP8[$104 >> 0] = $261;
HEAP8[$104 + 1 >> 0] = $261 >> 8;
$262 = HEAPU8[$105 >> 0] | HEAPU8[$105 + 1 >> 0] << 8;
$265 = $134 + 510 | 0;
$270 = (($262 & 1) == 0 ? (HEAPU8[$265 >> 0] | HEAPU8[$265 + 1 >> 0] << 8) & 1 : 1) | $262 & -2;
HEAP8[$105 >> 0] = $270;
HEAP8[$105 + 1 >> 0] = $270 >> 8;
$276 = $270 & -3 | (($262 & 2) == 0 ? (HEAPU8[$265 >> 0] | HEAPU8[$265 + 1 >> 0] << 8) & 2 : 2);
HEAP8[$105 >> 0] = $276;
HEAP8[$105 + 1 >> 0] = $276 >> 8;
$282 = $276 & -5 | (($262 & 4) == 0 ? (HEAPU8[$265 >> 0] | HEAPU8[$265 + 1 >> 0] << 8) & 4 : 4);
HEAP8[$105 >> 0] = $282;
HEAP8[$105 + 1 >> 0] = $282 >> 8;
$288 = $282 & -9 | (($262 & 8) == 0 ? (HEAPU8[$265 >> 0] | HEAPU8[$265 + 1 >> 0] << 8) & 8 : 8);
HEAP8[$105 >> 0] = $288;
HEAP8[$105 + 1 >> 0] = $288 >> 8;
$294 = $288 & -17 | (($262 & 16) == 0 ? (HEAPU8[$265 >> 0] | HEAPU8[$265 + 1 >> 0] << 8) & 16 : 16);
HEAP8[$105 >> 0] = $294;
HEAP8[$105 + 1 >> 0] = $294 >> 8;
$300 = $294 & -33 | (($262 & 32) == 0 ? (HEAPU8[$265 >> 0] | HEAPU8[$265 + 1 >> 0] << 8) & 32 : 32);
HEAP8[$105 >> 0] = $300;
HEAP8[$105 + 1 >> 0] = $300 >> 8;
$306 = $300 & -65 | (($262 & 64) == 0 ? (HEAPU8[$265 >> 0] | HEAPU8[$265 + 1 >> 0] << 8) & 64 : 64);
HEAP8[$105 >> 0] = $306;
HEAP8[$105 + 1 >> 0] = $306 >> 8;
$312 = $306 & -129 | (($262 & 128) == 0 ? (HEAPU8[$265 >> 0] | HEAPU8[$265 + 1 >> 0] << 8) & 128 : 128);
HEAP8[$105 >> 0] = $312;
HEAP8[$105 + 1 >> 0] = $312 >> 8;
$318 = $312 & -257 | (($262 & 256) == 0 ? (HEAPU8[$265 >> 0] | HEAPU8[$265 + 1 >> 0] << 8) & 256 : 256);
HEAP8[$105 >> 0] = $318;
HEAP8[$105 + 1 >> 0] = $318 >> 8;
$$041139 = $$041139 + 1 | 0;
if (($$041139 | 0) >= ($71 | 0)) break L11;
}
if ((label | 0) == 53) {
$321 = ___cxa_find_matching_catch_2() | 0;
$$1 = $321;
$$138 = tempRet0;
} else if ((label | 0) == 54) {
$323 = ___cxa_find_matching_catch_2() | 0;
$$1 = $323;
$$138 = tempRet0;
}
$$3 = $$1;
$$340 = $$138;
___resumeException($$3 | 0);
} while (0);
$106 = $0 + 284 | 0;
$107 = $0 + 324 | 0;
HEAP32[$107 >> 2] = HEAP32[$11 >> 2];
HEAP32[$107 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
HEAP32[$107 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
HEAP32[$107 + 12 >> 2] = HEAP32[$11 + 12 >> 2];
$108 = $0 + 436 | 0;
HEAP32[$108 >> 2] = HEAP32[$13 >> 2];
HEAP32[$108 + 4 >> 2] = HEAP32[$13 + 4 >> 2];
HEAP32[$108 + 8 >> 2] = HEAP32[$13 + 8 >> 2];
HEAP32[$108 + 12 >> 2] = HEAP32[$13 + 12 >> 2];
$109 = HEAP32[$15 >> 2] | 0;
if (!$109) $114 = 0; else $114 = HEAP32[$109 + 236 >> 2] | 0;
HEAP32[$0 + 340 >> 2] = $114;
$115 = HEAP32[$22 >> 2] | 0;
if (!$115) $120 = 0; else $120 = HEAP32[$115 + 236 >> 2] | 0;
HEAP32[$0 + 452 >> 2] = $120;
L77 : do if ($72) {
$$036138 = 0;
while (1) {
$330 = HEAP32[(HEAP32[$68 >> 2] | 0) + ($$036138 << 2) >> 2] | 0;
__THREW__ = 0;
invoke_viii(HEAP32[(HEAP32[$330 >> 2] | 0) + 32 >> 2] | 0, $330 | 0, $1 | 0, $2 | 0);
$334 = __THREW__;
__THREW__ = 0;
if ($334 & 1) break;
$$036138 = $$036138 + 1 | 0;
if (($$036138 | 0) >= ($71 | 0)) break L77;
}
$338 = ___cxa_find_matching_catch_2() | 0;
$$3 = $338;
$$340 = tempRet0;
___resumeException($$3 | 0);
} while (0);
if (!0) {
STACKTOP = sp;
return;
}
__THREW__ = 0;
invoke_vii(115, 42716, $vararg_buffer | 0);
$340 = __THREW__;
__THREW__ = 0;
if (!($340 & 1)) {
__THREW__ = 0;
invoke_vii(166, $10 | 0, HEAP32[16082] | 0);
$343 = __THREW__;
__THREW__ = 0;
if (!($343 & 1)) {
__THREW__ = 0;
invoke_vii(115, 42740, $vararg_buffer1 | 0);
$345 = __THREW__;
__THREW__ = 0;
if (!($345 & 1)) {
__THREW__ = 0;
invoke_vii(166, $106 | 0, HEAP32[16082] | 0);
$348 = __THREW__;
__THREW__ = 0;
if (!($348 & 1)) {
STACKTOP = sp;
return;
}
}
}
}
$326 = ___cxa_find_matching_catch_2() | 0;
$$3 = $326;
$$340 = tempRet0;
___resumeException($$3 | 0);
}
function __ZN14SiGMLHandshape17RecogniseSpecialsEv($0) {
$0 = $0 | 0;
var $$$$i$i26 = 0, $10 = 0, $102 = 0, $106 = 0, $107 = 0, $110 = 0, $113 = 0, $116 = 0, $123 = 0, $128 = 0, $13 = 0, $136 = 0, $139 = 0, $142 = 0, $145 = 0, $148 = 0, $152 = 0, $16 = 0, $166 = 0, $179 = 0, $182 = 0, $185 = 0, $188 = 0, $19 = 0, $191 = 0, $195 = 0, $2 = 0, $212 = 0, $214 = 0, $223 = 0, $226 = 0, $229 = 0, $23 = 0, $232 = 0, $235 = 0, $239 = 0, $242 = 0, $245 = 0, $248 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $267 = 0, $270 = 0, $277 = 0, $280 = 0, $283 = 0, $286 = 0, $29 = 0, $293 = 0, $296 = 0, $299 = 0, $302 = 0, $32 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $45 = 0, $48 = 0, $5 = 0, $51 = 0, $54 = 0, $58 = 0, $6 = 0, $7 = 0, $71 = 0, $74 = 0, $77 = 0, $8 = 0, $80 = 0, $84 = 0, $85 = 0, $90 = 0, $93 = 0, $96 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 96 | 0;
$vararg_buffer21 = sp + 80 | 0;
$vararg_buffer18 = sp + 72 | 0;
$vararg_buffer15 = sp + 64 | 0;
$vararg_buffer13 = sp + 56 | 0;
$vararg_buffer11 = sp + 48 | 0;
$vararg_buffer9 = sp + 40 | 0;
$vararg_buffer7 = sp + 32 | 0;
$vararg_buffer5 = sp + 24 | 0;
$vararg_buffer3 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$2 = HEAP32[$0 + 180 >> 2] | 0;
$4 = HEAP32[$0 + 184 >> 2] | 0;
$5 = ($2 | 0) == 2;
$6 = ($4 | 0) == 1;
$7 = ($2 | 0) == 1;
$8 = ($4 | 0) == 2;
if ($5 & $6 | $7 & $8) {
if (1) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(32564, $vararg_buffer);
}
$10 = $0 + 96 | 0;
if (!(Math_fround(HEAPF32[$10 >> 2]) != Math_fround(-100.0))) {
$13 = $0 + 100 | 0;
if (!(Math_fround(HEAPF32[$13 >> 2]) != Math_fround(-100.0))) {
$16 = $0 + 104 | 0;
if (!(Math_fround(HEAPF32[$16 >> 2]) != Math_fround(-100.0))) {
$19 = $0 + 108 | 0;
if (Math_fround(HEAPF32[$19 >> 2]) == Math_fround(-100.0)) {
if (1) {
__Z7LogTimev() | 0;
__Z5eputsPKc(32629);
}
HEAPF32[$10 >> 2] = Math_fround(.699999988);
HEAPF32[$13 >> 2] = Math_fround(0.0);
HEAPF32[$16 >> 2] = Math_fround(0.0);
HEAPF32[$19 >> 2] = Math_fround(-2.0);
}
}
}
}
$23 = $0 + 112 | 0;
if (Math_fround(HEAPF32[$23 >> 2]) != Math_fround(-100.0)) {
STACKTOP = sp;
return;
}
$26 = $0 + 116 | 0;
if (Math_fround(HEAPF32[$26 >> 2]) != Math_fround(-100.0)) {
STACKTOP = sp;
return;
}
$29 = $0 + 120 | 0;
if (Math_fround(HEAPF32[$29 >> 2]) != Math_fround(-100.0)) {
STACKTOP = sp;
return;
}
$32 = $0 + 124 | 0;
if (!(Math_fround(HEAPF32[$32 >> 2]) == Math_fround(-100.0))) {
STACKTOP = sp;
return;
}
if (1) {
__Z7LogTimev() | 0;
__Z5eputsPKc(32662);
}
HEAPF32[$23 >> 2] = Math_fround(-.200000003);
HEAPF32[$26 >> 2] = Math_fround(1.0);
HEAPF32[$29 >> 2] = Math_fround(1.0);
HEAPF32[$32 >> 2] = Math_fround(-2.0);
STACKTOP = sp;
return;
}
$39 = ($2 | 0) == 0;
$40 = ($4 | 0) == 0;
$$$$i$i26 = $39 & $8 | $5 & $40;
if (!((HEAP32[$0 + 68 >> 2] | 0) != 2 | $$$$i$i26 ^ 1)) {
if (1) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(32696, $vararg_buffer1);
}
$42 = $0 + 160 | 0;
if (!(Math_fround(HEAPF32[$42 >> 2]) != Math_fround(-100.0))) {
$45 = $0 + 164 | 0;
if (!(Math_fround(HEAPF32[$45 >> 2]) != Math_fround(-100.0))) {
$48 = $0 + 168 | 0;
if (!(Math_fround(HEAPF32[$48 >> 2]) != Math_fround(-100.0))) {
$51 = $0 + 172 | 0;
if (!(Math_fround(HEAPF32[$51 >> 2]) != Math_fround(-100.0))) {
$54 = $0 + 176 | 0;
if (Math_fround(HEAPF32[$54 >> 2]) == Math_fround(-100.0)) {
if (1) {
__Z7LogTimev() | 0;
__Z5eputsPKc(32756);
}
HEAPF32[$42 >> 2] = Math_fround(3.5);
HEAPF32[$45 >> 2] = Math_fround(.25);
HEAPF32[$48 >> 2] = Math_fround(.5);
HEAPF32[$51 >> 2] = Math_fround(.800000011);
HEAPF32[$54 >> 2] = Math_fround(0.0);
}
}
}
}
}
$58 = $0 + 96 | 0;
if (!(Math_fround(HEAPF32[$58 >> 2]) != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$0 + 100 >> 2]) != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$0 + 104 >> 2]) != Math_fround(-100.0))) if (Math_fround(HEAPF32[$0 + 108 >> 2]) == Math_fround(-100.0)) {
if (1) {
__Z7LogTimev() | 0;
__Z5eputsPKc(32629);
};
HEAP32[$58 >> 2] = 0;
HEAP32[$58 + 4 >> 2] = 0;
HEAP32[$58 + 8 >> 2] = 0;
HEAP32[$58 + 12 >> 2] = 0;
}
$71 = $0 + 112 | 0;
if (Math_fround(HEAPF32[$71 >> 2]) != Math_fround(-100.0)) {
STACKTOP = sp;
return;
}
$74 = $0 + 116 | 0;
if (Math_fround(HEAPF32[$74 >> 2]) != Math_fround(-100.0)) {
STACKTOP = sp;
return;
}
$77 = $0 + 120 | 0;
if (Math_fround(HEAPF32[$77 >> 2]) != Math_fround(-100.0)) {
STACKTOP = sp;
return;
}
$80 = $0 + 124 | 0;
if (!(Math_fround(HEAPF32[$80 >> 2]) == Math_fround(-100.0))) {
STACKTOP = sp;
return;
}
if (1) {
__Z7LogTimev() | 0;
__Z5eputsPKc(32662);
}
HEAPF32[$71 >> 2] = Math_fround(2.25);
HEAPF32[$74 >> 2] = Math_fround(0.0);
HEAPF32[$77 >> 2] = Math_fround(0.0);
HEAPF32[$80 >> 2] = Math_fround(0.0);
STACKTOP = sp;
return;
}
$84 = HEAP32[$0 >> 2] | 0;
$85 = ($84 | 0) == 1;
do if ($85) {
if (HEAP8[$0 + 216 >> 0] | 0) {
if (1) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(32782, $vararg_buffer3);
}
$90 = $0 + 160 | 0;
if (!(Math_fround(HEAPF32[$90 >> 2]) != Math_fround(-100.0))) {
$93 = $0 + 164 | 0;
if (!(Math_fround(HEAPF32[$93 >> 2]) != Math_fround(-100.0))) {
$96 = $0 + 168 | 0;
if (!(Math_fround(HEAPF32[$96 >> 2]) != Math_fround(-100.0))) {
$99 = $0 + 172 | 0;
if (!(Math_fround(HEAPF32[$99 >> 2]) != Math_fround(-100.0))) {
$102 = $0 + 176 | 0;
if (Math_fround(HEAPF32[$102 >> 2]) == Math_fround(-100.0)) {
if (1) {
__Z7LogTimev() | 0;
__Z5eputsPKc(32756);
}
HEAPF32[$90 >> 2] = Math_fround(2.79999995);
HEAPF32[$93 >> 2] = Math_fround(.699999988);
HEAPF32[$96 >> 2] = Math_fround(1.79999995);
HEAPF32[$99 >> 2] = Math_fround(2.0);
HEAPF32[$102 >> 2] = Math_fround(1.60000002);
}
}
}
}
}
$106 = $0 + 54 | 0;
$107 = $0 + 96 | 0;
if (!(Math_fround(HEAPF32[$107 >> 2]) != Math_fround(-100.0))) {
$110 = $0 + 100 | 0;
if (!(Math_fround(HEAPF32[$110 >> 2]) != Math_fround(-100.0))) {
$113 = $0 + 104 | 0;
if (!(Math_fround(HEAPF32[$113 >> 2]) != Math_fround(-100.0))) {
$116 = $0 + 108 | 0;
if (Math_fround(HEAPF32[$116 >> 2]) == Math_fround(-100.0)) if (!(HEAP16[$106 >> 1] & 2)) {
if (1) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer5 >> 2] = 32865;
__Z7eprintfPKcz(32832, $vararg_buffer5);
}
HEAPF32[$107 >> 2] = Math_fround(3.5);
HEAPF32[$110 >> 2] = Math_fround(3.5);
HEAPF32[$113 >> 2] = Math_fround(3.5);
HEAPF32[$116 >> 2] = Math_fround(0.0);
}
}
}
}
$123 = $0 + 112 | 0;
if (!(Math_fround(HEAPF32[$123 >> 2]) != Math_fround(-100.0))) {
$264 = $0 + 116 | 0;
if (!(Math_fround(HEAPF32[$264 >> 2]) != Math_fround(-100.0))) {
$267 = $0 + 120 | 0;
if (!(Math_fround(HEAPF32[$267 >> 2]) != Math_fround(-100.0))) {
$270 = $0 + 124 | 0;
if (Math_fround(HEAPF32[$270 >> 2]) == Math_fround(-100.0)) if (!(HEAP16[$106 >> 1] & 4)) {
if (1) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer15 >> 2] = 33151;
__Z7eprintfPKcz(32832, $vararg_buffer15);
}
HEAPF32[$123 >> 2] = Math_fround(3.5);
HEAPF32[$264 >> 2] = Math_fround(3.5);
HEAPF32[$267 >> 2] = Math_fround(3.5);
HEAPF32[$270 >> 2] = Math_fround(0.0);
}
}
}
}
$277 = $0 + 128 | 0;
if (!(Math_fround(HEAPF32[$277 >> 2]) != Math_fround(-100.0))) {
$280 = $0 + 132 | 0;
if (!(Math_fround(HEAPF32[$280 >> 2]) != Math_fround(-100.0))) {
$283 = $0 + 136 | 0;
if (!(Math_fround(HEAPF32[$283 >> 2]) != Math_fround(-100.0))) {
$286 = $0 + 140 | 0;
if (Math_fround(HEAPF32[$286 >> 2]) == Math_fround(-100.0)) if (!(HEAP16[$106 >> 1] & 8)) {
if (1) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer18 >> 2] = 33158;
__Z7eprintfPKcz(32832, $vararg_buffer18);
}
HEAPF32[$277 >> 2] = Math_fround(3.5);
HEAPF32[$280 >> 2] = Math_fround(3.5);
HEAPF32[$283 >> 2] = Math_fround(3.5);
HEAPF32[$286 >> 2] = Math_fround(0.0);
}
}
}
}
$293 = $0 + 144 | 0;
if (Math_fround(HEAPF32[$293 >> 2]) != Math_fround(-100.0)) {
STACKTOP = sp;
return;
}
$296 = $0 + 148 | 0;
if (Math_fround(HEAPF32[$296 >> 2]) != Math_fround(-100.0)) {
STACKTOP = sp;
return;
}
$299 = $0 + 152 | 0;
if (Math_fround(HEAPF32[$299 >> 2]) != Math_fround(-100.0)) {
STACKTOP = sp;
return;
}
$302 = $0 + 156 | 0;
if (!(Math_fround(HEAPF32[$302 >> 2]) == Math_fround(-100.0))) {
STACKTOP = sp;
return;
}
if (HEAP16[$106 >> 1] & 16) {
STACKTOP = sp;
return;
}
if (1) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer21 >> 2] = 33163;
__Z7eprintfPKcz(32832, $vararg_buffer21);
}
HEAPF32[$293 >> 2] = Math_fround(3.5);
HEAPF32[$296 >> 2] = Math_fround(3.5);
HEAPF32[$299 >> 2] = Math_fround(3.5);
HEAPF32[$302 >> 2] = Math_fround(0.0);
STACKTOP = sp;
return;
}
} else {
if (($84 & -2 | 0) == 8) {
$128 = HEAP16[$0 + 52 >> 1] | 0;
if (!(($128 & 2) != 0 | $128 << 16 >> 16 == 0 | $$$$i$i26 ^ 1)) if ((HEAP32[$0 + 8 >> 2] | 0) == 2) {
if (1) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(32871, $vararg_buffer7);
}
$136 = $0 + 160 | 0;
if (!(Math_fround(HEAPF32[$136 >> 2]) != Math_fround(-100.0))) {
$139 = $0 + 164 | 0;
if (!(Math_fround(HEAPF32[$139 >> 2]) != Math_fround(-100.0))) {
$142 = $0 + 168 | 0;
if (!(Math_fround(HEAPF32[$142 >> 2]) != Math_fround(-100.0))) {
$145 = $0 + 172 | 0;
if (!(Math_fround(HEAPF32[$145 >> 2]) != Math_fround(-100.0))) {
$148 = $0 + 176 | 0;
if (Math_fround(HEAPF32[$148 >> 2]) == Math_fround(-100.0)) {
if (1) {
__Z7LogTimev() | 0;
__Z5eputsPKc(32756);
}
HEAPF32[$136 >> 2] = Math_fround(3.0);
HEAPF32[$139 >> 2] = Math_fround(.5);
HEAPF32[$142 >> 2] = Math_fround(.5);
HEAPF32[$145 >> 2] = Math_fround(1.29999995);
HEAPF32[$148 >> 2] = Math_fround(0.0);
}
}
}
}
}
$152 = $0 + 96 | 0;
if (Math_fround(HEAPF32[$152 >> 2]) != Math_fround(-100.0)) {
STACKTOP = sp;
return;
}
if (Math_fround(HEAPF32[$0 + 100 >> 2]) != Math_fround(-100.0)) {
STACKTOP = sp;
return;
}
if (Math_fround(HEAPF32[$0 + 104 >> 2]) != Math_fround(-100.0)) {
STACKTOP = sp;
return;
}
if (!(Math_fround(HEAPF32[$0 + 108 >> 2]) == Math_fround(-100.0))) {
STACKTOP = sp;
return;
}
if (1) {
__Z7LogTimev() | 0;
__Z5eputsPKc(32629);
};
HEAP32[$152 >> 2] = 0;
HEAP32[$152 + 4 >> 2] = 0;
HEAP32[$152 + 8 >> 2] = 0;
HEAP32[$152 + 12 >> 2] = 0;
STACKTOP = sp;
return;
}
$166 = HEAP16[$0 + 52 >> 1] | 0;
if (!($166 << 16 >> 16 != 0 & ($166 & 2) == 0)) label = 85;
} else label = 85;
if ((label | 0) == 85) {
if (($84 | 0) != 7) break;
if (!(HEAP16[$0 + 54 >> 1] & 2)) break;
}
if ((HEAP32[$0 + 8 >> 2] | 0) != 2) {
if (1) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(32946, $vararg_buffer9);
}
$179 = $0 + 160 | 0;
if (!(Math_fround(HEAPF32[$179 >> 2]) != Math_fround(-100.0))) {
$182 = $0 + 164 | 0;
if (!(Math_fround(HEAPF32[$182 >> 2]) != Math_fround(-100.0))) {
$185 = $0 + 168 | 0;
if (!(Math_fround(HEAPF32[$185 >> 2]) != Math_fround(-100.0))) {
$188 = $0 + 172 | 0;
if (!(Math_fround(HEAPF32[$188 >> 2]) != Math_fround(-100.0))) {
$191 = $0 + 176 | 0;
if (Math_fround(HEAPF32[$191 >> 2]) == Math_fround(-100.0)) {
if (1) {
__Z7LogTimev() | 0;
__Z5eputsPKc(32756);
}
HEAPF32[$179 >> 2] = Math_fround(4.0);
HEAPF32[$182 >> 2] = Math_fround(3.0);
HEAPF32[$185 >> 2] = Math_fround(2.0);
HEAPF32[$188 >> 2] = Math_fround(1.39999998);
HEAPF32[$191 >> 2] = Math_fround(1.89999998);
}
}
}
}
}
$195 = $0 + 96 | 0;
if (Math_fround(HEAPF32[$195 >> 2]) != Math_fround(-100.0)) {
STACKTOP = sp;
return;
}
if (Math_fround(HEAPF32[$0 + 100 >> 2]) != Math_fround(-100.0)) {
STACKTOP = sp;
return;
}
if (Math_fround(HEAPF32[$0 + 104 >> 2]) != Math_fround(-100.0)) {
STACKTOP = sp;
return;
}
if (!(Math_fround(HEAPF32[$0 + 108 >> 2]) == Math_fround(-100.0))) {
STACKTOP = sp;
return;
}
if (1) {
__Z7LogTimev() | 0;
__Z5eputsPKc(32629);
};
HEAP32[$195 >> 2] = 0;
HEAP32[$195 + 4 >> 2] = 0;
HEAP32[$195 + 8 >> 2] = 0;
HEAP32[$195 + 12 >> 2] = 0;
STACKTOP = sp;
return;
}
} while (0);
if ($39 & $6 | $7 & $40) {
if ((HEAP32[$0 + 204 >> 2] | 0) != 8) label = 107;
} else label = 107;
do if ((label | 0) == 107) {
$212 = HEAP32[$0 + 188 >> 2] | 0;
$214 = HEAP32[$0 + 192 >> 2] | 0;
if (($212 | 0) == 0 & ($214 | 0) == 1 | ($212 | 0) == 1 & ($214 | 0) == 0) if ((HEAP32[$0 + 208 >> 2] | 0) == 8) break;
if (!$85) {
STACKTOP = sp;
return;
}
if ((HEAP32[$0 + 196 >> 2] | 0) != 1) {
STACKTOP = sp;
return;
}
if ((HEAP32[$0 + 200 >> 2] | 0) != 2) {
STACKTOP = sp;
return;
}
if (1) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(33069, $vararg_buffer13);
__Z7LogTimev() | 0;
__Z5eputsPKc(32756);
__Z7LogTimev() | 0;
__Z5eputsPKc(32629);
}
$259 = HEAP32[17755] | 0;
$260 = $259 + 228 | 0;
$261 = $0 + 160 | 0;
HEAP32[$261 >> 2] = HEAP32[$260 >> 2];
HEAP32[$261 + 4 >> 2] = HEAP32[$260 + 4 >> 2];
HEAP32[$261 + 8 >> 2] = HEAP32[$260 + 8 >> 2];
HEAP32[$261 + 12 >> 2] = HEAP32[$260 + 12 >> 2];
HEAP32[$261 + 16 >> 2] = HEAP32[$260 + 16 >> 2];
$262 = $259 + 248 | 0;
$263 = $0 + 96 | 0;
HEAP32[$263 >> 2] = HEAP32[$262 >> 2];
HEAP32[$263 + 4 >> 2] = HEAP32[$262 + 4 >> 2];
HEAP32[$263 + 8 >> 2] = HEAP32[$262 + 8 >> 2];
HEAP32[$263 + 12 >> 2] = HEAP32[$262 + 12 >> 2];
STACKTOP = sp;
return;
} while (0);
if (1) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(33005, $vararg_buffer11);
}
$223 = $0 + 160 | 0;
if (!(Math_fround(HEAPF32[$223 >> 2]) != Math_fround(-100.0))) {
$226 = $0 + 164 | 0;
if (!(Math_fround(HEAPF32[$226 >> 2]) != Math_fround(-100.0))) {
$229 = $0 + 168 | 0;
if (!(Math_fround(HEAPF32[$229 >> 2]) != Math_fround(-100.0))) {
$232 = $0 + 172 | 0;
if (!(Math_fround(HEAPF32[$232 >> 2]) != Math_fround(-100.0))) {
$235 = $0 + 176 | 0;
if (Math_fround(HEAPF32[$235 >> 2]) == Math_fround(-100.0)) {
if (1) {
__Z7LogTimev() | 0;
__Z5eputsPKc(32756);
}
HEAPF32[$223 >> 2] = Math_fround(4.0);
HEAPF32[$226 >> 2] = Math_fround(1.0);
HEAPF32[$229 >> 2] = Math_fround(0.0);
HEAPF32[$232 >> 2] = Math_fround(2.0);
HEAPF32[$235 >> 2] = Math_fround(0.0);
}
}
}
}
}
$239 = $0 + 96 | 0;
if (Math_fround(HEAPF32[$239 >> 2]) != Math_fround(-100.0)) {
STACKTOP = sp;
return;
}
$242 = $0 + 100 | 0;
if (Math_fround(HEAPF32[$242 >> 2]) != Math_fround(-100.0)) {
STACKTOP = sp;
return;
}
$245 = $0 + 104 | 0;
if (Math_fround(HEAPF32[$245 >> 2]) != Math_fround(-100.0)) {
STACKTOP = sp;
return;
}
$248 = $0 + 108 | 0;
if (!(Math_fround(HEAPF32[$248 >> 2]) == Math_fround(-100.0))) {
STACKTOP = sp;
return;
}
if (1) {
__Z7LogTimev() | 0;
__Z5eputsPKc(32629);
}
HEAPF32[$239 >> 2] = Math_fround(3.5);
HEAPF32[$242 >> 2] = Math_fround(2.0);
HEAPF32[$245 >> 2] = Math_fround(0.0);
HEAPF32[$248 >> 2] = Math_fround(0.0);
STACKTOP = sp;
return;
}
function __ZN17AvatarConstraints10initialiseEP11HanimAvatar($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0$i = 0, $$0$i119 = 0, $$0$i130 = 0, $$0$i141 = 0, $$0$i152 = 0, $$0$i163 = 0, $$0$i174 = 0, $$0$i185 = 0, $$0$i196 = 0, $$012$i$i$i = 0, $$012$i$i$i113 = 0, $$012$i$i$i124 = 0, $$012$i$i$i135 = 0, $$012$i$i$i146 = 0, $$012$i$i$i157 = 0, $$012$i$i$i168 = 0, $$012$i$i$i179 = 0, $$012$i$i$i190 = 0, $$01215$i$i$i = 0, $$01215$i$i$i110 = 0, $$01215$i$i$i121 = 0, $$01215$i$i$i132 = 0, $$01215$i$i$i143 = 0, $$01215$i$i$i154 = 0, $$01215$i$i$i165 = 0, $$01215$i$i$i176 = 0, $$01215$i$i$i187 = 0, $$01216$i$i$i = 0, $$01216$i$i$i111 = 0, $$01216$i$i$i122 = 0, $$01216$i$i$i133 = 0, $$01216$i$i$i144 = 0, $$01216$i$i$i155 = 0, $$01216$i$i$i166 = 0, $$01216$i$i$i177 = 0, $$01216$i$i$i188 = 0, $$pre$phi$i116Z2D = 0, $$pre$phi$i127Z2D = 0, $$pre$phi$i138Z2D = 0, $$pre$phi$i149Z2D = 0, $$pre$phi$i160Z2D = 0, $$pre$phi$i171Z2D = 0, $$pre$phi$i182Z2D = 0, $$pre$phi$i193Z2D = 0, $$pre$phi$iZ2D = 0, $$sink$i$i$i = 0, $$sink$i$i$i117 = 0, $$sink$i$i$i128 = 0, $$sink$i$i$i139 = 0, $$sink$i$i$i150 = 0, $$sink$i$i$i161 = 0, $$sink$i$i$i172 = 0, $$sink$i$i$i183 = 0, $$sink$i$i$i194 = 0, $107 = 0, $108 = 0, $112 = 0, $121 = 0, $122 = 0, $13 = 0.0, $133 = 0, $134 = 0, $138 = 0, $14 = 0, $147 = 0, $148 = 0, $159 = 0, $16 = 0, $160 = 0, $164 = 0, $17 = 0, $173 = 0, $174 = 0, $18 = 0, $185 = 0, $186 = 0, $190 = 0, $199 = 0, $2 = 0, $200 = 0, $211 = 0, $212 = 0, $216 = 0, $225 = 0, $226 = 0, $237 = 0, $238 = 0, $242 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $260 = 0, $263 = 0, $267 = 0, $268 = 0, $270 = 0, $271 = 0, $272 = 0, $275 = f0, $278 = f0, $281 = f0, $282 = f0, $283 = 0, $287 = 0, $288 = 0, $29 = 0, $290 = 0, $293 = f0, $296 = f0, $299 = f0, $30 = 0, $300 = 0, $304 = 0.0, $308 = 0.0, $34 = 0, $43 = 0, $44 = 0, $55 = 0, $56 = 0, $60 = 0, $69 = 0, $70 = 0, $8 = 0.0, $81 = 0, $82 = 0, $86 = 0, $95 = 0, $96 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 112 | 0;
$vararg_buffer20 = sp + 80 | 0;
$vararg_buffer18 = sp + 72 | 0;
$vararg_buffer14 = sp + 56 | 0;
$vararg_buffer12 = sp + 48 | 0;
$vararg_buffer10 = sp + 40 | 0;
$vararg_buffer7 = sp + 32 | 0;
$vararg_buffer3 = sp + 16 | 0;
$2 = sp + 96 | 0;
if (0) {
__Z7eprintfPKcz(17179, sp);
__Z7eprintfPKcz(17222, sp + 8 | 0);
__ZNK6Vector5printEP8_IO_FILEi($0 + 68 | 0, HEAP32[16082] | 0, 3);
$8 = +Math_fround(HEAPF32[$0 + 80 >> 2]);
HEAPF64[$vararg_buffer3 >> 3] = $8;
__Z7eprintfPKcz(17234, $vararg_buffer3);
__Z7eprintfPKcz(17247, sp + 24 | 0);
__ZNK6Vector5printEP8_IO_FILEi($0 + 52 | 0, HEAP32[16082] | 0, 3);
$13 = +Math_fround(HEAPF32[$0 + 64 >> 2]);
HEAPF64[$vararg_buffer7 >> 3] = $13;
__Z7eprintfPKcz(17234, $vararg_buffer7);
}
$14 = $1 + 148 | 0;
$16 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(17259, HEAP32[$14 >> 2] | 0) | 0;
$17 = $1 + 144 | 0;
$18 = HEAP32[$17 >> 2] | 0;
L4 : do if ((HEAP16[$18 + ($16 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i = HEAP32[$18 + ($16 << 3) >> 2] | 0;
if (!$$01215$i$i$i) label = 8; else {
$$01216$i$i$i = $$01215$i$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(17259, HEAP32[$$01216$i$i$i >> 2] | 0) | 0) break;
$$012$i$i$i = HEAP32[$$01216$i$i$i + 8 >> 2] | 0;
if (!$$012$i$i$i) {
label = 8;
break L4;
} else $$01216$i$i$i = $$012$i$i$i;
}
$$pre$phi$iZ2D = $1 + 164 | 0;
$$sink$i$i$i = $$01216$i$i$i + 4 | 0;
}
} else label = 8; while (0);
if ((label | 0) == 8) {
$29 = $1 + 164 | 0;
$$pre$phi$iZ2D = $29;
$$sink$i$i$i = $29;
}
$30 = HEAP32[$$sink$i$i$i >> 2] | 0;
if (($30 | 0) == (HEAP32[$$pre$phi$iZ2D >> 2] | 0)) $$0$i = 0; else {
$34 = HEAP32[$1 + 108 >> 2] | 0;
if (($30 | 0) < 0) $$0$i = 0; else if ((HEAP32[$34 + 12 >> 2] | 0) > ($30 | 0)) $$0$i = HEAP32[(HEAP32[$34 >> 2] | 0) + ($30 << 2) >> 2] | 0; else $$0$i = 0;
}
$43 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(17265, HEAP32[$14 >> 2] | 0) | 0;
$44 = HEAP32[$17 >> 2] | 0;
L18 : do if ((HEAP16[$44 + ($43 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i110 = HEAP32[$44 + ($43 << 3) >> 2] | 0;
if (!$$01215$i$i$i110) label = 18; else {
$$01216$i$i$i111 = $$01215$i$i$i110;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(17265, HEAP32[$$01216$i$i$i111 >> 2] | 0) | 0) break;
$$012$i$i$i113 = HEAP32[$$01216$i$i$i111 + 8 >> 2] | 0;
if (!$$012$i$i$i113) {
label = 18;
break L18;
} else $$01216$i$i$i111 = $$012$i$i$i113;
}
$$pre$phi$i116Z2D = $1 + 164 | 0;
$$sink$i$i$i117 = $$01216$i$i$i111 + 4 | 0;
}
} else label = 18; while (0);
if ((label | 0) == 18) {
$55 = $1 + 164 | 0;
$$pre$phi$i116Z2D = $55;
$$sink$i$i$i117 = $55;
}
$56 = HEAP32[$$sink$i$i$i117 >> 2] | 0;
if (($56 | 0) == (HEAP32[$$pre$phi$i116Z2D >> 2] | 0)) $$0$i119 = 0; else {
$60 = HEAP32[$1 + 108 >> 2] | 0;
if (($56 | 0) < 0) $$0$i119 = 0; else if ((HEAP32[$60 + 12 >> 2] | 0) > ($56 | 0)) $$0$i119 = HEAP32[(HEAP32[$60 >> 2] | 0) + ($56 << 2) >> 2] | 0; else $$0$i119 = 0;
}
$69 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(17270, HEAP32[$14 >> 2] | 0) | 0;
$70 = HEAP32[$17 >> 2] | 0;
L32 : do if ((HEAP16[$70 + ($69 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i121 = HEAP32[$70 + ($69 << 3) >> 2] | 0;
if (!$$01215$i$i$i121) label = 28; else {
$$01216$i$i$i122 = $$01215$i$i$i121;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(17270, HEAP32[$$01216$i$i$i122 >> 2] | 0) | 0) break;
$$012$i$i$i124 = HEAP32[$$01216$i$i$i122 + 8 >> 2] | 0;
if (!$$012$i$i$i124) {
label = 28;
break L32;
} else $$01216$i$i$i122 = $$012$i$i$i124;
}
$$pre$phi$i127Z2D = $1 + 164 | 0;
$$sink$i$i$i128 = $$01216$i$i$i122 + 4 | 0;
}
} else label = 28; while (0);
if ((label | 0) == 28) {
$81 = $1 + 164 | 0;
$$pre$phi$i127Z2D = $81;
$$sink$i$i$i128 = $81;
}
$82 = HEAP32[$$sink$i$i$i128 >> 2] | 0;
if (($82 | 0) == (HEAP32[$$pre$phi$i127Z2D >> 2] | 0)) $$0$i130 = 0; else {
$86 = HEAP32[$1 + 108 >> 2] | 0;
if (($82 | 0) < 0) $$0$i130 = 0; else if ((HEAP32[$86 + 12 >> 2] | 0) > ($82 | 0)) $$0$i130 = HEAP32[(HEAP32[$86 >> 2] | 0) + ($82 << 2) >> 2] | 0; else $$0$i130 = 0;
}
$95 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(17275, HEAP32[$14 >> 2] | 0) | 0;
$96 = HEAP32[$17 >> 2] | 0;
L46 : do if ((HEAP16[$96 + ($95 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i132 = HEAP32[$96 + ($95 << 3) >> 2] | 0;
if (!$$01215$i$i$i132) label = 38; else {
$$01216$i$i$i133 = $$01215$i$i$i132;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(17275, HEAP32[$$01216$i$i$i133 >> 2] | 0) | 0) break;
$$012$i$i$i135 = HEAP32[$$01216$i$i$i133 + 8 >> 2] | 0;
if (!$$012$i$i$i135) {
label = 38;
break L46;
} else $$01216$i$i$i133 = $$012$i$i$i135;
}
$$pre$phi$i138Z2D = $1 + 164 | 0;
$$sink$i$i$i139 = $$01216$i$i$i133 + 4 | 0;
}
} else label = 38; while (0);
if ((label | 0) == 38) {
$107 = $1 + 164 | 0;
$$pre$phi$i138Z2D = $107;
$$sink$i$i$i139 = $107;
}
$108 = HEAP32[$$sink$i$i$i139 >> 2] | 0;
if (($108 | 0) == (HEAP32[$$pre$phi$i138Z2D >> 2] | 0)) $$0$i141 = 0; else {
$112 = HEAP32[$1 + 108 >> 2] | 0;
if (($108 | 0) < 0) $$0$i141 = 0; else if ((HEAP32[$112 + 12 >> 2] | 0) > ($108 | 0)) $$0$i141 = HEAP32[(HEAP32[$112 >> 2] | 0) + ($108 << 2) >> 2] | 0; else $$0$i141 = 0;
}
$121 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(17280, HEAP32[$14 >> 2] | 0) | 0;
$122 = HEAP32[$17 >> 2] | 0;
L60 : do if ((HEAP16[$122 + ($121 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i143 = HEAP32[$122 + ($121 << 3) >> 2] | 0;
if (!$$01215$i$i$i143) label = 48; else {
$$01216$i$i$i144 = $$01215$i$i$i143;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(17280, HEAP32[$$01216$i$i$i144 >> 2] | 0) | 0) break;
$$012$i$i$i146 = HEAP32[$$01216$i$i$i144 + 8 >> 2] | 0;
if (!$$012$i$i$i146) {
label = 48;
break L60;
} else $$01216$i$i$i144 = $$012$i$i$i146;
}
$$pre$phi$i149Z2D = $1 + 164 | 0;
$$sink$i$i$i150 = $$01216$i$i$i144 + 4 | 0;
}
} else label = 48; while (0);
if ((label | 0) == 48) {
$133 = $1 + 164 | 0;
$$pre$phi$i149Z2D = $133;
$$sink$i$i$i150 = $133;
}
$134 = HEAP32[$$sink$i$i$i150 >> 2] | 0;
if (($134 | 0) == (HEAP32[$$pre$phi$i149Z2D >> 2] | 0)) $$0$i152 = 0; else {
$138 = HEAP32[$1 + 108 >> 2] | 0;
if (($134 | 0) < 0) $$0$i152 = 0; else if ((HEAP32[$138 + 12 >> 2] | 0) > ($134 | 0)) $$0$i152 = HEAP32[(HEAP32[$138 >> 2] | 0) + ($134 << 2) >> 2] | 0; else $$0$i152 = 0;
}
$147 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(17286, HEAP32[$14 >> 2] | 0) | 0;
$148 = HEAP32[$17 >> 2] | 0;
L74 : do if ((HEAP16[$148 + ($147 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i154 = HEAP32[$148 + ($147 << 3) >> 2] | 0;
if (!$$01215$i$i$i154) label = 58; else {
$$01216$i$i$i155 = $$01215$i$i$i154;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(17286, HEAP32[$$01216$i$i$i155 >> 2] | 0) | 0) break;
$$012$i$i$i157 = HEAP32[$$01216$i$i$i155 + 8 >> 2] | 0;
if (!$$012$i$i$i157) {
label = 58;
break L74;
} else $$01216$i$i$i155 = $$012$i$i$i157;
}
$$pre$phi$i160Z2D = $1 + 164 | 0;
$$sink$i$i$i161 = $$01216$i$i$i155 + 4 | 0;
}
} else label = 58; while (0);
if ((label | 0) == 58) {
$159 = $1 + 164 | 0;
$$pre$phi$i160Z2D = $159;
$$sink$i$i$i161 = $159;
}
$160 = HEAP32[$$sink$i$i$i161 >> 2] | 0;
if (($160 | 0) == (HEAP32[$$pre$phi$i160Z2D >> 2] | 0)) $$0$i163 = 0; else {
$164 = HEAP32[$1 + 108 >> 2] | 0;
if (($160 | 0) < 0) $$0$i163 = 0; else if ((HEAP32[$164 + 12 >> 2] | 0) > ($160 | 0)) $$0$i163 = HEAP32[(HEAP32[$164 >> 2] | 0) + ($160 << 2) >> 2] | 0; else $$0$i163 = 0;
}
$173 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(17292, HEAP32[$14 >> 2] | 0) | 0;
$174 = HEAP32[$17 >> 2] | 0;
L88 : do if ((HEAP16[$174 + ($173 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i165 = HEAP32[$174 + ($173 << 3) >> 2] | 0;
if (!$$01215$i$i$i165) label = 68; else {
$$01216$i$i$i166 = $$01215$i$i$i165;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(17292, HEAP32[$$01216$i$i$i166 >> 2] | 0) | 0) break;
$$012$i$i$i168 = HEAP32[$$01216$i$i$i166 + 8 >> 2] | 0;
if (!$$012$i$i$i168) {
label = 68;
break L88;
} else $$01216$i$i$i166 = $$012$i$i$i168;
}
$$pre$phi$i171Z2D = $1 + 164 | 0;
$$sink$i$i$i172 = $$01216$i$i$i166 + 4 | 0;
}
} else label = 68; while (0);
if ((label | 0) == 68) {
$185 = $1 + 164 | 0;
$$pre$phi$i171Z2D = $185;
$$sink$i$i$i172 = $185;
}
$186 = HEAP32[$$sink$i$i$i172 >> 2] | 0;
if (($186 | 0) == (HEAP32[$$pre$phi$i171Z2D >> 2] | 0)) $$0$i174 = 0; else {
$190 = HEAP32[$1 + 108 >> 2] | 0;
if (($186 | 0) < 0) $$0$i174 = 0; else if ((HEAP32[$190 + 12 >> 2] | 0) > ($186 | 0)) $$0$i174 = HEAP32[(HEAP32[$190 >> 2] | 0) + ($186 << 2) >> 2] | 0; else $$0$i174 = 0;
}
$199 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(17298, HEAP32[$14 >> 2] | 0) | 0;
$200 = HEAP32[$17 >> 2] | 0;
L102 : do if ((HEAP16[$200 + ($199 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i176 = HEAP32[$200 + ($199 << 3) >> 2] | 0;
if (!$$01215$i$i$i176) label = 78; else {
$$01216$i$i$i177 = $$01215$i$i$i176;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(17298, HEAP32[$$01216$i$i$i177 >> 2] | 0) | 0) break;
$$012$i$i$i179 = HEAP32[$$01216$i$i$i177 + 8 >> 2] | 0;
if (!$$012$i$i$i179) {
label = 78;
break L102;
} else $$01216$i$i$i177 = $$012$i$i$i179;
}
$$pre$phi$i182Z2D = $1 + 164 | 0;
$$sink$i$i$i183 = $$01216$i$i$i177 + 4 | 0;
}
} else label = 78; while (0);
if ((label | 0) == 78) {
$211 = $1 + 164 | 0;
$$pre$phi$i182Z2D = $211;
$$sink$i$i$i183 = $211;
}
$212 = HEAP32[$$sink$i$i$i183 >> 2] | 0;
if (($212 | 0) == (HEAP32[$$pre$phi$i182Z2D >> 2] | 0)) $$0$i185 = 0; else {
$216 = HEAP32[$1 + 108 >> 2] | 0;
if (($212 | 0) < 0) $$0$i185 = 0; else if ((HEAP32[$216 + 12 >> 2] | 0) > ($212 | 0)) $$0$i185 = HEAP32[(HEAP32[$216 >> 2] | 0) + ($212 << 2) >> 2] | 0; else $$0$i185 = 0;
}
$225 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(17304, HEAP32[$14 >> 2] | 0) | 0;
$226 = HEAP32[$17 >> 2] | 0;
L116 : do if ((HEAP16[$226 + ($225 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i187 = HEAP32[$226 + ($225 << 3) >> 2] | 0;
if (!$$01215$i$i$i187) label = 88; else {
$$01216$i$i$i188 = $$01215$i$i$i187;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(17304, HEAP32[$$01216$i$i$i188 >> 2] | 0) | 0) break;
$$012$i$i$i190 = HEAP32[$$01216$i$i$i188 + 8 >> 2] | 0;
if (!$$012$i$i$i190) {
label = 88;
break L116;
} else $$01216$i$i$i188 = $$012$i$i$i190;
}
$$pre$phi$i193Z2D = $1 + 164 | 0;
$$sink$i$i$i194 = $$01216$i$i$i188 + 4 | 0;
}
} else label = 88; while (0);
if ((label | 0) == 88) {
$237 = $1 + 164 | 0;
$$pre$phi$i193Z2D = $237;
$$sink$i$i$i194 = $237;
}
$238 = HEAP32[$$sink$i$i$i194 >> 2] | 0;
do if (($238 | 0) == (HEAP32[$$pre$phi$i193Z2D >> 2] | 0)) $$0$i196 = 0; else {
$242 = HEAP32[$1 + 108 >> 2] | 0;
if (($238 | 0) < 0) {
$$0$i196 = 0;
break;
}
if ((HEAP32[$242 + 12 >> 2] | 0) <= ($238 | 0)) {
$$0$i196 = 0;
break;
}
$$0$i196 = HEAP32[(HEAP32[$242 >> 2] | 0) + ($238 << 2) >> 2] | 0;
} while (0);
$250 = ($$0$i | 0) == 0;
$251 = ($$0$i119 | 0) == 0;
$252 = ($$0$i130 | 0) == 0;
$253 = ($$0$i141 | 0) == 0;
$254 = ($$0$i152 | 0) == 0;
$255 = ($$0$i163 | 0) == 0;
$256 = ($$0$i174 | 0) == 0;
$257 = ($$0$i185 | 0) == 0;
$258 = ($$0$i196 | 0) == 0;
if (!($250 | $251 | $252 | $253 | $254 | $255 | $256 | $257 | $258)) {
$260 = __ZN7XMLCell7elementEPKc(HEAP32[16168] | 0, 17443) | 0;
if (!$260) $281 = Math_fround(0.0); else $281 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($260, 17459, Math_fround(0.0)));
HEAPF32[$2 >> 2] = Math_fround(0.0);
$263 = $1 + 72 | 0;
$267 = (HEAP32[(HEAP32[$263 >> 2] | 0) + 40 >> 2] | 0) + 68 | 0;
$268 = $0 + 68 | 0;
$270 = $$0$i119 + 40 | 0;
$271 = $$0$i141 + 40 | 0;
__ZN6Vector8coneAxisERfRKS_S2_S2_S2_($268, $2, $267, $$0$i + 40 | 0, $270, $271);
$272 = $$0$i163 + 40 | 0;
$275 = Math_fround(Math_fround(__ZNK6Vector8distanceERKS_($272, $$0$i174 + 40 | 0)) * Math_fround(.5));
$278 = Math_fround(+Math_asin(+Math_fround($275 / Math_fround(__ZNK6Vector8distanceERKS_($272, $267)))));
$282 = Math_fround(Math_fround(HEAPF32[$2 >> 2]) + Math_fround($281 * $278));
$283 = $0 + 80 | 0;
HEAPF32[$283 >> 2] = $282;
$287 = (HEAP32[(HEAP32[$263 >> 2] | 0) + 24 >> 2] | 0) + 68 | 0;
$288 = $0 + 52 | 0;
__ZN6Vector8coneAxisERfRKS_S2_S2_S2_($288, $2, $287, $$0$i152 + 40 | 0, $271, $270);
$290 = $$0$i185 + 40 | 0;
$293 = Math_fround(Math_fround(__ZNK6Vector8distanceERKS_($290, $$0$i196 + 40 | 0)) * Math_fround(.5));
$296 = Math_fround(+Math_asin(+Math_fround($293 / Math_fround(__ZNK6Vector8distanceERKS_($290, $287)))));
$299 = Math_fround(Math_fround(HEAPF32[$2 >> 2]) + Math_fround($281 * $296));
$300 = $0 + 64 | 0;
HEAPF32[$300 >> 2] = $299;
if (0) {
__Z7eprintfPKcz(17478, $vararg_buffer10);
__Z7eprintfPKcz(17222, $vararg_buffer12);
__ZNK6Vector5printEP8_IO_FILEi($268, HEAP32[16082] | 0, 3);
$304 = +Math_fround(HEAPF32[$283 >> 2]);
HEAPF64[$vararg_buffer14 >> 3] = $304;
HEAPF64[$vararg_buffer14 + 8 >> 3] = +$278;
__Z7eprintfPKcz(17521, $vararg_buffer14);
__Z7eprintfPKcz(17247, $vararg_buffer18);
__ZNK6Vector5printEP8_IO_FILEi($288, HEAP32[16082] | 0, 3);
$308 = +Math_fround(HEAPF32[$300 >> 2]);
HEAPF64[$vararg_buffer20 >> 3] = $308;
HEAPF64[$vararg_buffer20 + 8 >> 3] = +$296;
__Z7eprintfPKcz(17521, $vararg_buffer20);
}
STACKTOP = sp;
return;
}
__Z7LogTimev() | 0;
__Z5eputsPKc(17310);
if ($250) __Z5eputsPKc(17367);
if ($251) __Z5eputsPKc(17374);
if ($252) __Z5eputsPKc(17380);
if ($253) __Z5eputsPKc(17386);
if ($254) __Z5eputsPKc(17392);
if ($255) __Z5eputsPKc(17399);
if ($256) __Z5eputsPKc(17406);
if ($257) __Z5eputsPKc(17413);
if ($258) __Z5eputsPKc(17420);
__Z5eputsPKc(17427);
STACKTOP = sp;
return;
}
function __Z25AddToStaticGestureFromXMLP7GestureP7XMLCell($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0, $$pre$i20 = 0, $101 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $119 = 0, $124 = f0, $125 = 0, $126 = f0, $134 = f0, $14 = 0, $142 = 0, $144 = 0, $145 = 0, $147 = 0, $148 = 0, $15 = 0, $157 = 0, $158 = 0, $159 = 0, $167 = 0, $17 = 0, $172 = f0, $173 = 0, $174 = f0, $182 = f0, $199 = 0, $2 = 0, $200 = 0, $208 = 0, $213 = 0, $215 = 0, $218 = 0, $219 = 0, $221 = 0, $224 = 0, $23 = 0, $231 = 0, $233 = 0, $235 = 0, $241 = 0, $243 = 0, $247 = 0, $248 = 0, $251 = 0, $255 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $41 = 0, $49 = 0, $50 = 0, $51 = 0, $59 = 0, $6 = 0, $64 = f0, $65 = 0, $66 = f0, $68 = f0, $73 = f0, $75 = 0, $76 = 0, $8 = 0, $80 = 0, $82 = 0, $86 = 0, $88 = 0, $89 = 0, $90 = 0, $93 = 0, $96 = 0, $98 = 0, $99 = 0, $or$cond$i50$i = 0, $tmpcast$i$byval_copy = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer19 = 0, $vararg_buffer23 = 0, $vararg_buffer27 = 0, $vararg_buffer3 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 320 | 0;
$tmpcast$i$byval_copy = sp + 314 | 0;
$vararg_buffer27 = sp + 88 | 0;
$vararg_buffer23 = sp + 80 | 0;
$vararg_buffer19 = sp + 72 | 0;
$vararg_buffer12 = sp + 48 | 0;
$vararg_buffer10 = sp + 40 | 0;
$vararg_buffer3 = sp + 16 | 0;
$vararg_buffer = sp;
$2 = sp + 312 | 0;
$3 = sp + 96 | 0;
switch (__ZN5SiGML14convertElementEPKc(HEAP32[$1 >> 2] | 0) | 0) {
case 17:
{
$6 = __ZL18checkComponentTypeP7XMLCelli13SiGML_Element($1, 0, 9) | 0;
if (!$6) {
$$0 = 1;
STACKTOP = sp;
return $$0 | 0;
}
$8 = __ZN7XMLCell13attrib_stringEPKc($6, 53037) | 0;
if (!$8) {
$11 = HEAP32[$1 >> 2] | 0;
HEAP32[$vararg_buffer >> 2] = HEAP32[$6 >> 2];
HEAP32[$vararg_buffer + 4 >> 2] = $11;
HEAP32[$vararg_buffer + 8 >> 2] = 53037;
__Z7eprintfPKcz(29748, $vararg_buffer);
$$0 = 1;
STACKTOP = sp;
return $$0 | 0;
}
if (_strcmp($8, 52045) | 0) {
$14 = HEAP32[$6 >> 2] | 0;
$15 = HEAP32[$1 >> 2] | 0;
HEAP32[$vararg_buffer3 >> 2] = 53037;
HEAP32[$vararg_buffer3 + 4 >> 2] = $14;
HEAP32[$vararg_buffer3 + 8 >> 2] = $15;
HEAP32[$vararg_buffer3 + 12 >> 2] = 52045;
HEAP32[$vararg_buffer3 + 16 >> 2] = $8;
__Z7eprintfPKcz(29799, $vararg_buffer3);
$$0 = 1;
STACKTOP = sp;
return $$0 | 0;
}
$17 = HEAP32[$1 + 8 >> 2] | 0;
if ((HEAP32[$17 + 12 >> 2] | 0) > 1) {
$23 = HEAP32[(HEAP32[$17 >> 2] | 0) + 4 >> 2] | 0;
if ($23 | 0) {
$27 = __ZNK21InvertibleStringArray14indexFromValueEPKc(HEAP32[17757] | 0, HEAP32[$23 >> 2] | 0) | 0;
L17 : do switch ($27 | 0) {
case 23:
{
$35 = $0 + 13 | 0;
$38 = (HEAP8[$35 >> 0] & 64) != 0;
$39 = HEAP32[$23 >> 2] | 0;
$41 = HEAP32[$23 + 4 >> 2] | 0;
HEAP8[$3 + 4 >> 0] = 0;
HEAP32[$3 + 8 >> 2] = 0;
HEAP32[$3 + 12 >> 2] = 0;
HEAP8[$3 + 16 >> 0] = 0;
HEAPF32[$3 + 56 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 60 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 64 >> 2] = Math_fround(0.0);
$49 = $3 + 80 | 0;
HEAPF32[$49 >> 2] = Math_fround(0.0);
$50 = $3 + 84 | 0;
HEAPF32[$50 >> 2] = Math_fround(0.0);
$51 = $3 + 88 | 0;
HEAPF32[$51 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 96 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 100 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 104 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 112 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 116 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 140 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 144 >> 2] = Math_fround(0.0);
$59 = $3 + 152 | 0;
HEAPF32[$3 + 180 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 184 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 192 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 196 >> 2] = Math_fround(0.0);
HEAP32[$59 >> 2] = 0;
HEAP32[$59 + 4 >> 2] = 0;
HEAP32[$59 + 8 >> 2] = 0;
HEAP32[$59 + 12 >> 2] = 0;
HEAP32[$59 + 16 >> 2] = 0;
HEAP32[$59 + 20 >> 2] = 0;
HEAP8[$2 >> 0] = 0;
HEAP8[$tmpcast$i$byval_copy >> 0] = HEAP8[$2 >> 0] | 0;
HEAP8[$tmpcast$i$byval_copy + 1 >> 0] = HEAP8[$2 + 1 >> 0] | 0;
__ZN16MotionAttributes17setFromXMLAttribsEPKcP7HashAnyIS1_S1_E9Mirroringb($3, $39, $41, $tmpcast$i$byval_copy, $38);
$64 = Math_fround(HEAPF32[$49 >> 2]);
$65 = $64 == Math_fround(0.0);
$66 = Math_fround(HEAPF32[$50 >> 2]);
$or$cond$i50$i = $65 & $66 == Math_fround(0.0);
$68 = Math_fround(HEAPF32[$51 >> 2]);
if ($or$cond$i50$i & $68 == Math_fround(0.0)) {
HEAP32[$vararg_buffer27 >> 2] = HEAP32[$23 >> 2];
HEAP32[$vararg_buffer27 + 4 >> 2] = 49714;
__Z7eprintfPKcz(29965, $vararg_buffer27);
$$0 = 1;
STACKTOP = sp;
return $$0 | 0;
}
$73 = Math_fround(Math_fround(Math_fround(($38 ? Math_fround(-1.0) : Math_fround(1.0)) * $64) + $66) * Math_fround(.5));
$75 = HEAP32[$3 + 92 >> 2] | 0;
$76 = HEAP8[$35 >> 0] | 0;
if ($76 & 1) {
$80 = HEAP32[$0 + 20 >> 2] | 0;
HEAPF32[$80 + 60 >> 2] = $73;
HEAPF32[$80 + 64 >> 2] = $68;
HEAP32[$80 + 68 >> 2] = $75;
$82 = HEAP32[$0 + 24 >> 2] | 0;
HEAPF32[$82 + 60 >> 2] = $73;
HEAPF32[$82 + 64 >> 2] = $68;
HEAP32[$82 + 68 >> 2] = $75;
break L17;
}
if (!($76 & 2)) {
$88 = HEAP32[$0 + 20 >> 2] | 0;
HEAPF32[$88 + 60 >> 2] = $73;
HEAPF32[$88 + 64 >> 2] = $68;
HEAP32[$88 + 68 >> 2] = $75;
break L17;
} else {
$86 = HEAP32[$0 + 24 >> 2] | 0;
HEAPF32[$86 + 60 >> 2] = $73;
HEAPF32[$86 + 64 >> 2] = $68;
HEAP32[$86 + 68 >> 2] = $75;
break L17;
}
break;
}
case 18:
{
$89 = __ZL18checkComponentTypeP7XMLCelli13SiGML_Element($23, 0, 23) | 0;
$90 = __ZL18checkComponentTypeP7XMLCelli13SiGML_Element($23, 1, 23) | 0;
if (($89 | 0) == 0 | ($90 | 0) == 0) {
$$0 = 1;
STACKTOP = sp;
return $$0 | 0;
}
$93 = $0 + 13 | 0;
$96 = (HEAP8[$93 >> 0] & 64) != 0;
$98 = HEAP32[$0 + 20 >> 2] | 0;
$99 = HEAP32[$89 >> 2] | 0;
$101 = HEAP32[$89 + 4 >> 2] | 0;
HEAP8[$3 + 4 >> 0] = 0;
HEAP32[$3 + 8 >> 2] = 0;
HEAP32[$3 + 12 >> 2] = 0;
HEAP8[$3 + 16 >> 0] = 0;
HEAPF32[$3 + 56 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 60 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 64 >> 2] = Math_fround(0.0);
$109 = $3 + 80 | 0;
HEAPF32[$109 >> 2] = Math_fround(0.0);
$110 = $3 + 84 | 0;
HEAPF32[$110 >> 2] = Math_fround(0.0);
$111 = $3 + 88 | 0;
HEAPF32[$111 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 96 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 100 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 104 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 112 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 116 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 140 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 144 >> 2] = Math_fround(0.0);
$119 = $3 + 152 | 0;
HEAPF32[$3 + 180 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 184 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 192 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 196 >> 2] = Math_fround(0.0);
HEAP32[$119 >> 2] = 0;
HEAP32[$119 + 4 >> 2] = 0;
HEAP32[$119 + 8 >> 2] = 0;
HEAP32[$119 + 12 >> 2] = 0;
HEAP32[$119 + 16 >> 2] = 0;
HEAP32[$119 + 20 >> 2] = 0;
HEAP8[$2 >> 0] = 0;
HEAP8[$tmpcast$i$byval_copy >> 0] = HEAP8[$2 >> 0] | 0;
HEAP8[$tmpcast$i$byval_copy + 1 >> 0] = HEAP8[$2 + 1 >> 0] | 0;
__ZN16MotionAttributes17setFromXMLAttribsEPKcP7HashAnyIS1_S1_E9Mirroringb($3, $99, $101, $tmpcast$i$byval_copy, $96);
$124 = Math_fround(HEAPF32[$109 >> 2]);
$125 = $124 == Math_fround(0.0);
$126 = Math_fround(HEAPF32[$110 >> 2]);
if ($125 & $126 == Math_fround(0.0) & Math_fround(HEAPF32[$111 >> 2]) == Math_fround(0.0)) {
HEAP32[$vararg_buffer19 >> 2] = HEAP32[$89 >> 2];
HEAP32[$vararg_buffer19 + 4 >> 2] = 49714;
__Z7eprintfPKcz(29965, $vararg_buffer19);
} else {
$134 = Math_fround(Math_fround(Math_fround(($96 ? Math_fround(-1.0) : Math_fround(1.0)) * $124) + $126) * Math_fround(.5));
HEAPF32[$98 + 60 >> 2] = $134;
HEAP32[$98 + 64 >> 2] = HEAP32[$111 >> 2];
HEAP32[$98 + 68 >> 2] = HEAP32[$3 + 92 >> 2];
}
$142 = (HEAP8[$93 >> 0] & 64) != 0;
$144 = HEAP32[$0 + 24 >> 2] | 0;
$145 = HEAP32[$90 >> 2] | 0;
$147 = HEAP32[$90 + 4 >> 2] | 0;
$148 = $3 + 4 | 0;
HEAP8[$148 >> 0] = HEAP8[$148 >> 0] & -16;
HEAP32[$3 + 8 >> 2] = 0;
HEAP32[$3 + 12 >> 2] = 0;
HEAP8[$3 + 16 >> 0] = 0;
HEAPF32[$3 + 56 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 60 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 64 >> 2] = Math_fround(0.0);
$157 = $3 + 80 | 0;
HEAPF32[$157 >> 2] = Math_fround(0.0);
$158 = $3 + 84 | 0;
HEAPF32[$158 >> 2] = Math_fround(0.0);
$159 = $3 + 88 | 0;
HEAPF32[$159 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 96 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 100 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 104 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 112 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 116 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 140 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 144 >> 2] = Math_fround(0.0);
$167 = $3 + 152 | 0;
HEAPF32[$3 + 180 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 184 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 192 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 196 >> 2] = Math_fround(0.0);
HEAP32[$167 >> 2] = 0;
HEAP32[$167 + 4 >> 2] = 0;
HEAP32[$167 + 8 >> 2] = 0;
HEAP32[$167 + 12 >> 2] = 0;
HEAP32[$167 + 16 >> 2] = 0;
HEAP32[$167 + 20 >> 2] = 0;
HEAP8[$2 >> 0] = 0;
HEAP8[$tmpcast$i$byval_copy >> 0] = HEAP8[$2 >> 0] | 0;
HEAP8[$tmpcast$i$byval_copy + 1 >> 0] = HEAP8[$2 + 1 >> 0] | 0;
__ZN16MotionAttributes17setFromXMLAttribsEPKcP7HashAnyIS1_S1_E9Mirroringb($3, $145, $147, $tmpcast$i$byval_copy, $142);
$172 = Math_fround(HEAPF32[$157 >> 2]);
$173 = $172 == Math_fround(0.0);
$174 = Math_fround(HEAPF32[$158 >> 2]);
if ($173 & $174 == Math_fround(0.0) & Math_fround(HEAPF32[$159 >> 2]) == Math_fround(0.0)) {
HEAP32[$vararg_buffer23 >> 2] = HEAP32[$90 >> 2];
HEAP32[$vararg_buffer23 + 4 >> 2] = 49714;
__Z7eprintfPKcz(29965, $vararg_buffer23);
} else {
$182 = Math_fround(Math_fround(Math_fround(($142 ? Math_fround(-1.0) : Math_fround(1.0)) * $172) + $174) * Math_fround(.5));
HEAPF32[$144 + 60 >> 2] = $182;
HEAP32[$144 + 64 >> 2] = HEAP32[$159 >> 2];
HEAP32[$144 + 68 >> 2] = HEAP32[$3 + 92 >> 2];
}
break;
}
default:
{
$28 = HEAP32[$23 >> 2] | 0;
$30 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 23) | 0;
$32 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 18) | 0;
$34 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, $27) | 0;
HEAP32[$vararg_buffer12 >> 2] = 2;
HEAP32[$vararg_buffer12 + 4 >> 2] = $28;
HEAP32[$vararg_buffer12 + 8 >> 2] = $30;
HEAP32[$vararg_buffer12 + 12 >> 2] = $32;
HEAP32[$vararg_buffer12 + 16 >> 2] = $34;
__Z7eprintfPKcz(29906, $vararg_buffer12);
$$0 = 1;
STACKTOP = sp;
return $$0 | 0;
}
} while (0);
if (!0) {
$$0 = 1;
STACKTOP = sp;
return $$0 | 0;
}
__Z5eputsPKc(30038);
__ZNK17ElbowDisplacement5printEP8_IO_FILE((HEAP32[$0 + 20 >> 2] | 0) + 60 | 0, HEAP32[16082] | 0);
__Z5eputsPKc(49554);
__Z5eputsPKc(30071);
__ZNK17ElbowDisplacement5printEP8_IO_FILE((HEAP32[$0 + 24 >> 2] | 0) + 60 | 0, HEAP32[16082] | 0);
__Z5eputsPKc(49554);
$$0 = 1;
STACKTOP = sp;
return $$0 | 0;
}
}
__Z7eprintfPKcz(29865, $vararg_buffer10);
$$0 = 1;
STACKTOP = sp;
return $$0 | 0;
}
case 9:
{
$199 = $0 + 13 | 0;
$200 = HEAP8[$199 >> 0] | 0;
if (!($200 & 4)) $208 = $200; else {
__ZN11OneHGesture17SetFromHandConfigEPK7HashAnyIPKcS2_E(HEAP32[$0 + 20 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0);
$208 = HEAP8[$199 >> 0] | 0;
}
do if ($208 & 8) {
$213 = HEAP32[$0 + 24 >> 2] | 0;
$215 = HEAP32[$1 + 4 >> 2] | 0;
if (!($208 & 1)) {
__ZN11OneHGesture17SetFromHandConfigEPK7HashAnyIPKcS2_E($213, $215);
break;
} else {
HEAP16[$2 >> 1] = HEAP16[$0 + 14 >> 1] | 0;
HEAP8[$tmpcast$i$byval_copy >> 0] = HEAP8[$2 >> 0] | 0;
HEAP8[$tmpcast$i$byval_copy + 1 >> 0] = HEAP8[$2 + 1 >> 0] | 0;
__ZN11OneHGesture17SetFromHandConfigEPK7HashAnyIPKcS2_E9Mirroring($213, $215, $tmpcast$i$byval_copy);
break;
}
} while (0);
$$0 = 1;
STACKTOP = sp;
return $$0 | 0;
}
case 10:
{
$218 = $1 + 8 | 0;
$219 = HEAP32[$218 >> 2] | 0;
$221 = HEAP32[$219 + 12 >> 2] | 0;
if (($221 | 0) <= 0) {
$$0 = 1;
STACKTOP = sp;
return $$0 | 0;
}
$224 = HEAP32[HEAP32[$219 >> 2] >> 2] | 0;
if (!$224) {
$231 = $221;
$233 = $219;
} else {
__ZN11OneHGesture17SetFromHandConfigEPK7HashAnyIPKcS2_E(HEAP32[$0 + 20 >> 2] | 0, HEAP32[$224 + 4 >> 2] | 0);
$$pre$i20 = HEAP32[$218 >> 2] | 0;
$231 = HEAP32[$$pre$i20 + 12 >> 2] | 0;
$233 = $$pre$i20;
}
if (($231 | 0) <= 1) {
$$0 = 1;
STACKTOP = sp;
return $$0 | 0;
}
$235 = HEAP32[(HEAP32[$233 >> 2] | 0) + 4 >> 2] | 0;
if (!$235) {
$$0 = 1;
STACKTOP = sp;
return $$0 | 0;
}
__ZN11OneHGesture17SetFromHandConfigEPK7HashAnyIPKcS2_E(HEAP32[$0 + 24 >> 2] | 0, HEAP32[$235 + 4 >> 2] | 0);
$$0 = 1;
STACKTOP = sp;
return $$0 | 0;
}
case 13:
case 12:
case 11:
{
$241 = $0 + 36 | 0;
$243 = $0 + 13 | 0;
__ZN18SiGMLConstellation21AnalyseSingleLocationEP7XMLCellb(HEAP32[$241 >> 2] | 0, $1, (HEAP8[$243 >> 0] & 64) != 0);
$247 = HEAP32[$241 >> 2] | 0;
$248 = HEAP32[$0 >> 2] | 0;
$251 = (HEAP8[$243 >> 0] & 64) != 0;
__ZL13BreakSymmetryR6SiteIDPK11HanimAvatarb($247, $248, $251);
__ZL13BreakSymmetryR6SiteIDPK11HanimAvatarb($247 + 4 | 0, $248, $251);
__ZL13BreakSymmetryR6SiteIDPK11HanimAvatarb($247 + 16 | 0, $248, $251);
__ZL13BreakSymmetryR6SiteIDPK11HanimAvatarb($247 + 20 | 0, $248, $251);
$255 = $251 ^ 1;
__ZL13BreakSymmetryR6SiteIDPK11HanimAvatarb($247 + 28 | 0, $248, $255);
__ZL13BreakSymmetryR6SiteIDPK11HanimAvatarb($247 + 32 | 0, $248, $255);
$$0 = 1;
STACKTOP = sp;
return $$0 | 0;
}
case 15:
{
__ZN18SiGMLConstellation20AnalyseSplitLocationEP7XMLCellb(HEAP32[$0 + 36 >> 2] | 0, $1, (HEAP8[$0 + 13 >> 0] & 64) != 0);
$$0 = 1;
STACKTOP = sp;
return $$0 | 0;
}
case 16:
{
__ZN18SiGMLConstellation24AnalyseHandConstellationEP7XMLCellb(HEAP32[$0 + 36 >> 2] | 0, $1, (HEAP8[$0 + 13 >> 0] & 64) != 0);
$$0 = 1;
STACKTOP = sp;
return $$0 | 0;
}
default:
{
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
}
return 0;
}
function __ZN11HanimAvatar15createTorsoMeshEv($0) {
$0 = $0 | 0;
var $$0101113 = 0, $$0101113$1 = 0, $$0101113$2 = 0, $$0101113$3 = 0, $$097 = 0, $$099 = 0, $$byval_copy = 0, $$lcssa = 0, $$pre = 0, $$pre$phi141Z2D = 0, $$pre$phi143Z2D = 0, $$pre$phi145Z2D = 0, $$pre$phiZ2D = 0, $1 = 0, $100 = 0, $101 = 0, $107 = 0, $109 = 0, $11 = 0, $114 = 0, $12 = 0, $120 = 0, $136 = 0, $137 = 0, $138 = 0, $144 = 0, $146 = 0, $151 = 0, $161 = 0, $162 = 0, $163 = 0, $169 = 0, $17 = 0, $171 = 0, $176 = 0, $186 = 0, $187 = 0, $188 = 0, $194 = 0, $196 = 0, $2 = 0, $201 = 0, $21 = 0, $215 = 0, $221 = 0, $234 = 0, $240 = 0, $25 = 0, $3 = 0, $4 = 0, $46 = 0, $48 = 0, $49 = 0, $52 = 0, $53 = 0, $58 = 0, $6 = 0, $62 = 0, $63 = 0, $65 = 0, $67 = 0, $72 = 0, $73 = 0, $83 = 0, $84 = 0, $85 = 0, $91 = 0, $99 = 0, $indvars$iv = 0, $indvars$iv$1 = 0, $indvars$iv$2 = 0, $indvars$iv132 = 0, $indvars$iv135 = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer23 = 0, $vararg_buffer30 = 0, $vararg_buffer37 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 416 | 0;
$$byval_copy = sp + 392 | 0;
$vararg_buffer43 = sp + 136 | 0;
$vararg_buffer40 = sp + 128 | 0;
$vararg_buffer37 = sp + 120 | 0;
$vararg_buffer30 = sp + 96 | 0;
$vararg_buffer23 = sp + 72 | 0;
$vararg_buffer16 = sp + 48 | 0;
$vararg_buffer13 = sp + 40 | 0;
$vararg_buffer9 = sp + 32 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$1 = sp + 152 | 0;
$2 = sp + 148 | 0;
$3 = sp + 144 | 0;
$4 = sp + 140 | 0;
$6 = HEAP32[$0 + 72 >> 2] | 0;
if (!(HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] | 0)) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(22327, sp);
$11 = ___cxa_allocate_exception(4) | 0;
HEAP32[$11 >> 2] = 14;
___cxa_throw($11 | 0, 232, 0);
}
$12 = __Znwj(16) | 0;
HEAP32[$12 >> 2] = 0;
HEAP32[$12 + 4 >> 2] = 0;
HEAP32[$12 + 8 >> 2] = 0;
HEAP32[$12 + 12 >> 2] = 0;
HEAP32[(HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] | 0) + 16 >> 2] = $12;
$17 = __Znwj(16) | 0;
HEAP32[$17 + 4 >> 2] = 10;
HEAP32[$17 + 12 >> 2] = 0;
HEAP32[$17 >> 2] = 0;
HEAP32[$17 + 8 >> 2] = 0;
HEAP32[$12 >> 2] = $17;
$21 = __Znwj(16) | 0;
HEAP32[$21 + 4 >> 2] = 10;
HEAP32[$21 + 12 >> 2] = 0;
HEAP32[$21 >> 2] = 0;
HEAP32[$21 + 8 >> 2] = 0;
$25 = $12 + 4 | 0;
HEAP32[$25 >> 2] = $21;
__ZN6VectorC2Ev($1);
__ZN6VectorC2Ev($1 + 12 | 0);
__ZN6VectorC2Ev($1 + 24 | 0);
__ZN6VectorC2Ev($1 + 36 | 0);
__ZN6VectorC2Ev($1 + 48 | 0);
__ZN6VectorC2Ev($1 + 60 | 0);
__ZN6VectorC2Ev($1 + 72 | 0);
__ZN6VectorC2Ev($1 + 84 | 0);
__ZN6VectorC2Ev($1 + 96 | 0);
__ZN6VectorC2Ev($1 + 108 | 0);
__ZN6VectorC2Ev($1 + 120 | 0);
__ZN6VectorC2Ev($1 + 132 | 0);
__ZN6VectorC2Ev($1 + 144 | 0);
__ZN6VectorC2Ev($1 + 156 | 0);
__ZN6VectorC2Ev($1 + 168 | 0);
__ZN6VectorC2Ev($1 + 180 | 0);
__ZN6VectorC2Ev($1 + 192 | 0);
__ZN6VectorC2Ev($1 + 204 | 0);
__ZN6VectorC2Ev($1 + 216 | 0);
__ZN6VectorC2Ev($1 + 228 | 0);
$indvars$iv135 = 0;
do {
$$pre = HEAP32[1752 + ($indvars$iv135 << 2) >> 2] | 0;
$indvars$iv132 = 0;
do {
HEAP32[$2 >> 2] = 0;
HEAP32[$3 >> 2] = 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($4, $$pre, HEAP32[1724 + ($indvars$iv132 << 2) >> 2] | 0, 0, 0, 1, 0);
$62 = $1 + ($indvars$iv135 * 60 | 0) + ($indvars$iv132 * 12 | 0) | 0;
HEAP8[$$byval_copy >> 0] = HEAP8[$4 >> 0] | 0;
HEAP8[$$byval_copy + 1 >> 0] = HEAP8[$4 + 1 >> 0] | 0;
HEAP8[$$byval_copy + 2 >> 0] = HEAP8[$4 + 2 >> 0] | 0;
HEAP8[$$byval_copy + 3 >> 0] = HEAP8[$4 + 3 >> 0] | 0;
__ZNK11HanimAvatar12locateSiteIDEb6SiteIDP6VectorRP5JointRP4Site($0, 1, $$byval_copy, $62, $2, $3);
$63 = HEAP32[$2 >> 2] | 0;
$65 = 0 != 0;
if (!$63) {
if ($65) {
HEAP32[$vararg_buffer1 >> 2] = $indvars$iv135;
HEAP32[$vararg_buffer1 + 4 >> 2] = $indvars$iv132;
__Z7eprintfPKcz(22355, $vararg_buffer1);
__ZNK6Vector5printEP8_IO_FILEi($62, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
} else {
if ($65) {
$67 = HEAP32[$63 >> 2] | 0;
HEAP32[$vararg_buffer4 >> 2] = $indvars$iv135;
HEAP32[$vararg_buffer4 + 4 >> 2] = $indvars$iv132;
HEAP32[$vararg_buffer4 + 8 >> 2] = $67;
__Z7eprintfPKcz(22391, $vararg_buffer4);
__ZNK6Vector5printEP8_IO_FILEi($62, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
__ZN6Vector6setAddERKS_($62, $63 + 68 | 0);
if (0) {
HEAP32[$vararg_buffer9 >> 2] = $indvars$iv135;
HEAP32[$vararg_buffer9 + 4 >> 2] = $indvars$iv132;
__Z7eprintfPKcz(22425, $vararg_buffer9);
__ZNK6Vector5printEP8_IO_FILEi($62, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
}
$indvars$iv132 = $indvars$iv132 + 1 | 0;
} while (($indvars$iv132 | 0) != 5);
$indvars$iv135 = $indvars$iv135 + 1 | 0;
} while (($indvars$iv135 | 0) != 4);
$46 = __Znwj(12) | 0;
HEAP32[$46 >> 2] = 832;
HEAP16[$46 + 4 >> 1] = 4;
__THREW__ = 0;
$48 = invoke_ii(24, 16) | 0;
$49 = __THREW__;
__THREW__ = 0;
if ($49 & 1) {
$72 = ___cxa_find_matching_catch_2() | 0;
$73 = tempRet0;
__ZdlPv($46);
$$097 = $72;
$$099 = $73;
___resumeException($$097 | 0);
}
HEAP32[$46 + 8 >> 2] = $48;
$52 = $0 + 80 | 0;
HEAP32[$48 >> 2] = 0;
HEAP32[$48 + 4 >> 2] = 0;
HEAP32[$48 + 8 >> 2] = 0;
HEAP32[$48 + 12 >> 2] = 0;
HEAP32[$52 >> 2] = $46;
$53 = __Znwj(136) | 0;
__THREW__ = 0;
invoke_viiiiii(5, $53 | 0, $1 | 0, $1 + 12 | 0, $1 + 24 | 0, $1 + 36 | 0, $1 + 48 | 0);
$58 = __THREW__;
__THREW__ = 0;
if ($58 & 1) $$lcssa = $53; else {
HEAP32[HEAP32[(HEAP32[$52 >> 2] | 0) + 8 >> 2] >> 2] = $53;
if (0) {
HEAP32[$vararg_buffer13 >> 2] = 0;
__Z7eprintfPKcz(22446, $vararg_buffer13);
__ZNK10TorsoCurve5printEP8_IO_FILEs(HEAP32[HEAP32[(HEAP32[$52 >> 2] | 0) + 8 >> 2] >> 2] | 0, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
$85 = __Znwj(136) | 0;
__THREW__ = 0;
invoke_viiiiii(5, $85 | 0, $1 + 60 | 0, $1 + 72 | 0, $1 + 84 | 0, $1 + 96 | 0, $1 + 108 | 0);
$91 = __THREW__;
__THREW__ = 0;
if ($91 & 1) $$lcssa = $85; else {
HEAP32[(HEAP32[(HEAP32[$52 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] = $85;
if (0) {
HEAP32[$vararg_buffer37 >> 2] = 1;
__Z7eprintfPKcz(22446, $vararg_buffer37);
__ZNK10TorsoCurve5printEP8_IO_FILEs(HEAP32[(HEAP32[(HEAP32[$52 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] | 0, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
$215 = __Znwj(136) | 0;
__THREW__ = 0;
invoke_viiiiii(5, $215 | 0, $1 + 120 | 0, $1 + 132 | 0, $1 + 144 | 0, $1 + 156 | 0, $1 + 168 | 0);
$221 = __THREW__;
__THREW__ = 0;
if ($221 & 1) $$lcssa = $215; else {
HEAP32[(HEAP32[(HEAP32[$52 >> 2] | 0) + 8 >> 2] | 0) + 8 >> 2] = $215;
if (0) {
HEAP32[$vararg_buffer40 >> 2] = 2;
__Z7eprintfPKcz(22446, $vararg_buffer40);
__ZNK10TorsoCurve5printEP8_IO_FILEs(HEAP32[(HEAP32[(HEAP32[$52 >> 2] | 0) + 8 >> 2] | 0) + 8 >> 2] | 0, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
$234 = __Znwj(136) | 0;
__THREW__ = 0;
invoke_viiiiii(5, $234 | 0, $1 + 180 | 0, $1 + 192 | 0, $1 + 204 | 0, $1 + 216 | 0, $1 + 228 | 0);
$240 = __THREW__;
__THREW__ = 0;
if ($240 & 1) $$lcssa = $234; else {
HEAP32[(HEAP32[(HEAP32[$52 >> 2] | 0) + 8 >> 2] | 0) + 12 >> 2] = $234;
if (0) {
HEAP32[$vararg_buffer43 >> 2] = 3;
__Z7eprintfPKcz(22446, $vararg_buffer43);
__ZNK10TorsoCurve5printEP8_IO_FILEs(HEAP32[(HEAP32[(HEAP32[$52 >> 2] | 0) + 8 >> 2] | 0) + 12 >> 2] | 0, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
$$0101113 = 0;
while (1) {
__ZN6VectorC2Ev($$byval_copy);
__ZNK10TorsoCurve13GetCurvePointEfR6Vector(HEAP32[HEAP32[(HEAP32[$52 >> 2] | 0) + 8 >> 2] >> 2] | 0, Math_fround(Math_fround($$0101113 << 16 >> 16) / Math_fround(40.0)), $$byval_copy);
__ZNK6Vector16checkValidVectorEv($$byval_copy);
$99 = HEAP32[$12 >> 2] | 0;
$100 = $99 + 12 | 0;
$101 = HEAP32[$100 >> 2] | 0;
if (($101 | 0) >= 0) {
if ((HEAP32[$99 + 8 >> 2] | 0) > ($101 | 0)) {
$$pre$phi145Z2D = $101 + 1 | 0;
label = 25;
} else {
$107 = HEAP32[$99 + 4 >> 2] | 0;
$109 = $101 + 1 | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($99, ($107 | 0) > ($101 | 0) ? $107 : $109 + ($101 >>> 1) | 0);
if ((HEAP32[$100 >> 2] | 0) <= ($101 | 0)) {
$$pre$phi145Z2D = $109;
label = 25;
}
}
if ((label | 0) == 25) {
label = 0;
HEAP32[$100 >> 2] = $$pre$phi145Z2D;
}
$114 = (HEAP32[$99 >> 2] | 0) + ($101 * 12 | 0) | 0;
HEAP32[$114 >> 2] = HEAP32[$$byval_copy >> 2];
HEAP32[$114 + 4 >> 2] = HEAP32[$$byval_copy + 4 >> 2];
HEAP32[$114 + 8 >> 2] = HEAP32[$$byval_copy + 8 >> 2];
}
if ($$0101113 << 16 >> 16 < 40) $$0101113 = $$0101113 + 1 << 16 >> 16; else {
$$0101113$1 = 0;
break;
}
}
while (1) {
__ZN6VectorC2Ev($$byval_copy);
__ZNK10TorsoCurve13GetCurvePointEfR6Vector(HEAP32[(HEAP32[(HEAP32[$52 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] | 0, Math_fround(Math_fround($$0101113$1 << 16 >> 16) / Math_fround(40.0)), $$byval_copy);
__ZNK6Vector16checkValidVectorEv($$byval_copy);
$136 = HEAP32[$12 >> 2] | 0;
$137 = $136 + 12 | 0;
$138 = HEAP32[$137 >> 2] | 0;
if (($138 | 0) >= 0) {
if ((HEAP32[$136 + 8 >> 2] | 0) > ($138 | 0)) {
$$pre$phi143Z2D = $138 + 1 | 0;
label = 37;
} else {
$144 = HEAP32[$136 + 4 >> 2] | 0;
$146 = $138 + 1 | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($136, ($144 | 0) > ($138 | 0) ? $144 : $146 + ($138 >>> 1) | 0);
if ((HEAP32[$137 >> 2] | 0) <= ($138 | 0)) {
$$pre$phi143Z2D = $146;
label = 37;
}
}
if ((label | 0) == 37) {
label = 0;
HEAP32[$137 >> 2] = $$pre$phi143Z2D;
}
$151 = (HEAP32[$136 >> 2] | 0) + ($138 * 12 | 0) | 0;
HEAP32[$151 >> 2] = HEAP32[$$byval_copy >> 2];
HEAP32[$151 + 4 >> 2] = HEAP32[$$byval_copy + 4 >> 2];
HEAP32[$151 + 8 >> 2] = HEAP32[$$byval_copy + 8 >> 2];
}
if ($$0101113$1 << 16 >> 16 < 40) $$0101113$1 = $$0101113$1 + 1 << 16 >> 16; else {
$$0101113$2 = 0;
break;
}
}
while (1) {
__ZN6VectorC2Ev($$byval_copy);
__ZNK10TorsoCurve13GetCurvePointEfR6Vector(HEAP32[(HEAP32[(HEAP32[$52 >> 2] | 0) + 8 >> 2] | 0) + 8 >> 2] | 0, Math_fround(Math_fround($$0101113$2 << 16 >> 16) / Math_fround(40.0)), $$byval_copy);
__ZNK6Vector16checkValidVectorEv($$byval_copy);
$161 = HEAP32[$12 >> 2] | 0;
$162 = $161 + 12 | 0;
$163 = HEAP32[$162 >> 2] | 0;
if (($163 | 0) >= 0) {
if ((HEAP32[$161 + 8 >> 2] | 0) > ($163 | 0)) {
$$pre$phi141Z2D = $163 + 1 | 0;
label = 44;
} else {
$169 = HEAP32[$161 + 4 >> 2] | 0;
$171 = $163 + 1 | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($161, ($169 | 0) > ($163 | 0) ? $169 : $171 + ($163 >>> 1) | 0);
if ((HEAP32[$162 >> 2] | 0) <= ($163 | 0)) {
$$pre$phi141Z2D = $171;
label = 44;
}
}
if ((label | 0) == 44) {
label = 0;
HEAP32[$162 >> 2] = $$pre$phi141Z2D;
}
$176 = (HEAP32[$161 >> 2] | 0) + ($163 * 12 | 0) | 0;
HEAP32[$176 >> 2] = HEAP32[$$byval_copy >> 2];
HEAP32[$176 + 4 >> 2] = HEAP32[$$byval_copy + 4 >> 2];
HEAP32[$176 + 8 >> 2] = HEAP32[$$byval_copy + 8 >> 2];
}
if ($$0101113$2 << 16 >> 16 < 40) $$0101113$2 = $$0101113$2 + 1 << 16 >> 16; else {
$$0101113$3 = 0;
break;
}
}
while (1) {
__ZN6VectorC2Ev($$byval_copy);
__ZNK10TorsoCurve13GetCurvePointEfR6Vector(HEAP32[(HEAP32[(HEAP32[$52 >> 2] | 0) + 8 >> 2] | 0) + 12 >> 2] | 0, Math_fround(Math_fround($$0101113$3 << 16 >> 16) / Math_fround(40.0)), $$byval_copy);
__ZNK6Vector16checkValidVectorEv($$byval_copy);
$186 = HEAP32[$12 >> 2] | 0;
$187 = $186 + 12 | 0;
$188 = HEAP32[$187 >> 2] | 0;
if (($188 | 0) >= 0) {
if ((HEAP32[$186 + 8 >> 2] | 0) > ($188 | 0)) {
$$pre$phiZ2D = $188 + 1 | 0;
label = 51;
} else {
$194 = HEAP32[$186 + 4 >> 2] | 0;
$196 = $188 + 1 | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($186, ($194 | 0) > ($188 | 0) ? $194 : $196 + ($188 >>> 1) | 0);
if ((HEAP32[$187 >> 2] | 0) <= ($188 | 0)) {
$$pre$phiZ2D = $196;
label = 51;
}
}
if ((label | 0) == 51) {
label = 0;
HEAP32[$187 >> 2] = $$pre$phiZ2D;
}
$201 = (HEAP32[$186 >> 2] | 0) + ($188 * 12 | 0) | 0;
HEAP32[$201 >> 2] = HEAP32[$$byval_copy >> 2];
HEAP32[$201 + 4 >> 2] = HEAP32[$$byval_copy + 4 >> 2];
HEAP32[$201 + 8 >> 2] = HEAP32[$$byval_copy + 8 >> 2];
}
if ($$0101113$3 << 16 >> 16 < 40) $$0101113$3 = $$0101113$3 + 1 << 16 >> 16; else break;
}
$120 = HEAP32[$25 >> 2] | 0;
$indvars$iv = 0;
do {
HEAP32[$vararg_buffer16 >> 2] = $indvars$iv;
HEAP32[$vararg_buffer16 + 4 >> 2] = $indvars$iv + 41;
HEAP32[$vararg_buffer16 + 8 >> 2] = $indvars$iv + 42;
$indvars$iv = $indvars$iv + 1 | 0;
HEAP32[$vararg_buffer16 + 12 >> 2] = $indvars$iv;
HEAP32[$vararg_buffer16 + 16 >> 2] = -1;
__ZN12DynamicArrayIsLsn1EE15appendElementsXEiz($120, 5, $vararg_buffer16);
} while (($indvars$iv | 0) != 40);
$indvars$iv$1 = 0;
do {
HEAP32[$vararg_buffer23 >> 2] = $indvars$iv$1 + 41;
HEAP32[$vararg_buffer23 + 4 >> 2] = $indvars$iv$1 + 82;
HEAP32[$vararg_buffer23 + 8 >> 2] = $indvars$iv$1 + 83;
HEAP32[$vararg_buffer23 + 12 >> 2] = $indvars$iv$1 + 42;
HEAP32[$vararg_buffer23 + 16 >> 2] = -1;
__ZN12DynamicArrayIsLsn1EE15appendElementsXEiz($120, 5, $vararg_buffer23);
$indvars$iv$1 = $indvars$iv$1 + 1 | 0;
} while (($indvars$iv$1 | 0) != 40);
$indvars$iv$2 = 0;
do {
HEAP32[$vararg_buffer30 >> 2] = $indvars$iv$2 + 82;
HEAP32[$vararg_buffer30 + 4 >> 2] = $indvars$iv$2 + 123;
HEAP32[$vararg_buffer30 + 8 >> 2] = $indvars$iv$2 + 124;
HEAP32[$vararg_buffer30 + 12 >> 2] = $indvars$iv$2 + 83;
HEAP32[$vararg_buffer30 + 16 >> 2] = -1;
__ZN12DynamicArrayIsLsn1EE15appendElementsXEiz($120, 5, $vararg_buffer30);
$indvars$iv$2 = $indvars$iv$2 + 1 | 0;
} while (($indvars$iv$2 | 0) != 40);
STACKTOP = sp;
return;
}
}
}
}
$83 = ___cxa_find_matching_catch_2() | 0;
$84 = tempRet0;
__ZdlPv($$lcssa);
$$097 = $83;
$$099 = $84;
___resumeException($$097 | 0);
}
function _normal_prologTok($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0$ph = 0, $$0172 = 0, $$0173206 = 0, $$0173206$phi = 0, $$028$i = 0, $$02837$i = 0, $$02839$i = 0, $$06269$i = 0, $$1207 = 0, $$pn38$i = 0, $$pn38$i$phi = 0, $$sink = 0, $$sink$i = 0, $$sink210 = 0, $$sink76$i = 0, $10 = 0, $139 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $16 = 0, $205 = 0, $22 = 0, $37 = 0, $48 = 0, $5 = 0, $52 = 0, $60 = 0, $64 = 0, $70 = 0, $81 = 0, $87 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0;
L1 : do if (($1 | 0) == ($2 | 0)) $$0172 = -4; else {
$5 = $0 + 72 | 0;
do switch (HEAP8[$5 + (HEAPU8[$1 >> 0] | 0) >> 0] | 0) {
case 12:
{
$$0172 = _normal_scanLit(12, $0, $1 + 1 | 0, $2, $3) | 0;
break L1;
break;
}
case 13:
{
$$0172 = _normal_scanLit(13, $0, $1 + 1 | 0, $2, $3) | 0;
break L1;
break;
}
case 2:
{
$16 = $1 + 1 | 0;
if (($16 | 0) == ($2 | 0)) {
$$0172 = -1;
break L1;
}
switch (HEAP8[$5 + (HEAPU8[$16 >> 0] | 0) >> 0] | 0) {
case 16:
{
$22 = $1 + 2 | 0;
if (($22 | 0) == ($2 | 0)) {
$$0172 = -1;
break L1;
}
switch (HEAP8[$5 + (HEAPU8[$22 >> 0] | 0) >> 0] | 0) {
case 27:
{
$$0172 = _normal_scanComment($0, $1 + 3 | 0, $2, $3) | 0;
break L1;
break;
}
case 20:
{
HEAP32[$3 >> 2] = $1 + 3;
$$0172 = 33;
break L1;
break;
}
case 24:
case 22:
{
$$02837$i = $1 + 3 | 0;
if (($$02837$i | 0) == ($2 | 0)) {
$$0172 = -1;
break L1;
} else {
$$02839$i = $$02837$i;
$$pn38$i = $22;
}
L18 : while (1) {
switch (HEAP8[$5 + (HEAPU8[$$02839$i >> 0] | 0) >> 0] | 0) {
case 30:
{
label = 16;
break L18;
break;
}
case 10:
case 9:
case 21:
{
break L18;
break;
}
case 24:
case 22:
break;
default:
{
label = 20;
break L18;
}
}
$$028$i = $$02839$i + 1 | 0;
if (($$028$i | 0) == ($2 | 0)) {
$$0172 = -1;
break L1;
} else {
$$pn38$i$phi = $$02839$i;
$$02839$i = $$028$i;
$$pn38$i = $$pn38$i$phi;
}
}
if ((label | 0) == 20) {
HEAP32[$3 >> 2] = $$02839$i;
$$0172 = 0;
break L1;
}
L23 : do if ((label | 0) == 16) {
$37 = $$pn38$i + 2 | 0;
if (($37 | 0) == ($2 | 0)) {
$$0172 = -1;
break L1;
}
switch (HEAP8[$5 + (HEAPU8[$37 >> 0] | 0) >> 0] | 0) {
case 30:
case 10:
case 9:
case 21:
break;
default:
break L23;
}
HEAP32[$3 >> 2] = $$02839$i;
$$0172 = 0;
break L1;
} while (0);
HEAP32[$3 >> 2] = $$02839$i;
$$0172 = 16;
break L1;
break;
}
default:
{
HEAP32[$3 >> 2] = $22;
$$0172 = 0;
break L1;
}
}
break;
}
case 15:
{
$$0172 = _normal_scanPi($0, $1 + 2 | 0, $2, $3) | 0;
break L1;
break;
}
case 7:
case 6:
case 5:
case 29:
case 24:
case 22:
{
HEAP32[$3 >> 2] = $1;
$$0172 = 29;
break L1;
break;
}
default:
{
HEAP32[$3 >> 2] = $16;
$$0172 = 0;
break L1;
}
}
break;
}
case 9:
{
if (($1 + 1 | 0) == ($2 | 0)) {
HEAP32[$3 >> 2] = $2;
$$0172 = -15;
break L1;
} else label = 3;
break;
}
case 10:
case 21:
{
label = 3;
break;
}
case 30:
{
$$0172 = _normal_scanPercent($0, $1 + 1 | 0, $2, $3) | 0;
break L1;
break;
}
case 35:
{
HEAP32[$3 >> 2] = $1 + 1;
$$0172 = 38;
break L1;
break;
}
case 20:
{
HEAP32[$3 >> 2] = $1 + 1;
$$0172 = 25;
break L1;
break;
}
case 4:
{
$60 = $1 + 1 | 0;
if (($60 | 0) == ($2 | 0)) {
$$0172 = -26;
break L1;
}
if ((HEAP8[$60 >> 0] | 0) == 93) {
$64 = $1 + 2 | 0;
if (($64 | 0) == ($2 | 0)) {
$$0172 = -1;
break L1;
}
if ((HEAP8[$64 >> 0] | 0) == 62) {
HEAP32[$3 >> 2] = $1 + 3;
$$0172 = 34;
break L1;
}
}
HEAP32[$3 >> 2] = $60;
$$0172 = 26;
break L1;
break;
}
case 31:
{
HEAP32[$3 >> 2] = $1 + 1;
$$0172 = 23;
break L1;
break;
}
case 32:
{
$70 = $1 + 1 | 0;
if (($70 | 0) == ($2 | 0)) {
$$0172 = -24;
break L1;
}
switch (HEAP8[$5 + (HEAPU8[$70 >> 0] | 0) >> 0] | 0) {
case 33:
{
HEAP32[$3 >> 2] = $1 + 2;
$$0172 = 36;
break L1;
break;
}
case 15:
{
HEAP32[$3 >> 2] = $1 + 2;
$$0172 = 35;
break L1;
break;
}
case 34:
{
HEAP32[$3 >> 2] = $1 + 2;
$$0172 = 37;
break L1;
break;
}
case 32:
case 36:
case 35:
case 11:
case 21:
case 10:
case 9:
{
HEAP32[$3 >> 2] = $70;
$$0172 = 24;
break L1;
break;
}
default:
{
HEAP32[$3 >> 2] = $70;
$$0172 = 0;
break L1;
}
}
break;
}
case 36:
{
HEAP32[$3 >> 2] = $1 + 1;
$$0172 = 21;
break L1;
break;
}
case 11:
{
HEAP32[$3 >> 2] = $1 + 1;
$$0172 = 17;
break L1;
break;
}
case 19:
{
$81 = $1 + 1 | 0;
if (($81 | 0) == ($2 | 0)) {
$$0172 = -1;
break L1;
}
switch (HEAP8[$5 + (HEAPU8[$81 >> 0] | 0) >> 0] | 0) {
case 29:
{
HEAP32[$3 >> 2] = $81;
$$0172 = 0;
break L1;
break;
}
case 24:
case 22:
{
$$sink$i = 1;
break;
}
case 5:
{
if (($2 - $81 | 0) < 2) {
$$0172 = -2;
break L1;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 340 >> 2] & 63]($0, $81) | 0)) {
HEAP32[$3 >> 2] = $81;
$$0172 = 0;
break L1;
} else $$sink$i = 2;
break;
}
case 6:
{
if (($2 - $81 | 0) < 3) {
$$0172 = -2;
break L1;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 344 >> 2] & 63]($0, $81) | 0)) {
HEAP32[$3 >> 2] = $81;
$$0172 = 0;
break L1;
} else $$sink$i = 3;
break;
}
case 7:
{
if (($2 - $81 | 0) < 4) {
$$0172 = -2;
break L1;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 348 >> 2] & 63]($0, $81) | 0)) {
HEAP32[$3 >> 2] = $81;
$$0172 = 0;
break L1;
} else $$sink$i = 4;
break;
}
default:
{
HEAP32[$3 >> 2] = $81;
$$0172 = 0;
break L1;
}
}
$87 = $81 + $$sink$i | 0;
if (($87 | 0) == ($2 | 0)) {
$$0172 = -20;
break L1;
}
$89 = $2;
$90 = $0 + 328 | 0;
$91 = $0 + 332 | 0;
$92 = $0 + 336 | 0;
$$06269$i = $87;
L69 : while (1) {
switch (HEAP8[$5 + (HEAPU8[$$06269$i >> 0] | 0) >> 0] | 0) {
case 29:
{
label = 66;
break L69;
break;
}
case 36:
case 30:
case 11:
case 32:
case 21:
case 10:
case 9:
{
label = 77;
break L69;
break;
}
case 27:
case 26:
case 25:
case 24:
case 22:
{
$$sink76$i = 1;
break;
}
case 5:
{
if (($89 - $$06269$i | 0) < 2) {
$$0172 = -2;
break L1;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$90 >> 2] & 63]($0, $$06269$i) | 0)) {
label = 69;
break L69;
} else $$sink76$i = 2;
break;
}
case 6:
{
if (($89 - $$06269$i | 0) < 3) {
$$0172 = -2;
break L1;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$91 >> 2] & 63]($0, $$06269$i) | 0)) {
label = 72;
break L69;
} else $$sink76$i = 3;
break;
}
case 7:
{
if (($89 - $$06269$i | 0) < 4) {
$$0172 = -2;
break L1;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$92 >> 2] & 63]($0, $$06269$i) | 0)) {
label = 75;
break L69;
} else $$sink76$i = 4;
break;
}
default:
{
label = 78;
break L69;
}
}
$139 = $$06269$i + $$sink76$i | 0;
if (($139 | 0) == ($2 | 0)) {
$$0172 = -20;
break L1;
} else $$06269$i = $139;
}
if ((label | 0) == 66) {
HEAP32[$3 >> 2] = $$06269$i;
$$0172 = 0;
break L1;
} else if ((label | 0) == 69) {
HEAP32[$3 >> 2] = $$06269$i;
$$0172 = 0;
break L1;
} else if ((label | 0) == 72) {
HEAP32[$3 >> 2] = $$06269$i;
$$0172 = 0;
break L1;
} else if ((label | 0) == 75) {
HEAP32[$3 >> 2] = $$06269$i;
$$0172 = 0;
break L1;
} else if ((label | 0) == 77) {
HEAP32[$3 >> 2] = $$06269$i;
$$0172 = 20;
break L1;
} else if ((label | 0) == 78) {
HEAP32[$3 >> 2] = $$06269$i;
$$0172 = 0;
break L1;
}
break;
}
case 5:
{
if (($2 - $1 | 0) < 2) {
$$0172 = -2;
break L1;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 340 >> 2] & 63]($0, $1) | 0)) if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 328 >> 2] & 63]($0, $1) | 0)) {
HEAP32[$3 >> 2] = $1;
$$0172 = 0;
break L1;
} else {
$$0$ph = 19;
$$sink = 2;
} else {
$$0$ph = 18;
$$sink = 2;
}
break;
}
case 6:
{
if (($2 - $1 | 0) < 3) {
$$0172 = -2;
break L1;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 344 >> 2] & 63]($0, $1) | 0)) if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 332 >> 2] & 63]($0, $1) | 0)) {
HEAP32[$3 >> 2] = $1;
$$0172 = 0;
break L1;
} else {
$$0$ph = 19;
$$sink = 3;
} else {
$$0$ph = 18;
$$sink = 3;
}
break;
}
case 7:
{
if (($2 - $1 | 0) < 4) {
$$0172 = -2;
break L1;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 348 >> 2] & 63]($0, $1) | 0)) if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 336 >> 2] & 63]($0, $1) | 0)) {
HEAP32[$3 >> 2] = $1;
$$0172 = 0;
break L1;
} else {
$$0$ph = 19;
$$sink = 4;
} else {
$$0$ph = 18;
$$sink = 4;
}
break;
}
case 24:
case 22:
{
$$0$ph = 18;
$$sink = 1;
break;
}
case 27:
case 26:
case 25:
{
$$0$ph = 19;
$$sink = 1;
break;
}
default:
{
HEAP32[$3 >> 2] = $1;
$$0172 = 0;
break L1;
}
} while (0);
if ((label | 0) == 3) {
$10 = $1 + 1 | 0;
L101 : do if (($10 | 0) != ($2 | 0)) {
$$0173206 = $1;
$48 = $10;
L102 : while (1) {
switch (HEAP8[$5 + (HEAPU8[$48 >> 0] | 0) >> 0] | 0) {
case 10:
case 21:
break;
case 9:
{
if (($$0173206 + 2 | 0) == ($2 | 0)) break L102;
break;
}
default:
break L102;
}
$52 = $48 + 1 | 0;
if (($52 | 0) == ($2 | 0)) break L101; else {
$$0173206$phi = $48;
$48 = $52;
$$0173206 = $$0173206$phi;
}
}
HEAP32[$3 >> 2] = $48;
$$0172 = 15;
break L1;
} while (0);
HEAP32[$3 >> 2] = $2;
$$0172 = 15;
break;
}
$149 = $1 + $$sink | 0;
L110 : do if (($149 | 0) != ($2 | 0)) {
$151 = $2;
$152 = $0 + 328 | 0;
$153 = $0 + 332 | 0;
$154 = $0 + 336 | 0;
$$1207 = $149;
L112 : while (1) {
switch (HEAP8[$5 + (HEAPU8[$$1207 >> 0] | 0) >> 0] | 0) {
case 29:
{
label = 96;
break L112;
break;
}
case 10:
case 9:
case 21:
case 30:
case 20:
case 36:
case 35:
case 32:
case 11:
{
label = 107;
break L112;
break;
}
case 34:
{
label = 108;
break L112;
break;
}
case 33:
{
label = 111;
break L112;
break;
}
case 15:
{
label = 114;
break L112;
break;
}
case 27:
case 26:
case 25:
case 24:
case 22:
{
$$sink210 = 1;
break;
}
case 5:
{
if (($151 - $$1207 | 0) < 2) {
$$0172 = -2;
break L1;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$152 >> 2] & 63]($0, $$1207) | 0)) {
label = 99;
break L112;
} else $$sink210 = 2;
break;
}
case 6:
{
if (($151 - $$1207 | 0) < 3) {
$$0172 = -2;
break L1;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$153 >> 2] & 63]($0, $$1207) | 0)) {
label = 102;
break L112;
} else $$sink210 = 3;
break;
}
case 7:
{
if (($151 - $$1207 | 0) < 4) {
$$0172 = -2;
break L1;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$154 >> 2] & 63]($0, $$1207) | 0)) {
label = 105;
break L112;
} else $$sink210 = 4;
break;
}
default:
{
label = 117;
break L112;
}
}
$205 = $$1207 + $$sink210 | 0;
if (($205 | 0) == ($2 | 0)) break L110; else $$1207 = $205;
}
if ((label | 0) == 96) {
HEAP32[$3 >> 2] = $$1207;
$$0172 = 0;
break L1;
} else if ((label | 0) == 99) {
HEAP32[$3 >> 2] = $$1207;
$$0172 = 0;
break L1;
} else if ((label | 0) == 102) {
HEAP32[$3 >> 2] = $$1207;
$$0172 = 0;
break L1;
} else if ((label | 0) == 105) {
HEAP32[$3 >> 2] = $$1207;
$$0172 = 0;
break L1;
} else if ((label | 0) == 107) {
HEAP32[$3 >> 2] = $$1207;
$$0172 = $$0$ph;
break L1;
} else if ((label | 0) == 108) if (($$0$ph | 0) == 19) {
HEAP32[$3 >> 2] = $$1207;
$$0172 = 0;
break L1;
} else {
HEAP32[$3 >> 2] = $$1207 + 1;
$$0172 = 32;
break L1;
} else if ((label | 0) == 111) if (($$0$ph | 0) == 19) {
HEAP32[$3 >> 2] = $$1207;
$$0172 = 0;
break L1;
} else {
HEAP32[$3 >> 2] = $$1207 + 1;
$$0172 = 31;
break L1;
} else if ((label | 0) == 114) if (($$0$ph | 0) == 19) {
HEAP32[$3 >> 2] = $$1207;
$$0172 = 0;
break L1;
} else {
HEAP32[$3 >> 2] = $$1207 + 1;
$$0172 = 30;
break L1;
} else if ((label | 0) == 117) {
HEAP32[$3 >> 2] = $$1207;
$$0172 = 0;
break L1;
}
} while (0);
$$0172 = 0 - $$0$ph | 0;
} while (0);
return $$0172 | 0;
}
function __ZN8IFS_spec17OctagonalCylinderEsPK6Vector($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0105135 = 0, $$0106133 = 0, $$0107132 = 0, $$0107132$phi = 0, $$0109131 = 0, $$0110$off0130 = 0, $$1 = 0, $$1103 = 0, $$pre$phi145Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $109 = 0, $11 = 0, $111 = 0, $113 = 0, $114 = 0, $116 = 0, $118 = 0, $120 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $131 = 0, $132 = 0, $134 = 0, $136 = 0, $138 = 0, $139 = 0, $141 = 0, $143 = 0, $145 = 0, $146 = 0, $147 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $33 = f0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $61 = 0, $63 = 0, $68 = 0, $7 = 0, $72 = 0, $75 = 0, $76 = 0, $78 = 0, $80 = 0, $82 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $90 = 0, $92 = 0, $97 = 0, $sext139 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer109 = 0, $vararg_buffer127 = 0, $vararg_buffer19 = 0, $vararg_buffer37 = 0, $vararg_buffer55 = 0, $vararg_buffer73 = 0, $vararg_buffer91 = 0, dest = 0, label = 0, sp = 0, stop = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 544 | 0;
$vararg_buffer127 = sp + 456 | 0;
$vararg_buffer109 = sp + 392 | 0;
$vararg_buffer91 = sp + 328 | 0;
$vararg_buffer73 = sp + 264 | 0;
$vararg_buffer55 = sp + 200 | 0;
$vararg_buffer37 = sp + 136 | 0;
$vararg_buffer19 = sp + 72 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$2 = sp + 520 | 0;
$4 = ($0 & 65535) << 18;
$5 = $4 >> 16;
$7 = __Znaj($5 >>> 0 > 357913941 ? -1 : $5 * 12 | 0) | 0;
L1 : do if ($5 | 0) {
$9 = $7 + ($5 * 12 | 0) | 0;
$10 = $7;
while (1) {
__THREW__ = 0;
invoke_vi(98, $10 | 0);
$11 = __THREW__;
__THREW__ = 0;
if ($11 & 1) break;
$10 = $10 + 12 | 0;
if (($10 | 0) == ($9 | 0)) break L1;
}
$21 = ___cxa_find_matching_catch_2() | 0;
$22 = tempRet0;
__ZdaPv($7);
$$1 = $21;
$$1103 = $22;
___resumeException($$1 | 0);
} while (0);
$15 = ($4 | 0) > 0;
if ($15) {
$24 = 0;
do {
$23 = $1 + ($24 * 12 | 0) | 0;
$25 = $7 + ($24 * 12 | 0) | 0;
if (!(HEAP8[64312] | 0)) if (___cxa_guard_acquire(64312) | 0) {
$33 = Math_fround(Math_fround(1.0) / Math_fround(+Math_cos(+Math_fround(Math_fround(HEAPF32[588]) * Math_fround(.25)))));
HEAPF32[16166] = $33;
}
$34 = $23 + 12 | 0;
__ZN6Vector11setMidPointERKS_S1_f($25, $23, $34, Math_fround(.5));
$35 = $25 + 12 | 0;
$36 = $23 + 24 | 0;
__ZN6Vector11setMidPointERKS_S1_f($35, $34, $36, Math_fround(.5));
$37 = $25 + 24 | 0;
$38 = $23 + 36 | 0;
__ZN6Vector11setMidPointERKS_S1_f($37, $36, $38, Math_fround(.5));
$39 = $25 + 36 | 0;
__ZN6Vector11setMidPointERKS_S1_f($39, $38, $23, Math_fround(.5));
__ZN6VectorC2Ev($2);
__ZN6Vector11setCentroidEiPKS_($2, 4, $23);
__ZN6Vector11setMidPointERKS_S1_f($25, $2, $25, Math_fround(HEAPF32[16166]));
__ZN6Vector11setMidPointERKS_S1_f($35, $2, $35, Math_fround(HEAPF32[16166]));
__ZN6Vector11setMidPointERKS_S1_f($37, $2, $37, Math_fround(HEAPF32[16166]));
__ZN6Vector11setMidPointERKS_S1_f($39, $2, $39, Math_fround(HEAPF32[16166]));
$24 = ($24 << 16) + 262144 >> 16;
} while (($24 | 0) < ($5 | 0));
}
$16 = __Znwj(16) | 0;
HEAP32[$16 >> 2] = 0;
HEAP32[$16 + 4 >> 2] = 0;
HEAP32[$16 + 8 >> 2] = 0;
HEAP32[$16 + 12 >> 2] = 0;
$17 = __Znwj(16) | 0;
__THREW__ = 0;
invoke_viii(80, $17 | 0, $4 >> 15 | 0, 0);
$19 = __THREW__;
__THREW__ = 0;
if ($19 & 1) {
$53 = ___cxa_find_matching_catch_2() | 0;
$54 = tempRet0;
__ZdlPv($17);
$$1 = $53;
$$1103 = $54;
___resumeException($$1 | 0);
}
HEAP32[$16 >> 2] = $17;
if ($15) {
$47 = $17 + 12 | 0;
$48 = $17 + 8 | 0;
$49 = $17 + 4 | 0;
$$0105135 = 0;
$56 = 0;
do {
$55 = $1 + ($56 * 12 | 0) | 0;
$57 = HEAP32[$47 >> 2] | 0;
if (($57 | 0) >= 0) {
if ((HEAP32[$48 >> 2] | 0) > ($57 | 0)) {
$$pre$phi145Z2D = $57 + 1 | 0;
label = 22;
} else {
$61 = HEAP32[$49 >> 2] | 0;
$63 = $57 + 1 | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($17, ($61 | 0) > ($57 | 0) ? $61 : $63 + ($57 >>> 1) | 0);
if ((HEAP32[$47 >> 2] | 0) <= ($57 | 0)) {
$$pre$phi145Z2D = $63;
label = 22;
}
}
if ((label | 0) == 22) {
label = 0;
HEAP32[$47 >> 2] = $$pre$phi145Z2D;
}
$68 = (HEAP32[$17 >> 2] | 0) + ($57 * 12 | 0) | 0;
HEAP32[$68 >> 2] = HEAP32[$55 >> 2];
HEAP32[$68 + 4 >> 2] = HEAP32[$55 + 4 >> 2];
HEAP32[$68 + 8 >> 2] = HEAP32[$55 + 8 >> 2];
}
$$0105135 = $$0105135 + 1 << 16 >> 16;
$56 = $$0105135 << 16 >> 16;
} while (($5 | 0) > ($56 | 0));
if ($15) {
$50 = $17 + 12 | 0;
$51 = $17 + 8 | 0;
$52 = $17 + 4 | 0;
$$0106133 = 0;
$85 = 0;
do {
$84 = $7 + ($85 * 12 | 0) | 0;
$86 = HEAP32[$50 >> 2] | 0;
if (($86 | 0) >= 0) {
if ((HEAP32[$51 >> 2] | 0) > ($86 | 0)) {
$$pre$phiZ2D = $86 + 1 | 0;
label = 33;
} else {
$90 = HEAP32[$52 >> 2] | 0;
$92 = $86 + 1 | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($17, ($90 | 0) > ($86 | 0) ? $90 : $92 + ($86 >>> 1) | 0);
if ((HEAP32[$50 >> 2] | 0) <= ($86 | 0)) {
$$pre$phiZ2D = $92;
label = 33;
}
}
if ((label | 0) == 33) {
label = 0;
HEAP32[$50 >> 2] = $$pre$phiZ2D;
}
$97 = (HEAP32[$17 >> 2] | 0) + ($86 * 12 | 0) | 0;
HEAP32[$97 >> 2] = HEAP32[$84 >> 2];
HEAP32[$97 + 4 >> 2] = HEAP32[$84 + 4 >> 2];
HEAP32[$97 + 8 >> 2] = HEAP32[$84 + 8 >> 2];
}
$$0106133 = $$0106133 + 1 << 16 >> 16;
$85 = $$0106133 << 16 >> 16;
} while (($5 | 0) > ($85 | 0));
}
}
$72 = __Znwj(16) | 0;
HEAP32[$72 + 4 >> 2] = 10;
HEAP32[$72 + 12 >> 2] = 0;
$75 = $72 + 8 | 0;
HEAP32[$75 >> 2] = 12;
$76 = _malloc(24) | 0;
HEAP32[$72 >> 2] = $76;
if (!$76) {
__THREW__ = 0;
HEAP32[$vararg_buffer >> 2] = 12;
invoke_vii(115, 20821, $vararg_buffer | 0);
$78 = __THREW__;
__THREW__ = 0;
if (!($78 & 1)) {
HEAP32[$75 >> 2] = 0;
$80 = ___cxa_allocate_exception(4) | 0;
HEAP32[$80 >> 2] = 1;
__THREW__ = 0;
invoke_viii(75, $80 | 0, 32, 0);
__THREW__ = 0;
}
$146 = ___cxa_find_matching_catch_2() | 0;
$147 = tempRet0;
__ZdlPv($72);
$$1 = $146;
$$1103 = $147;
___resumeException($$1 | 0);
}
$82 = $16 + 4 | 0;
dest = $76;
stop = dest + 24 | 0;
do {
HEAP16[dest >> 1] = 65535;
dest = dest + 2 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[$82 >> 2] = $72;
if (($4 | 0) > 262144) {
$$0107132 = 0;
$$0109131 = 4;
$$0110$off0130 = 1;
$104 = 4;
} else {
__ZdaPv($7);
STACKTOP = sp;
return $16 | 0;
}
while (1) {
$sext139 = $$0107132 << 16;
$101 = $sext139 >> 16;
$102 = $101 + $5 | 0;
$103 = $104 + $5 | 0;
$105 = $102 << 16 >> 16;
$106 = $103 << 16 >> 16;
$107 = $sext139 + 65536 >> 16;
$109 = ($104 << 16) + 65536 >> 16;
if ($$0110$off0130) {
HEAP32[$vararg_buffer73 >> 2] = $101;
HEAP32[$vararg_buffer73 + 4 >> 2] = $105;
HEAP32[$vararg_buffer73 + 8 >> 2] = $106;
HEAP32[$vararg_buffer73 + 12 >> 2] = -1;
HEAP32[$vararg_buffer73 + 16 >> 2] = $101;
HEAP32[$vararg_buffer73 + 20 >> 2] = $106;
HEAP32[$vararg_buffer73 + 24 >> 2] = $104;
HEAP32[$vararg_buffer73 + 28 >> 2] = -1;
HEAP32[$vararg_buffer73 + 32 >> 2] = $105;
HEAP32[$vararg_buffer73 + 36 >> 2] = $107;
HEAP32[$vararg_buffer73 + 40 >> 2] = $106;
HEAP32[$vararg_buffer73 + 44 >> 2] = -1;
HEAP32[$vararg_buffer73 + 48 >> 2] = $107;
HEAP32[$vararg_buffer73 + 52 >> 2] = $109;
HEAP32[$vararg_buffer73 + 56 >> 2] = $106;
HEAP32[$vararg_buffer73 + 60 >> 2] = -1;
__ZN12DynamicArrayIsLsn1EE15appendElementsXEiz($72, 16, $vararg_buffer73);
$129 = ($102 << 16) + 65536 >> 16;
$131 = ($103 << 16) + 65536 >> 16;
$132 = $sext139 + 131072 >> 16;
$134 = ($104 << 16) + 131072 >> 16;
HEAP32[$vararg_buffer91 >> 2] = $107;
HEAP32[$vararg_buffer91 + 4 >> 2] = $129;
HEAP32[$vararg_buffer91 + 8 >> 2] = $131;
HEAP32[$vararg_buffer91 + 12 >> 2] = -1;
HEAP32[$vararg_buffer91 + 16 >> 2] = $107;
HEAP32[$vararg_buffer91 + 20 >> 2] = $131;
HEAP32[$vararg_buffer91 + 24 >> 2] = $109;
HEAP32[$vararg_buffer91 + 28 >> 2] = -1;
HEAP32[$vararg_buffer91 + 32 >> 2] = $129;
HEAP32[$vararg_buffer91 + 36 >> 2] = $132;
HEAP32[$vararg_buffer91 + 40 >> 2] = $131;
HEAP32[$vararg_buffer91 + 44 >> 2] = -1;
HEAP32[$vararg_buffer91 + 48 >> 2] = $132;
HEAP32[$vararg_buffer91 + 52 >> 2] = $134;
HEAP32[$vararg_buffer91 + 56 >> 2] = $131;
HEAP32[$vararg_buffer91 + 60 >> 2] = -1;
__ZN12DynamicArrayIsLsn1EE15appendElementsXEiz($72, 16, $vararg_buffer91);
$136 = ($102 << 16) + 131072 >> 16;
$138 = ($103 << 16) + 131072 >> 16;
$139 = $sext139 + 196608 >> 16;
$141 = ($104 << 16) + 196608 >> 16;
HEAP32[$vararg_buffer109 >> 2] = $132;
HEAP32[$vararg_buffer109 + 4 >> 2] = $136;
HEAP32[$vararg_buffer109 + 8 >> 2] = $138;
HEAP32[$vararg_buffer109 + 12 >> 2] = -1;
HEAP32[$vararg_buffer109 + 16 >> 2] = $132;
HEAP32[$vararg_buffer109 + 20 >> 2] = $138;
HEAP32[$vararg_buffer109 + 24 >> 2] = $134;
HEAP32[$vararg_buffer109 + 28 >> 2] = -1;
HEAP32[$vararg_buffer109 + 32 >> 2] = $136;
HEAP32[$vararg_buffer109 + 36 >> 2] = $139;
HEAP32[$vararg_buffer109 + 40 >> 2] = $138;
HEAP32[$vararg_buffer109 + 44 >> 2] = -1;
HEAP32[$vararg_buffer109 + 48 >> 2] = $139;
HEAP32[$vararg_buffer109 + 52 >> 2] = $141;
HEAP32[$vararg_buffer109 + 56 >> 2] = $138;
HEAP32[$vararg_buffer109 + 60 >> 2] = -1;
__ZN12DynamicArrayIsLsn1EE15appendElementsXEiz($72, 16, $vararg_buffer109);
$143 = ($102 << 16) + 196608 >> 16;
$145 = ($103 << 16) + 196608 >> 16;
HEAP32[$vararg_buffer127 >> 2] = $139;
HEAP32[$vararg_buffer127 + 4 >> 2] = $143;
HEAP32[$vararg_buffer127 + 8 >> 2] = $145;
HEAP32[$vararg_buffer127 + 12 >> 2] = -1;
HEAP32[$vararg_buffer127 + 16 >> 2] = $139;
HEAP32[$vararg_buffer127 + 20 >> 2] = $145;
HEAP32[$vararg_buffer127 + 24 >> 2] = $141;
HEAP32[$vararg_buffer127 + 28 >> 2] = -1;
HEAP32[$vararg_buffer127 + 32 >> 2] = $143;
HEAP32[$vararg_buffer127 + 36 >> 2] = $101;
HEAP32[$vararg_buffer127 + 40 >> 2] = $145;
HEAP32[$vararg_buffer127 + 44 >> 2] = -1;
HEAP32[$vararg_buffer127 + 48 >> 2] = $101;
HEAP32[$vararg_buffer127 + 52 >> 2] = $104;
HEAP32[$vararg_buffer127 + 56 >> 2] = $145;
HEAP32[$vararg_buffer127 + 60 >> 2] = -1;
__ZN12DynamicArrayIsLsn1EE15appendElementsXEiz($72, 16, $vararg_buffer127);
} else {
HEAP32[$vararg_buffer1 >> 2] = $101;
HEAP32[$vararg_buffer1 + 4 >> 2] = $105;
HEAP32[$vararg_buffer1 + 8 >> 2] = $104;
HEAP32[$vararg_buffer1 + 12 >> 2] = -1;
HEAP32[$vararg_buffer1 + 16 >> 2] = $105;
HEAP32[$vararg_buffer1 + 20 >> 2] = $106;
HEAP32[$vararg_buffer1 + 24 >> 2] = $104;
HEAP32[$vararg_buffer1 + 28 >> 2] = -1;
HEAP32[$vararg_buffer1 + 32 >> 2] = $105;
HEAP32[$vararg_buffer1 + 36 >> 2] = $107;
HEAP32[$vararg_buffer1 + 40 >> 2] = $109;
HEAP32[$vararg_buffer1 + 44 >> 2] = -1;
HEAP32[$vararg_buffer1 + 48 >> 2] = $105;
HEAP32[$vararg_buffer1 + 52 >> 2] = $109;
HEAP32[$vararg_buffer1 + 56 >> 2] = $106;
HEAP32[$vararg_buffer1 + 60 >> 2] = -1;
__ZN12DynamicArrayIsLsn1EE15appendElementsXEiz($72, 16, $vararg_buffer1);
$111 = ($102 << 16) + 65536 >> 16;
$113 = ($103 << 16) + 65536 >> 16;
$114 = $sext139 + 131072 >> 16;
$116 = ($104 << 16) + 131072 >> 16;
HEAP32[$vararg_buffer19 >> 2] = $107;
HEAP32[$vararg_buffer19 + 4 >> 2] = $111;
HEAP32[$vararg_buffer19 + 8 >> 2] = $109;
HEAP32[$vararg_buffer19 + 12 >> 2] = -1;
HEAP32[$vararg_buffer19 + 16 >> 2] = $111;
HEAP32[$vararg_buffer19 + 20 >> 2] = $113;
HEAP32[$vararg_buffer19 + 24 >> 2] = $109;
HEAP32[$vararg_buffer19 + 28 >> 2] = -1;
HEAP32[$vararg_buffer19 + 32 >> 2] = $111;
HEAP32[$vararg_buffer19 + 36 >> 2] = $114;
HEAP32[$vararg_buffer19 + 40 >> 2] = $116;
HEAP32[$vararg_buffer19 + 44 >> 2] = -1;
HEAP32[$vararg_buffer19 + 48 >> 2] = $111;
HEAP32[$vararg_buffer19 + 52 >> 2] = $116;
HEAP32[$vararg_buffer19 + 56 >> 2] = $113;
HEAP32[$vararg_buffer19 + 60 >> 2] = -1;
__ZN12DynamicArrayIsLsn1EE15appendElementsXEiz($72, 16, $vararg_buffer19);
$118 = ($102 << 16) + 131072 >> 16;
$120 = ($103 << 16) + 131072 >> 16;
$121 = $sext139 + 196608 >> 16;
$123 = ($104 << 16) + 196608 >> 16;
HEAP32[$vararg_buffer37 >> 2] = $114;
HEAP32[$vararg_buffer37 + 4 >> 2] = $118;
HEAP32[$vararg_buffer37 + 8 >> 2] = $116;
HEAP32[$vararg_buffer37 + 12 >> 2] = -1;
HEAP32[$vararg_buffer37 + 16 >> 2] = $118;
HEAP32[$vararg_buffer37 + 20 >> 2] = $120;
HEAP32[$vararg_buffer37 + 24 >> 2] = $116;
HEAP32[$vararg_buffer37 + 28 >> 2] = -1;
HEAP32[$vararg_buffer37 + 32 >> 2] = $118;
HEAP32[$vararg_buffer37 + 36 >> 2] = $121;
HEAP32[$vararg_buffer37 + 40 >> 2] = $123;
HEAP32[$vararg_buffer37 + 44 >> 2] = -1;
HEAP32[$vararg_buffer37 + 48 >> 2] = $118;
HEAP32[$vararg_buffer37 + 52 >> 2] = $123;
HEAP32[$vararg_buffer37 + 56 >> 2] = $120;
HEAP32[$vararg_buffer37 + 60 >> 2] = -1;
__ZN12DynamicArrayIsLsn1EE15appendElementsXEiz($72, 16, $vararg_buffer37);
$125 = ($102 << 16) + 196608 >> 16;
$127 = ($103 << 16) + 196608 >> 16;
HEAP32[$vararg_buffer55 >> 2] = $121;
HEAP32[$vararg_buffer55 + 4 >> 2] = $125;
HEAP32[$vararg_buffer55 + 8 >> 2] = $123;
HEAP32[$vararg_buffer55 + 12 >> 2] = -1;
HEAP32[$vararg_buffer55 + 16 >> 2] = $125;
HEAP32[$vararg_buffer55 + 20 >> 2] = $127;
HEAP32[$vararg_buffer55 + 24 >> 2] = $123;
HEAP32[$vararg_buffer55 + 28 >> 2] = -1;
HEAP32[$vararg_buffer55 + 32 >> 2] = $125;
HEAP32[$vararg_buffer55 + 36 >> 2] = $101;
HEAP32[$vararg_buffer55 + 40 >> 2] = $104;
HEAP32[$vararg_buffer55 + 44 >> 2] = -1;
HEAP32[$vararg_buffer55 + 48 >> 2] = $125;
HEAP32[$vararg_buffer55 + 52 >> 2] = $104;
HEAP32[$vararg_buffer55 + 56 >> 2] = $127;
HEAP32[$vararg_buffer55 + 60 >> 2] = -1;
__ZN12DynamicArrayIsLsn1EE15appendElementsXEiz($72, 16, $vararg_buffer55);
}
$149 = $104 + 4 | 0;
$104 = $149 << 16 >> 16;
if (($5 | 0) <= ($104 | 0)) break; else {
$$0107132$phi = $$0109131;
$$0109131 = $149;
$$0110$off0130 = $$0110$off0130 ^ 1;
$$0107132 = $$0107132$phi;
}
}
__ZdaPv($7);
STACKTOP = sp;
return $16 | 0;
}
function __Z17SiteIDFromAttribsPK7HashAnyIPKcS1_E9Mirroringbbb($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
var $$0 = 0, $$012$i$i = 0, $$012$i$i$i$i = 0, $$012$i$i$i$i113 = 0, $$012$i$i$i$i129 = 0, $$012$i$i103 = 0, $$012$i$i122 = 0, $$012$i$i137 = 0, $$012$i$i145 = 0, $$012$i$i82 = 0, $$012$i$i89 = 0, $$012$i$i96 = 0, $$01215$i$i = 0, $$01215$i$i$i$i = 0, $$01215$i$i$i$i110 = 0, $$01215$i$i$i$i126 = 0, $$01215$i$i100 = 0, $$01215$i$i119 = 0, $$01215$i$i134 = 0, $$01215$i$i142 = 0, $$01215$i$i79 = 0, $$01215$i$i86 = 0, $$01215$i$i93 = 0, $$01216$i$i = 0, $$01216$i$i$i$i = 0, $$01216$i$i$i$i111 = 0, $$01216$i$i$i$i127 = 0, $$01216$i$i101 = 0, $$01216$i$i120 = 0, $$01216$i$i135 = 0, $$01216$i$i143 = 0, $$01216$i$i80 = 0, $$01216$i$i87 = 0, $$01216$i$i94 = 0, $$072 = 0, $$073 = 0, $$1$i$i = 0, $$1$i$i133 = 0, $$174 = 0, $$2 = 0, $$275 = 0, $$sink$i$i = 0, $$sink$i$i$i$i = 0, $$sink$i$i$i$i115 = 0, $$sink$i$i$i$i131 = 0, $$sink$i$i105 = 0, $$sink$i$i124 = 0, $$sink$i$i139 = 0, $$sink$i$i147 = 0, $$sink$i$i84 = 0, $$sink$i$i91 = 0, $$sink$i$i98 = 0, $105 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $121 = 0, $127 = 0, $130 = 0, $131 = 0, $143 = 0, $150 = 0, $152 = 0, $153 = 0, $165 = 0, $166 = 0, $170 = 0, $171 = 0, $183 = 0, $185 = 0, $187 = 0, $188 = 0, $200 = 0, $203 = 0, $205 = 0, $206 = 0, $218 = 0, $221 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $41 = 0, $42 = 0, $46 = 0, $48 = 0, $50 = 0, $51 = 0, $6 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $7 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $83 = 0, $9 = 0, $95 = 0, $96 = 0, $tmpcast76$byval_copy = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 80 | 0;
$tmpcast76$byval_copy = sp + 64 | 0;
$vararg_buffer21 = sp + 56 | 0;
$vararg_buffer18 = sp + 48 | 0;
$vararg_buffer15 = sp + 40 | 0;
$vararg_buffer12 = sp + 32 | 0;
$vararg_buffer9 = sp + 24 | 0;
$vararg_buffer5 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$6 = sp + 62 | 0;
$7 = sp + 60 | 0;
$8 = $3 ? 52716 : 51353;
$9 = $1 + 4 | 0;
$11 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($8, HEAP32[$9 >> 2] | 0) | 0;
$12 = HEAP32[$1 >> 2] | 0;
L1 : do if ((HEAP16[$12 + ($11 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i = HEAP32[$12 + ($11 << 3) >> 2] | 0;
if (!$$01215$i$i) label = 6; else {
$$01216$i$i = $$01215$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($8, HEAP32[$$01216$i$i >> 2] | 0) | 0) break;
$$012$i$i = HEAP32[$$01216$i$i + 8 >> 2] | 0;
if (!$$012$i$i) {
label = 6;
break L1;
} else $$01216$i$i = $$012$i$i;
}
$$sink$i$i = $$01216$i$i + 4 | 0;
}
} else label = 6; while (0);
if ((label | 0) == 6) $$sink$i$i = $1 + 20 | 0;
$24 = HEAP32[$$sink$i$i >> 2] | 0;
$25 = $3 ? 53536 : 53550;
$27 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($25, HEAP32[$9 >> 2] | 0) | 0;
$28 = HEAP32[$1 >> 2] | 0;
L10 : do if ((HEAP16[$28 + ($27 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i79 = HEAP32[$28 + ($27 << 3) >> 2] | 0;
if (!$$01215$i$i79) label = 12; else {
$$01216$i$i80 = $$01215$i$i79;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($25, HEAP32[$$01216$i$i80 >> 2] | 0) | 0) break;
$$012$i$i82 = HEAP32[$$01216$i$i80 + 8 >> 2] | 0;
if (!$$012$i$i82) {
label = 12;
break L10;
} else $$01216$i$i80 = $$012$i$i82;
}
$$sink$i$i84 = $$01216$i$i80 + 4 | 0;
}
} else label = 12; while (0);
if ((label | 0) == 12) $$sink$i$i84 = $1 + 20 | 0;
$41 = __Z10MakeDigitsPKc(HEAP32[$$sink$i$i84 >> 2] | 0) | 0;
$42 = ($24 | 0) == 0;
if (!($41 << 16 >> 16 != 0 | $42 ^ 1)) {
HEAP32[$0 >> 2] = HEAP32[16607];
STACKTOP = sp;
return;
}
if ($42) $$1$i$i = 0; else {
$46 = __ZNK21InvertibleStringArray14indexFromValueEPKc(HEAP32[17192] | 0, $24) | 0;
if (($46 | 0) == -1) {
HEAP32[$vararg_buffer >> 2] = $24;
__Z7eprintfPKcz(53557, $vararg_buffer);
$$1$i$i = 0;
} else $$1$i$i = $46;
}
$48 = $3 ? 52744 : 52677;
$50 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($48, HEAP32[$9 >> 2] | 0) | 0;
$51 = HEAP32[$1 >> 2] | 0;
L27 : do if ((HEAP16[$51 + ($50 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i86 = HEAP32[$51 + ($50 << 3) >> 2] | 0;
if (!$$01215$i$i86) label = 23; else {
$$01216$i$i87 = $$01215$i$i86;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($48, HEAP32[$$01216$i$i87 >> 2] | 0) | 0) break;
$$012$i$i89 = HEAP32[$$01216$i$i87 + 8 >> 2] | 0;
if (!$$012$i$i89) {
label = 23;
break L27;
} else $$01216$i$i87 = $$012$i$i89;
}
$$sink$i$i91 = $$01216$i$i87 + 4 | 0;
}
} else label = 23; while (0);
if ((label | 0) == 23) $$sink$i$i91 = $1 + 20 | 0;
$63 = HEAP32[$$sink$i$i91 >> 2] | 0;
$64 = $3 ? 52760 : 52686;
$66 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($64, HEAP32[$9 >> 2] | 0) | 0;
$67 = HEAP32[$1 >> 2] | 0;
L36 : do if ((HEAP16[$67 + ($66 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i93 = HEAP32[$67 + ($66 << 3) >> 2] | 0;
if (!$$01215$i$i93) label = 29; else {
$$01216$i$i94 = $$01215$i$i93;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($64, HEAP32[$$01216$i$i94 >> 2] | 0) | 0) break;
$$012$i$i96 = HEAP32[$$01216$i$i94 + 8 >> 2] | 0;
if (!$$012$i$i96) {
label = 29;
break L36;
} else $$01216$i$i94 = $$012$i$i96;
}
$$sink$i$i98 = $$01216$i$i94 + 4 | 0;
}
} else label = 29; while (0);
if ((label | 0) == 29) $$sink$i$i98 = $1 + 20 | 0;
$79 = HEAP32[$$sink$i$i98 >> 2] | 0;
$80 = $3 ? 52732 : 52031;
$82 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($80, HEAP32[$9 >> 2] | 0) | 0;
$83 = HEAP32[$1 >> 2] | 0;
L45 : do if ((HEAP16[$83 + ($82 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i100 = HEAP32[$83 + ($82 << 3) >> 2] | 0;
if (!$$01215$i$i100) label = 35; else {
$$01216$i$i101 = $$01215$i$i100;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($80, HEAP32[$$01216$i$i101 >> 2] | 0) | 0) break;
$$012$i$i103 = HEAP32[$$01216$i$i101 + 8 >> 2] | 0;
if (!$$012$i$i103) {
label = 35;
break L45;
} else $$01216$i$i101 = $$012$i$i103;
}
$$sink$i$i105 = $$01216$i$i101 + 4 | 0;
}
} else label = 35; while (0);
if ((label | 0) == 35) $$sink$i$i105 = $1 + 20 | 0;
$95 = HEAP32[$$sink$i$i105 >> 2] | 0;
$96 = ($95 | 0) != 0;
if ($96) {
if (($63 | 0) != 0 & 1 != 0) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer1 >> 2] = $95;
HEAP32[$vararg_buffer1 + 4 >> 2] = $63;
__Z7eprintfPKcz(53610, $vararg_buffer1);
}
if (($79 | 0) != 0 & 1 != 0) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer5 >> 2] = $95;
HEAP32[$vararg_buffer5 + 4 >> 2] = $79;
__Z7eprintfPKcz(53675, $vararg_buffer5);
}
}
if (!$63) $$072 = 0; else {
HEAP16[$6 >> 1] = HEAP16[$2 >> 1] | 0;
HEAP8[$tmpcast76$byval_copy >> 0] = HEAP8[$6 >> 0] | 0;
HEAP8[$tmpcast76$byval_copy + 1 >> 0] = HEAP8[$6 + 1 >> 0] | 0;
$$072 = __ZN5SiGML15convertBodySideEPKc9Mirroringb($63, $tmpcast76$byval_copy, $5) | 0;
}
if (!$79) $$073 = 0; else {
$105 = $4 ? HEAP32[17194] | 0 : HEAP32[17195] | 0;
$108 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($79, HEAP32[$105 + 4 >> 2] | 0) | 0;
$109 = HEAP32[$105 >> 2] | 0;
L66 : do if ((HEAP16[$109 + ($108 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i$i = HEAP32[$109 + ($108 << 3) >> 2] | 0;
if (!$$01215$i$i$i$i) label = 49; else {
$$01216$i$i$i$i = $$01215$i$i$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($79, HEAP32[$$01216$i$i$i$i >> 2] | 0) | 0) break;
$$012$i$i$i$i = HEAP32[$$01216$i$i$i$i + 8 >> 2] | 0;
if (!$$012$i$i$i$i) {
label = 49;
break L66;
} else $$01216$i$i$i$i = $$012$i$i$i$i;
}
$$sink$i$i$i$i = $$01216$i$i$i$i + 4 | 0;
}
} else label = 49; while (0);
if ((label | 0) == 49) $$sink$i$i$i$i = $105 + 20 | 0;
$121 = HEAP32[$$sink$i$i$i$i >> 2] | 0;
if (($121 | 0) == -1) {
HEAP32[$vararg_buffer9 >> 2] = $79;
__Z7eprintfPKcz(53557, $vararg_buffer9);
$$073 = 0;
} else $$073 = $121;
}
do if ($41 << 16 >> 16 == 0 & (($$1$i$i & -4 | 0) != 12 & ($$1$i$i + -1 | 0) >>> 0 > 10)) if ($96) {
HEAP16[$7 >> 1] = HEAP16[$2 >> 1] | 0;
HEAP8[$tmpcast76$byval_copy >> 0] = HEAP8[$7 >> 0] | 0;
HEAP8[$tmpcast76$byval_copy + 1 >> 0] = HEAP8[$7 + 1 >> 0] | 0;
$$2 = __ZN5SiGML15convertBodySideEPKc9Mirroringb($95, $tmpcast76$byval_copy, $5) | 0;
$$275 = $$073;
} else {
$$2 = $$072;
$$275 = $$073;
} else {
if ($96) {
$127 = $4 ? HEAP32[17194] | 0 : HEAP32[17195] | 0;
$130 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($95, HEAP32[$127 + 4 >> 2] | 0) | 0;
$131 = HEAP32[$127 >> 2] | 0;
L83 : do if ((HEAP16[$131 + ($130 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i$i110 = HEAP32[$131 + ($130 << 3) >> 2] | 0;
if (!$$01215$i$i$i$i110) label = 59; else {
$$01216$i$i$i$i111 = $$01215$i$i$i$i110;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($95, HEAP32[$$01216$i$i$i$i111 >> 2] | 0) | 0) break;
$$012$i$i$i$i113 = HEAP32[$$01216$i$i$i$i111 + 8 >> 2] | 0;
if (!$$012$i$i$i$i113) {
label = 59;
break L83;
} else $$01216$i$i$i$i111 = $$012$i$i$i$i113;
}
$$sink$i$i$i$i115 = $$01216$i$i$i$i111 + 4 | 0;
}
} else label = 59; while (0);
if ((label | 0) == 59) $$sink$i$i$i$i115 = $127 + 20 | 0;
$143 = HEAP32[$$sink$i$i$i$i115 >> 2] | 0;
if (($143 | 0) == -1) {
HEAP32[$vararg_buffer12 >> 2] = $95;
__Z7eprintfPKcz(53557, $vararg_buffer12);
$$174 = 0;
} else $$174 = $143;
} else $$174 = $$073;
if (!$$072) if ($4) {
$$2 = $5 ? 1 : 2;
$$275 = $$174;
break;
} else {
$$2 = $5 ? 2 : 1;
$$275 = $$174;
break;
} else {
$$2 = $$072;
$$275 = $$174;
}
} while (0);
$150 = $3 ? 53745 : 52700;
$152 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($150, HEAP32[$9 >> 2] | 0) | 0;
$153 = HEAP32[$1 >> 2] | 0;
L99 : do if ((HEAP16[$153 + ($152 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i119 = HEAP32[$153 + ($152 << 3) >> 2] | 0;
if (!$$01215$i$i119) label = 73; else {
$$01216$i$i120 = $$01215$i$i119;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($150, HEAP32[$$01216$i$i120 >> 2] | 0) | 0) break;
$$012$i$i122 = HEAP32[$$01216$i$i120 + 8 >> 2] | 0;
if (!$$012$i$i122) {
label = 73;
break L99;
} else $$01216$i$i120 = $$012$i$i122;
}
$$sink$i$i124 = $$01216$i$i120 + 4 | 0;
}
} else label = 73; while (0);
if ((label | 0) == 73) $$sink$i$i124 = $1 + 20 | 0;
$165 = HEAP32[$$sink$i$i124 >> 2] | 0;
$166 = HEAP32[17198] | 0;
if (!$165) $$1$i$i133 = 0; else {
$170 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($165, HEAP32[$166 + 4 >> 2] | 0) | 0;
$171 = HEAP32[$166 >> 2] | 0;
L110 : do if ((HEAP16[$171 + ($170 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i$i126 = HEAP32[$171 + ($170 << 3) >> 2] | 0;
if (!$$01215$i$i$i$i126) label = 80; else {
$$01216$i$i$i$i127 = $$01215$i$i$i$i126;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($165, HEAP32[$$01216$i$i$i$i127 >> 2] | 0) | 0) break;
$$012$i$i$i$i129 = HEAP32[$$01216$i$i$i$i127 + 8 >> 2] | 0;
if (!$$012$i$i$i$i129) {
label = 80;
break L110;
} else $$01216$i$i$i$i127 = $$012$i$i$i$i129;
}
$$sink$i$i$i$i131 = $$01216$i$i$i$i127 + 4 | 0;
}
} else label = 80; while (0);
if ((label | 0) == 80) $$sink$i$i$i$i131 = $166 + 20 | 0;
$183 = HEAP32[$$sink$i$i$i$i131 >> 2] | 0;
if (($183 | 0) == -1) {
HEAP32[$vararg_buffer15 >> 2] = $165;
__Z7eprintfPKcz(53557, $vararg_buffer15);
$$1$i$i133 = 0;
} else $$1$i$i133 = $183;
}
$185 = ($$1$i$i133 | 0) == 1;
L121 : do if ($3) {
$187 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(52819, HEAP32[$9 >> 2] | 0) | 0;
$188 = HEAP32[$1 >> 2] | 0;
L123 : do if ((HEAP16[$188 + ($187 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i134 = HEAP32[$188 + ($187 << 3) >> 2] | 0;
if (!$$01215$i$i134) label = 89; else {
$$01216$i$i135 = $$01215$i$i134;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(52819, HEAP32[$$01216$i$i135 >> 2] | 0) | 0) break;
$$012$i$i137 = HEAP32[$$01216$i$i135 + 8 >> 2] | 0;
if (!$$012$i$i137) {
label = 89;
break L123;
} else $$01216$i$i135 = $$012$i$i137;
}
$$sink$i$i139 = $$01216$i$i135 + 4 | 0;
}
} else label = 89; while (0);
if ((label | 0) == 89) $$sink$i$i139 = $1 + 20 | 0;
$200 = HEAP32[$$sink$i$i139 >> 2] | 0;
if (!$200) label = 93; else {
$203 = __ZNK21InvertibleStringArray14indexFromValueEPKc(HEAP32[17197] | 0, $200) | 0;
switch ($203 | 0) {
case 0:
{
label = 93;
break L121;
break;
}
case -1:
break;
default:
{
$$0 = $203;
break L121;
}
}
HEAP32[$vararg_buffer18 >> 2] = $200;
__Z7eprintfPKcz(53557, $vararg_buffer18);
label = 93;
}
} else label = 93; while (0);
if ((label | 0) == 93) {
$205 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(52811, HEAP32[$9 >> 2] | 0) | 0;
$206 = HEAP32[$1 >> 2] | 0;
L136 : do if ((HEAP16[$206 + ($205 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i142 = HEAP32[$206 + ($205 << 3) >> 2] | 0;
if (!$$01215$i$i142) label = 98; else {
$$01216$i$i143 = $$01215$i$i142;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(52811, HEAP32[$$01216$i$i143 >> 2] | 0) | 0) break;
$$012$i$i145 = HEAP32[$$01216$i$i143 + 8 >> 2] | 0;
if (!$$012$i$i145) {
label = 98;
break L136;
} else $$01216$i$i143 = $$012$i$i145;
}
$$sink$i$i147 = $$01216$i$i143 + 4 | 0;
}
} else label = 98; while (0);
if ((label | 0) == 98) $$sink$i$i147 = $1 + 20 | 0;
$218 = HEAP32[$$sink$i$i147 >> 2] | 0;
if (!$218) $$0 = 0; else {
$221 = __ZNK21InvertibleStringArray14indexFromValueEPKc(HEAP32[17197] | 0, $218) | 0;
if (($221 | 0) == -1) {
HEAP32[$vararg_buffer21 >> 2] = $218;
__Z7eprintfPKcz(53557, $vararg_buffer21);
$$0 = 0;
} else $$0 = $221;
}
}
HEAP32[$0 >> 2] = $$1$i$i & 255 | ($41 & 65535) << 15 & 1015808 | $$275 << 12 & 28672 | $$2 << 8 & 3840 | ($185 & 1) << 23 | $$0 << 20 & 7340032;
STACKTOP = sp;
return;
}
function __ZN16DirectedMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$pre$phiZ2D = 0, $$sroa$0$0$extract$trunc = 0, $$sroa$060$0$extract$trunc = 0, $$sroa$062$0$extract$trunc = 0, $$sroa$064$0$extract$trunc = 0, $$sroa$066$0$$sroa_idx = 0, $$sroa$066$0$$sroa_idx68 = 0, $$sroa$12$0$$sroa_idx77 = 0, $$sroa$12$0$$sroa_idx78 = 0, $$sroa$8$0$$sroa_idx71 = 0, $$sroa$8$0$$sroa_idx72 = 0, $105 = 0.0, $110 = 0, $111 = 0, $114 = 0, $118 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $135 = f0, $136 = 0, $138 = 0, $140 = f0, $142 = 0, $144 = f0, $145 = 0, $146 = 0, $148 = f0, $149 = 0, $150 = 0, $152 = f0, $153 = 0, $154 = 0, $156 = f0, $157 = 0, $159 = f0, $160 = 0, $162 = f0, $163 = 0, $165 = f0, $169 = f0, $171 = 0, $173 = f0, $175 = 0, $177 = f0, $179 = 0, $18 = f0, $188 = 0, $189 = 0, $191 = 0, $192 = 0, $195 = f0, $196 = 0, $198 = 0, $200 = f0, $202 = 0, $204 = f0, $205 = 0, $206 = 0, $208 = f0, $209 = 0, $210 = 0, $212 = f0, $213 = 0, $214 = 0, $216 = f0, $217 = 0, $219 = f0, $22 = f0, $220 = 0, $222 = f0, $223 = 0, $225 = f0, $229 = f0, $231 = 0, $233 = f0, $235 = 0, $237 = f0, $24 = 0, $245 = 0.0, $248 = 0, $249 = 0, $26 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $42 = 0, $45 = 0.0, $47 = 0, $50 = 0.0, $52 = 0.0, $53 = 0, $56 = 0.0, $58 = 0.0, $59 = 0, $60 = f0, $64 = f0, $66 = f0, $69 = f0, $76 = 0.0, $87 = 0.0, $88 = f0, $90 = 0, $92 = f0, $93 = f0, $94 = f0, $97 = f0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer24 = 0, $vararg_buffer29 = 0, $vararg_buffer37 = 0, $vararg_buffer42 = 0, $vararg_buffer5 = 0, $vararg_buffer50 = 0, dest = 0, sp = 0, src = 0, stop = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 288 | 0;
$vararg_buffer50 = sp + 256 | 0;
$vararg_buffer42 = sp + 208 | 0;
$vararg_buffer37 = sp + 184 | 0;
$vararg_buffer29 = sp + 136 | 0;
$vararg_buffer24 = sp + 112 | 0;
$vararg_buffer19 = sp + 88 | 0;
$vararg_buffer17 = sp + 80 | 0;
$vararg_buffer12 = sp + 56 | 0;
$vararg_buffer10 = sp + 48 | 0;
$vararg_buffer5 = sp + 32 | 0;
$vararg_buffer1 = sp + 8 | 0;
$3 = sp + 264 | 0;
__ZN13BasicMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture($0, $1, $2);
if (0) __Z7eprintfPKcz(37339, sp);
L4 : do if ((HEAP32[$0 + 36 >> 2] | 0) == 13) {
$18 = Math_fround(Math_fround(HEAPF32[$0 + 528 >> 2]) * Math_fround((((HEAPU8[$1 + 13 >> 0] | 0) >>> 5 & 2 ^ 2) & 255) + -1 | 0));
$22 = Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 532 >> 2]) + $18) * Math_fround(.5));
$24 = HEAP32[$0 + 536 >> 2] | 0;
$26 = HEAP32[$0 + 540 >> 2] | 0;
if (!0) $$pre$phiZ2D = $0 + 8 | 0; else {
$30 = +(HEAP32[tempDoublePtr >> 2] = $24, Math_fround(HEAPF32[tempDoublePtr >> 2]));
HEAPF64[$vararg_buffer1 >> 3] = +$22;
HEAPF64[$vararg_buffer1 + 8 >> 3] = $30;
HEAP32[$vararg_buffer1 + 16 >> 2] = $26;
__Z7eprintfPKcz(37357, $vararg_buffer1);
$31 = $0 + 8 | 0;
$32 = HEAP32[$31 >> 2] | 0;
HEAP32[$vararg_buffer5 >> 2] = ($32 | 0) == 3 | ($32 | 0) == 5 ? 84 : 70;
HEAP32[$vararg_buffer5 + 4 >> 2] = ($32 | 1 | 0) == 5 ? 84 : 70;
HEAP32[$vararg_buffer5 + 8 >> 2] = $32;
__Z7eprintfPKcz(37415, $vararg_buffer5);
$$pre$phiZ2D = $31;
}
switch (HEAP32[$$pre$phiZ2D >> 2] | 0) {
case 3:
case 5:
{
$$sroa$066$0$$sroa_idx = $2 + 60 | 0;
HEAPF32[$$sroa$066$0$$sroa_idx >> 2] = $22;
$$sroa$8$0$$sroa_idx71 = $2 + 64 | 0;
HEAP32[$$sroa$8$0$$sroa_idx71 >> 2] = $24;
$$sroa$12$0$$sroa_idx77 = $2 + 68 | 0;
HEAP32[$$sroa$12$0$$sroa_idx77 >> 2] = $26;
if (!0) $248 = 1; else {
__Z7eprintfPKcz(37443, $vararg_buffer10);
$42 = HEAP32[16082] | 0;
if ($42 | 0) {
$45 = +(HEAP32[tempDoublePtr >> 2] = $24, Math_fround(HEAPF32[tempDoublePtr >> 2]));
HEAPF64[$vararg_buffer12 >> 3] = +$22;
HEAPF64[$vararg_buffer12 + 8 >> 3] = $45;
HEAP32[$vararg_buffer12 + 16 >> 2] = $26;
_fprintf($42, 37475, $vararg_buffer12) | 0;
}
__Z5eputcc(10);
__Z7eprintfPKcz(37502, $vararg_buffer17);
$47 = HEAP32[16082] | 0;
if ($47 | 0) {
$50 = +Math_fround(HEAPF32[$$sroa$066$0$$sroa_idx >> 2]);
$52 = +Math_fround(HEAPF32[$$sroa$8$0$$sroa_idx71 >> 2]);
$53 = HEAP32[$$sroa$12$0$$sroa_idx77 >> 2] | 0;
HEAPF64[$vararg_buffer19 >> 3] = $50;
HEAPF64[$vararg_buffer19 + 8 >> 3] = $52;
HEAP32[$vararg_buffer19 + 16 >> 2] = $53;
_fprintf($47, 37475, $vararg_buffer19) | 0;
}
__Z5eputcc(10);
if (!0) $248 = 1; else {
$56 = +Math_fround(HEAPF32[$$sroa$066$0$$sroa_idx >> 2]);
$58 = +Math_fround(HEAPF32[$$sroa$8$0$$sroa_idx71 >> 2]);
$59 = HEAP32[$$sroa$12$0$$sroa_idx77 >> 2] | 0;
HEAPF64[$vararg_buffer24 >> 3] = $56;
HEAPF64[$vararg_buffer24 + 8 >> 3] = $58;
HEAP32[$vararg_buffer24 + 16 >> 2] = $59;
__Z7eprintfPKcz(37542, $vararg_buffer24);
$248 = 0 == 0;
}
}
$60 = Math_fround(HEAPF32[16225]);
$64 = Math_fround($60 * Math_fround(HEAPF32[65116 + (HEAP32[$$sroa$12$0$$sroa_idx77 >> 2] << 2) >> 2]));
$66 = Math_fround($64 * Math_fround(HEAPF32[$$sroa$066$0$$sroa_idx >> 2]));
HEAPF32[$0 + 348 >> 2] = $66;
$69 = Math_fround($64 * Math_fround(HEAPF32[$$sroa$8$0$$sroa_idx71 >> 2]));
HEAPF32[$0 + 352 >> 2] = $69;
if (!$248) {
$76 = +Math_fround(HEAPF32[65116 + (HEAP32[$$sroa$12$0$$sroa_idx77 >> 2] << 2) >> 2]);
HEAP32[$vararg_buffer29 >> 2] = HEAP8[$2 >> 0] | 0 ? 37593 : 37595;
HEAPF64[$vararg_buffer29 + 8 >> 3] = $76;
HEAPF64[$vararg_buffer29 + 16 >> 3] = +$60;
HEAPF64[$vararg_buffer29 + 24 >> 3] = +$64;
HEAPF64[$vararg_buffer29 + 32 >> 3] = +$66;
HEAPF64[$vararg_buffer29 + 40 >> 3] = +$69;
__Z7eprintfPKcz(37597, $vararg_buffer29);
}
break;
}
default:
{}
}
if ((HEAP32[$$pre$phiZ2D >> 2] | 1 | 0) == 5) {
$$sroa$066$0$$sroa_idx68 = $2 + 132 | 0;
HEAPF32[$$sroa$066$0$$sroa_idx68 >> 2] = $22;
$$sroa$8$0$$sroa_idx72 = $2 + 136 | 0;
HEAP32[$$sroa$8$0$$sroa_idx72 >> 2] = $24;
$$sroa$12$0$$sroa_idx78 = $2 + 140 | 0;
HEAP32[$$sroa$12$0$$sroa_idx78 >> 2] = $26;
if (!0) {
$249 = 1;
$90 = $26;
$94 = $22;
} else {
$87 = +(HEAP32[tempDoublePtr >> 2] = $24, Math_fround(HEAPF32[tempDoublePtr >> 2]));
HEAPF64[$vararg_buffer37 >> 3] = +$22;
HEAPF64[$vararg_buffer37 + 8 >> 3] = $87;
HEAP32[$vararg_buffer37 + 16 >> 2] = $26;
__Z7eprintfPKcz(37542, $vararg_buffer37);
$249 = 0 == 0;
$90 = HEAP32[$$sroa$12$0$$sroa_idx78 >> 2] | 0;
$94 = Math_fround(HEAPF32[$$sroa$066$0$$sroa_idx68 >> 2]);
}
$88 = Math_fround(HEAPF32[16225]);
$92 = Math_fround($88 * Math_fround(HEAPF32[65116 + ($90 << 2) >> 2]));
$93 = Math_fround($92 * $94);
HEAPF32[$0 + 460 >> 2] = $93;
$97 = Math_fround($92 * Math_fround(HEAPF32[$$sroa$8$0$$sroa_idx72 >> 2]));
HEAPF32[$0 + 464 >> 2] = $97;
if (!$249) {
$105 = +Math_fround(HEAPF32[65116 + (HEAP32[$$sroa$12$0$$sroa_idx78 >> 2] << 2) >> 2]);
HEAP32[$vararg_buffer42 >> 2] = HEAP8[$2 + 72 >> 0] | 0 ? 37593 : 37595;
HEAPF64[$vararg_buffer42 + 8 >> 3] = $105;
HEAPF64[$vararg_buffer42 + 16 >> 3] = +$88;
HEAPF64[$vararg_buffer42 + 24 >> 3] = +$92;
HEAPF64[$vararg_buffer42 + 32 >> 3] = +$93;
HEAPF64[$vararg_buffer42 + 40 >> 3] = +$97;
__Z7eprintfPKcz(37597, $vararg_buffer42);
}
}
} else {
$110 = $0 + 8 | 0;
$111 = HEAP32[$110 >> 2] | 0;
L30 : do switch ($111 | 0) {
case 3:
case 5:
{
$114 = $1 + 13 | 0;
if (($111 | 1 | 0) == 5) if (!(HEAP8[$114 >> 0] & 64)) break L30;
__ZN6VectorC2Ev($3);
$118 = $0 + 600 | 0;
__ZN16DirectedMovement25setAvatarDependentValues1ER15OneHDirMoveSpecR6VectorRK12AvatarTimingb($0, $118, $3, (HEAP32[$1 >> 2] | 0) + 232 | 0, (HEAP8[$114 >> 0] & 32) != 0);
__ZN6Vector6setAddERKS_($0 + 288 | 0, $3);
if ((HEAP32[$110 >> 2] | 1 | 0) == 5) {
$128 = $0 + 672 | 0;
$129 = $1 + 14 | 0;
$$sroa$064$0$extract$trunc = HEAP16[$129 >> 1] & 255;
dest = $128;
src = $118;
stop = dest + 72 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
$131 = $$sroa$064$0$extract$trunc << 5 & 255;
$132 = $$sroa$064$0$extract$trunc << 4 & 255;
if (($131 ^ $132) << 24 >> 24 < 0) {
$135 = Math_fround(-Math_fround(HEAPF32[$128 >> 2]));
HEAPF32[$128 >> 2] = $135;
}
$136 = $$sroa$064$0$extract$trunc << 6 & 255;
if (($132 ^ $136) << 24 >> 24 < 0) {
$138 = $0 + 676 | 0;
$140 = Math_fround(-Math_fround(HEAPF32[$138 >> 2]));
HEAPF32[$138 >> 2] = $140;
}
if (($136 ^ $131) << 24 >> 24 < 0) {
$142 = $0 + 680 | 0;
$144 = Math_fround(-Math_fround(HEAPF32[$142 >> 2]));
HEAPF32[$142 >> 2] = $144;
}
$145 = ($$sroa$064$0$extract$trunc & 2) == 0;
if (!$145) {
$146 = $0 + 688 | 0;
$148 = Math_fround(-Math_fround(HEAPF32[$146 >> 2]));
HEAPF32[$146 >> 2] = $148;
}
$149 = ($$sroa$064$0$extract$trunc & 4) == 0;
if (!$149) {
$150 = $0 + 692 | 0;
$152 = Math_fround(-Math_fround(HEAPF32[$150 >> 2]));
HEAPF32[$150 >> 2] = $152;
}
$153 = ($$sroa$064$0$extract$trunc & 8) == 0;
if (!$153) {
$154 = $0 + 696 | 0;
$156 = Math_fround(-Math_fround(HEAPF32[$154 >> 2]));
HEAPF32[$154 >> 2] = $156;
}
if (!$145) {
$157 = $0 + 720 | 0;
$159 = Math_fround(-Math_fround(HEAPF32[$157 >> 2]));
HEAPF32[$157 >> 2] = $159;
}
if (!$149) {
$160 = $0 + 724 | 0;
$162 = Math_fround(-Math_fround(HEAPF32[$160 >> 2]));
HEAPF32[$160 >> 2] = $162;
}
if (!$153) {
$163 = $0 + 728 | 0;
$165 = Math_fround(-Math_fround(HEAPF32[$163 >> 2]));
HEAPF32[$163 >> 2] = $165;
}
$$sroa$062$0$extract$trunc = HEAP16[$129 >> 1] & 255;
if ($$sroa$062$0$extract$trunc & 2) {
$169 = Math_fround(-Math_fround(HEAPF32[$3 >> 2]));
HEAPF32[$3 >> 2] = $169;
}
if ($$sroa$062$0$extract$trunc & 4) {
$171 = $3 + 4 | 0;
$173 = Math_fround(-Math_fround(HEAPF32[$171 >> 2]));
HEAPF32[$171 >> 2] = $173;
}
if ($$sroa$062$0$extract$trunc & 8) {
$175 = $3 + 8 | 0;
$177 = Math_fround(-Math_fround(HEAPF32[$175 >> 2]));
HEAPF32[$175 >> 2] = $177;
}
__ZN6Vector6setAddERKS_($0 + 400 | 0, $3);
}
break L4;
break;
}
default:
if (($111 | 1 | 0) != 5) break L4;
} while (0);
__ZN6VectorC2Ev($3);
$179 = $0 + 672 | 0;
__ZN16DirectedMovement25setAvatarDependentValues1ER15OneHDirMoveSpecR6VectorRK12AvatarTimingb($0, $179, $3, (HEAP32[$1 >> 2] | 0) + 232 | 0, (HEAP8[$1 + 13 >> 0] & 32) != 0);
__ZN6Vector6setAddERKS_($0 + 400 | 0, $3);
switch (HEAP32[$110 >> 2] | 0) {
case 3:
case 5:
{
$188 = $0 + 600 | 0;
$189 = $1 + 14 | 0;
$$sroa$060$0$extract$trunc = HEAP16[$189 >> 1] & 255;
dest = $188;
src = $179;
stop = dest + 72 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
$191 = $$sroa$060$0$extract$trunc << 5 & 255;
$192 = $$sroa$060$0$extract$trunc << 4 & 255;
if (($191 ^ $192) << 24 >> 24 < 0) {
$195 = Math_fround(-Math_fround(HEAPF32[$188 >> 2]));
HEAPF32[$188 >> 2] = $195;
}
$196 = $$sroa$060$0$extract$trunc << 6 & 255;
if (($192 ^ $196) << 24 >> 24 < 0) {
$198 = $0 + 604 | 0;
$200 = Math_fround(-Math_fround(HEAPF32[$198 >> 2]));
HEAPF32[$198 >> 2] = $200;
}
if (($196 ^ $191) << 24 >> 24 < 0) {
$202 = $0 + 608 | 0;
$204 = Math_fround(-Math_fround(HEAPF32[$202 >> 2]));
HEAPF32[$202 >> 2] = $204;
}
$205 = ($$sroa$060$0$extract$trunc & 2) == 0;
if (!$205) {
$206 = $0 + 616 | 0;
$208 = Math_fround(-Math_fround(HEAPF32[$206 >> 2]));
HEAPF32[$206 >> 2] = $208;
}
$209 = ($$sroa$060$0$extract$trunc & 4) == 0;
if (!$209) {
$210 = $0 + 620 | 0;
$212 = Math_fround(-Math_fround(HEAPF32[$210 >> 2]));
HEAPF32[$210 >> 2] = $212;
}
$213 = ($$sroa$060$0$extract$trunc & 8) == 0;
if (!$213) {
$214 = $0 + 624 | 0;
$216 = Math_fround(-Math_fround(HEAPF32[$214 >> 2]));
HEAPF32[$214 >> 2] = $216;
}
if (!$205) {
$217 = $0 + 648 | 0;
$219 = Math_fround(-Math_fround(HEAPF32[$217 >> 2]));
HEAPF32[$217 >> 2] = $219;
}
if (!$209) {
$220 = $0 + 652 | 0;
$222 = Math_fround(-Math_fround(HEAPF32[$220 >> 2]));
HEAPF32[$220 >> 2] = $222;
}
if (!$213) {
$223 = $0 + 656 | 0;
$225 = Math_fround(-Math_fround(HEAPF32[$223 >> 2]));
HEAPF32[$223 >> 2] = $225;
}
$$sroa$0$0$extract$trunc = HEAP16[$189 >> 1] & 255;
if ($$sroa$0$0$extract$trunc & 2) {
$229 = Math_fround(-Math_fround(HEAPF32[$3 >> 2]));
HEAPF32[$3 >> 2] = $229;
}
if ($$sroa$0$0$extract$trunc & 4) {
$231 = $3 + 4 | 0;
$233 = Math_fround(-Math_fround(HEAPF32[$231 >> 2]));
HEAPF32[$231 >> 2] = $233;
}
if ($$sroa$0$0$extract$trunc & 8) {
$235 = $3 + 8 | 0;
$237 = Math_fround(-Math_fround(HEAPF32[$235 >> 2]));
HEAPF32[$235 >> 2] = $237;
}
__ZN6Vector6setAddERKS_($0 + 288 | 0, $3);
break;
}
default:
{}
}
} while (0);
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$0 >> 2] | 0) + 68 >> 2] & 255]($0);
if (!0) {
STACKTOP = sp;
return;
}
$245 = +Math_fround(HEAPF32[$0 + 40 >> 2]);
HEAPF64[$vararg_buffer50 >> 3] = $245;
__Z7eprintfPKcz(37671, $vararg_buffer50);
__ZNK25TwoHConcretePostureChange5printEP8_IO_FILE($0 + 60 | 0, HEAP32[16082] | 0);
STACKTOP = sp;
return;
}
function __ZN11HanimAvatar20createSiGMLHeadSitesEv($0) {
$0 = $0 | 0;
var $$byval_copy15 = 0, $$sroa$0$0$copyload$i = 0, $$sroa$0$0$copyload$i12 = 0, $$sroa$0$0$copyload$i16 = 0, $$sroa$0$0$copyload$i20 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $19 = f0, $2 = 0, $20 = 0, $29 = f0, $3 = 0, $30 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = f0, $41 = 0, $44 = 0, $45 = 0, $46 = f0, $49 = 0, $5 = 0, $51 = f0, $54 = 0, $55 = f0, $57 = f0, $6 = 0, $60 = 0, $61 = f0, $62 = 0, $64 = f0, $67 = 0, $68 = f0, $69 = f0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 96 | 0;
$$byval_copy15 = sp + 84 | 0;
$1 = sp + 40 | 0;
$2 = sp + 28 | 0;
$3 = sp + 24 | 0;
$4 = sp + 72 | 0;
$5 = sp + 60 | 0;
$6 = sp + 12 | 0;
$7 = sp + 56 | 0;
$8 = sp + 52 | 0;
$9 = sp + 48 | 0;
$10 = sp;
$11 = sp + 44 | 0;
__ZN11HanimAvatar11SetFaceSiteE8LocationsRK6Vector($0, 16, 6, 64540);
__ZN11HanimAvatar11SetFaceSiteE8LocationsRK6Vector($0, 25, 44, 64552);
__ZN6VectorC2Efff($2, Math_fround(1.0), Math_fround(0.0), Math_fround(1.0));
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($1, 25, 0, 0, 0, 1, 0);
HEAP8[$$byval_copy15 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$$byval_copy15 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$$byval_copy15 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$$byval_copy15 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar15SetFaceSitePairE6SiteIDssRK6Vector($0, $$byval_copy15, 40, 41, $2);
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($1, 26, 0, 0, 0, 1, 0);
HEAP8[$$byval_copy15 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$$byval_copy15 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$$byval_copy15 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$$byval_copy15 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar15SetFaceSitePairE6SiteIDssRK6Vector($0, $$byval_copy15, 30, 31, 64552);
__ZN11HanimAvatar11SetFaceSiteE8LocationsRK6Vector($0, 27, 2, 64552);
__ZN6VectorC2Efff($2, Math_fround(1.0), Math_fround(0.0), Math_fround(1.0));
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($1, 27, 0, 0, 0, 1, 0);
HEAP8[$$byval_copy15 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$$byval_copy15 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$$byval_copy15 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$$byval_copy15 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar15SetFaceSitePairE6SiteIDssRK6Vector($0, $$byval_copy15, 32, 33, $2);
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($1, 28, 0, 0, 0, 1, 0);
HEAP8[$$byval_copy15 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$$byval_copy15 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$$byval_copy15 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$$byval_copy15 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar15SetFaceSitePairE6SiteIDssRK6Vector($0, $$byval_copy15, 30, 31, 64552);
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($1, 29, 0, 0, 0, 1, 0);
HEAP8[$$byval_copy15 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$$byval_copy15 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$$byval_copy15 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$$byval_copy15 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar15SetFaceSitePairE6SiteIDssRK6Vector($0, $$byval_copy15, 28, 29, 64552);
__ZN11HanimAvatar11SetFaceSiteE8LocationsRK6Vector($0, 30, 48, 64552);
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($1, 30, 0, 0, 0, 1, 0);
HEAP8[$$byval_copy15 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$$byval_copy15 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$$byval_copy15 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$$byval_copy15 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar15SetFaceSitePairE6SiteIDssRK6Vector($0, $$byval_copy15, 53, 55, 64552);
__ZN6VectorC2Efff($$byval_copy15, Math_fround(0.0), Math_fround(-1.0), Math_fround(.100000001));
__ZN11HanimAvatar11SetFaceSiteE8LocationsRK6Vector($0, 31, 57, $$byval_copy15);
__ZN11HanimAvatar11SetFaceSiteE8LocationsRK6Vector($0, 32, 25, 64552);
__ZN6VectorC2Efff($2, Math_fround(.300000012), Math_fround(0.0), Math_fround(1.0));
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($1, 32, 0, 0, 0, 1, 0);
HEAP8[$$byval_copy15 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$$byval_copy15 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$$byval_copy15 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$$byval_copy15 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar15SetFaceSitePairE6SiteIDssRK6Vector($0, $$byval_copy15, 11, 12, $2);
__ZN11HanimAvatar11SetFaceSiteE8LocationsRK6Vector($0, 33, 14, 64552);
__ZN11HanimAvatar11SetFaceSiteE8LocationsRK6Vector($0, 34, 17, 64552);
$12 = $0 + 488 | 0;
$13 = HEAP32[$12 >> 2] | 0;
if ((HEAP32[$13 + 12 >> 2] | 0) > 11) __ZN6VectorC2ERKS_($4, (HEAP32[$13 >> 2] | 0) + 132 | 0); else __ZN6VectorC2Ev($4);
$19 = Math_fround(HEAPF32[$4 >> 2]);
$20 = HEAP32[$12 >> 2] | 0;
if ((HEAP32[$20 + 12 >> 2] | 0) > 12) __ZN6VectorC2ERKS_($5, (HEAP32[$20 >> 2] | 0) + 144 | 0); else __ZN6VectorC2Ev($5);
$29 = Math_fround(Math_fround(Math_fround($19 - Math_fround(HEAPF32[$5 >> 2])) * Math_fround(.5)) * Math_fround(.600000024));
$30 = HEAP32[$12 >> 2] | 0;
if ((HEAP32[$30 + 12 >> 2] | 0) > 25) __ZN6VectorC2ERKS_($6, (HEAP32[$30 >> 2] | 0) + 300 | 0); else __ZN6VectorC2Ev($6);
$37 = HEAP16[4149] | 0;
$38 = $6 + ($37 << 2) | 0;
$40 = Math_fround(Math_fround(HEAPF32[$38 >> 2]) + Math_fround(-.00999999977));
HEAPF32[$38 >> 2] = $40;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($3, 36, 0, 0, 0, 1, 0);
$41 = $0 + 72 | 0;
$44 = HEAP32[(HEAP32[$41 >> 2] | 0) + 8 >> 2] | 0;
$45 = $0 + 380 | 0;
$46 = Math_fround(HEAPF32[$45 >> 2]);
$$sroa$0$0$copyload$i = HEAP32[$3 >> 2] | 0;
HEAP32[$1 >> 2] = $$sroa$0$0$copyload$i;
HEAP8[$$byval_copy15 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$$byval_copy15 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$$byval_copy15 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$$byval_copy15 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $$byval_copy15, $44, $6, $46) | 0;
HEAP32[$2 >> 2] = $$sroa$0$0$copyload$i;
HEAP8[$$byval_copy15 >> 0] = HEAP8[$2 >> 0] | 0;
HEAP8[$$byval_copy15 + 1 >> 0] = HEAP8[$2 + 1 >> 0] | 0;
HEAP8[$$byval_copy15 + 2 >> 0] = HEAP8[$2 + 2 >> 0] | 0;
HEAP8[$$byval_copy15 + 3 >> 0] = HEAP8[$2 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $$byval_copy15, 64552, $46);
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($7, 36, 0, 0, 0, 1, 0);
HEAP8[$$byval_copy15 >> 0] = HEAP8[$7 >> 0] | 0;
HEAP8[$$byval_copy15 + 1 >> 0] = HEAP8[$7 + 1 >> 0] | 0;
HEAP8[$$byval_copy15 + 2 >> 0] = HEAP8[$7 + 2 >> 0] | 0;
HEAP8[$$byval_copy15 + 3 >> 0] = HEAP8[$7 + 3 >> 0] | 0;
__ZN11HanimAvatar14createSitePairE6SiteIDff($0, $$byval_copy15, $29, Math_fround(.5));
$49 = $6 + (HEAP16[4148] << 2) | 0;
$51 = Math_fround(Math_fround(HEAPF32[$49 >> 2]) + Math_fround(.00499999989));
HEAPF32[$49 >> 2] = $51;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($3, 37, 0, 0, 0, 1, 0);
$54 = HEAP32[(HEAP32[$41 >> 2] | 0) + 8 >> 2] | 0;
$55 = Math_fround(HEAPF32[$45 >> 2]);
$$sroa$0$0$copyload$i12 = HEAP32[$3 >> 2] | 0;
HEAP32[$1 >> 2] = $$sroa$0$0$copyload$i12;
HEAP8[$$byval_copy15 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$$byval_copy15 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$$byval_copy15 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$$byval_copy15 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $$byval_copy15, $54, $6, $55) | 0;
HEAP32[$2 >> 2] = $$sroa$0$0$copyload$i12;
HEAP8[$$byval_copy15 >> 0] = HEAP8[$2 >> 0] | 0;
HEAP8[$$byval_copy15 + 1 >> 0] = HEAP8[$2 + 1 >> 0] | 0;
HEAP8[$$byval_copy15 + 2 >> 0] = HEAP8[$2 + 2 >> 0] | 0;
HEAP8[$$byval_copy15 + 3 >> 0] = HEAP8[$2 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $$byval_copy15, 64552, $55);
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($8, 37, 0, 0, 0, 1, 0);
HEAP8[$$byval_copy15 >> 0] = HEAP8[$8 >> 0] | 0;
HEAP8[$$byval_copy15 + 1 >> 0] = HEAP8[$8 + 1 >> 0] | 0;
HEAP8[$$byval_copy15 + 2 >> 0] = HEAP8[$8 + 2 >> 0] | 0;
HEAP8[$$byval_copy15 + 3 >> 0] = HEAP8[$8 + 3 >> 0] | 0;
__ZN11HanimAvatar14createSitePairE6SiteIDff($0, $$byval_copy15, $29, Math_fround(.5));
$57 = Math_fround(Math_fround(HEAPF32[$49 >> 2]) + Math_fround(-.00999999977));
HEAPF32[$49 >> 2] = $57;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($3, 38, 0, 0, 0, 1, 0);
$60 = HEAP32[(HEAP32[$41 >> 2] | 0) + 8 >> 2] | 0;
$61 = Math_fround(HEAPF32[$45 >> 2]);
$$sroa$0$0$copyload$i16 = HEAP32[$3 >> 2] | 0;
HEAP32[$1 >> 2] = $$sroa$0$0$copyload$i16;
HEAP8[$$byval_copy15 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$$byval_copy15 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$$byval_copy15 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$$byval_copy15 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $$byval_copy15, $60, $6, $61) | 0;
HEAP32[$2 >> 2] = $$sroa$0$0$copyload$i16;
HEAP8[$$byval_copy15 >> 0] = HEAP8[$2 >> 0] | 0;
HEAP8[$$byval_copy15 + 1 >> 0] = HEAP8[$2 + 1 >> 0] | 0;
HEAP8[$$byval_copy15 + 2 >> 0] = HEAP8[$2 + 2 >> 0] | 0;
HEAP8[$$byval_copy15 + 3 >> 0] = HEAP8[$2 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $$byval_copy15, 64552, $61);
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($9, 38, 0, 0, 0, 1, 0);
HEAP8[$$byval_copy15 >> 0] = HEAP8[$9 >> 0] | 0;
HEAP8[$$byval_copy15 + 1 >> 0] = HEAP8[$9 + 1 >> 0] | 0;
HEAP8[$$byval_copy15 + 2 >> 0] = HEAP8[$9 + 2 >> 0] | 0;
HEAP8[$$byval_copy15 + 3 >> 0] = HEAP8[$9 + 3 >> 0] | 0;
__ZN11HanimAvatar14createSitePairE6SiteIDff($0, $$byval_copy15, $29, Math_fround(.5));
__ZN6VectorC2ERKS_($10, $6);
$62 = $10 + ($37 << 2) | 0;
$64 = Math_fround(Math_fround(HEAPF32[$62 >> 2]) + Math_fround(-.00700000022));
HEAPF32[$62 >> 2] = $64;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($3, 35, 0, 0, 0, 1, 0);
$67 = HEAP32[(HEAP32[$41 >> 2] | 0) + 8 >> 2] | 0;
$68 = Math_fround(HEAPF32[$45 >> 2]);
$$sroa$0$0$copyload$i20 = HEAP32[$3 >> 2] | 0;
HEAP32[$1 >> 2] = $$sroa$0$0$copyload$i20;
HEAP8[$$byval_copy15 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$$byval_copy15 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$$byval_copy15 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$$byval_copy15 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $$byval_copy15, $67, $10, $68) | 0;
HEAP32[$2 >> 2] = $$sroa$0$0$copyload$i20;
HEAP8[$$byval_copy15 >> 0] = HEAP8[$2 >> 0] | 0;
HEAP8[$$byval_copy15 + 1 >> 0] = HEAP8[$2 + 1 >> 0] | 0;
HEAP8[$$byval_copy15 + 2 >> 0] = HEAP8[$2 + 2 >> 0] | 0;
HEAP8[$$byval_copy15 + 3 >> 0] = HEAP8[$2 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $$byval_copy15, 64552, $68);
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($11, 35, 0, 0, 0, 1, 0);
$69 = Math_fround($29 * Math_fround(.800000011));
HEAP8[$$byval_copy15 >> 0] = HEAP8[$11 >> 0] | 0;
HEAP8[$$byval_copy15 + 1 >> 0] = HEAP8[$11 + 1 >> 0] | 0;
HEAP8[$$byval_copy15 + 2 >> 0] = HEAP8[$11 + 2 >> 0] | 0;
HEAP8[$$byval_copy15 + 3 >> 0] = HEAP8[$11 + 3 >> 0] | 0;
__ZN11HanimAvatar14createSitePairE6SiteIDff($0, $$byval_copy15, $69, Math_fround(.5));
__ZN11HanimAvatar11SetFaceSiteE8LocationsRK6Vector($0, 39, 4, 64552);
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($1, 39, 0, 0, 0, 1, 0);
HEAP8[$$byval_copy15 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$$byval_copy15 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$$byval_copy15 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$$byval_copy15 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar15SetFaceSitePairE6SiteIDssRK6Vector($0, $$byval_copy15, 3, 5, 64552);
__ZN6VectorC2Efff($$byval_copy15, Math_fround(0.0), Math_fround(-2.0), Math_fround(1.0));
__ZN11HanimAvatar11SetFaceSiteE8LocationsRK6Vector($0, 40, 62, $$byval_copy15);
__ZN6VectorC2Efff($2, Math_fround(1.0), Math_fround(-2.0), Math_fround(1.0));
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($1, 40, 0, 0, 0, 1, 0);
HEAP8[$$byval_copy15 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$$byval_copy15 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$$byval_copy15 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$$byval_copy15 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar15SetFaceSitePairE6SiteIDssRK6Vector($0, $$byval_copy15, 61, 63, $2);
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($1, 41, 0, 0, 0, 1, 0);
HEAP8[$$byval_copy15 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$$byval_copy15 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$$byval_copy15 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$$byval_copy15 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar15SetFaceSitePairE6SiteIDssRK6Vector($0, $$byval_copy15, 9, 10, 64528);
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($1, 42, 0, 0, 0, 1, 0);
HEAP8[$$byval_copy15 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$$byval_copy15 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$$byval_copy15 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$$byval_copy15 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar15SetFaceSitePairE6SiteIDssRK6Vector($0, $$byval_copy15, 80, 72, 64528);
__ZN6VectorC2Efff($2, Math_fround(3.0), Math_fround(0.0), Math_fround(1.0));
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($1, 43, 0, 0, 0, 1, 0);
HEAP8[$$byval_copy15 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP8[$$byval_copy15 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0;
HEAP8[$$byval_copy15 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP8[$$byval_copy15 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0;
__ZN11HanimAvatar15SetFaceSitePairE6SiteIDssRK6Vector($0, $$byval_copy15, 86, 85, $2);
STACKTOP = sp;
return;
}
function __Z21CreateNonmanualTablesv() {
var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $36 = 0, $38 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $59 = 0, $61 = 0, $63 = 0, $65 = 0, $67 = 0, $69 = 0, $71 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $82 = 0, $85 = 0, $88 = 0, $91 = 0, $94 = 0, $97 = 0, $vararg_buffer = 0, $vararg_buffer106 = 0, $vararg_buffer132 = 0, $vararg_buffer148 = 0, $vararg_buffer174 = 0, $vararg_buffer176 = 0, $vararg_buffer178 = 0, $vararg_buffer180 = 0, $vararg_buffer182 = 0, $vararg_buffer184 = 0, $vararg_buffer186 = 0, $vararg_buffer188 = 0, $vararg_buffer190 = 0, $vararg_buffer36 = 0, $vararg_buffer52 = 0, $vararg_buffer79 = 0, dest = 0, sp = 0, stop = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 736 | 0;
$vararg_buffer190 = sp + 720 | 0;
$vararg_buffer188 = sp + 712 | 0;
$vararg_buffer186 = sp + 704 | 0;
$vararg_buffer184 = sp + 696 | 0;
$vararg_buffer182 = sp + 688 | 0;
$vararg_buffer180 = sp + 680 | 0;
$vararg_buffer178 = sp + 672 | 0;
$vararg_buffer176 = sp + 664 | 0;
$vararg_buffer174 = sp + 656 | 0;
$vararg_buffer148 = sp + 560 | 0;
$vararg_buffer132 = sp + 504 | 0;
$vararg_buffer106 = sp + 408 | 0;
$vararg_buffer79 = sp + 304 | 0;
$vararg_buffer52 = sp + 200 | 0;
$vararg_buffer36 = sp + 144 | 0;
$vararg_buffer = sp;
HEAP32[$vararg_buffer >> 2] = 0;
HEAP32[$vararg_buffer + 4 >> 2] = 49628;
HEAP32[$vararg_buffer + 8 >> 2] = 1;
HEAP32[$vararg_buffer + 12 >> 2] = 49633;
HEAP32[$vararg_buffer + 16 >> 2] = 2;
HEAP32[$vararg_buffer + 20 >> 2] = 49638;
HEAP32[$vararg_buffer + 24 >> 2] = 3;
HEAP32[$vararg_buffer + 28 >> 2] = 49643;
HEAP32[$vararg_buffer + 32 >> 2] = 4;
HEAP32[$vararg_buffer + 36 >> 2] = 49648;
HEAP32[$vararg_buffer + 40 >> 2] = 5;
HEAP32[$vararg_buffer + 44 >> 2] = 49653;
HEAP32[$vararg_buffer + 48 >> 2] = 6;
HEAP32[$vararg_buffer + 52 >> 2] = 49658;
HEAP32[$vararg_buffer + 56 >> 2] = 7;
HEAP32[$vararg_buffer + 60 >> 2] = 49663;
HEAP32[$vararg_buffer + 64 >> 2] = 8;
HEAP32[$vararg_buffer + 68 >> 2] = 49668;
HEAP32[$vararg_buffer + 72 >> 2] = 9;
HEAP32[$vararg_buffer + 76 >> 2] = 49672;
HEAP32[$vararg_buffer + 80 >> 2] = 10;
HEAP32[$vararg_buffer + 84 >> 2] = 49676;
HEAP32[$vararg_buffer + 88 >> 2] = 11;
HEAP32[$vararg_buffer + 92 >> 2] = 49681;
HEAP32[$vararg_buffer + 96 >> 2] = 12;
HEAP32[$vararg_buffer + 100 >> 2] = 49685;
HEAP32[$vararg_buffer + 104 >> 2] = 13;
HEAP32[$vararg_buffer + 108 >> 2] = 49689;
HEAP32[$vararg_buffer + 112 >> 2] = 14;
HEAP32[$vararg_buffer + 116 >> 2] = 49693;
HEAP32[$vararg_buffer + 120 >> 2] = 15;
HEAP32[$vararg_buffer + 124 >> 2] = 49697;
HEAP32[$vararg_buffer + 128 >> 2] = 16;
HEAP32[$vararg_buffer + 132 >> 2] = 49701;
HEAP32[$vararg_buffer + 136 >> 2] = 17;
HEAP32[$vararg_buffer + 140 >> 2] = 0;
$0 = __ZN28InvertibleDynamicStringArray19NewInvertibleArrayHEiPKcz(-1, 49623, $vararg_buffer) | 0;
HEAP32[17820] = $0;
$1 = _malloc(52) | 0;
HEAP32[17821] = $1;
dest = $1;
stop = dest + 52 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[$vararg_buffer36 >> 2] = 1;
HEAP32[$vararg_buffer36 + 4 >> 2] = 33;
HEAP32[$vararg_buffer36 + 8 >> 2] = 2;
HEAP32[$vararg_buffer36 + 12 >> 2] = 34;
HEAP32[$vararg_buffer36 + 16 >> 2] = 3;
HEAP32[$vararg_buffer36 + 20 >> 2] = 35;
HEAP32[$vararg_buffer36 + 24 >> 2] = 4;
HEAP32[$vararg_buffer36 + 28 >> 2] = 36;
HEAP32[$vararg_buffer36 + 32 >> 2] = 5;
HEAP32[$vararg_buffer36 + 36 >> 2] = 37;
HEAP32[$vararg_buffer36 + 40 >> 2] = 6;
HEAP32[$vararg_buffer36 + 44 >> 2] = 38;
HEAP32[$vararg_buffer36 + 48 >> 2] = 7;
HEAP32[$vararg_buffer36 + 52 >> 2] = 0;
$2 = __ZN7HashAnyIiiE8makeHashEiiz(0, 32, $vararg_buffer36) | 0;
HEAP32[17822] = $2;
$3 = __Znwj(16) | 0;
HEAP32[$3 + 4 >> 2] = 10;
HEAP32[$3 + 12 >> 2] = 0;
HEAP32[$3 >> 2] = 0;
HEAP32[$3 + 8 >> 2] = 0;
HEAP32[17823] = $3;
$8 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 32) | 0;
$10 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 33) | 0;
$12 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 34) | 0;
$14 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 35) | 0;
$16 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 36) | 0;
$18 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 36) | 0;
$20 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 36) | 0;
$22 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 37) | 0;
$24 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 37) | 0;
$26 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 37) | 0;
$28 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 36) | 0;
$30 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 38) | 0;
HEAP32[$vararg_buffer52 >> 2] = 2;
HEAP32[$vararg_buffer52 + 4 >> 2] = $10;
HEAP32[$vararg_buffer52 + 8 >> 2] = 3;
HEAP32[$vararg_buffer52 + 12 >> 2] = $12;
HEAP32[$vararg_buffer52 + 16 >> 2] = 4;
HEAP32[$vararg_buffer52 + 20 >> 2] = $14;
HEAP32[$vararg_buffer52 + 24 >> 2] = 5;
HEAP32[$vararg_buffer52 + 28 >> 2] = $16;
HEAP32[$vararg_buffer52 + 32 >> 2] = 6;
HEAP32[$vararg_buffer52 + 36 >> 2] = $18;
HEAP32[$vararg_buffer52 + 40 >> 2] = 7;
HEAP32[$vararg_buffer52 + 44 >> 2] = $20;
HEAP32[$vararg_buffer52 + 48 >> 2] = 8;
HEAP32[$vararg_buffer52 + 52 >> 2] = $22;
HEAP32[$vararg_buffer52 + 56 >> 2] = 9;
HEAP32[$vararg_buffer52 + 60 >> 2] = $24;
HEAP32[$vararg_buffer52 + 64 >> 2] = 10;
HEAP32[$vararg_buffer52 + 68 >> 2] = $26;
HEAP32[$vararg_buffer52 + 72 >> 2] = 11;
HEAP32[$vararg_buffer52 + 76 >> 2] = $28;
HEAP32[$vararg_buffer52 + 80 >> 2] = 12;
HEAP32[$vararg_buffer52 + 84 >> 2] = $30;
HEAP32[$vararg_buffer52 + 88 >> 2] = 0;
HEAP32[$vararg_buffer52 + 92 >> 2] = 0;
HEAP32[$vararg_buffer52 + 96 >> 2] = -1;
__ZN13DynamicArrayPIcE11setElementsEiPcz($3, 1, $8, $vararg_buffer52);
$31 = __Znwj(16) | 0;
HEAP32[$31 + 4 >> 2] = 10;
HEAP32[$31 + 12 >> 2] = 0;
HEAP32[$31 >> 2] = 0;
HEAP32[$31 + 8 >> 2] = 0;
HEAP32[17825] = $31;
HEAP32[$vararg_buffer79 >> 2] = 2;
HEAP32[$vararg_buffer79 + 4 >> 2] = 49705;
HEAP32[$vararg_buffer79 + 8 >> 2] = 3;
HEAP32[$vararg_buffer79 + 12 >> 2] = 49705;
HEAP32[$vararg_buffer79 + 16 >> 2] = 4;
HEAP32[$vararg_buffer79 + 20 >> 2] = 49714;
HEAP32[$vararg_buffer79 + 24 >> 2] = 5;
HEAP32[$vararg_buffer79 + 28 >> 2] = 49705;
HEAP32[$vararg_buffer79 + 32 >> 2] = 6;
HEAP32[$vararg_buffer79 + 36 >> 2] = 49705;
HEAP32[$vararg_buffer79 + 40 >> 2] = 7;
HEAP32[$vararg_buffer79 + 44 >> 2] = 49705;
HEAP32[$vararg_buffer79 + 48 >> 2] = 8;
HEAP32[$vararg_buffer79 + 52 >> 2] = 49705;
HEAP32[$vararg_buffer79 + 56 >> 2] = 9;
HEAP32[$vararg_buffer79 + 60 >> 2] = 49724;
HEAP32[$vararg_buffer79 + 64 >> 2] = 10;
HEAP32[$vararg_buffer79 + 68 >> 2] = 49732;
HEAP32[$vararg_buffer79 + 72 >> 2] = 11;
HEAP32[$vararg_buffer79 + 76 >> 2] = 49705;
HEAP32[$vararg_buffer79 + 80 >> 2] = 12;
HEAP32[$vararg_buffer79 + 84 >> 2] = 49705;
HEAP32[$vararg_buffer79 + 88 >> 2] = 0;
HEAP32[$vararg_buffer79 + 92 >> 2] = 0;
HEAP32[$vararg_buffer79 + 96 >> 2] = -1;
__ZN13DynamicArrayPIKcE11setElementsEiPS0_z($31, 1, 49705, $vararg_buffer79);
$36 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 46) | 0;
$38 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 47) | 0;
$40 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 48) | 0;
$42 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 49) | 0;
$44 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 50) | 0;
$46 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 51) | 0;
$48 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 52) | 0;
$50 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 53) | 0;
$52 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 54) | 0;
$54 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 55) | 0;
$56 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 57) | 0;
$58 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 58) | 0;
HEAP32[$vararg_buffer106 >> 2] = $36;
HEAP32[$vararg_buffer106 + 4 >> 2] = 2;
HEAP32[$vararg_buffer106 + 8 >> 2] = $38;
HEAP32[$vararg_buffer106 + 12 >> 2] = 3;
HEAP32[$vararg_buffer106 + 16 >> 2] = $40;
HEAP32[$vararg_buffer106 + 20 >> 2] = 4;
HEAP32[$vararg_buffer106 + 24 >> 2] = $42;
HEAP32[$vararg_buffer106 + 28 >> 2] = 5;
HEAP32[$vararg_buffer106 + 32 >> 2] = $44;
HEAP32[$vararg_buffer106 + 36 >> 2] = 6;
HEAP32[$vararg_buffer106 + 40 >> 2] = $46;
HEAP32[$vararg_buffer106 + 44 >> 2] = 7;
HEAP32[$vararg_buffer106 + 48 >> 2] = $48;
HEAP32[$vararg_buffer106 + 52 >> 2] = 8;
HEAP32[$vararg_buffer106 + 56 >> 2] = $50;
HEAP32[$vararg_buffer106 + 60 >> 2] = 9;
HEAP32[$vararg_buffer106 + 64 >> 2] = $52;
HEAP32[$vararg_buffer106 + 68 >> 2] = 10;
HEAP32[$vararg_buffer106 + 72 >> 2] = $54;
HEAP32[$vararg_buffer106 + 76 >> 2] = 11;
HEAP32[$vararg_buffer106 + 80 >> 2] = $56;
HEAP32[$vararg_buffer106 + 84 >> 2] = 12;
HEAP32[$vararg_buffer106 + 88 >> 2] = $58;
HEAP32[$vararg_buffer106 + 92 >> 2] = 0;
$59 = __ZN21InvertibleStringArray19NewInvertibleArrayAEssz(0, 1, $vararg_buffer106) | 0;
HEAP32[17826] = $59;
$61 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 32) | 0;
$63 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 33) | 0;
$65 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 34) | 0;
$67 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 35) | 0;
$69 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 36) | 0;
$71 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 37) | 0;
$73 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, 38) | 0;
HEAP32[$vararg_buffer132 >> 2] = $61;
HEAP32[$vararg_buffer132 + 4 >> 2] = 2;
HEAP32[$vararg_buffer132 + 8 >> 2] = $63;
HEAP32[$vararg_buffer132 + 12 >> 2] = 3;
HEAP32[$vararg_buffer132 + 16 >> 2] = $65;
HEAP32[$vararg_buffer132 + 20 >> 2] = 4;
HEAP32[$vararg_buffer132 + 24 >> 2] = $67;
HEAP32[$vararg_buffer132 + 28 >> 2] = 5;
HEAP32[$vararg_buffer132 + 32 >> 2] = $69;
HEAP32[$vararg_buffer132 + 36 >> 2] = 6;
HEAP32[$vararg_buffer132 + 40 >> 2] = $71;
HEAP32[$vararg_buffer132 + 44 >> 2] = 7;
HEAP32[$vararg_buffer132 + 48 >> 2] = $73;
HEAP32[$vararg_buffer132 + 52 >> 2] = 0;
$74 = __ZN21InvertibleStringArray19NewInvertibleArrayAEssz(0, 1, $vararg_buffer132) | 0;
HEAP32[17824] = $74;
HEAP32[$vararg_buffer148 >> 2] = 1;
HEAP32[$vararg_buffer148 + 4 >> 2] = 47;
HEAP32[$vararg_buffer148 + 8 >> 2] = 2;
HEAP32[$vararg_buffer148 + 12 >> 2] = 48;
HEAP32[$vararg_buffer148 + 16 >> 2] = 3;
HEAP32[$vararg_buffer148 + 20 >> 2] = 49;
HEAP32[$vararg_buffer148 + 24 >> 2] = 4;
HEAP32[$vararg_buffer148 + 28 >> 2] = 50;
HEAP32[$vararg_buffer148 + 32 >> 2] = 5;
HEAP32[$vararg_buffer148 + 36 >> 2] = 51;
HEAP32[$vararg_buffer148 + 40 >> 2] = 6;
HEAP32[$vararg_buffer148 + 44 >> 2] = 52;
HEAP32[$vararg_buffer148 + 48 >> 2] = 7;
HEAP32[$vararg_buffer148 + 52 >> 2] = 53;
HEAP32[$vararg_buffer148 + 56 >> 2] = 8;
HEAP32[$vararg_buffer148 + 60 >> 2] = 54;
HEAP32[$vararg_buffer148 + 64 >> 2] = 9;
HEAP32[$vararg_buffer148 + 68 >> 2] = 55;
HEAP32[$vararg_buffer148 + 72 >> 2] = 10;
HEAP32[$vararg_buffer148 + 76 >> 2] = 57;
HEAP32[$vararg_buffer148 + 80 >> 2] = 11;
HEAP32[$vararg_buffer148 + 84 >> 2] = 58;
HEAP32[$vararg_buffer148 + 88 >> 2] = 12;
HEAP32[$vararg_buffer148 + 92 >> 2] = 0;
$75 = __ZN7HashAnyIiiE8makeHashEiiz(0, 46, $vararg_buffer148) | 0;
HEAP32[17827] = $75;
$76 = __ZN28InvertibleDynamicStringArray19NewInvertibleArrayHEiPKcz(-1, 0, $vararg_buffer174) | 0;
HEAP32[17828] = $76;
HEAP32[(HEAP32[17821] | 0) + 4 >> 2] = $76;
$79 = __ZN28InvertibleDynamicStringArray19NewInvertibleArrayHEiPKcz(-1, 0, $vararg_buffer176) | 0;
HEAP32[17829] = $79;
HEAP32[(HEAP32[17821] | 0) + 8 >> 2] = $79;
$82 = __ZN28InvertibleDynamicStringArray19NewInvertibleArrayHEiPKcz(-1, 0, $vararg_buffer178) | 0;
HEAP32[17830] = $82;
HEAP32[(HEAP32[17821] | 0) + 12 >> 2] = $82;
$85 = __ZN28InvertibleDynamicStringArray19NewInvertibleArrayHEiPKcz(-1, 0, $vararg_buffer180) | 0;
HEAP32[17831] = $85;
HEAP32[(HEAP32[17821] | 0) + 16 >> 2] = $85;
$88 = __ZN28InvertibleDynamicStringArray19NewInvertibleArrayHEiPKcz(-1, 0, $vararg_buffer182) | 0;
HEAP32[17832] = $88;
HEAP32[(HEAP32[17821] | 0) + 20 >> 2] = $88;
$91 = __ZN28InvertibleDynamicStringArray19NewInvertibleArrayHEiPKcz(-1, 0, $vararg_buffer184) | 0;
HEAP32[17833] = $91;
HEAP32[(HEAP32[17821] | 0) + 24 >> 2] = $91;
$94 = __ZN28InvertibleDynamicStringArray19NewInvertibleArrayHEiPKcz(-1, 0, $vararg_buffer186) | 0;
HEAP32[17834] = $94;
HEAP32[(HEAP32[17821] | 0) + 28 >> 2] = $94;
$97 = __ZN28InvertibleDynamicStringArray19NewInvertibleArrayHEiPKcz(-1, 0, $vararg_buffer188) | 0;
HEAP32[17835] = $97;
HEAP32[(HEAP32[17821] | 0) + 32 >> 2] = $97;
$100 = __ZN28InvertibleDynamicStringArray19NewInvertibleArrayHEiPKcz(-1, 0, $vararg_buffer190) | 0;
HEAP32[17836] = $100;
HEAP32[(HEAP32[17821] | 0) + 48 >> 2] = $100;
STACKTOP = sp;
return;
}
function __ZN7Gesture8transferER9TransformP5JointS3_($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$04069 = 0, $$04069$in = 0, $$04672 = 0, $$04672$in = 0, $$1 = 0, $$142 = 0, $$2 = 0, $$243 = 0, $$3 = 0, $$344 = 0, $$4 = 0, $$445 = 0, $$pr = 0, $$pre$phi84Z2D = 0, $$pre$phiZ2D = 0, $101 = 0, $106 = 0, $110 = 0, $113 = 0, $116 = 0, $118 = 0, $120 = 0, $121 = 0, $123 = 0, $126 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $136 = 0, $139 = 0, $144 = 0, $146 = 0, $149 = 0, $15 = 0, $152 = 0, $157 = 0, $159 = 0, $16 = 0, $161 = 0, $166 = 0, $170 = 0, $172 = 0, $173 = 0, $175 = 0, $178 = 0, $18 = 0, $181 = 0, $183 = 0, $185 = 0, $189 = 0, $192 = 0, $195 = 0, $197 = 0, $199 = 0, $20 = 0, $201 = 0, $203 = 0, $205 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $38 = 0, $4 = 0, $41 = 0, $47 = 0, $5 = 0, $53 = 0, $54 = 0, $56 = 0, $59 = 0, $6 = 0, $61 = 0, $63 = 0, $67 = 0, $68 = 0, $7 = 0, $70 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $79 = 0, $84 = 0, $86 = 0, $89 = 0, $92 = 0, $97 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, dest = 0, label = 0, sp = 0, stop = 0, $41$looptemp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 160 | 0;
$vararg_buffer23 = sp + 72 | 0;
$vararg_buffer21 = sp + 64 | 0;
$vararg_buffer18 = sp + 56 | 0;
$vararg_buffer16 = sp + 48 | 0;
$vararg_buffer13 = sp + 40 | 0;
$vararg_buffer9 = sp + 32 | 0;
$vararg_buffer6 = sp + 24 | 0;
$vararg_buffer3 = sp + 16 | 0;
$vararg_buffer = sp;
$4 = sp + 144 | 0;
$5 = sp + 128 | 0;
$6 = sp + 96 | 0;
$7 = sp + 80 | 0;
if (0) {
if (!$3) $15 = 61277; else $15 = HEAP32[$3 >> 2] | 0;
if (!$2) $16 = 61277; else $16 = HEAP32[$2 >> 2] | 0;
HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 4 >> 2];
HEAP32[$vararg_buffer + 4 >> 2] = $15;
HEAP32[$vararg_buffer + 8 >> 2] = $16;
__Z7eprintfPKcz(29532, $vararg_buffer);
}
HEAP32[$4 + 4 >> 2] = 10;
$18 = $4 + 12 | 0;
HEAP32[$18 >> 2] = 0;
HEAP32[$4 + 8 >> 2] = 10;
$20 = _malloc(40) | 0;
HEAP32[$4 >> 2] = $20;
if (!$20) {
HEAP32[$vararg_buffer3 >> 2] = 10;
__Z7eprintfPKcz(57303, $vararg_buffer3);
$22 = ___cxa_allocate_exception(4) | 0;
HEAP32[$22 >> 2] = 1;
___cxa_throw($22 | 0, 32, 0);
}
dest = $20;
stop = dest + 40 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
__THREW__ = 0;
invoke_vii(145, $3 | 0, $4 | 0);
$23 = __THREW__;
__THREW__ = 0;
if ($23 & 1) {
$59 = ___cxa_find_matching_catch_2() | 0;
$$4 = $59;
$$445 = tempRet0;
} else {
HEAP32[$5 + 4 >> 2] = 10;
$26 = $5 + 12 | 0;
HEAP32[$26 >> 2] = 0;
$27 = $5 + 8 | 0;
HEAP32[$27 >> 2] = 10;
$28 = _malloc(40) | 0;
HEAP32[$5 >> 2] = $28;
if (!$28) {
__THREW__ = 0;
HEAP32[$vararg_buffer6 >> 2] = 10;
invoke_vii(115, 57303, $vararg_buffer6 | 0);
$30 = __THREW__;
__THREW__ = 0;
if (!($30 & 1)) {
HEAP32[$27 >> 2] = 0;
$32 = ___cxa_allocate_exception(4) | 0;
HEAP32[$32 >> 2] = 1;
__THREW__ = 0;
invoke_viii(75, $32 | 0, 32, 0);
__THREW__ = 0;
}
$61 = ___cxa_find_matching_catch_2() | 0;
$$3 = $61;
$$344 = tempRet0;
} else {
$34 = ($2 | 0) != 0;
dest = $28;
stop = dest + 40 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
L22 : do if ($34) {
__THREW__ = 0;
invoke_vii(145, $2 | 0, $5 | 0);
$35 = __THREW__;
__THREW__ = 0;
if ($35 & 1) label = 24; else {
$$pr = HEAP32[$18 >> 2] | 0;
$38 = HEAP32[$26 >> 2] | 0;
if (($$pr | 0) > 0 & ($38 | 0) > 0) {
$41 = $$pr;
$47 = $38;
while (1) {
if (($41 | 0) < 1) $53 = 0; else $53 = HEAP32[(HEAP32[$4 >> 2] | 0) + ($41 + -1 << 2) >> 2] | 0;
if (($47 | 0) < 1) $54 = 0; else $54 = HEAP32[(HEAP32[$5 >> 2] | 0) + ($47 + -1 << 2) >> 2] | 0;
if (($53 | 0) != ($54 | 0)) {
$67 = $47;
label = 25;
break L22;
}
$41$looptemp = $41;
$41 = $41 + -1 | 0;
HEAP32[$18 >> 2] = $41;
$56 = $47 + -1 | 0;
HEAP32[$26 >> 2] = $56;
if (!(($41$looptemp | 0) > 1 & ($47 | 0) > 1)) {
$67 = $56;
label = 25;
break;
} else $47 = $56;
}
} else {
$67 = $38;
label = 25;
}
}
} else {
$67 = 0;
label = 25;
} while (0);
L34 : do if ((label | 0) == 25) {
if (0) {
__THREW__ = 0;
HEAP32[$vararg_buffer9 >> 2] = HEAP32[$18 >> 2];
HEAP32[$vararg_buffer9 + 4 >> 2] = $67;
invoke_vii(115, 29568, $vararg_buffer9 | 0);
$68 = __THREW__;
__THREW__ = 0;
if ($68 & 1) {
label = 24;
break;
}
}
__THREW__ = 0;
invoke_vi(134, $1 | 0);
$70 = __THREW__;
__THREW__ = 0;
if ($70 & 1) label = 24; else {
$72 = HEAP32[$18 >> 2] | 0;
L40 : do if (($72 | 0) > 0) {
$74 = $6 + 4 | 0;
$75 = $6 + 8 | 0;
$76 = $6 + 12 | 0;
$77 = $0 + 4 | 0;
$$04672$in = $72;
$79 = $72;
while (1) {
$$04672 = $$04672$in + -1 | 0;
if (($79 | 0) < ($$04672$in | 0)) $84 = 0; else $84 = HEAP32[(HEAP32[$4 >> 2] | 0) + ($$04672 << 2) >> 2] | 0;
HEAPF32[$6 >> 2] = Math_fround(0.0);
HEAPF32[$74 >> 2] = Math_fround(0.0);
HEAPF32[$75 >> 2] = Math_fround(0.0);
HEAPF32[$76 >> 2] = Math_fround(1.0);
if (!0) $$pre$phiZ2D = $84 + 4 | 0; else {
__THREW__ = 0;
HEAP32[$vararg_buffer13 >> 2] = HEAP32[$84 >> 2];
invoke_vii(115, 29619, $vararg_buffer13 | 0);
$86 = __THREW__;
__THREW__ = 0;
if ($86 & 1) break;
$89 = $84 + 4 | 0;
$92 = HEAP32[(HEAP32[$77 >> 2] | 0) + (HEAP32[$89 >> 2] << 2) >> 2] | 0;
__THREW__ = 0;
invoke_viii(HEAP32[(HEAP32[$92 >> 2] | 0) + 64 >> 2] | 0, $92 | 0, HEAP32[16082] | 0, 3);
$97 = __THREW__;
__THREW__ = 0;
if ($97 & 1) break;
__THREW__ = 0;
invoke_vi(122, 10);
$99 = __THREW__;
__THREW__ = 0;
if ($99 & 1) break; else $$pre$phiZ2D = $89;
}
$106 = HEAP32[(HEAP32[$77 >> 2] | 0) + (HEAP32[$$pre$phiZ2D >> 2] << 2) >> 2] | 0;
__THREW__ = 0;
invoke_vii(HEAP32[(HEAP32[$106 >> 2] | 0) + 8 >> 2] | 0, $106 | 0, $6 | 0);
$110 = __THREW__;
__THREW__ = 0;
if ($110 & 1) break;
if (0) {
__THREW__ = 0;
invoke_vii(115, 29667, $vararg_buffer16 | 0);
$113 = __THREW__;
__THREW__ = 0;
if ($113 & 1) break;
__THREW__ = 0;
invoke_viii(85, $6 | 0, HEAP32[16082] | 0, 3);
$116 = __THREW__;
__THREW__ = 0;
if ($116 & 1) break;
__THREW__ = 0;
invoke_vi(122, 10);
$118 = __THREW__;
__THREW__ = 0;
if ($118 & 1) break;
}
__THREW__ = 0;
$120 = invoke_ii(25, $84 | 0) | 0;
$121 = __THREW__;
__THREW__ = 0;
if ($121 & 1) break;
__THREW__ = 0;
invoke_viii(86, $1 | 0, $120 | 0, $6 | 0);
$123 = __THREW__;
__THREW__ = 0;
if ($123 & 1) break;
if (($$04672$in | 0) <= 1) break L40;
$$04672$in = $$04672;
$79 = HEAP32[$18 >> 2] | 0;
}
$101 = ___cxa_find_matching_catch_2() | 0;
$$2 = $101;
$$243 = tempRet0;
break L34;
} while (0);
L64 : do if ($34) {
__THREW__ = 0;
invoke_vi(135, $6 | 0);
$126 = __THREW__;
__THREW__ = 0;
L66 : do if ($126 & 1) label = 52; else {
$128 = HEAP32[$26 >> 2] | 0;
L68 : do if (($128 | 0) > 0) {
$130 = $7 + 4 | 0;
$131 = $7 + 8 | 0;
$132 = $7 + 12 | 0;
$133 = $0 + 4 | 0;
$$04069$in = $128;
$139 = $128;
while (1) {
$$04069 = $$04069$in + -1 | 0;
if (($139 | 0) < ($$04069$in | 0)) $144 = 0; else $144 = HEAP32[(HEAP32[$5 >> 2] | 0) + ($$04069 << 2) >> 2] | 0;
if (!0) $$pre$phi84Z2D = $144 + 4 | 0; else {
__THREW__ = 0;
HEAP32[$vararg_buffer18 >> 2] = HEAP32[$144 >> 2];
invoke_vii(115, 29675, $vararg_buffer18 | 0);
$146 = __THREW__;
__THREW__ = 0;
if ($146 & 1) {
label = 60;
break;
}
$149 = $144 + 4 | 0;
$152 = HEAP32[(HEAP32[$133 >> 2] | 0) + (HEAP32[$149 >> 2] << 2) >> 2] | 0;
__THREW__ = 0;
invoke_viii(HEAP32[(HEAP32[$152 >> 2] | 0) + 64 >> 2] | 0, $152 | 0, HEAP32[16082] | 0, 3);
$157 = __THREW__;
__THREW__ = 0;
if ($157 & 1) {
label = 60;
break;
}
__THREW__ = 0;
invoke_vi(122, 10);
$159 = __THREW__;
__THREW__ = 0;
if ($159 & 1) {
label = 60;
break;
} else $$pre$phi84Z2D = $149;
}
HEAPF32[$7 >> 2] = Math_fround(0.0);
HEAPF32[$130 >> 2] = Math_fround(0.0);
HEAPF32[$131 >> 2] = Math_fround(0.0);
HEAPF32[$132 >> 2] = Math_fround(1.0);
$166 = HEAP32[(HEAP32[$133 >> 2] | 0) + (HEAP32[$$pre$phi84Z2D >> 2] << 2) >> 2] | 0;
__THREW__ = 0;
invoke_vii(HEAP32[(HEAP32[$166 >> 2] | 0) + 8 >> 2] | 0, $166 | 0, $7 | 0);
$170 = __THREW__;
__THREW__ = 0;
if ($170 & 1) {
label = 68;
break;
}
__THREW__ = 0;
$172 = invoke_ii(25, $144 | 0) | 0;
$173 = __THREW__;
__THREW__ = 0;
if ($173 & 1) {
label = 68;
break;
}
__THREW__ = 0;
invoke_viii(86, $6 | 0, $172 | 0, $7 | 0);
$175 = __THREW__;
__THREW__ = 0;
if ($175 & 1) {
label = 68;
break;
}
if (0) {
__THREW__ = 0;
invoke_vii(115, 29667, $vararg_buffer21 | 0);
$178 = __THREW__;
__THREW__ = 0;
if ($178 & 1) {
label = 68;
break;
}
__THREW__ = 0;
invoke_viii(85, $7 | 0, HEAP32[16082] | 0, 3);
$181 = __THREW__;
__THREW__ = 0;
if ($181 & 1) {
label = 68;
break;
}
__THREW__ = 0;
invoke_vi(122, 10);
$183 = __THREW__;
__THREW__ = 0;
if ($183 & 1) {
label = 68;
break;
}
}
if (($$04069$in | 0) <= 1) break L68;
$$04069$in = $$04069;
$139 = HEAP32[$26 >> 2] | 0;
}
if ((label | 0) == 60) {
$161 = ___cxa_find_matching_catch_2() | 0;
$$1 = $161;
$$142 = tempRet0;
break L66;
} else if ((label | 0) == 68) {
$185 = ___cxa_find_matching_catch_2() | 0;
$$1 = $185;
$$142 = tempRet0;
break L66;
}
} while (0);
__THREW__ = 0;
invoke_vi(136, $6 | 0);
$134 = __THREW__;
__THREW__ = 0;
if ($134 & 1) label = 52; else {
__THREW__ = 0;
invoke_viii(86, $1 | 0, $6 | 0, $6 + 12 | 0);
$189 = __THREW__;
__THREW__ = 0;
if ($189 & 1) label = 52; else break L64;
}
} while (0);
if ((label | 0) == 52) {
$136 = ___cxa_find_matching_catch_2() | 0;
$$1 = $136;
$$142 = tempRet0;
}
$$2 = $$1;
$$243 = $$142;
break L34;
} while (0);
if (0) {
__THREW__ = 0;
invoke_vii(115, 29723, $vararg_buffer23 | 0);
$192 = __THREW__;
__THREW__ = 0;
if ($192 & 1) {
label = 24;
break;
}
__THREW__ = 0;
invoke_viii(87, $1 | 0, HEAP32[16082] | 0, 3);
$195 = __THREW__;
__THREW__ = 0;
if ($195 & 1) {
label = 24;
break;
}
__THREW__ = 0;
invoke_vi(122, 10);
$197 = __THREW__;
__THREW__ = 0;
if ($197 & 1) {
label = 24;
break;
}
}
$199 = HEAP32[$5 >> 2] | 0;
if ($199 | 0) {
_free($199);
HEAP32[$5 >> 2] = 0;
}
$201 = HEAP32[$4 >> 2] | 0;
if (!$201) {
STACKTOP = sp;
return;
}
_free($201);
HEAP32[$4 >> 2] = 0;
STACKTOP = sp;
return;
}
} while (0);
if ((label | 0) == 24) {
$63 = ___cxa_find_matching_catch_2() | 0;
$$2 = $63;
$$243 = tempRet0;
}
$203 = HEAP32[$5 >> 2] | 0;
if ($203 | 0) {
_free($203);
HEAP32[$5 >> 2] = 0;
}
HEAP32[$26 >> 2] = 0;
HEAP32[$27 >> 2] = 0;
$$3 = $$2;
$$344 = $$243;
}
$$4 = $$3;
$$445 = $$344;
}
$205 = HEAP32[$4 >> 2] | 0;
if (!$205) ___resumeException($$4 | 0);
_free($205);
HEAP32[$4 >> 2] = 0;
___resumeException($$4 | 0);
}
function __ZNK14SiGMLHandshape17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$1 = 0, $$145 = 0, $10 = 0, $103 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $127 = 0, $136 = 0, $138 = 0, $142 = 0, $143 = f0, $157 = f0, $161 = f0, $165 = f0, $17 = 0, $171 = 0, $173 = 0, $174 = 0, $175 = 0, $177 = 0, $179 = 0, $181 = 0, $187 = 0, $189 = 0, $190 = 0, $192 = 0, $194 = 0, $196 = 0, $20 = 0, $21 = 0, $210 = 0, $219 = 0, $228 = 0, $235 = 0, $242 = 0, $245 = 0, $27 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $47 = 0, $49 = 0, $5 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $61 = 0, $67 = 0, $69 = 0, $7 = 0, $72 = 0, $87 = 0, $89 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $indvars$iv = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 80 | 0;
$3 = sp + 56 | 0;
$4 = sp + 40 | 0;
$5 = sp + 72 | 0;
$6 = sp + 24 | 0;
$7 = sp;
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, 0, 53138, HEAP32[$0 >> 2] | 0, HEAP32[17751] | 0);
$10 = $0 + 4 | 0;
if (HEAP8[$10 >> 0] | 0) {
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, (HEAP16[36078] | 0) + 1 | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 33169, 14) | 0;
$17 = (HEAP8[$10 >> 0] | 0) != 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $17 ? 52414 : 52419, $17 ? 4 : 5) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 34937, 2) | 0;
}
$20 = $0 + 8 | 0;
$21 = HEAP32[$20 >> 2] | 0;
do if (!$21) {
$32 = $0 + 12 | 0;
if (!(Math_fround(HEAPF32[$32 >> 2]) != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$0 + 16 >> 2]) != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$0 + 20 >> 2]) != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$0 + 24 >> 2]) != Math_fround(-100.0))) break;
HEAP32[$3 >> 2] = HEAP32[$32 >> 2];
HEAP32[$3 + 4 >> 2] = HEAP32[$32 + 4 >> 2];
HEAP32[$3 + 8 >> 2] = HEAP32[$32 + 8 >> 2];
HEAP32[$3 + 12 >> 2] = HEAP32[$32 + 12 >> 2];
__THREW__ = 0;
invoke_vii(157, $1 | 0, (HEAP16[36078] | 0) + 1 | 0);
$47 = __THREW__;
__THREW__ = 0;
if (!($47 & 1)) {
__THREW__ = 0;
$49 = invoke_iiii(18, $1 | 0, 53219, 8) | 0;
$50 = __THREW__;
__THREW__ = 0;
if (!($50 & 1)) {
__THREW__ = 0;
invoke_iiii(18, $49 | 0, 49551, 2) | 0;
$52 = __THREW__;
__THREW__ = 0;
if (!($52 & 1)) {
__THREW__ = 0;
invoke_vii(158, $3 | 0, $1 | 0);
$54 = __THREW__;
__THREW__ = 0;
if (!($54 & 1)) {
__THREW__ = 0;
invoke_iiii(18, $1 | 0, 34937, 2) | 0;
$56 = __THREW__;
__THREW__ = 0;
if (!($56 & 1)) break;
}
}
}
}
$58 = ___cxa_find_matching_catch_2() | 0;
$$1 = $58;
$$145 = tempRet0;
___resumeException($$1 | 0);
} else {
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, (HEAP16[36078] | 0) + 1 | 0);
$27 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 53219, 8) | 0, 49551, 2) | 0;
$29 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17200] | 0, $21) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($27, $29, _strlen($29) | 0) | 0, 34937, 2) | 0;
} while (0);
$61 = HEAP32[$0 + 28 >> 2] | 0;
do if (!$61) {
$72 = $0 + 32 | 0;
if (!(Math_fround(HEAPF32[$72 >> 2]) != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$0 + 36 >> 2]) != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$0 + 40 >> 2]) != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$0 + 44 >> 2]) != Math_fround(-100.0))) break;
HEAP32[$4 >> 2] = HEAP32[$72 >> 2];
HEAP32[$4 + 4 >> 2] = HEAP32[$72 + 4 >> 2];
HEAP32[$4 + 8 >> 2] = HEAP32[$72 + 8 >> 2];
HEAP32[$4 + 12 >> 2] = HEAP32[$72 + 12 >> 2];
__THREW__ = 0;
invoke_vii(157, $1 | 0, (HEAP16[36078] | 0) + 1 | 0);
$87 = __THREW__;
__THREW__ = 0;
if (!($87 & 1)) {
__THREW__ = 0;
$89 = invoke_iiii(18, $1 | 0, 53165, 8) | 0;
$90 = __THREW__;
__THREW__ = 0;
if (!($90 & 1)) {
__THREW__ = 0;
invoke_iiii(18, $89 | 0, 49551, 2) | 0;
$92 = __THREW__;
__THREW__ = 0;
if (!($92 & 1)) {
__THREW__ = 0;
invoke_vii(158, $4 | 0, $1 | 0);
$94 = __THREW__;
__THREW__ = 0;
if (!($94 & 1)) {
__THREW__ = 0;
invoke_iiii(18, $1 | 0, 34937, 2) | 0;
$96 = __THREW__;
__THREW__ = 0;
if (!($96 & 1)) break;
}
}
}
}
$98 = ___cxa_find_matching_catch_2() | 0;
$$1 = $98;
$$145 = tempRet0;
___resumeException($$1 | 0);
} else {
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, (HEAP16[36078] | 0) + 1 | 0);
$67 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 53165, 8) | 0, 49551, 2) | 0;
$69 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17201] | 0, $61) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($67, $69, _strlen($69) | 0) | 0, 34937, 2) | 0;
} while (0);
HEAP8[$5 >> 0] = 98;
HEAP8[$5 + 1 >> 0] = 101;
HEAP8[$5 + 2 >> 0] = 110;
HEAP8[$5 + 3 >> 0] = 100;
$103 = $5 + 4 | 0;
HEAP8[$103 >> 0] = 0;
HEAP8[$5 + 5 >> 0] = 0;
$105 = $0 + 12 | 0;
$106 = $0 + 16 | 0;
$107 = $0 + 20 | 0;
$108 = $0 + 24 | 0;
$indvars$iv = 0;
L36 : while (1) {
HEAP8[$103 >> 0] = $indvars$iv + 49;
$127 = HEAP32[$0 + 60 + ($indvars$iv << 2) >> 2] | 0;
do if (!$127) {
if (($indvars$iv | 0) > 0) {
$142 = $0 + 80 + ($indvars$iv << 4) | 0;
$143 = Math_fround(HEAPF32[$142 >> 2]);
if (!($143 != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$0 + 80 + ($indvars$iv << 4) + 4 >> 2]) != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$0 + 80 + ($indvars$iv << 4) + 8 >> 2]) != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$0 + 80 + ($indvars$iv << 4) + 12 >> 2]) != Math_fround(-100.0))) {
label = 50;
break;
}
if ($143 == Math_fround(HEAPF32[$105 >> 2])) {
$157 = Math_fround(HEAPF32[$0 + 80 + ($indvars$iv << 4) + 4 >> 2]);
if ($157 == Math_fround(HEAPF32[$106 >> 2])) {
$161 = Math_fround(HEAPF32[$0 + 80 + ($indvars$iv << 4) + 8 >> 2]);
if ($161 == Math_fround(HEAPF32[$107 >> 2])) {
$165 = Math_fround(HEAPF32[$0 + 80 + ($indvars$iv << 4) + 12 >> 2]);
if (!($165 != Math_fround(HEAPF32[$108 >> 2]))) {
label = 50;
break;
}
}
}
};
HEAP32[$6 >> 2] = HEAP32[$142 >> 2];
HEAP32[$6 + 4 >> 2] = HEAP32[$142 + 4 >> 2];
HEAP32[$6 + 8 >> 2] = HEAP32[$142 + 8 >> 2];
HEAP32[$6 + 12 >> 2] = HEAP32[$142 + 12 >> 2];
__THREW__ = 0;
invoke_vii(157, $1 | 0, (HEAP16[36078] | 0) + 1 | 0);
$171 = __THREW__;
__THREW__ = 0;
if ($171 & 1) break L36;
$173 = _strlen($5) | 0;
__THREW__ = 0;
$174 = invoke_iiii(18, $1 | 0, $5 | 0, $173 | 0) | 0;
$175 = __THREW__;
__THREW__ = 0;
if ($175 & 1) break L36;
__THREW__ = 0;
invoke_iiii(18, $174 | 0, 49551, 2) | 0;
$177 = __THREW__;
__THREW__ = 0;
if ($177 & 1) break L36;
__THREW__ = 0;
invoke_vii(158, $6 | 0, $1 | 0);
$179 = __THREW__;
__THREW__ = 0;
if ($179 & 1) break L36;
__THREW__ = 0;
invoke_iiii(18, $1 | 0, 34937, 2) | 0;
$181 = __THREW__;
__THREW__ = 0;
if ($181 & 1) break L36; else label = 50;
}
} else if (($127 | 0) == (HEAP32[$20 >> 2] | 0)) label = 50; else {
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, (HEAP16[36078] | 0) + 1 | 0);
$136 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $5, _strlen($5) | 0) | 0, 49551, 2) | 0;
$138 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17200] | 0, $127) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($136, $138, _strlen($138) | 0) | 0, 34937, 2) | 0;
label = 50;
} while (0);
if ((label | 0) == 50) {
label = 0;
if (($indvars$iv | 0) >= 4) {
label = 28;
break;
}
}
$indvars$iv = $indvars$iv + 1 | 0;
}
do if ((label | 0) == 28) {
$109 = $0 + 160 | 0;
if (Math_fround(HEAPF32[$109 >> 2]) != Math_fround(-100.0)) label = 52; else if (Math_fround(HEAPF32[$0 + 164 >> 2]) != Math_fround(-100.0)) label = 52; else if (Math_fround(HEAPF32[$0 + 168 >> 2]) != Math_fround(-100.0)) label = 52; else if (Math_fround(HEAPF32[$0 + 172 >> 2]) != Math_fround(-100.0)) label = 52; else if (Math_fround(HEAPF32[$0 + 176 >> 2]) != Math_fround(-100.0)) label = 52;
if ((label | 0) == 52) {
HEAP32[$7 >> 2] = HEAP32[$109 >> 2];
HEAP32[$7 + 4 >> 2] = HEAP32[$109 + 4 >> 2];
HEAP32[$7 + 8 >> 2] = HEAP32[$109 + 8 >> 2];
HEAP32[$7 + 12 >> 2] = HEAP32[$109 + 12 >> 2];
HEAP32[$7 + 16 >> 2] = HEAP32[$109 + 16 >> 2];
__THREW__ = 0;
invoke_vii(157, $1 | 0, (HEAP16[36078] | 0) + 1 | 0);
$187 = __THREW__;
__THREW__ = 0;
if ($187 & 1) break;
__THREW__ = 0;
$189 = invoke_iiii(18, $1 | 0, 49521, 5) | 0;
$190 = __THREW__;
__THREW__ = 0;
if ($190 & 1) break;
__THREW__ = 0;
invoke_iiii(18, $189 | 0, 49551, 2) | 0;
$192 = __THREW__;
__THREW__ = 0;
if ($192 & 1) break;
__THREW__ = 0;
invoke_vii(159, $7 | 0, $1 | 0);
$194 = __THREW__;
__THREW__ = 0;
if ($194 & 1) break;
__THREW__ = 0;
invoke_iiii(18, $1 | 0, 34937, 2) | 0;
$196 = __THREW__;
__THREW__ = 0;
if ($196 & 1) break;
}
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, 0, 53190, HEAP32[$0 + 48 >> 2] | 0, HEAP32[17753] | 0);
__Z22printDigitsAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKcs($1, 0, 53266, HEAP16[$0 + 52 >> 1] | 0);
__Z22printDigitsAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKcs($1, 0, 53083, HEAP16[$0 + 54 >> 1] | 0);
__Z25printDigitPairAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKc10DigitIndexS7_($1, 0, 53393, HEAP32[$0 + 180 >> 2] | 0, HEAP32[$0 + 184 >> 2] | 0);
$210 = HEAP32[$0 + 204 >> 2] | 0;
if ($210 | 0) __Z16printAttribValueRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKcS6_($1, 0, 53381, __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17192] | 0, $210) | 0);
__Z25printDigitPairAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKc10DigitIndexS7_($1, 0, 53362, HEAP32[$0 + 188 >> 2] | 0, HEAP32[$0 + 192 >> 2] | 0);
$219 = HEAP32[$0 + 208 >> 2] | 0;
if ($219 | 0) __Z16printAttribValueRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKcS6_($1, 0, 53343, __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17192] | 0, $219) | 0);
__Z25printDigitPairAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKc10DigitIndexS7_($1, 0, 53330, HEAP32[$0 + 196 >> 2] | 0, HEAP32[$0 + 200 >> 2] | 0);
$228 = HEAP32[$0 + 212 >> 2] | 0;
if ($228 | 0) __Z16printAttribValueRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKcS6_($1, 0, 53125, __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17192] | 0, $228) | 0);
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, 0, 33184, HEAP32[$0 + 56 >> 2] | 0, HEAP32[17754] | 0);
$235 = $0 + 216 | 0;
if (!(HEAP8[$235 >> 0] | 0)) {
STACKTOP = sp;
return;
}
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, (HEAP16[36078] | 0) + 1 | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 33202, 15) | 0;
$242 = (HEAP8[$235 >> 0] | 0) != 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $242 ? 52414 : 52419, $242 ? 4 : 5) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 34937, 2) | 0;
STACKTOP = sp;
return;
} while (0);
$245 = ___cxa_find_matching_catch_2() | 0;
$$1 = $245;
$$145 = tempRet0;
___resumeException($$1 | 0);
}
function __Z16GetNonmanualDefsP7XMLCellPKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$012$i$i$i = 0, $$01215$i$i$i = 0, $$01216$i$i$i = 0, $$016$i = 0, $$045 = 0, $$06$i$i = 0, $$06$i2$i = 0, $$1 = 0, $$135 = 0, $$pr21$i = 0, $$pre$i$i41 = 0, $$pre$i5$i = 0, $$pre$phi$iZ2D = 0, $$sink$i$i$i = 0, $$sink$i$i$i42 = 0, $10 = 0, $100 = 0, $103 = 0, $104 = 0, $110 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $121 = 0, $123 = 0, $129 = 0, $131 = 0, $134 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $142 = 0, $145 = 0, $149 = 0, $15 = 0, $152 = 0, $154 = 0, $155 = 0, $156 = 0, $163 = 0, $169 = 0, $17 = 0, $171 = 0, $174 = 0, $175 = 0, $188 = 0, $192 = 0, $193 = 0, $197 = 0, $2 = 0, $200 = 0, $201 = 0, $203 = 0, $204 = 0, $213 = 0, $215 = 0, $222 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $23 = 0, $25 = 0, $26 = 0, $28 = 0, $39 = 0, $45 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $69 = 0, $70 = 0, $74 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $84 = 0, $85 = 0, $91 = 0, $93 = 0, $94 = 0, $98 = 0, $sext33$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer23 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 96 | 0;
$vararg_buffer23 = sp + 72 | 0;
$vararg_buffer18 = sp + 56 | 0;
$vararg_buffer14 = sp + 48 | 0;
$vararg_buffer12 = sp + 40 | 0;
$vararg_buffer10 = sp + 32 | 0;
$vararg_buffer8 = sp + 24 | 0;
$vararg_buffer5 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$2 = __Znwj(16) | 0;
HEAP32[$2 + 4 >> 2] = 10;
HEAP32[$2 + 12 >> 2] = 0;
$5 = $2 + 8 | 0;
HEAP32[$5 >> 2] = 100;
$6 = _malloc(400) | 0;
HEAP32[$2 >> 2] = $6;
if (!$6) {
__THREW__ = 0;
HEAP32[$vararg_buffer >> 2] = 100;
invoke_vii(115, 46957, $vararg_buffer | 0);
$8 = __THREW__;
__THREW__ = 0;
if (!($8 & 1)) {
HEAP32[$5 >> 2] = 0;
$10 = ___cxa_allocate_exception(4) | 0;
HEAP32[$10 >> 2] = 1;
__THREW__ = 0;
invoke_viii(75, $10 | 0, 32, 0);
__THREW__ = 0;
}
$50 = ___cxa_find_matching_catch_2() | 0;
$51 = tempRet0;
__ZdlPv($2);
$$1 = $50;
$$135 = $51;
___resumeException($$1 | 0);
}
HEAP32[$6 >> 2] = 0;
HEAP32[$6 + 4 >> 2] = 0;
HEAP32[$6 + 8 >> 2] = 0;
$15 = 3;
do {
HEAP32[(HEAP32[$2 >> 2] | 0) + ($15 << 2) >> 2] = 0;
$15 = $15 + 1 | 0;
} while (($15 | 0) != 100);
HEAP32[16660] = $2;
$17 = __Znwj(28) | 0;
HEAP32[$17 + 20 >> 2] = 0;
HEAP32[$17 + 24 >> 2] = 0;
HEAP32[$17 + 8 >> 2] = 0;
HEAP32[$17 + 16 >> 2] = 0;
HEAP32[$17 + 12 >> 2] = 100;
$23 = _malloc(800) | 0;
HEAP32[$17 >> 2] = $23;
$25 = $17 + 4 | 0;
if (!$23) {
HEAP32[$25 >> 2] = 0;
__THREW__ = 0;
HEAP32[$vararg_buffer1 >> 2] = 100;
HEAP32[$vararg_buffer1 + 4 >> 2] = 8;
invoke_vii(115, 57708, $vararg_buffer1 | 0);
$26 = __THREW__;
__THREW__ = 0;
if (!($26 & 1)) {
$28 = ___cxa_allocate_exception(4) | 0;
HEAP32[$28 >> 2] = 1;
__THREW__ = 0;
invoke_viii(75, $28 | 0, 32, 0);
__THREW__ = 0;
}
$52 = ___cxa_find_matching_catch_2() | 0;
$53 = tempRet0;
__ZdlPv($17);
$$1 = $52;
$$135 = $53;
___resumeException($$1 | 0);
}
HEAP32[$25 >> 2] = 100;
HEAP32[$23 >> 2] = 0;
HEAP16[$23 + 4 >> 1] = 0;
HEAP32[$23 + 8 >> 2] = 0;
HEAP16[$23 + 12 >> 1] = 0;
HEAP32[$23 + 16 >> 2] = 0;
HEAP16[(HEAP32[$17 >> 2] | 0) + 20 >> 1] = 0;
if ((HEAP32[$25 >> 2] | 0) > 3) {
$39 = 3;
do {
HEAP32[(HEAP32[$17 >> 2] | 0) + ($39 << 3) >> 2] = 0;
HEAP16[(HEAP32[$17 >> 2] | 0) + ($39 << 3) + 4 >> 1] = 0;
$39 = $39 + 1 | 0;
} while (($39 | 0) < (HEAP32[$25 >> 2] | 0));
}
HEAP32[16659] = $17;
$45 = __Znwj(16) | 0;
HEAP32[$45 + 4 >> 2] = 10;
HEAP32[$45 + 12 >> 2] = 0;
HEAP32[$45 >> 2] = 0;
HEAP32[$45 + 8 >> 2] = 0;
HEAP32[16661] = $45;
if (!$0) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer5 >> 2] = $1;
__Z7eprintfPKcz(47010, $vararg_buffer5);
__Z7eprintfPKcz(47054, $vararg_buffer8);
STACKTOP = sp;
return;
}
$55 = HEAP32[$0 + 8 >> 2] | 0;
if (!$55) {
__THREW__ = 0;
invoke_vi(110, $0 | 0);
$57 = __THREW__;
__THREW__ = 0;
if ($57 & 1) {
$59 = ___cxa_find_matching_catch_2() | 0;
$60 = tempRet0;
__ZdlPv($0);
$$1 = $59;
$$135 = $60;
___resumeException($$1 | 0);
} else {
__ZdlPv($0);
STACKTOP = sp;
return;
}
}
$61 = $55 + 12 | 0;
$62 = HEAP32[$61 >> 2] | 0;
if (($62 | 0) > 0) {
$$045 = 0;
do {
if ((HEAP32[$61 >> 2] | 0) > ($$045 | 0)) $70 = HEAP32[(HEAP32[$55 >> 2] | 0) + ($$045 << 2) >> 2] | 0; else $70 = 0;
$69 = HEAP32[$70 >> 2] | 0;
do if (!(_strcmp($69, 47093) | 0)) {
$74 = __Z13TokeniseSAMPAPKc(__ZN7XMLCell13attrib_stringEPKc($70, 47099) | 0) | 0;
if (!$74) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(47108, $vararg_buffer12);
break;
}
$76 = $74 + 12 | 0;
if ((HEAP32[$76 >> 2] | 0) < 1) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(47108, $vararg_buffer10);
$79 = HEAP32[$74 >> 2] | 0;
do if ($79 | 0) {
$81 = HEAP32[$76 >> 2] | 0;
if (($81 | 0) > 0) {
$$06$i$i = 0;
$226 = $81;
$84 = $79;
while (1) {
$85 = HEAP32[$84 + ($$06$i$i << 2) >> 2] | 0;
if (!$85) {
$$pre$i$i41 = $84;
$91 = $226;
} else {
_free($85);
HEAP32[(HEAP32[$74 >> 2] | 0) + ($$06$i$i << 2) >> 2] = 0;
$$pre$i$i41 = HEAP32[$74 >> 2] | 0;
$91 = HEAP32[$76 >> 2] | 0;
}
$$06$i$i = $$06$i$i + 1 | 0;
if (($$06$i$i | 0) >= ($91 | 0)) break; else {
$226 = $91;
$84 = $$pre$i$i41;
}
}
if (!$$pre$i$i41) break; else $$pr21$i = $$pre$i$i41;
} else $$pr21$i = $79;
_free($$pr21$i);
} while (0);
__ZdlPv($74);
break;
}
$93 = __ZL18ProcessSeqXMLMorphP7XMLCellb($70, 1) | 0;
$94 = $93;
if (!$93) {
$98 = HEAP32[$74 >> 2] | 0;
do if ($98 | 0) {
$100 = HEAP32[$76 >> 2] | 0;
if (($100 | 0) > 0) {
$$06$i2$i = 0;
$103 = $98;
$227 = $100;
while (1) {
$104 = HEAP32[$103 + ($$06$i2$i << 2) >> 2] | 0;
if (!$104) {
$$pre$i5$i = $103;
$110 = $227;
} else {
_free($104);
HEAP32[(HEAP32[$74 >> 2] | 0) + ($$06$i2$i << 2) >> 2] = 0;
$$pre$i5$i = HEAP32[$74 >> 2] | 0;
$110 = HEAP32[$76 >> 2] | 0;
}
$$06$i2$i = $$06$i2$i + 1 | 0;
if (($$06$i2$i | 0) >= ($110 | 0)) break; else {
$103 = $$pre$i5$i;
$227 = $110;
}
}
if (!$$pre$i5$i) break; else $112 = $$pre$i5$i;
} else $112 = $98;
_free($112);
} while (0);
__ZdlPv($74);
break;
}
L74 : do if ((HEAP32[$76 >> 2] | 0) > 0) {
$$016$i = 0;
while (1) {
$131 = HEAP32[16659] | 0;
$134 = HEAP32[(HEAP32[$74 >> 2] | 0) + ($$016$i << 2) >> 2] | 0;
$137 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($134, HEAP32[$131 + 4 >> 2] | 0) | 0;
$138 = HEAP32[$131 >> 2] | 0;
$139 = $138 + ($137 << 3) | 0;
$140 = $138 + ($137 << 3) + 4 | 0;
switch (HEAP16[$140 >> 1] | 0) {
case 0:
{
$142 = __Znwj(12) | 0;
HEAP32[$142 >> 2] = $134;
HEAP32[$142 + 4 >> 2] = $94;
HEAP32[$142 + 8 >> 2] = 0;
HEAP32[$139 >> 2] = $142;
$145 = $131 + 12 | 0;
HEAP32[$145 >> 2] = (HEAP32[$145 >> 2] | 0) + -1;
$$sink$i$i$i = $131 + 16 | 0;
break;
}
case 1:
{
$149 = $131 + 16 | 0;
HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + -1;
label = 56;
break;
}
default:
label = 56;
}
if ((label | 0) == 56) {
label = 0;
$152 = HEAP32[$139 >> 2] | 0;
$154 = __Znwj(12) | 0;
$155 = $152 + 8 | 0;
$156 = HEAP32[$155 >> 2] | 0;
HEAP32[$154 >> 2] = $134;
HEAP32[$154 + 4 >> 2] = $94;
HEAP32[$154 + 8 >> 2] = $156;
HEAP32[$155 >> 2] = $154;
$$sink$i$i$i = $131 + 8 | 0;
}
HEAP32[$$sink$i$i$i >> 2] = (HEAP32[$$sink$i$i$i >> 2] | 0) + 1;
HEAP16[$140 >> 1] = (HEAP16[$140 >> 1] | 0) + 1 << 16 >> 16;
$163 = $131 + 24 | 0;
HEAP32[$163 >> 2] = (HEAP32[$163 >> 2] | 0) + 1;
$$016$i = $$016$i + 1 | 0;
if (($$016$i | 0) >= (HEAP32[$76 >> 2] | 0)) break L74;
}
} while (0);
$113 = HEAP32[16661] | 0;
$114 = $113 + 12 | 0;
$115 = HEAP32[$114 >> 2] | 0;
if (($115 | 0) >= 0) {
if ((HEAP32[$113 + 8 >> 2] | 0) > ($115 | 0)) {
$$pre$phi$iZ2D = $115 + 1 | 0;
label = 49;
} else {
$121 = HEAP32[$113 + 4 >> 2] | 0;
$123 = $115 + 1 | 0;
__ZN13DynamicArray1IP18AbstractTimedMorphE6resizeEi($113, ($121 | 0) > ($115 | 0) ? $121 : $123 + ($115 >>> 1) | 0);
if ((HEAP32[$114 >> 2] | 0) <= ($115 | 0)) {
$$pre$phi$iZ2D = $123;
label = 49;
}
}
if ((label | 0) == 49) {
label = 0;
HEAP32[$114 >> 2] = $$pre$phi$iZ2D;
}
HEAP32[(HEAP32[$113 >> 2] | 0) + ($115 << 2) >> 2] = $94;
}
$129 = HEAP32[$74 >> 2] | 0;
if ($129 | 0) _free($129);
__ZdlPv($74);
} else {
$169 = HEAP32[17827] | 0;
$171 = __ZNK21InvertibleStringArray14indexFromValueEPKc(HEAP32[17757] | 0, $69) | 0;
$174 = __ZN6KeyOpsIiE12hashFunctionEii($171, HEAP32[$169 + 4 >> 2] | 0) | 0;
$175 = HEAP32[$169 >> 2] | 0;
L98 : do if ((HEAP16[$175 + ($174 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i = HEAP32[$175 + ($174 << 3) >> 2] | 0;
if (!$$01215$i$i$i) label = 65; else {
$$01216$i$i$i = $$01215$i$i$i;
while (1) {
if (__ZN6KeyOpsIiE5eqkeyEii($171, HEAP32[$$01216$i$i$i >> 2] | 0) | 0) break;
$$012$i$i$i = HEAP32[$$01216$i$i$i + 8 >> 2] | 0;
if (!$$012$i$i$i) {
label = 65;
break L98;
} else $$01216$i$i$i = $$012$i$i$i;
}
$$sink$i$i$i42 = $$01216$i$i$i + 4 | 0;
}
} else label = 65; while (0);
if ((label | 0) == 65) {
label = 0;
$$sink$i$i$i42 = $169 + 20 | 0;
}
$188 = HEAP32[$$sink$i$i$i42 >> 2] << 16 >> 16;
if (!$188) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer14 >> 2] = $69;
HEAP32[$vararg_buffer14 + 4 >> 2] = $1;
__Z7eprintfPKcz(47153, $vararg_buffer14);
break;
}
$192 = HEAP32[(HEAP32[17821] | 0) + ($188 << 2) >> 2] | 0;
$193 = __ZN7XMLCell13attrib_stringEPKc($70, 47216) | 0;
if (!$193) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer18 >> 2] = $69;
HEAP32[$vararg_buffer18 + 4 >> 2] = $1;
HEAP32[$vararg_buffer18 + 8 >> 2] = 47216;
__Z7eprintfPKcz(47226, $vararg_buffer18);
break;
}
if (((__ZNK28InvertibleDynamicStringArray14indexFromValueEPKc($192, $193) | 0) & 65535 | 0) != 65535) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer23 >> 2] = $69;
HEAP32[$vararg_buffer23 + 4 >> 2] = 47216;
HEAP32[$vararg_buffer23 + 8 >> 2] = $193;
__Z7eprintfPKcz(47308, $vararg_buffer23);
break;
}
$197 = HEAP32[16550] | 0;
HEAP32[16550] = $197 + 1;
__ZN28InvertibleDynamicStringArray8AddValueEsPKc($192, $197 & 65535, $193);
$200 = __ZL18ProcessSeqXMLMorphP7XMLCellb($70, 1) | 0;
$201 = $200;
if ($200 | 0) {
$203 = HEAP32[16660] | 0;
$sext33$i = $197 << 16;
$204 = $sext33$i >> 16;
if (($sext33$i | 0) >= 0) {
if ((HEAP32[$203 + 8 >> 2] | 0) <= ($204 | 0)) {
$213 = HEAP32[$203 + 4 >> 2] | 0;
__ZN13DynamicArray1IP18AbstractTimedMorphE6resizeEi($203, ($213 | 0) > ($204 | 0) ? $213 : $204 + 1 + ($204 >>> 1) | 0);
}
$215 = $203 + 12 | 0;
if ((HEAP32[$215 >> 2] | 0) <= ($204 | 0)) HEAP32[$215 >> 2] = $204 + 1;
HEAP32[(HEAP32[$203 >> 2] | 0) + ($204 << 2) >> 2] = $201;
}
}
} while (0);
$$045 = $$045 + 1 | 0;
} while (($$045 | 0) != ($62 | 0));
}
__THREW__ = 0;
invoke_vi(110, $0 | 0);
$222 = __THREW__;
__THREW__ = 0;
if ($222 & 1) {
$224 = ___cxa_find_matching_catch_2() | 0;
$225 = tempRet0;
__ZdlPv($0);
$$1 = $224;
$$135 = $225;
___resumeException($$1 | 0);
} else {
__ZdlPv($0);
STACKTOP = sp;
return;
}
}
function __ZN11HanimAvatar24createQuincunxCentreSiteE6SiteID($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$011$i$i = 0, $$011$i$i$1 = 0, $$011$i$i$2 = 0, $$011$i$i$3 = 0, $$01115$i$i = 0, $$01115$i$i$1 = 0, $$01115$i$i$2 = 0, $$01115$i$i$3 = 0, $$01116$i$i = 0, $$01116$i$i$1 = 0, $$01116$i$i$2 = 0, $$01116$i$i$3 = 0, $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$132 = f0, $$132$1 = f0, $$132$2 = f0, $$132$3 = f0, $$2 = f0, $$sink$i$i = 0, $$sink$i$i$1 = 0, $$sink$i$i$2 = 0, $$sink$i$i$3 = 0, $$sroa$036$0$insert$insert = 0, $$sroa$036$0$insert$insert$1 = 0, $$sroa$036$0$insert$insert$2 = 0, $$sroa$036$0$insert$insert$3 = 0, $$sroa$6$0$$sroa_idx = 0, $108 = 0, $110 = 0, $111 = 0, $114 = f0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $132 = 0, $134 = 0, $135 = 0, $138 = f0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $36 = f0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $55 = 0, $6 = 0, $61 = 0, $7 = 0, $84 = 0, $86 = 0, $87 = 0, $90 = f0, $95 = 0, $96 = 0, $97 = 0, $or$cond48 = 0, $tmpcast$i$i$byval_copy11 = 0, $tmpcast13$i$i$byval_copy12 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 128 | 0;
$tmpcast13$i$i$byval_copy12 = sp + 116 | 0;
$tmpcast$i$i$byval_copy11 = sp + 104 | 0;
$vararg_buffer = sp;
$2 = sp + 96 | 0;
$3 = sp + 92 | 0;
$4 = sp + 88 | 0;
$5 = sp + 76 | 0;
$6 = sp + 16 | 0;
$7 = sp + 100 | 0;
__ZN6VectorC2Ev($5);
__ZN6VectorC2Ev($6);
__ZN6VectorC2Ev($6 + 12 | 0);
__ZN6VectorC2Ev($6 + 24 | 0);
__ZN6VectorC2Ev($6 + 36 | 0);
__ZN6VectorC2Ev($6 + 48 | 0);
$$sroa$6$0$$sroa_idx = $1 + 3 | 0;
$12 = $0 + 176 | 0;
$13 = $0 + 172 | 0;
$14 = $0 + 192 | 0;
$$sroa$036$0$insert$insert = HEAPU8[$$sroa$6$0$$sroa_idx >> 0] << 24 | ((HEAPU16[$1 >> 1] | HEAPU8[$1 + 2 >> 0] << 16) & 16748543 | 4096) & 16777215;
HEAP32[$4 >> 2] = $$sroa$036$0$insert$insert;
$17 = HEAP32[$12 >> 2] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 >> 0] = HEAP8[$4 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 + 1 >> 0] = HEAP8[$4 + 1 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 + 2 >> 0] = HEAP8[$4 + 2 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 + 3 >> 0] = HEAP8[$4 + 3 >> 0] | 0;
$18 = __ZN6KeyOpsIK6SiteIDE12hashFunctionES0_i($tmpcast13$i$i$byval_copy12, $17) | 0;
$19 = HEAP32[$13 >> 2] | 0;
L1 : do if ((HEAP16[$19 + ($18 << 3) + 4 >> 1] | 0) > 0) {
$$01115$i$i = HEAP32[$19 + ($18 << 3) >> 2] | 0;
if (!$$01115$i$i) $$sink$i$i = $14; else {
$$01116$i$i = $$01115$i$i;
while (1) {
HEAP32[$2 >> 2] = $$sroa$036$0$insert$insert;
HEAP32[$3 >> 2] = HEAP32[$$01116$i$i >> 2];
HEAP32[$tmpcast$i$i$byval_copy11 >> 2] = HEAP32[$2 >> 2];
HEAP8[$tmpcast13$i$i$byval_copy12 >> 0] = HEAP8[$3 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 + 1 >> 0] = HEAP8[$3 + 1 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 + 3 >> 0] = HEAP8[$3 + 3 >> 0] | 0;
if (__ZN6KeyOpsIK6SiteIDE5eqkeyES0_S0_($tmpcast$i$i$byval_copy11, $tmpcast13$i$i$byval_copy12) | 0) break;
$$011$i$i = HEAP32[$$01116$i$i + 8 >> 2] | 0;
if (!$$011$i$i) {
$$sink$i$i = $14;
break L1;
} else $$01116$i$i = $$011$i$i;
}
$$sink$i$i = $$01116$i$i + 4 | 0;
}
} else $$sink$i$i = $14; while (0);
$30 = HEAP32[$$sink$i$i >> 2] | 0;
if (!$30) {
$$1 = 0;
$$132 = Math_fround(0.0);
$49 = 0;
} else {
$32 = $6 + 12 | 0;
$33 = $30 + 28 | 0;
HEAP32[$32 >> 2] = HEAP32[$33 >> 2];
HEAP32[$32 + 4 >> 2] = HEAP32[$33 + 4 >> 2];
HEAP32[$32 + 8 >> 2] = HEAP32[$33 + 8 >> 2];
$36 = Math_fround(Math_fround(HEAPF32[$30 + 20 >> 2]) + Math_fround(0.0));
$$1 = HEAP32[$30 + 16 >> 2] | 0;
$$132 = $36;
$49 = 1;
}
$$sroa$036$0$insert$insert$1 = HEAPU8[$$sroa$6$0$$sroa_idx >> 0] << 24 | ((HEAPU16[$1 >> 1] | HEAPU8[$1 + 2 >> 0] << 16) & 16748543 | 8192) & 16777215;
HEAP32[$4 >> 2] = $$sroa$036$0$insert$insert$1;
$41 = HEAP32[$12 >> 2] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 >> 0] = HEAP8[$4 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 + 1 >> 0] = HEAP8[$4 + 1 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 + 2 >> 0] = HEAP8[$4 + 2 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 + 3 >> 0] = HEAP8[$4 + 3 >> 0] | 0;
$42 = __ZN6KeyOpsIK6SiteIDE12hashFunctionES0_i($tmpcast13$i$i$byval_copy12, $41) | 0;
$43 = HEAP32[$13 >> 2] | 0;
L11 : do if ((HEAP16[$43 + ($42 << 3) + 4 >> 1] | 0) > 0) {
$$01115$i$i$1 = HEAP32[$43 + ($42 << 3) >> 2] | 0;
if (!$$01115$i$i$1) $$sink$i$i$1 = $14; else {
$$01116$i$i$1 = $$01115$i$i$1;
while (1) {
HEAP32[$2 >> 2] = $$sroa$036$0$insert$insert$1;
HEAP32[$3 >> 2] = HEAP32[$$01116$i$i$1 >> 2];
HEAP32[$tmpcast$i$i$byval_copy11 >> 2] = HEAP32[$2 >> 2];
HEAP8[$tmpcast13$i$i$byval_copy12 >> 0] = HEAP8[$3 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 + 1 >> 0] = HEAP8[$3 + 1 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 + 3 >> 0] = HEAP8[$3 + 3 >> 0] | 0;
if (__ZN6KeyOpsIK6SiteIDE5eqkeyES0_S0_($tmpcast$i$i$byval_copy11, $tmpcast13$i$i$byval_copy12) | 0) break;
$$011$i$i$1 = HEAP32[$$01116$i$i$1 + 8 >> 2] | 0;
if (!$$011$i$i$1) {
$$sink$i$i$1 = $14;
break L11;
} else $$01116$i$i$1 = $$011$i$i$1;
}
$$sink$i$i$1 = $$01116$i$i$1 + 4 | 0;
}
} else $$sink$i$i$1 = $14; while (0);
$84 = HEAP32[$$sink$i$i$1 >> 2] | 0;
if (!$84) {
$$1$1 = $$1;
$$132$1 = $$132;
$51 = 0;
} else {
$86 = $6 + 24 | 0;
$87 = $84 + 28 | 0;
HEAP32[$86 >> 2] = HEAP32[$87 >> 2];
HEAP32[$86 + 4 >> 2] = HEAP32[$87 + 4 >> 2];
HEAP32[$86 + 8 >> 2] = HEAP32[$87 + 8 >> 2];
$90 = Math_fround($$132 + Math_fround(HEAPF32[$84 + 20 >> 2]));
$$1$1 = HEAP32[$84 + 16 >> 2] | 0;
$$132$1 = $90;
$51 = 1;
}
$$sroa$036$0$insert$insert$2 = HEAPU8[$$sroa$6$0$$sroa_idx >> 0] << 24 | ((HEAPU16[$1 >> 1] | HEAPU8[$1 + 2 >> 0] << 16) & 16748543 | 12288) & 16777215;
HEAP32[$4 >> 2] = $$sroa$036$0$insert$insert$2;
$95 = HEAP32[$12 >> 2] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 >> 0] = HEAP8[$4 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 + 1 >> 0] = HEAP8[$4 + 1 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 + 2 >> 0] = HEAP8[$4 + 2 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 + 3 >> 0] = HEAP8[$4 + 3 >> 0] | 0;
$96 = __ZN6KeyOpsIK6SiteIDE12hashFunctionES0_i($tmpcast13$i$i$byval_copy12, $95) | 0;
$97 = HEAP32[$13 >> 2] | 0;
L21 : do if ((HEAP16[$97 + ($96 << 3) + 4 >> 1] | 0) > 0) {
$$01115$i$i$2 = HEAP32[$97 + ($96 << 3) >> 2] | 0;
if (!$$01115$i$i$2) $$sink$i$i$2 = $14; else {
$$01116$i$i$2 = $$01115$i$i$2;
while (1) {
HEAP32[$2 >> 2] = $$sroa$036$0$insert$insert$2;
HEAP32[$3 >> 2] = HEAP32[$$01116$i$i$2 >> 2];
HEAP32[$tmpcast$i$i$byval_copy11 >> 2] = HEAP32[$2 >> 2];
HEAP8[$tmpcast13$i$i$byval_copy12 >> 0] = HEAP8[$3 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 + 1 >> 0] = HEAP8[$3 + 1 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 + 3 >> 0] = HEAP8[$3 + 3 >> 0] | 0;
if (__ZN6KeyOpsIK6SiteIDE5eqkeyES0_S0_($tmpcast$i$i$byval_copy11, $tmpcast13$i$i$byval_copy12) | 0) break;
$$011$i$i$2 = HEAP32[$$01116$i$i$2 + 8 >> 2] | 0;
if (!$$011$i$i$2) {
$$sink$i$i$2 = $14;
break L21;
} else $$01116$i$i$2 = $$011$i$i$2;
}
$$sink$i$i$2 = $$01116$i$i$2 + 4 | 0;
}
} else $$sink$i$i$2 = $14; while (0);
$108 = HEAP32[$$sink$i$i$2 >> 2] | 0;
if (!$108) {
$$1$2 = $$1$1;
$$132$2 = $$132$1;
$53 = 0;
} else {
$110 = $6 + 36 | 0;
$111 = $108 + 28 | 0;
HEAP32[$110 >> 2] = HEAP32[$111 >> 2];
HEAP32[$110 + 4 >> 2] = HEAP32[$111 + 4 >> 2];
HEAP32[$110 + 8 >> 2] = HEAP32[$111 + 8 >> 2];
$114 = Math_fround($$132$1 + Math_fround(HEAPF32[$108 + 20 >> 2]));
$$1$2 = HEAP32[$108 + 16 >> 2] | 0;
$$132$2 = $114;
$53 = 1;
}
$$sroa$036$0$insert$insert$3 = HEAPU8[$$sroa$6$0$$sroa_idx >> 0] << 24 | ((HEAPU16[$1 >> 1] | HEAPU8[$1 + 2 >> 0] << 16) & 16748543 | 16384) & 16777215;
HEAP32[$4 >> 2] = $$sroa$036$0$insert$insert$3;
$119 = HEAP32[$12 >> 2] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 >> 0] = HEAP8[$4 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 + 1 >> 0] = HEAP8[$4 + 1 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 + 2 >> 0] = HEAP8[$4 + 2 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 + 3 >> 0] = HEAP8[$4 + 3 >> 0] | 0;
$120 = __ZN6KeyOpsIK6SiteIDE12hashFunctionES0_i($tmpcast13$i$i$byval_copy12, $119) | 0;
$121 = HEAP32[$13 >> 2] | 0;
L31 : do if ((HEAP16[$121 + ($120 << 3) + 4 >> 1] | 0) > 0) {
$$01115$i$i$3 = HEAP32[$121 + ($120 << 3) >> 2] | 0;
if (!$$01115$i$i$3) $$sink$i$i$3 = $14; else {
$$01116$i$i$3 = $$01115$i$i$3;
while (1) {
HEAP32[$2 >> 2] = $$sroa$036$0$insert$insert$3;
HEAP32[$3 >> 2] = HEAP32[$$01116$i$i$3 >> 2];
HEAP32[$tmpcast$i$i$byval_copy11 >> 2] = HEAP32[$2 >> 2];
HEAP8[$tmpcast13$i$i$byval_copy12 >> 0] = HEAP8[$3 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 + 1 >> 0] = HEAP8[$3 + 1 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 + 3 >> 0] = HEAP8[$3 + 3 >> 0] | 0;
if (__ZN6KeyOpsIK6SiteIDE5eqkeyES0_S0_($tmpcast$i$i$byval_copy11, $tmpcast13$i$i$byval_copy12) | 0) break;
$$011$i$i$3 = HEAP32[$$01116$i$i$3 + 8 >> 2] | 0;
if (!$$011$i$i$3) {
$$sink$i$i$3 = $14;
break L31;
} else $$01116$i$i$3 = $$011$i$i$3;
}
$$sink$i$i$3 = $$01116$i$i$3 + 4 | 0;
}
} else $$sink$i$i$3 = $14; while (0);
$132 = HEAP32[$$sink$i$i$3 >> 2] | 0;
if (!$132) {
$$1$3 = $$1$2;
$$132$3 = $$132$2;
$55 = 0;
} else {
$134 = $6 + 48 | 0;
$135 = $132 + 28 | 0;
HEAP32[$134 >> 2] = HEAP32[$135 >> 2];
HEAP32[$134 + 4 >> 2] = HEAP32[$135 + 4 >> 2];
HEAP32[$134 + 8 >> 2] = HEAP32[$135 + 8 >> 2];
$138 = Math_fround($$132$2 + Math_fround(HEAPF32[$132 + 20 >> 2]));
$$1$3 = HEAP32[$132 + 16 >> 2] | 0;
$$132$3 = $138;
$55 = 1;
}
if (!$$1$3) {
__Z7LogTimev() | 0;
__Z5eputsPKc(22156);
__ZNK6SiteID5printEP8_IO_FILE($1, HEAP32[16082] | 0);
__Z5eputsPKc(22203);
STACKTOP = sp;
return;
}
$or$cond48 = $53 << 24 >> 24 == 0 | $55 << 24 >> 24 == 0;
do if ($49 << 24 >> 24 == 0 | $51 << 24 >> 24 == 0) {
if (!$or$cond48) {
__ZN6Vector11setMidPointERKS_S1_f($5, $6 + 36 | 0, $6 + 48 | 0, Math_fround(.5));
$$2 = Math_fround($$132$3 * Math_fround(.5));
break;
}
__Z7LogTimev() | 0;
__Z5eputsPKc(22156);
__ZNK6SiteID5printEP8_IO_FILE($1, HEAP32[16082] | 0);
HEAP32[$vararg_buffer >> 2] = $49 << 24 >> 24 ? 84 : 70;
HEAP32[$vararg_buffer + 4 >> 2] = $51 << 24 >> 24 ? 84 : 70;
HEAP32[$vararg_buffer + 8 >> 2] = $53 << 24 >> 24 ? 84 : 70;
HEAP32[$vararg_buffer + 12 >> 2] = $55 << 24 >> 24 ? 84 : 70;
__Z7eprintfPKcz(22224, $vararg_buffer);
STACKTOP = sp;
return;
} else if ($or$cond48) {
$61 = $6 + 24 | 0;
__ZN6Vector11setMidPointERKS_S1_f($5, $61, $61, Math_fround(.5));
$$2 = Math_fround($$132$3 * Math_fround(.5));
break;
} else {
__ZN6VectorC2Ev($tmpcast13$i$i$byval_copy12);
__ZN6VectorC2Ev($tmpcast$i$i$byval_copy11);
__ZN6Vector11setMidPointERKS_S1_f($tmpcast13$i$i$byval_copy12, $6 + 12 | 0, $6 + 24 | 0, Math_fround(.5));
__ZN6Vector11setMidPointERKS_S1_f($tmpcast$i$i$byval_copy11, $6 + 36 | 0, $6 + 48 | 0, Math_fround(.5));
__ZN6Vector11setMidPointERKS_S1_f($5, $tmpcast13$i$i$byval_copy12, $tmpcast$i$i$byval_copy11, Math_fround(.5));
$$2 = Math_fround($$132$3 * Math_fround(.25));
break;
} while (0);
HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
__ZN6VectorC2Ev($tmpcast$i$i$byval_copy11);
HEAP8[$tmpcast13$i$i$byval_copy12 >> 0] = HEAP8[$7 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 + 1 >> 0] = HEAP8[$7 + 1 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 + 2 >> 0] = HEAP8[$7 + 2 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy12 + 3 >> 0] = HEAP8[$7 + 3 >> 0] | 0;
__ZN4Site16setLocalPositionERK6Vector(__ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast13$i$i$byval_copy12, $$1$3, $tmpcast$i$i$byval_copy11, $$2) | 0, $5);
STACKTOP = sp;
return;
}
function _free($0) {
$0 = $0 | 0;
var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre$phi442Z2D = 0, $$pre$phi444Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $114 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $299 = 0, $3 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $319 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, label = 0;
if (!$0) return;
$2 = $0 + -8 | 0;
$3 = HEAP32[17871] | 0;
if ($2 >>> 0 < $3 >>> 0) _abort();
$6 = HEAP32[$0 + -4 >> 2] | 0;
$7 = $6 & 3;
if (($7 | 0) == 1) _abort();
$9 = $6 & -8;
$10 = $2 + $9 | 0;
L10 : do if (!($6 & 1)) {
$13 = HEAP32[$2 >> 2] | 0;
if (!$7) return;
$16 = $2 + (0 - $13) | 0;
$17 = $13 + $9 | 0;
if ($16 >>> 0 < $3 >>> 0) _abort();
if ((HEAP32[17872] | 0) == ($16 | 0)) {
$105 = $10 + 4 | 0;
$106 = HEAP32[$105 >> 2] | 0;
if (($106 & 3 | 0) != 3) {
$$1 = $16;
$$1382 = $17;
$114 = $16;
break;
}
HEAP32[17869] = $17;
HEAP32[$105 >> 2] = $106 & -2;
HEAP32[$16 + 4 >> 2] = $17 | 1;
HEAP32[$16 + $17 >> 2] = $17;
return;
}
$21 = $13 >>> 3;
if ($13 >>> 0 < 256) {
$24 = HEAP32[$16 + 8 >> 2] | 0;
$26 = HEAP32[$16 + 12 >> 2] | 0;
$28 = 71508 + ($21 << 1 << 2) | 0;
if (($24 | 0) != ($28 | 0)) {
if ($3 >>> 0 > $24 >>> 0) _abort();
if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) _abort();
}
if (($26 | 0) == ($24 | 0)) {
HEAP32[17867] = HEAP32[17867] & ~(1 << $21);
$$1 = $16;
$$1382 = $17;
$114 = $16;
break;
}
if (($26 | 0) == ($28 | 0)) $$pre$phi444Z2D = $26 + 8 | 0; else {
if ($3 >>> 0 > $26 >>> 0) _abort();
$41 = $26 + 8 | 0;
if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) $$pre$phi444Z2D = $41; else _abort();
}
HEAP32[$24 + 12 >> 2] = $26;
HEAP32[$$pre$phi444Z2D >> 2] = $24;
$$1 = $16;
$$1382 = $17;
$114 = $16;
break;
}
$46 = HEAP32[$16 + 24 >> 2] | 0;
$48 = HEAP32[$16 + 12 >> 2] | 0;
do if (($48 | 0) == ($16 | 0)) {
$59 = $16 + 16 | 0;
$60 = $59 + 4 | 0;
$61 = HEAP32[$60 >> 2] | 0;
if (!$61) {
$63 = HEAP32[$59 >> 2] | 0;
if (!$63) {
$$3 = 0;
break;
} else {
$$1387 = $63;
$$1390 = $59;
}
} else {
$$1387 = $61;
$$1390 = $60;
}
while (1) {
$65 = $$1387 + 20 | 0;
$66 = HEAP32[$65 >> 2] | 0;
if ($66 | 0) {
$$1387 = $66;
$$1390 = $65;
continue;
}
$68 = $$1387 + 16 | 0;
$69 = HEAP32[$68 >> 2] | 0;
if (!$69) break; else {
$$1387 = $69;
$$1390 = $68;
}
}
if ($3 >>> 0 > $$1390 >>> 0) _abort(); else {
HEAP32[$$1390 >> 2] = 0;
$$3 = $$1387;
break;
}
} else {
$51 = HEAP32[$16 + 8 >> 2] | 0;
if ($3 >>> 0 > $51 >>> 0) _abort();
$53 = $51 + 12 | 0;
if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) _abort();
$56 = $48 + 8 | 0;
if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
HEAP32[$53 >> 2] = $48;
HEAP32[$56 >> 2] = $51;
$$3 = $48;
break;
} else _abort();
} while (0);
if (!$46) {
$$1 = $16;
$$1382 = $17;
$114 = $16;
} else {
$74 = HEAP32[$16 + 28 >> 2] | 0;
$75 = 71772 + ($74 << 2) | 0;
do if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
HEAP32[$75 >> 2] = $$3;
if (!$$3) {
HEAP32[17868] = HEAP32[17868] & ~(1 << $74);
$$1 = $16;
$$1382 = $17;
$114 = $16;
break L10;
}
} else if ((HEAP32[17871] | 0) >>> 0 > $46 >>> 0) _abort(); else {
HEAP32[$46 + 16 + (((HEAP32[$46 + 16 >> 2] | 0) != ($16 | 0) & 1) << 2) >> 2] = $$3;
if (!$$3) {
$$1 = $16;
$$1382 = $17;
$114 = $16;
break L10;
} else break;
} while (0);
$89 = HEAP32[17871] | 0;
if ($89 >>> 0 > $$3 >>> 0) _abort();
HEAP32[$$3 + 24 >> 2] = $46;
$92 = $16 + 16 | 0;
$93 = HEAP32[$92 >> 2] | 0;
do if ($93 | 0) if ($89 >>> 0 > $93 >>> 0) _abort(); else {
HEAP32[$$3 + 16 >> 2] = $93;
HEAP32[$93 + 24 >> 2] = $$3;
break;
} while (0);
$99 = HEAP32[$92 + 4 >> 2] | 0;
if (!$99) {
$$1 = $16;
$$1382 = $17;
$114 = $16;
} else if ((HEAP32[17871] | 0) >>> 0 > $99 >>> 0) _abort(); else {
HEAP32[$$3 + 20 >> 2] = $99;
HEAP32[$99 + 24 >> 2] = $$3;
$$1 = $16;
$$1382 = $17;
$114 = $16;
break;
}
}
} else {
$$1 = $2;
$$1382 = $9;
$114 = $2;
} while (0);
if ($114 >>> 0 >= $10 >>> 0) _abort();
$115 = $10 + 4 | 0;
$116 = HEAP32[$115 >> 2] | 0;
if (!($116 & 1)) _abort();
if (!($116 & 2)) {
if ((HEAP32[17873] | 0) == ($10 | 0)) {
$124 = (HEAP32[17870] | 0) + $$1382 | 0;
HEAP32[17870] = $124;
HEAP32[17873] = $$1;
HEAP32[$$1 + 4 >> 2] = $124 | 1;
if (($$1 | 0) != (HEAP32[17872] | 0)) return;
HEAP32[17872] = 0;
HEAP32[17869] = 0;
return;
}
if ((HEAP32[17872] | 0) == ($10 | 0)) {
$132 = (HEAP32[17869] | 0) + $$1382 | 0;
HEAP32[17869] = $132;
HEAP32[17872] = $114;
HEAP32[$$1 + 4 >> 2] = $132 | 1;
HEAP32[$114 + $132 >> 2] = $132;
return;
}
$137 = ($116 & -8) + $$1382 | 0;
$138 = $116 >>> 3;
L108 : do if ($116 >>> 0 < 256) {
$141 = HEAP32[$10 + 8 >> 2] | 0;
$143 = HEAP32[$10 + 12 >> 2] | 0;
$145 = 71508 + ($138 << 1 << 2) | 0;
if (($141 | 0) != ($145 | 0)) {
if ((HEAP32[17871] | 0) >>> 0 > $141 >>> 0) _abort();
if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) _abort();
}
if (($143 | 0) == ($141 | 0)) {
HEAP32[17867] = HEAP32[17867] & ~(1 << $138);
break;
}
if (($143 | 0) == ($145 | 0)) $$pre$phi442Z2D = $143 + 8 | 0; else {
if ((HEAP32[17871] | 0) >>> 0 > $143 >>> 0) _abort();
$160 = $143 + 8 | 0;
if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) $$pre$phi442Z2D = $160; else _abort();
}
HEAP32[$141 + 12 >> 2] = $143;
HEAP32[$$pre$phi442Z2D >> 2] = $141;
} else {
$165 = HEAP32[$10 + 24 >> 2] | 0;
$167 = HEAP32[$10 + 12 >> 2] | 0;
do if (($167 | 0) == ($10 | 0)) {
$179 = $10 + 16 | 0;
$180 = $179 + 4 | 0;
$181 = HEAP32[$180 >> 2] | 0;
if (!$181) {
$183 = HEAP32[$179 >> 2] | 0;
if (!$183) {
$$3400 = 0;
break;
} else {
$$1398 = $183;
$$1402 = $179;
}
} else {
$$1398 = $181;
$$1402 = $180;
}
while (1) {
$185 = $$1398 + 20 | 0;
$186 = HEAP32[$185 >> 2] | 0;
if ($186 | 0) {
$$1398 = $186;
$$1402 = $185;
continue;
}
$188 = $$1398 + 16 | 0;
$189 = HEAP32[$188 >> 2] | 0;
if (!$189) break; else {
$$1398 = $189;
$$1402 = $188;
}
}
if ((HEAP32[17871] | 0) >>> 0 > $$1402 >>> 0) _abort(); else {
HEAP32[$$1402 >> 2] = 0;
$$3400 = $$1398;
break;
}
} else {
$170 = HEAP32[$10 + 8 >> 2] | 0;
if ((HEAP32[17871] | 0) >>> 0 > $170 >>> 0) _abort();
$173 = $170 + 12 | 0;
if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) _abort();
$176 = $167 + 8 | 0;
if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
HEAP32[$173 >> 2] = $167;
HEAP32[$176 >> 2] = $170;
$$3400 = $167;
break;
} else _abort();
} while (0);
if ($165 | 0) {
$195 = HEAP32[$10 + 28 >> 2] | 0;
$196 = 71772 + ($195 << 2) | 0;
do if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
HEAP32[$196 >> 2] = $$3400;
if (!$$3400) {
HEAP32[17868] = HEAP32[17868] & ~(1 << $195);
break L108;
}
} else if ((HEAP32[17871] | 0) >>> 0 > $165 >>> 0) _abort(); else {
HEAP32[$165 + 16 + (((HEAP32[$165 + 16 >> 2] | 0) != ($10 | 0) & 1) << 2) >> 2] = $$3400;
if (!$$3400) break L108; else break;
} while (0);
$210 = HEAP32[17871] | 0;
if ($210 >>> 0 > $$3400 >>> 0) _abort();
HEAP32[$$3400 + 24 >> 2] = $165;
$213 = $10 + 16 | 0;
$214 = HEAP32[$213 >> 2] | 0;
do if ($214 | 0) if ($210 >>> 0 > $214 >>> 0) _abort(); else {
HEAP32[$$3400 + 16 >> 2] = $214;
HEAP32[$214 + 24 >> 2] = $$3400;
break;
} while (0);
$220 = HEAP32[$213 + 4 >> 2] | 0;
if ($220 | 0) if ((HEAP32[17871] | 0) >>> 0 > $220 >>> 0) _abort(); else {
HEAP32[$$3400 + 20 >> 2] = $220;
HEAP32[$220 + 24 >> 2] = $$3400;
break;
}
}
} while (0);
HEAP32[$$1 + 4 >> 2] = $137 | 1;
HEAP32[$114 + $137 >> 2] = $137;
if (($$1 | 0) == (HEAP32[17872] | 0)) {
HEAP32[17869] = $137;
return;
} else $$2 = $137;
} else {
HEAP32[$115 >> 2] = $116 & -2;
HEAP32[$$1 + 4 >> 2] = $$1382 | 1;
HEAP32[$114 + $$1382 >> 2] = $$1382;
$$2 = $$1382;
}
$235 = $$2 >>> 3;
if ($$2 >>> 0 < 256) {
$238 = 71508 + ($235 << 1 << 2) | 0;
$239 = HEAP32[17867] | 0;
$240 = 1 << $235;
if (!($239 & $240)) {
HEAP32[17867] = $239 | $240;
$$0403 = $238;
$$pre$phiZ2D = $238 + 8 | 0;
} else {
$244 = $238 + 8 | 0;
$245 = HEAP32[$244 >> 2] | 0;
if ((HEAP32[17871] | 0) >>> 0 > $245 >>> 0) _abort(); else {
$$0403 = $245;
$$pre$phiZ2D = $244;
}
}
HEAP32[$$pre$phiZ2D >> 2] = $$1;
HEAP32[$$0403 + 12 >> 2] = $$1;
HEAP32[$$1 + 8 >> 2] = $$0403;
HEAP32[$$1 + 12 >> 2] = $238;
return;
}
$251 = $$2 >>> 8;
if (!$251) $$0396 = 0; else if ($$2 >>> 0 > 16777215) $$0396 = 31; else {
$256 = ($251 + 1048320 | 0) >>> 16 & 8;
$257 = $251 << $256;
$260 = ($257 + 520192 | 0) >>> 16 & 4;
$262 = $257 << $260;
$265 = ($262 + 245760 | 0) >>> 16 & 2;
$270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0;
$$0396 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1;
}
$276 = 71772 + ($$0396 << 2) | 0;
HEAP32[$$1 + 28 >> 2] = $$0396;
HEAP32[$$1 + 20 >> 2] = 0;
HEAP32[$$1 + 16 >> 2] = 0;
$280 = HEAP32[17868] | 0;
$281 = 1 << $$0396;
do if (!($280 & $281)) {
HEAP32[17868] = $280 | $281;
HEAP32[$276 >> 2] = $$1;
HEAP32[$$1 + 24 >> 2] = $276;
HEAP32[$$1 + 12 >> 2] = $$1;
HEAP32[$$1 + 8 >> 2] = $$1;
} else {
$$0383 = $$2 << (($$0396 | 0) == 31 ? 0 : 25 - ($$0396 >>> 1) | 0);
$$0384 = HEAP32[$276 >> 2] | 0;
while (1) {
if ((HEAP32[$$0384 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
label = 124;
break;
}
$299 = $$0384 + 16 + ($$0383 >>> 31 << 2) | 0;
$301 = HEAP32[$299 >> 2] | 0;
if (!$301) {
label = 121;
break;
} else {
$$0383 = $$0383 << 1;
$$0384 = $301;
}
}
if ((label | 0) == 121) if ((HEAP32[17871] | 0) >>> 0 > $299 >>> 0) _abort(); else {
HEAP32[$299 >> 2] = $$1;
HEAP32[$$1 + 24 >> 2] = $$0384;
HEAP32[$$1 + 12 >> 2] = $$1;
HEAP32[$$1 + 8 >> 2] = $$1;
break;
} else if ((label | 0) == 124) {
$308 = $$0384 + 8 | 0;
$309 = HEAP32[$308 >> 2] | 0;
$310 = HEAP32[17871] | 0;
if ($310 >>> 0 <= $309 >>> 0 & $310 >>> 0 <= $$0384 >>> 0) {
HEAP32[$309 + 12 >> 2] = $$1;
HEAP32[$308 >> 2] = $$1;
HEAP32[$$1 + 8 >> 2] = $309;
HEAP32[$$1 + 12 >> 2] = $$0384;
HEAP32[$$1 + 24 >> 2] = 0;
break;
} else _abort();
}
} while (0);
$319 = (HEAP32[17875] | 0) + -1 | 0;
HEAP32[17875] = $319;
if (!$319) $$0212$in$i = 71924; else return;
while (1) {
$$0212$i = HEAP32[$$0212$in$i >> 2] | 0;
if (!$$0212$i) break; else $$0212$in$i = $$0212$i + 8 | 0;
}
HEAP32[17875] = -1;
return;
}
function _appendAttributeValue($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
var $$0 = 0, $$0$lcssa$i155$i = 0, $$0$ph = 0, $$0136$ph = 0, $$0138 = 0, $$0143220 = 0, $$0146189$i = 0, $$034$i153$i = 0, $$05$i152$i = 0, $$057$i$i = 0, $$08$i$i = 0, $$1 = 0, $$1139190$i = 0, $$1147$i = 0, $$3141 = 0, $$4 = 0, $$4$i = 0, $$5 = 0, $$5$ph = 0, $$5151 = 0, $10 = 0, $104 = 0, $106 = 0, $11 = 0, $112 = 0, $113 = 0, $117 = 0, $12 = 0, $13 = 0, $130 = 0, $136 = 0, $137 = 0, $139 = 0, $14 = 0, $140 = 0, $142 = 0, $147 = 0, $148 = 0, $15 = 0, $151 = 0, $152 = 0, $153 = 0, $155 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $165 = 0, $17 = 0, $179 = 0, $18 = 0, $19 = 0, $190 = 0, $193 = 0, $199 = 0, $20 = 0, $203 = 0, $21 = 0, $214 = 0, $22 = 0, $220 = 0, $222 = 0, $223 = 0, $227 = 0, $228 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $41 = 0, $46 = 0, $53 = 0, $58 = 0, $6 = 0, $64 = 0, $66 = 0, $69 = 0, $7 = 0, $84 = 0, $9 = 0, $96 = 0, $98 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$6 = sp + 4 | 0;
$7 = sp;
$9 = HEAP32[$0 + 340 >> 2] | 0;
$10 = $1 + 12 | 0;
$11 = $1 + 40 | 0;
$12 = $0 + 144 | 0;
$13 = $0 + 272 | 0;
$14 = $2 << 24 >> 24 == 0;
$15 = $5 + 12 | 0;
$16 = $5 + 16 | 0;
$17 = $5 + 8 | 0;
$18 = $1 + 44 | 0;
$19 = $1 + 64 | 0;
$20 = $0 + 424 | 0;
$21 = $0 + 436 | 0;
$22 = $1 + 56 | 0;
$23 = $0 + 432 | 0;
$24 = $0 + 440 | 0;
$25 = $9 + 8 | 0;
$27 = ($9 + 80 | 0) == ($5 | 0);
$28 = $9 + 130 | 0;
$29 = $9 + 129 | 0;
$30 = $0 + 284 | 0;
$31 = $0 + 224 | 0;
$32 = $9 + 4 | 0;
$$0$ph = 0;
$$0136$ph = $3;
L1 : while (1) {
$$0 = $$0$ph;
L3 : while (1) {
switch (FUNCTION_TABLE_iiiii[HEAP32[$10 >> 2] & 63]($1, $$0136$ph, $4, $7) | 0) {
case -4:
{
$$5$ph = 0;
break L1;
break;
}
case 0:
{
label = 4;
break L1;
break;
}
case -1:
{
label = 6;
break L1;
break;
}
case 6:
{
label = 23;
break L3;
break;
}
case -3:
{
label = 29;
break L3;
break;
}
case 7:
case 39:
{
label = 30;
break L3;
break;
}
case 10:
{
$41 = FUNCTION_TABLE_iii[HEAP32[$11 >> 2] & 63]($1, $$0136$ph) | 0;
L7 : do if (($41 | 0) < 0) if ((HEAP32[$12 >> 2] | 0) == ($1 | 0)) {
HEAP32[$13 >> 2] = $$0136$ph;
$$0138 = 1;
$$1 = 14;
} else {
$$0138 = 1;
$$1 = 14;
} else {
if ($14 & ($41 | 0) == 32) {
$46 = HEAP32[$15 >> 2] | 0;
if ((HEAP32[$16 >> 2] | 0) == ($46 | 0)) {
$$0138 = 4;
$$1 = $$0;
break;
}
if ((HEAP8[$46 + -1 >> 0] | 0) == 32) {
$$0138 = 4;
$$1 = $$0;
break;
}
}
$53 = _XmlUtf8Encode($41, $6) | 0;
if (!$53) {
if ((HEAP32[$12 >> 2] | 0) != ($1 | 0)) {
$$0138 = 1;
$$1 = 14;
break;
}
HEAP32[$13 >> 2] = $$0136$ph;
$$0138 = 1;
$$1 = 14;
break;
}
if (($53 | 0) > 0) {
$$0143220 = 0;
while (1) {
$58 = HEAP32[$15 >> 2] | 0;
if (($58 | 0) == (HEAP32[$17 >> 2] | 0)) {
if (!((_poolGrow($5) | 0) << 24 >> 24)) {
$$0138 = 1;
$$1 = 1;
break L7;
}
$66 = HEAP32[$15 >> 2] | 0;
} else $66 = $58;
$64 = HEAP8[$6 + $$0143220 >> 0] | 0;
HEAP32[$15 >> 2] = $66 + 1;
HEAP8[$66 >> 0] = $64;
$$0143220 = $$0143220 + 1 | 0;
if (($$0143220 | 0) >= ($53 | 0)) {
$$0138 = 0;
$$1 = $$0;
break;
}
}
} else {
$$0138 = 0;
$$1 = $$0;
}
} while (0);
switch ($$0138 & 7) {
case 4:
case 0:
{
$$4 = $$1;
break L3;
break;
}
default:
{
$$3141 = $$0138;
$$5 = $$1;
}
}
break;
}
case 9:
{
$98 = HEAP32[$19 >> 2] | 0;
$104 = (FUNCTION_TABLE_iiii[HEAP32[$18 >> 2] & 31]($1, $$0136$ph + $98 | 0, (HEAP32[$7 >> 2] | 0) + (0 - $98) | 0) | 0) & 255;
if ($104 << 24 >> 24) {
label = 38;
break L3;
}
$113 = HEAP32[$19 >> 2] | 0;
$117 = (HEAP32[$7 >> 2] | 0) + (0 - $113) | 0;
HEAP32[$6 >> 2] = $$0136$ph + $113;
if (!(HEAP32[$21 >> 2] | 0)) if (!((_poolGrow($20) | 0) << 24 >> 24)) {
label = 46;
break L1;
}
while (1) {
FUNCTION_TABLE_viiiii[HEAP32[$22 >> 2] & 15]($1, $6, $117, $21, HEAP32[$23 >> 2] | 0);
if ((HEAP32[$6 >> 2] | 0) == ($117 | 0)) break;
if (!((_poolGrow($20) | 0) << 24 >> 24)) {
label = 46;
break L1;
}
}
if (!(HEAP32[$24 >> 2] | 0)) {
$$5$ph = 1;
break L1;
}
$130 = HEAP32[$21 >> 2] | 0;
if (($130 | 0) == (HEAP32[$23 >> 2] | 0)) {
if (!((_poolGrow($20) | 0) << 24 >> 24)) {
$$5$ph = 1;
break L1;
}
$136 = HEAP32[$21 >> 2] | 0;
} else $136 = $130;
HEAP32[$21 >> 2] = $136 + 1;
HEAP8[$136 >> 0] = 0;
$137 = HEAP32[$24 >> 2] | 0;
$139 = $137;
if (!$137) {
$$5$ph = 1;
break L1;
}
$140 = HEAP32[$25 >> 2] | 0;
L40 : do if (!$140) $$4$i = 0; else {
$142 = HEAP8[$137 >> 0] | 0;
if (!($142 << 24 >> 24)) $$0$lcssa$i155$i = 0; else {
$$034$i153$i = $137;
$$05$i152$i = 0;
$147 = $142;
while (1) {
$$034$i153$i = $$034$i153$i + 1 | 0;
$148 = $$05$i152$i * 1000003 ^ $147 & 255;
$147 = HEAP8[$$034$i153$i >> 0] | 0;
if (!($147 << 24 >> 24)) {
$$0$lcssa$i155$i = $148;
break;
} else $$05$i152$i = $148;
}
}
$151 = $140 + -1 | 0;
$152 = $$0$lcssa$i155$i & $151;
$153 = HEAP32[$9 >> 2] | 0;
$155 = HEAP32[$153 + ($152 << 2) >> 2] | 0;
if (!$155) $$4$i = 0; else {
$158 = $$0$lcssa$i155$i & 0 - $140;
$159 = $151 >>> 2;
$$0146189$i = 0;
$$1139190$i = $152;
$161 = $155;
while (1) {
$160 = HEAP32[$161 >> 2] | 0;
if ($142 << 24 >> 24 == (HEAP8[$160 >> 0] | 0)) {
$$057$i$i = $137;
$$08$i$i = $160;
$165 = $142;
do {
if (!($165 << 24 >> 24)) {
$$4$i = $161;
break L40;
}
$$057$i$i = $$057$i$i + 1 | 0;
$$08$i$i = $$08$i$i + 1 | 0;
$165 = HEAP8[$$057$i$i >> 0] | 0;
} while ($165 << 24 >> 24 == (HEAP8[$$08$i$i >> 0] | 0));
}
if (!($$0146189$i << 24 >> 24)) $$1147$i = ($158 >>> ((HEAPU8[$32 >> 0] | 0) + -1 | 0) & $159 | 1) & 255; else $$1147$i = $$0146189$i;
$179 = $$1147$i & 255;
$$1139190$i = ($$1139190$i >>> 0 < $179 >>> 0 ? $140 : 0) + ($$1139190$i - $179) | 0;
$161 = HEAP32[$153 + ($$1139190$i << 2) >> 2] | 0;
if (!$161) {
$$4$i = 0;
break;
} else $$0146189$i = $$1147$i;
}
}
} while (0);
HEAP32[$21 >> 2] = $139;
do if ($27) if (!(HEAP8[$28 >> 0] | 0)) {
$190 = ($$4$i | 0) != 0;
if (!(HEAP8[$29 >> 0] | 0)) {
$227 = $190;
label = 70;
break;
} else {
$228 = $190;
label = 72;
break;
}
} else {
$193 = ($$4$i | 0) != 0;
if (!(HEAP32[$30 >> 2] | 0)) {
$227 = $193;
label = 70;
break;
} else {
$228 = $193;
label = 72;
break;
}
} else if (!(HEAP8[$29 >> 0] | 0)) if (!$$4$i) {
$$5$ph = 11;
break L1;
} else {
label = 71;
break;
} else {
$199 = ($$4$i | 0) != 0;
if (!(HEAP8[$28 >> 0] | 0)) {
$228 = $199;
label = 72;
break;
} else {
$227 = $199;
label = 70;
break;
}
} while (0);
if ((label | 0) == 70) {
label = 0;
if ($227) label = 71; else {
$$5$ph = 11;
break L1;
}
} else if ((label | 0) == 72) {
label = 0;
if (!$228) {
$$4 = $$0;
break L3;
}
}
if ((label | 0) == 71) {
label = 0;
if (!(HEAP8[$$4$i + 34 >> 0] | 0)) {
$$5$ph = 24;
break L1;
}
}
$203 = $$4$i + 32 | 0;
if (HEAP8[$203 >> 0] | 0) {
label = 74;
break L1;
}
if (HEAP32[$$4$i + 28 >> 2] | 0) {
label = 77;
break L1;
}
$214 = HEAP32[$$4$i + 4 >> 2] | 0;
if (!$214) {
label = 80;
break L1;
}
$220 = $214 + (HEAP32[$$4$i + 8 >> 2] | 0) | 0;
HEAP8[$203 >> 0] = 1;
$222 = _appendAttributeValue($0, HEAP32[$31 >> 2] | 0, $2, $214, $220, $5) | 0;
HEAP8[$203 >> 0] = 0;
$223 = ($222 | 0) == 0;
if ($223) {
$$4 = $$0;
break L3;
} else {
$$3141 = ($223 ^ 1) & 1;
$$5 = $222;
}
break;
}
default:
{
label = 83;
break L1;
}
}
if (!$$3141) $$0 = $$5; else {
$$5151 = $$5;
label = 88;
break L1;
}
}
if ((label | 0) == 23) {
label = 0;
$69 = HEAP32[$7 >> 2] | 0;
HEAP32[$6 >> 2] = $$0136$ph;
if (!(HEAP32[$15 >> 2] | 0)) if (!((_poolGrow($5) | 0) << 24 >> 24)) {
label = 27;
break;
}
while (1) {
FUNCTION_TABLE_viiiii[HEAP32[$22 >> 2] & 15]($1, $6, $69, $15, HEAP32[$17 >> 2] | 0);
if ((HEAP32[$6 >> 2] | 0) == ($69 | 0)) break;
if (!((_poolGrow($5) | 0) << 24 >> 24)) {
label = 27;
break L1;
}
}
if (!(HEAP32[$16 >> 2] | 0)) {
$$5$ph = 1;
break;
} else $$4 = $$0;
} else if ((label | 0) == 29) {
label = 0;
HEAP32[$7 >> 2] = $$0136$ph + (HEAP32[$19 >> 2] | 0);
label = 30;
} else if ((label | 0) == 38) {
label = 0;
$106 = HEAP32[$15 >> 2] | 0;
if (($106 | 0) == (HEAP32[$17 >> 2] | 0)) {
if (!((_poolGrow($5) | 0) << 24 >> 24)) {
$$5$ph = 1;
break;
}
$112 = HEAP32[$15 >> 2] | 0;
} else $112 = $106;
HEAP32[$15 >> 2] = $112 + 1;
HEAP8[$112 >> 0] = $104;
$$4 = $$0;
}
do if ((label | 0) == 30) {
label = 0;
$84 = HEAP32[$15 >> 2] | 0;
if ($14) {
if ((HEAP32[$16 >> 2] | 0) == ($84 | 0)) {
$$4 = $$0;
break;
}
if ((HEAP8[$84 + -1 >> 0] | 0) == 32) {
$$4 = $$0;
break;
}
}
if (($84 | 0) == (HEAP32[$17 >> 2] | 0)) {
if (!((_poolGrow($5) | 0) << 24 >> 24)) {
$$5$ph = 1;
break L1;
}
$96 = HEAP32[$15 >> 2] | 0;
} else $96 = $84;
HEAP32[$15 >> 2] = $96 + 1;
HEAP8[$96 >> 0] = 32;
$$4 = $$0;
} while (0);
$$0$ph = $$4;
$$0136$ph = HEAP32[$7 >> 2] | 0;
}
if ((label | 0) == 4) if ((HEAP32[$12 >> 2] | 0) == ($1 | 0)) {
HEAP32[$13 >> 2] = HEAP32[$7 >> 2];
$$5$ph = 4;
} else $$5$ph = 4; else if ((label | 0) == 6) if ((HEAP32[$12 >> 2] | 0) == ($1 | 0)) {
HEAP32[$13 >> 2] = $$0136$ph;
$$5$ph = 4;
} else $$5$ph = 4; else if ((label | 0) == 27) $$5$ph = 1; else if ((label | 0) == 46) $$5$ph = 1; else if ((label | 0) == 74) if ((HEAP32[$12 >> 2] | 0) == ($1 | 0)) {
HEAP32[$13 >> 2] = $$0136$ph;
$$5$ph = 12;
} else $$5$ph = 12; else if ((label | 0) == 77) if ((HEAP32[$12 >> 2] | 0) == ($1 | 0)) {
HEAP32[$13 >> 2] = $$0136$ph;
$$5$ph = 15;
} else $$5$ph = 15; else if ((label | 0) == 80) if ((HEAP32[$12 >> 2] | 0) == ($1 | 0)) {
HEAP32[$13 >> 2] = $$0136$ph;
$$5$ph = 16;
} else $$5$ph = 16; else if ((label | 0) == 83) if ((HEAP32[$12 >> 2] | 0) == ($1 | 0)) {
HEAP32[$13 >> 2] = $$0136$ph;
$$5$ph = 23;
} else $$5$ph = 23; else if ((label | 0) == 88) {
STACKTOP = sp;
return $$5151 | 0;
}
$$5151 = $$5$ph;
STACKTOP = sp;
return $$5151 | 0;
}
function __ZN7ASDdata16buildFromXMLCellEP7XMLCellPKc($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$092 = 0, $$3 = 0, $$382 = 0, $100 = 0, $101 = 0, $108 = 0, $109 = 0, $113 = 0, $12 = 0, $120 = 0, $127 = 0, $139 = 0, $150 = 0, $151 = 0, $152 = 0, $159 = 0, $160 = 0, $164 = 0, $17 = 0, $171 = 0, $178 = 0, $18 = 0, $190 = 0, $197 = 0, $198 = 0, $20 = 0, $205 = 0, $21 = 0, $212 = 0, $22 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $24 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = f0, $49 = 0, $5 = 0, $50 = 0, $52 = 0, $53 = 0, $58 = 0, $6 = 0, $62 = 0, $63 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $71 = 0, $72 = 0, $76 = 0, $77 = 0, $81 = 0, $82 = 0, $84 = 0, $87 = 0, $90 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 144 | 0;
$vararg_buffer19 = sp + 56 | 0;
$vararg_buffer16 = sp + 48 | 0;
$vararg_buffer13 = sp + 40 | 0;
$vararg_buffer10 = sp + 32 | 0;
$vararg_buffer7 = sp + 24 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$3 = sp + 120 | 0;
$4 = sp + 104 | 0;
$5 = sp + 92 | 0;
$6 = sp + 80 | 0;
$7 = sp + 64 | 0;
if (!$1) {
HEAP32[$vararg_buffer >> 2] = $2;
__Z7eprintfPKcz(15695, $vararg_buffer);
$22 = _emscripten_asm_const_ii(0, $2 | 0) | 0;
$23 = ___cxa_allocate_exception(4) | 0;
HEAP32[$23 >> 2] = 11;
___cxa_throw($23 | 0, 232, 0);
} else $$092 = $1;
while (1) {
if (!(_strcmp(HEAP32[$$092 >> 2] | 0, 15678) | 0)) break;
$12 = HEAP32[$$092 + 8 >> 2] | 0;
if ((HEAP32[$12 + 12 >> 2] | 0) <= 0) {
label = 5;
break;
}
$17 = HEAP32[HEAP32[$12 >> 2] >> 2] | 0;
if (!$17) {
label = 5;
break;
} else $$092 = $17;
}
if ((label | 0) == 5) {
__THREW__ = 0;
invoke_vi(110, $1 | 0);
$18 = __THREW__;
__THREW__ = 0;
if ($18 & 1) {
$20 = ___cxa_find_matching_catch_2() | 0;
$21 = tempRet0;
__ZdlPv($1);
$$3 = $20;
$$382 = $21;
___resumeException($$3 | 0);
} else {
__ZdlPv($1);
HEAP32[$vararg_buffer >> 2] = $2;
__Z7eprintfPKcz(15695, $vararg_buffer);
$22 = _emscripten_asm_const_ii(0, $2 | 0) | 0;
$23 = ___cxa_allocate_exception(4) | 0;
HEAP32[$23 >> 2] = 11;
___cxa_throw($23 | 0, 232, 0);
}
}
$24 = __ZN7XMLCell7elementEPKc($$092, 57271) | 0;
if (!$24) {
__THREW__ = 0;
invoke_vi(110, $1 | 0);
$26 = __THREW__;
__THREW__ = 0;
if (!($26 & 1)) {
__ZdlPv($1);
HEAP32[$vararg_buffer1 >> 2] = $2;
__Z7eprintfPKcz(15911, $vararg_buffer1);
_emscripten_asm_const_ii(1, $2 | 0) | 0;
$31 = ___cxa_allocate_exception(4) | 0;
HEAP32[$31 >> 2] = 11;
___cxa_throw($31 | 0, 232, 0);
}
$28 = ___cxa_find_matching_catch_2() | 0;
$29 = tempRet0;
__ZdlPv($1);
$$3 = $28;
$$382 = $29;
___resumeException($$3 | 0);
}
$32 = __ZN7XMLCell7elementEPKc($24, 16107) | 0;
if (!$32) {
__THREW__ = 0;
invoke_vi(110, $1 | 0);
$34 = __THREW__;
__THREW__ = 0;
if (!($34 & 1)) {
__ZdlPv($1);
HEAP32[$vararg_buffer4 >> 2] = $2;
__Z7eprintfPKcz(16116, $vararg_buffer4);
_emscripten_asm_const_ii(2, $2 | 0) | 0;
$39 = ___cxa_allocate_exception(4) | 0;
HEAP32[$39 >> 2] = 11;
___cxa_throw($39 | 0, 232, 0);
}
$36 = ___cxa_find_matching_catch_2() | 0;
$37 = tempRet0;
__ZdlPv($1);
$$3 = $36;
$$382 = $37;
___resumeException($$3 | 0);
}
$40 = __ZN7XMLCell7elementEPKc($32, 16316) | 0;
if (!$40) {
__THREW__ = 0;
invoke_vi(110, $1 | 0);
$42 = __THREW__;
__THREW__ = 0;
if (!($42 & 1)) {
__ZdlPv($1);
HEAP32[$vararg_buffer7 >> 2] = $2;
__Z7eprintfPKcz(16322, $vararg_buffer7);
_emscripten_asm_const_ii(3, $2 | 0) | 0;
$47 = ___cxa_allocate_exception(4) | 0;
HEAP32[$47 >> 2] = 11;
___cxa_throw($47 | 0, 232, 0);
}
$44 = ___cxa_find_matching_catch_2() | 0;
$45 = tempRet0;
__ZdlPv($1);
$$3 = $44;
$$382 = $45;
___resumeException($$3 | 0);
}
$48 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($32, 16516, Math_fround(1.0)));
HEAPF32[424] = $48;
$49 = __Znwj(16) | 0;
__THREW__ = 0;
invoke_viii(76, $49 | 0, -1, 1);
$50 = __THREW__;
__THREW__ = 0;
if ($50 & 1) {
$92 = ___cxa_find_matching_catch_2() | 0;
$93 = tempRet0;
__ZdlPv($49);
$$3 = $92;
$$382 = $93;
___resumeException($$3 | 0);
}
$52 = $0 + 12 | 0;
HEAP32[$52 >> 2] = $49;
$53 = __Znwj(16) | 0;
HEAP32[$53 + 4 >> 2] = 10;
HEAP32[$53 + 12 >> 2] = 0;
HEAP32[$53 >> 2] = 0;
HEAP32[$53 + 8 >> 2] = 0;
HEAP32[$0 + 16 >> 2] = $53;
$58 = __Znwj(16) | 0;
HEAP32[$58 + 4 >> 2] = 10;
HEAP32[$58 + 12 >> 2] = 0;
HEAP32[$58 >> 2] = 0;
HEAP32[$58 + 8 >> 2] = 0;
$62 = $0 + 20 | 0;
HEAP32[$62 >> 2] = $58;
$63 = __Znwj(16) | 0;
HEAP32[$63 + 4 >> 2] = 10;
HEAP32[$63 + 12 >> 2] = 0;
HEAP32[$63 >> 2] = 0;
HEAP32[$63 + 8 >> 2] = 0;
$67 = $0 + 24 | 0;
HEAP32[$67 >> 2] = $63;
$68 = __Znwj(16) | 0;
__THREW__ = 0;
invoke_viii(76, $68 | 0, -1, 1);
$69 = __THREW__;
__THREW__ = 0;
if ($69 & 1) {
$94 = ___cxa_find_matching_catch_2() | 0;
$95 = tempRet0;
__ZdlPv($68);
$$3 = $94;
$$382 = $95;
___resumeException($$3 | 0);
}
$71 = $0 + 28 | 0;
HEAP32[$71 >> 2] = $68;
$72 = __Znwj(16) | 0;
HEAP32[$72 + 4 >> 2] = 10;
HEAP32[$72 + 12 >> 2] = 0;
HEAP32[$72 >> 2] = 0;
HEAP32[$72 + 8 >> 2] = 0;
$76 = $0 + 32 | 0;
HEAP32[$76 >> 2] = $72;
$77 = __Znwj(16) | 0;
HEAP32[$77 + 4 >> 2] = 10;
HEAP32[$77 + 12 >> 2] = 0;
HEAP32[$77 >> 2] = 0;
HEAP32[$77 + 8 >> 2] = 0;
$81 = $0 + 36 | 0;
HEAP32[$81 >> 2] = $77;
$82 = __ZN7XMLCell12attrib_int32EPKci($$092, 57404, -1) | 0;
HEAP32[$0 >> 2] = $82;
$84 = __Z10copyStringPKc(__ZN7XMLCell13attrib_stringEPKc($24, 57404) | 0) | 0;
HEAP32[$0 + 4 >> 2] = $84;
$87 = __Z10copyStringPKc(__ZN7XMLCell13attrib_stringEPKc($24, 53439) | 0) | 0;
HEAP32[$0 + 8 >> 2] = $87;
__ZN7ASDdata9readJointEP7XMLCellsf($0, $40, -1, Math_fround(HEAPF32[424]));
__THREW__ = 0;
invoke_vi(110, $1 | 0);
$90 = __THREW__;
__THREW__ = 0;
if ($90 & 1) {
$96 = ___cxa_find_matching_catch_2() | 0;
$97 = tempRet0;
__ZdlPv($1);
$$3 = $96;
$$382 = $97;
___resumeException($$3 | 0);
}
__ZdlPv($1);
$99 = __ZNK28InvertibleDynamicStringArray14indexFromValueEPKc(HEAP32[$71 >> 2] | 0, 16522) | 0;
$100 = HEAP32[$76 >> 2] | 0;
$101 = ($99 | 0) < 0;
if ($101) $109 = -1; else if ((HEAP32[$100 + 12 >> 2] | 0) > ($99 | 0)) $109 = HEAP16[(HEAP32[$100 >> 2] | 0) + ($99 << 1) >> 1] | 0; else $109 = -1;
$108 = $109 << 16 >> 16;
if ((__ZNK28InvertibleDynamicStringArray14indexFromValueEPKc(HEAP32[$52 >> 2] | 0, 16527) | 0) == ($108 | 0)) {
$113 = HEAP32[$62 >> 2] | 0;
if ($109 << 16 >> 16 < 0) {
__ZN6VectorC2Ev($3);
$224 = $4;
label = 37;
} else {
if ((HEAP32[$113 + 12 >> 2] | 0) > ($108 | 0)) {
__ZN6VectorC2ERKS_($3, (HEAP32[$113 >> 2] | 0) + ($108 * 12 | 0) | 0);
$225 = $4;
} else {
__ZN6VectorC2Ev($3);
$225 = $4;
}
$120 = HEAP32[$67 >> 2] | 0;
if ((HEAP32[$120 + 12 >> 2] | 0) > ($108 | 0)) {
$127 = HEAP32[$120 >> 2] | 0;
HEAP32[$4 >> 2] = HEAP32[$127 + ($108 << 4) >> 2];
HEAP32[$4 + 4 >> 2] = HEAP32[$127 + ($108 << 4) + 4 >> 2];
HEAP32[$4 + 8 >> 2] = HEAP32[$127 + ($108 << 4) + 8 >> 2];
HEAP32[$4 + 12 >> 2] = HEAP32[$127 + ($108 << 4) + 12 >> 2];
$226 = $225;
} else {
$224 = $225;
label = 37;
}
}
if ((label | 0) == 37) {
HEAPF32[$4 >> 2] = Math_fround(0.0);
HEAPF32[$4 + 4 >> 2] = Math_fround(0.0);
HEAPF32[$4 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$4 + 12 >> 2] = Math_fround(1.0);
$226 = $224;
}
$139 = HEAP32[$81 >> 2] | 0;
if ($101) label = 41; else if ((HEAP32[$139 + 12 >> 2] | 0) > ($99 | 0)) __ZN6VectorC2ERKS_($5, (HEAP32[$139 >> 2] | 0) + ($99 * 12 | 0) | 0); else label = 41;
if ((label | 0) == 41) __ZN6VectorC2Ev($5);
HEAP32[$vararg_buffer10 >> 2] = $108;
__Z7eprintfPKcz(16532, $vararg_buffer10);
__ZNK6Vector5printEP8_IO_FILEi($3, HEAP32[16082] | 0, 6);
HEAP32[$vararg_buffer13 >> 2] = $108;
__Z7eprintfPKcz(16551, $vararg_buffer13);
__ZN10Quaternion5printEP8_IO_FILEi($4, HEAP32[16082] | 0, 6);
HEAP32[$vararg_buffer16 >> 2] = $99;
__Z7eprintfPKcz(16557, $vararg_buffer16);
__ZNK6Vector5printEP8_IO_FILEi($5, HEAP32[16082] | 0, 6);
__ZNK10Quaternion12rotateVectorER6Vector($4, $5);
__ZN6Vector6setAddERKS_($5, $3);
HEAP32[$vararg_buffer19 >> 2] = $99;
__Z7eprintfPKcz(16577, $vararg_buffer19);
__ZNK6Vector5printEP8_IO_FILEi($5, HEAP32[16082] | 0, 6);
__Z5eputcc(10);
}
$150 = __ZNK28InvertibleDynamicStringArray14indexFromValueEPKc(HEAP32[$71 >> 2] | 0, 16592) | 0;
$151 = HEAP32[$76 >> 2] | 0;
$152 = ($150 | 0) < 0;
if ($152) $160 = -1; else if ((HEAP32[$151 + 12 >> 2] | 0) > ($150 | 0)) $160 = HEAP16[(HEAP32[$151 >> 2] | 0) + ($150 << 1) >> 1] | 0; else $160 = -1;
$159 = $160 << 16 >> 16;
if ((__ZNK28InvertibleDynamicStringArray14indexFromValueEPKc(HEAP32[$52 >> 2] | 0, 16597) | 0) != ($159 | 0)) {
STACKTOP = sp;
return;
}
$164 = HEAP32[$62 >> 2] | 0;
if ($160 << 16 >> 16 < 0) {
__ZN6VectorC2Ev($3);
$227 = $4;
label = 54;
} else {
if ((HEAP32[$164 + 12 >> 2] | 0) > ($159 | 0)) {
__ZN6VectorC2ERKS_($3, (HEAP32[$164 >> 2] | 0) + ($159 * 12 | 0) | 0);
$228 = $4;
} else {
__ZN6VectorC2Ev($3);
$228 = $4;
}
$171 = HEAP32[$67 >> 2] | 0;
if ((HEAP32[$171 + 12 >> 2] | 0) > ($159 | 0)) {
$178 = HEAP32[$171 >> 2] | 0;
HEAP32[$4 >> 2] = HEAP32[$178 + ($159 << 4) >> 2];
HEAP32[$4 + 4 >> 2] = HEAP32[$178 + ($159 << 4) + 4 >> 2];
HEAP32[$4 + 8 >> 2] = HEAP32[$178 + ($159 << 4) + 8 >> 2];
HEAP32[$4 + 12 >> 2] = HEAP32[$178 + ($159 << 4) + 12 >> 2];
$229 = $228;
} else {
$227 = $228;
label = 54;
}
}
if ((label | 0) == 54) {
HEAPF32[$4 >> 2] = Math_fround(0.0);
HEAPF32[$4 + 4 >> 2] = Math_fround(0.0);
HEAPF32[$4 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$4 + 12 >> 2] = Math_fround(1.0);
$229 = $227;
}
$190 = HEAP32[$81 >> 2] | 0;
if ($152) label = 58; else if ((HEAP32[$190 + 12 >> 2] | 0) > ($150 | 0)) __ZN6VectorC2ERKS_($5, (HEAP32[$190 >> 2] | 0) + ($150 * 12 | 0) | 0); else label = 58;
if ((label | 0) == 58) __ZN6VectorC2Ev($5);
__ZNK10Quaternion12rotateVectorER6Vector($4, $5);
__ZN6Vector6setAddERKS_($5, $3);
$197 = __ZNK28InvertibleDynamicStringArray14indexFromValueEPKc(HEAP32[$52 >> 2] | 0, 16602) | 0;
$198 = HEAP32[$62 >> 2] | 0;
if (($197 | 0) < 0) {
__ZN6VectorC2Ev($6);
$230 = $7;
label = 66;
} else {
if ((HEAP32[$198 + 12 >> 2] | 0) > ($197 | 0)) {
__ZN6VectorC2ERKS_($6, (HEAP32[$198 >> 2] | 0) + ($197 * 12 | 0) | 0);
$231 = $7;
} else {
__ZN6VectorC2Ev($6);
$231 = $7;
}
$205 = HEAP32[$67 >> 2] | 0;
if ((HEAP32[$205 + 12 >> 2] | 0) > ($197 | 0)) {
$212 = HEAP32[$205 >> 2] | 0;
HEAP32[$7 >> 2] = HEAP32[$212 + ($197 << 4) >> 2];
HEAP32[$7 + 4 >> 2] = HEAP32[$212 + ($197 << 4) + 4 >> 2];
HEAP32[$7 + 8 >> 2] = HEAP32[$212 + ($197 << 4) + 8 >> 2];
HEAP32[$7 + 12 >> 2] = HEAP32[$212 + ($197 << 4) + 12 >> 2];
$232 = $231;
} else {
$230 = $231;
label = 66;
}
}
if ((label | 0) == 66) {
HEAPF32[$7 >> 2] = Math_fround(0.0);
HEAPF32[$7 + 4 >> 2] = Math_fround(0.0);
HEAPF32[$7 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$7 + 12 >> 2] = Math_fround(1.0);
$232 = $230;
}
__ZNK10Quaternion12rotateVectorER6Vector($7, $5);
__ZN6Vector6setAddERKS_($5, $6);
STACKTOP = sp;
return;
}
function __ZN11HanimAvatar16fakeFarLeftRightE8Locationf($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
var $$0 = 0, $$019 = 0, $$sroa$032$0$insert$insert = 0, $$sroa$034$0$insert$insert = 0, $$sroa$037$0$insert$insert = 0, $$sroa$040$0$insert$insert = 0, $$sroa$3$0$extract$shift = 0, $$sroa$329$0$extract$shift = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $45 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $56 = f0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $64 = f0, $68 = 0, $7 = 0, $71 = 0, $75 = 0, $77 = 0, $8 = 0, $80 = 0, $82 = 0, $83 = 0, $85 = f0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $90 = 0, $91 = 0, $93 = f0, $97 = 0, $tmpcast46$byval_copy = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 160 | 0;
$tmpcast46$byval_copy = sp + 148 | 0;
$vararg_buffer8 = sp + 24 | 0;
$vararg_buffer5 = sp + 16 | 0;
$vararg_buffer2 = sp + 8 | 0;
$vararg_buffer = sp;
$3 = sp + 136 | 0;
$4 = sp + 128 | 0;
$5 = sp + 116 | 0;
$6 = sp + 112 | 0;
$7 = sp + 108 | 0;
$8 = sp + 104 | 0;
$9 = sp + 100 | 0;
$10 = sp + 88 | 0;
$11 = sp + 76 | 0;
$12 = sp + 64 | 0;
$13 = sp + 144 | 0;
$14 = sp + 140 | 0;
$15 = sp + 132 | 0;
$16 = sp + 52 | 0;
$17 = sp + 40 | 0;
$18 = sp + 28 | 0;
$19 = sp + 124 | 0;
$20 = sp + 120 | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($5, $1, 0, 0, 0, 1, 0);
HEAP32[$6 >> 2] = 0;
HEAP32[$7 >> 2] = 0;
HEAP32[$8 >> 2] = 0;
HEAP32[$9 >> 2] = 0;
__ZN6VectorC2Ev($10);
__ZN6VectorC2Ev($11);
__ZN6VectorC2Ev($12);
$21 = HEAP32[$5 >> 2] | 0;
HEAP32[$13 >> 2] = $21;
$22 = $21 & 16773375;
HEAP16[$13 >> 1] = $22;
HEAP8[$13 + 2 >> 0] = $22 >>> 16;
HEAP8[$tmpcast46$byval_copy >> 0] = HEAP8[$13 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 1 >> 0] = HEAP8[$13 + 1 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 2 >> 0] = HEAP8[$13 + 2 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 3 >> 0] = HEAP8[$13 + 3 >> 0] | 0;
__ZNK11HanimAvatar12locateSiteIDEb6SiteIDP6VectorRP5JointRP4Site($0, 1, $tmpcast46$byval_copy, 0, $6, $7);
$23 = HEAP32[$5 >> 2] | 0;
HEAP32[$14 >> 2] = $23;
$25 = $23 & 16773375 | 512;
HEAP16[$14 >> 1] = $25;
HEAP8[$14 + 2 >> 0] = $25 >>> 16;
HEAP8[$tmpcast46$byval_copy >> 0] = HEAP8[$14 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 1 >> 0] = HEAP8[$14 + 1 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 2 >> 0] = HEAP8[$14 + 2 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 3 >> 0] = HEAP8[$14 + 3 >> 0] | 0;
__ZNK11HanimAvatar12locateSiteIDEb6SiteIDP6VectorRP5JointRP4Site($0, 1, $tmpcast46$byval_copy, 0, $6, $8);
$26 = HEAP32[$5 >> 2] | 0;
HEAP32[$15 >> 2] = $26;
$28 = $26 & 16773375 | 256;
HEAP16[$15 >> 1] = $28;
HEAP8[$15 + 2 >> 0] = $28 >>> 16;
HEAP8[$tmpcast46$byval_copy >> 0] = HEAP8[$15 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 1 >> 0] = HEAP8[$15 + 1 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 2 >> 0] = HEAP8[$15 + 2 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 3 >> 0] = HEAP8[$15 + 3 >> 0] | 0;
__ZNK11HanimAvatar12locateSiteIDEb6SiteIDP6VectorRP5JointRP4Site($0, 1, $tmpcast46$byval_copy, 0, $6, $9);
$29 = HEAP32[$8 >> 2] | 0;
$31 = HEAP32[$9 >> 2] | 0;
if (($29 | 0) == 0 | ($31 | 0) == 0) {
STACKTOP = sp;
return;
}
$33 = $29 + 40 | 0;
HEAP32[$11 >> 2] = HEAP32[$33 >> 2];
HEAP32[$11 + 4 >> 2] = HEAP32[$33 + 4 >> 2];
HEAP32[$11 + 8 >> 2] = HEAP32[$33 + 8 >> 2];
$34 = $31 + 40 | 0;
HEAP32[$12 >> 2] = HEAP32[$34 >> 2];
HEAP32[$12 + 4 >> 2] = HEAP32[$34 + 4 >> 2];
HEAP32[$12 + 8 >> 2] = HEAP32[$34 + 8 >> 2];
$35 = HEAP32[$7 >> 2] | 0;
$36 = ($35 | 0) == 0;
if ($36) __ZN6Vector11setMidPointERKS_S1_f($10, $11, $12, Math_fround(.5)); else {
$38 = $35 + 40 | 0;
HEAP32[$10 >> 2] = HEAP32[$38 >> 2];
HEAP32[$10 + 4 >> 2] = HEAP32[$38 + 4 >> 2];
HEAP32[$10 + 8 >> 2] = HEAP32[$38 + 8 >> 2];
}
if (0) {
$41 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17192] | 0, $1) | 0;
HEAP32[$vararg_buffer >> 2] = $41;
HEAP32[$vararg_buffer + 4 >> 2] = $35;
__Z7eprintfPKcz(22569, $vararg_buffer);
__ZNK6Vector5printEP8_IO_FILEi($10, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
if ($36) $47 = 0; else $47 = HEAP32[$35 + 24 >> 2] | 0;
__ZN6VectorC2Ev($16);
__ZN6VectorC2Ev($17);
$45 = $29 + 24 | 0;
__ZL7FakeFarRK6VectorS1_PS0_S2_fRS_S3_($10, $11, $47, HEAP32[$45 >> 2] | 0, $2, $16, $17);
$48 = HEAP32[$45 >> 2] | 0;
do if (!$48) {
$59 = HEAP32[$5 >> 2] | 0;
HEAP32[$19 >> 2] = $59;
$61 = $59 & 16773375 | 1024;
HEAP16[$19 >> 1] = $61;
HEAP8[$19 + 2 >> 0] = $61 >>> 16;
$62 = HEAP32[$6 >> 2] | 0;
$64 = Math_fround(HEAPF32[$29 + 20 >> 2]);
HEAP8[$tmpcast46$byval_copy >> 0] = HEAP8[$19 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 1 >> 0] = HEAP8[$19 + 1 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 2 >> 0] = HEAP8[$19 + 2 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 3 >> 0] = HEAP8[$19 + 3 >> 0] | 0;
$$019 = __ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast46$byval_copy, $62, $16, $64) | 0;
} else {
$51 = HEAP32[$5 >> 2] | 0;
$53 = $51 & 16773375 | 1024;
$54 = HEAP32[$6 >> 2] | 0;
$56 = Math_fround(HEAPF32[$29 + 20 >> 2]);
$$sroa$329$0$extract$shift = $51 & -16777216;
if (!$47) {
__ZN6VectorC2EPKS_($18, $48);
$$sroa$040$0$insert$insert = $$sroa$329$0$extract$shift | $53 & 16777215;
HEAP32[$3 >> 2] = $$sroa$040$0$insert$insert;
HEAP8[$tmpcast46$byval_copy >> 0] = HEAP8[$3 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 1 >> 0] = HEAP8[$3 + 1 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 3 >> 0] = HEAP8[$3 + 3 >> 0] | 0;
$58 = __ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast46$byval_copy, $54, $16, $56) | 0;
HEAP32[$4 >> 2] = $$sroa$040$0$insert$insert;
HEAP8[$tmpcast46$byval_copy >> 0] = HEAP8[$4 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 1 >> 0] = HEAP8[$4 + 1 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 2 >> 0] = HEAP8[$4 + 2 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 3 >> 0] = HEAP8[$4 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $tmpcast46$byval_copy, $18, $56);
$$019 = $58;
break;
} else {
$$sroa$037$0$insert$insert = $$sroa$329$0$extract$shift | $53 & 16777215;
HEAP32[$3 >> 2] = $$sroa$037$0$insert$insert;
HEAP8[$tmpcast46$byval_copy >> 0] = HEAP8[$3 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 1 >> 0] = HEAP8[$3 + 1 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 3 >> 0] = HEAP8[$3 + 3 >> 0] | 0;
$57 = __ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast46$byval_copy, $54, $16, $56) | 0;
HEAP32[$4 >> 2] = $$sroa$037$0$insert$insert;
HEAP8[$tmpcast46$byval_copy >> 0] = HEAP8[$4 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 1 >> 0] = HEAP8[$4 + 1 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 2 >> 0] = HEAP8[$4 + 2 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 3 >> 0] = HEAP8[$4 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $tmpcast46$byval_copy, $17, $56);
$$019 = $57;
break;
}
} while (0);
if (0) {
$68 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17192] | 0, $1) | 0;
HEAP32[$vararg_buffer2 >> 2] = $68;
__Z7eprintfPKcz(22628, $vararg_buffer2);
__ZNK6Vector5printEP8_IO_FILEi($11, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
$71 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17192] | 0, $1) | 0;
HEAP32[$vararg_buffer5 >> 2] = $71;
__Z7eprintfPKcz(22644, $vararg_buffer5);
__ZNK6Vector5printEP8_IO_FILEi($16, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__ZNK4Site5printEP8_IO_FILE($29, HEAP32[16082] | 0);
__ZNK4Site5printEP8_IO_FILE($$019, HEAP32[16082] | 0);
}
__ZN6VectorC2Ev($16);
__ZN6VectorC2Ev($17);
$75 = $31 + 24 | 0;
__ZL7FakeFarRK6VectorS1_PS0_S2_fRS_S3_($10, $12, $47, HEAP32[$75 >> 2] | 0, $2, $16, $17);
$77 = HEAP32[$75 >> 2] | 0;
do if (!$77) {
$88 = HEAP32[$5 >> 2] | 0;
HEAP32[$20 >> 2] = $88;
$90 = $88 & 16773375 | 768;
HEAP16[$20 >> 1] = $90;
HEAP8[$20 + 2 >> 0] = $90 >>> 16;
$91 = HEAP32[$6 >> 2] | 0;
$93 = Math_fround(HEAPF32[$31 + 20 >> 2]);
HEAP8[$tmpcast46$byval_copy >> 0] = HEAP8[$20 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 1 >> 0] = HEAP8[$20 + 1 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 2 >> 0] = HEAP8[$20 + 2 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 3 >> 0] = HEAP8[$20 + 3 >> 0] | 0;
$$0 = __ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast46$byval_copy, $91, $16, $93) | 0;
} else {
$80 = HEAP32[$5 >> 2] | 0;
$82 = $80 & 16773375 | 768;
$83 = HEAP32[$6 >> 2] | 0;
$85 = Math_fround(HEAPF32[$31 + 20 >> 2]);
$$sroa$3$0$extract$shift = $80 & -16777216;
if (!$47) {
__ZN6VectorC2EPKS_($18, $77);
$$sroa$032$0$insert$insert = $$sroa$3$0$extract$shift | $82 & 16777215;
HEAP32[$3 >> 2] = $$sroa$032$0$insert$insert;
HEAP8[$tmpcast46$byval_copy >> 0] = HEAP8[$3 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 1 >> 0] = HEAP8[$3 + 1 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 3 >> 0] = HEAP8[$3 + 3 >> 0] | 0;
$87 = __ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast46$byval_copy, $83, $16, $85) | 0;
HEAP32[$4 >> 2] = $$sroa$032$0$insert$insert;
HEAP8[$tmpcast46$byval_copy >> 0] = HEAP8[$4 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 1 >> 0] = HEAP8[$4 + 1 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 2 >> 0] = HEAP8[$4 + 2 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 3 >> 0] = HEAP8[$4 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $tmpcast46$byval_copy, $18, $85);
$$0 = $87;
break;
} else {
$$sroa$034$0$insert$insert = $$sroa$3$0$extract$shift | $82 & 16777215;
HEAP32[$3 >> 2] = $$sroa$034$0$insert$insert;
HEAP8[$tmpcast46$byval_copy >> 0] = HEAP8[$3 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 1 >> 0] = HEAP8[$3 + 1 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 3 >> 0] = HEAP8[$3 + 3 >> 0] | 0;
$86 = __ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast46$byval_copy, $83, $16, $85) | 0;
HEAP32[$4 >> 2] = $$sroa$034$0$insert$insert;
HEAP8[$tmpcast46$byval_copy >> 0] = HEAP8[$4 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 1 >> 0] = HEAP8[$4 + 1 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 2 >> 0] = HEAP8[$4 + 2 >> 0] | 0;
HEAP8[$tmpcast46$byval_copy + 3 >> 0] = HEAP8[$4 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $tmpcast46$byval_copy, $17, $85);
$$0 = $86;
break;
}
} while (0);
if (0) {
$97 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17192] | 0, $1) | 0;
HEAP32[$vararg_buffer8 >> 2] = $97;
__Z7eprintfPKcz(22660, $vararg_buffer8);
__ZNK6Vector5printEP8_IO_FILEi($16, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__ZNK4Site5printEP8_IO_FILE($31, HEAP32[16082] | 0);
__ZNK4Site5printEP8_IO_FILE($$0, HEAP32[16082] | 0);
}
STACKTOP = sp;
return;
}
function _dispose_chunk($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0419 = 0, $$0420 = 0, $$0431 = 0, $$0438 = 0, $$1 = 0, $$1418 = 0, $$1426 = 0, $$1429 = 0, $$1433 = 0, $$1437 = 0, $$2 = 0, $$3 = 0, $$3435 = 0, $$pre$phi23Z2D = 0, $$pre$phi25Z2D = 0, $$pre$phiZ2D = 0, $101 = 0, $102 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $117 = 0, $12 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $134 = 0, $136 = 0, $138 = 0, $151 = 0, $156 = 0, $158 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $184 = 0, $185 = 0, $199 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $209 = 0, $22 = 0, $224 = 0, $227 = 0, $228 = 0, $229 = 0, $233 = 0, $234 = 0, $24 = 0, $240 = 0, $245 = 0, $246 = 0, $249 = 0, $251 = 0, $254 = 0, $259 = 0, $265 = 0, $269 = 0, $270 = 0, $288 = 0, $290 = 0, $297 = 0, $298 = 0, $299 = 0, $37 = 0, $4 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $85 = 0, $88 = 0, $89 = 0, $95 = 0, label = 0;
$2 = $0 + $1 | 0;
$4 = HEAP32[$0 + 4 >> 2] | 0;
L1 : do if (!($4 & 1)) {
$7 = HEAP32[$0 >> 2] | 0;
if (!($4 & 3)) return;
$11 = $0 + (0 - $7) | 0;
$12 = $7 + $1 | 0;
$13 = HEAP32[17871] | 0;
if ($11 >>> 0 < $13 >>> 0) _abort();
if ((HEAP32[17872] | 0) == ($11 | 0)) {
$101 = $2 + 4 | 0;
$102 = HEAP32[$101 >> 2] | 0;
if (($102 & 3 | 0) != 3) {
$$1 = $11;
$$1418 = $12;
break;
}
HEAP32[17869] = $12;
HEAP32[$101 >> 2] = $102 & -2;
HEAP32[$11 + 4 >> 2] = $12 | 1;
HEAP32[$2 >> 2] = $12;
return;
}
$17 = $7 >>> 3;
if ($7 >>> 0 < 256) {
$20 = HEAP32[$11 + 8 >> 2] | 0;
$22 = HEAP32[$11 + 12 >> 2] | 0;
$24 = 71508 + ($17 << 1 << 2) | 0;
if (($20 | 0) != ($24 | 0)) {
if ($13 >>> 0 > $20 >>> 0) _abort();
if ((HEAP32[$20 + 12 >> 2] | 0) != ($11 | 0)) _abort();
}
if (($22 | 0) == ($20 | 0)) {
HEAP32[17867] = HEAP32[17867] & ~(1 << $17);
$$1 = $11;
$$1418 = $12;
break;
}
if (($22 | 0) == ($24 | 0)) $$pre$phi25Z2D = $22 + 8 | 0; else {
if ($13 >>> 0 > $22 >>> 0) _abort();
$37 = $22 + 8 | 0;
if ((HEAP32[$37 >> 2] | 0) == ($11 | 0)) $$pre$phi25Z2D = $37; else _abort();
}
HEAP32[$20 + 12 >> 2] = $22;
HEAP32[$$pre$phi25Z2D >> 2] = $20;
$$1 = $11;
$$1418 = $12;
break;
}
$42 = HEAP32[$11 + 24 >> 2] | 0;
$44 = HEAP32[$11 + 12 >> 2] | 0;
do if (($44 | 0) == ($11 | 0)) {
$55 = $11 + 16 | 0;
$56 = $55 + 4 | 0;
$57 = HEAP32[$56 >> 2] | 0;
if (!$57) {
$59 = HEAP32[$55 >> 2] | 0;
if (!$59) {
$$3 = 0;
break;
} else {
$$1426 = $59;
$$1429 = $55;
}
} else {
$$1426 = $57;
$$1429 = $56;
}
while (1) {
$61 = $$1426 + 20 | 0;
$62 = HEAP32[$61 >> 2] | 0;
if ($62 | 0) {
$$1426 = $62;
$$1429 = $61;
continue;
}
$64 = $$1426 + 16 | 0;
$65 = HEAP32[$64 >> 2] | 0;
if (!$65) break; else {
$$1426 = $65;
$$1429 = $64;
}
}
if ($13 >>> 0 > $$1429 >>> 0) _abort(); else {
HEAP32[$$1429 >> 2] = 0;
$$3 = $$1426;
break;
}
} else {
$47 = HEAP32[$11 + 8 >> 2] | 0;
if ($13 >>> 0 > $47 >>> 0) _abort();
$49 = $47 + 12 | 0;
if ((HEAP32[$49 >> 2] | 0) != ($11 | 0)) _abort();
$52 = $44 + 8 | 0;
if ((HEAP32[$52 >> 2] | 0) == ($11 | 0)) {
HEAP32[$49 >> 2] = $44;
HEAP32[$52 >> 2] = $47;
$$3 = $44;
break;
} else _abort();
} while (0);
if (!$42) {
$$1 = $11;
$$1418 = $12;
} else {
$70 = HEAP32[$11 + 28 >> 2] | 0;
$71 = 71772 + ($70 << 2) | 0;
do if ((HEAP32[$71 >> 2] | 0) == ($11 | 0)) {
HEAP32[$71 >> 2] = $$3;
if (!$$3) {
HEAP32[17868] = HEAP32[17868] & ~(1 << $70);
$$1 = $11;
$$1418 = $12;
break L1;
}
} else if ((HEAP32[17871] | 0) >>> 0 > $42 >>> 0) _abort(); else {
HEAP32[$42 + 16 + (((HEAP32[$42 + 16 >> 2] | 0) != ($11 | 0) & 1) << 2) >> 2] = $$3;
if (!$$3) {
$$1 = $11;
$$1418 = $12;
break L1;
} else break;
} while (0);
$85 = HEAP32[17871] | 0;
if ($85 >>> 0 > $$3 >>> 0) _abort();
HEAP32[$$3 + 24 >> 2] = $42;
$88 = $11 + 16 | 0;
$89 = HEAP32[$88 >> 2] | 0;
do if ($89 | 0) if ($85 >>> 0 > $89 >>> 0) _abort(); else {
HEAP32[$$3 + 16 >> 2] = $89;
HEAP32[$89 + 24 >> 2] = $$3;
break;
} while (0);
$95 = HEAP32[$88 + 4 >> 2] | 0;
if (!$95) {
$$1 = $11;
$$1418 = $12;
} else if ((HEAP32[17871] | 0) >>> 0 > $95 >>> 0) _abort(); else {
HEAP32[$$3 + 20 >> 2] = $95;
HEAP32[$95 + 24 >> 2] = $$3;
$$1 = $11;
$$1418 = $12;
break;
}
}
} else {
$$1 = $0;
$$1418 = $1;
} while (0);
$108 = HEAP32[17871] | 0;
if ($2 >>> 0 < $108 >>> 0) _abort();
$110 = $2 + 4 | 0;
$111 = HEAP32[$110 >> 2] | 0;
if (!($111 & 2)) {
if ((HEAP32[17873] | 0) == ($2 | 0)) {
$117 = (HEAP32[17870] | 0) + $$1418 | 0;
HEAP32[17870] = $117;
HEAP32[17873] = $$1;
HEAP32[$$1 + 4 >> 2] = $117 | 1;
if (($$1 | 0) != (HEAP32[17872] | 0)) return;
HEAP32[17872] = 0;
HEAP32[17869] = 0;
return;
}
if ((HEAP32[17872] | 0) == ($2 | 0)) {
$125 = (HEAP32[17869] | 0) + $$1418 | 0;
HEAP32[17869] = $125;
HEAP32[17872] = $$1;
HEAP32[$$1 + 4 >> 2] = $125 | 1;
HEAP32[$$1 + $125 >> 2] = $125;
return;
}
$130 = ($111 & -8) + $$1418 | 0;
$131 = $111 >>> 3;
L96 : do if ($111 >>> 0 < 256) {
$134 = HEAP32[$2 + 8 >> 2] | 0;
$136 = HEAP32[$2 + 12 >> 2] | 0;
$138 = 71508 + ($131 << 1 << 2) | 0;
if (($134 | 0) != ($138 | 0)) {
if ($108 >>> 0 > $134 >>> 0) _abort();
if ((HEAP32[$134 + 12 >> 2] | 0) != ($2 | 0)) _abort();
}
if (($136 | 0) == ($134 | 0)) {
HEAP32[17867] = HEAP32[17867] & ~(1 << $131);
break;
}
if (($136 | 0) == ($138 | 0)) $$pre$phi23Z2D = $136 + 8 | 0; else {
if ($108 >>> 0 > $136 >>> 0) _abort();
$151 = $136 + 8 | 0;
if ((HEAP32[$151 >> 2] | 0) == ($2 | 0)) $$pre$phi23Z2D = $151; else _abort();
}
HEAP32[$134 + 12 >> 2] = $136;
HEAP32[$$pre$phi23Z2D >> 2] = $134;
} else {
$156 = HEAP32[$2 + 24 >> 2] | 0;
$158 = HEAP32[$2 + 12 >> 2] | 0;
do if (($158 | 0) == ($2 | 0)) {
$169 = $2 + 16 | 0;
$170 = $169 + 4 | 0;
$171 = HEAP32[$170 >> 2] | 0;
if (!$171) {
$173 = HEAP32[$169 >> 2] | 0;
if (!$173) {
$$3435 = 0;
break;
} else {
$$1433 = $173;
$$1437 = $169;
}
} else {
$$1433 = $171;
$$1437 = $170;
}
while (1) {
$175 = $$1433 + 20 | 0;
$176 = HEAP32[$175 >> 2] | 0;
if ($176 | 0) {
$$1433 = $176;
$$1437 = $175;
continue;
}
$178 = $$1433 + 16 | 0;
$179 = HEAP32[$178 >> 2] | 0;
if (!$179) break; else {
$$1433 = $179;
$$1437 = $178;
}
}
if ($108 >>> 0 > $$1437 >>> 0) _abort(); else {
HEAP32[$$1437 >> 2] = 0;
$$3435 = $$1433;
break;
}
} else {
$161 = HEAP32[$2 + 8 >> 2] | 0;
if ($108 >>> 0 > $161 >>> 0) _abort();
$163 = $161 + 12 | 0;
if ((HEAP32[$163 >> 2] | 0) != ($2 | 0)) _abort();
$166 = $158 + 8 | 0;
if ((HEAP32[$166 >> 2] | 0) == ($2 | 0)) {
HEAP32[$163 >> 2] = $158;
HEAP32[$166 >> 2] = $161;
$$3435 = $158;
break;
} else _abort();
} while (0);
if ($156 | 0) {
$184 = HEAP32[$2 + 28 >> 2] | 0;
$185 = 71772 + ($184 << 2) | 0;
do if ((HEAP32[$185 >> 2] | 0) == ($2 | 0)) {
HEAP32[$185 >> 2] = $$3435;
if (!$$3435) {
HEAP32[17868] = HEAP32[17868] & ~(1 << $184);
break L96;
}
} else if ((HEAP32[17871] | 0) >>> 0 > $156 >>> 0) _abort(); else {
HEAP32[$156 + 16 + (((HEAP32[$156 + 16 >> 2] | 0) != ($2 | 0) & 1) << 2) >> 2] = $$3435;
if (!$$3435) break L96; else break;
} while (0);
$199 = HEAP32[17871] | 0;
if ($199 >>> 0 > $$3435 >>> 0) _abort();
HEAP32[$$3435 + 24 >> 2] = $156;
$202 = $2 + 16 | 0;
$203 = HEAP32[$202 >> 2] | 0;
do if ($203 | 0) if ($199 >>> 0 > $203 >>> 0) _abort(); else {
HEAP32[$$3435 + 16 >> 2] = $203;
HEAP32[$203 + 24 >> 2] = $$3435;
break;
} while (0);
$209 = HEAP32[$202 + 4 >> 2] | 0;
if ($209 | 0) if ((HEAP32[17871] | 0) >>> 0 > $209 >>> 0) _abort(); else {
HEAP32[$$3435 + 20 >> 2] = $209;
HEAP32[$209 + 24 >> 2] = $$3435;
break;
}
}
} while (0);
HEAP32[$$1 + 4 >> 2] = $130 | 1;
HEAP32[$$1 + $130 >> 2] = $130;
if (($$1 | 0) == (HEAP32[17872] | 0)) {
HEAP32[17869] = $130;
return;
} else $$2 = $130;
} else {
HEAP32[$110 >> 2] = $111 & -2;
HEAP32[$$1 + 4 >> 2] = $$1418 | 1;
HEAP32[$$1 + $$1418 >> 2] = $$1418;
$$2 = $$1418;
}
$224 = $$2 >>> 3;
if ($$2 >>> 0 < 256) {
$227 = 71508 + ($224 << 1 << 2) | 0;
$228 = HEAP32[17867] | 0;
$229 = 1 << $224;
if (!($228 & $229)) {
HEAP32[17867] = $228 | $229;
$$0438 = $227;
$$pre$phiZ2D = $227 + 8 | 0;
} else {
$233 = $227 + 8 | 0;
$234 = HEAP32[$233 >> 2] | 0;
if ((HEAP32[17871] | 0) >>> 0 > $234 >>> 0) _abort(); else {
$$0438 = $234;
$$pre$phiZ2D = $233;
}
}
HEAP32[$$pre$phiZ2D >> 2] = $$1;
HEAP32[$$0438 + 12 >> 2] = $$1;
HEAP32[$$1 + 8 >> 2] = $$0438;
HEAP32[$$1 + 12 >> 2] = $227;
return;
}
$240 = $$2 >>> 8;
if (!$240) $$0431 = 0; else if ($$2 >>> 0 > 16777215) $$0431 = 31; else {
$245 = ($240 + 1048320 | 0) >>> 16 & 8;
$246 = $240 << $245;
$249 = ($246 + 520192 | 0) >>> 16 & 4;
$251 = $246 << $249;
$254 = ($251 + 245760 | 0) >>> 16 & 2;
$259 = 14 - ($249 | $245 | $254) + ($251 << $254 >>> 15) | 0;
$$0431 = $$2 >>> ($259 + 7 | 0) & 1 | $259 << 1;
}
$265 = 71772 + ($$0431 << 2) | 0;
HEAP32[$$1 + 28 >> 2] = $$0431;
HEAP32[$$1 + 20 >> 2] = 0;
HEAP32[$$1 + 16 >> 2] = 0;
$269 = HEAP32[17868] | 0;
$270 = 1 << $$0431;
if (!($269 & $270)) {
HEAP32[17868] = $269 | $270;
HEAP32[$265 >> 2] = $$1;
HEAP32[$$1 + 24 >> 2] = $265;
HEAP32[$$1 + 12 >> 2] = $$1;
HEAP32[$$1 + 8 >> 2] = $$1;
return;
}
$$0419 = $$2 << (($$0431 | 0) == 31 ? 0 : 25 - ($$0431 >>> 1) | 0);
$$0420 = HEAP32[$265 >> 2] | 0;
while (1) {
if ((HEAP32[$$0420 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
label = 121;
break;
}
$288 = $$0420 + 16 + ($$0419 >>> 31 << 2) | 0;
$290 = HEAP32[$288 >> 2] | 0;
if (!$290) {
label = 118;
break;
} else {
$$0419 = $$0419 << 1;
$$0420 = $290;
}
}
if ((label | 0) == 118) {
if ((HEAP32[17871] | 0) >>> 0 > $288 >>> 0) _abort();
HEAP32[$288 >> 2] = $$1;
HEAP32[$$1 + 24 >> 2] = $$0420;
HEAP32[$$1 + 12 >> 2] = $$1;
HEAP32[$$1 + 8 >> 2] = $$1;
return;
} else if ((label | 0) == 121) {
$297 = $$0420 + 8 | 0;
$298 = HEAP32[$297 >> 2] | 0;
$299 = HEAP32[17871] | 0;
if (!($299 >>> 0 <= $298 >>> 0 & $299 >>> 0 <= $$0420 >>> 0)) _abort();
HEAP32[$298 + 12 >> 2] = $$1;
HEAP32[$297 >> 2] = $$1;
HEAP32[$$1 + 8 >> 2] = $298;
HEAP32[$$1 + 12 >> 2] = $$0420;
HEAP32[$$1 + 24 >> 2] = 0;
return;
}
}
function ___intscan($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0154222 = 0, $$0157 = 0, $$0159 = 0, $$1155192 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156210 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162215 = 0, $$4163$be = 0, $$4163$lcssa = 0, $$5$be = 0, $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7198 = 0, $$8 = 0, $$9$be = 0, $104 = 0, $123 = 0, $124 = 0, $131 = 0, $133 = 0, $134 = 0, $138 = 0, $139 = 0, $147 = 0, $152 = 0, $153 = 0, $155 = 0, $158 = 0, $16 = 0, $160 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $169 = 0, $170 = 0, $171 = 0, $189 = 0, $190 = 0, $198 = 0, $20 = 0, $204 = 0, $206 = 0, $207 = 0, $209 = 0, $21 = 0, $211 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $225 = 0, $226 = 0, $227 = 0, $242 = 0, $253 = 0, $263 = 0, $265 = 0, $274 = 0, $275 = 0, $28 = 0, $282 = 0, $284 = 0, $287 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $32 = 0, $40 = 0, $42 = 0, $50 = 0, $54 = 0, $6 = 0, $68 = 0, $7 = 0, $70 = 0, $74 = 0, $75 = 0, $8 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $93 = 0, $94 = 0, $96 = 0, label = 0;
L1 : do if ($1 >>> 0 > 36) {
$8 = ___errno_location() | 0;
HEAP32[$8 >> 2] = 22;
$289 = 0;
$290 = 0;
} else {
$6 = $0 + 4 | 0;
$7 = $0 + 100 | 0;
do {
$9 = HEAP32[$6 >> 2] | 0;
if ($9 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
HEAP32[$6 >> 2] = $9 + 1;
$16 = HEAPU8[$9 >> 0] | 0;
} else $16 = ___shgetc($0) | 0;
} while ((_isspace($16) | 0) != 0);
L11 : do switch ($16 | 0) {
case 43:
case 45:
{
$20 = (($16 | 0) == 45) << 31 >> 31;
$21 = HEAP32[$6 >> 2] | 0;
if ($21 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
HEAP32[$6 >> 2] = $21 + 1;
$$0157 = $20;
$$0159 = HEAPU8[$21 >> 0] | 0;
break L11;
} else {
$$0157 = $20;
$$0159 = ___shgetc($0) | 0;
break L11;
}
break;
}
default:
{
$$0157 = 0;
$$0159 = $16;
}
} while (0);
$28 = ($1 | 0) == 0;
do if (($1 | 16 | 0) == 16 & ($$0159 | 0) == 48) {
$32 = HEAP32[$6 >> 2] | 0;
if ($32 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
HEAP32[$6 >> 2] = $32 + 1;
$40 = HEAPU8[$32 >> 0] | 0;
} else $40 = ___shgetc($0) | 0;
if (($40 | 32 | 0) != 120) if ($28) {
$$1160169 = $40;
$$1165167 = 8;
label = 46;
break;
} else {
$$1160 = $40;
$$1165 = $1;
label = 32;
break;
}
$42 = HEAP32[$6 >> 2] | 0;
if ($42 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
HEAP32[$6 >> 2] = $42 + 1;
$50 = HEAPU8[$42 >> 0] | 0;
} else $50 = ___shgetc($0) | 0;
if ((HEAPU8[60538 + $50 >> 0] | 0) > 15) {
$54 = (HEAP32[$7 >> 2] | 0) == 0;
if (!$54) HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1;
if (!$2) {
___shlim($0, 0);
$289 = 0;
$290 = 0;
break L1;
}
if ($54) {
$289 = 0;
$290 = 0;
break L1;
}
HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1;
$289 = 0;
$290 = 0;
break L1;
} else {
$$1160169 = $50;
$$1165167 = 16;
label = 46;
}
} else {
$$166 = $28 ? 10 : $1;
if ($$166 >>> 0 > (HEAPU8[60538 + $$0159 >> 0] | 0) >>> 0) {
$$1160 = $$0159;
$$1165 = $$166;
label = 32;
} else {
if (HEAP32[$7 >> 2] | 0) HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1;
___shlim($0, 0);
$68 = ___errno_location() | 0;
HEAP32[$68 >> 2] = 22;
$289 = 0;
$290 = 0;
break L1;
}
} while (0);
L43 : do if ((label | 0) == 32) if (($$1165 | 0) == 10) {
$70 = $$1160 + -48 | 0;
if ($70 >>> 0 < 10) {
$$0154222 = 0;
$74 = $70;
do {
$$0154222 = ($$0154222 * 10 | 0) + $74 | 0;
$75 = HEAP32[$6 >> 2] | 0;
if ($75 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
HEAP32[$6 >> 2] = $75 + 1;
$$2161$be = HEAPU8[$75 >> 0] | 0;
} else $$2161$be = ___shgetc($0) | 0;
$74 = $$2161$be + -48 | 0;
} while ($74 >>> 0 < 10 & $$0154222 >>> 0 < 429496729);
$$2161$lcssa = $$2161$be;
$291 = $$0154222;
$292 = 0;
} else {
$$2161$lcssa = $$1160;
$291 = 0;
$292 = 0;
}
$86 = $$2161$lcssa + -48 | 0;
if ($86 >>> 0 < 10) {
$$3162215 = $$2161$lcssa;
$88 = $291;
$89 = $292;
$93 = $86;
while (1) {
$90 = ___muldi3($88 | 0, $89 | 0, 10, 0) | 0;
$91 = tempRet0;
$94 = (($93 | 0) < 0) << 31 >> 31;
$96 = ~$94;
if ($91 >>> 0 > $96 >>> 0 | ($91 | 0) == ($96 | 0) & $90 >>> 0 > ~$93 >>> 0) {
$$1165168 = 10;
$$8 = $$3162215;
$293 = $88;
$294 = $89;
label = 72;
break L43;
}
$88 = _i64Add($90 | 0, $91 | 0, $93 | 0, $94 | 0) | 0;
$89 = tempRet0;
$104 = HEAP32[$6 >> 2] | 0;
if ($104 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
HEAP32[$6 >> 2] = $104 + 1;
$$3162$be = HEAPU8[$104 >> 0] | 0;
} else $$3162$be = ___shgetc($0) | 0;
$93 = $$3162$be + -48 | 0;
if (!($93 >>> 0 < 10 & ($89 >>> 0 < 429496729 | ($89 | 0) == 429496729 & $88 >>> 0 < 2576980378))) break; else $$3162215 = $$3162$be;
}
if ($93 >>> 0 > 9) {
$$1158 = $$0157;
$263 = $89;
$265 = $88;
} else {
$$1165168 = 10;
$$8 = $$3162$be;
$293 = $88;
$294 = $89;
label = 72;
}
} else {
$$1158 = $$0157;
$263 = $292;
$265 = $291;
}
} else {
$$1160169 = $$1160;
$$1165167 = $$1165;
label = 46;
} while (0);
L63 : do if ((label | 0) == 46) {
if (!($$1165167 + -1 & $$1165167)) {
$131 = HEAP8[60794 + (($$1165167 * 23 | 0) >>> 5 & 7) >> 0] | 0;
$133 = HEAP8[60538 + $$1160169 >> 0] | 0;
$134 = $133 & 255;
if ($$1165167 >>> 0 > $134 >>> 0) {
$$1155192 = 0;
$138 = $134;
do {
$$1155192 = $138 | $$1155192 << $131;
$139 = HEAP32[$6 >> 2] | 0;
if ($139 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
HEAP32[$6 >> 2] = $139 + 1;
$$4163$be = HEAPU8[$139 >> 0] | 0;
} else $$4163$be = ___shgetc($0) | 0;
$147 = HEAP8[60538 + $$4163$be >> 0] | 0;
$138 = $147 & 255;
} while ($$1155192 >>> 0 < 134217728 & $$1165167 >>> 0 > $138 >>> 0);
$$4163$lcssa = $$4163$be;
$155 = $147;
$158 = 0;
$160 = $$1155192;
} else {
$$4163$lcssa = $$1160169;
$155 = $133;
$158 = 0;
$160 = 0;
}
$152 = _bitshift64Lshr(-1, -1, $131 | 0) | 0;
$153 = tempRet0;
if ($$1165167 >>> 0 <= ($155 & 255) >>> 0 | ($153 >>> 0 < $158 >>> 0 | ($153 | 0) == ($158 | 0) & $152 >>> 0 < $160 >>> 0)) {
$$1165168 = $$1165167;
$$8 = $$4163$lcssa;
$293 = $160;
$294 = $158;
label = 72;
break;
} else {
$164 = $160;
$165 = $158;
$169 = $155;
}
while (1) {
$166 = _bitshift64Shl($164 | 0, $165 | 0, $131 | 0) | 0;
$167 = tempRet0;
$170 = $166 | $169 & 255;
$171 = HEAP32[$6 >> 2] | 0;
if ($171 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
HEAP32[$6 >> 2] = $171 + 1;
$$5$be = HEAPU8[$171 >> 0] | 0;
} else $$5$be = ___shgetc($0) | 0;
$169 = HEAP8[60538 + $$5$be >> 0] | 0;
if ($$1165167 >>> 0 <= ($169 & 255) >>> 0 | ($167 >>> 0 > $153 >>> 0 | ($167 | 0) == ($153 | 0) & $170 >>> 0 > $152 >>> 0)) {
$$1165168 = $$1165167;
$$8 = $$5$be;
$293 = $170;
$294 = $167;
label = 72;
break L63;
} else {
$164 = $170;
$165 = $167;
}
}
}
$123 = HEAP8[60538 + $$1160169 >> 0] | 0;
$124 = $123 & 255;
if ($$1165167 >>> 0 > $124 >>> 0) {
$$2156210 = 0;
$189 = $124;
do {
$$2156210 = $189 + (Math_imul($$2156210, $$1165167) | 0) | 0;
$190 = HEAP32[$6 >> 2] | 0;
if ($190 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
HEAP32[$6 >> 2] = $190 + 1;
$$6$be = HEAPU8[$190 >> 0] | 0;
} else $$6$be = ___shgetc($0) | 0;
$198 = HEAP8[60538 + $$6$be >> 0] | 0;
$189 = $198 & 255;
} while ($$2156210 >>> 0 < 119304647 & $$1165167 >>> 0 > $189 >>> 0);
$$6$lcssa = $$6$be;
$204 = $198;
$295 = $$2156210;
$296 = 0;
} else {
$$6$lcssa = $$1160169;
$204 = $123;
$295 = 0;
$296 = 0;
}
if ($$1165167 >>> 0 > ($204 & 255) >>> 0) {
$206 = ___udivdi3(-1, -1, $$1165167 | 0, 0) | 0;
$207 = tempRet0;
$$7198 = $$6$lcssa;
$209 = $296;
$211 = $295;
$218 = $204;
while (1) {
if ($209 >>> 0 > $207 >>> 0 | ($209 | 0) == ($207 | 0) & $211 >>> 0 > $206 >>> 0) {
$$1165168 = $$1165167;
$$8 = $$7198;
$293 = $211;
$294 = $209;
label = 72;
break L63;
}
$215 = ___muldi3($211 | 0, $209 | 0, $$1165167 | 0, 0) | 0;
$216 = tempRet0;
$217 = $218 & 255;
if ($216 >>> 0 > 4294967295 | ($216 | 0) == -1 & $215 >>> 0 > ~$217 >>> 0) {
$$1165168 = $$1165167;
$$8 = $$7198;
$293 = $211;
$294 = $209;
label = 72;
break L63;
}
$225 = _i64Add($215 | 0, $216 | 0, $217 | 0, 0) | 0;
$226 = tempRet0;
$227 = HEAP32[$6 >> 2] | 0;
if ($227 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
HEAP32[$6 >> 2] = $227 + 1;
$$7$be = HEAPU8[$227 >> 0] | 0;
} else $$7$be = ___shgetc($0) | 0;
$218 = HEAP8[60538 + $$7$be >> 0] | 0;
if ($$1165167 >>> 0 <= ($218 & 255) >>> 0) {
$$1165168 = $$1165167;
$$8 = $$7$be;
$293 = $225;
$294 = $226;
label = 72;
break;
} else {
$$7198 = $$7$be;
$209 = $226;
$211 = $225;
}
}
} else {
$$1165168 = $$1165167;
$$8 = $$6$lcssa;
$293 = $295;
$294 = $296;
label = 72;
}
} while (0);
if ((label | 0) == 72) if ($$1165168 >>> 0 > (HEAPU8[60538 + $$8 >> 0] | 0) >>> 0) {
do {
$242 = HEAP32[$6 >> 2] | 0;
if ($242 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
HEAP32[$6 >> 2] = $242 + 1;
$$9$be = HEAPU8[$242 >> 0] | 0;
} else $$9$be = ___shgetc($0) | 0;
} while ($$1165168 >>> 0 > (HEAPU8[60538 + $$9$be >> 0] | 0) >>> 0);
$253 = ___errno_location() | 0;
HEAP32[$253 >> 2] = 34;
$$1158 = ($3 & 1 | 0) == 0 & 0 == 0 ? $$0157 : 0;
$263 = $4;
$265 = $3;
} else {
$$1158 = $$0157;
$263 = $294;
$265 = $293;
}
if (HEAP32[$7 >> 2] | 0) HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1;
if (!($263 >>> 0 < $4 >>> 0 | ($263 | 0) == ($4 | 0) & $265 >>> 0 < $3 >>> 0)) {
if (!(($3 & 1 | 0) != 0 | 0 != 0 | ($$1158 | 0) != 0)) {
$274 = ___errno_location() | 0;
HEAP32[$274 >> 2] = 34;
$275 = _i64Add($3 | 0, $4 | 0, -1, -1) | 0;
$289 = tempRet0;
$290 = $275;
break;
}
if ($263 >>> 0 > $4 >>> 0 | ($263 | 0) == ($4 | 0) & $265 >>> 0 > $3 >>> 0) {
$282 = ___errno_location() | 0;
HEAP32[$282 >> 2] = 34;
$289 = $4;
$290 = $3;
break;
}
}
$284 = (($$1158 | 0) < 0) << 31 >> 31;
$287 = _i64Subtract($265 ^ $$1158 | 0, $263 ^ $284 | 0, $$1158 | 0, $284 | 0) | 0;
$289 = tempRet0;
$290 = $287;
} while (0);
tempRet0 = $289;
return $290 | 0;
}
function __ZN6Vector8coneAxisERfRKS_S2_S2_S2_($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
var $100 = 0, $105 = 0, $11 = f0, $111 = 0, $113 = 0, $118 = 0, $12 = 0, $123 = f0, $125 = f0, $126 = 0, $128 = f0, $129 = 0, $131 = f0, $133 = f0, $135 = f0, $14 = f0, $142 = f0, $144 = f0, $145 = f0, $146 = f0, $147 = f0, $149 = 0, $15 = 0, $150 = 0, $152 = 0, $153 = 0, $154 = 0, $156 = 0, $161 = 0, $167 = 0, $169 = 0, $17 = f0, $174 = 0, $179 = f0, $18 = 0, $181 = f0, $182 = 0, $183 = f0, $185 = f0, $186 = 0, $187 = f0, $190 = f0, $192 = f0, $193 = f0, $194 = f0, $195 = f0, $196 = f0, $20 = f0, $21 = 0, $23 = f0, $30 = f0, $32 = f0, $33 = f0, $34 = f0, $35 = f0, $37 = 0, $38 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $49 = 0, $55 = 0, $57 = 0, $6 = 0, $62 = 0, $67 = f0, $69 = f0, $7 = 0, $70 = 0, $72 = f0, $73 = 0, $75 = f0, $77 = f0, $79 = f0, $8 = 0, $86 = f0, $88 = f0, $89 = f0, $9 = f0, $90 = f0, $91 = f0, $93 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer28 = 0, $vararg_buffer30 = 0, $vararg_buffer38 = 0, $vararg_buffer40 = 0, $vararg_buffer48 = 0, $vararg_buffer50 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 384 | 0;
$vararg_buffer50 = sp + 288 | 0;
$vararg_buffer48 = sp + 280 | 0;
$vararg_buffer40 = sp + 232 | 0;
$vararg_buffer38 = sp + 224 | 0;
$vararg_buffer30 = sp + 176 | 0;
$vararg_buffer28 = sp + 168 | 0;
$vararg_buffer20 = sp + 120 | 0;
$vararg_buffer18 = sp + 112 | 0;
$vararg_buffer10 = sp + 64 | 0;
$vararg_buffer8 = sp + 56 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$6 = sp + 360 | 0;
$7 = sp + 348 | 0;
$8 = sp + 336 | 0;
$9 = Math_fround(HEAPF32[$3 >> 2]);
$11 = Math_fround(HEAPF32[$3 + 4 >> 2]);
$12 = $6 + 4 | 0;
$14 = Math_fround(HEAPF32[$3 + 8 >> 2]);
$15 = $6 + 8 | 0;
$17 = Math_fround($9 - Math_fround(HEAPF32[$2 >> 2]));
HEAPF32[$6 >> 2] = $17;
$18 = $2 + 4 | 0;
$20 = Math_fround($11 - Math_fround(HEAPF32[$18 >> 2]));
HEAPF32[$12 >> 2] = $20;
$21 = $2 + 8 | 0;
$23 = Math_fround($14 - Math_fround(HEAPF32[$21 >> 2]));
HEAPF32[$15 >> 2] = $23;
$30 = Math_fround(Math_sqrt(Math_fround(Math_fround($23 * $23) + Math_fround(Math_fround(Math_fround($17 * $17) + Math_fround(0.0)) + Math_fround($20 * $20)))));
do if (!($30 <= Math_fround(0.0))) {
$32 = Math_fround(Math_fround(1.0) / $30);
$33 = Math_fround($17 * $32);
HEAPF32[$6 >> 2] = $33;
$34 = Math_fround($20 * $32);
HEAPF32[$12 >> 2] = $34;
$35 = Math_fround($23 * $32);
HEAPF32[$15 >> 2] = $35;
$37 = (HEAPF32[tempDoublePtr >> 2] = $34, HEAP32[tempDoublePtr >> 2] | 0);
$38 = (HEAPF32[tempDoublePtr >> 2] = $35, HEAP32[tempDoublePtr >> 2] | 0);
if (0) {
$40 = (HEAPF32[tempDoublePtr >> 2] = $33, HEAP32[tempDoublePtr >> 2] | 0) & 2147483647;
$41 = $40 >>> 0 > 2139095040;
if ($41) label = 7; else {
$42 = $37 & 2147483647;
if ($42 >>> 0 > 2139095040) label = 7; else {
$44 = $38 & 2147483647;
if (($40 | 0) == 2139095040 | $44 >>> 0 > 2139095040) label = 7; else if (($42 | 0) == 2139095040 | ($44 | 0) == 2139095040) label = 7; else label = 11;
}
}
if ((label | 0) == 7) {
__Z7eprintfPKcz(11903, $vararg_buffer);
$49 = HEAP32[16082] | 0;
if ($49 | 0) {
HEAP32[$vararg_buffer1 >> 2] = 4;
HEAPF64[$vararg_buffer1 + 8 >> 3] = +$33;
HEAP32[$vararg_buffer1 + 16 >> 2] = 4;
HEAPF64[$vararg_buffer1 + 24 >> 3] = +$34;
HEAP32[$vararg_buffer1 + 32 >> 2] = 4;
HEAPF64[$vararg_buffer1 + 40 >> 3] = +$35;
_fprintf($49, 11888, $vararg_buffer1) | 0;
}
__Z5eputcc(10);
if (!0) break;
if (!$41) label = 11;
}
if ((label | 0) == 11) {
$55 = $37 & 2147483647;
if ($55 >>> 0 <= 2139095040) {
$57 = $38 & 2147483647;
if (!(($40 | 0) == 2139095040 | $57 >>> 0 > 2139095040)) if (!(($55 | 0) == 2139095040 | ($57 | 0) == 2139095040)) break;
}
}
__Z7eprintfPKcz(11903, $vararg_buffer8);
$62 = HEAP32[16082] | 0;
if ($62 | 0) {
HEAP32[$vararg_buffer10 >> 2] = 4;
HEAPF64[$vararg_buffer10 + 8 >> 3] = +$33;
HEAP32[$vararg_buffer10 + 16 >> 2] = 4;
HEAPF64[$vararg_buffer10 + 24 >> 3] = +$34;
HEAP32[$vararg_buffer10 + 32 >> 2] = 4;
HEAPF64[$vararg_buffer10 + 40 >> 3] = +$35;
_fprintf($62, 11888, $vararg_buffer10) | 0;
}
__Z5eputcc(10);
}
} while (0);
$67 = Math_fround(HEAPF32[$4 >> 2]);
$69 = Math_fround(HEAPF32[$4 + 4 >> 2]);
$70 = $7 + 4 | 0;
$72 = Math_fround(HEAPF32[$4 + 8 >> 2]);
$73 = $7 + 8 | 0;
$75 = Math_fround($67 - Math_fround(HEAPF32[$2 >> 2]));
HEAPF32[$7 >> 2] = $75;
$77 = Math_fround($69 - Math_fround(HEAPF32[$18 >> 2]));
HEAPF32[$70 >> 2] = $77;
$79 = Math_fround($72 - Math_fround(HEAPF32[$21 >> 2]));
HEAPF32[$73 >> 2] = $79;
$86 = Math_fround(Math_sqrt(Math_fround(Math_fround($79 * $79) + Math_fround(Math_fround(Math_fround($75 * $75) + Math_fround(0.0)) + Math_fround($77 * $77)))));
do if (!($86 <= Math_fround(0.0))) {
$88 = Math_fround(Math_fround(1.0) / $86);
$89 = Math_fround($75 * $88);
HEAPF32[$7 >> 2] = $89;
$90 = Math_fround($77 * $88);
HEAPF32[$70 >> 2] = $90;
$91 = Math_fround($79 * $88);
HEAPF32[$73 >> 2] = $91;
$93 = (HEAPF32[tempDoublePtr >> 2] = $90, HEAP32[tempDoublePtr >> 2] | 0);
$94 = (HEAPF32[tempDoublePtr >> 2] = $91, HEAP32[tempDoublePtr >> 2] | 0);
if (0) {
$96 = (HEAPF32[tempDoublePtr >> 2] = $89, HEAP32[tempDoublePtr >> 2] | 0) & 2147483647;
$97 = $96 >>> 0 > 2139095040;
if ($97) label = 23; else {
$98 = $93 & 2147483647;
if ($98 >>> 0 > 2139095040) label = 23; else {
$100 = $94 & 2147483647;
if (($96 | 0) == 2139095040 | $100 >>> 0 > 2139095040) label = 23; else if (($98 | 0) == 2139095040 | ($100 | 0) == 2139095040) label = 23; else label = 27;
}
}
if ((label | 0) == 23) {
__Z7eprintfPKcz(11903, $vararg_buffer18);
$105 = HEAP32[16082] | 0;
if ($105 | 0) {
HEAP32[$vararg_buffer20 >> 2] = 4;
HEAPF64[$vararg_buffer20 + 8 >> 3] = +$89;
HEAP32[$vararg_buffer20 + 16 >> 2] = 4;
HEAPF64[$vararg_buffer20 + 24 >> 3] = +$90;
HEAP32[$vararg_buffer20 + 32 >> 2] = 4;
HEAPF64[$vararg_buffer20 + 40 >> 3] = +$91;
_fprintf($105, 11888, $vararg_buffer20) | 0;
}
__Z5eputcc(10);
if (!0) break;
if (!$97) label = 27;
}
if ((label | 0) == 27) {
$111 = $93 & 2147483647;
if ($111 >>> 0 <= 2139095040) {
$113 = $94 & 2147483647;
if (!(($96 | 0) == 2139095040 | $113 >>> 0 > 2139095040)) if (!(($111 | 0) == 2139095040 | ($113 | 0) == 2139095040)) break;
}
}
__Z7eprintfPKcz(11903, $vararg_buffer28);
$118 = HEAP32[16082] | 0;
if ($118 | 0) {
HEAP32[$vararg_buffer30 >> 2] = 4;
HEAPF64[$vararg_buffer30 + 8 >> 3] = +$89;
HEAP32[$vararg_buffer30 + 16 >> 2] = 4;
HEAPF64[$vararg_buffer30 + 24 >> 3] = +$90;
HEAP32[$vararg_buffer30 + 32 >> 2] = 4;
HEAPF64[$vararg_buffer30 + 40 >> 3] = +$91;
_fprintf($118, 11888, $vararg_buffer30) | 0;
}
__Z5eputcc(10);
}
} while (0);
$123 = Math_fround(HEAPF32[$5 >> 2]);
$125 = Math_fround(HEAPF32[$5 + 4 >> 2]);
$126 = $8 + 4 | 0;
$128 = Math_fround(HEAPF32[$5 + 8 >> 2]);
$129 = $8 + 8 | 0;
$131 = Math_fround($123 - Math_fround(HEAPF32[$2 >> 2]));
HEAPF32[$8 >> 2] = $131;
$133 = Math_fround($125 - Math_fround(HEAPF32[$18 >> 2]));
HEAPF32[$126 >> 2] = $133;
$135 = Math_fround($128 - Math_fround(HEAPF32[$21 >> 2]));
HEAPF32[$129 >> 2] = $135;
$142 = Math_fround(Math_sqrt(Math_fround(Math_fround($135 * $135) + Math_fround(Math_fround(Math_fround($131 * $131) + Math_fround(0.0)) + Math_fround($133 * $133)))));
do if (!($142 <= Math_fround(0.0))) {
$144 = Math_fround(Math_fround(1.0) / $142);
$145 = Math_fround($131 * $144);
HEAPF32[$8 >> 2] = $145;
$146 = Math_fround($133 * $144);
HEAPF32[$126 >> 2] = $146;
$147 = Math_fround($135 * $144);
HEAPF32[$129 >> 2] = $147;
$149 = (HEAPF32[tempDoublePtr >> 2] = $146, HEAP32[tempDoublePtr >> 2] | 0);
$150 = (HEAPF32[tempDoublePtr >> 2] = $147, HEAP32[tempDoublePtr >> 2] | 0);
if (0) {
$152 = (HEAPF32[tempDoublePtr >> 2] = $145, HEAP32[tempDoublePtr >> 2] | 0) & 2147483647;
$153 = $152 >>> 0 > 2139095040;
if ($153) label = 39; else {
$154 = $149 & 2147483647;
if ($154 >>> 0 > 2139095040) label = 39; else {
$156 = $150 & 2147483647;
if (($152 | 0) == 2139095040 | $156 >>> 0 > 2139095040) label = 39; else if (($154 | 0) == 2139095040 | ($156 | 0) == 2139095040) label = 39; else label = 43;
}
}
if ((label | 0) == 39) {
__Z7eprintfPKcz(11903, $vararg_buffer38);
$161 = HEAP32[16082] | 0;
if ($161 | 0) {
HEAP32[$vararg_buffer40 >> 2] = 4;
HEAPF64[$vararg_buffer40 + 8 >> 3] = +$145;
HEAP32[$vararg_buffer40 + 16 >> 2] = 4;
HEAPF64[$vararg_buffer40 + 24 >> 3] = +$146;
HEAP32[$vararg_buffer40 + 32 >> 2] = 4;
HEAPF64[$vararg_buffer40 + 40 >> 3] = +$147;
_fprintf($161, 11888, $vararg_buffer40) | 0;
}
__Z5eputcc(10);
if (!0) break;
if (!$153) label = 43;
}
if ((label | 0) == 43) {
$167 = $149 & 2147483647;
if ($167 >>> 0 <= 2139095040) {
$169 = $150 & 2147483647;
if (!(($152 | 0) == 2139095040 | $169 >>> 0 > 2139095040)) if (!(($167 | 0) == 2139095040 | ($169 | 0) == 2139095040)) break;
}
}
__Z7eprintfPKcz(11903, $vararg_buffer48);
$174 = HEAP32[16082] | 0;
if ($174 | 0) {
HEAP32[$vararg_buffer50 >> 2] = 4;
HEAPF64[$vararg_buffer50 + 8 >> 3] = +$145;
HEAP32[$vararg_buffer50 + 16 >> 2] = 4;
HEAPF64[$vararg_buffer50 + 24 >> 3] = +$146;
HEAP32[$vararg_buffer50 + 32 >> 2] = 4;
HEAPF64[$vararg_buffer50 + 40 >> 3] = +$147;
_fprintf($174, 11888, $vararg_buffer50) | 0;
}
__Z5eputcc(10);
}
} while (0);
__ZN6Vector12circumCentreERKS_S1_S1_($0, $6, $7, $8);
$179 = Math_fround(HEAPF32[$0 >> 2]);
$181 = Math_fround(Math_fround($179 * $179) + Math_fround(0.0));
$182 = $0 + 4 | 0;
$183 = Math_fround(HEAPF32[$182 >> 2]);
$185 = Math_fround($181 + Math_fround($183 * $183));
$186 = $0 + 8 | 0;
$187 = Math_fround(HEAPF32[$186 >> 2]);
$190 = Math_fround(Math_sqrt(Math_fround($185 + Math_fround($187 * $187))));
if ($190 <= Math_fround(0.0)) {
$196 = Math_fround(__ZNK6Vector9angleWithERKS_($0, $6));
HEAPF32[$1 >> 2] = $196;
__ZNK6Vector16checkValidVectorEv($0);
STACKTOP = sp;
return;
}
$192 = Math_fround(Math_fround(1.0) / $190);
$193 = Math_fround($179 * $192);
HEAPF32[$0 >> 2] = $193;
$194 = Math_fround($183 * $192);
HEAPF32[$182 >> 2] = $194;
$195 = Math_fround($187 * $192);
HEAPF32[$186 >> 2] = $195;
__ZNK6Vector16checkValidVectorEv($0);
__ZNK6Vector16checkValidVectorEv($0);
$196 = Math_fround(__ZNK6Vector9angleWithERKS_($0, $6));
HEAPF32[$1 >> 2] = $196;
__ZNK6Vector16checkValidVectorEv($0);
STACKTOP = sp;
return;
}
function __ZN13SplitMovement18propagateHandStuffER12TwoHandStuffR20ArmHandConstellation($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0$off0$i$i = 0, $$0$off0$i$i19 = 0, $10 = 0, $100 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $112 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $124 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = f0, $131 = 0, $132 = 0, $134 = f0, $135 = 0, $136 = 0, $14 = 0, $141 = f0, $145 = f0, $152 = f0, $154 = f0, $159 = 0, $165 = 0, $166 = 0, $168 = 0, $170 = f0, $171 = 0, $172 = 0, $174 = f0, $175 = 0, $176 = 0, $181 = f0, $185 = f0, $19 = 0, $192 = f0, $194 = f0, $199 = 0, $20 = 0, $205 = 0, $206 = 0, $208 = 0, $21 = 0, $210 = 0, $215 = 0, $217 = 0, $222 = 0, $224 = 0, $225 = 0, $226 = 0, $231 = 0, $232 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $32 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $42 = 0, $45 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $70 = 0, $73 = 0, $76 = 0, $78 = 0, $8 = 0, $9 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $or$cond$not$i = 0, $or$cond$not$i16 = 0, $or$cond7$i = 0, $or$cond7$i17 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 224 | 0;
$3 = sp + 208 | 0;
$4 = sp + 200 | 0;
$5 = sp + 184 | 0;
$6 = sp + 176 | 0;
$7 = sp + 88 | 0;
$8 = sp;
$9 = $1 + 20 | 0;
$10 = $0 + 100 | 0;
HEAP32[$10 >> 2] = HEAP32[$9 >> 2];
HEAP32[$10 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
HEAP32[$10 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
HEAP32[$10 + 12 >> 2] = HEAP32[$9 + 12 >> 2];
$11 = $1 + 64 | 0;
$12 = $0 + 212 | 0;
HEAP32[$12 >> 2] = HEAP32[$11 >> 2];
HEAP32[$12 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
HEAP32[$12 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
HEAP32[$12 + 12 >> 2] = HEAP32[$11 + 12 >> 2];
$13 = $1 + 36 | 0;
$14 = HEAP32[$13 >> 2] | 0;
if (!$14) $19 = 0; else $19 = HEAP32[$14 + 236 >> 2] | 0;
HEAP32[$0 + 116 >> 2] = $19;
$20 = $1 + 80 | 0;
$21 = HEAP32[$20 >> 2] | 0;
if (!$21) $26 = 0; else $26 = HEAP32[$21 + 236 >> 2] | 0;
HEAP32[$0 + 228 >> 2] = $26;
HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
$28 = $7 + 4 | 0;
$29 = $1 + 4 | 0;
HEAP32[$28 >> 2] = HEAP32[$29 >> 2];
$31 = $7 + 8 | 0;
$32 = $1 + 8 | 0;
HEAP32[$31 >> 2] = HEAP32[$32 >> 2];
$35 = $1 + 12 | 0;
HEAP32[$7 + 12 >> 2] = HEAP32[$35 >> 2];
$37 = $7 + 16 | 0;
$38 = $1 + 16 | 0;
HEAP32[$37 >> 2] = HEAP32[$38 >> 2];
HEAP32[$7 + 20 >> 2] = HEAP32[$9 >> 2];
$42 = $1 + 24 | 0;
HEAP32[$7 + 24 >> 2] = HEAP32[$42 >> 2];
$45 = $1 + 28 | 0;
HEAP32[$7 + 28 >> 2] = HEAP32[$45 >> 2];
$49 = HEAP32[$1 + 32 >> 2] | 0;
HEAP32[$7 + 32 >> 2] = $49;
$51 = $7 + 36 | 0;
HEAP32[$51 >> 2] = HEAP32[$13 >> 2];
HEAP8[$51 + 4 >> 0] = HEAP8[$13 + 4 >> 0] | 0;
$53 = $1 + 44 | 0;
$54 = HEAP32[$53 >> 2] | 0;
HEAP32[$7 + 44 >> 2] = $54;
$56 = $1 + 48 | 0;
$57 = HEAP32[$56 >> 2] | 0;
HEAP32[$7 + 48 >> 2] = $57;
$59 = $1 + 52 | 0;
$60 = HEAP32[$59 >> 2] | 0;
HEAP32[$7 + 52 >> 2] = $60;
$63 = HEAP32[$1 + 56 >> 2] | 0;
HEAP32[$7 + 56 >> 2] = $63;
$65 = $1 + 60 | 0;
$66 = HEAP32[$65 >> 2] | 0;
HEAP32[$7 + 60 >> 2] = $66;
$68 = HEAP32[$11 >> 2] | 0;
HEAP32[$7 + 64 >> 2] = $68;
$70 = HEAP32[$1 + 68 >> 2] | 0;
HEAP32[$7 + 68 >> 2] = $70;
$73 = HEAP32[$1 + 72 >> 2] | 0;
HEAP32[$7 + 72 >> 2] = $73;
$76 = HEAP32[$1 + 76 >> 2] | 0;
HEAP32[$7 + 76 >> 2] = $76;
$78 = $7 + 80 | 0;
HEAP32[$78 >> 2] = HEAP32[$20 >> 2];
HEAP8[$78 + 4 >> 0] = HEAP8[$20 + 4 >> 0] | 0;
HEAP32[$8 >> 2] = HEAP32[$1 >> 2];
HEAP32[$8 + 4 >> 2] = HEAP32[$29 >> 2];
HEAP32[$8 + 8 >> 2] = HEAP32[$32 >> 2];
HEAP32[$8 + 12 >> 2] = HEAP32[$35 >> 2];
HEAP32[$8 + 16 >> 2] = HEAP32[$38 >> 2];
HEAP32[$8 + 20 >> 2] = HEAP32[$9 >> 2];
HEAP32[$8 + 24 >> 2] = HEAP32[$42 >> 2];
HEAP32[$8 + 28 >> 2] = HEAP32[$45 >> 2];
HEAP32[$8 + 32 >> 2] = $49;
$95 = $8 + 36 | 0;
HEAP32[$95 >> 2] = HEAP32[$13 >> 2];
HEAP8[$95 + 4 >> 0] = HEAP8[$13 + 4 >> 0] | 0;
$96 = $8 + 44 | 0;
HEAP32[$96 >> 2] = $54;
$97 = $8 + 48 | 0;
HEAP32[$97 >> 2] = $57;
$98 = $8 + 52 | 0;
HEAP32[$98 >> 2] = $60;
HEAP32[$8 + 56 >> 2] = $63;
$100 = $8 + 60 | 0;
HEAP32[$100 >> 2] = $66;
HEAP32[$8 + 64 >> 2] = $68;
HEAP32[$8 + 68 >> 2] = $70;
HEAP32[$8 + 72 >> 2] = $73;
HEAP32[$8 + 76 >> 2] = $76;
$105 = $8 + 80 | 0;
HEAP32[$105 >> 2] = HEAP32[$20 >> 2];
HEAP8[$105 + 4 >> 0] = HEAP8[$20 + 4 >> 0] | 0;
$106 = $0 + 528 | 0;
$107 = HEAP32[$106 >> 2] | 0;
do if ($107 | 0) {
__THREW__ = 0;
invoke_viii(HEAP32[(HEAP32[$107 >> 2] | 0) + 24 >> 2] | 0, $107 | 0, $7 | 0, $2 | 0);
$112 = __THREW__;
__THREW__ = 0;
if ($112 & 1) {
$238 = ___cxa_find_matching_catch_2() | 0;
$239 = tempRet0;
___resumeException($238 | 0);
} else {
$115 = (HEAP32[$106 >> 2] | 0) + 508 | 0;
$116 = $0 + 508 | 0;
$117 = HEAPU8[$115 >> 0] | HEAPU8[$115 + 1 >> 0] << 8;
HEAP8[$116 >> 0] = $117;
HEAP8[$116 + 1 >> 0] = $117 >> 8;
break;
}
} while (0);
$118 = $0 + 532 | 0;
$119 = HEAP32[$118 >> 2] | 0;
do if ($119 | 0) {
__THREW__ = 0;
invoke_viii(HEAP32[(HEAP32[$119 >> 2] | 0) + 24 >> 2] | 0, $119 | 0, $8 | 0, $2 | 0);
$124 = __THREW__;
__THREW__ = 0;
if ($124 & 1) {
$238 = ___cxa_find_matching_catch_2() | 0;
$239 = tempRet0;
___resumeException($238 | 0);
} else {
$127 = (HEAP32[$118 >> 2] | 0) + 510 | 0;
$128 = $0 + 510 | 0;
$129 = HEAPU8[$127 >> 0] | HEAPU8[$127 + 1 >> 0] << 8;
HEAP8[$128 >> 0] = $129;
HEAP8[$128 + 1 >> 0] = $129 >> 8;
break;
}
} while (0);
$130 = Math_fround(HEAPF32[$7 >> 2]);
$131 = HEAP32[$28 >> 2] | 0;
$132 = HEAP32[$31 >> 2] | 0;
$134 = Math_fround(HEAPF32[$7 + 12 >> 2]);
$135 = HEAP32[$37 >> 2] | 0;
$136 = $130 != Math_fround(0.0);
$or$cond$not$i16 = $136 | (HEAP32[tempDoublePtr >> 2] = $131, Math_fround(HEAPF32[tempDoublePtr >> 2])) != Math_fround(0.0);
$or$cond7$i17 = $or$cond$not$i16 | (HEAP32[tempDoublePtr >> 2] = $132, Math_fround(HEAPF32[tempDoublePtr >> 2])) != Math_fround(0.0);
$141 = (HEAP32[tempDoublePtr >> 2] = $135, Math_fround(HEAPF32[tempDoublePtr >> 2]));
if ($or$cond7$i17) {
HEAPF32[$1 >> 2] = $130;
HEAP32[$29 >> 2] = $131;
HEAP32[$32 >> 2] = $132;
$$0$off0$i$i19 = 1;
} else $$0$off0$i$i19 = 0;
if ($134 != Math_fround(0.0) | $141 != Math_fround(0.0)) {
HEAPF32[$1 + 12 >> 2] = $134;
HEAP32[$38 >> 2] = $135;
label = 16;
} else if ($$0$off0$i$i19) label = 16;
do if ((label | 0) == 16) {
$145 = Math_fround(HEAPF32[$1 >> 2]);
if ($145 == Math_fround(0.0)) if (Math_fround(HEAPF32[$29 >> 2]) == Math_fround(0.0)) if (!(Math_fround(HEAPF32[$32 >> 2]) != Math_fround(0.0))) break;
$152 = Math_fround(HEAPF32[$1 + 12 >> 2]);
if ($152 == Math_fround(0.0)) {
$154 = Math_fround(HEAPF32[$38 >> 2]);
if (!($154 != Math_fround(0.0))) break;
$165 = (HEAPF32[tempDoublePtr >> 2] = $154, HEAP32[tempDoublePtr >> 2] | 0);
} else $165 = HEAP32[$38 >> 2] | 0;
$159 = (HEAP8[$1 + 40 >> 0] | 0) != 0;
HEAPF32[$3 >> 2] = $145;
HEAP32[$3 + 4 >> 2] = HEAP32[$29 >> 2];
HEAP32[$3 + 8 >> 2] = HEAP32[$32 >> 2];
HEAPF32[$4 >> 2] = $152;
HEAP32[$4 + 4 >> 2] = $165;
__THREW__ = 0;
invoke_iiiii(26, $9 | 0, $159 | 0, $3 | 0, $4 | 0) | 0;
$166 = __THREW__;
__THREW__ = 0;
if ($166 & 1) {
$238 = ___cxa_find_matching_catch_2() | 0;
$239 = tempRet0;
___resumeException($238 | 0);
} else break;
} while (0);
$168 = HEAP32[$51 >> 2] | 0;
if ($168 | 0) HEAP32[$13 >> 2] = $168;
$170 = Math_fround(HEAPF32[$96 >> 2]);
$171 = HEAP32[$97 >> 2] | 0;
$172 = HEAP32[$98 >> 2] | 0;
$174 = Math_fround(HEAPF32[$8 + 56 >> 2]);
$175 = HEAP32[$100 >> 2] | 0;
$176 = $170 != Math_fround(0.0);
$or$cond$not$i = $176 | (HEAP32[tempDoublePtr >> 2] = $171, Math_fround(HEAPF32[tempDoublePtr >> 2])) != Math_fround(0.0);
$or$cond7$i = $or$cond$not$i | (HEAP32[tempDoublePtr >> 2] = $172, Math_fround(HEAPF32[tempDoublePtr >> 2])) != Math_fround(0.0);
$181 = (HEAP32[tempDoublePtr >> 2] = $175, Math_fround(HEAPF32[tempDoublePtr >> 2]));
if ($or$cond7$i) {
HEAPF32[$53 >> 2] = $170;
HEAP32[$56 >> 2] = $171;
HEAP32[$59 >> 2] = $172;
$$0$off0$i$i = 1;
} else $$0$off0$i$i = 0;
if ($174 != Math_fround(0.0) | $181 != Math_fround(0.0)) {
HEAPF32[$1 + 56 >> 2] = $174;
HEAP32[$65 >> 2] = $175;
label = 32;
} else if ($$0$off0$i$i) label = 32;
do if ((label | 0) == 32) {
$185 = Math_fround(HEAPF32[$53 >> 2]);
if ($185 == Math_fround(0.0)) if (Math_fround(HEAPF32[$56 >> 2]) == Math_fround(0.0)) if (!(Math_fround(HEAPF32[$59 >> 2]) != Math_fround(0.0))) break;
$192 = Math_fround(HEAPF32[$1 + 56 >> 2]);
if ($192 == Math_fround(0.0)) {
$194 = Math_fround(HEAPF32[$65 >> 2]);
if (!($194 != Math_fround(0.0))) break;
$205 = (HEAPF32[tempDoublePtr >> 2] = $194, HEAP32[tempDoublePtr >> 2] | 0);
} else $205 = HEAP32[$65 >> 2] | 0;
$199 = (HEAP8[$1 + 84 >> 0] | 0) != 0;
HEAPF32[$5 >> 2] = $185;
HEAP32[$5 + 4 >> 2] = HEAP32[$56 >> 2];
HEAP32[$5 + 8 >> 2] = HEAP32[$59 >> 2];
HEAPF32[$6 >> 2] = $192;
HEAP32[$6 + 4 >> 2] = $205;
__THREW__ = 0;
invoke_iiiii(26, $11 | 0, $199 | 0, $5 | 0, $6 | 0) | 0;
$206 = __THREW__;
__THREW__ = 0;
if ($206 & 1) {
$238 = ___cxa_find_matching_catch_2() | 0;
$239 = tempRet0;
___resumeException($238 | 0);
} else break;
} while (0);
$208 = HEAP32[$105 >> 2] | 0;
if ($208 | 0) HEAP32[$20 >> 2] = $208;
$210 = HEAP32[$106 >> 2] | 0;
if ($210 | 0) {
__THREW__ = 0;
invoke_viii(HEAP32[(HEAP32[$210 >> 2] | 0) + 32 >> 2] | 0, $210 | 0, $1 | 0, $2 | 0);
$215 = __THREW__;
__THREW__ = 0;
if ($215 & 1) {
$238 = ___cxa_find_matching_catch_2() | 0;
$239 = tempRet0;
___resumeException($238 | 0);
}
}
$217 = HEAP32[$118 >> 2] | 0;
if ($217 | 0) {
__THREW__ = 0;
invoke_viii(HEAP32[(HEAP32[$217 >> 2] | 0) + 32 >> 2] | 0, $217 | 0, $1 | 0, $2 | 0);
$222 = __THREW__;
__THREW__ = 0;
if ($222 & 1) {
$238 = ___cxa_find_matching_catch_2() | 0;
$239 = tempRet0;
___resumeException($238 | 0);
}
}
$224 = $0 + 324 | 0;
HEAP32[$224 >> 2] = HEAP32[$9 >> 2];
HEAP32[$224 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
HEAP32[$224 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
HEAP32[$224 + 12 >> 2] = HEAP32[$9 + 12 >> 2];
$225 = $0 + 436 | 0;
HEAP32[$225 >> 2] = HEAP32[$11 >> 2];
HEAP32[$225 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
HEAP32[$225 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
HEAP32[$225 + 12 >> 2] = HEAP32[$11 + 12 >> 2];
$226 = HEAP32[$13 >> 2] | 0;
if (!$226) $231 = 0; else $231 = HEAP32[$226 + 236 >> 2] | 0;
HEAP32[$0 + 340 >> 2] = $231;
$232 = HEAP32[$20 >> 2] | 0;
if (!$232) {
$237 = 0;
$236 = $0 + 452 | 0;
HEAP32[$236 >> 2] = $237;
STACKTOP = sp;
return;
}
$237 = HEAP32[$232 + 236 >> 2] | 0;
$236 = $0 + 452 | 0;
HEAP32[$236 >> 2] = $237;
STACKTOP = sp;
return;
}
function __ZN9Handshape18CalcJointRotationsEPK7GesturePK11HanimAvatar($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0$i$op = f0, $$0$i$op$1 = f0, $$0$i$op$2 = f0, $$0$i163$op = f0, $$0$i163$op$1 = f0, $$0$i163$op$2 = f0, $$0233 = 0, $$1 = 0, $$2 = 0, $$sroa$0$0$copyload = f0, $$sroa$0191$0$copyload = f0, $$sroa$10$0$copyload = f0, $$sroa$11$0$copyload = f0, $$sroa$6$0$copyload = f0, $$sroa$6194$0$copyload = f0, $$sroa$8$0$$sroa_idx171 = 0, $$sroa$8$0$copyload = f0, $$sroa$8198$0$copyload = f0, $$sroa$9$0$copyload = f0, $10 = 0, $100 = 0, $104 = f0, $105 = 0, $106 = f0, $111 = f0, $113 = 0, $117 = 0, $120 = 0, $126 = f0, $127 = 0, $129 = f0, $135 = f0, $136 = 0, $138 = 0, $139 = 0, $140 = f0, $141 = 0, $142 = f0, $147 = f0, $150 = 0, $154 = 0, $156 = f0, $157 = 0, $158 = f0, $163 = f0, $166 = 0, $170 = 0, $173 = f0, $174 = 0, $176 = f0, $181 = f0, $184 = 0, $188 = 0, $191 = f0, $192 = 0, $194 = f0, $199 = f0, $202 = 0, $206 = 0, $25 = 0, $29 = f0, $3 = 0, $4 = 0, $42 = f0, $43 = 0, $45 = f0, $5 = 0, $50 = f0, $53 = 0, $57 = 0, $60 = 0, $62 = 0, $64 = 0, $70 = f0, $74 = f0, $78 = 0, $80 = 0, $83 = f0, $85 = f0, $91 = f0, $95 = f0, $indvars$iv = 0, $indvars$iv238 = 0, $wide$trip$count = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$3 = sp;
$4 = sp + 20 | 0;
$5 = $0 + 236 | 0;
__ZN18HandJointRotations7setFromEPK7Gesture9SideIndex(HEAP32[$5 >> 2] | 0, $1, HEAPU8[$0 + 232 >> 0] | 0);
$10 = $0 + 160 | 0;
if (!(Math_fround(HEAPF32[$10 >> 2]) != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$0 + 164 >> 2]) != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$0 + 168 >> 2]) != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$0 + 172 >> 2]) != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$0 + 176 >> 2]) != Math_fround(-100.0))) {
HEAP32[$10 >> 2] = 0;
HEAP32[$10 + 4 >> 2] = 0;
HEAP32[$10 + 8 >> 2] = 0;
HEAP32[$10 + 12 >> 2] = 0;
HEAP32[$10 + 16 >> 2] = 0;
};
HEAP32[$3 >> 2] = 0;
HEAP32[$3 + 4 >> 2] = 0;
HEAP32[$3 + 8 >> 2] = 0;
HEAP32[$3 + 12 >> 2] = 0;
HEAP32[$3 + 16 >> 2] = 0;
HEAP16[$4 >> 1] = 65535;
HEAP16[$4 + 2 >> 1] = 65535;
HEAP16[$4 + 4 >> 1] = 65535;
HEAP16[$4 + 6 >> 1] = 65535;
HEAP16[$4 + 8 >> 1] = 65535;
$$0233 = 0;
$indvars$iv238 = 1;
while (1) {
$$sroa$0191$0$copyload = Math_fround(HEAPF32[$0 + 80 + ($indvars$iv238 << 4) >> 2]);
$$sroa$6194$0$copyload = Math_fround(HEAPF32[$0 + 80 + ($indvars$iv238 << 4) + 4 >> 2]);
$$sroa$8198$0$copyload = Math_fround(HEAPF32[$0 + 80 + ($indvars$iv238 << 4) + 8 >> 2]);
$$sroa$10$0$copyload = Math_fround(HEAPF32[$0 + 80 + ($indvars$iv238 << 4) + 12 >> 2]);
if ($$sroa$0191$0$copyload != Math_fround(-100.0) | $$sroa$6194$0$copyload != Math_fround(-100.0)) label = 13; else if ($$sroa$8198$0$copyload != Math_fround(-100.0) | $$sroa$10$0$copyload != Math_fround(-100.0)) label = 13; else $$2 = $$0233;
if ((label | 0) == 13) {
label = 0;
if ($$sroa$10$0$copyload != Math_fround(-100.0)) {
HEAPF32[$3 + ($indvars$iv238 << 2) >> 2] = $$sroa$10$0$copyload;
if ($$sroa$10$0$copyload != Math_fround(0.0)) {
HEAP16[$4 + ($$0233 << 16 >> 16 << 1) >> 1] = $indvars$iv238;
$$1 = $$0233 + 1 << 16 >> 16;
} else $$1 = $$0233;
} else $$1 = $$0233;
$42 = Math_fround(HEAPF32[1616 + ($indvars$iv238 << 4) >> 2]);
$43 = $$sroa$0191$0$copyload == Math_fround(-100.0);
$45 = Math_fround(HEAPF32[1496 + ($indvars$iv238 << 4) >> 2]);
$$0$i$op = Math_fround($$sroa$0191$0$copyload * Math_fround(.25));
$50 = Math_fround($45 * Math_fround($42 + Math_fround(Math_fround(Math_fround(1.0) - $42) * ($43 ? Math_fround(0.0) : $$0$i$op))));
$53 = HEAP32[(HEAP32[$5 >> 2] | 0) + ($indvars$iv238 * 12 | 0) >> 2] | 0;
__THREW__ = 0;
invoke_vif(HEAP32[(HEAP32[$53 >> 2] | 0) + 32 >> 2] | 0, $53 | 0, +$50);
$57 = __THREW__;
__THREW__ = 0;
if ($57 & 1) {
label = 29;
break;
}
$173 = Math_fround(HEAPF32[1616 + ($indvars$iv238 << 4) + 4 >> 2]);
$174 = $$sroa$6194$0$copyload == Math_fround(-100.0);
$176 = Math_fround(HEAPF32[1496 + ($indvars$iv238 << 4) + 4 >> 2]);
$$0$i$op$1 = Math_fround($$sroa$6194$0$copyload * Math_fround(.25));
$181 = Math_fround($176 * Math_fround($173 + Math_fround(Math_fround(Math_fround(1.0) - $173) * ($174 ? Math_fround(0.0) : $$0$i$op$1))));
$184 = HEAP32[(HEAP32[$5 >> 2] | 0) + ($indvars$iv238 * 12 | 0) + 4 >> 2] | 0;
__THREW__ = 0;
invoke_vif(HEAP32[(HEAP32[$184 >> 2] | 0) + 32 >> 2] | 0, $184 | 0, +$181);
$188 = __THREW__;
__THREW__ = 0;
if ($188 & 1) {
label = 29;
break;
}
$191 = Math_fround(HEAPF32[1616 + ($indvars$iv238 << 4) + 8 >> 2]);
$192 = $$sroa$8198$0$copyload == Math_fround(-100.0);
$194 = Math_fround(HEAPF32[1496 + ($indvars$iv238 << 4) + 8 >> 2]);
$$0$i$op$2 = Math_fround($$sroa$8198$0$copyload * Math_fround(.25));
$199 = Math_fround($194 * Math_fround($191 + Math_fround(Math_fround(Math_fround(1.0) - $191) * ($192 ? Math_fround(0.0) : $$0$i$op$2))));
$202 = HEAP32[(HEAP32[$5 >> 2] | 0) + ($indvars$iv238 * 12 | 0) + 8 >> 2] | 0;
__THREW__ = 0;
invoke_vif(HEAP32[(HEAP32[$202 >> 2] | 0) + 32 >> 2] | 0, $202 | 0, +$199);
$206 = __THREW__;
__THREW__ = 0;
if ($206 & 1) {
label = 29;
break;
} else $$2 = $$1;
}
if (($indvars$iv238 | 0) < 4) {
$$0233 = $$2;
$indvars$iv238 = $indvars$iv238 + 1 | 0;
} else {
label = 8;
break;
}
}
if ((label | 0) == 8) {
$25 = $$2 << 16 >> 16;
if ($$2 << 16 >> 16 == 1) {
$60 = HEAP16[$4 >> 1] | 0;
$62 = $60 << 16 >> 16;
$64 = HEAP32[(HEAP32[$5 >> 2] | 0) + ($62 * 12 | 0) >> 2] | 0;
$70 = Math_fround(HEAPF32[($60 << 16 >> 16 < 2 ? 65360 : 65380) + ($62 << 2) >> 2]);
$74 = Math_fround(Math_fround($70 * Math_fround(HEAPF32[$3 + ($62 << 2) >> 2])) * Math_fround(.25));
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$64 >> 2] | 0) + 40 >> 2] & 63]($64, $74);
} else if ($$2 << 16 >> 16 > 0) {
$29 = Math_fround($25 + -1 | 0);
$wide$trip$count = $$2 & 65535;
$indvars$iv = 0;
do {
$78 = HEAP16[$4 + ($indvars$iv << 1) >> 1] | 0;
$80 = HEAP32[(HEAP32[$5 >> 2] | 0) + ($78 * 12 | 0) >> 2] | 0;
$83 = Math_fround(Math_fround(($indvars$iv & 65535) << 16 >> 16) / $29);
$85 = Math_fround(HEAPF32[65360 + ($78 << 2) >> 2]);
$91 = Math_fround(Math_fround(Math_fround(Math_fround(1.0) - $83) * $85) + Math_fround($83 * Math_fround(HEAPF32[65380 + ($78 << 2) >> 2])));
$95 = Math_fround(Math_fround(Math_fround(HEAPF32[$3 + ($78 << 2) >> 2]) * $91) * Math_fround(.25));
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$80 >> 2] | 0) + 40 >> 2] & 63]($80, $95);
$indvars$iv = $indvars$iv + 1 | 0;
} while (($indvars$iv | 0) != ($wide$trip$count | 0));
}
$$sroa$0$0$copyload = Math_fround(HEAPF32[$10 >> 2]);
$$sroa$6$0$copyload = Math_fround(HEAPF32[$0 + 164 >> 2]);
$$sroa$8$0$$sroa_idx171 = $0 + 168 | 0;
$$sroa$8$0$copyload = Math_fround(HEAPF32[$$sroa$8$0$$sroa_idx171 >> 2]);
$$sroa$9$0$copyload = Math_fround(HEAPF32[$0 + 172 >> 2]);
$$sroa$11$0$copyload = Math_fround(HEAPF32[$0 + 176 >> 2]);
$100 = $$sroa$6$0$copyload != Math_fround(-100.0);
if ($$sroa$0$0$copyload != Math_fround(-100.0) | $100 | $$sroa$8$0$copyload != Math_fround(-100.0)) label = 22; else if ($$sroa$9$0$copyload != Math_fround(-100.0) | $$sroa$11$0$copyload != Math_fround(-100.0)) label = 22;
if ((label | 0) == 22) {
if ($100) HEAPF32[$3 >> 2] = $$sroa$6$0$copyload;
$104 = Math_fround(HEAPF32[404]);
$105 = $$sroa$0$0$copyload == Math_fround(-100.0);
$106 = Math_fround(HEAPF32[374]);
$$0$i163$op = Math_fround($$sroa$0$0$copyload * Math_fround(.25));
$111 = Math_fround($106 * Math_fround($104 + Math_fround(Math_fround(Math_fround(1.0) - $104) * ($105 ? Math_fround(0.0) : $$0$i163$op))));
$113 = HEAP32[HEAP32[$5 >> 2] >> 2] | 0;
__THREW__ = 0;
invoke_vif(HEAP32[(HEAP32[$113 >> 2] | 0) + 32 >> 2] | 0, $113 | 0, +$111);
$117 = __THREW__;
__THREW__ = 0;
if ($117 & 1) {
$138 = ___cxa_find_matching_catch_2() | 0;
$139 = tempRet0;
___resumeException($138 | 0);
}
$140 = Math_fround(HEAPF32[405]);
$141 = $$sroa$9$0$copyload == Math_fround(-100.0);
$142 = Math_fround(HEAPF32[375]);
$$0$i163$op$1 = Math_fround($$sroa$9$0$copyload * Math_fround(.25));
$147 = Math_fround($142 * Math_fround($140 + Math_fround(Math_fround(Math_fround(1.0) - $140) * ($141 ? Math_fround(0.0) : $$0$i163$op$1))));
$150 = HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] | 0;
__THREW__ = 0;
invoke_vif(HEAP32[(HEAP32[$150 >> 2] | 0) + 32 >> 2] | 0, $150 | 0, +$147);
$154 = __THREW__;
__THREW__ = 0;
if ($154 & 1) {
$138 = ___cxa_find_matching_catch_2() | 0;
$139 = tempRet0;
___resumeException($138 | 0);
}
$156 = Math_fround(HEAPF32[406]);
$157 = $$sroa$11$0$copyload == Math_fround(-100.0);
$158 = Math_fround(HEAPF32[376]);
$$0$i163$op$2 = Math_fround($$sroa$11$0$copyload * Math_fround(.25));
$163 = Math_fround($158 * Math_fround($156 + Math_fround(Math_fround(Math_fround(1.0) - $156) * ($157 ? Math_fround(0.0) : $$0$i163$op$2))));
$166 = HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] | 0;
__THREW__ = 0;
invoke_vif(HEAP32[(HEAP32[$166 >> 2] | 0) + 32 >> 2] | 0, $166 | 0, +$163);
$170 = __THREW__;
__THREW__ = 0;
if ($170 & 1) {
$138 = ___cxa_find_matching_catch_2() | 0;
$139 = tempRet0;
___resumeException($138 | 0);
}
}
$120 = HEAP32[HEAP32[$5 >> 2] >> 2] | 0;
$126 = Math_fround(Math_fround(Math_fround(HEAPF32[$3 >> 2]) * Math_fround(1.57079637)) * Math_fround(.25));
__THREW__ = 0;
invoke_vif(HEAP32[(HEAP32[$120 >> 2] | 0) + 40 >> 2] | 0, $120 | 0, +$126);
$127 = __THREW__;
__THREW__ = 0;
if ($127 & 1) {
$138 = ___cxa_find_matching_catch_2() | 0;
$139 = tempRet0;
___resumeException($138 | 0);
}
$129 = Math_fround(HEAPF32[$$sroa$8$0$$sroa_idx171 >> 2]);
if (!($129 != Math_fround(-100.0))) {
STACKTOP = sp;
return;
}
$135 = Math_fround(Math_fround($129 * Math_fround(1.57079637)) * Math_fround(.25));
__THREW__ = 0;
invoke_vif(HEAP32[(HEAP32[$120 >> 2] | 0) + 48 >> 2] | 0, $120 | 0, +$135);
$136 = __THREW__;
__THREW__ = 0;
if ($136 & 1) {
$138 = ___cxa_find_matching_catch_2() | 0;
$139 = tempRet0;
___resumeException($138 | 0);
} else {
STACKTOP = sp;
return;
}
} else if ((label | 0) == 29) {
$138 = ___cxa_find_matching_catch_2() | 0;
$139 = tempRet0;
___resumeException($138 | 0);
}
}
function _XML_ParserFree($0) {
$0 = $0 | 0;
var $$0 = 0, $$059 = 0, $$07$i$i = 0, $$07$i19$i = 0, $$07$i24$i = 0, $$07$i29$i = 0, $$089$i = 0, $$089$i65 = 0, $$089$i69 = 0, $$1 = 0, $$160 = 0, $$in1821$i = 0, $$in1821$i$i = 0, $$in1821$i36$i = 0, $$in1821$i73 = 0, $$in1920$i = 0, $$in1920$i$i = 0, $$in1920$i39$i = 0, $$in1920$i76 = 0, $$lcssa$i$i = 0, $$lcssa$i22$i = 0, $$lcssa$i27$i = 0, $$lcssa$i32$i = 0, $$lcssa6$i$i = 0, $$lcssa6$i21$i = 0, $$lcssa6$i26$i = 0, $$lcssa6$i31$i = 0, $$sroa$0$0$i = 0, $$sroa$0$1$i = 0, $101 = 0, $109 = 0, $110 = 0, $113 = 0, $116 = 0, $117 = 0, $119 = 0, $121 = 0, $127 = 0, $128 = 0, $131 = 0, $134 = 0, $135 = 0, $137 = 0, $139 = 0, $14 = 0, $145 = 0, $146 = 0, $147 = 0, $150 = 0, $153 = 0, $154 = 0, $155 = 0, $157 = 0, $159 = 0, $165 = 0, $166 = 0, $167 = 0, $170 = 0, $173 = 0, $174 = 0, $175 = 0, $177 = 0, $179 = 0, $185 = 0, $186 = 0, $188 = 0, $190 = 0, $197 = 0, $199 = 0, $206 = 0, $208 = 0, $215 = 0, $217 = 0, $249 = 0, $26 = 0, $28 = 0, $31 = 0, $34 = 0, $4 = 0, $44 = 0, $5 = 0, $54 = 0, $56 = 0, $63 = 0, $65 = 0, $7 = 0, $72 = 0, $74 = 0, $81 = 0, $83 = 0, $9 = 0, $90 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $98 = 0, $$089$i$looptemp = 0, $$089$i65$looptemp = 0, $$089$i69$looptemp = 0, $$in1821$i$looptemp = 0, $$in1920$i$looptemp = 0, $$in1821$i73$looptemp = 0, $$in1920$i76$looptemp = 0, $$sroa$0$1$i$looptemp = 0, $$in1821$i$i$looptemp = 0, $$in1920$i$i$looptemp = 0, $$in1821$i36$i$looptemp = 0, $$in1920$i39$i$looptemp = 0;
if (!$0) return;
$4 = $0 + 352 | 0;
$5 = $0 + 20 | 0;
$$0 = HEAP32[$0 + 348 >> 2] | 0;
while (1) {
if (!$$0) {
$7 = HEAP32[$4 >> 2] | 0;
if (!$7) break;
HEAP32[$4 >> 2] = 0;
$$1 = $7;
} else $$1 = $$0;
$9 = HEAP32[$$1 >> 2] | 0;
FUNCTION_TABLE_vi[HEAP32[$5 >> 2] & 255](HEAP32[$$1 + 36 >> 2] | 0);
$14 = HEAP32[$$1 + 44 >> 2] | 0;
if ($14 | 0) {
$$089$i = $14;
do {
$$089$i$looptemp = $$089$i;
$$089$i = HEAP32[$$089$i + 4 >> 2] | 0;
FUNCTION_TABLE_vi[HEAP32[$5 >> 2] & 255](HEAP32[$$089$i$looptemp + 16 >> 2] | 0);
FUNCTION_TABLE_vi[HEAP32[$5 >> 2] & 255]($$089$i$looptemp);
} while (($$089$i | 0) != 0);
}
FUNCTION_TABLE_vi[HEAP32[$5 >> 2] & 255]($$1);
$$0 = $9;
}
$26 = $0 + 288 | 0;
$$059 = HEAP32[$0 + 284 >> 2] | 0;
while (1) {
if (!$$059) {
$28 = HEAP32[$26 >> 2] | 0;
if (!$28) break;
HEAP32[$26 >> 2] = 0;
$$160 = $28;
} else $$160 = $$059;
$31 = HEAP32[$$160 + 8 >> 2] | 0;
FUNCTION_TABLE_vi[HEAP32[$5 >> 2] & 255]($$160);
$$059 = $31;
}
$34 = HEAP32[$0 + 360 >> 2] | 0;
if ($34 | 0) {
$$089$i65 = $34;
do {
$$089$i65$looptemp = $$089$i65;
$$089$i65 = HEAP32[$$089$i65 + 4 >> 2] | 0;
FUNCTION_TABLE_vi[HEAP32[$5 >> 2] & 255](HEAP32[$$089$i65$looptemp + 16 >> 2] | 0);
FUNCTION_TABLE_vi[HEAP32[$5 >> 2] & 255]($$089$i65$looptemp);
} while (($$089$i65 | 0) != 0);
}
$44 = HEAP32[$0 + 356 >> 2] | 0;
if ($44 | 0) {
$$089$i69 = $44;
do {
$$089$i69$looptemp = $$089$i69;
$$089$i69 = HEAP32[$$089$i69 + 4 >> 2] | 0;
FUNCTION_TABLE_vi[HEAP32[$5 >> 2] & 255](HEAP32[$$089$i69$looptemp + 16 >> 2] | 0);
FUNCTION_TABLE_vi[HEAP32[$5 >> 2] & 255]($$089$i69$looptemp);
} while (($$089$i69 | 0) != 0);
}
$54 = HEAP32[$0 + 400 >> 2] | 0;
if ($54 | 0) {
$56 = $0 + 420 | 0;
$$in1821$i = $54;
do {
$$in1821$i$looptemp = $$in1821$i;
$$in1821$i = HEAP32[$$in1821$i >> 2] | 0;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$56 >> 2] | 0) + 8 >> 2] & 255]($$in1821$i$looptemp);
} while (($$in1821$i | 0) != 0);
}
$63 = HEAP32[$0 + 404 >> 2] | 0;
if ($63 | 0) {
$65 = $0 + 420 | 0;
$$in1920$i = $63;
do {
$$in1920$i$looptemp = $$in1920$i;
$$in1920$i = HEAP32[$$in1920$i >> 2] | 0;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$65 >> 2] | 0) + 8 >> 2] & 255]($$in1920$i$looptemp);
} while (($$in1920$i | 0) != 0);
}
$72 = HEAP32[$0 + 424 >> 2] | 0;
if ($72 | 0) {
$74 = $0 + 444 | 0;
$$in1821$i73 = $72;
do {
$$in1821$i73$looptemp = $$in1821$i73;
$$in1821$i73 = HEAP32[$$in1821$i73 >> 2] | 0;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$74 >> 2] | 0) + 8 >> 2] & 255]($$in1821$i73$looptemp);
} while (($$in1821$i73 | 0) != 0);
}
$81 = HEAP32[$0 + 428 >> 2] | 0;
if ($81 | 0) {
$83 = $0 + 444 | 0;
$$in1920$i76 = $81;
do {
$$in1920$i76$looptemp = $$in1920$i76;
$$in1920$i76 = HEAP32[$$in1920$i76 >> 2] | 0;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$83 >> 2] | 0) + 8 >> 2] & 255]($$in1920$i76$looptemp);
} while (($$in1920$i76 | 0) != 0);
}
$90 = HEAP32[$0 + 340 >> 2] | 0;
if ($90 | 0) {
$93 = HEAP32[$0 + 460 >> 2] | 0;
$94 = $90 + 20 | 0;
$95 = HEAP32[$94 >> 2] | 0;
$96 = $90 + 28 | 0;
$98 = $95 + (HEAP32[$96 >> 2] << 2) | 0;
$$sroa$0$0$i = $95;
L52 : while (1) {
$$sroa$0$1$i = $$sroa$0$0$i;
do {
if (($$sroa$0$1$i | 0) == ($98 | 0)) break L52;
$$sroa$0$1$i$looptemp = $$sroa$0$1$i;
$$sroa$0$1$i = $$sroa$0$1$i + 4 | 0;
$101 = HEAP32[$$sroa$0$1$i$looptemp >> 2] | 0;
} while (!($101 | 0));
if (!(HEAP32[$101 + 16 >> 2] | 0)) {
$$sroa$0$0$i = $$sroa$0$1$i;
continue;
}
FUNCTION_TABLE_vi[HEAP32[$5 >> 2] & 255](HEAP32[$101 + 20 >> 2] | 0);
$$sroa$0$0$i = $$sroa$0$1$i;
}
$109 = ($93 | 0) == 0;
$110 = $90 + 8 | 0;
$113 = $90 + 16 | 0;
$116 = HEAP32[(HEAP32[$113 >> 2] | 0) + 8 >> 2] | 0;
$117 = HEAP32[$90 >> 2] | 0;
if (!(HEAP32[$110 >> 2] | 0)) {
$$lcssa$i$i = $117;
$$lcssa6$i$i = $116;
} else {
$$07$i$i = 0;
$119 = $117;
$121 = $116;
while (1) {
FUNCTION_TABLE_vi[$121 & 255](HEAP32[$119 + ($$07$i$i << 2) >> 2] | 0);
$$07$i$i = $$07$i$i + 1 | 0;
$127 = HEAP32[(HEAP32[$113 >> 2] | 0) + 8 >> 2] | 0;
$128 = HEAP32[$90 >> 2] | 0;
if ($$07$i$i >>> 0 >= (HEAP32[$110 >> 2] | 0) >>> 0) {
$$lcssa$i$i = $128;
$$lcssa6$i$i = $127;
break;
} else {
$119 = $128;
$121 = $127;
}
}
}
FUNCTION_TABLE_vi[$$lcssa6$i$i & 255]($$lcssa$i$i);
$131 = $90 + 36 | 0;
$134 = HEAP32[(HEAP32[$131 >> 2] | 0) + 8 >> 2] | 0;
$135 = HEAP32[$94 >> 2] | 0;
if (!(HEAP32[$96 >> 2] | 0)) {
$$lcssa$i22$i = $135;
$$lcssa6$i21$i = $134;
} else {
$$07$i19$i = 0;
$137 = $135;
$139 = $134;
while (1) {
FUNCTION_TABLE_vi[$139 & 255](HEAP32[$137 + ($$07$i19$i << 2) >> 2] | 0);
$$07$i19$i = $$07$i19$i + 1 | 0;
$145 = HEAP32[(HEAP32[$131 >> 2] | 0) + 8 >> 2] | 0;
$146 = HEAP32[$94 >> 2] | 0;
if ($$07$i19$i >>> 0 >= (HEAP32[$96 >> 2] | 0) >>> 0) {
$$lcssa$i22$i = $146;
$$lcssa6$i21$i = $145;
break;
} else {
$137 = $146;
$139 = $145;
}
}
}
FUNCTION_TABLE_vi[$$lcssa6$i21$i & 255]($$lcssa$i22$i);
$147 = $90 + 48 | 0;
$150 = $90 + 56 | 0;
$153 = HEAP32[(HEAP32[$150 >> 2] | 0) + 8 >> 2] | 0;
$154 = $90 + 40 | 0;
$155 = HEAP32[$154 >> 2] | 0;
if (!(HEAP32[$147 >> 2] | 0)) {
$$lcssa$i27$i = $155;
$$lcssa6$i26$i = $153;
} else {
$$07$i24$i = 0;
$157 = $155;
$159 = $153;
while (1) {
FUNCTION_TABLE_vi[$159 & 255](HEAP32[$157 + ($$07$i24$i << 2) >> 2] | 0);
$$07$i24$i = $$07$i24$i + 1 | 0;
$165 = HEAP32[(HEAP32[$150 >> 2] | 0) + 8 >> 2] | 0;
$166 = HEAP32[$154 >> 2] | 0;
if ($$07$i24$i >>> 0 >= (HEAP32[$147 >> 2] | 0) >>> 0) {
$$lcssa$i27$i = $166;
$$lcssa6$i26$i = $165;
break;
} else {
$157 = $166;
$159 = $165;
}
}
}
FUNCTION_TABLE_vi[$$lcssa6$i26$i & 255]($$lcssa$i27$i);
$167 = $90 + 68 | 0;
$170 = $90 + 76 | 0;
$173 = HEAP32[(HEAP32[$170 >> 2] | 0) + 8 >> 2] | 0;
$174 = $90 + 60 | 0;
$175 = HEAP32[$174 >> 2] | 0;
if (!(HEAP32[$167 >> 2] | 0)) {
$$lcssa$i32$i = $175;
$$lcssa6$i31$i = $173;
} else {
$$07$i29$i = 0;
$177 = $175;
$179 = $173;
while (1) {
FUNCTION_TABLE_vi[$179 & 255](HEAP32[$177 + ($$07$i29$i << 2) >> 2] | 0);
$$07$i29$i = $$07$i29$i + 1 | 0;
$185 = HEAP32[(HEAP32[$170 >> 2] | 0) + 8 >> 2] | 0;
$186 = HEAP32[$174 >> 2] | 0;
if ($$07$i29$i >>> 0 >= (HEAP32[$167 >> 2] | 0) >>> 0) {
$$lcssa$i32$i = $186;
$$lcssa6$i31$i = $185;
break;
} else {
$177 = $186;
$179 = $185;
}
}
}
FUNCTION_TABLE_vi[$$lcssa6$i31$i & 255]($$lcssa$i32$i);
$188 = HEAP32[$90 + 80 >> 2] | 0;
if ($188 | 0) {
$190 = $90 + 100 | 0;
$$in1821$i$i = $188;
do {
$$in1821$i$i$looptemp = $$in1821$i$i;
$$in1821$i$i = HEAP32[$$in1821$i$i >> 2] | 0;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$190 >> 2] | 0) + 8 >> 2] & 255]($$in1821$i$i$looptemp);
} while (($$in1821$i$i | 0) != 0);
}
$197 = HEAP32[$90 + 84 >> 2] | 0;
if ($197 | 0) {
$199 = $90 + 100 | 0;
$$in1920$i$i = $197;
do {
$$in1920$i$i$looptemp = $$in1920$i$i;
$$in1920$i$i = HEAP32[$$in1920$i$i >> 2] | 0;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$199 >> 2] | 0) + 8 >> 2] & 255]($$in1920$i$i$looptemp);
} while (($$in1920$i$i | 0) != 0);
}
$206 = HEAP32[$90 + 104 >> 2] | 0;
if ($206 | 0) {
$208 = $90 + 124 | 0;
$$in1821$i36$i = $206;
do {
$$in1821$i36$i$looptemp = $$in1821$i36$i;
$$in1821$i36$i = HEAP32[$$in1821$i36$i >> 2] | 0;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$208 >> 2] | 0) + 8 >> 2] & 255]($$in1821$i36$i$looptemp);
} while (($$in1821$i36$i | 0) != 0);
}
$215 = HEAP32[$90 + 108 >> 2] | 0;
if ($215 | 0) {
$217 = $90 + 124 | 0;
$$in1920$i39$i = $215;
do {
$$in1920$i39$i$looptemp = $$in1920$i39$i;
$$in1920$i39$i = HEAP32[$$in1920$i39$i >> 2] | 0;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$217 >> 2] | 0) + 8 >> 2] & 255]($$in1920$i39$i$looptemp);
} while (($$in1920$i39$i | 0) != 0);
}
if ($109) {
FUNCTION_TABLE_vi[HEAP32[$5 >> 2] & 255](HEAP32[$90 + 164 >> 2] | 0);
FUNCTION_TABLE_vi[HEAP32[$5 >> 2] & 255](HEAP32[$90 + 144 >> 2] | 0);
}
FUNCTION_TABLE_vi[HEAP32[$5 >> 2] & 255]($90);
}
FUNCTION_TABLE_vi[HEAP32[$5 >> 2] & 255](HEAP32[$0 + 376 >> 2] | 0);
FUNCTION_TABLE_vi[HEAP32[$5 >> 2] & 255](HEAP32[$0 + 448 >> 2] | 0);
FUNCTION_TABLE_vi[HEAP32[$5 >> 2] & 255](HEAP32[$0 + 8 >> 2] | 0);
FUNCTION_TABLE_vi[HEAP32[$5 >> 2] & 255](HEAP32[$0 + 44 >> 2] | 0);
FUNCTION_TABLE_vi[HEAP32[$5 >> 2] & 255](HEAP32[$0 + 380 >> 2] | 0);
FUNCTION_TABLE_vi[HEAP32[$5 >> 2] & 255](HEAP32[$0 + 236 >> 2] | 0);
$249 = HEAP32[$0 + 248 >> 2] | 0;
if ($249 | 0) FUNCTION_TABLE_vi[$249 & 255](HEAP32[$0 + 240 >> 2] | 0);
FUNCTION_TABLE_vi[HEAP32[$5 >> 2] & 255]($0);
return;
}
function __ZN20ArmHandConstellation18SetDefaultHandsiteEbbPK9HandshapePK11HanimAvatar($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$ = 0, $$$ = 0, $$$$ = 0, $$$$$ = 0, $$$$$$ = 0, $$$$$$93 = 0, $$$$$$94 = 0, $$$$$$96 = 0, $$$$$$97 = 0, $$$$$93 = 0, $$$$$94 = 0, $$$$$96 = 0, $$$$$97 = 0, $$$$93 = 0, $$$$94 = 0, $$$$96 = 0, $$$$97 = 0, $$$93 = 0, $$$94 = 0, $$$96 = 0, $$$97 = 0, $$93 = 0, $$94 = 0, $$96 = 0, $$97 = 0, $$pre$phiZ2D = 0, $$sroa$0$0$copyload = 0, $103 = 0, $11 = 0, $110 = 0, $115 = 0, $117 = 0, $12 = 0, $121 = 0, $123 = 0, $129 = 0, $135 = 0, $141 = 0, $146 = 0, $156 = 0, $157 = 0, $163 = 0, $165 = 0, $169 = 0, $171 = 0, $177 = 0, $183 = 0, $189 = 0, $194 = 0, $206 = 0, $208 = 0, $212 = 0, $214 = 0, $220 = 0, $226 = 0, $23 = 0, $232 = 0, $237 = 0, $24 = 0, $27 = 0, $30 = 0, $32 = 0, $36 = 0, $38 = 0, $44 = 0, $5 = 0, $50 = 0, $56 = 0, $61 = 0, $7 = 0, $71 = 0, $72 = 0, $74 = 0, $78 = 0, $8 = 0, $80 = 0, $86 = 0, $92 = 0, $98 = 0, $tmpcast4353$sroa$0$0$extract$trunc = 0, $tmpcast4555$sroa$0$0$extract$trunc = 0, $tmpcast4751$sroa$0$0$extract$trunc = 0, $tmpcast49$sroa$0$0$extract$trunc = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 112 | 0;
$vararg_buffer25 = sp + 88 | 0;
$vararg_buffer23 = sp + 80 | 0;
$vararg_buffer21 = sp + 72 | 0;
$vararg_buffer18 = sp + 64 | 0;
$vararg_buffer16 = sp + 56 | 0;
$vararg_buffer12 = sp + 48 | 0;
$vararg_buffer10 = sp + 40 | 0;
$vararg_buffer8 = sp + 32 | 0;
$vararg_buffer6 = sp + 24 | 0;
$vararg_buffer3 = sp + 16 | 0;
$5 = sp + 104 | 0;
$7 = sp + 92 | 0;
$8 = sp + 100 | 0;
$11 = $1 ? $0 + 36 | 0 : $0 + 40 | 0;
$12 = HEAP32[$11 >> 2] | 0;
if ((HEAP32[16607] ^ $12) & 16777215 | 0) {
STACKTOP = sp;
return;
}
if (!1) {
$$pre$phiZ2D = $11;
$23 = $12;
} else {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(28375, sp);
$$pre$phiZ2D = $11;
$23 = HEAPU16[$11 >> 1] | 0 | (HEAPU8[$11 + 2 >> 0] | 0) << 16;
}
HEAP8[($1 ? $0 + 63 | 0 : $0 + 64 | 0) >> 0] = 1;
$24 = $23 & 16773375 | ($1 ^ $2 ? 512 : 256);
HEAP16[$$pre$phiZ2D >> 1] = $24;
HEAP8[$$pre$phiZ2D + 2 >> 0] = $24 >>> 16;
$27 = $1 ? $0 + 12 | 0 : $0 + 24 | 0;
switch (HEAP32[$0 + 44 >> 2] | 0) {
case 1:
{
__ZNK9Handshape15DefaultHandSiteEv($5, $3);
$tmpcast4751$sroa$0$0$extract$trunc = HEAP32[$5 >> 2] | 0;
$30 = HEAPU16[$$pre$phiZ2D >> 1] | 0 | (HEAPU8[$$pre$phiZ2D + 2 >> 0] | 0) << 16;
$32 = ($30 & 255 | 0) == 0;
$36 = $32 ? $tmpcast4751$sroa$0$0$extract$trunc & 255 | $30 & 16776960 : $30;
$38 = ($36 & 3840 | 0) == 0;
$$ = $38 ? $36 & 16773375 | $tmpcast4751$sroa$0$0$extract$trunc & 3840 : $36;
$44 = ($$ & 28672 | 0) == 0;
$$$ = $44 ? $$ & 16748543 | $tmpcast4751$sroa$0$0$extract$trunc & 28672 : $$;
$50 = ($$$ & 1015808 | 0) == 0;
$$$$ = $50 ? $$$ & 15761407 | $tmpcast4751$sroa$0$0$extract$trunc & 1015808 : $$$;
$56 = ($$$$ & 7340032 | 0) == 0;
$$$$$ = $56 ? $$$$ & 9437183 | $tmpcast4751$sroa$0$0$extract$trunc & 7340032 : $$$$;
$61 = ($$$$$ << 8 >> 8 | 0) > -1;
if ($32 | $38 | $44 | $50 | $56 | $61) {
$$$$$$ = $61 ? $$$$$ & 8388607 | $tmpcast4751$sroa$0$0$extract$trunc & 8388608 : $$$$$;
HEAP16[$$pre$phiZ2D >> 1] = $$$$$$;
HEAP8[$$pre$phiZ2D + 2 >> 0] = $$$$$$ >>> 16;
}
if (1) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(28420, sp + 8 | 0);
__ZNK6SiteID5printEP8_IO_FILE($11, HEAP32[16082] | 0);
$71 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17751] | 0, HEAP32[$3 >> 2] | 0) | 0;
HEAP32[$vararg_buffer3 >> 2] = $1 ? 48924 : 48928;
HEAP32[$vararg_buffer3 + 4 >> 2] = $71;
__Z7eprintfPKcz(28454, $vararg_buffer3);
}
STACKTOP = sp;
return;
}
case 0:
{
__ZNK11HanimAvatar12locateSiteIDEbRK10SiteIDPairP6VectorRP5JointRP4Site($4, 0, $27, 0, sp + 96 | 0, $5);
$110 = HEAP32[$5 >> 2] | 0;
if (!$110) label = 23; else if (!(HEAP32[$110 + 24 >> 2] | 0)) label = 23; else {
__ZNK9Handshape15DefaultHandSiteEv($7, $3);
$tmpcast4353$sroa$0$0$extract$trunc = HEAP32[$7 >> 2] | 0;
$115 = HEAPU16[$$pre$phiZ2D >> 1] | 0 | (HEAPU8[$$pre$phiZ2D + 2 >> 0] | 0) << 16;
$117 = ($115 & 255 | 0) == 0;
$121 = $117 ? $tmpcast4353$sroa$0$0$extract$trunc & 255 | $115 & 16776960 : $115;
$123 = ($121 & 3840 | 0) == 0;
$$94 = $123 ? $121 & 16773375 | $tmpcast4353$sroa$0$0$extract$trunc & 3840 : $121;
$129 = ($$94 & 28672 | 0) == 0;
$$$94 = $129 ? $$94 & 16748543 | $tmpcast4353$sroa$0$0$extract$trunc & 28672 : $$94;
$135 = ($$$94 & 1015808 | 0) == 0;
$$$$94 = $135 ? $$$94 & 15761407 | $tmpcast4353$sroa$0$0$extract$trunc & 1015808 : $$$94;
$141 = ($$$$94 & 7340032 | 0) == 0;
$$$$$94 = $141 ? $$$$94 & 9437183 | $tmpcast4353$sroa$0$0$extract$trunc & 7340032 : $$$$94;
$146 = ($$$$$94 << 8 >> 8 | 0) > -1;
if ($117 | $123 | $129 | $135 | $141 | $146) {
$$$$$$94 = $146 ? $$$$$94 & 8388607 | $tmpcast4353$sroa$0$0$extract$trunc & 8388608 : $$$$$94;
HEAP16[$$pre$phiZ2D >> 1] = $$$$$$94;
HEAP8[$$pre$phiZ2D + 2 >> 0] = $$$$$$94 >>> 16;
}
if (1) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(28569, $vararg_buffer10);
__ZNK6SiteID5printEP8_IO_FILE($7, HEAP32[16082] | 0);
$156 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17751] | 0, HEAP32[$3 >> 2] | 0) | 0;
HEAP32[$vararg_buffer12 >> 2] = $1 ? 48924 : 48928;
HEAP32[$vararg_buffer12 + 4 >> 2] = $156;
__Z7eprintfPKcz(28454, $vararg_buffer12);
}
}
do if ((label | 0) == 23) {
$157 = HEAPU16[$27 >> 1] | 0 | (HEAPU8[$27 + 2 >> 0] | 0) << 16;
if (($157 & 7340032 | 0) == 1048576 | (($157 & 255) + -16 | 0) >>> 0 > 8) {
$tmpcast49$sroa$0$0$extract$trunc = HEAP32[(HEAP32[17189] | 0) + (HEAP32[$3 >> 2] << 2) >> 2] | 0;
$206 = HEAPU16[$$pre$phiZ2D >> 1] | 0 | (HEAPU8[$$pre$phiZ2D + 2 >> 0] | 0) << 16;
$208 = ($206 & 255 | 0) == 0;
$212 = $208 ? $tmpcast49$sroa$0$0$extract$trunc & 255 | $206 & 16776960 : $206;
$214 = ($212 & 3840 | 0) == 0;
$$97 = $214 ? $212 & 16773375 | $tmpcast49$sroa$0$0$extract$trunc & 3840 : $212;
$220 = ($$97 & 28672 | 0) == 0;
$$$97 = $220 ? $$97 & 16748543 | $tmpcast49$sroa$0$0$extract$trunc & 28672 : $$97;
$226 = ($$$97 & 1015808 | 0) == 0;
$$$$97 = $226 ? $$$97 & 15761407 | $tmpcast49$sroa$0$0$extract$trunc & 1015808 : $$$97;
$232 = ($$$$97 & 7340032 | 0) == 0;
$$$$$97 = $232 ? $$$$97 & 9437183 | $tmpcast49$sroa$0$0$extract$trunc & 7340032 : $$$$97;
$237 = ($$$$$97 << 8 >> 8 | 0) > -1;
if ($208 | $214 | $220 | $226 | $232 | $237) {
$$$$$$97 = $237 ? $$$$$97 & 8388607 | $tmpcast49$sroa$0$0$extract$trunc & 8388608 : $$$$$97;
HEAP16[$$pre$phiZ2D >> 1] = $$$$$$97;
HEAP8[$$pre$phiZ2D + 2 >> 0] = $$$$$$97 >>> 16;
}
if (!1) break;
__Z7LogTimev() | 0;
__Z7eprintfPKcz(28723, $vararg_buffer23);
__ZNK10SiteIDPair5printEP8_IO_FILE($27, HEAP32[16082] | 0);
HEAP32[$vararg_buffer25 >> 2] = $1 ? 48924 : 48928;
__Z7eprintfPKcz(28745, $vararg_buffer25);
__ZNK6SiteID5printEP8_IO_FILE($11, HEAP32[16082] | 0);
__Z5eputsPKc(42292);
break;
} else {
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($8, 1, 0, 0, 0, 1, 0);
$$sroa$0$0$copyload = HEAPU16[$8 >> 1] | 0 | (HEAPU8[$8 + 2 >> 0] | 0) << 16;
$163 = HEAPU16[$$pre$phiZ2D >> 1] | 0 | (HEAPU8[$$pre$phiZ2D + 2 >> 0] | 0) << 16;
$165 = ($163 & 255 | 0) == 0;
$169 = $165 ? $163 & 16776960 | $$sroa$0$0$copyload & 255 : $163;
$171 = ($169 & 3840 | 0) == 0;
$$96 = $171 ? $169 & 16773375 | $$sroa$0$0$copyload & 3840 : $169;
$177 = ($$96 & 28672 | 0) == 0;
$$$96 = $177 ? $$96 & 16748543 | $$sroa$0$0$copyload & 28672 : $$96;
$183 = ($$$96 & 1015808 | 0) == 0;
$$$$96 = $183 ? $$$96 & 15761407 | $$sroa$0$0$copyload & 1015808 : $$$96;
$189 = ($$$$96 & 7340032 | 0) == 0;
$$$$$96 = $189 ? $$$$96 & 9437183 | $$sroa$0$0$copyload & 7340032 : $$$$96;
$194 = ($$$$$96 << 8 >> 8 | 0) > -1;
if ($165 | $171 | $177 | $183 | $189 | $194) {
$$$$$$96 = $194 ? $$$$$96 & 8388607 | $$sroa$0$0$copyload & 8388608 : $$$$$96;
HEAP16[$$pre$phiZ2D >> 1] = $$$$$$96;
HEAP8[$$pre$phiZ2D + 2 >> 0] = $$$$$$96 >>> 16;
}
if (!1) break;
__Z7LogTimev() | 0;
__Z7eprintfPKcz(28625, $vararg_buffer16);
__ZNK10SiteIDPair5printEP8_IO_FILE($27, HEAP32[16082] | 0);
HEAP32[$vararg_buffer18 >> 2] = $1 ? 48924 : 48928;
__Z7eprintfPKcz(28638, $vararg_buffer18);
__Z7eprintfPKcz(28705, $vararg_buffer21);
__ZNK6SiteID5printEP8_IO_FILE($11, HEAP32[16082] | 0);
__Z5eputcc(10);
break;
}
} while (0);
STACKTOP = sp;
return;
}
default:
{
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($5, 1, 0, 0, 0, 1, 0);
$tmpcast4555$sroa$0$0$extract$trunc = HEAP32[$5 >> 2] | 0;
$72 = HEAPU16[$$pre$phiZ2D >> 1] | 0 | (HEAPU8[$$pre$phiZ2D + 2 >> 0] | 0) << 16;
$74 = ($72 & 255 | 0) == 0;
$78 = $74 ? $tmpcast4555$sroa$0$0$extract$trunc & 255 | $72 & 16776960 : $72;
$80 = ($78 & 3840 | 0) == 0;
$$93 = $80 ? $78 & 16773375 | $tmpcast4555$sroa$0$0$extract$trunc & 3840 : $78;
$86 = ($$93 & 28672 | 0) == 0;
$$$93 = $86 ? $$93 & 16748543 | $tmpcast4555$sroa$0$0$extract$trunc & 28672 : $$93;
$92 = ($$$93 & 1015808 | 0) == 0;
$$$$93 = $92 ? $$$93 & 15761407 | $tmpcast4555$sroa$0$0$extract$trunc & 1015808 : $$$93;
$98 = ($$$$93 & 7340032 | 0) == 0;
$$$$$93 = $98 ? $$$$93 & 9437183 | $tmpcast4555$sroa$0$0$extract$trunc & 7340032 : $$$$93;
$103 = ($$$$$93 << 8 >> 8 | 0) > -1;
if ($74 | $80 | $86 | $92 | $98 | $103) {
$$$$$$93 = $103 ? $$$$$93 & 8388607 | $tmpcast4555$sroa$0$0$extract$trunc & 8388608 : $$$$$93;
HEAP16[$$pre$phiZ2D >> 1] = $$$$$$93;
HEAP8[$$pre$phiZ2D + 2 >> 0] = $$$$$$93 >>> 16;
}
if (1) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(28482, $vararg_buffer6);
__ZNK6SiteID5printEP8_IO_FILE($11, HEAP32[16082] | 0);
__Z7eprintfPKcz(28561, $vararg_buffer8);
}
STACKTOP = sp;
return;
}
}
}
function __ZN10TrajectoryC2ERK16TrajectoryParams($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$06893 = 0, $$070$lcssa = 0, $$07099 = 0, $$071$lcssa = f0, $$07198 = f0, $$089 = 0, $$17292 = f0, $$3 = 0, $$376 = 0, $100 = 0, $102 = 0, $104 = 0, $105 = 0, $108 = f0, $11 = f0, $112 = f0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $120 = f0, $125 = 0, $127 = 0, $13 = 0, $130 = 0.0, $132 = 0.0, $134 = 0.0, $135 = 0, $139 = 0, $145 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $155 = 0, $157 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = f0, $21 = 0, $23 = 0, $24 = 0, $27 = f0, $28 = 0, $3 = 0, $35 = 0.0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = f0, $47 = 0, $48 = 0, $50 = 0, $53 = f0, $55 = 0, $57 = 0, $59 = 0, $6 = 0, $62 = 0.0, $64 = 0.0, $66 = 0.0, $67 = 0, $70 = 0.0, $74 = 0.0, $75 = 0, $77 = 0, $80 = f0, $82 = 0, $83 = 0, $84 = 0, $86 = 0, $92 = 0, $tmpcast$byval_copy = 0, $vararg_buffer = 0, $vararg_buffer16 = 0, $vararg_buffer21 = 0, $vararg_buffer4 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 144 | 0;
$tmpcast$byval_copy = sp + 120 | 0;
$vararg_buffer21 = sp + 104 | 0;
$vararg_buffer16 = sp + 80 | 0;
$vararg_buffer9 = sp + 40 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer = sp;
HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[$0 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
HEAP32[$0 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
HEAP32[$0 + 20 >> 2] = HEAP32[$1 + 20 >> 2];
HEAP32[$0 + 24 >> 2] = HEAP32[$1 + 24 >> 2];
$2 = $0 + 28 | 0;
HEAP32[$2 >> 2] = 0;
__THREW__ = 0;
$3 = invoke_ii(20, 104) | 0;
$4 = __THREW__;
__THREW__ = 0;
if (!($4 & 1)) {
__THREW__ = 0;
HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$0 >> 2];
HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$0 + 4 >> 2];
HEAP32[$tmpcast$byval_copy + 8 >> 2] = HEAP32[$0 + 8 >> 2];
HEAP32[$tmpcast$byval_copy + 12 >> 2] = HEAP32[$0 + 12 >> 2];
invoke_vii(141, $3 | 0, $tmpcast$byval_copy | 0);
$6 = __THREW__;
__THREW__ = 0;
if ($6 & 1) {
$40 = ___cxa_find_matching_catch_2() | 0;
$41 = tempRet0;
__ZdlPv($3);
$$3 = $40;
$$376 = $41;
___resumeException($$3 | 0);
}
$11 = Math_fround(1.0 / +(HEAP32[476] | 0));
$12 = $0 + 16 | 0;
HEAPF32[$12 >> 2] = $11;
__THREW__ = 0;
invoke_vif(53, $3 | 0, 0.0);
$13 = __THREW__;
__THREW__ = 0;
if (!($13 & 1)) {
__THREW__ = 0;
invoke_vif(54, $3 | 0, 1.0);
$15 = __THREW__;
__THREW__ = 0;
if (!($15 & 1)) {
$17 = $3 + 48 | 0;
HEAPF32[$17 >> 2] = Math_fround(0.0);
$18 = $3 + 52 | 0;
HEAPF32[$18 >> 2] = Math_fround(0.0);
$19 = $3 + 68 | 0;
$20 = Math_fround(HEAPF32[$19 >> 2]);
$21 = $0 + 20 | 0;
$23 = $20 < Math_fround(HEAPF32[$21 >> 2]);
$24 = HEAP32[476] | 0;
L9 : do if ($23 & ($24 | 0) > 0) {
$$07099 = 0;
$$07198 = Math_fround(0.0);
while (1) {
$27 = Math_fround($$07198 + Math_fround(HEAPF32[$12 >> 2]));
__THREW__ = 0;
invoke_vif(55, $3 | 0, +$27);
$28 = __THREW__;
__THREW__ = 0;
if ($28 & 1) break;
if ((($$07099 | 0) % 100 | 0 | 0) == 0 & 0 != 0) {
$35 = +Math_fround(HEAPF32[$19 >> 2]);
__THREW__ = 0;
HEAPF64[$vararg_buffer >> 3] = +$27;
HEAPF64[$vararg_buffer + 8 >> 3] = $35;
invoke_vii(115, 25054, $vararg_buffer | 0);
$36 = __THREW__;
__THREW__ = 0;
if ($36 & 1) break;
}
$44 = $$07099 + 1 | 0;
$45 = Math_fround(HEAPF32[$19 >> 2]);
$47 = $45 < Math_fround(HEAPF32[$21 >> 2]);
$48 = HEAP32[476] | 0;
if ($47 & ($44 | 0) < ($48 | 0)) {
$$07099 = $44;
$$07198 = $27;
} else {
$$070$lcssa = $44;
$$071$lcssa = $27;
$157 = $48;
break L9;
}
}
$42 = ___cxa_find_matching_catch_2() | 0;
$$3 = $42;
$$376 = tempRet0;
___resumeException($$3 | 0);
} else {
$$070$lcssa = 0;
$$071$lcssa = Math_fround(0.0);
$157 = $24;
} while (0);
$50 = $0 + 24 | 0;
$53 = Math_fround($$071$lcssa / Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[$50 >> 2])));
do if (!0) {
$82 = $157;
label = 22;
} else {
__THREW__ = 0;
invoke_vi(130, 25068);
$55 = __THREW__;
__THREW__ = 0;
if (!($55 & 1)) {
$57 = HEAP32[16082] | 0;
if ($57 | 0) {
_fwrite(25077, 8, 1, $57) | 0;
_fwrite(25086, 3, 1, $57) | 0;
__THREW__ = 0;
invoke_vii(142, $0 | 0, $57 | 0);
$59 = __THREW__;
__THREW__ = 0;
if ($59 & 1) break;
$62 = +Math_fround(HEAPF32[$12 >> 2]);
$64 = +Math_fround(HEAPF32[$21 >> 2]);
$66 = +Math_fround(HEAPF32[$50 >> 2]);
HEAPF64[$vararg_buffer4 >> 3] = $62;
HEAPF64[$vararg_buffer4 + 8 >> 3] = $64;
HEAPF64[$vararg_buffer4 + 16 >> 3] = $66;
_fprintf($57, 25090, $vararg_buffer4) | 0;
}
__THREW__ = 0;
invoke_vi(122, 10);
$67 = __THREW__;
__THREW__ = 0;
if (!($67 & 1)) {
$70 = +Math_fround(HEAPF32[$50 >> 2]);
$74 = +Math_fround(HEAPF32[$19 >> 2]);
__THREW__ = 0;
HEAPF64[$vararg_buffer9 >> 3] = $70;
HEAPF64[$vararg_buffer9 + 8 >> 3] = +$$071$lcssa;
HEAP32[$vararg_buffer9 + 16 >> 2] = $$070$lcssa;
HEAPF64[$vararg_buffer9 + 24 >> 3] = +$53;
HEAPF64[$vararg_buffer9 + 32 >> 3] = $74;
invoke_vii(115, 25115, $vararg_buffer9 | 0);
$75 = __THREW__;
__THREW__ = 0;
if (!($75 & 1)) {
$82 = HEAP32[476] | 0;
label = 22;
}
}
}
} while (0);
if ((label | 0) == 22) {
$80 = Math_fround($53 * Math_fround(HEAPF32[$12 >> 2]));
HEAPF32[$12 >> 2] = $80;
$83 = _malloc($82 << 2) | 0;
HEAP32[$2 >> 2] = $83;
__THREW__ = 0;
invoke_vif(53, $3 | 0, 0.0);
$84 = __THREW__;
__THREW__ = 0;
if (!($84 & 1)) {
__THREW__ = 0;
invoke_vif(54, $3 | 0, 1.0);
$86 = __THREW__;
__THREW__ = 0;
if (!($86 & 1)) {
HEAPF32[$17 >> 2] = Math_fround(0.0);
HEAPF32[$18 >> 2] = Math_fround(0.0);
L32 : do if ((HEAP32[476] | 0) > 0) {
$$06893 = 0;
$$17292 = Math_fround(0.0);
while (1) {
$$17292 = Math_fround($$17292 + Math_fround(HEAPF32[$12 >> 2]));
__THREW__ = 0;
invoke_vif(55, $3 | 0, +$$17292);
$92 = __THREW__;
__THREW__ = 0;
if ($92 & 1) break;
HEAP32[(HEAP32[$2 >> 2] | 0) + ($$06893 << 2) >> 2] = HEAP32[$19 >> 2];
$$06893 = $$06893 + 1 | 0;
if (($$06893 | 0) >= (HEAP32[476] | 0)) break L32;
}
$100 = ___cxa_find_matching_catch_2() | 0;
$$3 = $100;
$$376 = tempRet0;
___resumeException($$3 | 0);
} while (0);
__THREW__ = 0;
$102 = __THREW__;
__THREW__ = 0;
if ($102 & 1) {
$115 = ___cxa_find_matching_catch_2() | 0;
$116 = tempRet0;
__ZdlPv($3);
$$3 = $115;
$$376 = $116;
___resumeException($$3 | 0);
}
__ZdlPv($3);
$104 = HEAP32[$2 >> 2] | 0;
$105 = HEAP32[476] | 0;
$108 = Math_fround(HEAPF32[$104 + ($105 + -1 << 2) >> 2]);
if ($108 != Math_fround(0.0) & ($105 | 0) > 0) {
$112 = Math_fround(Math_fround(HEAPF32[$104 >> 2]) / $108);
HEAPF32[$104 >> 2] = $112;
if ((HEAP32[476] | 0) > 1) {
$118 = 1;
do {
$117 = (HEAP32[$2 >> 2] | 0) + ($118 << 2) | 0;
$120 = Math_fround(Math_fround(HEAPF32[$117 >> 2]) / $108);
HEAPF32[$117 >> 2] = $120;
$118 = $118 + 1 | 0;
} while (($118 | 0) < (HEAP32[476] | 0));
}
}
if (!0) {
STACKTOP = sp;
return;
}
$125 = HEAP32[16082] | 0;
if (!$125) label = 38; else {
_fwrite(25077, 8, 1, $125) | 0;
_fwrite(25086, 3, 1, $125) | 0;
__THREW__ = 0;
invoke_vii(142, $0 | 0, $125 | 0);
$127 = __THREW__;
__THREW__ = 0;
if (!($127 & 1)) {
$130 = +Math_fround(HEAPF32[$12 >> 2]);
$132 = +Math_fround(HEAPF32[$21 >> 2]);
$134 = +Math_fround(HEAPF32[$50 >> 2]);
HEAPF64[$vararg_buffer16 >> 3] = $130;
HEAPF64[$vararg_buffer16 + 8 >> 3] = $132;
HEAPF64[$vararg_buffer16 + 16 >> 3] = $134;
_fprintf($125, 25090, $vararg_buffer16) | 0;
label = 38;
}
}
L55 : do if ((label | 0) == 38) {
__THREW__ = 0;
invoke_vi(122, 10);
$135 = __THREW__;
__THREW__ = 0;
if (!($135 & 1)) {
if ((HEAP32[476] | 0) > 0) {
$$089 = 0;
do {
$145 = +Math_fround(Math_fround(Math_fround(HEAPF32[$12 >> 2]) * Math_fround($$089 | 0)) / $53);
$149 = +Math_fround(HEAPF32[(HEAP32[$2 >> 2] | 0) + ($$089 << 2) >> 2]);
__THREW__ = 0;
HEAPF64[$vararg_buffer21 >> 3] = $145;
HEAPF64[$vararg_buffer21 + 8 >> 3] = $149;
invoke_vii(115, 25188, $vararg_buffer21 | 0);
$150 = __THREW__;
__THREW__ = 0;
if ($150 & 1) break L55;
$$089 = $$089 + 20 | 0;
} while (($$089 | 0) < (HEAP32[476] | 0));
}
__THREW__ = 0;
invoke_vi(122, 10);
$139 = __THREW__;
__THREW__ = 0;
if (!($139 & 1)) {
STACKTOP = sp;
return;
}
}
} while (0);
$155 = ___cxa_find_matching_catch_2() | 0;
$$3 = $155;
$$376 = tempRet0;
___resumeException($$3 | 0);
}
}
}
$77 = ___cxa_find_matching_catch_2() | 0;
$$3 = $77;
$$376 = tempRet0;
___resumeException($$3 | 0);
}
}
}
$38 = ___cxa_find_matching_catch_2() | 0;
$$3 = $38;
$$376 = tempRet0;
___resumeException($$3 | 0);
}
function __ZN13SplitMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$ = 0, $$$1 = 0, $$0 = f0, $$073 = f0, $$1 = 0, $$167 = f0, $$170 = f0, $$174 = f0, $$2 = f0, $$271 = f0, $$275 = f0, $$3 = 0, $$368 = f0, $$372 = f0, $$376 = f0, $$4 = f0, $$5 = f0, $$sroa$0$0 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $$sroa$0$1 = 0, $$sroa$0$2 = 0, $$sroa$0$3 = 0, $$sroa$4$0$$sroa_idx61 = 0, $$sroa$464$0$$sroa_idx66 = 0, $11 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $170 = 0, $174 = 0, $176 = f0, $187 = 0, $190 = 0, $218 = 0, $219 = 0, $222 = 0, $225 = 0, $228 = 0, $235 = 0, $236 = 0, $241 = f0, $242 = 0, $247 = f0, $251 = 0, $253 = f0, $256 = f0, $258 = f0, $264 = 0.0, $269 = 0, $6 = 0, $69 = 0, $73 = 0, $75 = f0, $76 = 0, $8 = 0, $84 = 0, $87 = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, dest = 0, sp = 0, src = 0, stop = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer7 = sp + 24 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
__ZN13BasicMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture($0, $1, $2);
if (0) {
__Z7eprintfPKcz(45155, sp);
__ZNK19TwoHConcretePosture5printEP8_IO_FILE($0 + 60 | 0, HEAP32[16082] | 0);
}
$$sroa$0$0$$sroa_idx = $0 + 12 | 0;
$$sroa$0$0$copyload = HEAP32[$$sroa$0$0$$sroa_idx >> 2] | 0;
$6 = $0 + 16 | 0;
$8 = HEAP32[$6 >> 2] | 0;
$11 = HEAP32[$6 + 4 >> 2] | 0;
$12 = $0 + 40 | 0;
HEAPF32[$12 >> 2] = Math_fround(0.0);
$13 = $0 + 44 | 0;
HEAPF32[$13 >> 2] = Math_fround(0.0);
$14 = $0 + 528 | 0;
$15 = HEAP32[$14 >> 2] | 0;
if (!$15) {
$$1 = 0;
$$167 = Math_fround(0.0);
$$174 = Math_fround(0.0);
$$271 = Math_fround(0.0);
$$sroa$0$1 = $$sroa$0$0$copyload;
} else {
__ZN6Vector7setFromERKS_($15 + 64 | 0, $0 + 64 | 0);
__ZN6Vector7setFromERKS_($15 + 76 | 0, $0 + 76 | 0);
__ZN6Vector7setFromERKS_($15 + 88 | 0, $0 + 88 | 0);
HEAP32[$15 + 124 >> 2] = HEAP32[$0 + 124 >> 2];
HEAP32[$15 + 128 >> 2] = HEAP32[$0 + 128 >> 2];
dest = $15 + 136 | 0;
src = $0 + 136 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[$15 + 100 >> 2] = HEAP32[$0 + 100 >> 2];
HEAP32[$15 + 104 >> 2] = HEAP32[$0 + 104 >> 2];
HEAP32[$15 + 108 >> 2] = HEAP32[$0 + 108 >> 2];
HEAP32[$15 + 112 >> 2] = HEAP32[$0 + 112 >> 2];
__ZN6Vector7setFromERKS_($15 + 176 | 0, $0 + 176 | 0);
__ZN6Vector7setFromERKS_($15 + 188 | 0, $0 + 188 | 0);
__ZN6Vector7setFromERKS_($15 + 200 | 0, $0 + 200 | 0);
HEAP32[$15 + 236 >> 2] = HEAP32[$0 + 236 >> 2];
HEAP32[$15 + 240 >> 2] = HEAP32[$0 + 240 >> 2];
dest = $15 + 248 | 0;
src = $0 + 248 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[$15 + 212 >> 2] = HEAP32[$0 + 212 >> 2];
HEAP32[$15 + 216 >> 2] = HEAP32[$0 + 216 >> 2];
HEAP32[$15 + 220 >> 2] = HEAP32[$0 + 220 >> 2];
HEAP32[$15 + 224 >> 2] = HEAP32[$0 + 224 >> 2];
$69 = HEAP32[$14 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$69 >> 2] | 0) + 20 >> 2] & 127]($69, $1, $2);
$73 = HEAP32[$14 >> 2] | 0;
$75 = Math_fround(HEAPF32[$73 + 40 >> 2]);
$76 = $75 > Math_fround(0.0);
$$0 = $76 ? $75 : Math_fround(0.0);
if ((HEAP32[$73 + 4 >> 2] | 0) == 10 | $76 ^ 1) {
$$073 = Math_fround(0.0);
$$170 = Math_fround(0.0);
} else {
$$073 = (HEAP32[$73 + 12 >> 2] | 0) == 1 ? Math_fround(0.0) : $75;
$$170 = $75;
}
$84 = HEAP32[$73 + 12 >> 2] | 0;
$$sroa$0$0 = ($$sroa$0$0$copyload | 0) < ($84 | 0) ? $84 : $$sroa$0$0$copyload;
$87 = HEAP32[$73 + 24 >> 2] | 0;
$$ = ($87 | 0) > 0 ? $87 : 0;
__ZN6Vector7setFromERKS_($0 + 288 | 0, $73 + 288 | 0);
__ZN6Vector7setFromERKS_($0 + 300 | 0, $73 + 300 | 0);
__ZN6Vector7setFromERKS_($0 + 312 | 0, $73 + 312 | 0);
HEAP32[$0 + 348 >> 2] = HEAP32[$73 + 348 >> 2];
HEAP32[$0 + 352 >> 2] = HEAP32[$73 + 352 >> 2];
dest = $0 + 360 | 0;
src = $73 + 360 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[$0 + 324 >> 2] = HEAP32[$73 + 324 >> 2];
HEAP32[$0 + 328 >> 2] = HEAP32[$73 + 328 >> 2];
HEAP32[$0 + 332 >> 2] = HEAP32[$73 + 332 >> 2];
HEAP32[$0 + 336 >> 2] = HEAP32[$73 + 336 >> 2];
$$1 = $$;
$$167 = $$0;
$$174 = $$073;
$$271 = $$170;
$$sroa$0$1 = $$sroa$0$0;
}
$115 = $0 + 532 | 0;
$116 = HEAP32[$115 >> 2] | 0;
if (!$116) {
$$3 = $$1;
$$368 = $$167;
$$376 = $$174;
$$5 = $$271;
$$sroa$0$3 = $$sroa$0$1;
} else {
__ZN6Vector7setFromERKS_($116 + 64 | 0, $0 + 64 | 0);
__ZN6Vector7setFromERKS_($116 + 76 | 0, $0 + 76 | 0);
__ZN6Vector7setFromERKS_($116 + 88 | 0, $0 + 88 | 0);
HEAP32[$116 + 124 >> 2] = HEAP32[$0 + 124 >> 2];
HEAP32[$116 + 128 >> 2] = HEAP32[$0 + 128 >> 2];
dest = $116 + 136 | 0;
src = $0 + 136 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[$116 + 100 >> 2] = HEAP32[$0 + 100 >> 2];
HEAP32[$116 + 104 >> 2] = HEAP32[$0 + 104 >> 2];
HEAP32[$116 + 108 >> 2] = HEAP32[$0 + 108 >> 2];
HEAP32[$116 + 112 >> 2] = HEAP32[$0 + 112 >> 2];
__ZN6Vector7setFromERKS_($116 + 176 | 0, $0 + 176 | 0);
__ZN6Vector7setFromERKS_($116 + 188 | 0, $0 + 188 | 0);
__ZN6Vector7setFromERKS_($116 + 200 | 0, $0 + 200 | 0);
HEAP32[$116 + 236 >> 2] = HEAP32[$0 + 236 >> 2];
HEAP32[$116 + 240 >> 2] = HEAP32[$0 + 240 >> 2];
dest = $116 + 248 | 0;
src = $0 + 248 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[$116 + 212 >> 2] = HEAP32[$0 + 212 >> 2];
HEAP32[$116 + 216 >> 2] = HEAP32[$0 + 216 >> 2];
HEAP32[$116 + 220 >> 2] = HEAP32[$0 + 220 >> 2];
HEAP32[$116 + 224 >> 2] = HEAP32[$0 + 224 >> 2];
$170 = HEAP32[$115 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$170 >> 2] | 0) + 20 >> 2] & 127]($170, $1, $2);
$174 = HEAP32[$115 >> 2] | 0;
$176 = Math_fround(HEAPF32[$174 + 40 >> 2]);
$$2 = $$167 < $176 ? $176 : $$167;
if ((HEAP32[$174 + 4 >> 2] | 0) == 10) {
$$275 = $$174;
$$4 = $$271;
} else {
$$372 = $$271 < $176 ? $176 : $$271;
if ($$174 < $176) {
$$275 = (HEAP32[$174 + 12 >> 2] | 0) == 1 ? $$174 : $176;
$$4 = $$372;
} else {
$$275 = $$174;
$$4 = $$372;
}
}
$187 = HEAP32[$174 + 12 >> 2] | 0;
$$sroa$0$2 = ($$sroa$0$1 | 0) < ($187 | 0) ? $187 : $$sroa$0$1;
$190 = HEAP32[$174 + 24 >> 2] | 0;
$$$1 = ($$1 | 0) < ($190 | 0) ? $190 : $$1;
__ZN6Vector7setFromERKS_($0 + 400 | 0, $174 + 400 | 0);
__ZN6Vector7setFromERKS_($0 + 412 | 0, $174 + 412 | 0);
__ZN6Vector7setFromERKS_($0 + 424 | 0, $174 + 424 | 0);
HEAP32[$0 + 460 >> 2] = HEAP32[$174 + 460 >> 2];
HEAP32[$0 + 464 >> 2] = HEAP32[$174 + 464 >> 2];
dest = $0 + 472 | 0;
src = $174 + 472 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[$0 + 436 >> 2] = HEAP32[$174 + 436 >> 2];
HEAP32[$0 + 440 >> 2] = HEAP32[$174 + 440 >> 2];
HEAP32[$0 + 444 >> 2] = HEAP32[$174 + 444 >> 2];
HEAP32[$0 + 448 >> 2] = HEAP32[$174 + 448 >> 2];
$$3 = $$$1;
$$368 = $$2;
$$376 = $$275;
$$5 = $$4;
$$sroa$0$3 = $$sroa$0$2;
}
$218 = $$376 > Math_fround(0.0);
$219 = $$5 > Math_fround(0.0);
HEAPF32[$12 >> 2] = $218 ? $$376 : $219 ? $$5 : $$368;
$222 = HEAP32[$14 >> 2] | 0;
if ($222 | 0) {
HEAP32[$222 + 12 >> 2] = $$sroa$0$3;
$$sroa$4$0$$sroa_idx61 = $222 + 16 | 0;
HEAP32[$$sroa$4$0$$sroa_idx61 >> 2] = $8;
HEAP8[$$sroa$4$0$$sroa_idx61 + 4 >> 0] = $11;
}
$225 = HEAP32[$115 >> 2] | 0;
if ($225 | 0) {
HEAP32[$225 + 12 >> 2] = $$sroa$0$3;
$$sroa$464$0$$sroa_idx66 = $225 + 16 | 0;
HEAP32[$$sroa$464$0$$sroa_idx66 >> 2] = $8;
HEAP8[$$sroa$464$0$$sroa_idx66 + 4 >> 0] = $11;
}
HEAP32[$$sroa$0$0$$sroa_idx >> 2] = 11;
$228 = $0 + 24 | 0;
HEAP32[$228 >> 2] = 0;
if ($$3 | 0) {
if (1) {
__Z7LogTimev() | 0;
$235 = HEAP32[2944 + ($$3 << 2) >> 2] | 0;
HEAP32[$vararg_buffer1 >> 2] = HEAP32[2944 + (HEAP32[$228 >> 2] << 2) >> 2];
HEAP32[$vararg_buffer1 + 4 >> 2] = $235;
__Z7eprintfPKcz(45174, $vararg_buffer1);
}
HEAP32[$228 >> 2] = $$3;
}
$236 = HEAP32[$14 >> 2] | 0;
if ($236 | 0) {
$241 = Math_fround(HEAPF32[$12 >> 2]);
FUNCTION_TABLE_vifi[HEAP32[(HEAP32[$236 >> 2] | 0) + 64 >> 2] & 7]($236, $241, 1);
}
$242 = HEAP32[$115 >> 2] | 0;
if ($242 | 0) {
$247 = Math_fround(HEAPF32[$12 >> 2]);
FUNCTION_TABLE_vifi[HEAP32[(HEAP32[$242 >> 2] | 0) + 64 >> 2] & 7]($242, $247, 1);
}
if (HEAP8[$0 + 20 >> 0] | 0) {
$251 = HEAP32[$1 >> 2] | 0;
$253 = Math_fround(HEAPF32[$251 + 268 >> 2]);
$256 = Math_fround($253 * Math_fround(HEAPF32[$251 + 232 >> 2]));
HEAPF32[$13 >> 2] = $256;
$258 = Math_fround($256 + Math_fround(HEAPF32[$12 >> 2]));
HEAPF32[$12 >> 2] = $258;
}
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$0 >> 2] | 0) + 68 >> 2] & 255]($0);
if (0) {
$264 = +Math_fround(HEAPF32[$12 >> 2]);
HEAPF64[$vararg_buffer4 >> 3] = $264;
__Z7eprintfPKcz(45229, $vararg_buffer4);
__ZNK25TwoHConcretePostureChange5printEP8_IO_FILE($0 + 60 | 0, HEAP32[16082] | 0);
}
if (!1) {
STACKTOP = sp;
return;
}
$269 = $0 + 8 | 0;
if (__ZNK19TwoHConcretePosture14totallyDefinedE12SET_OF_HANDS($0 + 284 | 0, HEAP32[$269 >> 2] | 0) | 0) {
STACKTOP = sp;
return;
}
__Z7LogTimev() | 0;
__Z7eprintfPKcz(45251, $vararg_buffer7);
__ZNK25TwoHConcretePostureChange19printFinalUndefinedEP8_IO_FILE12SET_OF_HANDS($0 + 60 | 0, HEAP32[16082] | 0, HEAP32[$269 >> 2] | 0);
STACKTOP = sp;
return;
}
function __ZNK7Gesture5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $100 = 0, $102 = 0, $103 = 0, $108 = 0, $114 = 0, $115 = 0, $122 = 0, $124 = 0, $13 = 0, $136 = 0, $139 = 0, $151 = 0, $154 = 0, $166 = 0, $169 = 0, $181 = 0, $184 = 0, $196 = 0, $199 = 0, $211 = 0, $214 = 0, $226 = 0, $229 = 0, $35 = 0, $43 = 0, $5 = 0, $58 = 0.0, $61 = 0, $71 = 0, $79 = 0, $81 = 0, $86 = 0, $89 = 0, $90 = 0, $92 = 0, $94 = 0, $97 = 0, $vararg_buffer = 0, $vararg_buffer14 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer32 = 0, $vararg_buffer36 = 0, $vararg_buffer40 = 0, $vararg_buffer44 = 0, $vararg_buffer48 = 0, $vararg_buffer5 = 0, $vararg_buffer52 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 144 | 0;
$vararg_buffer52 = sp + 136 | 0;
$vararg_buffer48 = sp + 128 | 0;
$vararg_buffer44 = sp + 120 | 0;
$vararg_buffer40 = sp + 112 | 0;
$vararg_buffer36 = sp + 104 | 0;
$vararg_buffer32 = sp + 96 | 0;
$vararg_buffer28 = sp + 88 | 0;
$vararg_buffer24 = sp + 80 | 0;
$vararg_buffer20 = sp + 64 | 0;
$vararg_buffer14 = sp + 48 | 0;
$vararg_buffer5 = sp + 16 | 0;
$vararg_buffer2 = sp + 8 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$5 = HEAP32[$0 + 8 >> 2] | 0;
HEAP32[$vararg_buffer >> 2] = $0;
HEAP32[$vararg_buffer + 4 >> 2] = $5;
_fprintf($1, 29269, $vararg_buffer) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
HEAP32[$vararg_buffer2 >> 2] = HEAP8[$0 + 12 >> 0] | 0 ? 84 : 70;
_fprintf($1, 29285, $vararg_buffer2) | 0;
_fwrite(29294, 2, 1, $1) | 0;
$13 = HEAP8[$0 + 13 >> 0] | 0;
HEAP32[$vararg_buffer5 >> 2] = $13 & 1 ? 84 : 70;
HEAP32[$vararg_buffer5 + 4 >> 2] = $13 & 2 ? 84 : 70;
HEAP32[$vararg_buffer5 + 8 >> 2] = $13 & 4 ? 84 : 70;
HEAP32[$vararg_buffer5 + 12 >> 2] = $13 & 8 ? 84 : 70;
HEAP32[$vararg_buffer5 + 16 >> 2] = $13 & 16 ? 84 : 70;
HEAP32[$vararg_buffer5 + 20 >> 2] = $13 & 32 ? 84 : 70;
HEAP32[$vararg_buffer5 + 24 >> 2] = $13 & 64 ? 84 : 70;
_fprintf($1, 29225, $vararg_buffer5) | 0;
_fputc(10, $1) | 0;
$35 = $0 + 14 | 0;
if (HEAP8[$35 >> 0] & 15) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(29297, 14, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
$43 = HEAP8[$35 >> 0] | 0;
HEAP32[$vararg_buffer14 >> 2] = $43 & 1 ? 84 : 70;
HEAP32[$vararg_buffer14 + 4 >> 2] = $43 & 2 ? 84 : 70;
HEAP32[$vararg_buffer14 + 8 >> 2] = $43 & 4 ? 84 : 70;
HEAP32[$vararg_buffer14 + 12 >> 2] = $43 & 8 ? 84 : 70;
_fprintf($1, 25999, $vararg_buffer14) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$58 = +Math_fround(HEAPF32[$0 + 16 >> 2]);
HEAP32[$vararg_buffer20 >> 2] = 3;
HEAPF64[$vararg_buffer20 + 8 >> 3] = $58;
_fprintf($1, 29312, $vararg_buffer20) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$61 = $0 + 36 | 0;
if (!(HEAP32[$61 >> 2] | 0)) _fwrite(29360, 20, 1, $1) | 0; else {
_fwrite(29344, 15, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK18SiGMLConstellation5printEP8_IO_FILE(HEAP32[$61 >> 2] | 0, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$71 = $0 + 40 | 0;
if (!(HEAP32[$71 >> 2] | 0)) _fwrite(29394, 17, 1, $1) | 0; else {
_fwrite(29381, 12, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK20ArmHandConstellation5printEP8_IO_FILE(HEAP32[$71 >> 2] | 0, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$79 = $0 + 20 | 0;
$81 = (HEAP32[$79 >> 2] | 0) == 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
if ($81) {
_fwrite(29425, 17, 1, $1) | 0;
$94 = HEAP16[36078] | 0;
} else {
_fwrite(29412, 12, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
$86 = HEAP32[$79 >> 2] | 0;
if (!$86) _fwrite(61277, 6, 1, $1) | 0; else __ZNK11OneHGesture5printEP8_IO_FILE($86, $1);
$89 = (HEAP16[36078] | 0) + -1 << 16 >> 16;
HEAP16[36078] = $89;
$94 = $89;
}
$90 = $0 + 24 | 0;
$92 = (HEAP32[$90 >> 2] | 0) == 0;
__Z11printIndentP8_IO_FILEi($1, $94 << 16 >> 16);
if ($92) {
_fwrite(29459, 20, 1, $1) | 0;
$102 = HEAP16[36078] | 0;
} else {
_fwrite(29443, 15, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
$97 = HEAP32[$90 >> 2] | 0;
if (!$97) _fwrite(61277, 6, 1, $1) | 0; else __ZNK11OneHGesture5printEP8_IO_FILE($97, $1);
$100 = (HEAP16[36078] | 0) + -1 << 16 >> 16;
HEAP16[36078] = $100;
$102 = $100;
}
__Z11printIndentP8_IO_FILEi($1, $102 << 16 >> 16);
$103 = $0 + 44 | 0;
if (!(HEAP32[$103 >> 2] | 0)) _fwrite(29494, 18, 1, $1) | 0; else {
_fwrite(29480, 13, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
$108 = HEAP32[$103 >> 2] | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$108 >> 2] | 0) + 72 >> 2] & 255]($108, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$114 = $0 + 48 | 0;
$115 = HEAP32[$114 >> 2] | 0;
if (!$115) {
STACKTOP = sp;
return;
}
do if (HEAP32[$115 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$122 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17824] | 0, 0) | 0;
HEAP32[$vararg_buffer24 >> 2] = 0;
HEAP32[$vararg_buffer24 + 4 >> 2] = $122;
_fprintf($1, 29513, $vararg_buffer24) | 0;
$124 = HEAP32[HEAP32[$114 >> 2] >> 2] | 0;
if (!$124) {
_fwrite(61277, 6, 1, $1) | 0;
break;
} else {
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$124 >> 2] | 0) + 8 >> 2] & 255]($124, $1);
break;
}
} while (0);
do if (HEAP32[(HEAP32[$114 >> 2] | 0) + 4 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$136 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17824] | 0, 1) | 0;
HEAP32[$vararg_buffer28 >> 2] = 1;
HEAP32[$vararg_buffer28 + 4 >> 2] = $136;
_fprintf($1, 29513, $vararg_buffer28) | 0;
$139 = HEAP32[(HEAP32[$114 >> 2] | 0) + 4 >> 2] | 0;
if (!$139) {
_fwrite(61277, 6, 1, $1) | 0;
break;
} else {
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$139 >> 2] | 0) + 8 >> 2] & 255]($139, $1);
break;
}
} while (0);
do if (HEAP32[(HEAP32[$114 >> 2] | 0) + 8 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$151 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17824] | 0, 2) | 0;
HEAP32[$vararg_buffer32 >> 2] = 2;
HEAP32[$vararg_buffer32 + 4 >> 2] = $151;
_fprintf($1, 29513, $vararg_buffer32) | 0;
$154 = HEAP32[(HEAP32[$114 >> 2] | 0) + 8 >> 2] | 0;
if (!$154) {
_fwrite(61277, 6, 1, $1) | 0;
break;
} else {
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$154 >> 2] | 0) + 8 >> 2] & 255]($154, $1);
break;
}
} while (0);
do if (HEAP32[(HEAP32[$114 >> 2] | 0) + 12 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$166 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17824] | 0, 3) | 0;
HEAP32[$vararg_buffer36 >> 2] = 3;
HEAP32[$vararg_buffer36 + 4 >> 2] = $166;
_fprintf($1, 29513, $vararg_buffer36) | 0;
$169 = HEAP32[(HEAP32[$114 >> 2] | 0) + 12 >> 2] | 0;
if (!$169) {
_fwrite(61277, 6, 1, $1) | 0;
break;
} else {
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$169 >> 2] | 0) + 8 >> 2] & 255]($169, $1);
break;
}
} while (0);
do if (HEAP32[(HEAP32[$114 >> 2] | 0) + 16 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$181 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17824] | 0, 4) | 0;
HEAP32[$vararg_buffer40 >> 2] = 4;
HEAP32[$vararg_buffer40 + 4 >> 2] = $181;
_fprintf($1, 29513, $vararg_buffer40) | 0;
$184 = HEAP32[(HEAP32[$114 >> 2] | 0) + 16 >> 2] | 0;
if (!$184) {
_fwrite(61277, 6, 1, $1) | 0;
break;
} else {
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$184 >> 2] | 0) + 8 >> 2] & 255]($184, $1);
break;
}
} while (0);
do if (HEAP32[(HEAP32[$114 >> 2] | 0) + 20 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$196 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17824] | 0, 5) | 0;
HEAP32[$vararg_buffer44 >> 2] = 5;
HEAP32[$vararg_buffer44 + 4 >> 2] = $196;
_fprintf($1, 29513, $vararg_buffer44) | 0;
$199 = HEAP32[(HEAP32[$114 >> 2] | 0) + 20 >> 2] | 0;
if (!$199) {
_fwrite(61277, 6, 1, $1) | 0;
break;
} else {
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$199 >> 2] | 0) + 8 >> 2] & 255]($199, $1);
break;
}
} while (0);
do if (HEAP32[(HEAP32[$114 >> 2] | 0) + 24 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$211 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17824] | 0, 6) | 0;
HEAP32[$vararg_buffer48 >> 2] = 6;
HEAP32[$vararg_buffer48 + 4 >> 2] = $211;
_fprintf($1, 29513, $vararg_buffer48) | 0;
$214 = HEAP32[(HEAP32[$114 >> 2] | 0) + 24 >> 2] | 0;
if (!$214) {
_fwrite(61277, 6, 1, $1) | 0;
break;
} else {
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$214 >> 2] | 0) + 8 >> 2] & 255]($214, $1);
break;
}
} while (0);
if (!(HEAP32[(HEAP32[$114 >> 2] | 0) + 28 >> 2] | 0)) {
STACKTOP = sp;
return;
}
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$226 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17824] | 0, 7) | 0;
HEAP32[$vararg_buffer52 >> 2] = 7;
HEAP32[$vararg_buffer52 + 4 >> 2] = $226;
_fprintf($1, 29513, $vararg_buffer52) | 0;
$229 = HEAP32[(HEAP32[$114 >> 2] | 0) + 28 >> 2] | 0;
if (!$229) {
_fwrite(61277, 6, 1, $1) | 0;
STACKTOP = sp;
return;
} else {
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$229 >> 2] | 0) + 8 >> 2] & 255]($229, $1);
STACKTOP = sp;
return;
}
}
function __ZN11HanimAvatarD2Ev($0) {
$0 = $0 | 0;
var $$03458 = 0, $$03458$in = 0, $$03563 = 0, $$036 = 0, $$037 = 0, $$055 = 0, $$055$in = 0, $$1 = 0, $$138 = 0, $$2 = 0, $$239 = 0, $$3 = 0, $$340 = 0, $$4 = 0, $$441 = 0, $$lcssa4779 = 0, $$lcssa5078 = 0, $$lcssa80 = 0, $$pr = 0, $$pr42 = 0, $$pr44 = 0, $1 = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $105 = 0, $106 = 0, $109 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $123 = 0, $124 = 0, $126 = 0, $128 = 0, $13 = 0, $131 = 0, $134 = 0, $137 = 0, $139 = 0, $142 = 0, $144 = 0, $147 = 0, $149 = 0, $152 = 0, $154 = 0, $157 = 0, $159 = 0, $160 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $27 = 0, $32 = 0, $33 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $46 = 0, $48 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $66 = 0, $7 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $79 = 0, $82 = 0, $84 = 0, $85 = 0, $88 = 0, $9 = 0, $93 = 0, $95 = 0, $97 = 0, $99 = 0, $scevgep35$1$i = 0, $scevgep35$i = 0, dest = 0, label = 0, stop = 0;
$1 = $0 + 56 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if ($2 | 0) {
_free($2);
HEAP32[$1 >> 2] = 0;
}
$6 = $0 + 60 | 0;
$7 = HEAP32[$6 >> 2] | 0;
if ($7 | 0) {
_free($7);
HEAP32[$6 >> 2] = 0;
}
$9 = $0 + 228 | 0;
$10 = HEAP32[$9 >> 2] | 0;
if ($10 | 0) {
__ZdlPv($10);
HEAP32[$9 >> 2] = 0;
}
$12 = $0 + 80 | 0;
$13 = HEAP32[$12 >> 2] | 0;
do if (!$13) label = 11; else {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$13 >> 2] | 0) + 4 >> 2] | 0, $13 | 0);
$18 = __THREW__;
__THREW__ = 0;
if ($18 & 1) {
$4 = ___cxa_find_matching_catch_2() | 0;
$$036 = tempRet0;
$$037 = $4;
label = 76;
break;
} else {
HEAP32[$12 >> 2] = 0;
label = 11;
break;
}
} while (0);
L15 : do if ((label | 0) == 11) {
$20 = $0 + 72 | 0;
$21 = HEAP32[$20 >> 2] | 0;
if (!$21) label = 15; else {
$24 = HEAP32[$21 + 8 >> 2] | 0;
if (!$24) label = 15; else {
$27 = HEAP32[$24 + 20 >> 2] | 0;
if (!$27) label = 15; else if (!(HEAP32[$27 + 16 >> 2] | 0)) label = 15;
}
}
if ((label | 0) == 15) {
$32 = $0 + 488 | 0;
$33 = HEAP32[$32 >> 2] | 0;
if ($33 | 0) {
$35 = HEAP32[$33 >> 2] | 0;
if ($35 | 0) _free($35);
__ZdlPv($33);
HEAP32[$32 >> 2] = 0;
}
}
$37 = $0 + 76 | 0;
$38 = HEAP32[$37 >> 2] | 0;
if ($38 | 0) {
$40 = $38 + 116 | 0;
$41 = HEAP32[$40 >> 2] | 0;
if ($41 | 0) {
_free($41);
HEAP32[$40 >> 2] = 0;
}
HEAP32[$38 + 128 >> 2] = 0;
HEAP32[$38 + 124 >> 2] = 0;
$46 = HEAP32[$38 + 100 >> 2] | 0;
if ($46 | 0) _free($46);
__ZdlPv($38);
HEAP32[$37 >> 2] = 0;
}
$48 = HEAP32[$20 >> 2] | 0;
if ($48 | 0) {
HEAP32[$48 >> 2] = 0;
HEAP32[$48 + 4 >> 2] = 0;
$scevgep35$i = $48 + 100 | 0;
$52 = $48 + 188 | 0;
$scevgep35$1$i = $48 + 160 | 0;
$53 = $48 + 208 | 0;
$54 = $48 + 252 | 0;
dest = $48 + 12 | 0;
stop = dest + 40 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[$scevgep35$i >> 2] = 0;
HEAP32[$scevgep35$i + 4 >> 2] = 0;
HEAP32[$scevgep35$i + 8 >> 2] = 0;
HEAP32[$scevgep35$1$i >> 2] = 0;
HEAP32[$scevgep35$1$i + 4 >> 2] = 0;
HEAP32[$scevgep35$1$i + 8 >> 2] = 0;
HEAP32[$52 >> 2] = 0;
HEAP32[$53 >> 2] = 0;
$55 = HEAP32[$54 >> 2] | 0;
if ($55 | 0) {
_free($55);
HEAP32[$54 >> 2] = 0;
}
HEAP32[$48 + 264 >> 2] = 0;
HEAP32[$48 + 260 >> 2] = 0;
$60 = HEAP32[$48 + 236 >> 2] | 0;
if ($60 | 0) _free($60);
__ZdlPv($48);
HEAP32[$20 >> 2] = 0;
}
$62 = $0 + 104 | 0;
$63 = HEAP32[$62 >> 2] | 0;
L46 : do if ($63 | 0) {
$66 = HEAP32[$63 + 12 >> 2] | 0;
do if (($66 | 0) > -1) {
$$03563 = $66;
$70 = $66;
$72 = $63;
while (1) {
if (($70 | 0) > ($$03563 | 0)) {
$74 = HEAP32[(HEAP32[$72 >> 2] | 0) + ($$03563 << 2) >> 2] | 0;
if (!$74) $$pr = $72; else {
__THREW__ = 0;
invoke_vi(128, $74 | 0);
$76 = __THREW__;
__THREW__ = 0;
if ($76 & 1) {
label = 38;
break;
}
__ZdlPv($74);
$$pr = HEAP32[$62 >> 2] | 0;
}
} else $$pr = $72;
if (($$03563 | 0) <= 0) {
label = 33;
break;
}
$$03563 = $$03563 + -1 | 0;
$70 = HEAP32[$$pr + 12 >> 2] | 0;
$72 = $$pr;
}
if ((label | 0) == 33) if (!$$pr) break L46; else {
$$lcssa5078 = $$pr;
break;
} else if ((label | 0) == 38) {
$78 = ___cxa_find_matching_catch_2() | 0;
$79 = tempRet0;
__ZdlPv($74);
$$036 = $79;
$$037 = $78;
label = 76;
break L15;
}
} else $$lcssa5078 = $63; while (0);
$82 = HEAP32[$$lcssa5078 >> 2] | 0;
if ($82 | 0) _free($82);
__ZdlPv($$lcssa5078);
HEAP32[$62 >> 2] = 0;
} while (0);
$84 = $0 + 108 | 0;
$85 = HEAP32[$84 >> 2] | 0;
L65 : do if ($85 | 0) {
$88 = HEAP32[$85 + 12 >> 2] | 0;
do if (($88 | 0) > 0) {
$$03458$in = $88;
$93 = $88;
$95 = $85;
while (1) {
$$03458 = $$03458$in + -1 | 0;
if (($93 | 0) < ($$03458$in | 0)) $$pr42 = $95; else {
$97 = HEAP32[(HEAP32[$95 >> 2] | 0) + ($$03458 << 2) >> 2] | 0;
if (!$97) $$pr42 = $95; else {
__THREW__ = 0;
invoke_vi(121, $97 | 0);
$99 = __THREW__;
__THREW__ = 0;
if ($99 & 1) {
label = 53;
break;
}
__ZdlPv($97);
$$pr42 = HEAP32[$84 >> 2] | 0;
}
}
if (($$03458$in | 0) <= 1) {
label = 48;
break;
}
$$03458$in = $$03458;
$93 = HEAP32[$$pr42 + 12 >> 2] | 0;
$95 = $$pr42;
}
if ((label | 0) == 48) if (!$$pr42) break L65; else {
$$lcssa4779 = $$pr42;
break;
} else if ((label | 0) == 53) {
$101 = ___cxa_find_matching_catch_2() | 0;
$102 = tempRet0;
__ZdlPv($97);
$$036 = $102;
$$037 = $101;
label = 76;
break L15;
}
} else $$lcssa4779 = $85; while (0);
$103 = HEAP32[$$lcssa4779 >> 2] | 0;
if ($103 | 0) _free($103);
__ZdlPv($$lcssa4779);
HEAP32[$84 >> 2] = 0;
} while (0);
$105 = $0 + 112 | 0;
$106 = HEAP32[$105 >> 2] | 0;
L84 : do if ($106 | 0) {
$109 = HEAP32[$106 + 12 >> 2] | 0;
do if (($109 | 0) > 0) {
$$055$in = $109;
$114 = $109;
$116 = $106;
while (1) {
$$055 = $$055$in + -1 | 0;
if (($114 | 0) < ($$055$in | 0)) $$pr44 = $116; else {
$118 = HEAP32[(HEAP32[$116 >> 2] | 0) + ($$055 << 2) >> 2] | 0;
if (!$118) $$pr44 = $116; else {
__THREW__ = 0;
invoke_vi(129, $118 | 0);
$120 = __THREW__;
__THREW__ = 0;
if ($120 & 1) {
label = 66;
break;
}
__ZdlPv($118);
$$pr44 = HEAP32[$105 >> 2] | 0;
}
}
if (($$055$in | 0) <= 1) {
label = 61;
break;
}
$$055$in = $$055;
$114 = HEAP32[$$pr44 + 12 >> 2] | 0;
$116 = $$pr44;
}
if ((label | 0) == 61) if (!$$pr44) break L84; else {
$$lcssa80 = $$pr44;
break;
} else if ((label | 0) == 66) {
$122 = ___cxa_find_matching_catch_2() | 0;
$123 = tempRet0;
__ZdlPv($118);
$$036 = $123;
$$037 = $122;
label = 76;
break L15;
}
} else $$lcssa80 = $106; while (0);
$124 = HEAP32[$$lcssa80 >> 2] | 0;
if ($124 | 0) _free($124);
__ZdlPv($$lcssa80);
HEAP32[$105 >> 2] = 0;
} while (0);
$126 = $0 + 84 | 0;
HEAP32[$126 >> 2] = 0;
HEAP32[$126 + 4 >> 2] = 0;
HEAP32[$126 + 8 >> 2] = 0;
HEAP32[$126 + 12 >> 2] = 0;
__THREW__ = 0;
invoke_vi(93, $0 + 200 | 0);
$128 = __THREW__;
__THREW__ = 0;
if ($128 & 1) {
$139 = ___cxa_find_matching_catch_2() | 0;
$$1 = tempRet0;
$$138 = $139;
label = 78;
break;
}
__THREW__ = 0;
invoke_vi(127, $0 + 172 | 0);
$131 = __THREW__;
__THREW__ = 0;
if ($131 & 1) {
$144 = ___cxa_find_matching_catch_2() | 0;
$$2 = tempRet0;
$$239 = $144;
label = 80;
break;
}
__THREW__ = 0;
invoke_vi(93, $0 + 144 | 0);
$134 = __THREW__;
__THREW__ = 0;
if ($134 & 1) {
$149 = ___cxa_find_matching_catch_2() | 0;
$$3 = tempRet0;
$$340 = $149;
break;
}
__THREW__ = 0;
invoke_vi(93, $0 + 116 | 0);
$137 = __THREW__;
__THREW__ = 0;
if (!($137 & 1)) return;
$154 = ___cxa_find_matching_catch_2() | 0;
$$4 = tempRet0;
$$441 = $154;
___resumeException($$441 | 0);
} while (0);
if ((label | 0) == 76) {
__THREW__ = 0;
invoke_vi(93, $0 + 200 | 0);
$142 = __THREW__;
__THREW__ = 0;
if ($142 & 1) {
$159 = ___cxa_find_matching_catch_3(0) | 0;
$160 = tempRet0;
___clang_call_terminate($159);
} else {
$$1 = $$036;
$$138 = $$037;
label = 78;
}
}
if ((label | 0) == 78) {
__THREW__ = 0;
invoke_vi(127, $0 + 172 | 0);
$147 = __THREW__;
__THREW__ = 0;
if ($147 & 1) {
$159 = ___cxa_find_matching_catch_3(0) | 0;
$160 = tempRet0;
___clang_call_terminate($159);
} else {
$$2 = $$1;
$$239 = $$138;
label = 80;
}
}
if ((label | 0) == 80) {
__THREW__ = 0;
invoke_vi(93, $0 + 144 | 0);
$152 = __THREW__;
__THREW__ = 0;
if ($152 & 1) {
$159 = ___cxa_find_matching_catch_3(0) | 0;
$160 = tempRet0;
___clang_call_terminate($159);
} else {
$$3 = $$2;
$$340 = $$239;
}
}
__THREW__ = 0;
invoke_vi(93, $0 + 116 | 0);
$157 = __THREW__;
__THREW__ = 0;
if ($157 & 1) {
$159 = ___cxa_find_matching_catch_3(0) | 0;
$160 = tempRet0;
___clang_call_terminate($159);
} else {
$$4 = $$3;
$$441 = $$340;
___resumeException($$441 | 0);
}
}
function _big2_getAtts($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$0$phi = 0, $$0105 = 0, $$0105$phi = 0, $$0107 = 0, $$0107$phi = 0, $$0109 = 0, $$3 = 0, $$pn = 0, $10 = 0, $4 = 0, $49 = 0, $57 = 0, $60 = 0, $67 = 0, $9 = 0, label = 0;
$4 = $0 + 72 | 0;
$$0 = 0;
$$0105 = 0;
$$0107 = 1;
$$pn = $1;
L1 : while (1) {
$$0109 = $$pn + 2 | 0;
L3 : do switch (HEAP8[$$0109 >> 0] | 0) {
case -33:
case -34:
case -35:
case -36:
{
$$0107$phi = $$0107;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$pn = $$0109;
$$0107 = $$0107$phi;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
break;
}
case 0:
{
$9 = $$pn + 3 | 0;
$10 = HEAP8[$9 >> 0] | 0;
switch (HEAP8[$4 + ($10 & 255) >> 0] | 0) {
case 7:
{
label = 11;
break L3;
break;
}
case 24:
case 22:
case 29:
{
label = 15;
break L3;
break;
}
case 5:
{
if ($$0107 | 0) {
$$0107$phi = $$0107;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$pn = $$0109;
$$0107 = $$0107$phi;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
if (($$0105 | 0) >= ($2 | 0)) {
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 1;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
HEAP32[$3 + ($$0105 << 4) >> 2] = $$0109;
HEAP8[$3 + ($$0105 << 4) + 12 >> 0] = 1;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 1;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
break;
}
case 6:
{
if ($$0107 | 0) {
$$0107$phi = $$0107;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$pn = $9;
$$0107 = $$0107$phi;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
if (($$0105 | 0) >= ($2 | 0)) {
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 1;
$$pn = $9;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
HEAP32[$3 + ($$0105 << 4) >> 2] = $$0109;
HEAP8[$3 + ($$0105 << 4) + 12 >> 0] = 1;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 1;
$$pn = $9;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
break;
}
case 12:
{
if (($$0107 | 0) != 2) {
if (($$0105 | 0) >= ($2 | 0)) {
$$0105$phi = $$0105;
$$0 = 12;
$$0107 = 2;
$$pn = $$0109;
$$0105 = $$0105$phi;
continue L1;
}
HEAP32[$3 + ($$0105 << 4) + 4 >> 2] = $$pn + 4;
$$0105$phi = $$0105;
$$0 = 12;
$$0107 = 2;
$$pn = $$0109;
$$0105 = $$0105$phi;
continue L1;
}
if (($$0 | 0) != 12) {
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 2;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
if (($$0105 | 0) < ($2 | 0)) HEAP32[$3 + ($$0105 << 4) + 8 >> 2] = $$0109;
$$0 = 12;
$$0105 = $$0105 + 1 | 0;
$$0107 = 0;
$$pn = $$0109;
continue L1;
break;
}
case 13:
{
if (($$0107 | 0) != 2) {
if (($$0105 | 0) >= ($2 | 0)) {
$$0105$phi = $$0105;
$$0 = 13;
$$0107 = 2;
$$pn = $$0109;
$$0105 = $$0105$phi;
continue L1;
}
HEAP32[$3 + ($$0105 << 4) + 4 >> 2] = $$pn + 4;
$$0105$phi = $$0105;
$$0 = 13;
$$0107 = 2;
$$pn = $$0109;
$$0105 = $$0105$phi;
continue L1;
}
if (($$0 | 0) != 13) {
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 2;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
if (($$0105 | 0) < ($2 | 0)) HEAP32[$3 + ($$0105 << 4) + 8 >> 2] = $$0109;
$$0 = 13;
$$0105 = $$0105 + 1 | 0;
$$0107 = 0;
$$pn = $$0109;
continue L1;
break;
}
case 3:
{
if (($$0105 | 0) >= ($2 | 0)) {
$$0107$phi = $$0107;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$pn = $$0109;
$$0107 = $$0107$phi;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
HEAP8[$3 + ($$0105 << 4) + 12 >> 0] = 0;
$$0107$phi = $$0107;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$pn = $$0109;
$$0107 = $$0107$phi;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
break;
}
case 21:
{
switch ($$0107 | 0) {
case 1:
{
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 0;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
break;
}
case 2:
break;
default:
{
$$0107$phi = $$0107;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$pn = $$0109;
$$0107 = $$0107$phi;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
}
if (($$0105 | 0) >= ($2 | 0)) {
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 2;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
$49 = $3 + ($$0105 << 4) + 12 | 0;
if (!(HEAP8[$49 >> 0] | 0)) {
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 2;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
do if ($10 << 24 >> 24 == 32 ? ($$0109 | 0) != (HEAP32[$3 + ($$0105 << 4) + 4 >> 2] | 0) : 0) {
$57 = HEAP8[$$pn + 4 >> 0] | 0;
$60 = HEAP8[$$pn + 5 >> 0] | 0;
if (!($57 << 24 >> 24)) {
if ($60 << 24 >> 24 == 32) break;
$67 = HEAPU8[$4 + ($60 & 255) >> 0] | 0;
} else if ($57 << 24 >> 24 == -1 & ($60 & 255) > 253) $67 = 0; else {
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 2;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
if (($67 | 0) != ($$0 | 0)) {
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 2;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
} while (0);
HEAP8[$49 >> 0] = 0;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 2;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
break;
}
case 10:
case 9:
{
switch ($$0107 | 0) {
case 1:
{
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 0;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
break;
}
case 2:
break;
default:
{
$$0107$phi = $$0107;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$pn = $$0109;
$$0107 = $$0107$phi;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
}
if (($$0105 | 0) >= ($2 | 0)) {
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 2;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
HEAP8[$3 + ($$0105 << 4) + 12 >> 0] = 0;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 2;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
break;
}
case 17:
case 11:
{
if (($$0107 | 0) == 2) {
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 2;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
} else break L1;
break;
}
default:
{
$$0107$phi = $$0107;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$pn = $$0109;
$$0107 = $$0107$phi;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
}
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 11;
break;
}
case -1:
{
if (!(($$0107 | 0) == 0 & (HEAPU8[$$pn + 3 >> 0] | 0) < 254)) {
$$0107$phi = $$0107;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$pn = $$0109;
$$0107 = $$0107$phi;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
break;
}
default:
label = 15;
} while (0);
if ((label | 0) == 11) {
label = 0;
if (!$$0107) if (($$0105 | 0) < ($2 | 0)) {
HEAP32[$3 + ($$0105 << 4) >> 2] = $$0109;
HEAP8[$3 + ($$0105 << 4) + 12 >> 0] = 1;
$$3 = 1;
} else $$3 = 1; else $$3 = $$0107;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = $$3;
$$pn = $$pn + 4 | 0;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue;
} else if ((label | 0) == 15) {
label = 0;
if ($$0107 | 0) {
$$0107$phi = $$0107;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$pn = $$0109;
$$0107 = $$0107$phi;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue;
}
}
if (($$0105 | 0) >= ($2 | 0)) {
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 1;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue;
}
HEAP32[$3 + ($$0105 << 4) >> 2] = $$0109;
HEAP8[$3 + ($$0105 << 4) + 12 >> 0] = 1;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 1;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
}
return $$0105 | 0;
}
function _little2_getAtts($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$0$phi = 0, $$0105 = 0, $$0105$phi = 0, $$0107 = 0, $$0107$phi = 0, $$0109 = 0, $$3 = 0, $$pn = 0, $4 = 0, $48 = 0, $5 = 0, $57 = 0, $59 = 0, $66 = 0, $9 = 0, label = 0;
$4 = $0 + 72 | 0;
$$0 = 0;
$$0105 = 0;
$$0107 = 1;
$$pn = $1;
L1 : while (1) {
$$0109 = $$pn + 2 | 0;
$5 = $$pn + 3 | 0;
L3 : do switch (HEAP8[$5 >> 0] | 0) {
case -33:
case -34:
case -35:
case -36:
{
$$0107$phi = $$0107;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$pn = $$0109;
$$0107 = $$0107$phi;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
break;
}
case 0:
{
$9 = HEAP8[$$0109 >> 0] | 0;
switch (HEAP8[$4 + ($9 & 255) >> 0] | 0) {
case 7:
{
label = 11;
break L3;
break;
}
case 24:
case 22:
case 29:
{
label = 15;
break L3;
break;
}
case 5:
{
if ($$0107 | 0) {
$$0107$phi = $$0107;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$pn = $$0109;
$$0107 = $$0107$phi;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
if (($$0105 | 0) >= ($2 | 0)) {
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 1;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
HEAP32[$3 + ($$0105 << 4) >> 2] = $$0109;
HEAP8[$3 + ($$0105 << 4) + 12 >> 0] = 1;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 1;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
break;
}
case 6:
{
if ($$0107 | 0) {
$$0107$phi = $$0107;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$pn = $5;
$$0107 = $$0107$phi;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
if (($$0105 | 0) >= ($2 | 0)) {
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 1;
$$pn = $5;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
HEAP32[$3 + ($$0105 << 4) >> 2] = $$0109;
HEAP8[$3 + ($$0105 << 4) + 12 >> 0] = 1;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 1;
$$pn = $5;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
break;
}
case 12:
{
if (($$0107 | 0) != 2) {
if (($$0105 | 0) >= ($2 | 0)) {
$$0105$phi = $$0105;
$$0 = 12;
$$0107 = 2;
$$pn = $$0109;
$$0105 = $$0105$phi;
continue L1;
}
HEAP32[$3 + ($$0105 << 4) + 4 >> 2] = $$pn + 4;
$$0105$phi = $$0105;
$$0 = 12;
$$0107 = 2;
$$pn = $$0109;
$$0105 = $$0105$phi;
continue L1;
}
if (($$0 | 0) != 12) {
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 2;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
if (($$0105 | 0) < ($2 | 0)) HEAP32[$3 + ($$0105 << 4) + 8 >> 2] = $$0109;
$$0 = 12;
$$0105 = $$0105 + 1 | 0;
$$0107 = 0;
$$pn = $$0109;
continue L1;
break;
}
case 13:
{
if (($$0107 | 0) != 2) {
if (($$0105 | 0) >= ($2 | 0)) {
$$0105$phi = $$0105;
$$0 = 13;
$$0107 = 2;
$$pn = $$0109;
$$0105 = $$0105$phi;
continue L1;
}
HEAP32[$3 + ($$0105 << 4) + 4 >> 2] = $$pn + 4;
$$0105$phi = $$0105;
$$0 = 13;
$$0107 = 2;
$$pn = $$0109;
$$0105 = $$0105$phi;
continue L1;
}
if (($$0 | 0) != 13) {
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 2;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
if (($$0105 | 0) < ($2 | 0)) HEAP32[$3 + ($$0105 << 4) + 8 >> 2] = $$0109;
$$0 = 13;
$$0105 = $$0105 + 1 | 0;
$$0107 = 0;
$$pn = $$0109;
continue L1;
break;
}
case 3:
{
if (($$0105 | 0) >= ($2 | 0)) {
$$0107$phi = $$0107;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$pn = $$0109;
$$0107 = $$0107$phi;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
HEAP8[$3 + ($$0105 << 4) + 12 >> 0] = 0;
$$0107$phi = $$0107;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$pn = $$0109;
$$0107 = $$0107$phi;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
break;
}
case 21:
{
switch ($$0107 | 0) {
case 1:
{
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 0;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
break;
}
case 2:
break;
default:
{
$$0107$phi = $$0107;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$pn = $$0109;
$$0107 = $$0107$phi;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
}
if (($$0105 | 0) >= ($2 | 0)) {
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 2;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
$48 = $3 + ($$0105 << 4) + 12 | 0;
if (!(HEAP8[$48 >> 0] | 0)) {
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 2;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
do if ($9 << 24 >> 24 == 32 ? ($$0109 | 0) != (HEAP32[$3 + ($$0105 << 4) + 4 >> 2] | 0) : 0) {
$57 = HEAP8[$$pn + 5 >> 0] | 0;
$59 = HEAP8[$$pn + 4 >> 0] | 0;
if (!($57 << 24 >> 24)) {
if ($59 << 24 >> 24 == 32) break;
$66 = HEAPU8[$4 + ($59 & 255) >> 0] | 0;
} else if ($57 << 24 >> 24 == -1 & ($59 & 255) > 253) $66 = 0; else {
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 2;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
if (($66 | 0) != ($$0 | 0)) {
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 2;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
} while (0);
HEAP8[$48 >> 0] = 0;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 2;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
break;
}
case 10:
case 9:
{
switch ($$0107 | 0) {
case 1:
{
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 0;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
break;
}
case 2:
break;
default:
{
$$0107$phi = $$0107;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$pn = $$0109;
$$0107 = $$0107$phi;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
}
if (($$0105 | 0) >= ($2 | 0)) {
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 2;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
HEAP8[$3 + ($$0105 << 4) + 12 >> 0] = 0;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 2;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
break;
}
case 17:
case 11:
{
if (($$0107 | 0) == 2) {
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 2;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
} else break L1;
break;
}
default:
{
$$0107$phi = $$0107;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$pn = $$0109;
$$0107 = $$0107$phi;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
}
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 11;
break;
}
case -1:
{
if (!(($$0107 | 0) == 0 & (HEAPU8[$$0109 >> 0] | 0) < 254)) {
$$0107$phi = $$0107;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$pn = $$0109;
$$0107 = $$0107$phi;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue L1;
}
break;
}
default:
label = 15;
} while (0);
if ((label | 0) == 11) {
label = 0;
if (!$$0107) if (($$0105 | 0) < ($2 | 0)) {
HEAP32[$3 + ($$0105 << 4) >> 2] = $$0109;
HEAP8[$3 + ($$0105 << 4) + 12 >> 0] = 1;
$$3 = 1;
} else $$3 = 1; else $$3 = $$0107;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = $$3;
$$pn = $$pn + 4 | 0;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue;
} else if ((label | 0) == 15) {
label = 0;
if ($$0107 | 0) {
$$0107$phi = $$0107;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$pn = $$0109;
$$0107 = $$0107$phi;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue;
}
}
if (($$0105 | 0) >= ($2 | 0)) {
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 1;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
continue;
}
HEAP32[$3 + ($$0105 << 4) >> 2] = $$0109;
HEAP8[$3 + ($$0105 << 4) + 12 >> 0] = 1;
$$0105$phi = $$0105;
$$0$phi = $$0;
$$0107 = 1;
$$pn = $$0109;
$$0105 = $$0105$phi;
$$0 = $$0$phi;
}
return $$0105 | 0;
}
function _big2_scanPi($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$0$i103 = 0, $$0$i99 = 0, $$0113$ph = 0, $$098 = 0, $$098154 = 0, $$098156 = 0, $$1$be = 0, $$1$i = 0, $$1$i104 = 0, $$1114$ph = 0, $$1146 = 0, $$2 = 0, $$pn155 = 0, $$pn155$phi = 0, $10 = 0, $100 = 0, $121 = 0, $149 = 0, $15 = 0, $21 = 0, $22 = 0, $43 = 0, $45 = 0, $47 = 0, $5 = 0, $56 = 0, $57 = 0, $7 = 0, $85 = 0, $98 = 0, label = 0;
if (($1 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
$5 = HEAP8[$1 >> 0] | 0;
L4 : do switch ($5 << 24 >> 24) {
case 0:
{
$10 = HEAP8[$1 + 1 >> 0] | 0;
switch (HEAP8[$0 + 72 + ($10 & 255) >> 0] | 0) {
case 29:
{
$22 = $10;
label = 8;
break L4;
break;
}
case 24:
case 22:
{
$85 = $10;
break L4;
break;
}
case 7:
{
label = 14;
break L4;
break;
}
case 5:
{
if (($2 - $1 | 0) < 2) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
case 6:
{
if (($2 - $1 | 0) < 3) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
default:
{
label = 16;
break L4;
}
}
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 14;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 16;
break;
}
case -1:
{
$7 = HEAP8[$1 + 1 >> 0] | 0;
if (($7 & 255) > 253) label = 16; else {
$22 = $7;
label = 8;
}
break;
}
default:
{
$22 = HEAP8[$1 + 1 >> 0] | 0;
label = 8;
}
} while (0);
if ((label | 0) == 8) {
$21 = $22 & 255;
if (!(1 << ($21 & 31) & HEAP32[3996 + (($21 >>> 5 | HEAPU8[59947 + ($5 & 255) >> 0] << 3) << 2) >> 2])) {
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
} else $85 = $22;
} else if ((label | 0) == 14) {
if (($2 - $1 | 0) < 4) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 16) {
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
$$098154 = $1 + 2 | 0;
if (($$098154 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
$15 = $0 + 72 | 0;
$$098156 = $$098154;
$$pn155 = $1;
L34 : while (1) {
$43 = HEAP8[$$098156 >> 0] | 0;
switch ($43 << 24 >> 24) {
case -37:
case -38:
case -39:
case -40:
{
label = 28;
break L34;
break;
}
case -33:
case -34:
case -35:
case -36:
{
$$2 = $$098156;
break L34;
break;
}
case 0:
{
$47 = HEAP8[$$pn155 + 3 >> 0] | 0;
switch (HEAP8[$15 + ($47 & 255) >> 0] | 0) {
case 7:
{
label = 28;
break L34;
break;
}
case 5:
{
label = 24;
break L34;
break;
}
case 6:
{
label = 26;
break L34;
break;
}
case 10:
case 9:
case 21:
{
label = 30;
break L34;
break;
}
case 15:
{
label = 58;
break L34;
break;
}
case 29:
{
$57 = $47;
label = 21;
break;
}
case 27:
case 26:
case 25:
case 24:
case 22:
break;
default:
{
$$2 = $$098156;
break L34;
}
}
break;
}
case -1:
{
$45 = HEAP8[$$pn155 + 3 >> 0] | 0;
if (($45 & 255) > 253) {
$$2 = $$098156;
break L34;
} else {
$57 = $45;
label = 21;
}
break;
}
default:
{
$57 = HEAP8[$$pn155 + 3 >> 0] | 0;
label = 21;
}
}
if ((label | 0) == 21) {
label = 0;
$56 = $57 & 255;
if (!(1 << ($56 & 31) & HEAP32[3996 + (($56 >>> 5 | HEAPU8[60203 + ($43 & 255) >> 0] << 3) << 2) >> 2])) {
label = 23;
break;
}
}
$$098 = $$098156 + 2 | 0;
if (($$098 | 0) == ($2 | 0)) {
$$0 = -1;
label = 73;
break;
} else {
$$pn155$phi = $$098156;
$$098156 = $$098;
$$pn155 = $$pn155$phi;
}
}
if ((label | 0) == 23) {
HEAP32[$3 >> 2] = $$098156;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 24) {
if (($2 - $$098156 | 0) < 2) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $$098156;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 26) {
if (($2 - $$098156 | 0) < 3) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $$098156;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 28) {
if (($2 - $$098156 | 0) < 4) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $$098156;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 30) {
L61 : do if (($$098156 - $1 | 0) == 6 & $5 << 24 >> 24 == 0) {
switch ($85 << 24 >> 24 | 0) {
case 120:
{
$$0$i103 = 0;
break;
}
case 88:
{
$$0$i103 = 1;
break;
}
default:
{
$$0113$ph = 11;
break L61;
}
}
if (!(HEAP8[$$098154 >> 0] | 0)) {
switch (HEAP8[$1 + 3 >> 0] | 0) {
case 109:
{
$$1$i104 = $$0$i103;
break;
}
case 77:
{
$$1$i104 = 1;
break;
}
default:
{
$$0113$ph = 11;
break L61;
}
}
if (!(HEAP8[$1 + 4 >> 0] | 0)) {
switch (HEAP8[$1 + 5 >> 0] | 0) {
case 108:
{
if (!$$1$i104) {
$$0113$ph = 12;
break L61;
}
break;
}
case 76:
break;
default:
{
$$0113$ph = 11;
break L61;
}
}
HEAP32[$3 >> 2] = $$098156;
$$0 = 0;
return $$0 | 0;
} else $$0113$ph = 11;
} else $$0113$ph = 11;
} else $$0113$ph = 11; while (0);
$98 = $$pn155 + 4 | 0;
if (($98 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
$100 = $2;
$$1146 = $98;
L79 : while (1) {
L81 : do switch (HEAP8[$$1146 >> 0] | 0) {
case -33:
case -34:
case -35:
case -36:
{
label = 51;
break L79;
break;
}
case 0:
{
switch (HEAP8[$15 + (HEAPU8[$$1146 + 1 >> 0] | 0) >> 0] | 0) {
case 8:
case 1:
case 0:
{
label = 51;
break L79;
break;
}
case 7:
{
label = 49;
break L81;
break;
}
case 5:
{
if (($100 - $$1146 | 0) < 2) {
$$0 = -2;
label = 73;
break L79;
}
$$1$be = $$1146 + 2 | 0;
break L81;
break;
}
case 6:
{
if (($100 - $$1146 | 0) < 3) {
$$0 = -2;
label = 73;
break L79;
}
$$1$be = $$1146 + 3 | 0;
break L81;
break;
}
case 15:
{
$121 = $$1146 + 2 | 0;
if (($121 | 0) == ($2 | 0)) {
$$0 = -1;
label = 73;
break L79;
}
if (HEAP8[$121 >> 0] | 0) {
$$1$be = $121;
break L81;
}
if ((HEAP8[$$1146 + 3 >> 0] | 0) == 62) {
label = 56;
break L79;
} else {
$$1$be = $121;
break L81;
}
break;
}
default:
{
label = 57;
break L81;
}
}
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 49;
break;
}
case -1:
{
if ((HEAPU8[$$1146 + 1 >> 0] | 0) > 253) {
label = 51;
break L79;
} else label = 57;
break;
}
default:
label = 57;
} while (0);
if ((label | 0) == 49) {
label = 0;
if (($100 - $$1146 | 0) < 4) {
$$0 = -2;
label = 73;
break;
}
$$1$be = $$1146 + 4 | 0;
} else if ((label | 0) == 57) {
label = 0;
$$1$be = $$1146 + 2 | 0;
}
if (($$1$be | 0) == ($2 | 0)) {
$$0 = -1;
label = 73;
break;
} else $$1146 = $$1$be;
}
if ((label | 0) == 51) {
HEAP32[$3 >> 2] = $$1146;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 56) {
HEAP32[$3 >> 2] = $$1146 + 4;
$$0 = $$0113$ph;
return $$0 | 0;
} else if ((label | 0) == 73) return $$0 | 0;
} else if ((label | 0) == 58) {
L108 : do if (($$098156 - $1 | 0) == 6 & $5 << 24 >> 24 == 0) {
switch ($85 << 24 >> 24 | 0) {
case 120:
{
$$0$i99 = 0;
break;
}
case 88:
{
$$0$i99 = 1;
break;
}
default:
{
$$1114$ph = 11;
break L108;
}
}
if (!(HEAP8[$$098154 >> 0] | 0)) {
switch (HEAP8[$1 + 3 >> 0] | 0) {
case 109:
{
$$1$i = $$0$i99;
break;
}
case 77:
{
$$1$i = 1;
break;
}
default:
{
$$1114$ph = 11;
break L108;
}
}
if (!(HEAP8[$1 + 4 >> 0] | 0)) {
switch (HEAP8[$1 + 5 >> 0] | 0) {
case 108:
{
if (!$$1$i) {
$$1114$ph = 12;
break L108;
}
break;
}
case 76:
break;
default:
{
$$1114$ph = 11;
break L108;
}
}
HEAP32[$3 >> 2] = $$098156;
$$0 = 0;
return $$0 | 0;
} else $$1114$ph = 11;
} else $$1114$ph = 11;
} else $$1114$ph = 11; while (0);
$149 = $$pn155 + 4 | 0;
if (($149 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
if (!(HEAP8[$149 >> 0] | 0)) if ((HEAP8[$$pn155 + 5 >> 0] | 0) == 62) {
HEAP32[$3 >> 2] = $$pn155 + 6;
$$0 = $$1114$ph;
return $$0 | 0;
} else $$2 = $149; else $$2 = $149;
} else if ((label | 0) == 73) return $$0 | 0;
HEAP32[$3 >> 2] = $$2;
$$0 = 0;
return $$0 | 0;
}
function _little2_scanPi($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$0$i103 = 0, $$0$i99 = 0, $$0113$ph = 0, $$098 = 0, $$098154 = 0, $$098156 = 0, $$1$be = 0, $$1$i = 0, $$1$i104 = 0, $$1114$ph = 0, $$1146 = 0, $$2 = 0, $$pn155 = 0, $$pn155$phi = 0, $118 = 0, $14 = 0, $146 = 0, $20 = 0, $21 = 0, $43 = 0, $44 = 0, $45 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $83 = 0, $9 = 0, $96 = 0, $98 = 0, label = 0;
if (($1 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
$6 = HEAP8[$1 + 1 >> 0] | 0;
L4 : do switch ($6 << 24 >> 24) {
case 0:
{
$9 = HEAP8[$1 >> 0] | 0;
switch (HEAP8[$0 + 72 + ($9 & 255) >> 0] | 0) {
case 29:
{
$21 = $9;
label = 8;
break L4;
break;
}
case 24:
case 22:
{
$83 = $9;
break L4;
break;
}
case 7:
{
label = 14;
break L4;
break;
}
case 5:
{
if (($2 - $1 | 0) < 2) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
case 6:
{
if (($2 - $1 | 0) < 3) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
default:
{
label = 16;
break L4;
}
}
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 14;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 16;
break;
}
case -1:
{
$7 = HEAP8[$1 >> 0] | 0;
if (($7 & 255) > 253) label = 16; else {
$21 = $7;
label = 8;
}
break;
}
default:
{
$21 = HEAP8[$1 >> 0] | 0;
label = 8;
}
} while (0);
if ((label | 0) == 8) {
$20 = $21 & 255;
if (!(1 << ($20 & 31) & HEAP32[3996 + (($20 >>> 5 | HEAPU8[59947 + ($6 & 255) >> 0] << 3) << 2) >> 2])) {
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
} else $83 = $21;
} else if ((label | 0) == 14) {
if (($2 - $1 | 0) < 4) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 16) {
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
$$098154 = $1 + 2 | 0;
if (($$098154 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
$14 = $0 + 72 | 0;
$$098156 = $$098154;
$$pn155 = $1;
L34 : while (1) {
$43 = HEAP8[$$pn155 + 3 >> 0] | 0;
switch ($43 << 24 >> 24) {
case -37:
case -38:
case -39:
case -40:
{
label = 28;
break L34;
break;
}
case -33:
case -34:
case -35:
case -36:
{
$$2 = $$098156;
break L34;
break;
}
case 0:
{
$45 = HEAP8[$$098156 >> 0] | 0;
switch (HEAP8[$14 + ($45 & 255) >> 0] | 0) {
case 7:
{
label = 28;
break L34;
break;
}
case 5:
{
label = 24;
break L34;
break;
}
case 6:
{
label = 26;
break L34;
break;
}
case 10:
case 9:
case 21:
{
label = 30;
break L34;
break;
}
case 15:
{
label = 58;
break L34;
break;
}
case 29:
{
$55 = $45;
label = 21;
break;
}
case 27:
case 26:
case 25:
case 24:
case 22:
break;
default:
{
$$2 = $$098156;
break L34;
}
}
break;
}
case -1:
{
$44 = HEAP8[$$098156 >> 0] | 0;
if (($44 & 255) > 253) {
$$2 = $$098156;
break L34;
} else {
$55 = $44;
label = 21;
}
break;
}
default:
{
$55 = HEAP8[$$098156 >> 0] | 0;
label = 21;
}
}
if ((label | 0) == 21) {
label = 0;
$54 = $55 & 255;
if (!(1 << ($54 & 31) & HEAP32[3996 + (($54 >>> 5 | HEAPU8[60203 + ($43 & 255) >> 0] << 3) << 2) >> 2])) {
label = 23;
break;
}
}
$$098 = $$098156 + 2 | 0;
if (($$098 | 0) == ($2 | 0)) {
$$0 = -1;
label = 73;
break;
} else {
$$pn155$phi = $$098156;
$$098156 = $$098;
$$pn155 = $$pn155$phi;
}
}
if ((label | 0) == 23) {
HEAP32[$3 >> 2] = $$098156;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 24) {
if (($2 - $$098156 | 0) < 2) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $$098156;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 26) {
if (($2 - $$098156 | 0) < 3) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $$098156;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 28) {
if (($2 - $$098156 | 0) < 4) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $$098156;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 30) {
L61 : do if (($$098156 - $1 | 0) == 6 & $6 << 24 >> 24 == 0) {
switch ($83 << 24 >> 24 | 0) {
case 120:
{
$$0$i103 = 0;
break;
}
case 88:
{
$$0$i103 = 1;
break;
}
default:
{
$$0113$ph = 11;
break L61;
}
}
if (!(HEAP8[$1 + 3 >> 0] | 0)) {
switch (HEAP8[$$098154 >> 0] | 0) {
case 109:
{
$$1$i104 = $$0$i103;
break;
}
case 77:
{
$$1$i104 = 1;
break;
}
default:
{
$$0113$ph = 11;
break L61;
}
}
if (!(HEAP8[$1 + 5 >> 0] | 0)) {
switch (HEAP8[$1 + 4 >> 0] | 0) {
case 108:
{
if (!$$1$i104) {
$$0113$ph = 12;
break L61;
}
break;
}
case 76:
break;
default:
{
$$0113$ph = 11;
break L61;
}
}
HEAP32[$3 >> 2] = $$098156;
$$0 = 0;
return $$0 | 0;
} else $$0113$ph = 11;
} else $$0113$ph = 11;
} else $$0113$ph = 11; while (0);
$96 = $$pn155 + 4 | 0;
if (($96 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
$98 = $2;
$$1146 = $96;
L79 : while (1) {
L81 : do switch (HEAP8[$$1146 + 1 >> 0] | 0) {
case -33:
case -34:
case -35:
case -36:
{
label = 51;
break L79;
break;
}
case 0:
{
switch (HEAP8[$14 + (HEAPU8[$$1146 >> 0] | 0) >> 0] | 0) {
case 8:
case 1:
case 0:
{
label = 51;
break L79;
break;
}
case 7:
{
label = 49;
break L81;
break;
}
case 5:
{
if (($98 - $$1146 | 0) < 2) {
$$0 = -2;
label = 73;
break L79;
}
$$1$be = $$1146 + 2 | 0;
break L81;
break;
}
case 6:
{
if (($98 - $$1146 | 0) < 3) {
$$0 = -2;
label = 73;
break L79;
}
$$1$be = $$1146 + 3 | 0;
break L81;
break;
}
case 15:
{
$118 = $$1146 + 2 | 0;
if (($118 | 0) == ($2 | 0)) {
$$0 = -1;
label = 73;
break L79;
}
if (HEAP8[$$1146 + 3 >> 0] | 0) {
$$1$be = $118;
break L81;
}
if ((HEAP8[$118 >> 0] | 0) == 62) {
label = 56;
break L79;
} else {
$$1$be = $118;
break L81;
}
break;
}
default:
{
label = 57;
break L81;
}
}
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 49;
break;
}
case -1:
{
if ((HEAPU8[$$1146 >> 0] | 0) > 253) {
label = 51;
break L79;
} else label = 57;
break;
}
default:
label = 57;
} while (0);
if ((label | 0) == 49) {
label = 0;
if (($98 - $$1146 | 0) < 4) {
$$0 = -2;
label = 73;
break;
}
$$1$be = $$1146 + 4 | 0;
} else if ((label | 0) == 57) {
label = 0;
$$1$be = $$1146 + 2 | 0;
}
if (($$1$be | 0) == ($2 | 0)) {
$$0 = -1;
label = 73;
break;
} else $$1146 = $$1$be;
}
if ((label | 0) == 51) {
HEAP32[$3 >> 2] = $$1146;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 56) {
HEAP32[$3 >> 2] = $$1146 + 4;
$$0 = $$0113$ph;
return $$0 | 0;
} else if ((label | 0) == 73) return $$0 | 0;
} else if ((label | 0) == 58) {
L108 : do if (($$098156 - $1 | 0) == 6 & $6 << 24 >> 24 == 0) {
switch ($83 << 24 >> 24 | 0) {
case 120:
{
$$0$i99 = 0;
break;
}
case 88:
{
$$0$i99 = 1;
break;
}
default:
{
$$1114$ph = 11;
break L108;
}
}
if (!(HEAP8[$1 + 3 >> 0] | 0)) {
switch (HEAP8[$$098154 >> 0] | 0) {
case 109:
{
$$1$i = $$0$i99;
break;
}
case 77:
{
$$1$i = 1;
break;
}
default:
{
$$1114$ph = 11;
break L108;
}
}
if (!(HEAP8[$1 + 5 >> 0] | 0)) {
switch (HEAP8[$1 + 4 >> 0] | 0) {
case 108:
{
if (!$$1$i) {
$$1114$ph = 12;
break L108;
}
break;
}
case 76:
break;
default:
{
$$1114$ph = 11;
break L108;
}
}
HEAP32[$3 >> 2] = $$098156;
$$0 = 0;
return $$0 | 0;
} else $$1114$ph = 11;
} else $$1114$ph = 11;
} else $$1114$ph = 11; while (0);
$146 = $$pn155 + 4 | 0;
if (($146 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
if (!(HEAP8[$$pn155 + 5 >> 0] | 0)) if ((HEAP8[$146 >> 0] | 0) == 62) {
HEAP32[$3 >> 2] = $$pn155 + 6;
$$0 = $$1114$ph;
return $$0 | 0;
} else $$2 = $146; else $$2 = $146;
} else if ((label | 0) == 73) return $$0 | 0;
HEAP32[$3 >> 2] = $$2;
$$0 = 0;
return $$0 | 0;
}
function _hexfloat($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0133 = 0, $$0142 = 0, $$0146 = 0, $$0148 = 0, $$0151 = 0.0, $$0152 = 0.0, $$0155 = 0.0, $$0159 = 0, $$0165 = 0.0, $$0166 = 0, $$0166169 = 0, $$0166170 = 0, $$1$ph = 0, $$1147 = 0, $$1149 = 0, $$1153 = 0.0, $$1156 = 0.0, $$1160 = 0, $$2 = 0, $$2$lcssa = 0, $$2144 = 0, $$2150 = 0, $$2154 = 0.0, $$2157 = 0.0, $$2161 = 0, $$3145 = 0, $$3158$lcssa = 0.0, $$3158179 = 0.0, $$3162$lcssa = 0, $$3162183 = 0, $$4 = 0.0, $$4163$lcssa = 0, $$4163178 = 0, $$5164 = 0, $$pre = 0, $$pre$phi201Z2D = 0.0, $104 = 0, $105 = 0, $106 = 0, $116 = 0, $117 = 0, $130 = 0, $132 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $141 = 0, $143 = 0, $149 = 0, $153 = 0, $155 = 0, $162 = 0, $166 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $176 = 0, $179 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $193 = 0.0, $194 = 0, $207 = 0.0, $209 = 0, $21 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $29 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $46 = 0, $5 = 0, $51 = 0, $53 = 0, $6 = 0, $65 = 0.0, $7 = 0, $72 = 0, $74 = 0, $83 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $or$cond = 0, $or$cond168 = 0, label = 0, $105$looptemp = 0;
$5 = $0 + 4 | 0;
$6 = HEAP32[$5 >> 2] | 0;
$7 = $0 + 100 | 0;
if ($6 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
HEAP32[$5 >> 2] = $6 + 1;
$$0 = HEAPU8[$6 >> 0] | 0;
$$0142 = 0;
} else {
$$0 = ___shgetc($0) | 0;
$$0142 = 0;
}
L4 : while (1) {
switch ($$0 | 0) {
case 46:
{
label = 8;
break L4;
break;
}
case 48:
break;
default:
{
$$0146 = 0;
$$0148 = 0;
$$0152 = 1.0;
$$0155 = 0.0;
$$0159 = 0;
$$2 = $$0;
$$2144 = $$0142;
$51 = 0;
$53 = 0;
$96 = 0;
$98 = 0;
break L4;
}
}
$14 = HEAP32[$5 >> 2] | 0;
if ($14 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
HEAP32[$5 >> 2] = $14 + 1;
$$0 = HEAPU8[$14 >> 0] | 0;
$$0142 = 1;
continue;
} else {
$$0 = ___shgetc($0) | 0;
$$0142 = 1;
continue;
}
}
if ((label | 0) == 8) {
$21 = HEAP32[$5 >> 2] | 0;
if ($21 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
HEAP32[$5 >> 2] = $21 + 1;
$$1$ph = HEAPU8[$21 >> 0] | 0;
} else $$1$ph = ___shgetc($0) | 0;
if (($$1$ph | 0) == 48) {
$36 = 0;
$37 = 0;
while (1) {
$29 = HEAP32[$5 >> 2] | 0;
if ($29 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
HEAP32[$5 >> 2] = $29 + 1;
$41 = HEAPU8[$29 >> 0] | 0;
} else $41 = ___shgetc($0) | 0;
$38 = _i64Add($36 | 0, $37 | 0, -1, -1) | 0;
$39 = tempRet0;
if (($41 | 0) == 48) {
$36 = $38;
$37 = $39;
} else {
$$0146 = 1;
$$0148 = 0;
$$0152 = 1.0;
$$0155 = 0.0;
$$0159 = 0;
$$2 = $41;
$$2144 = 1;
$51 = 0;
$53 = 0;
$96 = $38;
$98 = $39;
break;
}
}
} else {
$$0146 = 1;
$$0148 = 0;
$$0152 = 1.0;
$$0155 = 0.0;
$$0159 = 0;
$$2 = $$1$ph;
$$2144 = $$0142;
$51 = 0;
$53 = 0;
$96 = 0;
$98 = 0;
}
}
while (1) {
$42 = $$2 + -48 | 0;
$$pre = $$2 | 32;
if ($42 >>> 0 < 10) label = 20; else {
$46 = ($$2 | 0) == 46;
if (!($46 | ($$pre + -97 | 0) >>> 0 < 6)) {
$$2$lcssa = $$2;
break;
}
if ($46) if (!$$0146) {
$$1147 = 1;
$$2150 = $$0148;
$$2154 = $$0152;
$$2157 = $$0155;
$$2161 = $$0159;
$$3145 = $$2144;
$211 = $53;
$212 = $51;
$213 = $53;
$214 = $51;
} else {
$$2$lcssa = 46;
break;
} else label = 20;
}
if ((label | 0) == 20) {
label = 0;
$$0133 = ($$2 | 0) > 57 ? $$pre + -87 | 0 : $42;
do if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 8) {
$$1149 = $$0148;
$$1153 = $$0152;
$$1156 = $$0155;
$$1160 = $$0133 + ($$0159 << 4) | 0;
} else if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 14) {
$65 = $$0152 * .0625;
$$1149 = $$0148;
$$1153 = $65;
$$1156 = $$0155 + $65 * +($$0133 | 0);
$$1160 = $$0159;
break;
} else {
$or$cond = ($$0148 | 0) != 0 | ($$0133 | 0) == 0;
$$1149 = $or$cond ? $$0148 : 1;
$$1153 = $$0152;
$$1156 = $or$cond ? $$0155 : $$0155 + $$0152 * .5;
$$1160 = $$0159;
break;
} while (0);
$72 = _i64Add($53 | 0, $51 | 0, 1, 0) | 0;
$$1147 = $$0146;
$$2150 = $$1149;
$$2154 = $$1153;
$$2157 = $$1156;
$$2161 = $$1160;
$$3145 = 1;
$211 = $96;
$212 = $98;
$213 = $72;
$214 = tempRet0;
}
$74 = HEAP32[$5 >> 2] | 0;
if ($74 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
HEAP32[$5 >> 2] = $74 + 1;
$$0146 = $$1147;
$$0148 = $$2150;
$$0152 = $$2154;
$$0155 = $$2157;
$$0159 = $$2161;
$$2 = HEAPU8[$74 >> 0] | 0;
$$2144 = $$3145;
$51 = $214;
$53 = $213;
$96 = $211;
$98 = $212;
continue;
} else {
$$0146 = $$1147;
$$0148 = $$2150;
$$0152 = $$2154;
$$0155 = $$2157;
$$0159 = $$2161;
$$2 = ___shgetc($0) | 0;
$$2144 = $$3145;
$51 = $214;
$53 = $213;
$96 = $211;
$98 = $212;
continue;
}
}
do if (!$$2144) {
$83 = (HEAP32[$7 >> 2] | 0) == 0;
if (!$83) HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
if (!$4) ___shlim($0, 0); else {
if (!$83) HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
if (!(($$0146 | 0) == 0 | $83)) HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
}
$$0165 = +($3 | 0) * 0.0;
} else {
$94 = ($$0146 | 0) == 0;
$95 = $94 ? $53 : $96;
$97 = $94 ? $51 : $98;
if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 8) {
$$3162183 = $$0159;
$105 = $53;
$106 = $51;
while (1) {
$104 = $$3162183 << 4;
$105$looptemp = $105;
$105 = _i64Add($105 | 0, $106 | 0, 1, 0) | 0;
if (!(($106 | 0) < 0 | ($106 | 0) == 0 & $105$looptemp >>> 0 < 7)) {
$$3162$lcssa = $104;
break;
} else {
$$3162183 = $104;
$106 = tempRet0;
}
}
} else $$3162$lcssa = $$0159;
if (($$2$lcssa | 32 | 0) == 112) {
$116 = _scanexp($0, $4) | 0;
$117 = tempRet0;
if (($116 | 0) == 0 & ($117 | 0) == -2147483648) {
if (!$4) {
___shlim($0, 0);
$$0165 = 0.0;
break;
}
if (!(HEAP32[$7 >> 2] | 0)) {
$134 = 0;
$135 = 0;
} else {
HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
$134 = 0;
$135 = 0;
}
} else {
$134 = $116;
$135 = $117;
}
} else if (!(HEAP32[$7 >> 2] | 0)) {
$134 = 0;
$135 = 0;
} else {
HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
$134 = 0;
$135 = 0;
}
$130 = _bitshift64Shl($95 | 0, $97 | 0, 2) | 0;
$132 = _i64Add($130 | 0, tempRet0 | 0, -32, -1) | 0;
$136 = _i64Add($132 | 0, tempRet0 | 0, $134 | 0, $135 | 0) | 0;
$137 = tempRet0;
if (!$$3162$lcssa) {
$$0165 = +($3 | 0) * 0.0;
break;
}
$141 = 0 - $2 | 0;
$143 = (($141 | 0) < 0) << 31 >> 31;
if (($137 | 0) > ($143 | 0) | ($137 | 0) == ($143 | 0) & $136 >>> 0 > $141 >>> 0) {
$149 = ___errno_location() | 0;
HEAP32[$149 >> 2] = 34;
$$0165 = +($3 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
break;
}
$153 = $2 + -106 | 0;
$155 = (($153 | 0) < 0) << 31 >> 31;
if (($137 | 0) < ($155 | 0) | ($137 | 0) == ($155 | 0) & $136 >>> 0 < $153 >>> 0) {
$162 = ___errno_location() | 0;
HEAP32[$162 >> 2] = 34;
$$0165 = +($3 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
break;
}
if (($$3162$lcssa | 0) > -1) {
$$3158179 = $$0155;
$$4163178 = $$3162$lcssa;
$170 = $136;
$171 = $137;
while (1) {
$166 = !($$3158179 >= .5);
$$5164 = $$4163178 << 1 | ($166 ^ 1) & 1;
$$4 = $$3158179 + ($166 ? $$3158179 : $$3158179 + -1.0);
$172 = _i64Add($170 | 0, $171 | 0, -1, -1) | 0;
$173 = tempRet0;
if (($$5164 | 0) > -1) {
$$3158179 = $$4;
$$4163178 = $$5164;
$170 = $172;
$171 = $173;
} else {
$$3158$lcssa = $$4;
$$4163$lcssa = $$5164;
$181 = $172;
$182 = $173;
break;
}
}
} else {
$$3158$lcssa = $$0155;
$$4163$lcssa = $$3162$lcssa;
$181 = $136;
$182 = $137;
}
$176 = (($1 | 0) < 0) << 31 >> 31;
$179 = _i64Subtract(32, 0, $2 | 0, (($2 | 0) < 0) << 31 >> 31 | 0) | 0;
$183 = _i64Add($179 | 0, tempRet0 | 0, $181 | 0, $182 | 0) | 0;
$184 = tempRet0;
if (($184 | 0) < ($176 | 0) | ($184 | 0) == ($176 | 0) & $183 >>> 0 < $1 >>> 0) if (($183 | 0) > 0) {
$$0166 = $183;
label = 59;
} else {
$$0166170 = 0;
$194 = 84;
label = 61;
} else {
$$0166 = $1;
label = 59;
}
if ((label | 0) == 59) if (($$0166 | 0) < 53) {
$$0166170 = $$0166;
$194 = 84 - $$0166 | 0;
label = 61;
} else {
$$0151 = 0.0;
$$0166169 = $$0166;
$$pre$phi201Z2D = +($3 | 0);
}
if ((label | 0) == 61) {
$193 = +($3 | 0);
$$0151 = +_copysignl(+_scalbn(1.0, $194), $193);
$$0166169 = $$0166170;
$$pre$phi201Z2D = $193;
}
$or$cond168 = ($$4163$lcssa & 1 | 0) == 0 & ($$3158$lcssa != 0.0 & ($$0166169 | 0) < 32);
$207 = ($or$cond168 ? 0.0 : $$3158$lcssa) * $$pre$phi201Z2D + ($$0151 + $$pre$phi201Z2D * +(($$4163$lcssa + ($or$cond168 & 1) | 0) >>> 0)) - $$0151;
if (!($207 != 0.0)) {
$209 = ___errno_location() | 0;
HEAP32[$209 >> 2] = 34;
}
$$0165 = +_scalbnl($207, $181);
} while (0);
return +$$0165;
}
function _processXmlDecl($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$018$i = 0, $$018$i77 = 0, $$056 = 0, $$058 = 0, $$1 = 0, $$157 = 0, $$159 = 0, $$2 = 0, $$in$i = 0, $$in$i$phi = 0, $$in$i76 = 0, $$in$i76$phi = 0, $$pre$phi$i79Z2D = 0, $$pre$phi$iZ2D = 0, $10 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $115 = 0, $119 = 0, $13 = 0, $130 = 0, $139 = 0, $142 = 0, $143 = 0, $147 = 0, $148 = 0, $153 = 0, $154 = 0, $16 = 0, $161 = 0, $164 = 0, $170 = 0, $171 = 0, $173 = 0, $174 = 0, $175 = 0, $178 = 0, $179 = 0, $182 = 0, $191 = 0, $192 = 0, $193 = 0, $196 = 0, $199 = 0, $22 = 0, $25 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $38 = 0, $39 = 0, $4 = 0, $46 = 0, $49 = 0, $5 = 0, $55 = 0, $56 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $67 = 0, $68 = 0, $7 = 0, $73 = 0, $74 = 0, $8 = 0, $81 = 0, $84 = 0, $9 = 0, $90 = 0, $91 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$4 = sp + 24 | 0;
$5 = sp + 20 | 0;
$6 = sp + 16 | 0;
$7 = sp + 12 | 0;
$8 = sp + 8 | 0;
$9 = sp + 4 | 0;
$10 = sp;
HEAP32[$6 >> 2] = 0;
HEAP32[$7 >> 2] = 0;
HEAP32[$8 >> 2] = 0;
HEAP32[$10 >> 2] = -1;
$11 = $0 + 144 | 0;
$13 = $0 + 272 | 0;
$16 = ($1 | 0) != 0;
if (!(_XmlParseXmlDecl($1, HEAP32[$11 >> 2] | 0, $2, $3, $13, $8, $9, $6, $7, $10) | 0)) {
$$1 = $16 ? 31 : 30;
STACKTOP = sp;
return $$1 | 0;
}
if ((HEAP32[$10 >> 2] | 0) == 1 & ($16 ^ 1)) HEAP8[(HEAP32[$0 + 340 >> 2] | 0) + 130 >> 0] = 1;
$22 = $0 + 140 | 0;
if (!(HEAP32[$22 >> 2] | 0)) {
$97 = $0 + 80 | 0;
$98 = HEAP32[$97 >> 2] | 0;
if (!$98) {
$$157 = 0;
$$159 = 0;
} else {
$100 = HEAP32[$11 >> 2] | 0;
HEAP32[$4 >> 2] = $2;
if (!(HEAP8[$100 + 68 >> 0] | 0)) {
$104 = $0 + 276 | 0;
$105 = $0 + 44 | 0;
$106 = $100 + 56 | 0;
$107 = $0 + 48 | 0;
$108 = $0 + 4 | 0;
do {
HEAP32[$5 >> 2] = HEAP32[$105 >> 2];
FUNCTION_TABLE_viiiii[HEAP32[$106 >> 2] & 15]($100, $4, $3, $5, HEAP32[$107 >> 2] | 0);
HEAP32[$104 >> 2] = HEAP32[$4 >> 2];
$115 = HEAP32[$105 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[$97 >> 2] & 127](HEAP32[$108 >> 2] | 0, $115, (HEAP32[$5 >> 2] | 0) - $115 | 0);
$119 = HEAP32[$4 >> 2] | 0;
HEAP32[$13 >> 2] = $119;
} while (($119 | 0) != ($3 | 0));
} else FUNCTION_TABLE_viii[$98 & 127](HEAP32[$0 + 4 >> 2] | 0, $2, $3 - $2 | 0);
$$157 = 0;
$$159 = 0;
}
} else {
$25 = HEAP32[$6 >> 2] | 0;
L18 : do if (!$25) $$058 = 0; else {
$27 = $0 + 424 | 0;
$28 = HEAP32[$11 >> 2] | 0;
$32 = $25 + (FUNCTION_TABLE_iii[HEAP32[$28 + 28 >> 2] & 63]($28, $25) | 0) | 0;
HEAP32[$4 >> 2] = $25;
$33 = $0 + 436 | 0;
if (!(HEAP32[$33 >> 2] | 0)) {
if ((_poolGrow($27) | 0) << 24 >> 24) label = 9;
} else label = 9;
L22 : do if ((label | 0) == 9) {
$38 = $28 + 56 | 0;
$39 = $0 + 432 | 0;
while (1) {
FUNCTION_TABLE_viiiii[HEAP32[$38 >> 2] & 15]($28, $4, $32, $33, HEAP32[$39 >> 2] | 0);
if ((HEAP32[$4 >> 2] | 0) == ($32 | 0)) break;
if (!((_poolGrow($27) | 0) << 24 >> 24)) break L22;
}
$46 = $0 + 440 | 0;
if (!(HEAP32[$46 >> 2] | 0)) {
$$1 = 1;
STACKTOP = sp;
return $$1 | 0;
}
$49 = HEAP32[$33 >> 2] | 0;
do if (($49 | 0) == (HEAP32[$39 >> 2] | 0)) if (!((_poolGrow($27) | 0) << 24 >> 24)) {
$$1 = 1;
STACKTOP = sp;
return $$1 | 0;
} else {
$55 = HEAP32[$33 >> 2] | 0;
break;
} else $55 = $49; while (0);
HEAP32[$33 >> 2] = $55 + 1;
HEAP8[$55 >> 0] = 0;
$56 = HEAP32[$46 >> 2] | 0;
if (!$56) {
$$1 = 1;
STACKTOP = sp;
return $$1 | 0;
} else {
HEAP32[$46 >> 2] = HEAP32[$33 >> 2];
$$058 = $56;
break L18;
}
} while (0);
$$1 = 1;
STACKTOP = sp;
return $$1 | 0;
} while (0);
$59 = HEAP32[$8 >> 2] | 0;
L43 : do if (!$59) $$056 = 0; else {
$61 = $0 + 424 | 0;
$62 = HEAP32[$11 >> 2] | 0;
$67 = (HEAP32[$9 >> 2] | 0) + (0 - (HEAP32[$62 + 64 >> 2] | 0)) | 0;
HEAP32[$4 >> 2] = $59;
$68 = $0 + 436 | 0;
if (!(HEAP32[$68 >> 2] | 0)) {
if ((_poolGrow($61) | 0) << 24 >> 24) label = 22;
} else label = 22;
L47 : do if ((label | 0) == 22) {
$73 = $62 + 56 | 0;
$74 = $0 + 432 | 0;
while (1) {
FUNCTION_TABLE_viiiii[HEAP32[$73 >> 2] & 15]($62, $4, $67, $68, HEAP32[$74 >> 2] | 0);
if ((HEAP32[$4 >> 2] | 0) == ($67 | 0)) break;
if (!((_poolGrow($61) | 0) << 24 >> 24)) break L47;
}
$81 = $0 + 440 | 0;
if (!(HEAP32[$81 >> 2] | 0)) {
$$1 = 1;
STACKTOP = sp;
return $$1 | 0;
}
$84 = HEAP32[$68 >> 2] | 0;
do if (($84 | 0) == (HEAP32[$74 >> 2] | 0)) if (!((_poolGrow($61) | 0) << 24 >> 24)) {
$$1 = 1;
STACKTOP = sp;
return $$1 | 0;
} else {
$90 = HEAP32[$68 >> 2] | 0;
break;
} else $90 = $84; while (0);
HEAP32[$68 >> 2] = $90 + 1;
HEAP8[$90 >> 0] = 0;
$91 = HEAP32[$81 >> 2] | 0;
if (!$91) $$1 = 1; else {
$$056 = $91;
break L43;
}
STACKTOP = sp;
return $$1 | 0;
} while (0);
$$1 = 1;
STACKTOP = sp;
return $$1 | 0;
} while (0);
FUNCTION_TABLE_viiii[HEAP32[$22 >> 2] & 15](HEAP32[$0 + 4 >> 2] | 0, $$056, $$058, HEAP32[$10 >> 2] | 0);
$$157 = $$056;
$$159 = $$058;
}
do if (!(HEAP32[$0 + 228 >> 2] | 0)) {
$130 = HEAP32[$7 >> 2] | 0;
if ($130 | 0) {
if ((HEAP32[$130 + 64 >> 2] | 0) == (HEAP32[(HEAP32[$11 >> 2] | 0) + 64 >> 2] | 0)) {
HEAP32[$11 >> 2] = $130;
break;
}
HEAP32[$13 >> 2] = HEAP32[$6 >> 2];
$$1 = 19;
STACKTOP = sp;
return $$1 | 0;
}
$139 = HEAP32[$6 >> 2] | 0;
if ($139 | 0) {
$142 = $0 + 424 | 0;
L77 : do if (!$$159) {
$143 = HEAP32[$11 >> 2] | 0;
$147 = $139 + (FUNCTION_TABLE_iii[HEAP32[$143 + 28 >> 2] & 63]($143, $139) | 0) | 0;
HEAP32[$4 >> 2] = $139;
$148 = $0 + 436 | 0;
if (!(HEAP32[$148 >> 2] | 0)) {
if ((_poolGrow($142) | 0) << 24 >> 24) label = 47;
} else label = 47;
L81 : do if ((label | 0) == 47) {
$153 = $143 + 56 | 0;
$154 = $0 + 432 | 0;
while (1) {
FUNCTION_TABLE_viiiii[HEAP32[$153 >> 2] & 15]($143, $4, $147, $148, HEAP32[$154 >> 2] | 0);
if ((HEAP32[$4 >> 2] | 0) == ($147 | 0)) break;
if (!((_poolGrow($142) | 0) << 24 >> 24)) break L81;
}
$161 = $0 + 440 | 0;
if (!(HEAP32[$161 >> 2] | 0)) {
$$1 = 1;
STACKTOP = sp;
return $$1 | 0;
}
$164 = HEAP32[$148 >> 2] | 0;
do if (($164 | 0) == (HEAP32[$154 >> 2] | 0)) if (!((_poolGrow($142) | 0) << 24 >> 24)) {
$$1 = 1;
STACKTOP = sp;
return $$1 | 0;
} else {
$170 = HEAP32[$148 >> 2] | 0;
break;
} else $170 = $164; while (0);
HEAP32[$148 >> 2] = $170 + 1;
HEAP8[$170 >> 0] = 0;
$171 = HEAP32[$161 >> 2] | 0;
if (!$171) $$1 = 1; else {
$$2 = $171;
break L77;
}
STACKTOP = sp;
return $$1 | 0;
} while (0);
$$1 = 1;
STACKTOP = sp;
return $$1 | 0;
} else $$2 = $$159; while (0);
$173 = _handleUnknownEncoding($0, $$2) | 0;
$174 = $0 + 428 | 0;
$175 = HEAP32[$174 >> 2] | 0;
if (!$175) {
HEAP32[$174 >> 2] = HEAP32[$142 >> 2];
$$pre$phi$iZ2D = $0 + 424 | 0;
} else {
$178 = $0 + 424 | 0;
$179 = HEAP32[$178 >> 2] | 0;
if (!$179) $$pre$phi$iZ2D = $178; else {
$$018$i = $179;
$$in$i = $175;
while (1) {
$182 = HEAP32[$$018$i >> 2] | 0;
HEAP32[$$018$i >> 2] = $$in$i;
HEAP32[$174 >> 2] = $$018$i;
if (!$182) {
$$pre$phi$iZ2D = $178;
break;
} else {
$$in$i$phi = $$018$i;
$$018$i = $182;
$$in$i = $$in$i$phi;
}
}
}
}
HEAP32[$$pre$phi$iZ2D >> 2] = 0;
HEAP32[$0 + 440 >> 2] = 0;
HEAP32[$0 + 436 >> 2] = 0;
HEAP32[$0 + 432 >> 2] = 0;
if (($173 | 0) != 18) {
$$1 = $173;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$13 >> 2] = HEAP32[$6 >> 2];
$$1 = 18;
STACKTOP = sp;
return $$1 | 0;
}
} while (0);
if (!(($$159 | 0) != 0 | ($$157 | 0) != 0)) {
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
$191 = $0 + 424 | 0;
$192 = $0 + 428 | 0;
$193 = HEAP32[$192 >> 2] | 0;
if (!$193) {
HEAP32[$192 >> 2] = HEAP32[$191 >> 2];
$$pre$phi$i79Z2D = $191;
} else {
$196 = HEAP32[$191 >> 2] | 0;
if (!$196) $$pre$phi$i79Z2D = $191; else {
$$018$i77 = $196;
$$in$i76 = $193;
while (1) {
$199 = HEAP32[$$018$i77 >> 2] | 0;
HEAP32[$$018$i77 >> 2] = $$in$i76;
HEAP32[$192 >> 2] = $$018$i77;
if (!$199) {
$$pre$phi$i79Z2D = $191;
break;
} else {
$$in$i76$phi = $$018$i77;
$$018$i77 = $199;
$$in$i76 = $$in$i76$phi;
}
}
}
}
HEAP32[$$pre$phi$i79Z2D >> 2] = 0;
HEAP32[$0 + 440 >> 2] = 0;
HEAP32[$0 + 436 >> 2] = 0;
HEAP32[$0 + 432 >> 2] = 0;
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
function __ZN11OneHGesture17SetFromHandConfigEPK7HashAnyIPKcS2_E9Mirroring($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$012$i$i = 0, $$012$i$i43 = 0, $$012$i$i50 = 0, $$012$i$i59 = 0, $$012$i$i66 = 0, $$01215$i$i = 0, $$01215$i$i40 = 0, $$01215$i$i47 = 0, $$01215$i$i56 = 0, $$01215$i$i63 = 0, $$01216$i$i = 0, $$01216$i$i41 = 0, $$01216$i$i48 = 0, $$01216$i$i57 = 0, $$01216$i$i64 = 0, $$sink$i$i = 0, $$sink$i$i45 = 0, $$sink$i$i52 = 0, $$sink$i$i61 = 0, $$sink$i$i68 = 0, $$sroa$0$0$insert$ext = 0, $$sroa$084$0$insert$ext = 0, $10 = 0, $105 = 0, $107 = 0, $11 = 0, $111 = 0, $112 = 0, $12 = 0, $124 = 0, $126 = 0, $13 = 0, $132 = f0, $141 = 0, $15 = 0, $153 = 0, $155 = f0, $157 = 0, $16 = 0, $161 = 0, $162 = 0, $176 = 0.0, $185 = 0, $28 = 0, $3 = 0, $33 = 0, $34 = 0, $4 = 0, $46 = 0, $48 = 0, $5 = 0, $57 = f0, $6 = 0, $7 = 0, $72 = 0, $8 = 0, $87 = 0, $89 = f0, $9 = 0, $92 = 0, $93 = 0, $tmpcast36$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 112 | 0;
$tmpcast36$byval_copy = sp + 80 | 0;
$vararg_buffer = sp;
$3 = sp + 68 | 0;
$4 = sp + 98 | 0;
$5 = sp + 56 | 0;
$6 = sp + 96 | 0;
$7 = sp + 44 | 0;
$8 = sp + 32 | 0;
$9 = sp + 94 | 0;
$10 = sp + 92 | 0;
$11 = sp + 24 | 0;
$12 = sp + 16 | 0;
$13 = $1 + 4 | 0;
$15 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(53281, HEAP32[$13 >> 2] | 0) | 0;
$16 = HEAP32[$1 >> 2] | 0;
L1 : do if ((HEAP16[$16 + ($15 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i = HEAP32[$16 + ($15 << 3) >> 2] | 0;
if (!$$01215$i$i) label = 6; else {
$$01216$i$i = $$01215$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(53281, HEAP32[$$01216$i$i >> 2] | 0) | 0) break;
$$012$i$i = HEAP32[$$01216$i$i + 8 >> 2] | 0;
if (!$$012$i$i) {
label = 6;
break L1;
} else $$01216$i$i = $$012$i$i;
}
$$sink$i$i = $$01216$i$i + 4 | 0;
}
} else label = 6; while (0);
if ((label | 0) == 6) $$sink$i$i = $1 + 20 | 0;
$28 = HEAP32[$$sink$i$i >> 2] | 0;
if ($28 | 0) {
$$sroa$084$0$insert$ext = HEAP8[$2 >> 0] & 2;
HEAP16[$4 >> 1] = $$sroa$084$0$insert$ext;
HEAP8[$tmpcast36$byval_copy >> 0] = HEAP8[$4 >> 0] | 0;
HEAP8[$tmpcast36$byval_copy + 1 >> 0] = HEAP8[$4 + 1 >> 0] | 0;
__ZN10Direction3C2EPKc9Mirroring($3, $28, $tmpcast36$byval_copy);
$33 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(53290, HEAP32[$13 >> 2] | 0) | 0;
$34 = HEAP32[$1 >> 2] | 0;
L12 : do if ((HEAP16[$34 + ($33 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i40 = HEAP32[$34 + ($33 << 3) >> 2] | 0;
if (!$$01215$i$i40) label = 13; else {
$$01216$i$i41 = $$01215$i$i40;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(53290, HEAP32[$$01216$i$i41 >> 2] | 0) | 0) break;
$$012$i$i43 = HEAP32[$$01216$i$i41 + 8 >> 2] | 0;
if (!$$012$i$i43) {
label = 13;
break L12;
} else $$01216$i$i41 = $$012$i$i43;
}
$$sink$i$i45 = $$01216$i$i41 + 4 | 0;
}
} else label = 13; while (0);
if ((label | 0) == 13) $$sink$i$i45 = $1 + 20 | 0;
$46 = HEAP32[$$sink$i$i45 >> 2] | 0;
if (!$46) {
$48 = $0 + 20 | 0;
if (($48 | 0) != ($3 | 0)) {
HEAP32[$48 >> 2] = HEAP32[$3 >> 2];
HEAP32[$0 + 24 >> 2] = HEAP32[$3 + 4 >> 2];
HEAP32[$0 + 28 >> 2] = HEAP32[$3 + 8 >> 2];
}
} else {
HEAP16[$6 >> 1] = $$sroa$084$0$insert$ext;
HEAP8[$tmpcast36$byval_copy >> 0] = HEAP8[$6 >> 0] | 0;
HEAP8[$tmpcast36$byval_copy + 1 >> 0] = HEAP8[$6 + 1 >> 0] | 0;
__ZN10Direction3C2EPKc9Mirroring($5, $46, $tmpcast36$byval_copy);
$57 = Math_fround(__Z23HashAttribs_attrib_REALPK7HashAnyIPKcS1_ES1_f($1, 49218, Math_fround(.5)));
HEAP32[$7 >> 2] = HEAP32[$3 >> 2];
HEAP32[$7 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
HEAP32[$7 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
HEAP32[$8 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
HEAP32[$8 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
__ZN10Direction37BetweenES_S_f($tmpcast36$byval_copy, $7, $8, $57);
$72 = $0 + 20 | 0;
if (($72 | 0) != ($tmpcast36$byval_copy | 0)) {
HEAP32[$72 >> 2] = HEAP32[$tmpcast36$byval_copy >> 2];
HEAP32[$0 + 24 >> 2] = HEAP32[$tmpcast36$byval_copy + 4 >> 2];
HEAP32[$0 + 28 >> 2] = HEAP32[$tmpcast36$byval_copy + 8 >> 2];
}
}
if (!(HEAP8[(HEAP32[$0 + 72 >> 2] | 0) + 13 >> 0] & 64)) {
$87 = $0 + 20 | 0;
$89 = Math_fround(-Math_fround(HEAPF32[$87 >> 2]));
HEAPF32[$87 >> 2] = $89;
}
}
__Z10boolAttribPK7HashAnyIPKcS1_ES1_Rbb($1, 53244, $0 + 40 | 0, 0) | 0;
$92 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(53003, HEAP32[$13 >> 2] | 0) | 0;
$93 = HEAP32[$1 >> 2] | 0;
L33 : do if ((HEAP16[$93 + ($92 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i63 = HEAP32[$93 + ($92 << 3) >> 2] | 0;
if (!$$01215$i$i63) label = 28; else {
$$01216$i$i64 = $$01215$i$i63;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(53003, HEAP32[$$01216$i$i64 >> 2] | 0) | 0) break;
$$012$i$i66 = HEAP32[$$01216$i$i64 + 8 >> 2] | 0;
if (!$$012$i$i66) {
label = 28;
break L33;
} else $$01216$i$i64 = $$012$i$i66;
}
$$sink$i$i68 = $$01216$i$i64 + 4 | 0;
}
} else label = 28; while (0);
if ((label | 0) == 28) $$sink$i$i68 = $1 + 20 | 0;
$105 = HEAP32[$$sink$i$i68 >> 2] | 0;
if ($105 | 0) {
$107 = HEAP8[$2 >> 0] | 0;
$$sroa$0$0$insert$ext = ($107 & 1) == 0 ? $107 & 2 : 2;
HEAP16[$9 >> 1] = $$sroa$0$0$insert$ext;
HEAP8[$tmpcast36$byval_copy >> 0] = HEAP8[$9 >> 0] | 0;
HEAP8[$tmpcast36$byval_copy + 1 >> 0] = HEAP8[$9 + 1 >> 0] | 0;
__ZN10Direction2C2EPKc9Mirroring($3, $105, $tmpcast36$byval_copy);
$111 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(53010, HEAP32[$13 >> 2] | 0) | 0;
$112 = HEAP32[$1 >> 2] | 0;
L44 : do if ((HEAP16[$112 + ($111 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i56 = HEAP32[$112 + ($111 << 3) >> 2] | 0;
if (!$$01215$i$i56) label = 35; else {
$$01216$i$i57 = $$01215$i$i56;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(53010, HEAP32[$$01216$i$i57 >> 2] | 0) | 0) break;
$$012$i$i59 = HEAP32[$$01216$i$i57 + 8 >> 2] | 0;
if (!$$012$i$i59) {
label = 35;
break L44;
} else $$01216$i$i57 = $$012$i$i59;
}
$$sink$i$i61 = $$01216$i$i57 + 4 | 0;
}
} else label = 35; while (0);
if ((label | 0) == 35) $$sink$i$i61 = $1 + 20 | 0;
$124 = HEAP32[$$sink$i$i61 >> 2] | 0;
if (!$124) {
$126 = $0 + 32 | 0;
if (($126 | 0) != ($3 | 0)) {
HEAP32[$126 >> 2] = HEAP32[$3 >> 2];
HEAP32[$0 + 36 >> 2] = HEAP32[$3 + 4 >> 2];
}
} else {
HEAP16[$10 >> 1] = $$sroa$0$0$insert$ext;
HEAP8[$tmpcast36$byval_copy >> 0] = HEAP8[$10 >> 0] | 0;
HEAP8[$tmpcast36$byval_copy + 1 >> 0] = HEAP8[$10 + 1 >> 0] | 0;
__ZN10Direction2C2EPKc9Mirroring($5, $124, $tmpcast36$byval_copy);
$132 = Math_fround(__Z23HashAttribs_attrib_REALPK7HashAnyIPKcS1_ES1_f($1, 49233, Math_fround(.5)));
HEAP32[$11 >> 2] = HEAP32[$3 >> 2];
HEAP32[$11 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
HEAP32[$12 >> 2] = HEAP32[$5 >> 2];
HEAP32[$12 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
__ZN10Direction27BetweenES_S_f($tmpcast36$byval_copy, $11, $12, $132);
$141 = $0 + 32 | 0;
if (($141 | 0) != ($tmpcast36$byval_copy | 0)) {
HEAP32[$141 >> 2] = HEAP32[$tmpcast36$byval_copy >> 2];
HEAP32[$0 + 36 >> 2] = HEAP32[$tmpcast36$byval_copy + 4 >> 2];
}
}
if (!(HEAP8[(HEAP32[$0 + 72 >> 2] | 0) + 13 >> 0] & 64)) {
$153 = $0 + 32 | 0;
$155 = Math_fround(-Math_fround(HEAPF32[$153 >> 2]));
HEAPF32[$153 >> 2] = $155;
}
}
__Z10boolAttribPK7HashAnyIPKcS1_ES1_Rb($1, 53111, $0 + 41 | 0) | 0;
$157 = $0 + 44 | 0;
__Z10realAttribPK7HashAnyIPKcS1_ES1_Rf($1, 49246, $157) | 0;
__Z10realAttribPK7HashAnyIPKcS1_ES1_Rf($1, 49257, $0 + 48 | 0) | 0;
if (0) {
$161 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(49246, HEAP32[$13 >> 2] | 0) | 0;
$162 = HEAP32[$1 >> 2] | 0;
L67 : do if ((HEAP16[$162 + ($161 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i47 = HEAP32[$162 + ($161 << 3) >> 2] | 0;
if (!$$01215$i$i47) label = 51; else {
$$01216$i$i48 = $$01215$i$i47;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(49246, HEAP32[$$01216$i$i48 >> 2] | 0) | 0) break;
$$012$i$i50 = HEAP32[$$01216$i$i48 + 8 >> 2] | 0;
if (!$$012$i$i50) {
label = 51;
break L67;
} else $$01216$i$i48 = $$012$i$i50;
}
$$sink$i$i52 = $$01216$i$i48 + 4 | 0;
}
} else label = 51; while (0);
if ((label | 0) == 51) $$sink$i$i52 = $1 + 20 | 0;
$176 = +Math_fround(HEAPF32[$157 >> 2]);
HEAP32[$vararg_buffer >> 2] = HEAP32[$$sink$i$i52 >> 2];
HEAPF64[$vararg_buffer + 8 >> 3] = $176;
__Z7eprintfPKcz(49274, $vararg_buffer);
}
$185 = $0 + 56 | 0;
__ZN9Handshape26NewHandshapeFromHandConfigEbPS_PK7HashAnyIPKcS3_E((HEAP8[$0 >> 0] | 0) == ((HEAPU8[(HEAP32[$0 + 72 >> 2] | 0) + 13 >> 0] | 0) >>> 6 & 1), HEAP32[$185 >> 2] | 0, $1);
if (!(HEAP32[$185 >> 2] | 0)) {
STACKTOP = sp;
return;
}
HEAP8[$0 + 52 >> 0] = 1;
STACKTOP = sp;
return;
}
function __ZN11HanimAvatar21setJointArticulationsEv($0) {
$0 = $0 | 0;
var $$pre100 = 0, $$pre100$1 = 0, $$pre103 = 0, $$pre103$1 = 0, $$pre106 = 0, $$pre106$1 = 0, $$pre109 = 0, $$pre109$1 = 0, $1 = 0, $103 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $115 = 0, $118 = 0, $12 = 0, $121 = 0, $124 = 0, $127 = 0, $128 = 0, $134 = 0, $137 = 0, $140 = 0, $143 = 0, $146 = 0, $149 = 0, $15 = 0, $152 = 0, $155 = 0, $158 = 0, $159 = 0, $165 = 0, $168 = 0, $171 = 0, $174 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $28 = 0, $31 = 0, $34 = 0, $37 = 0, $45 = 0, $48 = 0, $5 = 0, $61 = 0, $64 = 0, $67 = 0, $7 = 0, $70 = 0, $73 = 0, $76 = 0, $79 = 0, $8 = 0, $87 = 0, $90 = 0, $indvars$iv94 = 0, $indvars$iv94$1 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$1 = sp;
$2 = $0 + 72 | 0;
$5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] | 0;
HEAP32[$5 + 24 >> 2] = 2;
__ZN5Joint16InitArticulationEv($5);
$7 = $5 + 36 | 0;
$8 = HEAP32[$7 >> 2] | 0;
$11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 52 >> 2] | 0;
__ZN6VectorC2Efff($1, Math_fround(-1.0), Math_fround(0.0), Math_fround(0.0));
FUNCTION_TABLE_vii[$11 & 255]($8, $1);
$12 = HEAP32[$7 >> 2] | 0;
$15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 56 >> 2] | 0;
__ZN6VectorC2Efff($1, Math_fround(0.0), Math_fround(1.0), Math_fround(0.0));
FUNCTION_TABLE_vii[$15 & 255]($12, $1);
$indvars$iv94 = 1;
do {
$31 = HEAP32[(HEAP32[$2 >> 2] | 0) + 52 + ($indvars$iv94 * 12 | 0) >> 2] | 0;
HEAP32[$31 + 24 >> 2] = 3;
__ZN5Joint16InitArticulationEv($31);
$34 = HEAP32[$31 + 36 >> 2] | 0;
$37 = HEAP32[(HEAP32[$34 >> 2] | 0) + 52 >> 2] | 0;
__ZN6VectorC2Efff($1, Math_fround(0.0), Math_fround(0.0), Math_fround(-1.0));
FUNCTION_TABLE_vii[$37 & 255]($34, $1);
$45 = HEAP32[(HEAP32[$34 >> 2] | 0) + 56 >> 2] | 0;
__ZN6VectorC2Efff($1, Math_fround(-1.0), Math_fround(0.0), Math_fround(0.0));
FUNCTION_TABLE_vii[$45 & 255]($34, $1);
$48 = HEAP32[(HEAP32[$34 >> 2] | 0) + 60 >> 2] | 0;
__ZN6VectorC2Efff($1, Math_fround(0.0), Math_fround(-1.0), Math_fround(0.0));
FUNCTION_TABLE_vii[$48 & 255]($34, $1);
HEAP32[$34 + 52 >> 2] = HEAP32[65380 + ($indvars$iv94 << 2) >> 2];
HEAP32[$34 + 56 >> 2] = HEAP32[65360 + ($indvars$iv94 << 2) >> 2];
HEAP32[$34 + 60 >> 2] = HEAP32[1576 + ($indvars$iv94 << 2) >> 2];
HEAP32[$34 + 64 >> 2] = HEAP32[65400 + ($indvars$iv94 << 2) >> 2];
HEAP32[$34 + 68 >> 2] = HEAP32[1596 + ($indvars$iv94 << 2) >> 2];
$$pre100 = HEAP32[(HEAP32[$2 >> 2] | 0) + 52 + ($indvars$iv94 * 12 | 0) + 4 >> 2] | 0;
HEAP32[$$pre100 + 24 >> 2] = 5;
__ZN5Joint16InitArticulationEv($$pre100);
$61 = HEAP32[$$pre100 + 36 >> 2] | 0;
$64 = HEAP32[(HEAP32[$61 >> 2] | 0) + 52 >> 2] | 0;
__ZN6VectorC2Efff($1, Math_fround(0.0), Math_fround(0.0), Math_fround(-1.0));
FUNCTION_TABLE_vii[$64 & 255]($61, $1);
$$pre103 = HEAP32[(HEAP32[$2 >> 2] | 0) + 52 + ($indvars$iv94 * 12 | 0) + 8 >> 2] | 0;
HEAP32[$$pre103 + 24 >> 2] = 5;
__ZN5Joint16InitArticulationEv($$pre103);
$67 = HEAP32[$$pre103 + 36 >> 2] | 0;
$70 = HEAP32[(HEAP32[$67 >> 2] | 0) + 52 >> 2] | 0;
__ZN6VectorC2Efff($1, Math_fround(0.0), Math_fround(0.0), Math_fround(-1.0));
FUNCTION_TABLE_vii[$70 & 255]($67, $1);
$indvars$iv94 = $indvars$iv94 + 1 | 0;
} while (($indvars$iv94 | 0) != 5);
$18 = HEAP32[(HEAP32[$2 >> 2] | 0) + 44 >> 2] | 0;
HEAP32[$18 + 24 >> 2] = 2;
__ZN5Joint16InitArticulationEv($18);
$20 = $18 + 36 | 0;
$21 = HEAP32[$20 >> 2] | 0;
$24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 52 >> 2] | 0;
__ZN6VectorC2Efff($1, Math_fround(-1.0), Math_fround(0.0), Math_fround(0.0));
FUNCTION_TABLE_vii[$24 & 255]($21, $1);
$25 = HEAP32[$20 >> 2] | 0;
$28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 56 >> 2] | 0;
__ZN6VectorC2Efff($1, Math_fround(0.0), Math_fround(1.0), Math_fround(0.0));
FUNCTION_TABLE_vii[$28 & 255]($25, $1);
$indvars$iv94$1 = 1;
do {
$73 = HEAP32[(HEAP32[$2 >> 2] | 0) + 112 + ($indvars$iv94$1 * 12 | 0) >> 2] | 0;
HEAP32[$73 + 24 >> 2] = 3;
__ZN5Joint16InitArticulationEv($73);
$76 = HEAP32[$73 + 36 >> 2] | 0;
$79 = HEAP32[(HEAP32[$76 >> 2] | 0) + 52 >> 2] | 0;
__ZN6VectorC2Efff($1, Math_fround(0.0), Math_fround(0.0), Math_fround(1.0));
FUNCTION_TABLE_vii[$79 & 255]($76, $1);
$87 = HEAP32[(HEAP32[$76 >> 2] | 0) + 56 >> 2] | 0;
__ZN6VectorC2Efff($1, Math_fround(-1.0), Math_fround(0.0), Math_fround(0.0));
FUNCTION_TABLE_vii[$87 & 255]($76, $1);
$90 = HEAP32[(HEAP32[$76 >> 2] | 0) + 60 >> 2] | 0;
__ZN6VectorC2Efff($1, Math_fround(0.0), Math_fround(1.0), Math_fround(0.0));
FUNCTION_TABLE_vii[$90 & 255]($76, $1);
HEAP32[$76 + 52 >> 2] = HEAP32[65380 + ($indvars$iv94$1 << 2) >> 2];
HEAP32[$76 + 56 >> 2] = HEAP32[65360 + ($indvars$iv94$1 << 2) >> 2];
HEAP32[$76 + 60 >> 2] = HEAP32[1576 + ($indvars$iv94$1 << 2) >> 2];
HEAP32[$76 + 64 >> 2] = HEAP32[65400 + ($indvars$iv94$1 << 2) >> 2];
HEAP32[$76 + 68 >> 2] = HEAP32[1596 + ($indvars$iv94$1 << 2) >> 2];
$$pre100$1 = HEAP32[(HEAP32[$2 >> 2] | 0) + 112 + ($indvars$iv94$1 * 12 | 0) + 4 >> 2] | 0;
HEAP32[$$pre100$1 + 24 >> 2] = 5;
__ZN5Joint16InitArticulationEv($$pre100$1);
$103 = HEAP32[$$pre100$1 + 36 >> 2] | 0;
$106 = HEAP32[(HEAP32[$103 >> 2] | 0) + 52 >> 2] | 0;
__ZN6VectorC2Efff($1, Math_fround(0.0), Math_fround(0.0), Math_fround(1.0));
FUNCTION_TABLE_vii[$106 & 255]($103, $1);
$$pre103$1 = HEAP32[(HEAP32[$2 >> 2] | 0) + 112 + ($indvars$iv94$1 * 12 | 0) + 8 >> 2] | 0;
HEAP32[$$pre103$1 + 24 >> 2] = 5;
__ZN5Joint16InitArticulationEv($$pre103$1);
$109 = HEAP32[$$pre103$1 + 36 >> 2] | 0;
$112 = HEAP32[(HEAP32[$109 >> 2] | 0) + 52 >> 2] | 0;
__ZN6VectorC2Efff($1, Math_fround(0.0), Math_fround(0.0), Math_fround(1.0));
FUNCTION_TABLE_vii[$112 & 255]($109, $1);
$indvars$iv94$1 = $indvars$iv94$1 + 1 | 0;
} while (($indvars$iv94$1 | 0) != 5);
$115 = HEAP32[(HEAP32[$2 >> 2] | 0) + 52 >> 2] | 0;
HEAP32[$115 + 24 >> 2] = 4;
__ZN5Joint16InitArticulationEv($115);
$118 = HEAP32[$115 + 36 >> 2] | 0;
$121 = HEAP32[(HEAP32[$118 >> 2] | 0) + 56 >> 2] | 0;
__ZN6VectorC2Efff($1, Math_fround(-1.0), Math_fround(0.0), Math_fround(0.0));
FUNCTION_TABLE_vii[$121 & 255]($118, $1);
$124 = HEAP32[(HEAP32[$118 >> 2] | 0) + 52 >> 2] | 0;
__ZN6VectorC2Efff($1, Math_fround(0.0), Math_fround(-1.0), Math_fround(0.0));
FUNCTION_TABLE_vii[$124 & 255]($118, $1);
$127 = HEAP32[(HEAP32[$118 >> 2] | 0) + 60 >> 2] | 0;
__ZN6VectorC2Efff($1, Math_fround(0.0), Math_fround(-1.0), Math_fround(0.0));
FUNCTION_TABLE_vii[$127 & 255]($118, $1);
$128 = HEAP32[16541] | 0;
HEAP32[$118 + 56 >> 2] = $128;
HEAP32[$118 + 60 >> 2] = $128;
HEAP32[$118 + 64 >> 2] = $128;
$$pre106 = HEAP32[(HEAP32[$2 >> 2] | 0) + 56 >> 2] | 0;
HEAP32[$$pre106 + 24 >> 2] = 5;
__ZN5Joint16InitArticulationEv($$pre106);
$134 = HEAP32[$$pre106 + 36 >> 2] | 0;
$137 = HEAP32[(HEAP32[$134 >> 2] | 0) + 52 >> 2] | 0;
__ZN6VectorC2Efff($1, Math_fround(0.0), Math_fround(0.0), Math_fround(-1.0));
FUNCTION_TABLE_vii[$137 & 255]($134, $1);
$$pre109 = HEAP32[(HEAP32[$2 >> 2] | 0) + 60 >> 2] | 0;
HEAP32[$$pre109 + 24 >> 2] = 5;
__ZN5Joint16InitArticulationEv($$pre109);
$140 = HEAP32[$$pre109 + 36 >> 2] | 0;
$143 = HEAP32[(HEAP32[$140 >> 2] | 0) + 52 >> 2] | 0;
__ZN6VectorC2Efff($1, Math_fround(0.0), Math_fround(0.0), Math_fround(-1.0));
FUNCTION_TABLE_vii[$143 & 255]($140, $1);
$146 = HEAP32[(HEAP32[$2 >> 2] | 0) + 112 >> 2] | 0;
HEAP32[$146 + 24 >> 2] = 4;
__ZN5Joint16InitArticulationEv($146);
$149 = HEAP32[$146 + 36 >> 2] | 0;
$152 = HEAP32[(HEAP32[$149 >> 2] | 0) + 56 >> 2] | 0;
__ZN6VectorC2Efff($1, Math_fround(-1.0), Math_fround(0.0), Math_fround(0.0));
FUNCTION_TABLE_vii[$152 & 255]($149, $1);
$155 = HEAP32[(HEAP32[$149 >> 2] | 0) + 52 >> 2] | 0;
__ZN6VectorC2Efff($1, Math_fround(0.0), Math_fround(1.0), Math_fround(0.0));
FUNCTION_TABLE_vii[$155 & 255]($149, $1);
$158 = HEAP32[(HEAP32[$149 >> 2] | 0) + 60 >> 2] | 0;
__ZN6VectorC2Efff($1, Math_fround(0.0), Math_fround(1.0), Math_fround(0.0));
FUNCTION_TABLE_vii[$158 & 255]($149, $1);
$159 = HEAP32[16541] | 0;
HEAP32[$149 + 56 >> 2] = $159;
HEAP32[$149 + 60 >> 2] = $159;
HEAP32[$149 + 64 >> 2] = $159;
$$pre106$1 = HEAP32[(HEAP32[$2 >> 2] | 0) + 116 >> 2] | 0;
HEAP32[$$pre106$1 + 24 >> 2] = 5;
__ZN5Joint16InitArticulationEv($$pre106$1);
$165 = HEAP32[$$pre106$1 + 36 >> 2] | 0;
$168 = HEAP32[(HEAP32[$165 >> 2] | 0) + 52 >> 2] | 0;
__ZN6VectorC2Efff($1, Math_fround(0.0), Math_fround(0.0), Math_fround(1.0));
FUNCTION_TABLE_vii[$168 & 255]($165, $1);
$$pre109$1 = HEAP32[(HEAP32[$2 >> 2] | 0) + 120 >> 2] | 0;
HEAP32[$$pre109$1 + 24 >> 2] = 5;
__ZN5Joint16InitArticulationEv($$pre109$1);
$171 = HEAP32[$$pre109$1 + 36 >> 2] | 0;
$174 = HEAP32[(HEAP32[$171 >> 2] | 0) + 52 >> 2] | 0;
__ZN6VectorC2Efff($1, Math_fround(0.0), Math_fround(0.0), Math_fround(1.0));
FUNCTION_TABLE_vii[$174 & 255]($171, $1);
STACKTOP = sp;
return;
}
function __ZN11HanimAvatar17normaliseSkeletonEv($0) {
$0 = $0 | 0;
var $$095 = f0, $$096 = f0, $$097 = f0, $$pre = f0, $10 = 0, $103 = 0, $11 = 0, $112 = 0, $114 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = f0, $12 = 0, $120 = 0, $121 = f0, $128 = f0, $129 = 0, $13 = 0, $130 = f0, $137 = 0, $139 = f0, $14 = 0, $140 = 0, $141 = f0, $147 = f0, $148 = f0, $15 = 0, $152 = 0, $153 = 0, $16 = 0, $19 = f0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $4 = 0, $41 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $58 = 0, $6 = 0, $62 = 0, $7 = 0, $72 = 0, $76 = 0, $8 = 0, $85 = 0, $89 = 0, $9 = 0, $99 = 0, $indvars$iv = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 224 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$3 = sp + 188 | 0;
$4 = sp + 176 | 0;
$5 = sp + 160 | 0;
$6 = sp + 144 | 0;
$7 = sp + 128 | 0;
$8 = sp + 112 | 0;
$9 = sp + 100 | 0;
$10 = sp + 96 | 0;
$11 = sp + 84 | 0;
$12 = sp + 80 | 0;
$13 = sp + 64 | 0;
$14 = sp + 52 | 0;
$15 = sp + 40 | 0;
$16 = sp + 24 | 0;
$19 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf(__ZN7XMLCell7elementEPKc(HEAP32[16168] | 0, 49746) | 0, 24206, Math_fround(1.10000002)));
__ZN6VectorC2Efff(sp + 212 | 0, Math_fround(0.0), Math_fround(-Math_fround(+Math_cos(+$19))), Math_fround(+Math_sin(+$19)));
__ZN6VectorC2Efff(sp + 200 | 0, Math_fround(0.0), Math_fround(-1.0), Math_fround(1.0));
$23 = $0 + 72 | 0;
$24 = $3 + 4 | 0;
$25 = $4 + 8 | 0;
$26 = $4 + 4 | 0;
$27 = $8 + 4 | 0;
$28 = $8 + 8 | 0;
$29 = $8 + 12 | 0;
$30 = $9 + 8 | 0;
$31 = $16 + 4 | 0;
$32 = $16 + 8 | 0;
$33 = $16 + 12 | 0;
$indvars$iv = 0;
do {
$34 = HEAP32[$23 >> 2] | 0;
$37 = $34 + 20 + ($indvars$iv << 4) + 8 | 0;
__ZN5Joint23setLocalGlobalDirectionERK6VectorS2_(HEAP32[$34 + 20 + ($indvars$iv << 4) + 4 >> 2] | 0, (HEAP32[$37 >> 2] | 0) + 40 | 0, 64576);
$41 = $34 + 20 + ($indvars$iv << 4) + 12 | 0;
__ZN5Joint23setLocalGlobalDirectionERK6VectorS2_(HEAP32[$37 >> 2] | 0, (HEAP32[$41 >> 2] | 0) + 40 | 0, 64576);
__ZN5Joint23setLocalGlobalDirectionERK6VectorS2_(HEAP32[$41 >> 2] | 0, (HEAP32[(HEAP32[$23 >> 2] | 0) + 52 + ($indvars$iv * 60 | 0) + 24 >> 2] | 0) + 40 | 0, 64576);
$49 = HEAP32[$23 >> 2] | 0;
$50 = $49 + 52 + ($indvars$iv * 60 | 0) + 12 | 0;
$51 = HEAP32[$50 >> 2] | 0;
$52 = $49 + 52 + ($indvars$iv * 60 | 0) + 36 | 0;
$53 = HEAP32[$52 >> 2] | 0;
__ZN6VectorC2Ev($3);
__ZN6Vector11setSubtractERKS_S1_($3, $51 + 68 | 0, $53 + 68 | 0);
HEAPF32[$24 >> 2] = Math_fround(0.0);
__ZN5Joint24setGlobalGlobalDirectionERK6VectorS2_(HEAP32[$41 >> 2] | 0, $3, 64552);
$58 = $49 + 52 + ($indvars$iv * 60 | 0) + 16 | 0;
__ZN5Joint23setLocalGlobalDirectionERK6VectorS2_(HEAP32[$50 >> 2] | 0, (HEAP32[$58 >> 2] | 0) + 40 | 0, 64576);
$62 = $49 + 52 + ($indvars$iv * 60 | 0) + 20 | 0;
__ZN5Joint23setLocalGlobalDirectionERK6VectorS2_(HEAP32[$58 >> 2] | 0, (HEAP32[$62 >> 2] | 0) + 40 | 0, 64576);
__ZN5Joint23setLocalGlobalDirectionERK6VectorS2_(HEAP32[$62 >> 2] | 0, (HEAP32[(HEAP32[$23 >> 2] | 0) + 172 + ($indvars$iv * 20 | 0) + 4 >> 2] | 0) + 28 | 0, 64576);
$72 = $49 + 52 + ($indvars$iv * 60 | 0) + 28 | 0;
__ZN5Joint23setLocalGlobalDirectionERK6VectorS2_(HEAP32[$49 + 52 + ($indvars$iv * 60 | 0) + 24 >> 2] | 0, (HEAP32[$72 >> 2] | 0) + 40 | 0, 64576);
$76 = $49 + 52 + ($indvars$iv * 60 | 0) + 32 | 0;
__ZN5Joint23setLocalGlobalDirectionERK6VectorS2_(HEAP32[$72 >> 2] | 0, (HEAP32[$76 >> 2] | 0) + 40 | 0, 64576);
__ZN5Joint23setLocalGlobalDirectionERK6VectorS2_(HEAP32[$76 >> 2] | 0, (HEAP32[(HEAP32[$23 >> 2] | 0) + 172 + ($indvars$iv * 20 | 0) + 8 >> 2] | 0) + 28 | 0, 64576);
$85 = $49 + 52 + ($indvars$iv * 60 | 0) + 40 | 0;
__ZN5Joint23setLocalGlobalDirectionERK6VectorS2_(HEAP32[$52 >> 2] | 0, (HEAP32[$85 >> 2] | 0) + 40 | 0, 64576);
$89 = $49 + 52 + ($indvars$iv * 60 | 0) + 44 | 0;
__ZN5Joint23setLocalGlobalDirectionERK6VectorS2_(HEAP32[$85 >> 2] | 0, (HEAP32[$89 >> 2] | 0) + 40 | 0, 64576);
__ZN5Joint23setLocalGlobalDirectionERK6VectorS2_(HEAP32[$89 >> 2] | 0, (HEAP32[(HEAP32[$23 >> 2] | 0) + 172 + ($indvars$iv * 20 | 0) + 12 >> 2] | 0) + 28 | 0, 64576);
$99 = $49 + 52 + ($indvars$iv * 60 | 0) + 52 | 0;
__ZN5Joint23setLocalGlobalDirectionERK6VectorS2_(HEAP32[$49 + 52 + ($indvars$iv * 60 | 0) + 48 >> 2] | 0, (HEAP32[$99 >> 2] | 0) + 40 | 0, 64576);
$103 = $49 + 52 + ($indvars$iv * 60 | 0) + 56 | 0;
__ZN5Joint23setLocalGlobalDirectionERK6VectorS2_(HEAP32[$99 >> 2] | 0, (HEAP32[$103 >> 2] | 0) + 40 | 0, 64576);
__ZN5Joint23setLocalGlobalDirectionERK6VectorS2_(HEAP32[$103 >> 2] | 0, (HEAP32[(HEAP32[$23 >> 2] | 0) + 172 + ($indvars$iv * 20 | 0) + 16 >> 2] | 0) + 28 | 0, 64576);
$112 = HEAP32[$49 + 52 + ($indvars$iv * 60 | 0) >> 2] | 0;
$114 = HEAP32[$49 + 52 + ($indvars$iv * 60 | 0) + 4 >> 2] | 0;
$116 = HEAP32[$49 + 52 + ($indvars$iv * 60 | 0) + 8 >> 2] | 0;
__ZN6VectorC2Ev($4);
$117 = $114 + 68 | 0;
$118 = $112 + 68 | 0;
__ZN6Vector11setSubtractERKS_S1_($4, $117, $118);
$119 = Math_fround(HEAPF32[$4 >> 2]);
$120 = $119 == Math_fround(0.0);
$121 = Math_fround(HEAPF32[$25 >> 2]);
if ($120 & $121 == Math_fround(0.0)) if (!1) $$097 = Math_fround(0.0); else {
HEAP32[$vararg_buffer >> 2] = ($indvars$iv | 0) == 0 ? 35826 : 35820;
__Z7eprintfPKcz(24225, $vararg_buffer);
$$097 = Math_fround(0.0);
} else $$097 = Math_fround(+Math_atan2(+$119, +$121));
__ZN10QuaternionC2ERK6Vectorfb($5, 64540, Math_fround(-$$097), 1);
__ZN5Joint17addGlobalRotationERK10Quaternion($112, $5);
__ZN6Vector11setSubtractERKS_S1_($4, $117, $118);
$128 = Math_fround(HEAPF32[$26 >> 2]);
$129 = $128 == Math_fround(0.0);
$130 = Math_fround(HEAPF32[$25 >> 2]);
if ($129 & $130 == Math_fround(0.0)) if (!1) $$096 = Math_fround(0.0); else {
HEAP32[$vararg_buffer1 >> 2] = ($indvars$iv | 0) == 0 ? 35826 : 35820;
__Z7eprintfPKcz(24317, $vararg_buffer1);
$$096 = Math_fround(0.0);
} else $$096 = Math_fround(+Math_atan2(+$130, +Math_fround(-$128)));
__ZN10QuaternionC2ERK6Vectorfb($6, 64528, $$096, 1);
__ZN5Joint17addGlobalRotationERK10Quaternion($112, $6);
__ZN6Vector11setSubtractERKS_S1_($4, $117, $118);
__ZN6VectorC2Ev($7);
$137 = $116 + 68 | 0;
__ZN6Vector11setSubtractERKS_S1_($7, $137, $117);
HEAPF32[$8 >> 2] = Math_fround(0.0);
HEAPF32[$27 >> 2] = Math_fround(0.0);
HEAPF32[$28 >> 2] = Math_fround(0.0);
HEAPF32[$29 >> 2] = Math_fround(1.0);
__ZN10Quaternion16setQuatFrom2VecsERK6VectorS2_($8, $7, $4);
__ZN6VectorC2Ev($9);
__ZNK10Quaternion12getAxisAngleER6VectorRf($8, $9, $10);
__ZN6VectorC2Ev($11);
__ZNK10Quaternion12getAxisAngleER6VectorRf($116 + 52 | 0, $11, $12);
__ZNK9Transform18transformDirectionER6Vector($117, $11);
$139 = Math_fround(HEAPF32[$9 >> 2]);
$140 = $139 == Math_fround(0.0);
$141 = Math_fround(HEAPF32[$30 >> 2]);
if ($140 & $141 == Math_fround(0.0)) if (!1) $$095 = Math_fround(0.0); else {
HEAP32[$vararg_buffer4 >> 2] = ($indvars$iv | 0) == 0 ? 35826 : 35820;
__Z7eprintfPKcz(24431, $vararg_buffer4);
$$095 = Math_fround(0.0);
} else {
if ($141 < Math_fround(0.0)) {
__ZN6Vector10setInverseEv($9);
$$pre = Math_fround(HEAPF32[$9 >> 2]);
$147 = $$pre;
$148 = Math_fround(HEAPF32[$30 >> 2]);
} else {
$147 = $139;
$148 = $141;
}
$$095 = Math_fround(+Math_atan2(+$147, +$148));
}
__ZN10QuaternionC2ERK6Vectorfb($13, 64576, $$095, 1);
__ZN5Joint17addGlobalRotationERK10Quaternion($112, $13);
__ZN6Vector11setSubtractERKS_S1_($4, $117, $118);
__ZN6Vector11setSubtractERKS_S1_($7, $137, $117);
__ZN10Quaternion16setQuatFrom2VecsERK6VectorS2_($8, $7, $4);
__ZN5Joint17addGlobalRotationERK10Quaternion($114, $8);
__ZN6Vector11setSubtractERKS_S1_($7, $137, $117);
__ZN6VectorC2Ev($14);
$152 = HEAP32[(HEAP32[$23 >> 2] | 0) + 172 + ($indvars$iv * 20 | 0) >> 2] | 0;
__ZN6VectorC2Ev($15);
$153 = $152 + 40 | 0;
HEAP32[$15 >> 2] = HEAP32[$153 >> 2];
HEAP32[$15 + 4 >> 2] = HEAP32[$153 + 4 >> 2];
HEAP32[$15 + 8 >> 2] = HEAP32[$153 + 8 >> 2];
__ZN6Vector11setSubtractERKS_S1_($14, $15, $137);
HEAPF32[$16 >> 2] = Math_fround(0.0);
HEAPF32[$31 >> 2] = Math_fround(0.0);
HEAPF32[$32 >> 2] = Math_fround(0.0);
HEAPF32[$33 >> 2] = Math_fround(1.0);
__ZN10Quaternion16setQuatFrom2VecsERK6VectorS2_($16, $14, $7);
__ZN5Joint17addGlobalRotationERK10Quaternion($116, $16);
HEAP32[$15 >> 2] = HEAP32[$153 >> 2];
HEAP32[$15 + 4 >> 2] = HEAP32[$153 + 4 >> 2];
HEAP32[$15 + 8 >> 2] = HEAP32[$153 + 8 >> 2];
__ZN6Vector11setSubtractERKS_S1_($14, $15, $137);
$indvars$iv = $indvars$iv + 1 | 0;
} while (($indvars$iv | 0) != 2);
__ZN11HanimAvatar23initialiseStaticArmDataEv($0);
STACKTOP = sp;
return;
}
function __ZN11HanimAvatar17completeQuadSitesEPKcS1_S1_S1_($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$012$i$i$i = 0, $$012$i$i$i$i = 0, $$012$i$i$i$i26 = 0, $$012$i$i$i$i37 = 0, $$012$i$i$i48 = 0, $$01215$i$i$i = 0, $$01215$i$i$i$i = 0, $$01215$i$i$i$i23 = 0, $$01215$i$i$i$i34 = 0, $$01215$i$i$i45 = 0, $$01216$i$i$i = 0, $$01216$i$i$i$i = 0, $$01216$i$i$i$i24 = 0, $$01216$i$i$i$i35 = 0, $$01216$i$i$i46 = 0, $$pre$phi$i$i29Z2D = 0, $$pre$phi$i$i40Z2D = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i51Z2D = 0, $$pre$phi$iZ2D = 0, $$sink$i$i$i = 0, $$sink$i$i$i$i = 0, $$sink$i$i$i$i30 = 0, $$sink$i$i$i$i41 = 0, $$sink$i$i$i52 = 0, $10 = 0, $101 = 0, $112 = 0, $113 = 0, $117 = 0, $12 = 0, $124 = 0, $128 = 0, $13 = 0, $130 = 0, $14 = 0, $141 = 0, $142 = 0, $146 = 0, $153 = 0, $156 = 0, $158 = 0, $25 = 0, $26 = 0, $29 = 0, $30 = 0, $37 = 0, $39 = 0, $42 = 0, $43 = 0, $5 = 0, $54 = 0, $55 = 0, $58 = 0, $6 = 0, $65 = 0, $67 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $82 = 0, $83 = 0, $86 = 0, $9 = 0, $93 = 0, $95 = 0, $99 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$5 = sp + 36 | 0;
$6 = sp + 24 | 0;
$7 = sp + 12 | 0;
$8 = sp;
__ZN6VectorC2Ev($5);
__ZN6VectorC2Ev($6);
__ZN6VectorC2Ev($7);
__ZN6VectorC2Ev($8);
$9 = ($1 | 0) == 0;
if ($9) $158 = 0; else {
$10 = $0 + 148 | 0;
$12 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($1, HEAP32[$10 >> 2] | 0) | 0;
$13 = $0 + 144 | 0;
$14 = HEAP32[$13 >> 2] | 0;
L3 : do if ((HEAP16[$14 + ($12 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i$i = HEAP32[$14 + ($12 << 3) >> 2] | 0;
if (!$$01215$i$i$i$i) label = 7; else {
$$01216$i$i$i$i = $$01215$i$i$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($1, HEAP32[$$01216$i$i$i$i >> 2] | 0) | 0) break;
$$012$i$i$i$i = HEAP32[$$01216$i$i$i$i + 8 >> 2] | 0;
if (!$$012$i$i$i$i) {
label = 7;
break L3;
} else $$01216$i$i$i$i = $$012$i$i$i$i;
}
$$pre$phi$i$iZ2D = $0 + 164 | 0;
$$sink$i$i$i$i = $$01216$i$i$i$i + 4 | 0;
}
} else label = 7; while (0);
if ((label | 0) == 7) {
$25 = $0 + 164 | 0;
$$pre$phi$i$iZ2D = $25;
$$sink$i$i$i$i = $25;
}
$26 = HEAP32[$$sink$i$i$i$i >> 2] | 0;
if (($26 | 0) == (HEAP32[$$pre$phi$i$iZ2D >> 2] | 0)) $158 = 0; else {
$29 = $0 + 108 | 0;
$30 = HEAP32[$29 >> 2] | 0;
if (($26 | 0) < 0) $158 = 0; else if ((HEAP32[$30 + 12 >> 2] | 0) > ($26 | 0)) {
$37 = HEAP32[(HEAP32[$30 >> 2] | 0) + ($26 << 2) >> 2] | 0;
if (!$37) $158 = 0; else {
$39 = $37 + 28 | 0;
HEAP32[$5 >> 2] = HEAP32[$39 >> 2];
HEAP32[$5 + 4 >> 2] = HEAP32[$39 + 4 >> 2];
HEAP32[$5 + 8 >> 2] = HEAP32[$39 + 8 >> 2];
if (!$2) $158 = 0; else {
$42 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($2, HEAP32[$10 >> 2] | 0) | 0;
$43 = HEAP32[$13 >> 2] | 0;
L17 : do if ((HEAP16[$43 + ($42 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i$i23 = HEAP32[$43 + ($42 << 3) >> 2] | 0;
if (!$$01215$i$i$i$i23) label = 18; else {
$$01216$i$i$i$i24 = $$01215$i$i$i$i23;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($2, HEAP32[$$01216$i$i$i$i24 >> 2] | 0) | 0) break;
$$012$i$i$i$i26 = HEAP32[$$01216$i$i$i$i24 + 8 >> 2] | 0;
if (!$$012$i$i$i$i26) {
label = 18;
break L17;
} else $$01216$i$i$i$i24 = $$012$i$i$i$i26;
}
$$pre$phi$i$i29Z2D = $0 + 164 | 0;
$$sink$i$i$i$i30 = $$01216$i$i$i$i24 + 4 | 0;
}
} else label = 18; while (0);
if ((label | 0) == 18) {
$54 = $0 + 164 | 0;
$$pre$phi$i$i29Z2D = $54;
$$sink$i$i$i$i30 = $54;
}
$55 = HEAP32[$$sink$i$i$i$i30 >> 2] | 0;
if (($55 | 0) == (HEAP32[$$pre$phi$i$i29Z2D >> 2] | 0)) $158 = 0; else {
$58 = HEAP32[$29 >> 2] | 0;
if (($55 | 0) < 0) $158 = 0; else if ((HEAP32[$58 + 12 >> 2] | 0) > ($55 | 0)) {
$65 = HEAP32[(HEAP32[$58 >> 2] | 0) + ($55 << 2) >> 2] | 0;
if (!$65) $158 = 0; else {
$67 = $65 + 28 | 0;
HEAP32[$6 >> 2] = HEAP32[$67 >> 2];
HEAP32[$6 + 4 >> 2] = HEAP32[$67 + 4 >> 2];
HEAP32[$6 + 8 >> 2] = HEAP32[$67 + 8 >> 2];
if (!$3) $158 = 0; else {
$70 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($3, HEAP32[$10 >> 2] | 0) | 0;
$71 = HEAP32[$13 >> 2] | 0;
L31 : do if ((HEAP16[$71 + ($70 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i$i34 = HEAP32[$71 + ($70 << 3) >> 2] | 0;
if (!$$01215$i$i$i$i34) label = 29; else {
$$01216$i$i$i$i35 = $$01215$i$i$i$i34;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($3, HEAP32[$$01216$i$i$i$i35 >> 2] | 0) | 0) break;
$$012$i$i$i$i37 = HEAP32[$$01216$i$i$i$i35 + 8 >> 2] | 0;
if (!$$012$i$i$i$i37) {
label = 29;
break L31;
} else $$01216$i$i$i$i35 = $$012$i$i$i$i37;
}
$$pre$phi$i$i40Z2D = $0 + 164 | 0;
$$sink$i$i$i$i41 = $$01216$i$i$i$i35 + 4 | 0;
}
} else label = 29; while (0);
if ((label | 0) == 29) {
$82 = $0 + 164 | 0;
$$pre$phi$i$i40Z2D = $82;
$$sink$i$i$i$i41 = $82;
}
$83 = HEAP32[$$sink$i$i$i$i41 >> 2] | 0;
if (($83 | 0) == (HEAP32[$$pre$phi$i$i40Z2D >> 2] | 0)) $158 = 0; else {
$86 = HEAP32[$29 >> 2] | 0;
if (($83 | 0) < 0) $158 = 0; else if ((HEAP32[$86 + 12 >> 2] | 0) > ($83 | 0)) {
$93 = HEAP32[(HEAP32[$86 >> 2] | 0) + ($83 << 2) >> 2] | 0;
if (!$93) $158 = 0; else {
$95 = $93 + 28 | 0;
HEAP32[$7 >> 2] = HEAP32[$95 >> 2];
HEAP32[$7 + 4 >> 2] = HEAP32[$95 + 4 >> 2];
HEAP32[$7 + 8 >> 2] = HEAP32[$95 + 8 >> 2];
$158 = 1;
}
} else $158 = 0;
}
}
}
} else $158 = 0;
}
}
}
} else $158 = 0;
}
}
__Z12completeQuadRK6VectorS1_S1_RS_($5, $6, $7, $8);
if ($4 | 0) {
$99 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($4, HEAP32[$0 + 148 >> 2] | 0) | 0;
$101 = HEAP32[$0 + 144 >> 2] | 0;
L47 : do if ((HEAP16[$101 + ($99 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i = HEAP32[$101 + ($99 << 3) >> 2] | 0;
if (!$$01215$i$i$i) label = 41; else {
$$01216$i$i$i = $$01215$i$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($4, HEAP32[$$01216$i$i$i >> 2] | 0) | 0) break;
$$012$i$i$i = HEAP32[$$01216$i$i$i + 8 >> 2] | 0;
if (!$$012$i$i$i) {
label = 41;
break L47;
} else $$01216$i$i$i = $$012$i$i$i;
}
$$pre$phi$iZ2D = $0 + 164 | 0;
$$sink$i$i$i = $$01216$i$i$i + 4 | 0;
}
} else label = 41; while (0);
if ((label | 0) == 41) {
$112 = $0 + 164 | 0;
$$pre$phi$iZ2D = $112;
$$sink$i$i$i = $112;
}
$113 = HEAP32[$$sink$i$i$i >> 2] | 0;
if (($113 | 0) != (HEAP32[$$pre$phi$iZ2D >> 2] | 0)) {
$117 = HEAP32[$0 + 108 >> 2] | 0;
if (($113 | 0) >= 0) if ((HEAP32[$117 + 12 >> 2] | 0) > ($113 | 0)) {
$124 = HEAP32[(HEAP32[$117 >> 2] | 0) + ($113 << 2) >> 2] | 0;
if ($124 | 0) {
if (!$158) {
STACKTOP = sp;
return;
}
__ZN4Site16setLocalPositionERK6Vector($124, $8);
STACKTOP = sp;
return;
}
}
}
}
if ($9) {
STACKTOP = sp;
return;
}
$128 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($1, HEAP32[$0 + 148 >> 2] | 0) | 0;
$130 = HEAP32[$0 + 144 >> 2] | 0;
L68 : do if ((HEAP16[$130 + ($128 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i45 = HEAP32[$130 + ($128 << 3) >> 2] | 0;
if (!$$01215$i$i$i45) label = 52; else {
$$01216$i$i$i46 = $$01215$i$i$i45;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($1, HEAP32[$$01216$i$i$i46 >> 2] | 0) | 0) break;
$$012$i$i$i48 = HEAP32[$$01216$i$i$i46 + 8 >> 2] | 0;
if (!$$012$i$i$i48) {
label = 52;
break L68;
} else $$01216$i$i$i46 = $$012$i$i$i48;
}
$$pre$phi$i51Z2D = $0 + 164 | 0;
$$sink$i$i$i52 = $$01216$i$i$i46 + 4 | 0;
}
} else label = 52; while (0);
if ((label | 0) == 52) {
$141 = $0 + 164 | 0;
$$pre$phi$i51Z2D = $141;
$$sink$i$i$i52 = $141;
}
$142 = HEAP32[$$sink$i$i$i52 >> 2] | 0;
if (($142 | 0) == (HEAP32[$$pre$phi$i51Z2D >> 2] | 0)) {
STACKTOP = sp;
return;
}
$146 = HEAP32[$0 + 108 >> 2] | 0;
if (($142 | 0) < 0) {
STACKTOP = sp;
return;
}
if ((HEAP32[$146 + 12 >> 2] | 0) <= ($142 | 0)) {
STACKTOP = sp;
return;
}
$153 = HEAP32[(HEAP32[$146 >> 2] | 0) + ($142 << 2) >> 2] | 0;
if (!$153) {
STACKTOP = sp;
return;
}
$156 = HEAP32[$153 + 16 >> 2] | 0;
if (!$156) {
STACKTOP = sp;
return;
}
__ZN11HanimAvatar16AddARPSiteByNameEPKcP5Joint($0, $4, $156);
STACKTOP = sp;
return;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
$a$0 = $a$0 | 0;
$a$1 = $a$1 | 0;
$b$0 = $b$0 | 0;
$b$1 = $b$1 | 0;
$rem = $rem | 0;
var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
$n_sroa_0_0_extract_trunc = $a$0;
$n_sroa_1_4_extract_shift$0 = $a$1;
$n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
$d_sroa_0_0_extract_trunc = $b$0;
$d_sroa_1_4_extract_shift$0 = $b$1;
$d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
if (!$n_sroa_1_4_extract_trunc) {
$4 = ($rem | 0) != 0;
if (!$d_sroa_1_4_extract_trunc) {
if ($4) {
HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
HEAP32[$rem + 4 >> 2] = 0;
}
$_0$1 = 0;
$_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
return (tempRet0 = $_0$1, $_0$0) | 0;
} else {
if (!$4) {
$_0$1 = 0;
$_0$0 = 0;
return (tempRet0 = $_0$1, $_0$0) | 0;
}
HEAP32[$rem >> 2] = $a$0 | 0;
HEAP32[$rem + 4 >> 2] = $a$1 & 0;
$_0$1 = 0;
$_0$0 = 0;
return (tempRet0 = $_0$1, $_0$0) | 0;
}
}
$17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
do if (!$d_sroa_0_0_extract_trunc) {
if ($17) {
if ($rem | 0) {
HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
HEAP32[$rem + 4 >> 2] = 0;
}
$_0$1 = 0;
$_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
return (tempRet0 = $_0$1, $_0$0) | 0;
}
if (!$n_sroa_0_0_extract_trunc) {
if ($rem | 0) {
HEAP32[$rem >> 2] = 0;
HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
}
$_0$1 = 0;
$_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
return (tempRet0 = $_0$1, $_0$0) | 0;
}
$37 = $d_sroa_1_4_extract_trunc - 1 | 0;
if (!($37 & $d_sroa_1_4_extract_trunc)) {
if ($rem | 0) {
HEAP32[$rem >> 2] = $a$0 | 0;
HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
}
$_0$1 = 0;
$_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
return (tempRet0 = $_0$1, $_0$0) | 0;
}
$51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
if ($51 >>> 0 <= 30) {
$57 = $51 + 1 | 0;
$58 = 31 - $51 | 0;
$sr_1_ph = $57;
$r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
$r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
$q_sroa_0_1_ph = 0;
$q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
break;
}
if (!$rem) {
$_0$1 = 0;
$_0$0 = 0;
return (tempRet0 = $_0$1, $_0$0) | 0;
}
HEAP32[$rem >> 2] = $a$0 | 0;
HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
$_0$1 = 0;
$_0$0 = 0;
return (tempRet0 = $_0$1, $_0$0) | 0;
} else {
if (!$17) {
$119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
if ($119 >>> 0 <= 31) {
$125 = $119 + 1 | 0;
$126 = 31 - $119 | 0;
$130 = $119 - 31 >> 31;
$sr_1_ph = $125;
$r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
$r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
$q_sroa_0_1_ph = 0;
$q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
break;
}
if (!$rem) {
$_0$1 = 0;
$_0$0 = 0;
return (tempRet0 = $_0$1, $_0$0) | 0;
}
HEAP32[$rem >> 2] = $a$0 | 0;
HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
$_0$1 = 0;
$_0$0 = 0;
return (tempRet0 = $_0$1, $_0$0) | 0;
}
$66 = $d_sroa_0_0_extract_trunc - 1 | 0;
if ($66 & $d_sroa_0_0_extract_trunc | 0) {
$88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
$89 = 64 - $88 | 0;
$91 = 32 - $88 | 0;
$92 = $91 >> 31;
$95 = $88 - 32 | 0;
$105 = $95 >> 31;
$sr_1_ph = $88;
$r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
$r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
$q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
$q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
break;
}
if ($rem | 0) {
HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
HEAP32[$rem + 4 >> 2] = 0;
}
if (($d_sroa_0_0_extract_trunc | 0) == 1) {
$_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
$_0$0 = $a$0 | 0 | 0;
return (tempRet0 = $_0$1, $_0$0) | 0;
} else {
$78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
$_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
$_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
return (tempRet0 = $_0$1, $_0$0) | 0;
}
} while (0);
if (!$sr_1_ph) {
$q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
$q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
$r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
$r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
$carry_0_lcssa$1 = 0;
$carry_0_lcssa$0 = 0;
} else {
$d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0;
$d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
$137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
$137$1 = tempRet0;
$q_sroa_1_1198 = $q_sroa_1_1_ph;
$q_sroa_0_1199 = $q_sroa_0_1_ph;
$r_sroa_1_1200 = $r_sroa_1_1_ph;
$r_sroa_0_1201 = $r_sroa_0_1_ph;
$sr_1202 = $sr_1_ph;
$carry_0203 = 0;
do {
$q_sroa_1_1198$looptemp = $q_sroa_1_1198;
$q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
$q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1;
$r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0;
$r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
_i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
$150$1 = tempRet0;
$151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
$carry_0203 = $151$0 & 1;
$r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
$r_sroa_1_1200 = tempRet0;
$sr_1202 = $sr_1202 - 1 | 0;
} while (($sr_1202 | 0) != 0);
$q_sroa_1_1_lcssa = $q_sroa_1_1198;
$q_sroa_0_1_lcssa = $q_sroa_0_1199;
$r_sroa_1_1_lcssa = $r_sroa_1_1200;
$r_sroa_0_1_lcssa = $r_sroa_0_1201;
$carry_0_lcssa$1 = 0;
$carry_0_lcssa$0 = $carry_0203;
}
$q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
$q_sroa_0_0_insert_ext75$1 = 0;
if ($rem | 0) {
HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
}
$_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
$_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
return (tempRet0 = $_0$1, $_0$0) | 0;
}
function __ZNK14RepeatMovement5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $10 = 0, $106 = 0, $121 = 0, $136 = 0, $151 = 0, $16 = 0, $166 = 0, $186 = 0, $192 = 0, $193 = 0, $199 = 0, $22 = 0, $28 = 0, $4 = 0, $43 = 0, $49 = 0, $55 = 0, $61 = 0, $76 = 0, $91 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$vararg_buffer19 = sp + 56 | 0;
$vararg_buffer16 = sp + 48 | 0;
$vararg_buffer13 = sp + 40 | 0;
$vararg_buffer10 = sp + 32 | 0;
$vararg_buffer7 = sp + 24 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
HEAP32[$vararg_buffer >> 2] = $0;
_fprintf($1, 38953, $vararg_buffer) | 0;
__ZNK13BasicMovement5printEP8_IO_FILE($0, $1);
$4 = $0 + 528 | 0;
if (HEAP32[$4 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(38973, 15, 1, $1) | 0;
HEAP32[$vararg_buffer1 >> 2] = HEAP32[$4 >> 2];
_fprintf($1, 35092, $vararg_buffer1) | 0;
}
$10 = $0 + 532 | 0;
if (HEAP32[$10 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(38989, 22, 1, $1) | 0;
HEAP32[$vararg_buffer4 >> 2] = HEAP32[$10 >> 2];
_fprintf($1, 35092, $vararg_buffer4) | 0;
}
$16 = $0 + 536 | 0;
if (HEAP32[$16 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(39012, 24, 1, $1) | 0;
HEAP32[$vararg_buffer7 >> 2] = HEAP32[$16 >> 2];
_fprintf($1, 35092, $vararg_buffer7) | 0;
}
$22 = $0 + 540 | 0;
if (HEAP32[$22 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(39037, 29, 1, $1) | 0;
HEAP32[$vararg_buffer10 >> 2] = HEAP32[$22 >> 2];
_fprintf($1, 35092, $vararg_buffer10) | 0;
}
$28 = $0 + 544 | 0;
if (Math_fround(HEAPF32[$28 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 548 >> 2]) == Math_fround(0.0)) {
if (!(Math_fround(HEAPF32[$0 + 552 >> 2]) == Math_fround(0.0))) label = 13;
} else label = 13; else label = 13;
if ((label | 0) == 13) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(39067, 25, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK10Direction35printEP8_IO_FILE($28, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$43 = $0 + 556 | 0;
if (HEAP32[$43 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(39093, 19, 1, $1) | 0;
HEAP32[$vararg_buffer13 >> 2] = HEAP32[$43 >> 2];
_fprintf($1, 35092, $vararg_buffer13) | 0;
}
$49 = $0 + 560 | 0;
if (HEAP32[$49 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(39113, 23, 1, $1) | 0;
HEAP32[$vararg_buffer16 >> 2] = HEAP32[$49 >> 2];
_fprintf($1, 35092, $vararg_buffer16) | 0;
}
$55 = $0 + 564 | 0;
if (HEAP32[$55 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(39137, 28, 1, $1) | 0;
HEAP32[$vararg_buffer19 >> 2] = HEAP32[$55 >> 2];
_fprintf($1, 35092, $vararg_buffer19) | 0;
}
$61 = $0 + 592 | 0;
if (Math_fround(HEAPF32[$61 >> 2]) != Math_fround(0.0)) label = 23; else if (Math_fround(HEAPF32[$0 + 596 >> 2]) != Math_fround(0.0)) label = 23; else if (Math_fround(HEAPF32[$0 + 600 >> 2]) != Math_fround(0.0)) label = 23;
if ((label | 0) == 23) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(39166, 21, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($61, $1, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$76 = $0 + 640 | 0;
if (Math_fround(HEAPF32[$76 >> 2]) != Math_fround(0.0)) label = 27; else if (Math_fround(HEAPF32[$0 + 644 >> 2]) != Math_fround(0.0)) label = 27; else if (Math_fround(HEAPF32[$0 + 648 >> 2]) != Math_fround(0.0)) label = 27;
if ((label | 0) == 27) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(39188, 20, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($76, $1, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$91 = $0 + 604 | 0;
if (Math_fround(HEAPF32[$91 >> 2]) != Math_fround(0.0)) label = 31; else if (Math_fround(HEAPF32[$0 + 608 >> 2]) != Math_fround(0.0)) label = 31; else if (Math_fround(HEAPF32[$0 + 612 >> 2]) != Math_fround(0.0)) label = 31;
if ((label | 0) == 31) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(39209, 24, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($91, $1, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$106 = $0 + 652 | 0;
if (Math_fround(HEAPF32[$106 >> 2]) != Math_fround(0.0)) label = 35; else if (Math_fround(HEAPF32[$0 + 656 >> 2]) != Math_fround(0.0)) label = 35; else if (Math_fround(HEAPF32[$0 + 660 >> 2]) != Math_fround(0.0)) label = 35;
if ((label | 0) == 35) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(39234, 23, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($106, $1, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$121 = $0 + 616 | 0;
if (Math_fround(HEAPF32[$121 >> 2]) != Math_fround(0.0)) label = 39; else if (Math_fround(HEAPF32[$0 + 620 >> 2]) != Math_fround(0.0)) label = 39; else if (Math_fround(HEAPF32[$0 + 624 >> 2]) != Math_fround(0.0)) label = 39;
if ((label | 0) == 39) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(39258, 27, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($121, $1, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$136 = $0 + 664 | 0;
if (Math_fround(HEAPF32[$136 >> 2]) != Math_fround(0.0)) label = 43; else if (Math_fround(HEAPF32[$0 + 668 >> 2]) != Math_fround(0.0)) label = 43; else if (Math_fround(HEAPF32[$0 + 672 >> 2]) != Math_fround(0.0)) label = 43;
if ((label | 0) == 43) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(39286, 26, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($136, $1, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$151 = $0 + 628 | 0;
if (Math_fround(HEAPF32[$151 >> 2]) != Math_fround(0.0)) label = 47; else if (Math_fround(HEAPF32[$0 + 632 >> 2]) != Math_fround(0.0)) label = 47; else if (Math_fround(HEAPF32[$0 + 636 >> 2]) != Math_fround(0.0)) label = 47;
if ((label | 0) == 47) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(39313, 23, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($151, $1, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$166 = $0 + 676 | 0;
if (Math_fround(HEAPF32[$166 >> 2]) != Math_fround(0.0)) label = 51; else if (Math_fround(HEAPF32[$0 + 680 >> 2]) != Math_fround(0.0)) label = 51; else if (Math_fround(HEAPF32[$0 + 684 >> 2]) != Math_fround(0.0)) label = 51;
if ((label | 0) == 51) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(39337, 22, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($166, $1, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(39360, 19, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
$186 = HEAP32[$0 + 696 >> 2] | 0;
if (!$186) _fwrite(61277, 6, 1, $1) | 0; else FUNCTION_TABLE_vii[HEAP32[(HEAP32[$186 >> 2] | 0) + 72 >> 2] & 255]($186, $1);
$192 = (HEAP16[36078] | 0) + -1 << 16 >> 16;
HEAP16[36078] = $192;
$193 = $0 + 700 | 0;
if (!(HEAP32[$193 >> 2] | 0)) {
STACKTOP = sp;
return;
}
__Z11printIndentP8_IO_FILEi($1, $192 << 16 >> 16);
_fwrite(39380, 17, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
$199 = HEAP32[$193 >> 2] | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$199 >> 2] | 0) + 72 >> 2] & 255]($199, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
STACKTOP = sp;
return;
}
function __ZNK14SiGMLHandshape5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $104 = 0, $110 = 0, $116 = 0, $122 = 0, $130 = 0, $136 = 0, $142 = 0, $150 = 0, $156 = 0, $162 = 0, $21 = 0, $27 = 0, $3 = 0, $39 = 0, $9 = 0, $98 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 112 | 0;
$vararg_buffer37 = sp + 104 | 0;
$vararg_buffer34 = sp + 96 | 0;
$vararg_buffer31 = sp + 88 | 0;
$vararg_buffer28 = sp + 80 | 0;
$vararg_buffer25 = sp + 72 | 0;
$vararg_buffer22 = sp + 64 | 0;
$vararg_buffer19 = sp + 56 | 0;
$vararg_buffer16 = sp + 48 | 0;
$vararg_buffer13 = sp + 40 | 0;
$vararg_buffer10 = sp + 32 | 0;
$vararg_buffer7 = sp + 24 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$3 = $0 + 8 | 0;
if (HEAP32[$3 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(33218, 17, 1, $1) | 0;
HEAP32[$vararg_buffer >> 2] = HEAP32[$3 >> 2];
_fprintf($1, 35092, $vararg_buffer) | 0;
}
$9 = $0 + 12 | 0;
if (Math_fround(HEAPF32[$9 >> 2]) != Math_fround(-100.0)) label = 8; else if (Math_fround(HEAPF32[$0 + 16 >> 2]) != Math_fround(-100.0)) label = 8; else if (Math_fround(HEAPF32[$0 + 20 >> 2]) != Math_fround(-100.0)) label = 8; else if (!(Math_fround(HEAPF32[$0 + 24 >> 2]) == Math_fround(-100.0))) label = 8;
if ((label | 0) == 8) {
_fwrite(33236, 17, 1, $1) | 0;
__ZNK13FingerBending5printEP8_IO_FILE($9, $1);
_fputc(10, $1) | 0;
}
$21 = $0 + 28 | 0;
if (HEAP32[$21 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(33254, 17, 1, $1) | 0;
HEAP32[$vararg_buffer1 >> 2] = HEAP32[$21 >> 2];
_fprintf($1, 35092, $vararg_buffer1) | 0;
}
$27 = $0 + 32 | 0;
if (Math_fround(HEAPF32[$27 >> 2]) != Math_fround(-100.0)) label = 15; else if (Math_fround(HEAPF32[$0 + 36 >> 2]) != Math_fround(-100.0)) label = 15; else if (Math_fround(HEAPF32[$0 + 40 >> 2]) != Math_fround(-100.0)) label = 15; else if (!(Math_fround(HEAPF32[$0 + 44 >> 2]) == Math_fround(-100.0))) label = 15;
if ((label | 0) == 15) {
_fwrite(33272, 17, 1, $1) | 0;
__ZNK13FingerBending5printEP8_IO_FILE($27, $1);
_fputc(10, $1) | 0;
}
$39 = $0 + 48 | 0;
if (HEAP32[$39 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(33290, 15, 1, $1) | 0;
HEAP32[$vararg_buffer4 >> 2] = HEAP32[$39 >> 2];
_fprintf($1, 35092, $vararg_buffer4) | 0;
}
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(33306, 15, 1, $1) | 0;
HEAP32[$vararg_buffer7 >> 2] = HEAP32[$21 >> 2];
_fprintf($1, 33322, $vararg_buffer7) | 0;
_fwrite(33328, 10, 1, $1) | 0;
HEAP32[$vararg_buffer10 >> 2] = HEAP32[$0 + 60 >> 2];
_fprintf($1, 33339, $vararg_buffer10) | 0;
HEAP32[$vararg_buffer13 >> 2] = HEAP32[$0 + 64 >> 2];
_fprintf($1, 33339, $vararg_buffer13) | 0;
HEAP32[$vararg_buffer16 >> 2] = HEAP32[$0 + 68 >> 2];
_fprintf($1, 33339, $vararg_buffer16) | 0;
HEAP32[$vararg_buffer19 >> 2] = HEAP32[$0 + 72 >> 2];
_fprintf($1, 33339, $vararg_buffer19) | 0;
HEAP32[$vararg_buffer22 >> 2] = HEAP32[$0 + 76 >> 2];
_fprintf($1, 33339, $vararg_buffer22) | 0;
_fputc(10, $1) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
HEAP32[$vararg_buffer25 >> 2] = 32865;
_fprintf($1, 33343, $vararg_buffer25) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK13FingerBending5printEP8_IO_FILE($0 + 96 | 0, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
HEAP32[$vararg_buffer28 >> 2] = 33151;
_fprintf($1, 33343, $vararg_buffer28) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK13FingerBending5printEP8_IO_FILE($0 + 112 | 0, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
HEAP32[$vararg_buffer31 >> 2] = 33158;
_fprintf($1, 33343, $vararg_buffer31) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK13FingerBending5printEP8_IO_FILE($0 + 128 | 0, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
HEAP32[$vararg_buffer34 >> 2] = 33163;
_fprintf($1, 33343, $vararg_buffer34) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK13FingerBending5printEP8_IO_FILE($0 + 144 | 0, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
HEAP32[$vararg_buffer37 >> 2] = 33358;
_fprintf($1, 33343, $vararg_buffer37) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK12ThumbBending5printEP8_IO_FILE($0 + 160 | 0, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
if (HEAP32[$0 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(33364, 12, 1, $1) | 0;
__Z18printHandshapeTypeP8_IO_FILE13HandshapeType($1, HEAP32[$0 >> 2] | 0);
_fputc(10, $1) | 0;
}
$98 = $0 + 52 | 0;
if (HEAP16[$98 >> 1] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(33377, 17, 1, $1) | 0;
__Z11printDigitsP8_IO_FILEs($1, HEAP16[$98 >> 1] | 0);
_fputc(10, $1) | 0;
}
$104 = $0 + 54 | 0;
if (HEAP16[$104 >> 1] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(33395, 17, 1, $1) | 0;
__Z11printDigitsP8_IO_FILEs($1, HEAP16[$104 >> 1] | 0);
_fputc(10, $1) | 0;
}
$110 = $0 + 180 | 0;
if ((HEAP32[$110 >> 2] | 0) != -1) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(33413, 11, 1, $1) | 0;
__Z10printDigitP8_IO_FILE10DigitIndex($1, HEAP32[$110 >> 2] | 0);
_fputc(10, $1) | 0;
}
$116 = $0 + 184 | 0;
if ((HEAP32[$116 >> 2] | 0) != -1) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(33425, 11, 1, $1) | 0;
__Z10printDigitP8_IO_FILE10DigitIndex($1, HEAP32[$116 >> 2] | 0);
_fputc(10, $1) | 0;
}
$122 = $0 + 204 | 0;
if (HEAP32[$122 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(33437, 14, 1, $1) | 0;
_fputs(__ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17192] | 0, HEAP32[$122 >> 2] | 0) | 0, $1) | 0;
_fputc(10, $1) | 0;
}
$130 = $0 + 188 | 0;
if ((HEAP32[$130 >> 2] | 0) != -1) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(33452, 18, 1, $1) | 0;
__Z10printDigitP8_IO_FILE10DigitIndex($1, HEAP32[$130 >> 2] | 0);
_fputc(10, $1) | 0;
}
$136 = $0 + 192 | 0;
if ((HEAP32[$136 >> 2] | 0) != -1) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(33471, 18, 1, $1) | 0;
__Z10printDigitP8_IO_FILE10DigitIndex($1, HEAP32[$136 >> 2] | 0);
_fputc(10, $1) | 0;
}
$142 = $0 + 208 | 0;
if (HEAP32[$142 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(33490, 21, 1, $1) | 0;
_fputs(__ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17192] | 0, HEAP32[$142 >> 2] | 0) | 0, $1) | 0;
_fputc(10, $1) | 0;
}
$150 = $0 + 196 | 0;
if ((HEAP32[$150 >> 2] | 0) != -1) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(33512, 16, 1, $1) | 0;
__Z10printDigitP8_IO_FILE10DigitIndex($1, HEAP32[$150 >> 2] | 0);
_fputc(10, $1) | 0;
}
$156 = $0 + 200 | 0;
if ((HEAP32[$156 >> 2] | 0) != -1) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(33529, 16, 1, $1) | 0;
__Z10printDigitP8_IO_FILE10DigitIndex($1, HEAP32[$156 >> 2] | 0);
_fputc(10, $1) | 0;
}
$162 = $0 + 212 | 0;
if (HEAP32[$162 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(33546, 15, 1, $1) | 0;
_fputs(__ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17192] | 0, HEAP32[$162 >> 2] | 0) | 0, $1) | 0;
_fputc(10, $1) | 0;
}
if (!(HEAP8[$0 + 216 >> 0] | 0)) {
STACKTOP = sp;
return;
}
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(33562, 16, 1, $1) | 0;
STACKTOP = sp;
return;
}
function __ZN14OneArmAnimatorC2EP19OneHConcretePosturePK11HanimAvatar($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$1 = 0, $$118 = 0, $$2 = 0, $$219 = 0, $$3 = 0, $$320 = 0, $$4 = 0, $$421 = 0, $$5 = 0, $$522 = 0, $$ptr$1 = 0, $$ptr$2 = 0, $$ptr$3 = 0, $$ptr$lcssa$ph = 0, $10 = 0, $103 = 0, $104 = 0, $109 = 0, $110 = 0, $113 = 0, $115 = 0, $117 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $31 = 0, $33 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $48 = 0, $50 = 0, $53 = 0, $54 = 0, $59 = 0, $60 = 0, $62 = 0, $64 = 0, $65 = 0, $67 = 0, $69 = 0, $71 = 0, $72 = 0, $74 = 0, $77 = 0, $79 = 0, $81 = 0, $83 = 0, $88 = 0, $90 = 0, $92 = 0, $93 = 0, $95 = 0, $98 = 0, label = 0;
HEAP32[$0 >> 2] = 0;
$3 = $0 + 4 | 0;
HEAP32[$3 >> 2] = $2;
$4 = $0 + 8 | 0;
HEAP8[$4 >> 0] = HEAP8[$1 >> 0] | 0;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 32 >> 2] = 0;
__ZN17VectorController2C2Ev($0 + 36 | 0);
__THREW__ = 0;
invoke_vi(98, $0 + 184 | 0);
$10 = __THREW__;
__THREW__ = 0;
do if ($10 & 1) label = 8; else {
__THREW__ = 0;
invoke_vi(98, $0 + 196 | 0);
$13 = __THREW__;
__THREW__ = 0;
if ($13 & 1) label = 8; else {
__THREW__ = 0;
invoke_vi(98, $0 + 208 | 0);
$16 = __THREW__;
__THREW__ = 0;
if ($16 & 1) label = 8; else {
$18 = $0 + 220 | 0;
HEAP32[$18 >> 2] = 0;
$19 = $0 + 224 | 0;
__THREW__ = 0;
invoke_vi(99, $19 | 0);
$20 = __THREW__;
__THREW__ = 0;
if ($20 & 1) {
$33 = ___cxa_find_matching_catch_2() | 0;
$$4 = $33;
$$421 = tempRet0;
} else {
__THREW__ = 0;
invoke_vi(100, $0 + 868 | 0);
$23 = __THREW__;
__THREW__ = 0;
if ($23 & 1) {
$35 = ___cxa_find_matching_catch_2() | 0;
$$3 = $35;
$$320 = tempRet0;
} else {
HEAP32[$0 + 976 >> 2] = 0;
$26 = $0 + 980 | 0;
__THREW__ = 0;
invoke_vi(99, $26 | 0);
$27 = __THREW__;
__THREW__ = 0;
L11 : do if ($27 & 1) {
$37 = ___cxa_find_matching_catch_2() | 0;
$$2 = $37;
$$219 = tempRet0;
} else {
$$ptr$1 = $0 + 1624 | 0;
__THREW__ = 0;
invoke_vi(99, $$ptr$1 | 0);
$29 = __THREW__;
__THREW__ = 0;
if ($29 & 1) $$ptr$lcssa$ph = $$ptr$1; else {
$$ptr$2 = $0 + 2268 | 0;
__THREW__ = 0;
invoke_vi(99, $$ptr$2 | 0);
$115 = __THREW__;
__THREW__ = 0;
if ($115 & 1) $$ptr$lcssa$ph = $$ptr$2; else {
$$ptr$3 = $0 + 2912 | 0;
__THREW__ = 0;
invoke_vi(99, $$ptr$3 | 0);
$117 = __THREW__;
__THREW__ = 0;
if ($117 & 1) $$ptr$lcssa$ph = $$ptr$3; else {
$48 = HEAP32[(HEAP32[$3 >> 2] | 0) + 72 >> 2] | 0;
$50 = HEAPU8[$4 >> 0] | 0;
__THREW__ = 0;
$53 = invoke_ii(22, HEAP32[$48 + 20 + ($50 << 4) >> 2] | 0) | 0;
$54 = __THREW__;
__THREW__ = 0;
L18 : do if ($54 & 1) label = 17; else {
HEAP32[$0 + 16 >> 2] = $53;
__THREW__ = 0;
$59 = invoke_ii(22, HEAP32[$48 + 20 + ($50 << 4) + 4 >> 2] | 0) | 0;
$60 = __THREW__;
__THREW__ = 0;
if ($60 & 1) label = 17; else {
HEAP32[$0 + 20 >> 2] = $59;
__THREW__ = 0;
$103 = invoke_ii(22, HEAP32[$48 + 20 + ($50 << 4) + 8 >> 2] | 0) | 0;
$104 = __THREW__;
__THREW__ = 0;
if ($104 & 1) label = 17; else {
HEAP32[$0 + 24 >> 2] = $103;
__THREW__ = 0;
$109 = invoke_ii(22, HEAP32[$48 + 20 + ($50 << 4) + 12 >> 2] | 0) | 0;
$110 = __THREW__;
__THREW__ = 0;
if ($110 & 1) label = 17; else {
HEAP32[$0 + 28 >> 2] = $109;
__THREW__ = 0;
$64 = invoke_ii(20, 108) | 0;
$113 = __THREW__;
__THREW__ = 0;
do if (!($113 & 1)) {
__THREW__ = 0;
invoke_vi(100, $64 | 0);
$65 = __THREW__;
__THREW__ = 0;
if ($65 & 1) {
$71 = ___cxa_find_matching_catch_2() | 0;
$72 = tempRet0;
__ZdlPv($64);
$$1 = $71;
$$118 = $72;
break L18;
}
HEAP32[$18 >> 2] = $64;
__THREW__ = 0;
invoke_viif(2, $0 | 0, $1 | 0, 0.0);
$67 = __THREW__;
__THREW__ = 0;
if ($67 & 1) break;
return;
} while (0);
$69 = ___cxa_find_matching_catch_2() | 0;
$$1 = $69;
$$118 = tempRet0;
}
}
}
} while (0);
if ((label | 0) == 17) {
$62 = ___cxa_find_matching_catch_2() | 0;
$$1 = $62;
$$118 = tempRet0;
}
__THREW__ = 0;
invoke_vi(15, $0 + 2912 | 0);
$74 = __THREW__;
__THREW__ = 0;
if ($74 & 1) {
$92 = ___cxa_find_matching_catch_3(0) | 0;
$93 = tempRet0;
___clang_call_terminate($92);
}
__THREW__ = 0;
invoke_vi(15, $0 + 2268 | 0);
$77 = __THREW__;
__THREW__ = 0;
if ($77 & 1) {
$92 = ___cxa_find_matching_catch_3(0) | 0;
$93 = tempRet0;
___clang_call_terminate($92);
}
__THREW__ = 0;
invoke_vi(15, $0 + 1624 | 0);
$95 = __THREW__;
__THREW__ = 0;
if ($95 & 1) {
$92 = ___cxa_find_matching_catch_3(0) | 0;
$93 = tempRet0;
___clang_call_terminate($92);
}
__THREW__ = 0;
invoke_vi(15, $0 + 980 | 0);
$98 = __THREW__;
__THREW__ = 0;
if (!($98 & 1)) {
$$2 = $$1;
$$219 = $$118;
break;
}
$92 = ___cxa_find_matching_catch_3(0) | 0;
$93 = tempRet0;
___clang_call_terminate($92);
}
}
}
$39 = ___cxa_find_matching_catch_2() | 0;
$40 = tempRet0;
$42 = $$ptr$lcssa$ph;
while (1) {
$42 = $42 + -644 | 0;
__THREW__ = 0;
invoke_vi(15, $42 | 0);
$43 = __THREW__;
__THREW__ = 0;
if ($43 & 1) break;
if (($42 | 0) == ($26 | 0)) {
$$2 = $39;
$$219 = $40;
break L11;
}
}
$92 = ___cxa_find_matching_catch_3(0) | 0;
$93 = tempRet0;
___clang_call_terminate($92);
} while (0);
__THREW__ = 0;
$79 = __THREW__;
__THREW__ = 0;
if ($79 & 1) {
$92 = ___cxa_find_matching_catch_3(0) | 0;
$93 = tempRet0;
___clang_call_terminate($92);
} else {
$$3 = $$2;
$$320 = $$219;
}
}
__THREW__ = 0;
invoke_vi(15, $19 | 0);
$81 = __THREW__;
__THREW__ = 0;
if ($81 & 1) {
$92 = ___cxa_find_matching_catch_3(0) | 0;
$93 = tempRet0;
___clang_call_terminate($92);
} else {
$$4 = $$3;
$$421 = $$320;
}
}
$83 = HEAP32[$18 >> 2] | 0;
if (!$83) {
$$5 = $$4;
$$522 = $$421;
} else {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$83 >> 2] | 0) + 4 >> 2] | 0, $83 | 0);
$88 = __THREW__;
__THREW__ = 0;
if ($88 & 1) {
$92 = ___cxa_find_matching_catch_3(0) | 0;
$93 = tempRet0;
___clang_call_terminate($92);
} else {
HEAP32[$18 >> 2] = 0;
$$5 = $$4;
$$522 = $$421;
break;
}
}
}
}
} while (0);
if ((label | 0) == 8) {
$31 = ___cxa_find_matching_catch_2() | 0;
$$5 = $31;
$$522 = tempRet0;
}
__THREW__ = 0;
$90 = __THREW__;
__THREW__ = 0;
if ($90 & 1) {
$92 = ___cxa_find_matching_catch_3(0) | 0;
$93 = tempRet0;
___clang_call_terminate($92);
} else ___resumeException($$5 | 0);
}
function __ZN11TokenStream9nextTokenEv($0) {
$0 = $0 | 0;
var $$023$off0$ph72 = 0, $$4 = 0, $$lcssa = 0, $$lcssa58 = 0, $$lcssa61 = 0, $$lcssa67 = 0, $$lcssa79 = 0, $$pre$i = 0, $$pre$phiZ2D = 0, $10 = 0, $102 = 0, $105 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $126 = 0, $128 = 0, $13 = 0, $135 = 0, $137 = 0, $14 = 0, $140 = 0, $141 = 0, $147 = 0, $148 = 0, $154 = 0, $159 = 0, $16 = 0, $165 = 0, $166 = 0, $169 = 0, $171 = 0, $172 = 0, $178 = 0, $183 = 0, $19 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $200 = 0, $201 = 0, $208 = 0, $209 = 0, $210 = 0, $26 = 0, $27 = 0, $29 = 0, $33 = 0, $34 = 0, $4 = 0, $40 = 0, $41 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $57 = 0, $58 = 0, $7 = 0, $75 = 0, $77 = 0, $86 = 0, $87 = 0, label = 0;
$2 = HEAP32[$0 + 20 >> 2] | 0;
if ($2 | 0) {
$4 = $2 + 12 | 0;
$5 = HEAP32[$4 >> 2] | 0;
if (($5 | 0) > 0) {
$7 = $5 + -1 | 0;
$10 = HEAP32[(HEAP32[$2 >> 2] | 0) + ($7 << 2) >> 2] | 0;
HEAP32[$4 >> 2] = $7;
$$4 = $10;
return $$4 | 0;
}
}
$11 = $0 + 24 | 0;
$13 = $0 + 16 | 0;
$14 = HEAP32[$13 >> 2] | 0;
$16 = HEAP32[$14 + 12 >> 2] | 0;
if ((HEAP32[$11 >> 2] | 0) < ($16 | 0)) $33 = $16; else {
$19 = HEAP32[$0 + 4 >> 2] | 0;
if (!$19) $33 = $16; else {
$$pre$i = HEAP32[$14 + 8 >> 2] | 0;
if (($16 | 0) > -1 & ($$pre$i | 0) > ($16 | 0)) $26 = (HEAP32[$14 >> 2] | 0) + $16 | 0; else $26 = 0;
$27 = _fread($26, 1, $$pre$i - $16 | 0, $19) | 0;
$29 = (HEAP32[$13 >> 2] | 0) + 12 | 0;
HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + $27;
HEAP32[$11 >> 2] = 0;
$33 = HEAP32[(HEAP32[$13 >> 2] | 0) + 12 >> 2] | 0;
}
}
if (($33 | 0) < 1) {
$$4 = 0;
return $$4 | 0;
}
$34 = $0 + 37 | 0;
if (!(HEAP8[$34 >> 0] | 0)) if (HEAP8[$0 + 38 >> 0] | 0) {
$$4 = 0;
return $$4 | 0;
}
__ZN11TokenStream11requireCharEv($0);
$40 = HEAP32[$11 >> 2] | 0;
$41 = HEAP32[$13 >> 2] | 0;
if (($40 | 0) >= (HEAP32[$41 + 12 >> 2] | 0)) {
$$4 = 0;
return $$4 | 0;
}
$45 = $0 + 12 | 0;
$46 = $0 + 35 | 0;
$47 = $0 + 32 | 0;
$$023$off0$ph72 = 0;
$208 = $41;
$209 = $40;
L23 : while (1) {
if ($$023$off0$ph72) {
$75 = $209;
$77 = $208;
label = 29;
break;
} else {
$49 = $209;
$51 = $208;
}
while (1) {
if (($49 | 0) < 0) {
HEAP32[$11 >> 2] = $49 + 1;
$57 = 0;
} else {
$53 = HEAP8[(HEAP32[$51 >> 2] | 0) + $49 >> 0] | 0;
HEAP32[$11 >> 2] = $49 + 1;
if ($53 << 24 >> 24 == 92) break; else $57 = $53;
}
$58 = __Z9isNewlinec($57) | 0;
if ($58) HEAP32[$45 >> 2] = (HEAP32[$45 >> 2] | 0) + 1;
do if (!(HEAP8[$46 >> 0] | 0)) {
if (!((HEAP8[$34 >> 0] | 0) != 0 | $58 ^ 1)) {
label = 37;
break L23;
}
if ($57 << 24 >> 24 == 35 & (HEAP8[$47 >> 0] | 0) != 0) {
HEAP8[$46 >> 0] = 1;
break;
}
if (!$58) if (!(__Z22isHorizontalWhiteSpacec($57) | 0)) {
$$lcssa67 = $57;
break L23;
}
} else if ($58) HEAP8[$46 >> 0] = 0; while (0);
__ZN11TokenStream11requireCharEv($0);
$49 = HEAP32[$11 >> 2] | 0;
$51 = HEAP32[$13 >> 2] | 0;
if (($49 | 0) >= (HEAP32[$51 + 12 >> 2] | 0)) {
$$4 = 0;
label = 79;
break L23;
}
}
HEAP8[$34 >> 0] = 1;
__ZN11TokenStream11requireCharEv($0);
$209 = HEAP32[$11 >> 2] | 0;
$208 = HEAP32[$13 >> 2] | 0;
if (($209 | 0) >= (HEAP32[$208 + 12 >> 2] | 0)) {
$$4 = 0;
label = 79;
break;
} else $$023$off0$ph72 = 1;
}
L45 : do if ((label | 0) == 29) {
while (1) {
label = 0;
if (($75 | 0) < 0) $86 = 0; else $86 = HEAP8[(HEAP32[$77 >> 2] | 0) + $75 >> 0] | 0;
HEAP32[$11 >> 2] = $75 + 1;
$87 = __Z9isNewlinec($86) | 0;
if ($87) HEAP32[$45 >> 2] = (HEAP32[$45 >> 2] | 0) + 1;
do if (!(HEAP8[$46 >> 0] | 0)) {
if ($86 << 24 >> 24 == 35 & (HEAP8[$47 >> 0] | 0) != 0) {
HEAP8[$46 >> 0] = 1;
break;
}
if (!$87) if (!(__Z22isHorizontalWhiteSpacec($86) | 0)) {
$$lcssa67 = $86;
break L45;
}
} else if ($87) HEAP8[$46 >> 0] = 0; while (0);
__ZN11TokenStream11requireCharEv($0);
$75 = HEAP32[$11 >> 2] | 0;
$77 = HEAP32[$13 >> 2] | 0;
if (($75 | 0) >= (HEAP32[$77 + 12 >> 2] | 0)) {
$$4 = 0;
break;
} else label = 29;
}
return $$4 | 0;
} else if ((label | 0) == 37) {
HEAP8[$0 + 38 >> 0] = 1;
$$4 = 0;
return $$4 | 0;
} else if ((label | 0) == 79) return $$4 | 0; while (0);
$102 = $0 + 36 | 0;
HEAP8[$34 >> 0] = HEAP8[$102 >> 0] ^ 1;
$105 = $0 + 38 | 0;
HEAP8[$105 >> 0] = 0;
$108 = (HEAP8[$0 + 33 >> 0] | 0) != 0;
$109 = $$lcssa67 << 24 >> 24 == 34;
$110 = $0 + 34 | 0;
HEAP8[$110 >> 0] = $109 & $108 & 1;
$115 = $0 + 28 | 0;
HEAP32[$115 >> 2] = (HEAP32[$11 >> 2] | 0) + (($109 & $108 ^ 1) << 31 >> 31);
__ZN11TokenStream11requireCharEv($0);
$116 = HEAP32[$11 >> 2] | 0;
$117 = HEAP32[$13 >> 2] | 0;
$118 = $117 + 12 | 0;
$119 = HEAP32[$118 >> 2] | 0;
L69 : do if (($116 | 0) < ($119 | 0)) {
$135 = $116;
$137 = $117;
while (1) {
if (($135 | 0) < 0) $140 = 0; else $140 = HEAP8[(HEAP32[$137 >> 2] | 0) + $135 >> 0] | 0;
$141 = __Z9isNewlinec($140) | 0;
if ($141) HEAP32[$45 >> 2] = (HEAP32[$45 >> 2] | 0) + 1;
if ($140 << 24 >> 24 == 35 & (HEAP8[$47 >> 0] | 0) != 0) {
label = 55;
break;
}
if ($141) {
$$lcssa79 = 0;
break;
}
$165 = __Z22isHorizontalWhiteSpacec($140) | 0;
$166 = HEAP8[$110 >> 0] | 0;
if ($165) if (!($166 << 24 >> 24)) {
$$lcssa79 = 1;
break;
} else $169 = 1; else $169 = $166;
if ($140 << 24 >> 24 == 34 & $169 << 24 >> 24 != 0) {
$$lcssa79 = 1;
break;
}
HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 1;
__ZN11TokenStream11requireCharEv($0);
$135 = HEAP32[$11 >> 2] | 0;
$194 = HEAP32[$13 >> 2] | 0;
$195 = $194 + 12 | 0;
$196 = HEAP32[$195 >> 2] | 0;
if (($135 | 0) >= ($196 | 0)) {
$$lcssa = $196;
$$lcssa58 = $195;
$$lcssa61 = $194;
label = 44;
break L69;
} else $137 = $194;
}
if ((label | 0) == 55) {
$147 = HEAP32[$13 >> 2] | 0;
$148 = HEAP32[$11 >> 2] | 0;
if (($148 | 0) >= 0) {
if ((HEAP32[$147 + 8 >> 2] | 0) <= ($148 | 0)) {
$154 = HEAP32[$147 + 4 >> 2] | 0;
__ZN12DynamicArrayIcLc0EE6resizeEi($147, ($154 | 0) > ($148 | 0) ? $154 : $148 + 1 + ($148 >>> 1) | 0);
}
$159 = $147 + 12 | 0;
if ((HEAP32[$159 >> 2] | 0) <= ($148 | 0)) HEAP32[$159 >> 2] = $148 + 1;
HEAP8[(HEAP32[$147 >> 2] | 0) + $148 >> 0] = 0;
}
HEAP8[$46 >> 0] = 1;
break;
}
$171 = HEAP32[$13 >> 2] | 0;
$172 = HEAP32[$11 >> 2] | 0;
if (($172 | 0) >= 0) {
if ((HEAP32[$171 + 8 >> 2] | 0) <= ($172 | 0)) {
$178 = HEAP32[$171 + 4 >> 2] | 0;
__ZN12DynamicArrayIcLc0EE6resizeEi($171, ($178 | 0) > ($172 | 0) ? $178 : $172 + 1 + ($172 >>> 1) | 0);
}
$183 = $171 + 12 | 0;
if ((HEAP32[$183 >> 2] | 0) <= ($172 | 0)) HEAP32[$183 >> 2] = $172 + 1;
HEAP8[(HEAP32[$171 >> 2] | 0) + $172 >> 0] = 0;
}
if (!((HEAP8[$102 >> 0] | 0) == 0 | $$lcssa79)) HEAP8[$105 >> 0] = 1;
} else {
$$lcssa = $119;
$$lcssa58 = $118;
$$lcssa61 = $117;
label = 44;
} while (0);
if ((label | 0) == 44) if (($$lcssa | 0) >= 0) {
if ((HEAP32[$$lcssa61 + 8 >> 2] | 0) > ($$lcssa | 0)) {
$$pre$phiZ2D = $$lcssa + 1 | 0;
label = 48;
} else {
$126 = HEAP32[$$lcssa61 + 4 >> 2] | 0;
$128 = $$lcssa + 1 | 0;
__ZN12DynamicArrayIcLc0EE6resizeEi($$lcssa61, ($126 | 0) > ($$lcssa | 0) ? $126 : $128 + ($$lcssa >>> 1) | 0);
if ((HEAP32[$$lcssa58 >> 2] | 0) <= ($$lcssa | 0)) {
$$pre$phiZ2D = $128;
label = 48;
}
}
if ((label | 0) == 48) HEAP32[$$lcssa58 >> 2] = $$pre$phiZ2D;
HEAP8[(HEAP32[$$lcssa61 >> 2] | 0) + $$lcssa >> 0] = 0;
}
HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 1;
$200 = HEAP32[$13 >> 2] | 0;
$201 = HEAP32[$115 >> 2] | 0;
if (($201 | 0) < 0) $210 = 0; else if ((HEAP32[$200 + 8 >> 2] | 0) > ($201 | 0)) $210 = (HEAP32[$200 >> 2] | 0) + $201 | 0; else $210 = 0;
HEAP32[$115 >> 2] = -1;
$$4 = $210;
return $$4 | 0;
}
function __Z15SAMPAToMorphingP7XMLCell($0) {
$0 = $0 | 0;
var $$012$i$i = 0, $$012$i$i$i = 0, $$012$i$i$i70 = 0, $$01215$i$i = 0, $$01215$i$i$i = 0, $$01215$i$i$i67 = 0, $$01216$i$i = 0, $$01216$i$i$i = 0, $$01216$i$i$i68 = 0, $$05989 = 0, $$06$i = 0, $$06$i76 = 0, $$1 = 0, $$2 = 0, $$pr97 = 0, $$pre$i79 = 0, $$pre$phi$iZ2D = 0, $$sink$i$i = 0, $$sink$i$i$i = 0, $$sink$i$i$i72 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $112 = 0, $114 = 0, $127 = 0, $132 = 0, $134 = 0, $137 = 0, $138 = 0, $144 = 0, $146 = 0, $147 = 0, $149 = 0, $150 = 0, $151 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $26 = 0, $28 = 0, $31 = 0, $32 = 0, $38 = 0, $41 = 0, $42 = 0, $45 = 0, $46 = 0, $5 = 0, $58 = 0, $6 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $73 = 0, $77 = 0, $81 = 0, $82 = 0, $85 = 0, $86 = 0, $98 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer5 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$2 = HEAP32[$0 + 4 >> 2] | 0;
$5 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(49724, HEAP32[$2 + 4 >> 2] | 0) | 0;
$6 = HEAP32[$2 >> 2] | 0;
L1 : do if ((HEAP16[$6 + ($5 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i = HEAP32[$6 + ($5 << 3) >> 2] | 0;
if (!$$01215$i$i) label = 6; else {
$$01216$i$i = $$01215$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(49724, HEAP32[$$01216$i$i >> 2] | 0) | 0) break;
$$012$i$i = HEAP32[$$01216$i$i + 8 >> 2] | 0;
if (!$$012$i$i) {
label = 6;
break L1;
} else $$01216$i$i = $$012$i$i;
}
$$sink$i$i = $$01216$i$i + 4 | 0;
}
} else label = 6; while (0);
if ((label | 0) == 6) $$sink$i$i = $2 + 20 | 0;
$18 = HEAP32[$$sink$i$i >> 2] | 0;
if (!$18) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer >> 2] = HEAP32[$0 >> 2];
__Z7eprintfPKcz(46846, $vararg_buffer);
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
$21 = __Z13TokeniseSAMPAPKc($18) | 0;
if (!$21) {
__Z7LogTimev() | 0;
$149 = HEAP32[$0 >> 2] | 0;
HEAP32[$vararg_buffer5 >> 2] = $18;
HEAP32[$vararg_buffer5 + 4 >> 2] = $149;
__Z7eprintfPKcz(46887, $vararg_buffer5);
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
$23 = $21 + 12 | 0;
L18 : do switch (HEAP32[$23 >> 2] | 0) {
case 0:
{
__Z7LogTimev() | 0;
$25 = HEAP32[$0 >> 2] | 0;
HEAP32[$vararg_buffer1 >> 2] = $18;
HEAP32[$vararg_buffer1 + 4 >> 2] = $25;
__Z7eprintfPKcz(46887, $vararg_buffer1);
$26 = HEAP32[$21 >> 2] | 0;
do if ($26 | 0) {
$28 = HEAP32[$23 >> 2] | 0;
if (($28 | 0) > 0) {
$$06$i = 0;
$150 = $28;
$31 = $26;
while (1) {
$32 = HEAP32[$31 + ($$06$i << 2) >> 2] | 0;
if (!$32) $38 = $150; else {
_free($32);
HEAP32[(HEAP32[$21 >> 2] | 0) + ($$06$i << 2) >> 2] = 0;
$38 = HEAP32[$23 >> 2] | 0;
}
$$06$i = $$06$i + 1 | 0;
$31 = HEAP32[$21 >> 2] | 0;
if (($$06$i | 0) >= ($38 | 0)) break; else $150 = $38;
}
if (!$31) break; else $$pr97 = $31;
} else $$pr97 = $26;
_free($$pr97);
} while (0);
__ZdlPv($21);
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
case 1:
{
$41 = HEAP32[HEAP32[$21 >> 2] >> 2] | 0;
$42 = HEAP32[16659] | 0;
$45 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($41, HEAP32[$42 + 4 >> 2] | 0) | 0;
$46 = HEAP32[$42 >> 2] | 0;
L66 : do if ((HEAP16[$46 + ($45 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i = HEAP32[$46 + ($45 << 3) >> 2] | 0;
if (!$$01215$i$i$i) label = 24; else {
$$01216$i$i$i = $$01215$i$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($41, HEAP32[$$01216$i$i$i >> 2] | 0) | 0) break;
$$012$i$i$i = HEAP32[$$01216$i$i$i + 8 >> 2] | 0;
if (!$$012$i$i$i) {
label = 24;
break L66;
} else $$01216$i$i$i = $$012$i$i$i;
}
$$sink$i$i$i = $$01216$i$i$i + 4 | 0;
}
} else label = 24; while (0);
if ((label | 0) == 24) $$sink$i$i$i = $42 + 20 | 0;
$58 = HEAP32[$$sink$i$i$i >> 2] | 0;
if (!$58) $$2 = 0; else $$2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$58 >> 2] | 0) + 8 >> 2] & 63]($58) | 0;
break;
}
default:
{
$64 = __Znwj(28) | 0;
$65 = $64 + 4 | 0;
HEAP32[$65 >> 2] = 0;
HEAP32[$65 + 4 >> 2] = 0;
HEAP32[$65 + 8 >> 2] = 0;
HEAP32[$65 + 12 >> 2] = 0;
HEAP32[$64 + 20 >> 2] = 3;
HEAP32[$64 >> 2] = 3324;
__THREW__ = 0;
$67 = invoke_ii(20, 16) | 0;
$68 = __THREW__;
__THREW__ = 0;
if ($68 & 1) {
$147 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($64);
___resumeException($147 | 0);
}
HEAP32[$67 + 4 >> 2] = 10;
HEAP32[$67 + 12 >> 2] = 0;
HEAP32[$67 >> 2] = 0;
HEAP32[$67 + 8 >> 2] = 0;
$73 = $64 + 24 | 0;
HEAP32[$73 >> 2] = $67;
if ((HEAP32[$23 >> 2] | 0) > 0) {
$$05989 = 0;
do {
$81 = HEAP32[(HEAP32[$21 >> 2] | 0) + ($$05989 << 2) >> 2] | 0;
$82 = HEAP32[16659] | 0;
$85 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($81, HEAP32[$82 + 4 >> 2] | 0) | 0;
$86 = HEAP32[$82 >> 2] | 0;
L27 : do if ((HEAP16[$86 + ($85 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i67 = HEAP32[$86 + ($85 << 3) >> 2] | 0;
if (!$$01215$i$i$i67) label = 37; else {
$$01216$i$i$i68 = $$01215$i$i$i67;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($81, HEAP32[$$01216$i$i$i68 >> 2] | 0) | 0) break;
$$012$i$i$i70 = HEAP32[$$01216$i$i$i68 + 8 >> 2] | 0;
if (!$$012$i$i$i70) {
label = 37;
break L27;
} else $$01216$i$i$i68 = $$012$i$i$i70;
}
$$sink$i$i$i72 = $$01216$i$i$i68 + 4 | 0;
}
} else label = 37; while (0);
if ((label | 0) == 37) {
label = 0;
$$sink$i$i$i72 = $82 + 20 | 0;
}
$98 = HEAP32[$$sink$i$i$i72 >> 2] | 0;
if ($98 | 0) {
$103 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$98 >> 2] | 0) + 8 >> 2] & 63]($98) | 0;
$104 = HEAP32[$73 >> 2] | 0;
$105 = $104 + 12 | 0;
$106 = HEAP32[$105 >> 2] | 0;
if (($106 | 0) >= 0) {
if ((HEAP32[$104 + 8 >> 2] | 0) > ($106 | 0)) {
$$pre$phi$iZ2D = $106 + 1 | 0;
label = 43;
} else {
$112 = HEAP32[$104 + 4 >> 2] | 0;
$114 = $106 + 1 | 0;
__ZN13DynamicArrayPI18AbstractTimedMorphE6resizeEi($104, ($112 | 0) > ($106 | 0) ? $112 : $114 + ($106 >>> 1) | 0);
if ((HEAP32[$105 >> 2] | 0) <= ($106 | 0)) {
$$pre$phi$iZ2D = $114;
label = 43;
}
}
if ((label | 0) == 43) {
label = 0;
HEAP32[$105 >> 2] = $$pre$phi$iZ2D;
}
HEAP32[(HEAP32[$104 >> 2] | 0) + ($106 << 2) >> 2] = $103;
}
}
$$05989 = $$05989 + 1 | 0;
} while (($$05989 | 0) < (HEAP32[$23 >> 2] | 0));
$77 = HEAP32[$73 >> 2] | 0;
} else $77 = $67;
switch (HEAP32[$77 + 12 >> 2] | 0) {
case 0:
{
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$64 >> 2] | 0) + 4 >> 2] & 255]($64);
$$2 = 0;
break L18;
break;
}
case 1:
{
$127 = HEAP32[HEAP32[$77 >> 2] >> 2] | 0;
HEAP32[$77 + 12 >> 2] = 0;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$64 >> 2] | 0) + 4 >> 2] & 255]($64);
$$2 = $127;
break L18;
break;
}
default:
{
$$2 = $64;
break L18;
}
}
}
} while (0);
$132 = HEAP32[$21 >> 2] | 0;
do if ($132 | 0) {
$134 = HEAP32[$23 >> 2] | 0;
if (($134 | 0) > 0) {
$$06$i76 = 0;
$137 = $132;
$151 = $134;
while (1) {
$138 = HEAP32[$137 + ($$06$i76 << 2) >> 2] | 0;
if (!$138) {
$$pre$i79 = $137;
$144 = $151;
} else {
_free($138);
HEAP32[(HEAP32[$21 >> 2] | 0) + ($$06$i76 << 2) >> 2] = 0;
$$pre$i79 = HEAP32[$21 >> 2] | 0;
$144 = HEAP32[$23 >> 2] | 0;
}
$$06$i76 = $$06$i76 + 1 | 0;
if (($$06$i76 | 0) >= ($144 | 0)) break; else {
$137 = $$pre$i79;
$151 = $144;
}
}
if (!$$pre$i79) break; else $146 = $$pre$i79;
} else $146 = $132;
_free($146);
} while (0);
__ZdlPv($21);
$$1 = $$2;
STACKTOP = sp;
return $$1 | 0;
}
function __ZN7Gesture24SetConstellationDefaultsEv($0) {
$0 = $0 | 0;
var $$0$off0 = 0, $$027$off0 = 0, $$sroa$049$0$$sroa_idx = 0, $$sroa$049$0$$sroa_idx51 = 0, $$sroa$049$0$extract$trunc54 = 0, $$sroa$057$0$$sroa_idx = 0, $$sroa$057$0$$sroa_idx59 = 0, $$sroa$057$0$extract$trunc62 = 0, $1 = 0, $102 = 0, $105 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $115 = 0, $116 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $131 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $146 = 0, $15 = 0, $153 = 0, $19 = 0, $2 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $37 = 0, $4 = 0, $48 = 0, $5 = 0, $50 = 0, $51 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $67 = 0, $68 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $82 = 0, $9 = 0, $90 = 0, $94 = 0, $99 = 0, $brmerge$demorgan = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$1 = sp + 16 | 0;
$2 = sp + 12 | 0;
$3 = sp + 8 | 0;
$4 = sp + 4 | 0;
$5 = $0 + 40 | 0;
$6 = HEAP32[$5 >> 2] | 0;
if (!$6) {
STACKTOP = sp;
return;
}
$9 = HEAP32[16607] | 0;
$11 = (($9 ^ HEAP32[$6 >> 2]) & 16777215 | 0) != 0;
$15 = ((HEAP32[$6 + 12 >> 2] ^ $9) & 16777215 | 0) != 0;
$19 = ((HEAP32[$6 + 24 >> 2] ^ $9) & 16777215 | 0) != 0;
do if (0) {
__Z7eprintfPKcz(29090, sp);
$21 = HEAP32[$5 >> 2] | 0;
if (!$21) {
__Z5eputsPKc(61277);
break;
} else {
__ZNK20ArmHandConstellation5printEP8_IO_FILE($21, HEAP32[16082] | 0);
break;
}
} while (0);
$24 = $0 + 13 | 0;
$25 = HEAP8[$24 >> 0] | 0;
if (!($25 & 4)) $37 = $25; else {
__ZN20ArmHandConstellation18SetDefaultHandsiteEbbPK9HandshapePK11HanimAvatar(HEAP32[$5 >> 2] | 0, 1, ($25 & 64) != 0, HEAP32[(HEAP32[$0 + 20 >> 2] | 0) + 56 >> 2] | 0, HEAP32[$0 >> 2] | 0);
$37 = HEAP8[$24 >> 0] | 0;
}
if ($37 & 8) __ZN20ArmHandConstellation18SetDefaultHandsiteEbbPK9HandshapePK11HanimAvatar(HEAP32[$5 >> 2] | 0, 0, ($37 & 64) != 0, HEAP32[(HEAP32[$0 + 24 >> 2] | 0) + 56 >> 2] | 0, HEAP32[$0 >> 2] | 0);
$brmerge$demorgan = $15 & $19;
if ($11 | $brmerge$demorgan) {
if ($brmerge$demorgan) {
$57 = HEAP32[$5 >> 2] | 0;
$58 = $57 + 12 | 0;
$59 = HEAPU16[$58 >> 1] | 0 | (HEAPU8[$58 + 2 >> 0] | 0) << 16;
if (($59 & 252 | 0) == 12 | (($59 & 1015808 | 0) != 0 | (($59 & 255) + -1 | 0) >>> 0 < 11)) {
$67 = $57 + 24 | 0;
$68 = HEAPU16[$67 >> 1] | 0 | (HEAPU8[$67 + 2 >> 0] | 0) << 16;
if (($68 & 252 | 0) == 12 | (($68 & 1015808 | 0) != 0 | (($68 & 255) + -1 | 0) >>> 0 < 11)) {
$76 = $57 + 36 | 0;
$77 = $57 + 24 | 0;
HEAP16[$76 >> 1] = HEAP16[$77 >> 1] | 0;
HEAP8[$76 + 2 >> 0] = HEAP8[$77 + 2 >> 0] | 0;
$78 = HEAP32[$5 >> 2] | 0;
$79 = $78 + 40 | 0;
$80 = $78 + 12 | 0;
HEAP16[$79 >> 1] = HEAP16[$80 >> 1] | 0;
HEAP8[$79 + 2 >> 0] = HEAP8[$80 + 2 >> 0] | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($3, 21, 0, 0, 0, 3, 0);
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($4, 21, 0, 0, 0, 3, 0);
$82 = HEAP32[$3 >> 2] | 0;
$$sroa$049$0$extract$trunc54 = ($82 & 255 | 0) == 21 ? $82 : HEAP32[$4 >> 2] | 0;
$$sroa$049$0$$sroa_idx51 = (HEAP32[$5 >> 2] | 0) + 12 | 0;
HEAP16[$$sroa$049$0$$sroa_idx51 >> 1] = $$sroa$049$0$extract$trunc54;
HEAP8[$$sroa$049$0$$sroa_idx51 + 2 >> 0] = $$sroa$049$0$extract$trunc54 >>> 16;
$$sroa$049$0$$sroa_idx = (HEAP32[$5 >> 2] | 0) + 24 | 0;
HEAP16[$$sroa$049$0$$sroa_idx >> 1] = $$sroa$049$0$extract$trunc54;
HEAP8[$$sroa$049$0$$sroa_idx + 2 >> 0] = $$sroa$049$0$extract$trunc54 >>> 16;
}
}
}
} else {
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($1, 21, 0, 0, 0, 3, 0);
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($2, 21, 0, 0, 0, 3, 0);
do if ($15) {
$48 = (HEAP32[$5 >> 2] | 0) + 24 | 0;
HEAP16[$48 >> 1] = HEAP16[$2 >> 1] | 0;
HEAP8[$48 + 2 >> 0] = HEAP8[$2 + 2 >> 0] | 0;
} else if ($19) {
$50 = (HEAP32[$5 >> 2] | 0) + 12 | 0;
HEAP16[$50 >> 1] = HEAP16[$1 >> 1] | 0;
HEAP8[$50 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
break;
} else {
$51 = HEAP32[$1 >> 2] | 0;
$$sroa$057$0$extract$trunc62 = ($51 & 255 | 0) == 21 ? $51 : HEAP32[$2 >> 2] | 0;
$$sroa$057$0$$sroa_idx59 = (HEAP32[$5 >> 2] | 0) + 12 | 0;
HEAP16[$$sroa$057$0$$sroa_idx59 >> 1] = $$sroa$057$0$extract$trunc62;
HEAP8[$$sroa$057$0$$sroa_idx59 + 2 >> 0] = $$sroa$057$0$extract$trunc62 >>> 16;
$$sroa$057$0$$sroa_idx = (HEAP32[$5 >> 2] | 0) + 24 | 0;
HEAP16[$$sroa$057$0$$sroa_idx >> 1] = $$sroa$057$0$extract$trunc62;
HEAP8[$$sroa$057$0$$sroa_idx + 2 >> 0] = $$sroa$057$0$extract$trunc62 >>> 16;
break;
} while (0);
}
$90 = HEAP32[(HEAP32[$0 + 20 >> 2] | 0) + 56 >> 2] | 0;
$94 = HEAP32[(HEAP32[$0 + 24 >> 2] | 0) + 56 >> 2] | 0;
__ZL16CompleteHandsiteR6SiteIDRK14SiGMLHandshape((HEAP32[$5 >> 2] | 0) + 36 | 0, $90);
__ZL16CompleteHandsiteR6SiteIDRK14SiGMLHandshape((HEAP32[$5 >> 2] | 0) + 40 | 0, $94);
do if ($11) {
$99 = HEAP32[17187] | 0;
$102 = HEAP8[$99 + (HEAP32[$90 >> 2] | 0) >> 0] | 0;
$105 = HEAP8[$99 + (HEAP32[$94 >> 2] | 0) >> 0] | 0;
if ($102 << 24 >> 24 == $105 << 24 >> 24) {
$107 = HEAP32[$5 >> 2] | 0;
$108 = $107 + 24 | 0;
$109 = HEAPU16[$108 >> 1] | 0 | (HEAPU8[$108 + 2 >> 0] | 0) << 16;
$115 = $107 + 12 | 0;
$116 = HEAPU16[$115 >> 1] | 0 | (HEAPU8[$115 + 2 >> 0] | 0) << 16;
$$0$off0 = ($109 & 1015808 | 0) != 0 | (($109 & 255) + -1 | 0) >>> 0 < 11;
$$027$off0 = ($116 & 1015808 | 0) != 0 | (($116 & 255) + -1 | 0) >>> 0 < 11;
} else {
$$0$off0 = $102 << 24 >> 24 != 0;
$$027$off0 = $105 << 24 >> 24 != 0;
}
if ($$027$off0 ^ $$0$off0) {
$123 = HEAP32[$5 >> 2] | 0;
if ($$0$off0) {
$124 = $123 + 12 | 0;
HEAP32[$124 >> 2] = HEAP32[$123 >> 2];
HEAP32[$124 + 4 >> 2] = HEAP32[$123 + 4 >> 2];
HEAP32[$124 + 8 >> 2] = HEAP32[$123 + 8 >> 2];
$125 = HEAP32[$5 >> 2] | 0;
HEAP16[$125 >> 1] = 0;
HEAP8[$125 + 2 >> 0] = 0;
$126 = $125 + 4 | 0;
HEAP16[$126 >> 1] = 0;
HEAP8[$126 + 2 >> 0] = 0;
$127 = HEAP32[$5 >> 2] | 0;
$128 = $127 + 24 | 0;
$129 = $127 + 36 | 0;
HEAP16[$128 >> 1] = HEAP16[$129 >> 1] | 0;
HEAP8[$128 + 2 >> 0] = HEAP8[$129 + 2 >> 0] | 0;
$131 = (HEAP32[$5 >> 2] | 0) + 28 | 0;
HEAP16[$131 >> 1] = 0;
HEAP8[$131 + 2 >> 0] = 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($1, 1, 2 - ((HEAP8[$24 >> 0] & 64) >>> 6) | 0, 0, 0, 1, 0);
$138 = (HEAP32[$5 >> 2] | 0) + 36 | 0;
HEAP16[$138 >> 1] = HEAP16[$1 >> 1] | 0;
HEAP8[$138 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
break;
} else {
$139 = $123 + 24 | 0;
HEAP32[$139 >> 2] = HEAP32[$123 >> 2];
HEAP32[$139 + 4 >> 2] = HEAP32[$123 + 4 >> 2];
HEAP32[$139 + 8 >> 2] = HEAP32[$123 + 8 >> 2];
$140 = HEAP32[$5 >> 2] | 0;
HEAP16[$140 >> 1] = 0;
HEAP8[$140 + 2 >> 0] = 0;
$141 = $140 + 4 | 0;
HEAP16[$141 >> 1] = 0;
HEAP8[$141 + 2 >> 0] = 0;
$142 = HEAP32[$5 >> 2] | 0;
$143 = $142 + 12 | 0;
$144 = $142 + 40 | 0;
HEAP16[$143 >> 1] = HEAP16[$144 >> 1] | 0;
HEAP8[$143 + 2 >> 0] = HEAP8[$144 + 2 >> 0] | 0;
$146 = (HEAP32[$5 >> 2] | 0) + 16 | 0;
HEAP16[$146 >> 1] = 0;
HEAP8[$146 + 2 >> 0] = 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($1, 1, ((HEAP8[$24 >> 0] & 64) >>> 6) + 1 | 0, 0, 0, 1, 0);
$153 = (HEAP32[$5 >> 2] | 0) + 40 | 0;
HEAP16[$153 >> 1] = HEAP16[$1 >> 1] | 0;
HEAP8[$153 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
break;
}
}
} while (0);
__ZL16CompleteHandsiteR6SiteIDRK14SiGMLHandshape((HEAP32[$5 >> 2] | 0) + 12 | 0, $90);
__ZL16CompleteHandsiteR6SiteIDRK14SiGMLHandshape((HEAP32[$5 >> 2] | 0) + 16 | 0, $90);
__ZL16CompleteHandsiteR6SiteIDRK14SiGMLHandshape((HEAP32[$5 >> 2] | 0) + 24 | 0, $94);
__ZL16CompleteHandsiteR6SiteIDRK14SiGMLHandshape((HEAP32[$5 >> 2] | 0) + 28 | 0, $94);
STACKTOP = sp;
return;
}
function __ZN11ParMovement17GetCurrentPostureER19TwoHConcretePosturefb($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
var $$051 = 0, $10 = f0, $101 = 0, $106 = 0, $11 = 0, $125 = 0, $127 = 0, $128 = 0, $13 = f0, $15 = f0, $150 = 0, $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = f0, $20 = 0, $24 = f0, $25 = f0, $26 = f0, $30 = 0, $32 = 0, $34 = 0, $36 = f0, $38 = f0, $4 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $77 = f0, $8 = 0, $82 = 0, $85 = 0, $87 = 0, $9 = 0, $90 = 0, $91 = 0, $93 = 0, $95 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 288 | 0;
$vararg_buffer = sp;
$4 = sp + 276 | 0;
$5 = sp + 264 | 0;
$6 = sp + 252 | 0;
$7 = sp + 240 | 0;
$8 = sp + 16 | 0;
$9 = $0 + 40 | 0;
$10 = Math_fround(HEAPF32[$9 >> 2]);
$11 = $0 + 44 | 0;
$13 = Math_fround($10 - Math_fround(HEAPF32[$11 >> 2]));
if (!($13 <= Math_fround(0.0))) {
$15 = Math_fround($2 / $13);
$16 = $15 < Math_fround(0.0);
$17 = $15 > Math_fround(1.0);
$18 = $17 ? Math_fround(1.0) : $15;
$24 = $16 ? Math_fround(0.0) : $18;
} else $24 = Math_fround(1.0);
$20 = $0 + 12 | 0;
$25 = Math_fround(__ZNK10Trajectory16lookupByFractionEf(HEAP32[66492 + (HEAP32[$20 >> 2] << 2) >> 2] | 0, $24));
$26 = Math_fround(Math_fround(1.0) - $25);
if (0) {
$30 = HEAP32[$0 + 4 >> 2] | 0;
$32 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[16658] | 0, $30) | 0;
HEAP32[$vararg_buffer >> 2] = $30;
HEAP32[$vararg_buffer + 4 >> 2] = $32;
HEAPF64[$vararg_buffer + 8 >> 3] = +$2;
__Z7eprintfPKcz(35945, $vararg_buffer);
}
$34 = $0 + 8 | 0;
__ZNK25TwoHConcretePostureChange11interpolateER19TwoHConcretePosturef12SET_OF_HANDSb($0 + 60 | 0, $1, $3 ? $25 : $26, HEAP32[$34 >> 2] | 0, $3);
$36 = Math_fround(HEAPF32[$9 >> 2]);
$38 = Math_fround($36 - Math_fround(HEAPF32[$11 >> 2]));
if ($2 <= Math_fround(0.0) | $38 <= $2) {
STACKTOP = sp;
return;
}
$41 = $0 + 540 | 0;
$42 = HEAP32[$41 >> 2] | 0;
__ZN6VectorC2Ev($4);
__ZN6VectorC2Ev($5);
__ZN6VectorC2Ev($6);
__ZN6VectorC2Ev($7);
L10 : do if (($42 | 0) > 0) {
$44 = $8 + 4 | 0;
$45 = $8 + 16 | 0;
$46 = $8 + 28 | 0;
$47 = $8 + 40 | 0;
$48 = $8 + 44 | 0;
$49 = $8 + 48 | 0;
$50 = $8 + 52 | 0;
$51 = $8 + 56 | 0;
$52 = $8 + 60 | 0;
$53 = $8 + 64 | 0;
$54 = $8 + 88 | 0;
$55 = $8 + 92 | 0;
$56 = $8 + 116 | 0;
$57 = $8 + 128 | 0;
$58 = $8 + 140 | 0;
$59 = $8 + 152 | 0;
$60 = $8 + 156 | 0;
$61 = $8 + 160 | 0;
$62 = $8 + 164 | 0;
$63 = $8 + 168 | 0;
$64 = $8 + 172 | 0;
$65 = $8 + 176 | 0;
$66 = $8 + 200 | 0;
$67 = $8 + 204 | 0;
$68 = $1 + 112 | 0;
$69 = $8 + 112 | 0;
$70 = $0 + 176 | 0;
$71 = $0 + 64 | 0;
$72 = $0 + 528 | 0;
$$051 = 0;
$82 = 0;
L12 : while (1) {
if ($$051 << 16 >> 16 < 0) {
$87 = 0;
$90 = 0;
} else if ((HEAP32[$41 >> 2] | 0) > ($82 | 0)) {
$85 = HEAP32[(HEAP32[$72 >> 2] | 0) + ($82 << 2) >> 2] | 0;
$87 = $85;
$90 = $85;
} else {
$87 = 0;
$90 = 0;
}
HEAP8[$8 >> 0] = 1;
__ZN6VectorC2Ev($44);
__ZN6VectorC2Ev($45);
__ZN6VectorC2Ev($46);
HEAPF32[$47 >> 2] = Math_fround(0.0);
HEAPF32[$48 >> 2] = Math_fround(0.0);
HEAPF32[$49 >> 2] = Math_fround(0.0);
HEAPF32[$50 >> 2] = Math_fround(1.0);
HEAP32[$51 >> 2] = 0;
HEAPF32[$52 >> 2] = Math_fround(1.0);
HEAP32[$53 >> 2] = 0;
HEAP32[$53 + 4 >> 2] = 0;
HEAP32[$53 + 8 >> 2] = 0;
HEAP32[$53 + 12 >> 2] = 0;
HEAP32[$53 + 16 >> 2] = 0;
HEAP32[$53 + 20 >> 2] = 0;
HEAPF32[$54 >> 2] = Math_fround(1.0);
HEAP32[$55 >> 2] = 0;
HEAP32[$55 + 4 >> 2] = 0;
HEAP32[$55 + 8 >> 2] = 0;
HEAP32[$55 + 12 >> 2] = 0;
HEAP32[$55 + 16 >> 2] = 0;
HEAP8[$55 + 20 >> 0] = 0;
__ZN6VectorC2Ev($56);
__ZN6VectorC2Ev($57);
__ZN6VectorC2Ev($58);
HEAPF32[$59 >> 2] = Math_fround(0.0);
HEAPF32[$60 >> 2] = Math_fround(0.0);
HEAPF32[$61 >> 2] = Math_fround(0.0);
HEAPF32[$62 >> 2] = Math_fround(1.0);
HEAP32[$63 >> 2] = 0;
HEAPF32[$64 >> 2] = Math_fround(1.0);
HEAP32[$65 >> 2] = 0;
HEAP32[$65 + 4 >> 2] = 0;
HEAP32[$65 + 8 >> 2] = 0;
HEAP32[$65 + 12 >> 2] = 0;
HEAP32[$65 + 16 >> 2] = 0;
HEAP32[$65 + 20 >> 2] = 0;
HEAPF32[$66 >> 2] = Math_fround(1.0);
HEAP32[$67 >> 2] = 0;
HEAP32[$67 + 4 >> 2] = 0;
HEAP32[$67 + 8 >> 2] = 0;
HEAP32[$67 + 12 >> 2] = 0;
HEAP32[$67 + 16 >> 2] = 0;
__THREW__ = 0;
invoke_viifi(HEAP32[(HEAP32[$87 >> 2] | 0) + 60 >> 2] | 0, $90 | 0, $8 | 0, +$2, $3 | 0);
$91 = __THREW__;
__THREW__ = 0;
if ($91 & 1) {
label = 19;
break;
}
$93 = HEAP32[$34 >> 2] | 0;
switch ($93 | 0) {
case 3:
case 5:
{
__THREW__ = 0;
invoke_viiiiii(7, $4 | 0, $5 | 0, $1 | 0, $90 + 508 | 0, $8 | 0, $71 | 0);
$95 = __THREW__;
__THREW__ = 0;
if ($95 & 1) {
label = 19;
break L12;
}
$98 = HEAP32[$34 >> 2] | 0;
break;
}
default:
$98 = $93;
}
if (($98 | 1 | 0) == 5) {
__THREW__ = 0;
invoke_viiiiii(7, $6 | 0, $7 | 0, $68 | 0, $90 + 510 | 0, $69 | 0, $70 | 0);
$101 = __THREW__;
__THREW__ = 0;
if ($101 & 1) {
label = 19;
break;
}
}
$$051 = $$051 + 1 << 16 >> 16;
$82 = $$051 << 16 >> 16;
if (($42 | 0) <= ($82 | 0)) break L10;
}
if ((label | 0) == 19) {
$106 = ___cxa_find_matching_catch_2() | 0;
___resumeException($106 | 0);
}
} while (0);
$77 = Math_fround(__ZNK10Trajectory16lookupByFractionEf(HEAP32[66492 + (HEAP32[$20 >> 2] << 2) >> 2] | 0, Math_fround($2 / $38)));
L31 : do switch (HEAP32[$34 >> 2] | 0) {
case 3:
case 5:
{
if (Math_fround(HEAPF32[$4 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$4 + 4 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$4 + 8 >> 2]) == Math_fround(0.0)) {
if (Math_fround(HEAPF32[$5 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$5 + 4 >> 2]) == Math_fround(0.0)) {
$125 = $1 + 4 | 0;
if (Math_fround(HEAPF32[$5 + 8 >> 2]) == Math_fround(0.0)) {
__ZN6Vector7setFromERKS_($125, $0 + 64 | 0);
break L31;
} else $127 = $125;
} else label = 25; else label = 25;
if ((label | 0) == 25) $127 = $1 + 4 | 0;
__ZN6Vector7setFromERKS_($127, $5);
break L31;
}
$128 = $1 + 4 | 0;
__ZN6Vector7setFromERKS_($128, $0 + 64 | 0);
__ZN6Vector6setAddERKS_($128, $4);
break;
}
default:
{}
} while (0);
do if ((HEAP32[$34 >> 2] | 1 | 0) == 5) {
if (Math_fround(HEAPF32[$6 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$6 + 4 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$6 + 8 >> 2]) == Math_fround(0.0)) {
if (Math_fround(HEAPF32[$7 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$7 + 4 >> 2]) == Math_fround(0.0)) {
$150 = $1 + 116 | 0;
if (Math_fround(HEAPF32[$7 + 8 >> 2]) == Math_fround(0.0)) {
__ZN6Vector7setFromERKS_($150, $0 + 176 | 0);
break;
} else $152 = $150;
} else label = 36; else label = 36;
if ((label | 0) == 36) $152 = $1 + 116 | 0;
__ZN6Vector7setFromERKS_($152, $7);
break;
}
$153 = $1 + 116 | 0;
__ZN6Vector7setFromERKS_($153, $0 + 176 | 0);
__ZN6Vector6setAddERKS_($153, $6);
} while (0);
__ZN6VectorC2ERKS_($8, $0 + 544 | 0);
__ZN6Vector8setScaleEf($8, $77);
__ZN6Vector6setAddERKS_($1 + 4 | 0, $8);
__ZN6Vector6setAddERKS_($1 + 116 | 0, $8);
STACKTOP = sp;
return;
}
function _XML_Parse($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0$i = 0, $$0112 = 0, $$057$i = 0, $$1 = 0, $$3 = 0, $$3$i = 0, $$pre115 = 0, $100 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $111 = 0, $115 = 0, $117 = 0, $123 = 0, $126 = 0, $128 = 0, $13 = 0, $136 = 0, $137 = 0, $14 = 0, $143 = 0, $144 = 0, $146 = 0, $148 = 0, $15 = 0, $153 = 0, $155 = 0, $164 = 0, $17 = 0, $19 = 0, $22 = 0, $27 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $46 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $62 = 0, $68 = 0, $70 = 0, $72 = 0, $73 = 0, $89 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $99 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$4 = sp;
$5 = $0 + 464 | 0;
switch (HEAP32[$5 >> 2] | 0) {
case 3:
{
HEAP32[$0 + 268 >> 2] = 33;
$$3 = 0;
STACKTOP = sp;
return $$3 | 0;
}
case 2:
{
HEAP32[$0 + 268 >> 2] = 36;
$$3 = 0;
STACKTOP = sp;
return $$3 | 0;
}
default:
{
HEAP32[$5 >> 2] = 1;
if (!$2) {
HEAP8[$0 + 468 >> 0] = $3;
if (!$3) {
$$3 = 1;
STACKTOP = sp;
return $$3 | 0;
}
$13 = $0 + 24 | 0;
$14 = HEAP32[$13 >> 2] | 0;
$15 = $0 + 280 | 0;
HEAP32[$15 >> 2] = $14;
$17 = HEAP32[$0 + 28 >> 2] | 0;
HEAP32[$0 + 40 >> 2] = $17;
$19 = $0 + 264 | 0;
$22 = FUNCTION_TABLE_iiiii[HEAP32[$19 >> 2] & 63]($0, $14, $17, $13) | 0;
HEAP32[$0 + 268 >> 2] = $22;
if ($22 | 0) {
HEAP32[$0 + 276 >> 2] = HEAP32[$0 + 272 >> 2];
HEAP32[$19 >> 2] = 34;
$$3 = 0;
STACKTOP = sp;
return $$3 | 0;
}
switch (HEAP32[$5 >> 2] | 0) {
case 3:
{
$27 = HEAP32[$0 + 144 >> 2] | 0;
FUNCTION_TABLE_viiii[HEAP32[$27 + 48 >> 2] & 15]($27, HEAP32[$15 >> 2] | 0, HEAP32[$13 >> 2] | 0, $0 + 392 | 0);
HEAP32[$15 >> 2] = HEAP32[$13 >> 2];
$$3 = 2;
STACKTOP = sp;
return $$3 | 0;
}
case 1:
case 0:
{
HEAP32[$5 >> 2] = 2;
$$3 = 1;
STACKTOP = sp;
return $$3 | 0;
}
default:
{
$$3 = 1;
STACKTOP = sp;
return $$3 | 0;
}
}
}
$37 = $0 + 24 | 0;
$38 = HEAP32[$37 >> 2] | 0;
$39 = $0 + 28 | 0;
$40 = HEAP32[$39 >> 2] | 0;
$42 = $40;
if (($38 | 0) == ($40 | 0)) {
$43 = $0 + 36 | 0;
HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + $2;
$46 = $0 + 280 | 0;
HEAP32[$46 >> 2] = $1;
HEAP8[$0 + 468 >> 0] = $3;
$49 = $0 + 264 | 0;
$50 = HEAP32[$49 >> 2] | 0;
$51 = $1 + $2 | 0;
$52 = $0 + 40 | 0;
HEAP32[$52 >> 2] = $51;
$53 = FUNCTION_TABLE_iiiii[$50 & 63]($0, $1, $51, $4) | 0;
$54 = $0 + 268 | 0;
HEAP32[$54 >> 2] = $53;
L21 : do if (!$53) {
switch (HEAP32[$5 >> 2] | 0) {
case 2:
{
$$1 = 1;
break L21;
break;
}
case 3:
{
$$0112 = 2;
break;
}
case 1:
case 0:
{
if (!$3) $$0112 = 1; else {
HEAP32[$5 >> 2] = 2;
$$1 = 1;
break L21;
}
break;
}
default:
$$0112 = -1;
}
$62 = HEAP32[$0 + 144 >> 2] | 0;
FUNCTION_TABLE_viiii[HEAP32[$62 + 48 >> 2] & 15]($62, HEAP32[$46 >> 2] | 0, HEAP32[$4 >> 2] | 0, $0 + 392 | 0);
$68 = HEAP32[$4 >> 2] | 0;
$70 = $51 - $68 | 0;
$72 = $68;
$$pre115 = $0 + 8 | 0;
if ($70 | 0) {
$73 = HEAP32[$$pre115 >> 2] | 0;
if (!$73) {
$89 = FUNCTION_TABLE_ii[HEAP32[$0 + 12 >> 2] & 63]($2 << 1) | 0;
label = 23;
} else if (($70 | 0) > ((HEAP32[$0 + 32 >> 2] | 0) - $73 | 0)) {
$89 = FUNCTION_TABLE_iii[HEAP32[$0 + 16 >> 2] & 63]($73, $2 << 1) | 0;
label = 23;
} else {
$93 = $73;
$94 = $72;
}
do if ((label | 0) == 23) if (!$89) {
HEAP32[$54 >> 2] = 1;
$$1 = 0;
break L21;
} else {
HEAP32[$$pre115 >> 2] = $89;
HEAP32[$0 + 32 >> 2] = $89 + ($2 << 1);
$93 = $89;
$94 = HEAP32[$4 >> 2] | 0;
break;
} while (0);
_memcpy($93 | 0, $94 | 0, $70 | 0) | 0;
}
$95 = HEAP32[$$pre115 >> 2] | 0;
HEAP32[$37 >> 2] = $95;
$96 = $95 + $70 | 0;
HEAP32[$39 >> 2] = $96;
HEAP32[$46 >> 2] = $95;
HEAP32[$52 >> 2] = $96;
HEAP32[$0 + 272 >> 2] = $95;
HEAP32[$0 + 276 >> 2] = $95;
$$1 = $$0112;
} else {
HEAP32[$0 + 276 >> 2] = HEAP32[$0 + 272 >> 2];
HEAP32[$49 >> 2] = 34;
$$1 = 0;
} while (0);
$$3 = $$1;
STACKTOP = sp;
return $$3 | 0;
}
$99 = $0 + 32 | 0;
$100 = HEAP32[$99 >> 2] | 0;
do if (($100 - $42 | 0) < ($2 | 0)) {
$103 = $38;
$104 = $42 - $103 | 0;
$105 = $104 + $2 | 0;
$106 = $0 + 8 | 0;
$107 = HEAP32[$106 >> 2] | 0;
if (($105 | 0) <= ($100 - $107 | 0)) {
_memmove($107 | 0, $38 | 0, $104 | 0) | 0;
$111 = HEAP32[$106 >> 2] | 0;
$115 = $111 + ((HEAP32[$39 >> 2] | 0) - (HEAP32[$37 >> 2] | 0)) | 0;
HEAP32[$39 >> 2] = $115;
HEAP32[$37 >> 2] = $111;
$$3$i = $115;
break;
}
$117 = $100 - $103 | 0;
$$057$i = ($117 | 0) == 0 ? 1024 : $117;
do $$057$i = $$057$i << 1; while (($$057$i | 0) < ($105 | 0));
$123 = FUNCTION_TABLE_ii[HEAP32[$0 + 12 >> 2] & 63]($$057$i) | 0;
if (!$123) {
HEAP32[$0 + 268 >> 2] = 1;
$$3 = 0;
STACKTOP = sp;
return $$3 | 0;
}
HEAP32[$99 >> 2] = $123 + $$057$i;
$126 = HEAP32[$37 >> 2] | 0;
$128 = $126;
if (!$126) $136 = $128; else {
_memcpy($123 | 0, $126 | 0, (HEAP32[$39 >> 2] | 0) - $128 | 0) | 0;
FUNCTION_TABLE_vi[HEAP32[$0 + 20 >> 2] & 255](HEAP32[$106 >> 2] | 0);
$136 = HEAP32[$37 >> 2] | 0;
}
$137 = $123 + ((HEAP32[$39 >> 2] | 0) - $136) | 0;
HEAP32[$39 >> 2] = $137;
HEAP32[$106 >> 2] = $123;
HEAP32[$37 >> 2] = $123;
$$3$i = $137;
} else $$3$i = $40; while (0);
if (!$$3$i) {
$$3 = 0;
STACKTOP = sp;
return $$3 | 0;
}
_memcpy($$3$i | 0, $1 | 0, $2 | 0) | 0;
switch (HEAP32[$5 >> 2] | 0) {
case 3:
{
HEAP32[$0 + 268 >> 2] = 33;
$$3 = 0;
STACKTOP = sp;
return $$3 | 0;
}
case 2:
{
HEAP32[$0 + 268 >> 2] = 36;
$$3 = 0;
STACKTOP = sp;
return $$3 | 0;
}
default:
{
HEAP32[$5 >> 2] = 1;
$143 = HEAP32[$37 >> 2] | 0;
$144 = $0 + 280 | 0;
HEAP32[$144 >> 2] = $143;
$146 = (HEAP32[$39 >> 2] | 0) + $2 | 0;
HEAP32[$39 >> 2] = $146;
HEAP32[$0 + 40 >> 2] = $146;
$148 = $0 + 36 | 0;
HEAP32[$148 >> 2] = (HEAP32[$148 >> 2] | 0) + $2;
HEAP8[$0 + 468 >> 0] = $3;
$153 = $0 + 264 | 0;
$155 = FUNCTION_TABLE_iiiii[HEAP32[$153 >> 2] & 63]($0, $143, $146, $37) | 0;
HEAP32[$0 + 268 >> 2] = $155;
if ($155 | 0) {
HEAP32[$0 + 276 >> 2] = HEAP32[$0 + 272 >> 2];
HEAP32[$153 >> 2] = 34;
$$3 = 0;
STACKTOP = sp;
return $$3 | 0;
}
switch (HEAP32[$5 >> 2] | 0) {
case 3:
{
$$0$i = 2;
break;
}
case 1:
case 0:
{
if (!$3) $$0$i = 1; else {
HEAP32[$5 >> 2] = 2;
$$3 = 1;
STACKTOP = sp;
return $$3 | 0;
}
break;
}
default:
$$0$i = 1;
}
$164 = HEAP32[$0 + 144 >> 2] | 0;
FUNCTION_TABLE_viiii[HEAP32[$164 + 48 >> 2] & 15]($164, HEAP32[$144 >> 2] | 0, HEAP32[$37 >> 2] | 0, $0 + 392 | 0);
HEAP32[$144 >> 2] = HEAP32[$37 >> 2];
$$3 = $$0$i;
STACKTOP = sp;
return $$3 | 0;
}
}
}
}
return 0;
}
function __Z12SpliceMorphsP7Gesture($0) {
$0 = $0 | 0;
var $$054 = 0, $$pre$phiZ2D = 0, $$pre86 = 0, $$pre87 = 0, $10 = f0, $103 = 0, $104 = 0, $109 = 0, $11 = 0, $110 = 0, $115 = 0, $116 = 0, $122 = f0, $123 = 0, $127 = 0, $128 = 0, $132 = f0, $133 = 0, $137 = 0, $138 = 0, $142 = f0, $143 = 0, $147 = 0, $148 = 0, $15 = 0, $152 = f0, $153 = 0, $157 = 0, $158 = 0, $16 = 0, $162 = f0, $163 = 0, $167 = 0, $168 = 0, $172 = f0, $173 = 0, $177 = 0, $178 = 0, $18 = 0, $182 = f0, $183 = 0, $19 = 0, $2 = 0, $21 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $42 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $5 = 0, $52 = 0, $54 = 0, $55 = 0, $58 = 0, $6 = 0, $64 = 0, $66 = 0, $72 = 0, $75 = 0, $85 = 0, $86 = 0, $91 = 0, $92 = 0, $97 = 0, $98 = 0, label = 0;
if (!$0) return;
$2 = $0 + 48 | 0;
$3 = HEAP32[$2 >> 2] | 0;
if ($3 | 0) {
$5 = $0 + 44 | 0;
$6 = HEAP32[$3 >> 2] | 0;
if (!$6) $15 = $3; else {
$10 = Math_fround(HEAPF32[(HEAP32[$5 >> 2] | 0) + 40 >> 2]);
$11 = $6 + 20 | 0;
__Z17AnchorFinalMorphsfPK18AbstractTimedMorph($10, HEAP32[$11 >> 2] | 0);
__Z20ExtendTrailingMorphsP18AbstractTimedMorph(HEAP32[$11 >> 2] | 0);
$15 = HEAP32[$2 >> 2] | 0;
}
$16 = HEAP32[$15 + 4 >> 2] | 0;
if (!$16) $127 = $15; else {
$122 = Math_fround(HEAPF32[(HEAP32[$5 >> 2] | 0) + 40 >> 2]);
$123 = $16 + 20 | 0;
__Z17AnchorFinalMorphsfPK18AbstractTimedMorph($122, HEAP32[$123 >> 2] | 0);
__Z20ExtendTrailingMorphsP18AbstractTimedMorph(HEAP32[$123 >> 2] | 0);
$127 = HEAP32[$2 >> 2] | 0;
}
$128 = HEAP32[$127 + 8 >> 2] | 0;
if (!$128) $137 = $127; else {
$132 = Math_fround(HEAPF32[(HEAP32[$5 >> 2] | 0) + 40 >> 2]);
$133 = $128 + 20 | 0;
__Z17AnchorFinalMorphsfPK18AbstractTimedMorph($132, HEAP32[$133 >> 2] | 0);
__Z20ExtendTrailingMorphsP18AbstractTimedMorph(HEAP32[$133 >> 2] | 0);
$137 = HEAP32[$2 >> 2] | 0;
}
$138 = HEAP32[$137 + 12 >> 2] | 0;
if (!$138) $147 = $137; else {
$142 = Math_fround(HEAPF32[(HEAP32[$5 >> 2] | 0) + 40 >> 2]);
$143 = $138 + 20 | 0;
__Z17AnchorFinalMorphsfPK18AbstractTimedMorph($142, HEAP32[$143 >> 2] | 0);
__Z20ExtendTrailingMorphsP18AbstractTimedMorph(HEAP32[$143 >> 2] | 0);
$147 = HEAP32[$2 >> 2] | 0;
}
$148 = HEAP32[$147 + 16 >> 2] | 0;
if (!$148) $157 = $147; else {
$152 = Math_fround(HEAPF32[(HEAP32[$5 >> 2] | 0) + 40 >> 2]);
$153 = $148 + 20 | 0;
__Z17AnchorFinalMorphsfPK18AbstractTimedMorph($152, HEAP32[$153 >> 2] | 0);
__Z20ExtendTrailingMorphsP18AbstractTimedMorph(HEAP32[$153 >> 2] | 0);
$157 = HEAP32[$2 >> 2] | 0;
}
$158 = HEAP32[$157 + 20 >> 2] | 0;
if (!$158) $167 = $157; else {
$162 = Math_fround(HEAPF32[(HEAP32[$5 >> 2] | 0) + 40 >> 2]);
$163 = $158 + 20 | 0;
__Z17AnchorFinalMorphsfPK18AbstractTimedMorph($162, HEAP32[$163 >> 2] | 0);
__Z20ExtendTrailingMorphsP18AbstractTimedMorph(HEAP32[$163 >> 2] | 0);
$167 = HEAP32[$2 >> 2] | 0;
}
$168 = HEAP32[$167 + 24 >> 2] | 0;
if (!$168) $177 = $167; else {
$172 = Math_fround(HEAPF32[(HEAP32[$5 >> 2] | 0) + 40 >> 2]);
$173 = $168 + 20 | 0;
__Z17AnchorFinalMorphsfPK18AbstractTimedMorph($172, HEAP32[$173 >> 2] | 0);
__Z20ExtendTrailingMorphsP18AbstractTimedMorph(HEAP32[$173 >> 2] | 0);
$177 = HEAP32[$2 >> 2] | 0;
}
$178 = HEAP32[$177 + 28 >> 2] | 0;
if ($178 | 0) {
$182 = Math_fround(HEAPF32[(HEAP32[$5 >> 2] | 0) + 40 >> 2]);
$183 = $178 + 20 | 0;
__Z17AnchorFinalMorphsfPK18AbstractTimedMorph($182, HEAP32[$183 >> 2] | 0);
__Z20ExtendTrailingMorphsP18AbstractTimedMorph(HEAP32[$183 >> 2] | 0);
}
}
$18 = __Z21CollectTrailingMorphsv() | 0;
$19 = HEAP32[$2 >> 2] | 0;
if ($19 | 0) {
$21 = HEAP32[$19 >> 2] | 0;
if (!$21) $26 = $19; else {
__Z18MakeTrailingMorphsPK18AbstractTimedMorph(HEAP32[$21 + 20 >> 2] | 0);
$26 = HEAP32[$2 >> 2] | 0;
}
$27 = HEAP32[$26 + 4 >> 2] | 0;
if (!$27) $85 = $26; else {
__Z18MakeTrailingMorphsPK18AbstractTimedMorph(HEAP32[$27 + 20 >> 2] | 0);
$85 = HEAP32[$2 >> 2] | 0;
}
$86 = HEAP32[$85 + 8 >> 2] | 0;
if (!$86) $91 = $85; else {
__Z18MakeTrailingMorphsPK18AbstractTimedMorph(HEAP32[$86 + 20 >> 2] | 0);
$91 = HEAP32[$2 >> 2] | 0;
}
$92 = HEAP32[$91 + 12 >> 2] | 0;
if (!$92) $97 = $91; else {
__Z18MakeTrailingMorphsPK18AbstractTimedMorph(HEAP32[$92 + 20 >> 2] | 0);
$97 = HEAP32[$2 >> 2] | 0;
}
$98 = HEAP32[$97 + 16 >> 2] | 0;
if (!$98) $103 = $97; else {
__Z18MakeTrailingMorphsPK18AbstractTimedMorph(HEAP32[$98 + 20 >> 2] | 0);
$103 = HEAP32[$2 >> 2] | 0;
}
$104 = HEAP32[$103 + 20 >> 2] | 0;
if (!$104) $109 = $103; else {
__Z18MakeTrailingMorphsPK18AbstractTimedMorph(HEAP32[$104 + 20 >> 2] | 0);
$109 = HEAP32[$2 >> 2] | 0;
}
$110 = HEAP32[$109 + 24 >> 2] | 0;
if (!$110) $115 = $109; else {
__Z18MakeTrailingMorphsPK18AbstractTimedMorph(HEAP32[$110 + 20 >> 2] | 0);
$115 = HEAP32[$2 >> 2] | 0;
}
$116 = HEAP32[$115 + 28 >> 2] | 0;
if ($116 | 0) __Z18MakeTrailingMorphsPK18AbstractTimedMorph(HEAP32[$116 + 20 >> 2] | 0);
}
if (!$18) return;
$30 = HEAP32[$2 >> 2] | 0;
if (!$30) {
$32 = _malloc(32) | 0;
HEAP32[$32 >> 2] = 0;
HEAP32[$32 + 4 >> 2] = 0;
HEAP32[$32 + 8 >> 2] = 0;
HEAP32[$32 + 12 >> 2] = 0;
HEAP32[$32 + 16 >> 2] = 0;
HEAP32[$32 + 20 >> 2] = 0;
HEAP32[$32 + 24 >> 2] = 0;
HEAP32[$32 + 28 >> 2] = 0;
HEAP32[$2 >> 2] = $32;
$34 = $32;
} else $34 = $30;
$35 = HEAP32[$34 + 28 >> 2] | 0;
if (!$35) {
$37 = __Znwj(28) | 0;
HEAP32[$37 >> 2] = 2136;
$38 = $37 + 4 | 0;
HEAP32[$37 + 20 >> 2] = 0;
HEAPF32[$37 + 24 >> 2] = Math_fround(0.0);
HEAP32[$38 >> 2] = 0;
HEAP32[$38 + 4 >> 2] = 0;
HEAP32[$38 + 8 >> 2] = 0;
HEAP8[$38 + 12 >> 0] = 0;
HEAP32[$34 + 28 >> 2] = $37;
$$054 = $37;
} else $$054 = $35;
$42 = $$054 + 20 | 0;
if (!(HEAP32[$42 >> 2] | 0)) {
HEAP32[$42 >> 2] = $18;
$75 = $18;
} else {
$45 = __Znwj(28) | 0;
$46 = $45 + 4 | 0;
HEAP32[$46 >> 2] = 0;
HEAP32[$46 + 4 >> 2] = 0;
HEAP32[$46 + 8 >> 2] = 0;
HEAP32[$46 + 12 >> 2] = 0;
HEAP32[$45 + 20 >> 2] = 2;
HEAP32[$45 >> 2] = 3260;
__THREW__ = 0;
$48 = invoke_ii(20, 16) | 0;
$49 = __THREW__;
__THREW__ = 0;
if ($49 & 1) {
$72 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($45);
___resumeException($72 | 0);
}
HEAP32[$48 + 4 >> 2] = 10;
$52 = $48 + 12 | 0;
HEAP32[$52 >> 2] = 0;
HEAP32[$48 >> 2] = 0;
HEAP32[$48 + 8 >> 2] = 0;
$54 = $45 + 24 | 0;
HEAP32[$54 >> 2] = $48;
$55 = HEAP32[$42 >> 2] | 0;
__ZN13DynamicArrayPI18AbstractTimedMorphE6resizeEi($48, 10);
if ((HEAP32[$52 >> 2] | 0) <= 0) HEAP32[$52 >> 2] = 1;
HEAP32[HEAP32[$48 >> 2] >> 2] = $55;
$$pre86 = HEAP32[$54 >> 2] | 0;
$$pre87 = HEAP32[$$pre86 + 12 >> 2] | 0;
$58 = $$pre86 + 12 | 0;
if (($$pre87 | 0) >= 0) {
if ((HEAP32[$$pre86 + 8 >> 2] | 0) > ($$pre87 | 0)) {
$$pre$phiZ2D = $$pre87 + 1 | 0;
label = 24;
} else {
$64 = HEAP32[$$pre86 + 4 >> 2] | 0;
$66 = $$pre87 + 1 | 0;
__ZN13DynamicArrayPI18AbstractTimedMorphE6resizeEi($$pre86, ($64 | 0) > ($$pre87 | 0) ? $64 : $66 + ($$pre87 >>> 1) | 0);
if ((HEAP32[$58 >> 2] | 0) <= ($$pre87 | 0)) {
$$pre$phiZ2D = $66;
label = 24;
}
}
if ((label | 0) == 24) HEAP32[$58 >> 2] = $$pre$phiZ2D;
HEAP32[(HEAP32[$$pre86 >> 2] | 0) + ($$pre87 << 2) >> 2] = $18;
}
HEAP32[$42 >> 2] = $45;
$75 = $45;
}
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$75 >> 2] | 0) + 12 >> 2] & 63]($75, Math_fround(0.0));
HEAP32[$$054 + 24 >> 2] = HEAP32[(HEAP32[$42 >> 2] | 0) + 16 >> 2];
return;
}
function __Z21CollectTrailingMorphsv() {
var $$038$lcssa72 = 0, $$038$lcssa73 = 0, $$03864 = 0, $$04163 = 0, $$06$i$i = 0, $$06$i$i43 = 0, $$139 = 0, $$2 = 0, $$240 = 0, $$lcssa74 = 0, $$pre$i = 0, $$pre$i48 = 0, $$pre$phi$iZ2D = 0, $$pre68 = 0, $0 = 0, $103 = 0, $108 = 0, $118 = 0, $119 = 0, $12 = 0, $123 = 0, $128 = 0, $13 = 0, $145 = 0, $146 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $55 = 0, $58 = 0, $61 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $74 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $85 = 0, $87 = 0, $98 = 0, $sext = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$vararg_buffer7 = sp + 32 | 0;
$vararg_buffer5 = sp + 24 | 0;
$vararg_buffer3 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$0 = HEAP32[16662] | 0;
if (!$0) {
if (!0) {
$$2 = 0;
STACKTOP = sp;
return $$2 | 0;
}
__Z7eprintfPKcz(46129, $vararg_buffer);
$$2 = 0;
STACKTOP = sp;
return $$2 | 0;
}
$3 = $0 + 12 | 0;
$4 = HEAP32[$3 >> 2] | 0;
$sext = $4 << 16;
$5 = $sext >> 16;
if (!$5) {
$8 = HEAP32[$0 >> 2] | 0;
if (($4 | 0) > 0 & ($8 | 0) != 0) {
$$06$i$i = 0;
$12 = $8;
$145 = $4;
while (1) {
$13 = HEAP32[$12 + ($$06$i$i << 2) >> 2] | 0;
if (!$13) $22 = $145; else {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$13 >> 2] | 0) + 4 >> 2] & 255]($13);
HEAP32[(HEAP32[$0 >> 2] | 0) + ($$06$i$i << 2) >> 2] = 0;
$22 = HEAP32[$3 >> 2] | 0;
}
$20 = $$06$i$i + 1 | 0;
if (($20 | 0) >= ($22 | 0)) break;
$$06$i$i = $20;
$12 = HEAP32[$0 >> 2] | 0;
$145 = $22;
}
$$pre$i = HEAP32[16662] | 0;
if ($$pre$i | 0) {
$25 = HEAP32[$$pre$i >> 2] | 0;
$26 = $$pre$i;
label = 13;
}
} else {
$25 = $8;
$26 = $0;
label = 13;
}
if ((label | 0) == 13) {
if ($25 | 0) _free($25);
__ZdlPv($26);
HEAP32[16662] = 0;
}
if (!0) {
$$2 = 0;
STACKTOP = sp;
return $$2 | 0;
}
__Z7eprintfPKcz(46129, $vararg_buffer1);
$$2 = 0;
STACKTOP = sp;
return $$2 | 0;
}
do if (($sext | 0) > 0) {
$$03864 = 0;
$$04163 = 0;
$55 = $0;
$58 = 0;
while (1) {
if ($$04163 << 16 >> 16 < 0) {
$$240 = $$03864;
$29 = $55;
} else if ((HEAP32[$55 + 12 >> 2] | 0) > ($58 | 0)) {
$61 = HEAP32[(HEAP32[$55 >> 2] | 0) + ($58 << 2) >> 2] | 0;
if (!$61) {
$$240 = $$03864;
$29 = $55;
} else {
if (!$$03864) {
$64 = __Znwj(28) | 0;
$65 = $64 + 4 | 0;
HEAP32[$65 >> 2] = 0;
HEAP32[$65 + 4 >> 2] = 0;
HEAP32[$65 + 8 >> 2] = 0;
HEAP32[$65 + 12 >> 2] = 0;
HEAP32[$64 + 20 >> 2] = 2;
HEAP32[$64 >> 2] = 3260;
__THREW__ = 0;
$67 = invoke_ii(20, 16) | 0;
$68 = __THREW__;
__THREW__ = 0;
if ($68 & 1) {
label = 36;
break;
}
HEAP32[$67 + 4 >> 2] = 10;
HEAP32[$67 + 12 >> 2] = 0;
HEAP32[$67 >> 2] = 0;
HEAP32[$67 + 8 >> 2] = 0;
HEAP32[$64 + 24 >> 2] = $67;
$$139 = $64;
} else $$139 = $$03864;
$77 = HEAP32[$$139 + 24 >> 2] | 0;
$78 = $77 + 12 | 0;
$79 = HEAP32[$78 >> 2] | 0;
if (($79 | 0) >= 0) {
if ((HEAP32[$77 + 8 >> 2] | 0) > ($79 | 0)) {
$$pre$phi$iZ2D = $79 + 1 | 0;
label = 41;
} else {
$85 = HEAP32[$77 + 4 >> 2] | 0;
$87 = $79 + 1 | 0;
__ZN13DynamicArrayPI18AbstractTimedMorphE6resizeEi($77, ($85 | 0) > ($79 | 0) ? $85 : $87 + ($79 >>> 1) | 0);
if ((HEAP32[$78 >> 2] | 0) <= ($79 | 0)) {
$$pre$phi$iZ2D = $87;
label = 41;
}
}
if ((label | 0) == 41) {
label = 0;
HEAP32[$78 >> 2] = $$pre$phi$iZ2D;
}
HEAP32[(HEAP32[$77 >> 2] | 0) + ($79 << 2) >> 2] = $61;
}
if (0) {
__Z7eprintfPKcz(46169, $vararg_buffer3);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$61 >> 2] | 0) + 40 >> 2] & 255]($61, HEAP32[16082] | 0);
__Z5eputcc(10);
}
$98 = HEAP32[16662] | 0;
if ((HEAP32[$98 + 8 >> 2] | 0) <= ($58 | 0)) {
$103 = HEAP32[$98 + 4 >> 2] | 0;
__ZN13DynamicArrayPI18AbstractTimedMorphE6resizeEi($98, ($103 | 0) > ($58 | 0) ? $103 : $58 + 1 + ($58 >>> 1) | 0);
}
$108 = $98 + 12 | 0;
if ((HEAP32[$108 >> 2] | 0) <= ($58 | 0)) HEAP32[$108 >> 2] = $58 + 1;
HEAP32[(HEAP32[$98 >> 2] | 0) + ($58 << 2) >> 2] = 0;
$$240 = $$139;
$29 = HEAP32[16662] | 0;
}
} else {
$$240 = $$03864;
$29 = $55;
}
$$04163 = $$04163 + 1 << 16 >> 16;
$58 = $$04163 << 16 >> 16;
if (($5 | 0) <= ($58 | 0)) {
label = 18;
break;
} else {
$$03864 = $$240;
$55 = $29;
}
}
if ((label | 0) == 18) if (!$29) {
$$038$lcssa73 = $$240;
break;
} else {
$$038$lcssa72 = $$240;
$$lcssa74 = $29;
label = 19;
break;
} else if ((label | 0) == 36) {
$74 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($64);
___resumeException($74 | 0);
}
} else {
$$038$lcssa72 = 0;
$$lcssa74 = $0;
label = 19;
} while (0);
L63 : do if ((label | 0) == 19) {
$30 = HEAP32[$$lcssa74 >> 2] | 0;
do if (!$30) $51 = $$lcssa74; else {
$32 = $$lcssa74 + 12 | 0;
$33 = HEAP32[$32 >> 2] | 0;
if (($33 | 0) > 0) {
$$06$i$i43 = 0;
$146 = $33;
$36 = $30;
while (1) {
$37 = HEAP32[$36 + ($$06$i$i43 << 2) >> 2] | 0;
if (!$37) $46 = $146; else {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$37 >> 2] | 0) + 4 >> 2] & 255]($37);
HEAP32[(HEAP32[$$lcssa74 >> 2] | 0) + ($$06$i$i43 << 2) >> 2] = 0;
$46 = HEAP32[$32 >> 2] | 0;
}
$44 = $$06$i$i43 + 1 | 0;
if (($44 | 0) >= ($46 | 0)) break;
$$06$i$i43 = $44;
$146 = $46;
$36 = HEAP32[$$lcssa74 >> 2] | 0;
}
$$pre$i48 = HEAP32[16662] | 0;
if (!$$pre$i48) {
$$038$lcssa73 = $$038$lcssa72;
break L63;
}
$$pre68 = HEAP32[$$pre$i48 >> 2] | 0;
if (!$$pre68) {
$51 = $$pre$i48;
break;
} else {
$49 = $$pre68;
$50 = $$pre$i48;
}
} else {
$49 = $30;
$50 = $$lcssa74;
}
_free($49);
HEAP32[$50 >> 2] = 0;
$51 = $50;
} while (0);
__ZdlPv($51);
HEAP32[16662] = 0;
$$038$lcssa73 = $$038$lcssa72;
} while (0);
if (!$$038$lcssa73) {
$$2 = 0;
STACKTOP = sp;
return $$2 | 0;
}
$118 = HEAP32[$$038$lcssa73 + 24 >> 2] | 0;
$119 = $118 + 12 | 0;
if ((HEAP32[$119 >> 2] | 0) != 1) {
if (0) {
__Z7eprintfPKcz(46256, $vararg_buffer7);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$038$lcssa73 >> 2] | 0) + 40 >> 2] & 255]($$038$lcssa73, HEAP32[16082] | 0);
__Z5eputcc(10);
}
$$2 = $$038$lcssa73;
STACKTOP = sp;
return $$2 | 0;
}
$123 = HEAP32[HEAP32[$118 >> 2] >> 2] | 0;
if ((HEAP32[$118 + 8 >> 2] | 0) <= 0) {
$128 = HEAP32[$118 + 4 >> 2] | 0;
__ZN13DynamicArrayPI18AbstractTimedMorphE6resizeEi($118, ($128 | 0) > 1 ? $128 : 1);
if ((HEAP32[$119 >> 2] | 0) <= 0) HEAP32[$119 >> 2] = 1;
}
HEAP32[HEAP32[$118 >> 2] >> 2] = 0;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$$038$lcssa73 >> 2] | 0) + 4 >> 2] & 255]($$038$lcssa73);
if (!0) {
$$2 = $123;
STACKTOP = sp;
return $$2 | 0;
}
__Z7eprintfPKcz(46215, $vararg_buffer5);
if (!$123) __Z5eputsPKc(61277); else FUNCTION_TABLE_vii[HEAP32[(HEAP32[$123 >> 2] | 0) + 40 >> 2] & 255]($123, HEAP32[16082] | 0);
__Z5eputcc(10);
$$2 = $123;
STACKTOP = sp;
return $$2 | 0;
}
function _normal_scanPi($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$0$i = 0, $$0$i112 = 0, $$0111149 = 0, $$0119$ph = 0, $$1$be = 0, $$1$i = 0, $$1$i113 = 0, $$1120$ph = 0, $$1140 = 0, $$2 = 0, $$sink = 0, $$sink158 = 0, $10 = 0, $107 = 0, $12 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $5 = 0, $62 = 0, $77 = 0, $79 = 0, $80 = 0, $81 = 0, label = 0;
if (($1 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
$5 = $0 + 72 | 0;
switch (HEAP8[$5 + (HEAPU8[$1 >> 0] | 0) >> 0] | 0) {
case 29:
{
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
case 24:
case 22:
{
$$sink = 1;
break;
}
case 5:
{
if (($2 - $1 | 0) < 2) {
$$0 = -2;
return $$0 | 0;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 340 >> 2] & 63]($0, $1) | 0)) {
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
} else $$sink = 2;
break;
}
case 6:
{
if (($2 - $1 | 0) < 3) {
$$0 = -2;
return $$0 | 0;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 344 >> 2] & 63]($0, $1) | 0)) {
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
} else $$sink = 3;
break;
}
case 7:
{
if (($2 - $1 | 0) < 4) {
$$0 = -2;
return $$0 | 0;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 348 >> 2] & 63]($0, $1) | 0)) {
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
} else $$sink = 4;
break;
}
default:
{
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
}
$10 = $1 + $$sink | 0;
if (($10 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
$12 = $2;
$13 = $0 + 328 | 0;
$14 = $0 + 332 | 0;
$15 = $0 + 336 | 0;
$$0111149 = $10;
L31 : while (1) {
switch (HEAP8[$5 + (HEAPU8[$$0111149 >> 0] | 0) >> 0] | 0) {
case 29:
{
label = 17;
break L31;
break;
}
case 10:
case 9:
case 21:
{
label = 28;
break L31;
break;
}
case 15:
{
label = 57;
break L31;
break;
}
case 27:
case 26:
case 25:
case 24:
case 22:
{
$$sink158 = 1;
break;
}
case 5:
{
if (($12 - $$0111149 | 0) < 2) {
$$0 = -2;
label = 69;
break L31;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$13 >> 2] & 63]($0, $$0111149) | 0)) {
label = 20;
break L31;
} else $$sink158 = 2;
break;
}
case 6:
{
if (($12 - $$0111149 | 0) < 3) {
$$0 = -2;
label = 69;
break L31;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$14 >> 2] & 63]($0, $$0111149) | 0)) {
label = 23;
break L31;
} else $$sink158 = 3;
break;
}
case 7:
{
if (($12 - $$0111149 | 0) < 4) {
$$0 = -2;
label = 69;
break L31;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$15 >> 2] & 63]($0, $$0111149) | 0)) {
label = 26;
break L31;
} else $$sink158 = 4;
break;
}
default:
{
$$2 = $$0111149;
break L31;
}
}
$62 = $$0111149 + $$sink158 | 0;
if (($62 | 0) == ($2 | 0)) {
$$0 = -1;
label = 69;
break;
} else $$0111149 = $62;
}
if ((label | 0) == 17) {
HEAP32[$3 >> 2] = $$0111149;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 20) {
HEAP32[$3 >> 2] = $$0111149;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 23) {
HEAP32[$3 >> 2] = $$0111149;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 26) {
HEAP32[$3 >> 2] = $$0111149;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 28) {
L45 : do if (($$0111149 - $1 | 0) == 3) {
switch (HEAP8[$1 >> 0] | 0) {
case 120:
{
$$0$i = 0;
break;
}
case 88:
{
$$0$i = 1;
break;
}
default:
{
$$0119$ph = 11;
break L45;
}
}
switch (HEAP8[$1 + 1 >> 0] | 0) {
case 109:
{
$$1$i = $$0$i;
break;
}
case 77:
{
$$1$i = 1;
break;
}
default:
{
$$0119$ph = 11;
break L45;
}
}
switch (HEAP8[$1 + 2 >> 0] | 0) {
case 108:
{
if (!$$1$i) {
$$0119$ph = 12;
break L45;
}
break;
}
case 76:
break;
default:
{
$$0119$ph = 11;
break L45;
}
}
HEAP32[$3 >> 2] = $$0111149;
$$0 = 0;
return $$0 | 0;
} else $$0119$ph = 11; while (0);
$77 = $$0111149 + 1 | 0;
if (($77 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
$79 = $0 + 352 | 0;
$80 = $0 + 356 | 0;
$81 = $0 + 360 | 0;
$$1140 = $77;
L61 : while (1) {
switch (HEAP8[$5 + (HEAPU8[$$1140 >> 0] | 0) >> 0] | 0) {
case 8:
case 1:
case 0:
{
label = 51;
break L61;
break;
}
case 5:
{
if (($12 - $$1140 | 0) < 2) {
$$0 = -2;
label = 69;
break L61;
}
if (FUNCTION_TABLE_iii[HEAP32[$79 >> 2] & 63]($0, $$1140) | 0) {
label = 41;
break L61;
}
$$1$be = $$1140 + 2 | 0;
break;
}
case 6:
{
if (($12 - $$1140 | 0) < 3) {
$$0 = -2;
label = 69;
break L61;
}
if (FUNCTION_TABLE_iii[HEAP32[$80 >> 2] & 63]($0, $$1140) | 0) {
label = 45;
break L61;
}
$$1$be = $$1140 + 3 | 0;
break;
}
case 7:
{
if (($12 - $$1140 | 0) < 4) {
$$0 = -2;
label = 69;
break L61;
}
if (FUNCTION_TABLE_iii[HEAP32[$81 >> 2] & 63]($0, $$1140) | 0) {
label = 49;
break L61;
}
$$1$be = $$1140 + 4 | 0;
break;
}
case 15:
{
$107 = $$1140 + 1 | 0;
if (($107 | 0) == ($2 | 0)) {
$$0 = -1;
label = 69;
break L61;
}
if ((HEAP8[$107 >> 0] | 0) == 62) {
label = 55;
break L61;
} else $$1$be = $107;
break;
}
default:
$$1$be = $$1140 + 1 | 0;
}
if (($$1$be | 0) == ($2 | 0)) {
$$0 = -1;
label = 69;
break;
} else $$1140 = $$1$be;
}
if ((label | 0) == 41) {
HEAP32[$3 >> 2] = $$1140;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 45) {
HEAP32[$3 >> 2] = $$1140;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 49) {
HEAP32[$3 >> 2] = $$1140;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 51) {
HEAP32[$3 >> 2] = $$1140;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 55) {
HEAP32[$3 >> 2] = $$1140 + 2;
$$0 = $$0119$ph;
return $$0 | 0;
} else if ((label | 0) == 69) return $$0 | 0;
} else if ((label | 0) == 57) {
L94 : do if (($$0111149 - $1 | 0) == 3) {
switch (HEAP8[$1 >> 0] | 0) {
case 120:
{
$$0$i112 = 0;
break;
}
case 88:
{
$$0$i112 = 1;
break;
}
default:
{
$$1120$ph = 11;
break L94;
}
}
switch (HEAP8[$1 + 1 >> 0] | 0) {
case 109:
{
$$1$i113 = $$0$i112;
break;
}
case 77:
{
$$1$i113 = 1;
break;
}
default:
{
$$1120$ph = 11;
break L94;
}
}
switch (HEAP8[$1 + 2 >> 0] | 0) {
case 108:
{
if (!$$1$i113) {
$$1120$ph = 12;
break L94;
}
break;
}
case 76:
break;
default:
{
$$1120$ph = 11;
break L94;
}
}
HEAP32[$3 >> 2] = $$0111149;
$$0 = 0;
return $$0 | 0;
} else $$1120$ph = 11; while (0);
$127 = $$0111149 + 1 | 0;
if (($127 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
if ((HEAP8[$127 >> 0] | 0) == 62) {
HEAP32[$3 >> 2] = $$0111149 + 2;
$$0 = $$1120$ph;
return $$0 | 0;
} else $$2 = $127;
} else if ((label | 0) == 69) return $$0 | 0;
HEAP32[$3 >> 2] = $$2;
$$0 = 0;
return $$0 | 0;
}
function __ZN19AvatarJointNumIndexC2EPK16AvatarJointIndex($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$07293 = 0, $$092 = 0, $$pre$phi108Z2D = 0, $$pre$phiZ2D = 0, $175 = 0, $177 = 0, $178 = 0, $180 = 0, $182 = 0, $186 = 0, $187 = 0, $188 = 0, $192 = 0, $194 = 0, $197 = 0, $2 = 0, $203 = 0, $206 = 0, $208 = 0, $212 = 0, $213 = 0, $214 = 0, $218 = 0, $220 = 0, $223 = 0, $231 = 0, $232 = 0, $234 = 0, $236 = 0, $241 = 0, $243 = 0, $248 = 0, $250 = 0, $255 = 0, $3 = 0, $33 = 0, $35 = 0, $370 = 0, $39 = 0, $4 = 0, $41 = 0, $46 = 0, $48 = 0, $5 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
$2 = $0 + 100 | 0;
$3 = $0 + 104 | 0;
HEAP32[$3 >> 2] = 10;
$4 = $0 + 112 | 0;
HEAP32[$4 >> 2] = 0;
HEAP32[$2 >> 2] = 0;
$5 = $0 + 108 | 0;
HEAP32[$5 >> 2] = 0;
$6 = $0 + 116 | 0;
$7 = $0 + 120 | 0;
HEAP32[$7 >> 2] = 10;
$8 = $0 + 128 | 0;
HEAP32[$8 >> 2] = 0;
HEAP32[$6 >> 2] = 0;
$9 = $0 + 124 | 0;
HEAP32[$9 >> 2] = 0;
HEAP16[$0 >> 1] = HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 2 >> 1] = HEAP32[(HEAP32[$1 + 4 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 4 >> 1] = HEAP32[(HEAP32[$1 + 8 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 6 >> 1] = HEAP32[(HEAP32[$1 + 12 >> 2] | 0) + 4 >> 2];
$33 = HEAP32[$1 + 212 >> 2] | 0;
if (!$33) $39 = -1; else $39 = HEAP32[$33 + 4 >> 2] & 65535;
HEAP16[$0 + 86 >> 1] = $39;
$41 = HEAP32[$1 + 220 >> 2] | 0;
if (!$41) $46 = -1; else $46 = HEAP32[$41 + 4 >> 2] & 65535;
HEAP16[$0 + 90 >> 1] = $46;
$48 = HEAP32[$1 + 228 >> 2] | 0;
if (!$48) $53 = -1; else $53 = HEAP32[$48 + 4 >> 2] & 65535;
HEAP16[$0 + 94 >> 1] = $53;
HEAP16[$0 + 10 >> 1] = HEAP32[(HEAP32[$1 + 20 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 12 >> 1] = HEAP32[(HEAP32[$1 + 24 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 14 >> 1] = HEAP32[(HEAP32[$1 + 28 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 16 >> 1] = HEAP32[(HEAP32[$1 + 32 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 26 >> 1] = HEAP32[(HEAP32[$1 + 52 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 28 >> 1] = HEAP32[(HEAP32[$1 + 56 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 30 >> 1] = HEAP32[(HEAP32[$1 + 60 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 32 >> 1] = HEAP32[(HEAP32[$1 + 64 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 34 >> 1] = HEAP32[(HEAP32[$1 + 68 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 36 >> 1] = HEAP32[(HEAP32[$1 + 72 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 38 >> 1] = HEAP32[(HEAP32[$1 + 76 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 40 >> 1] = HEAP32[(HEAP32[$1 + 80 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 42 >> 1] = HEAP32[(HEAP32[$1 + 84 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 44 >> 1] = HEAP32[(HEAP32[$1 + 88 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 46 >> 1] = HEAP32[(HEAP32[$1 + 92 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 48 >> 1] = HEAP32[(HEAP32[$1 + 96 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 50 >> 1] = HEAP32[(HEAP32[$1 + 100 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 52 >> 1] = HEAP32[(HEAP32[$1 + 104 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 54 >> 1] = HEAP32[(HEAP32[$1 + 108 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 8 >> 1] = HEAP32[(HEAP32[$1 + 16 >> 2] | 0) + 4 >> 2];
$175 = HEAP32[$1 + 216 >> 2] | 0;
if (!$175) $241 = -1; else $241 = HEAP32[$175 + 4 >> 2] & 65535;
HEAP16[$0 + 88 >> 1] = $241;
$243 = HEAP32[$1 + 224 >> 2] | 0;
if (!$243) $248 = -1; else $248 = HEAP32[$243 + 4 >> 2] & 65535;
HEAP16[$0 + 92 >> 1] = $248;
$250 = HEAP32[$1 + 232 >> 2] | 0;
if (!$250) $255 = -1; else $255 = HEAP32[$250 + 4 >> 2] & 65535;
HEAP16[$0 + 96 >> 1] = $255;
HEAP16[$0 + 18 >> 1] = HEAP32[(HEAP32[$1 + 36 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 20 >> 1] = HEAP32[(HEAP32[$1 + 40 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 22 >> 1] = HEAP32[(HEAP32[$1 + 44 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 24 >> 1] = HEAP32[(HEAP32[$1 + 48 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 56 >> 1] = HEAP32[(HEAP32[$1 + 112 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 58 >> 1] = HEAP32[(HEAP32[$1 + 116 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 60 >> 1] = HEAP32[(HEAP32[$1 + 120 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 62 >> 1] = HEAP32[(HEAP32[$1 + 124 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 64 >> 1] = HEAP32[(HEAP32[$1 + 128 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 66 >> 1] = HEAP32[(HEAP32[$1 + 132 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 68 >> 1] = HEAP32[(HEAP32[$1 + 136 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 70 >> 1] = HEAP32[(HEAP32[$1 + 140 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 72 >> 1] = HEAP32[(HEAP32[$1 + 144 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 74 >> 1] = HEAP32[(HEAP32[$1 + 148 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 76 >> 1] = HEAP32[(HEAP32[$1 + 152 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 78 >> 1] = HEAP32[(HEAP32[$1 + 156 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 80 >> 1] = HEAP32[(HEAP32[$1 + 160 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 82 >> 1] = HEAP32[(HEAP32[$1 + 164 >> 2] | 0) + 4 >> 2];
HEAP16[$0 + 84 >> 1] = HEAP32[(HEAP32[$1 + 168 >> 2] | 0) + 4 >> 2];
$203 = $1 + 264 | 0;
$370 = HEAP32[$203 >> 2] | 0;
L19 : do if (($370 | 0) > 0) {
$35 = $1 + 252 | 0;
$$07293 = 0;
$182 = $370;
while (1) {
if (($182 | 0) > ($$07293 | 0)) $187 = HEAP32[(HEAP32[$35 >> 2] | 0) + ($$07293 << 2) >> 2] | 0; else $187 = 0;
$186 = $187 + 4 | 0;
$188 = HEAP32[$8 >> 2] | 0;
if (($188 | 0) < 0) $206 = $182; else {
if ((HEAP32[$9 >> 2] | 0) > ($188 | 0)) {
$$pre$phi108Z2D = $188 + 1 | 0;
label = 18;
} else {
$192 = HEAP32[$7 >> 2] | 0;
$194 = $188 + 1 | 0;
__THREW__ = 0;
invoke_vii(126, $6 | 0, (($192 | 0) > ($188 | 0) ? $192 : $194 + ($188 >>> 1) | 0) | 0);
$197 = __THREW__;
__THREW__ = 0;
if ($197 & 1) break L19;
if ((HEAP32[$8 >> 2] | 0) <= ($188 | 0)) {
$$pre$phi108Z2D = $194;
label = 18;
}
}
if ((label | 0) == 18) {
label = 0;
HEAP32[$8 >> 2] = $$pre$phi108Z2D;
}
HEAP32[(HEAP32[$6 >> 2] | 0) + ($188 << 2) >> 2] = HEAP32[$186 >> 2];
$206 = HEAP32[$203 >> 2] | 0;
}
$$07293 = $$07293 + 1 | 0;
if (($$07293 | 0) >= ($206 | 0)) {
label = 9;
break;
} else $182 = $206;
}
} else label = 9; while (0);
L36 : do if ((label | 0) == 9) {
$177 = $1 + 248 | 0;
$178 = HEAP32[$177 >> 2] | 0;
if (($178 | 0) <= 0) return;
$180 = $1 + 236 | 0;
$$092 = 0;
$208 = $178;
while (1) {
if (($208 | 0) > ($$092 | 0)) $213 = HEAP32[(HEAP32[$180 >> 2] | 0) + ($$092 << 2) >> 2] | 0; else $213 = 0;
$212 = $213 + 4 | 0;
$214 = HEAP32[$4 >> 2] | 0;
if (($214 | 0) < 0) $231 = $208; else {
if ((HEAP32[$5 >> 2] | 0) > ($214 | 0)) {
$$pre$phiZ2D = $214 + 1 | 0;
label = 29;
} else {
$218 = HEAP32[$3 >> 2] | 0;
$220 = $214 + 1 | 0;
__THREW__ = 0;
invoke_vii(126, $2 | 0, (($218 | 0) > ($214 | 0) ? $218 : $220 + ($214 >>> 1) | 0) | 0);
$223 = __THREW__;
__THREW__ = 0;
if ($223 & 1) break L36;
if ((HEAP32[$4 >> 2] | 0) <= ($214 | 0)) {
$$pre$phiZ2D = $220;
label = 29;
}
}
if ((label | 0) == 29) {
label = 0;
HEAP32[$4 >> 2] = $$pre$phiZ2D;
}
HEAP32[(HEAP32[$2 >> 2] | 0) + ($214 << 2) >> 2] = HEAP32[$212 >> 2];
$231 = HEAP32[$177 >> 2] | 0;
}
$$092 = $$092 + 1 | 0;
if (($$092 | 0) >= ($231 | 0)) break; else $208 = $231;
}
return;
} while (0);
$232 = ___cxa_find_matching_catch_2() | 0;
$234 = HEAP32[$6 >> 2] | 0;
if ($234 | 0) {
_free($234);
HEAP32[$6 >> 2] = 0;
}
HEAP32[$8 >> 2] = 0;
HEAP32[$9 >> 2] = 0;
$236 = HEAP32[$2 >> 2] | 0;
if (!$236) {
HEAP32[$4 >> 2] = 0;
HEAP32[$5 >> 2] = 0;
___resumeException($232 | 0);
}
_free($236);
HEAP32[$2 >> 2] = 0;
HEAP32[$4 >> 2] = 0;
HEAP32[$5 >> 2] = 0;
___resumeException($232 | 0);
}
function _big2_scanRef($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$021$i$i = 0, $$02132$i$i = 0, $$02134$i$i = 0, $$027$i = 0, $$060 = 0, $$06094 = 0, $$06096 = 0, $$pn$i = 0, $$pn33$i$i = 0, $$pn33$i$i$phi = 0, $$pn95 = 0, $$pn95$phi = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $43 = 0, $48 = 0, $5 = 0, $50 = 0, $7 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $92 = 0, $93 = 0, label = 0;
if (($1 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
$5 = HEAP8[$1 >> 0] | 0;
L4 : do switch ($5 << 24 >> 24) {
case 0:
{
$8 = $0 + 72 | 0;
$10 = HEAP8[$1 + 1 >> 0] | 0;
switch (HEAP8[$8 + ($10 & 255) >> 0] | 0) {
case 29:
{
$22 = $10;
label = 8;
break L4;
break;
}
case 24:
case 22:
{
break L4;
break;
}
case 7:
{
label = 14;
break L4;
break;
}
case 5:
{
if (($2 - $1 | 0) < 2) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
case 6:
{
if (($2 - $1 | 0) < 3) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
case 19:
{
$43 = $1 + 2 | 0;
if (($43 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
do if (!(HEAP8[$43 >> 0] | 0)) {
$48 = HEAP8[$1 + 3 >> 0] | 0;
if ($48 << 24 >> 24 != 120) {
if ((HEAP8[$8 + ($48 & 255) >> 0] | 0) == 25) $$pn$i = $43; else break;
L26 : while (1) {
$$027$i = $$pn$i + 2 | 0;
if (($$027$i | 0) == ($2 | 0)) {
$$0 = -1;
label = 52;
break;
}
if (HEAP8[$$027$i >> 0] | 0) {
label = 35;
break;
}
switch (HEAP8[$8 + (HEAPU8[$$pn$i + 3 >> 0] | 0) >> 0] | 0) {
case 25:
{
$$pn$i = $$027$i;
break;
}
case 18:
{
label = 34;
break L26;
break;
}
default:
{
label = 35;
break L26;
}
}
}
if ((label | 0) == 34) {
HEAP32[$3 >> 2] = $$pn$i + 4;
$$0 = 10;
return $$0 | 0;
} else if ((label | 0) == 35) {
HEAP32[$3 >> 2] = $$027$i;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 52) return $$0 | 0;
}
$50 = $1 + 4 | 0;
if (($50 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
if (!(HEAP8[$50 >> 0] | 0)) if ((HEAP8[$8 + (HEAPU8[$1 + 5 >> 0] | 0) >> 0] & -2) << 24 >> 24 == 24) {
$$02132$i$i = $1 + 6 | 0;
if (($$02132$i$i | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
} else {
$$02134$i$i = $$02132$i$i;
$$pn33$i$i = $50;
}
L45 : while (1) {
if (HEAP8[$$02134$i$i >> 0] | 0) {
label = 28;
break;
}
switch (HEAP8[$8 + (HEAPU8[$$pn33$i$i + 3 >> 0] | 0) >> 0] | 0) {
case 18:
{
label = 27;
break L45;
break;
}
case 24:
case 25:
break;
default:
{
label = 28;
break L45;
}
}
$$021$i$i = $$02134$i$i + 2 | 0;
if (($$021$i$i | 0) == ($2 | 0)) {
$$0 = -1;
label = 52;
break;
} else {
$$pn33$i$i$phi = $$02134$i$i;
$$02134$i$i = $$021$i$i;
$$pn33$i$i = $$pn33$i$i$phi;
}
}
if ((label | 0) == 27) {
HEAP32[$3 >> 2] = $$pn33$i$i + 4;
$$0 = 10;
return $$0 | 0;
} else if ((label | 0) == 28) {
HEAP32[$3 >> 2] = $$02134$i$i;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 52) return $$0 | 0;
}
HEAP32[$3 >> 2] = $50;
$$0 = 0;
return $$0 | 0;
} while (0);
HEAP32[$3 >> 2] = $43;
$$0 = 0;
return $$0 | 0;
}
default:
{
label = 36;
break L4;
}
}
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 14;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 36;
break;
}
case -1:
{
$7 = HEAP8[$1 + 1 >> 0] | 0;
if (($7 & 255) > 253) label = 36; else {
$22 = $7;
label = 8;
}
break;
}
default:
{
$22 = HEAP8[$1 + 1 >> 0] | 0;
label = 8;
}
} while (0);
if ((label | 0) == 8) {
$21 = $22 & 255;
if (!(1 << ($21 & 31) & HEAP32[3996 + (($21 >>> 5 | HEAPU8[59947 + ($5 & 255) >> 0] << 3) << 2) >> 2])) {
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
} else if ((label | 0) == 14) {
if (($2 - $1 | 0) < 4) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 36) {
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
$$06094 = $1 + 2 | 0;
if (($$06094 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
$15 = $0 + 72 | 0;
$$06096 = $$06094;
$$pn95 = $1;
L75 : while (1) {
$79 = HEAP8[$$06096 >> 0] | 0;
switch ($79 << 24 >> 24) {
case -37:
case -38:
case -39:
case -40:
{
label = 48;
break L75;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 51;
break L75;
break;
}
case 0:
{
$83 = HEAP8[$$pn95 + 3 >> 0] | 0;
switch (HEAP8[$15 + ($83 & 255) >> 0] | 0) {
case 7:
{
label = 48;
break L75;
break;
}
case 5:
{
label = 44;
break L75;
break;
}
case 6:
{
label = 46;
break L75;
break;
}
case 18:
{
label = 50;
break L75;
break;
}
case 29:
{
$93 = $83;
label = 41;
break;
}
case 27:
case 26:
case 25:
case 24:
case 22:
break;
default:
{
label = 51;
break L75;
}
}
break;
}
case -1:
{
$81 = HEAP8[$$pn95 + 3 >> 0] | 0;
if (($81 & 255) > 253) {
label = 51;
break L75;
} else {
$93 = $81;
label = 41;
}
break;
}
default:
{
$93 = HEAP8[$$pn95 + 3 >> 0] | 0;
label = 41;
}
}
if ((label | 0) == 41) {
label = 0;
$92 = $93 & 255;
if (!(1 << ($92 & 31) & HEAP32[3996 + (($92 >>> 5 | HEAPU8[60203 + ($79 & 255) >> 0] << 3) << 2) >> 2])) {
label = 43;
break;
}
}
$$060 = $$06096 + 2 | 0;
if (($$060 | 0) == ($2 | 0)) {
$$0 = -1;
label = 52;
break;
} else {
$$pn95$phi = $$06096;
$$06096 = $$060;
$$pn95 = $$pn95$phi;
}
}
if ((label | 0) == 43) {
HEAP32[$3 >> 2] = $$06096;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 44) {
if (($2 - $$06096 | 0) < 2) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $$06096;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 46) {
if (($2 - $$06096 | 0) < 3) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $$06096;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 48) {
if (($2 - $$06096 | 0) < 4) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $$06096;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 50) {
HEAP32[$3 >> 2] = $$pn95 + 4;
$$0 = 9;
return $$0 | 0;
} else if ((label | 0) == 51) {
HEAP32[$3 >> 2] = $$06096;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 52) return $$0 | 0;
return 0;
}
function _little2_scanRef($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$021$i$i = 0, $$02132$i$i = 0, $$02134$i$i = 0, $$027$i = 0, $$060 = 0, $$06094 = 0, $$06096 = 0, $$pn$i = 0, $$pn33$i$i = 0, $$pn33$i$i$phi = 0, $$pn95 = 0, $$pn95$phi = 0, $14 = 0, $20 = 0, $21 = 0, $42 = 0, $46 = 0, $48 = 0, $6 = 0, $7 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $89 = 0, $9 = 0, $90 = 0, label = 0;
if (($1 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
$6 = HEAP8[$1 + 1 >> 0] | 0;
L4 : do switch ($6 << 24 >> 24) {
case 0:
{
$8 = $0 + 72 | 0;
$9 = HEAP8[$1 >> 0] | 0;
switch (HEAP8[$8 + ($9 & 255) >> 0] | 0) {
case 29:
{
$21 = $9;
label = 8;
break L4;
break;
}
case 24:
case 22:
{
break L4;
break;
}
case 7:
{
label = 14;
break L4;
break;
}
case 5:
{
if (($2 - $1 | 0) < 2) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
case 6:
{
if (($2 - $1 | 0) < 3) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
case 19:
{
$42 = $1 + 2 | 0;
if (($42 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
do if (!(HEAP8[$1 + 3 >> 0] | 0)) {
$46 = HEAP8[$42 >> 0] | 0;
if ($46 << 24 >> 24 != 120) {
if ((HEAP8[$8 + ($46 & 255) >> 0] | 0) == 25) $$pn$i = $42; else break;
L26 : while (1) {
$$027$i = $$pn$i + 2 | 0;
if (($$027$i | 0) == ($2 | 0)) {
$$0 = -1;
label = 52;
break;
}
if (HEAP8[$$pn$i + 3 >> 0] | 0) {
label = 35;
break;
}
switch (HEAP8[$8 + (HEAPU8[$$027$i >> 0] | 0) >> 0] | 0) {
case 25:
{
$$pn$i = $$027$i;
break;
}
case 18:
{
label = 34;
break L26;
break;
}
default:
{
label = 35;
break L26;
}
}
}
if ((label | 0) == 34) {
HEAP32[$3 >> 2] = $$pn$i + 4;
$$0 = 10;
return $$0 | 0;
} else if ((label | 0) == 35) {
HEAP32[$3 >> 2] = $$027$i;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 52) return $$0 | 0;
}
$48 = $1 + 4 | 0;
if (($48 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
if (!(HEAP8[$1 + 5 >> 0] | 0)) if ((HEAP8[$8 + (HEAPU8[$48 >> 0] | 0) >> 0] & -2) << 24 >> 24 == 24) {
$$02132$i$i = $1 + 6 | 0;
if (($$02132$i$i | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
} else {
$$02134$i$i = $$02132$i$i;
$$pn33$i$i = $48;
}
L45 : while (1) {
if (HEAP8[$$pn33$i$i + 3 >> 0] | 0) {
label = 28;
break;
}
switch (HEAP8[$8 + (HEAPU8[$$02134$i$i >> 0] | 0) >> 0] | 0) {
case 18:
{
label = 27;
break L45;
break;
}
case 24:
case 25:
break;
default:
{
label = 28;
break L45;
}
}
$$021$i$i = $$02134$i$i + 2 | 0;
if (($$021$i$i | 0) == ($2 | 0)) {
$$0 = -1;
label = 52;
break;
} else {
$$pn33$i$i$phi = $$02134$i$i;
$$02134$i$i = $$021$i$i;
$$pn33$i$i = $$pn33$i$i$phi;
}
}
if ((label | 0) == 27) {
HEAP32[$3 >> 2] = $$pn33$i$i + 4;
$$0 = 10;
return $$0 | 0;
} else if ((label | 0) == 28) {
HEAP32[$3 >> 2] = $$02134$i$i;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 52) return $$0 | 0;
}
HEAP32[$3 >> 2] = $48;
$$0 = 0;
return $$0 | 0;
} while (0);
HEAP32[$3 >> 2] = $42;
$$0 = 0;
return $$0 | 0;
}
default:
{
label = 36;
break L4;
}
}
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 14;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 36;
break;
}
case -1:
{
$7 = HEAP8[$1 >> 0] | 0;
if (($7 & 255) > 253) label = 36; else {
$21 = $7;
label = 8;
}
break;
}
default:
{
$21 = HEAP8[$1 >> 0] | 0;
label = 8;
}
} while (0);
if ((label | 0) == 8) {
$20 = $21 & 255;
if (!(1 << ($20 & 31) & HEAP32[3996 + (($20 >>> 5 | HEAPU8[59947 + ($6 & 255) >> 0] << 3) << 2) >> 2])) {
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
} else if ((label | 0) == 14) {
if (($2 - $1 | 0) < 4) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 36) {
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
$$06094 = $1 + 2 | 0;
if (($$06094 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
$14 = $0 + 72 | 0;
$$06096 = $$06094;
$$pn95 = $1;
L75 : while (1) {
$78 = HEAP8[$$pn95 + 3 >> 0] | 0;
switch ($78 << 24 >> 24) {
case -37:
case -38:
case -39:
case -40:
{
label = 48;
break L75;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 51;
break L75;
break;
}
case 0:
{
$80 = HEAP8[$$06096 >> 0] | 0;
switch (HEAP8[$14 + ($80 & 255) >> 0] | 0) {
case 7:
{
label = 48;
break L75;
break;
}
case 5:
{
label = 44;
break L75;
break;
}
case 6:
{
label = 46;
break L75;
break;
}
case 18:
{
label = 50;
break L75;
break;
}
case 29:
{
$90 = $80;
label = 41;
break;
}
case 27:
case 26:
case 25:
case 24:
case 22:
break;
default:
{
label = 51;
break L75;
}
}
break;
}
case -1:
{
$79 = HEAP8[$$06096 >> 0] | 0;
if (($79 & 255) > 253) {
label = 51;
break L75;
} else {
$90 = $79;
label = 41;
}
break;
}
default:
{
$90 = HEAP8[$$06096 >> 0] | 0;
label = 41;
}
}
if ((label | 0) == 41) {
label = 0;
$89 = $90 & 255;
if (!(1 << ($89 & 31) & HEAP32[3996 + (($89 >>> 5 | HEAPU8[60203 + ($78 & 255) >> 0] << 3) << 2) >> 2])) {
label = 43;
break;
}
}
$$060 = $$06096 + 2 | 0;
if (($$060 | 0) == ($2 | 0)) {
$$0 = -1;
label = 52;
break;
} else {
$$pn95$phi = $$06096;
$$06096 = $$060;
$$pn95 = $$pn95$phi;
}
}
if ((label | 0) == 43) {
HEAP32[$3 >> 2] = $$06096;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 44) {
if (($2 - $$06096 | 0) < 2) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $$06096;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 46) {
if (($2 - $$06096 | 0) < 3) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $$06096;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 48) {
if (($2 - $$06096 | 0) < 4) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $$06096;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 50) {
HEAP32[$3 >> 2] = $$pn95 + 4;
$$0 = 9;
return $$0 | 0;
} else if ((label | 0) == 51) {
HEAP32[$3 >> 2] = $$06096;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 52) return $$0 | 0;
return 0;
}
function __ZN17AvatarConstraintsC2Ev($0) {
$0 = $0 | 0;
var $$1 = 0, $$127 = 0, $1 = 0, $102 = 0, $104 = 0, $106 = 0, $109 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = f0, $20 = 0, $22 = f0, $23 = 0, $26 = f0, $27 = 0, $3 = 0, $30 = f0, $31 = 0, $34 = f0, $35 = 0, $38 = f0, $39 = 0, $42 = f0, $43 = 0, $46 = f0, $47 = 0, $5 = 0, $50 = f0, $51 = 0, $54 = f0, $55 = 0, $58 = f0, $59 = 0, $62 = f0, $63 = 0, $66 = f0, $67 = 0, $7 = 0, $70 = f0, $71 = 0, $74 = f0, $75 = 0, $78 = f0, $79 = 0, $82 = f0, $83 = 0, $86 = f0, $87 = 0, $9 = 0, $90 = f0, $91 = 0, $93 = 0, $94 = 0, $97 = 0, $99 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$1 = sp + 4 | 0;
__THREW__ = 0;
invoke_vi(98, $0 + 52 | 0);
$3 = __THREW__;
__THREW__ = 0;
if ($3 & 1) {
$5 = ___cxa_find_matching_catch_2() | 0;
$$1 = $5;
$$127 = tempRet0;
___resumeException($$1 | 0);
}
$7 = $0 + 64 | 0;
HEAPF32[$7 >> 2] = Math_fround(0.0);
__THREW__ = 0;
invoke_vi(98, $0 + 68 | 0);
$9 = __THREW__;
__THREW__ = 0;
if ($9 & 1) {
$15 = ___cxa_find_matching_catch_2() | 0;
$$1 = $15;
$$127 = tempRet0;
___resumeException($$1 | 0);
}
$93 = $0 + 80 | 0;
HEAPF32[$93 >> 2] = Math_fround(0.0);
__THREW__ = 0;
$12 = invoke_iii(21, HEAP32[16168] | 0, 17443) | 0;
$109 = __THREW__;
__THREW__ = 0;
do if (!($109 & 1)) {
if (!$12) {
__THREW__ = 0;
invoke_vii(115, 17548, $vararg_buffer | 0);
$13 = __THREW__;
__THREW__ = 0;
if ($13 & 1) break;
}
__THREW__ = 0;
$19 = Math_fround(+invoke_fiif(1, $12 | 0, 17613, .5));
$20 = __THREW__;
__THREW__ = 0;
if (!($20 & 1)) {
HEAPF32[$0 >> 2] = $19;
__THREW__ = 0;
$22 = Math_fround(+invoke_fiif(1, $12 | 0, 17636, 1.60000002));
$23 = __THREW__;
__THREW__ = 0;
if (!($23 & 1)) {
HEAPF32[$0 + 4 >> 2] = $22;
__THREW__ = 0;
$26 = Math_fround(+invoke_fiif(1, $12 | 0, 17652, .300000012));
$27 = __THREW__;
__THREW__ = 0;
if (!($27 & 1)) {
HEAPF32[$0 + 8 >> 2] = $26;
__THREW__ = 0;
$30 = Math_fround(+invoke_fiif(1, $12 | 0, 17668, .5));
$31 = __THREW__;
__THREW__ = 0;
if (!($31 & 1)) {
HEAPF32[$0 + 12 >> 2] = $30;
__THREW__ = 0;
$34 = Math_fround(+invoke_fiif(1, $12 | 0, 17686, .699999988));
$35 = __THREW__;
__THREW__ = 0;
if (!($35 & 1)) {
HEAPF32[$0 + 16 >> 2] = $34;
__THREW__ = 0;
$38 = Math_fround(+invoke_fiif(1, $12 | 0, 17699, .200000003));
$39 = __THREW__;
__THREW__ = 0;
if (!($39 & 1)) {
HEAPF32[$0 + 20 >> 2] = $38;
__THREW__ = 0;
$42 = Math_fround(+invoke_fiif(1, $12 | 0, 17714, .699999988));
$43 = __THREW__;
__THREW__ = 0;
if (!($43 & 1)) {
HEAPF32[$0 + 24 >> 2] = $42;
__THREW__ = 0;
$46 = Math_fround(+invoke_fiif(1, $12 | 0, 17728, .699999988));
$47 = __THREW__;
__THREW__ = 0;
if (!($47 & 1)) {
HEAPF32[$0 + 28 >> 2] = $46;
__THREW__ = 0;
$50 = Math_fround(+invoke_fiif(1, $12 | 0, 17743, .800000011));
$51 = __THREW__;
__THREW__ = 0;
if (!($51 & 1)) {
HEAPF32[$0 + 32 >> 2] = $50;
__THREW__ = 0;
$54 = Math_fround(+invoke_fiif(1, $12 | 0, 17752, .200000003));
$55 = __THREW__;
__THREW__ = 0;
if (!($55 & 1)) {
HEAPF32[$0 + 36 >> 2] = $54;
__THREW__ = 0;
$58 = Math_fround(+invoke_fiif(1, $12 | 0, 17766, 2.0));
$59 = __THREW__;
__THREW__ = 0;
if (!($59 & 1)) {
HEAPF32[$0 + 40 >> 2] = $58;
__THREW__ = 0;
$62 = Math_fround(+invoke_fiif(1, $12 | 0, 17780, .5));
$63 = __THREW__;
__THREW__ = 0;
if (!($63 & 1)) {
HEAPF32[$0 + 44 >> 2] = $62;
__THREW__ = 0;
$66 = Math_fround(+invoke_fiif(1, $12 | 0, 17798, .5));
$67 = __THREW__;
__THREW__ = 0;
if (!($67 & 1)) {
HEAPF32[$0 + 48 >> 2] = $66;
__THREW__ = 0;
$70 = Math_fround(+invoke_fiif(1, $12 | 0, 17817, .600000024));
$71 = __THREW__;
__THREW__ = 0;
if (!($71 & 1)) {
HEAPF32[$0 + 84 >> 2] = $70;
__THREW__ = 0;
$74 = Math_fround(+invoke_fiif(1, $12 | 0, 17827, 1.57000005));
$75 = __THREW__;
__THREW__ = 0;
if (!($75 & 1)) {
HEAPF32[$0 + 88 >> 2] = $74;
__THREW__ = 0;
$78 = Math_fround(+invoke_fiif(1, $12 | 0, 17844, 1.57000005));
$79 = __THREW__;
__THREW__ = 0;
if ($79 & 1) break;
HEAPF32[$0 + 92 >> 2] = $78;
__THREW__ = 0;
$82 = Math_fround(+invoke_fiif(1, $12 | 0, 17860, 1.57000005));
$83 = __THREW__;
__THREW__ = 0;
if ($83 & 1) break;
HEAPF32[$0 + 96 >> 2] = $82;
__THREW__ = 0;
$86 = Math_fround(+invoke_fiif(1, $12 | 0, 17877, 1.57000005));
$87 = __THREW__;
__THREW__ = 0;
if ($87 & 1) break;
HEAPF32[$0 + 100 >> 2] = $86;
__THREW__ = 0;
$90 = Math_fround(+invoke_fiif(1, $12 | 0, 17894, 1.95000005));
$91 = __THREW__;
__THREW__ = 0;
if ($91 & 1) break;
HEAPF32[$93 >> 2] = $90;
HEAPF32[$7 >> 2] = $90;
__THREW__ = 0;
invoke_vifff(2, $1 | 0, -1.5, 1.0, 1.0);
$94 = __THREW__;
__THREW__ = 0;
do if (!($94 & 1)) {
__THREW__ = 0;
invoke_iiiii(25, $12 | 0, $0 + 68 | 0, 17904, $1 | 0) | 0;
$97 = __THREW__;
__THREW__ = 0;
if ($97 & 1) break;
__THREW__ = 0;
invoke_vifff(2, $1 | 0, 1.5, 1.0, 1.0);
$99 = __THREW__;
__THREW__ = 0;
do if (!($99 & 1)) {
__THREW__ = 0;
invoke_iiiii(25, $12 | 0, $0 + 52 | 0, 17920, $1 | 0) | 0;
$102 = __THREW__;
__THREW__ = 0;
if ($102 & 1) break;
STACKTOP = sp;
return;
} while (0);
$106 = ___cxa_find_matching_catch_2() | 0;
$$1 = $106;
$$127 = tempRet0;
___resumeException($$1 | 0);
} while (0);
$104 = ___cxa_find_matching_catch_2() | 0;
$$1 = $104;
$$127 = tempRet0;
___resumeException($$1 | 0);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} while (0);
$17 = ___cxa_find_matching_catch_2() | 0;
$$1 = $17;
$$127 = tempRet0;
___resumeException($$1 | 0);
}
function _doCdataSection($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
var $$0$ph$i = 0, $$0$ph$i69 = 0, $$0$ph$i73 = 0, $$024$ph$i = 0, $$024$ph$i68 = 0, $$024$ph$i72 = 0, $$066 = 0, $$067 = 0, $$1$ph = 0, $$pre$phi93Z2D = 0, $$pre$phi95Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $103 = 0, $107 = 0, $11 = 0, $111 = 0, $114 = 0, $116 = 0, $121 = 0, $129 = 0, $14 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $37 = 0, $39 = 0, $44 = 0, $52 = 0, $6 = 0, $62 = 0, $65 = 0, $68 = 0, $7 = 0, $70 = 0, $75 = 0, $8 = 0, $83 = 0, $9 = 0, $93 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$6 = sp + 12 | 0;
$7 = sp + 8 | 0;
$8 = sp + 4 | 0;
$9 = sp;
$10 = HEAP32[$2 >> 2] | 0;
HEAP32[$8 >> 2] = $10;
$11 = $0 + 144 | 0;
if ((HEAP32[$11 >> 2] | 0) == ($1 | 0)) {
$14 = $0 + 272 | 0;
HEAP32[$14 >> 2] = $10;
$15 = $0 + 276 | 0;
$$066 = $14;
$$067 = $15;
$$pre$phi93Z2D = $15;
$$pre$phi95Z2D = $0 + 284 | 0;
$$pre$phiZ2D = $14;
} else {
$16 = $0 + 284 | 0;
$17 = HEAP32[$16 >> 2] | 0;
$$066 = $17;
$$067 = $17 + 4 | 0;
$$pre$phi93Z2D = $0 + 276 | 0;
$$pre$phi95Z2D = $16;
$$pre$phiZ2D = $0 + 272 | 0;
}
HEAP32[$$066 >> 2] = $10;
HEAP32[$2 >> 2] = 0;
$19 = $1 + 8 | 0;
$20 = $0 + 60 | 0;
$21 = $0 + 80 | 0;
$22 = $1 + 68 | 0;
$23 = $0 + 44 | 0;
$24 = $1 + 56 | 0;
$25 = $0 + 48 | 0;
$26 = $0 + 4 | 0;
$27 = $0 + 464 | 0;
L5 : while (1) {
$30 = FUNCTION_TABLE_iiiii[HEAP32[$19 >> 2] & 63]($1, HEAP32[$8 >> 2] | 0, $3, $9) | 0;
$31 = HEAP32[$9 >> 2] | 0;
HEAP32[$$067 >> 2] = $31;
$32 = $31;
L7 : do switch ($30 | 0) {
case 40:
{
label = 6;
break L5;
break;
}
case 0:
{
label = 41;
break L5;
break;
}
case -2:
{
label = 42;
break L5;
break;
}
case -4:
case -1:
{
label = 44;
break L5;
break;
}
case 7:
{
$65 = HEAP32[$20 >> 2] | 0;
if ($65 | 0) {
HEAP8[$6 >> 0] = 10;
FUNCTION_TABLE_viii[$65 & 127](HEAP32[$26 >> 2] | 0, $6, 1);
break L7;
}
$68 = HEAP32[$21 >> 2] | 0;
if ($68 | 0) {
$70 = HEAP32[$8 >> 2] | 0;
HEAP32[$6 >> 2] = $70;
if (!(HEAP8[$22 >> 0] | 0)) {
if ((HEAP32[$11 >> 2] | 0) == ($1 | 0)) {
$$0$ph$i69 = $$pre$phi93Z2D;
$$024$ph$i68 = $$pre$phiZ2D;
} else {
$75 = HEAP32[$$pre$phi95Z2D >> 2] | 0;
$$0$ph$i69 = $75 + 4 | 0;
$$024$ph$i68 = $75;
}
do {
HEAP32[$7 >> 2] = HEAP32[$23 >> 2];
FUNCTION_TABLE_viiiii[HEAP32[$24 >> 2] & 15]($1, $6, $32, $7, HEAP32[$25 >> 2] | 0);
HEAP32[$$0$ph$i69 >> 2] = HEAP32[$6 >> 2];
$83 = HEAP32[$23 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[$21 >> 2] & 127](HEAP32[$26 >> 2] | 0, $83, (HEAP32[$7 >> 2] | 0) - $83 | 0);
HEAP32[$$024$ph$i68 >> 2] = HEAP32[$6 >> 2];
} while ((HEAP32[$6 >> 2] | 0) != ($32 | 0));
} else FUNCTION_TABLE_viii[$68 & 127](HEAP32[$26 >> 2] | 0, $70, $31 - $70 | 0);
}
break;
}
case 6:
{
$93 = HEAP32[$20 >> 2] | 0;
if ($93 | 0) {
if (!(HEAP8[$22 >> 0] | 0)) $100 = $32; else {
$111 = HEAP32[$8 >> 2] | 0;
FUNCTION_TABLE_viii[$93 & 127](HEAP32[$26 >> 2] | 0, $111, $31 - $111 | 0);
break L7;
}
while (1) {
HEAP32[$6 >> 2] = HEAP32[$23 >> 2];
FUNCTION_TABLE_viiiii[HEAP32[$24 >> 2] & 15]($1, $8, $100, $6, HEAP32[$25 >> 2] | 0);
HEAP32[$$067 >> 2] = HEAP32[$9 >> 2];
$103 = HEAP32[$23 >> 2] | 0;
FUNCTION_TABLE_viii[$93 & 127](HEAP32[$26 >> 2] | 0, $103, (HEAP32[$6 >> 2] | 0) - $103 | 0);
$107 = HEAP32[$8 >> 2] | 0;
if (($107 | 0) == (HEAP32[$9 >> 2] | 0)) break;
HEAP32[$$066 >> 2] = $107;
$100 = HEAP32[$9 >> 2] | 0;
}
break L7;
}
$114 = HEAP32[$21 >> 2] | 0;
if ($114 | 0) {
$116 = HEAP32[$8 >> 2] | 0;
HEAP32[$6 >> 2] = $116;
if (!(HEAP8[$22 >> 0] | 0)) {
if ((HEAP32[$11 >> 2] | 0) == ($1 | 0)) {
$$0$ph$i73 = $$pre$phi93Z2D;
$$024$ph$i72 = $$pre$phiZ2D;
} else {
$121 = HEAP32[$$pre$phi95Z2D >> 2] | 0;
$$0$ph$i73 = $121 + 4 | 0;
$$024$ph$i72 = $121;
}
do {
HEAP32[$7 >> 2] = HEAP32[$23 >> 2];
FUNCTION_TABLE_viiiii[HEAP32[$24 >> 2] & 15]($1, $6, $32, $7, HEAP32[$25 >> 2] | 0);
HEAP32[$$0$ph$i73 >> 2] = HEAP32[$6 >> 2];
$129 = HEAP32[$23 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[$21 >> 2] & 127](HEAP32[$26 >> 2] | 0, $129, (HEAP32[$7 >> 2] | 0) - $129 | 0);
HEAP32[$$024$ph$i72 >> 2] = HEAP32[$6 >> 2];
} while ((HEAP32[$6 >> 2] | 0) != ($32 | 0));
} else FUNCTION_TABLE_viii[$114 & 127](HEAP32[$26 >> 2] | 0, $116, $31 - $116 | 0);
}
break;
}
default:
{
label = 46;
break L5;
}
} while (0);
$143 = HEAP32[$9 >> 2] | 0;
HEAP32[$8 >> 2] = $143;
HEAP32[$$066 >> 2] = $143;
switch (HEAP32[$27 >> 2] | 0) {
case 3:
{
label = 48;
break L5;
break;
}
case 2:
{
$$1$ph = 35;
label = 50;
break L5;
break;
}
default:
{}
}
}
if ((label | 0) == 6) {
$34 = HEAP32[$0 + 76 >> 2] | 0;
if (!$34) {
$37 = HEAP32[$21 >> 2] | 0;
if ($37 | 0) {
$39 = HEAP32[$8 >> 2] | 0;
HEAP32[$6 >> 2] = $39;
if (!(HEAP8[$22 >> 0] | 0)) {
if ((HEAP32[$11 >> 2] | 0) == ($1 | 0)) {
$$0$ph$i = $$pre$phi93Z2D;
$$024$ph$i = $$pre$phiZ2D;
} else {
$44 = HEAP32[$$pre$phi95Z2D >> 2] | 0;
$$0$ph$i = $44 + 4 | 0;
$$024$ph$i = $44;
}
do {
HEAP32[$7 >> 2] = HEAP32[$23 >> 2];
FUNCTION_TABLE_viiiii[HEAP32[$24 >> 2] & 15]($1, $6, $32, $7, HEAP32[$25 >> 2] | 0);
HEAP32[$$0$ph$i >> 2] = HEAP32[$6 >> 2];
$52 = HEAP32[$23 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[$21 >> 2] & 127](HEAP32[$26 >> 2] | 0, $52, (HEAP32[$7 >> 2] | 0) - $52 | 0);
HEAP32[$$024$ph$i >> 2] = HEAP32[$6 >> 2];
} while ((HEAP32[$6 >> 2] | 0) != ($32 | 0));
} else FUNCTION_TABLE_viii[$37 & 127](HEAP32[$26 >> 2] | 0, $39, $31 - $39 | 0);
}
} else FUNCTION_TABLE_vi[$34 & 255](HEAP32[$26 >> 2] | 0);
$62 = HEAP32[$9 >> 2] | 0;
HEAP32[$2 >> 2] = $62;
HEAP32[$4 >> 2] = $62;
$$1$ph = (HEAP32[$27 >> 2] | 0) == 2 ? 35 : 0;
STACKTOP = sp;
return $$1$ph | 0;
} else if ((label | 0) == 41) {
HEAP32[$$066 >> 2] = $31;
$$1$ph = 4;
STACKTOP = sp;
return $$1$ph | 0;
} else if ((label | 0) == 42) {
if (!($5 << 24 >> 24)) {
$$1$ph = 6;
STACKTOP = sp;
return $$1$ph | 0;
}
HEAP32[$4 >> 2] = HEAP32[$8 >> 2];
$$1$ph = 0;
STACKTOP = sp;
return $$1$ph | 0;
} else if ((label | 0) == 44) {
if (!($5 << 24 >> 24)) {
$$1$ph = 20;
STACKTOP = sp;
return $$1$ph | 0;
}
HEAP32[$4 >> 2] = HEAP32[$8 >> 2];
$$1$ph = 0;
STACKTOP = sp;
return $$1$ph | 0;
} else if ((label | 0) == 46) {
HEAP32[$$066 >> 2] = $31;
$$1$ph = 23;
STACKTOP = sp;
return $$1$ph | 0;
} else if ((label | 0) == 48) {
HEAP32[$4 >> 2] = HEAP32[$9 >> 2];
$$1$ph = 0;
STACKTOP = sp;
return $$1$ph | 0;
} else if ((label | 0) == 50) {
STACKTOP = sp;
return $$1$ph | 0;
}
return 0;
}
function __ZN20HanimAnimationRecord14startAnimationEv($0) {
$0 = $0 | 0;
var $$062 = 0, $$06383 = 0, $$064 = 0, $$082 = 0, $$pre101 = 0, $$pre102 = 0, $$pre106 = 0, $1 = 0, $112 = 0, $114 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $121 = 0, $124 = 0, $125 = 0, $128 = 0, $129 = 0, $133 = 0, $14 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $152 = 0, $155 = 0, $156 = 0, $159 = 0, $160 = 0, $164 = 0, $17 = 0, $174 = 0, $175 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $184 = 0, $186 = 0, $188 = 0, $19 = 0, $190 = 0, $193 = 0, $197 = 0, $20 = 0, $202 = 0, $206 = 0, $207 = 0, $209 = 0, $21 = 0, $22 = 0, $23 = 0, $266 = 0, $268 = 0, $27 = 0, $272 = 0, $29 = 0, $3 = 0, $31 = 0, $33 = 0, $36 = 0, $40 = 0, $45 = 0, $49 = 0, $5 = 0, $50 = 0, $52 = 0, $7 = 0, $sext = 0, $sext69 = 0;
$1 = __Znwj(7352) | 0;
$3 = $0 + 4 | 0;
__THREW__ = 0;
invoke_viii(79, $1 | 0, HEAP32[16638] | 0, HEAP32[$3 >> 2] | 0);
$5 = __THREW__;
__THREW__ = 0;
if ($5 & 1) {
$21 = ___cxa_find_matching_catch_2() | 0;
$22 = tempRet0;
__ZdlPv($1);
$$062 = $21;
$$064 = $22;
___resumeException($$062 | 0);
}
$7 = $0 + 100 | 0;
HEAP32[$7 >> 2] = $1;
$12 = __ZN5Joint16NewJointRotationEv(HEAP32[HEAP32[(HEAP32[$3 >> 2] | 0) + 72 >> 2] >> 2] | 0) | 0;
HEAP32[$0 + 304 >> 2] = $12;
$14 = $0 + 80 | 0;
if (HEAP8[$14 >> 0] | 0) {
$23 = HEAP32[$3 >> 2] | 0;
$27 = HEAP32[(HEAP32[$23 + 72 >> 2] | 0) + 228 >> 2] | 0;
if (!$27) {
$31 = 0;
$33 = $23;
} else {
$29 = __ZN5Joint16NewJointRotationEv($27) | 0;
$31 = $29;
$33 = HEAP32[$3 >> 2] | 0;
}
HEAP32[$0 + 288 >> 2] = $31;
$36 = HEAP32[(HEAP32[$33 + 72 >> 2] | 0) + 212 >> 2] | 0;
if (!$36) $40 = 0; else $40 = __ZN5Joint16NewJointRotationEv($36) | 0;
HEAP32[$0 + 272 >> 2] = $40;
}
$45 = HEAP32[(HEAP32[(HEAP32[$3 >> 2] | 0) + 72 >> 2] | 0) + 12 >> 2] | 0;
if (!$45) $49 = 0; else $49 = __ZN5Joint16NewJointRotationEv($45) | 0;
HEAP32[$0 + 296 >> 2] = $49;
$50 = HEAP32[$7 >> 2] | 0;
$52 = HEAP32[$50 + 3584 >> 2] | 0;
HEAP32[$0 + 120 >> 2] = HEAP32[$50 + 3588 >> 2];
HEAP32[$0 + 124 >> 2] = HEAP32[$50 + 3592 >> 2];
HEAP32[$0 + 128 >> 2] = HEAP32[$50 + 3596 >> 2];
HEAP32[$0 + 132 >> 2] = HEAP32[$50 + 3600 >> 2];
HEAP32[$0 + 152 >> 2] = HEAP32[$52 >> 2];
HEAP32[$0 + 156 >> 2] = HEAP32[$52 + 4 >> 2];
HEAP32[$0 + 160 >> 2] = HEAP32[$52 + 8 >> 2];
HEAP32[$0 + 164 >> 2] = HEAP32[$52 + 12 >> 2];
HEAP32[$0 + 168 >> 2] = HEAP32[$52 + 16 >> 2];
HEAP32[$0 + 172 >> 2] = HEAP32[$52 + 20 >> 2];
HEAP32[$0 + 176 >> 2] = HEAP32[$52 + 24 >> 2];
HEAP32[$0 + 180 >> 2] = HEAP32[$52 + 28 >> 2];
HEAP32[$0 + 184 >> 2] = HEAP32[$52 + 32 >> 2];
HEAP32[$0 + 188 >> 2] = HEAP32[$52 + 36 >> 2];
HEAP32[$0 + 192 >> 2] = HEAP32[$52 + 40 >> 2];
HEAP32[$0 + 196 >> 2] = HEAP32[$52 + 44 >> 2];
HEAP32[$0 + 200 >> 2] = HEAP32[$52 + 48 >> 2];
HEAP32[$0 + 204 >> 2] = HEAP32[$52 + 52 >> 2];
HEAP32[$0 + 208 >> 2] = HEAP32[$52 + 56 >> 2];
if (HEAP8[$14 >> 0] | 0) {
$180 = HEAP32[$3 >> 2] | 0;
$184 = HEAP32[(HEAP32[$180 + 72 >> 2] | 0) + 232 >> 2] | 0;
if (!$184) {
$188 = 0;
$190 = $180;
} else {
$186 = __ZN5Joint16NewJointRotationEv($184) | 0;
$188 = $186;
$190 = HEAP32[$3 >> 2] | 0;
}
HEAP32[$0 + 292 >> 2] = $188;
$193 = HEAP32[(HEAP32[$190 + 72 >> 2] | 0) + 216 >> 2] | 0;
if (!$193) $197 = 0; else $197 = __ZN5Joint16NewJointRotationEv($193) | 0;
HEAP32[$0 + 276 >> 2] = $197;
}
$202 = HEAP32[(HEAP32[(HEAP32[$3 >> 2] | 0) + 72 >> 2] | 0) + 16 >> 2] | 0;
if (!$202) $206 = 0; else $206 = __ZN5Joint16NewJointRotationEv($202) | 0;
HEAP32[$0 + 300 >> 2] = $206;
$207 = HEAP32[$7 >> 2] | 0;
$209 = HEAP32[$207 + 28 >> 2] | 0;
HEAP32[$0 + 136 >> 2] = HEAP32[$207 + 32 >> 2];
HEAP32[$0 + 140 >> 2] = HEAP32[$207 + 36 >> 2];
HEAP32[$0 + 144 >> 2] = HEAP32[$207 + 40 >> 2];
HEAP32[$0 + 148 >> 2] = HEAP32[$207 + 44 >> 2];
HEAP32[$0 + 212 >> 2] = HEAP32[$209 >> 2];
HEAP32[$0 + 216 >> 2] = HEAP32[$209 + 4 >> 2];
HEAP32[$0 + 220 >> 2] = HEAP32[$209 + 8 >> 2];
HEAP32[$0 + 224 >> 2] = HEAP32[$209 + 12 >> 2];
HEAP32[$0 + 228 >> 2] = HEAP32[$209 + 16 >> 2];
HEAP32[$0 + 232 >> 2] = HEAP32[$209 + 20 >> 2];
HEAP32[$0 + 236 >> 2] = HEAP32[$209 + 24 >> 2];
HEAP32[$0 + 240 >> 2] = HEAP32[$209 + 28 >> 2];
HEAP32[$0 + 244 >> 2] = HEAP32[$209 + 32 >> 2];
HEAP32[$0 + 248 >> 2] = HEAP32[$209 + 36 >> 2];
HEAP32[$0 + 252 >> 2] = HEAP32[$209 + 40 >> 2];
HEAP32[$0 + 256 >> 2] = HEAP32[$209 + 44 >> 2];
HEAP32[$0 + 260 >> 2] = HEAP32[$209 + 48 >> 2];
HEAP32[$0 + 264 >> 2] = HEAP32[$209 + 52 >> 2];
HEAP32[$0 + 268 >> 2] = HEAP32[$209 + 56 >> 2];
$266 = HEAP32[$3 >> 2] | 0;
$268 = HEAP32[$266 + 72 >> 2] | 0;
$sext = HEAP32[$268 + 264 >> 2] << 16;
$146 = $sext >> 16;
if (($sext | 0) > 0) {
$17 = $0 + 324 | 0;
$18 = $0 + 332 | 0;
$19 = $0 + 336 | 0;
$20 = $0 + 328 | 0;
$$06383 = 0;
$121 = $268;
$124 = 0;
while (1) {
$125 = HEAP32[(HEAP32[$121 + 252 >> 2] | 0) + ($124 << 2) >> 2] | 0;
if (!$125) $129 = 0; else $129 = __ZN5Joint16NewJointRotationEv($125) | 0;
$128 = $129;
if ($$06383 << 16 >> 16 >= 0) {
if ((HEAP32[$18 >> 2] | 0) <= ($124 | 0)) {
$133 = HEAP32[$20 >> 2] | 0;
__ZN13DynamicArray1IP13JointRotationE6resizeEi($17, ($133 | 0) > ($124 | 0) ? $133 : $124 + 1 + ($124 >>> 1) | 0);
}
if ((HEAP32[$19 >> 2] | 0) <= ($124 | 0)) HEAP32[$19 >> 2] = $124 + 1;
HEAP32[(HEAP32[$17 >> 2] | 0) + ($124 << 2) >> 2] = $128;
}
$$06383 = $$06383 + 1 << 16 >> 16;
$124 = $$06383 << 16 >> 16;
$$pre101 = HEAP32[$3 >> 2] | 0;
$$pre102 = HEAP32[$$pre101 + 72 >> 2] | 0;
if (($146 | 0) <= ($124 | 0)) {
$112 = $$pre102;
$272 = $$pre101;
break;
} else $121 = $$pre102;
}
} else {
$112 = $268;
$272 = $266;
}
$sext69 = HEAP32[$112 + 248 >> 2] << 16;
$114 = $sext69 >> 16;
L46 : do if (($sext69 | 0) > 0) {
$116 = $0 + 308 | 0;
$117 = $0 + 316 | 0;
$118 = $0 + 320 | 0;
$119 = $0 + 312 | 0;
$$082 = 0;
$152 = $112;
$155 = 0;
while (1) {
$156 = HEAP32[(HEAP32[$152 + 236 >> 2] | 0) + ($155 << 2) >> 2] | 0;
if (!$156) $160 = 0; else $160 = __ZN5Joint16NewJointRotationEv($156) | 0;
$159 = $160;
if ($$082 << 16 >> 16 >= 0) {
if ((HEAP32[$117 >> 2] | 0) <= ($155 | 0)) {
$164 = HEAP32[$119 >> 2] | 0;
__ZN13DynamicArray1IP13JointRotationE6resizeEi($116, ($164 | 0) > ($155 | 0) ? $164 : $155 + 1 + ($155 >>> 1) | 0);
}
if ((HEAP32[$118 >> 2] | 0) <= ($155 | 0)) HEAP32[$118 >> 2] = $155 + 1;
HEAP32[(HEAP32[$116 >> 2] | 0) + ($155 << 2) >> 2] = $159;
}
$174 = $$082 + 1 << 16 >> 16;
$175 = $174 << 16 >> 16;
$$pre106 = HEAP32[$3 >> 2] | 0;
if (($114 | 0) <= ($175 | 0)) {
$148 = $$pre106;
break L46;
}
$$082 = $174;
$152 = HEAP32[$$pre106 + 72 >> 2] | 0;
$155 = $175;
}
} else $148 = $272; while (0);
$147 = __Znwj(48) | 0;
__THREW__ = 0;
invoke_vii(124, $147 | 0, $148 | 0);
$149 = __THREW__;
__THREW__ = 0;
if (!($149 & 1)) {
HEAP32[$0 + 104 >> 2] = $147;
__ZN20HanimAnimationRecord15calcHipMovementEfff($0, Math_fround(.100000001), Math_fround(0.0), Math_fround(0.0));
return;
}
$178 = ___cxa_find_matching_catch_2() | 0;
$179 = tempRet0;
__ZdlPv($147);
$$062 = $178;
$$064 = $179;
___resumeException($$062 | 0);
}
function __ZL21handle_nonmanual_itemR15AtomicNonmanual14NonmanualItemsP7XMLCell($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0 = 0, $$012$i$i = 0, $$012$i$i74 = 0, $$012$i$i81 = 0, $$012$i$i88 = 0, $$01215$i$i = 0, $$01215$i$i71 = 0, $$01215$i$i78 = 0, $$01215$i$i85 = 0, $$01216$i$i = 0, $$01216$i$i72 = 0, $$01216$i$i79 = 0, $$01216$i$i86 = 0, $$06992 = 0, $$pre101 = 0, $$sink$i$i = 0, $$sink$i$i76 = 0, $$sink$i$i83 = 0, $$sink$i$i90 = 0, $22 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $42 = 0, $46 = 0, $55 = 0, $58 = 0, $59 = 0, $62 = 0, $63 = 0, $7 = 0, $75 = 0, $77 = 0, $8 = 0, $80 = 0, $81 = 0, $93 = 0, $96 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 80 | 0;
$vararg_buffer22 = sp + 64 | 0;
$vararg_buffer19 = sp + 56 | 0;
$vararg_buffer13 = sp + 40 | 0;
$vararg_buffer10 = sp + 32 | 0;
$vararg_buffer7 = sp + 24 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
switch ($1 | 0) {
case 11:
{
$3 = $2 + 4 | 0;
$4 = HEAP32[$3 >> 2] | 0;
$7 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(53439, HEAP32[$4 + 4 >> 2] | 0) | 0;
$8 = HEAP32[$4 >> 2] | 0;
L41 : do if ((HEAP16[$8 + ($7 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i = HEAP32[$8 + ($7 << 3) >> 2] | 0;
if (!$$01215$i$i) label = 7; else {
$$01216$i$i = $$01215$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(53439, HEAP32[$$01216$i$i >> 2] | 0) | 0) break;
$$012$i$i = HEAP32[$$01216$i$i + 8 >> 2] | 0;
if (!$$012$i$i) {
label = 7;
break L41;
} else $$01216$i$i = $$012$i$i;
}
$$sink$i$i = $$01216$i$i + 4 | 0;
}
} else label = 7; while (0);
if ((label | 0) == 7) $$sink$i$i = $4 + 20 | 0;
do if (!(HEAP32[$$sink$i$i >> 2] | 0)) {
$22 = HEAP32[$3 >> 2] | 0;
$25 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(49705, HEAP32[$22 + 4 >> 2] | 0) | 0;
$26 = HEAP32[$22 >> 2] | 0;
L52 : do if ((HEAP16[$26 + ($25 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i71 = HEAP32[$26 + ($25 << 3) >> 2] | 0;
if (!$$01215$i$i71) label = 14; else {
$$01216$i$i72 = $$01215$i$i71;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(49705, HEAP32[$$01216$i$i72 >> 2] | 0) | 0) break;
$$012$i$i74 = HEAP32[$$01216$i$i72 + 8 >> 2] | 0;
if (!$$012$i$i74) {
label = 14;
break L52;
} else $$01216$i$i72 = $$012$i$i74;
}
$$sink$i$i76 = $$01216$i$i72 + 4 | 0;
}
} else label = 14; while (0);
if ((label | 0) == 14) $$sink$i$i76 = $22 + 20 | 0;
if (HEAP32[$$sink$i$i76 >> 2] | 0) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer1 >> 2] = HEAP32[$2 >> 2];
__Z7eprintfPKcz(31827, $vararg_buffer1);
break;
}
HEAP32[$vararg_buffer >> 2] = HEAP32[$2 >> 2];
__Z7eprintfPKcz(31791, $vararg_buffer);
STACKTOP = sp;
return;
} while (0);
$42 = __Z21ProcessAtomicXMLMorphP7XMLCellb($2, 1) | 0;
__ZN15AtomicNonmanual7setFromE14NonmanualItemssP18AbstractTimedMorph($0, 11, HEAP32[$42 + 24 >> 2] & 65535, $42);
STACKTOP = sp;
return;
}
case 9:
{
$46 = __Z15SAMPAToMorphingP7XMLCell($2) | 0;
if (!$46) {
__ZN15AtomicNonmanual5clearEv($0);
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer4 >> 2] = HEAP32[$2 >> 2];
__Z7eprintfPKcz(31906, $vararg_buffer4);
STACKTOP = sp;
return;
} else {
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$46 >> 2] | 0) + 52 >> 2] & 255]($46, $2);
__ZN15AtomicNonmanual7setFromE14NonmanualItemssP18AbstractTimedMorph($0, 9, -1, $46);
__ZN7XMLCell11attrib_REALERfPKc($2, $0 + 24 | 0, 46688) | 0;
STACKTOP = sp;
return;
}
break;
}
default:
{
$55 = HEAP32[(HEAP32[17821] | 0) + ($1 << 2) >> 2] | 0;
if (!$55) {
__ZN15AtomicNonmanual5clearEv($0);
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer7 >> 2] = HEAP32[$2 >> 2];
__Z7eprintfPKcz(31944, $vararg_buffer7);
STACKTOP = sp;
return;
}
$58 = $2 + 4 | 0;
$59 = HEAP32[$58 >> 2] | 0;
$62 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(49705, HEAP32[$59 + 4 >> 2] | 0) | 0;
$63 = HEAP32[$59 >> 2] | 0;
L7 : do if ((HEAP16[$63 + ($62 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i78 = HEAP32[$63 + ($62 << 3) >> 2] | 0;
if (!$$01215$i$i78) label = 30; else {
$$01216$i$i79 = $$01215$i$i78;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(49705, HEAP32[$$01216$i$i79 >> 2] | 0) | 0) break;
$$012$i$i81 = HEAP32[$$01216$i$i79 + 8 >> 2] | 0;
if (!$$012$i$i81) {
label = 30;
break L7;
} else $$01216$i$i79 = $$012$i$i81;
}
$$sink$i$i83 = $$01216$i$i79 + 4 | 0;
}
} else label = 30; while (0);
if ((label | 0) == 30) $$sink$i$i83 = $59 + 20 | 0;
$75 = HEAP32[$$sink$i$i83 >> 2] | 0;
if (!$75) {
$77 = HEAP32[$58 >> 2] | 0;
$80 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(49714, HEAP32[$77 + 4 >> 2] | 0) | 0;
$81 = HEAP32[$77 >> 2] | 0;
L18 : do if ((HEAP16[$81 + ($80 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i85 = HEAP32[$81 + ($80 << 3) >> 2] | 0;
if (!$$01215$i$i85) label = 37; else {
$$01216$i$i86 = $$01215$i$i85;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(49714, HEAP32[$$01216$i$i86 >> 2] | 0) | 0) break;
$$012$i$i88 = HEAP32[$$01216$i$i86 + 8 >> 2] | 0;
if (!$$012$i$i88) {
label = 37;
break L18;
} else $$01216$i$i86 = $$012$i$i88;
}
$$sink$i$i90 = $$01216$i$i86 + 4 | 0;
}
} else label = 37; while (0);
if ((label | 0) == 37) $$sink$i$i90 = $77 + 20 | 0;
$93 = HEAP32[$$sink$i$i90 >> 2] | 0;
if (!$93) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer10 >> 2] = HEAP32[$2 >> 2];
__Z7eprintfPKcz(31983, $vararg_buffer10);
__ZN15AtomicNonmanual5clearEv($0);
STACKTOP = sp;
return;
} else $$06992 = $93;
} else $$06992 = $75;
$96 = __ZNK28InvertibleDynamicStringArray14indexFromValueEPKc($55, $$06992) | 0;
$$pre101 = $96 << 16 >> 16;
if (0) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer13 >> 2] = $55;
HEAP32[$vararg_buffer13 + 4 >> 2] = $1;
HEAP32[$vararg_buffer13 + 8 >> 2] = $$pre101;
HEAP32[$vararg_buffer13 + 12 >> 2] = $$06992;
__Z7eprintfPKcz(32058, $vararg_buffer13);
}
if (($$pre101 | 0) == -1) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer19 >> 2] = $$06992;
__Z7eprintfPKcz(32098, $vararg_buffer19);
$$0 = 0;
} else $$0 = $1;
if (0) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer22 >> 2] = HEAP32[$2 >> 2];
HEAP32[$vararg_buffer22 + 4 >> 2] = $$06992;
HEAP32[$vararg_buffer22 + 8 >> 2] = $$0;
HEAP32[$vararg_buffer22 + 12 >> 2] = $$pre101;
__Z7eprintfPKcz(32152, $vararg_buffer22);
}
__ZN15AtomicNonmanual7setFromE14NonmanualItemss($0, $$0, $96 & 65535);
__ZN7XMLCell11attrib_REALERfPKc($2, $0 + 12 | 0, 51282) | 0;
__ZN7XMLCell11attrib_REALERfPKc($2, $0 + 16 | 0, 51301) | 0;
__ZN7XMLCell11attrib_REALERfPKc($2, $0 + 20 | 0, 51291) | 0;
__ZN7XMLCell11attrib_REALERfPKc($2, $0 + 24 | 0, 46688) | 0;
STACKTOP = sp;
return;
}
}
}
function __ZN11SeqMovementD2Ev($0) {
$0 = $0 | 0;
var $$06$i = 0, $$06$i$i = 0, $$06$i$i7 = 0, $$pr6$i = 0, $$pr6$i13 = 0, $$pre$i$i = 0, $$pre$i$i11 = 0, $$pre$i3 = 0, $1 = 0, $100 = 0, $101 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $26 = 0, $28 = 0, $31 = 0, $32 = 0, $37 = 0, $4 = 0, $43 = 0, $45 = 0, $47 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $61 = 0, $62 = 0, $66 = 0, $68 = 0, $71 = 0, $72 = 0, $77 = 0, $8 = 0, $83 = 0, $85 = 0, $87 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
HEAP32[$0 >> 2] = 3068;
$1 = $0 + 528 | 0;
$2 = HEAP32[$1 >> 2] | 0;
L1 : do if ($2 | 0) {
$4 = $0 + 540 | 0;
$5 = HEAP32[$4 >> 2] | 0;
if (($5 | 0) > 0) {
$$06$i = 0;
$8 = $2;
$99 = $5;
while (1) {
$9 = HEAP32[$8 + ($$06$i << 2) >> 2] | 0;
if (!$9) $20 = $99; else {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$9 >> 2] | 0) + 4 >> 2] | 0, $9 | 0);
$14 = __THREW__;
__THREW__ = 0;
if ($14 & 1) break;
HEAP32[(HEAP32[$1 >> 2] | 0) + ($$06$i << 2) >> 2] = 0;
$20 = HEAP32[$4 >> 2] | 0;
}
$18 = $$06$i + 1 | 0;
if (($18 | 0) >= ($20 | 0)) break L1;
$$06$i = $18;
$8 = HEAP32[$1 >> 2] | 0;
$99 = $20;
}
$59 = ___cxa_find_matching_catch_2() | 0;
$61 = $0 + 560 | 0;
$62 = HEAP32[$61 >> 2] | 0;
if ($62 | 0) {
_free($62);
HEAP32[$61 >> 2] = 0;
}
HEAP32[$0 + 572 >> 2] = 0;
HEAP32[$0 + 568 >> 2] = 0;
HEAP32[$0 >> 2] = 2972;
$66 = HEAP32[$1 >> 2] | 0;
if (!$66) {
HEAP32[$4 >> 2] = 0;
$89 = $0 + 536 | 0;
HEAP32[$89 >> 2] = 0;
HEAP32[$0 >> 2] = 1984;
$90 = $0 + 452 | 0;
HEAP32[$90 >> 2] = 0;
$91 = $0 + 340 | 0;
HEAP32[$91 >> 2] = 0;
$92 = $0 + 228 | 0;
HEAP32[$92 >> 2] = 0;
$93 = $0 + 116 | 0;
HEAP32[$93 >> 2] = 0;
___resumeException($59 | 0);
}
$68 = HEAP32[$4 >> 2] | 0;
do if (($68 | 0) > 0) {
$$06$i$i7 = 0;
$101 = $68;
$71 = $66;
while (1) {
$72 = HEAP32[$71 + ($$06$i$i7 << 2) >> 2] | 0;
if (!$72) {
$$pre$i$i11 = $71;
$83 = $101;
} else {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$72 >> 2] | 0) + 4 >> 2] | 0, $72 | 0);
$77 = __THREW__;
__THREW__ = 0;
if ($77 & 1) break;
HEAP32[(HEAP32[$1 >> 2] | 0) + ($$06$i$i7 << 2) >> 2] = 0;
$$pre$i$i11 = HEAP32[$1 >> 2] | 0;
$83 = HEAP32[$4 >> 2] | 0;
}
$$06$i$i7 = $$06$i$i7 + 1 | 0;
if (($$06$i$i7 | 0) >= ($83 | 0)) {
label = 30;
break;
} else {
$101 = $83;
$71 = $$pre$i$i11;
}
}
if ((label | 0) == 30) {
if ($$pre$i$i11 | 0) {
$$pr6$i13 = $$pre$i$i11;
break;
}
HEAP32[$4 >> 2] = 0;
$89 = $0 + 536 | 0;
HEAP32[$89 >> 2] = 0;
HEAP32[$0 >> 2] = 1984;
$90 = $0 + 452 | 0;
HEAP32[$90 >> 2] = 0;
$91 = $0 + 340 | 0;
HEAP32[$91 >> 2] = 0;
$92 = $0 + 228 | 0;
HEAP32[$92 >> 2] = 0;
$93 = $0 + 116 | 0;
HEAP32[$93 >> 2] = 0;
___resumeException($59 | 0);
}
$85 = ___cxa_find_matching_catch_3(0) | 0;
$87 = HEAP32[$1 >> 2] | 0;
if (!$87) {
HEAP32[$4 >> 2] = 0;
$94 = $0 + 536 | 0;
HEAP32[$94 >> 2] = 0;
HEAP32[$0 >> 2] = 1984;
$95 = $0 + 452 | 0;
HEAP32[$95 >> 2] = 0;
$96 = $0 + 340 | 0;
HEAP32[$96 >> 2] = 0;
$97 = $0 + 228 | 0;
HEAP32[$97 >> 2] = 0;
$98 = $0 + 116 | 0;
HEAP32[$98 >> 2] = 0;
___clang_call_terminate($85);
}
_free($87);
HEAP32[$1 >> 2] = 0;
HEAP32[$4 >> 2] = 0;
$94 = $0 + 536 | 0;
HEAP32[$94 >> 2] = 0;
HEAP32[$0 >> 2] = 1984;
$95 = $0 + 452 | 0;
HEAP32[$95 >> 2] = 0;
$96 = $0 + 340 | 0;
HEAP32[$96 >> 2] = 0;
$97 = $0 + 228 | 0;
HEAP32[$97 >> 2] = 0;
$98 = $0 + 116 | 0;
HEAP32[$98 >> 2] = 0;
___clang_call_terminate($85);
} else $$pr6$i13 = $66; while (0);
_free($$pr6$i13);
HEAP32[$1 >> 2] = 0;
HEAP32[$4 >> 2] = 0;
$89 = $0 + 536 | 0;
HEAP32[$89 >> 2] = 0;
HEAP32[$0 >> 2] = 1984;
$90 = $0 + 452 | 0;
HEAP32[$90 >> 2] = 0;
$91 = $0 + 340 | 0;
HEAP32[$91 >> 2] = 0;
$92 = $0 + 228 | 0;
HEAP32[$92 >> 2] = 0;
$93 = $0 + 116 | 0;
HEAP32[$93 >> 2] = 0;
___resumeException($59 | 0);
}
} while (0);
$21 = $0 + 560 | 0;
$22 = HEAP32[$21 >> 2] | 0;
if ($22 | 0) {
_free($22);
HEAP32[$21 >> 2] = 0;
}
HEAP32[$0 + 572 >> 2] = 0;
HEAP32[$0 + 568 >> 2] = 0;
HEAP32[$0 >> 2] = 2972;
$26 = HEAP32[$1 >> 2] | 0;
$$pre$i3 = $0 + 540 | 0;
if (!$26) {
HEAP32[$$pre$i3 >> 2] = 0;
$54 = $0 + 536 | 0;
HEAP32[$54 >> 2] = 0;
HEAP32[$0 >> 2] = 1984;
$55 = $0 + 452 | 0;
HEAP32[$55 >> 2] = 0;
$56 = $0 + 340 | 0;
HEAP32[$56 >> 2] = 0;
$57 = $0 + 228 | 0;
HEAP32[$57 >> 2] = 0;
$58 = $0 + 116 | 0;
HEAP32[$58 >> 2] = 0;
return;
}
$28 = HEAP32[$$pre$i3 >> 2] | 0;
do if (($28 | 0) > 0) {
$$06$i$i = 0;
$100 = $28;
$31 = $26;
while (1) {
$32 = HEAP32[$31 + ($$06$i$i << 2) >> 2] | 0;
if (!$32) {
$$pre$i$i = $31;
$43 = $100;
} else {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$32 >> 2] | 0) + 4 >> 2] | 0, $32 | 0);
$37 = __THREW__;
__THREW__ = 0;
if ($37 & 1) break;
HEAP32[(HEAP32[$1 >> 2] | 0) + ($$06$i$i << 2) >> 2] = 0;
$$pre$i$i = HEAP32[$1 >> 2] | 0;
$43 = HEAP32[$$pre$i3 >> 2] | 0;
}
$$06$i$i = $$06$i$i + 1 | 0;
if (($$06$i$i | 0) >= ($43 | 0)) {
label = 16;
break;
} else {
$100 = $43;
$31 = $$pre$i$i;
}
}
if ((label | 0) == 16) {
if ($$pre$i$i | 0) {
$$pr6$i = $$pre$i$i;
break;
}
HEAP32[$$pre$i3 >> 2] = 0;
$54 = $0 + 536 | 0;
HEAP32[$54 >> 2] = 0;
HEAP32[$0 >> 2] = 1984;
$55 = $0 + 452 | 0;
HEAP32[$55 >> 2] = 0;
$56 = $0 + 340 | 0;
HEAP32[$56 >> 2] = 0;
$57 = $0 + 228 | 0;
HEAP32[$57 >> 2] = 0;
$58 = $0 + 116 | 0;
HEAP32[$58 >> 2] = 0;
return;
}
$45 = ___cxa_find_matching_catch_2() | 0;
$47 = HEAP32[$1 >> 2] | 0;
if (!$47) {
HEAP32[$$pre$i3 >> 2] = 0;
$49 = $0 + 536 | 0;
HEAP32[$49 >> 2] = 0;
HEAP32[$0 >> 2] = 1984;
$50 = $0 + 452 | 0;
HEAP32[$50 >> 2] = 0;
$51 = $0 + 340 | 0;
HEAP32[$51 >> 2] = 0;
$52 = $0 + 228 | 0;
HEAP32[$52 >> 2] = 0;
$53 = $0 + 116 | 0;
HEAP32[$53 >> 2] = 0;
___resumeException($45 | 0);
}
_free($47);
HEAP32[$1 >> 2] = 0;
HEAP32[$$pre$i3 >> 2] = 0;
$49 = $0 + 536 | 0;
HEAP32[$49 >> 2] = 0;
HEAP32[$0 >> 2] = 1984;
$50 = $0 + 452 | 0;
HEAP32[$50 >> 2] = 0;
$51 = $0 + 340 | 0;
HEAP32[$51 >> 2] = 0;
$52 = $0 + 228 | 0;
HEAP32[$52 >> 2] = 0;
$53 = $0 + 116 | 0;
HEAP32[$53 >> 2] = 0;
___resumeException($45 | 0);
} else $$pr6$i = $26; while (0);
_free($$pr6$i);
HEAP32[$1 >> 2] = 0;
HEAP32[$$pre$i3 >> 2] = 0;
$54 = $0 + 536 | 0;
HEAP32[$54 >> 2] = 0;
HEAP32[$0 >> 2] = 1984;
$55 = $0 + 452 | 0;
HEAP32[$55 >> 2] = 0;
$56 = $0 + 340 | 0;
HEAP32[$56 >> 2] = 0;
$57 = $0 + 228 | 0;
HEAP32[$57 >> 2] = 0;
$58 = $0 + 116 | 0;
HEAP32[$58 >> 2] = 0;
return;
}
function _setContext($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0, $$0$i = 0, $$0$lcssa$i155$i = 0, $$0146189$i = 0, $$034$i153$i = 0, $$05$i152$i = 0, $$057$i$i = 0, $$076$ = 0, $$076$ph101 = 0, $$076$pn = 0, $$07696 = 0, $$08$i$i = 0, $$080$ph$be = 0, $$1139190$i = 0, $$1147$i = 0, $$282 = 0, $$3 = 0, $10 = 0, $103 = 0, $105 = 0, $109 = 0, $11 = 0, $112 = 0, $114 = 0, $116 = 0, $117 = 0, $12 = 0, $121 = 0, $122 = 0, $126 = 0, $13 = 0, $136 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $54 = 0, $6 = 0, $68 = 0, $7 = 0, $73 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $90 = 0, $92 = 0, $94 = 0, $95 = 0, $97 = 0, $98 = 0, label = 0;
$3 = HEAP32[$0 + 340 >> 2] | 0;
$4 = HEAP8[$1 >> 0] | 0;
if (!($4 << 24 >> 24)) {
$$3 = 1;
return $$3 | 0;
}
$6 = $0 + 412 | 0;
$7 = $0 + 408 | 0;
$8 = $0 + 400 | 0;
$9 = $0 + 416 | 0;
$10 = $3 + 8 | 0;
$11 = $3 + 4 | 0;
$12 = $3 + 132 | 0;
$13 = $0 + 356 | 0;
$14 = $3 + 60 | 0;
$15 = $3 + 80 | 0;
$16 = $3 + 92 | 0;
$17 = $3 + 88 | 0;
$18 = $3 + 96 | 0;
$$076$ph101 = $1;
$147 = $4;
L4 : while (1) {
$$07696 = $$076$ph101;
$19 = $147;
L6 : while (1) {
switch ($19 << 24 >> 24) {
case 0:
case 12:
{
label = 5;
break L6;
break;
}
case 61:
{
label = 22;
break L6;
break;
}
default:
{}
}
$136 = HEAP32[$6 >> 2] | 0;
if (($136 | 0) == (HEAP32[$7 >> 2] | 0)) {
if (!((_poolGrow($8) | 0) << 24 >> 24)) {
$$3 = 0;
label = 53;
break L4;
}
$142 = HEAP32[$6 >> 2] | 0;
$143 = HEAP8[$$07696 >> 0] | 0;
} else {
$142 = $136;
$143 = $19;
}
HEAP32[$6 >> 2] = $142 + 1;
HEAP8[$142 >> 0] = $143;
$144 = $$07696 + 1 | 0;
if (!(HEAP8[$$076$ph101 >> 0] | 0)) {
$$3 = 1;
label = 53;
break L4;
}
$$07696 = $144;
$19 = HEAP8[$144 >> 0] | 0;
}
if ((label | 0) == 5) {
label = 0;
$20 = HEAP32[$6 >> 2] | 0;
if (($20 | 0) == (HEAP32[$7 >> 2] | 0)) {
if (!((_poolGrow($8) | 0) << 24 >> 24)) {
$$3 = 0;
label = 53;
break;
}
$26 = HEAP32[$6 >> 2] | 0;
} else $26 = $20;
HEAP32[$6 >> 2] = $26 + 1;
HEAP8[$26 >> 0] = 0;
$27 = HEAP32[$9 >> 2] | 0;
$28 = HEAP32[$10 >> 2] | 0;
$30 = $27;
L20 : do if (!$28) $80 = $30; else {
$31 = HEAP8[$27 >> 0] | 0;
if (!($31 << 24 >> 24)) $$0$lcssa$i155$i = 0; else {
$$034$i153$i = $27;
$$05$i152$i = 0;
$36 = $31;
while (1) {
$$034$i153$i = $$034$i153$i + 1 | 0;
$37 = $$05$i152$i * 1000003 ^ $36 & 255;
$36 = HEAP8[$$034$i153$i >> 0] | 0;
if (!($36 << 24 >> 24)) {
$$0$lcssa$i155$i = $37;
break;
} else $$05$i152$i = $37;
}
}
$40 = $28 + -1 | 0;
$41 = $$0$lcssa$i155$i & $40;
$42 = HEAP32[$3 >> 2] | 0;
$44 = HEAP32[$42 + ($41 << 2) >> 2] | 0;
if (!$44) $80 = $30; else {
$47 = $$0$lcssa$i155$i & 0 - $28;
$48 = $40 >>> 2;
$$0146189$i = 0;
$$1139190$i = $41;
$50 = $44;
L27 : while (1) {
$49 = HEAP32[$50 >> 2] | 0;
if ($31 << 24 >> 24 == (HEAP8[$49 >> 0] | 0)) {
$$057$i$i = $27;
$$08$i$i = $49;
$54 = $31;
do {
if (!($54 << 24 >> 24)) break L27;
$$057$i$i = $$057$i$i + 1 | 0;
$$08$i$i = $$08$i$i + 1 | 0;
$54 = HEAP8[$$057$i$i >> 0] | 0;
} while ($54 << 24 >> 24 == (HEAP8[$$08$i$i >> 0] | 0));
}
if (!($$0146189$i << 24 >> 24)) $$1147$i = ($47 >>> ((HEAPU8[$11 >> 0] | 0) + -1 | 0) & $48 | 1) & 255; else $$1147$i = $$0146189$i;
$68 = $$1147$i & 255;
$$1139190$i = ($$1139190$i >>> 0 < $68 >>> 0 ? $28 : 0) + ($$1139190$i - $68) | 0;
$73 = HEAP32[$42 + ($$1139190$i << 2) >> 2] | 0;
if (!$73) {
$80 = $30;
break L20;
} else {
$$0146189$i = $$1147$i;
$50 = $73;
}
}
if (!$50) $80 = $30; else {
HEAP8[$50 + 32 >> 0] = 1;
$80 = HEAP32[$9 >> 2] | 0;
}
}
} while (0);
$$076$ = (HEAP8[$$07696 >> 0] | 0) == 0 ? $$07696 : $$07696 + 1 | 0;
HEAP32[$6 >> 2] = $80;
$$080$ph$be = $$076$;
} else if ((label | 0) == 22) {
label = 0;
$81 = HEAP32[$6 >> 2] | 0;
if ((HEAP32[$9 >> 2] | 0) == ($81 | 0)) {
$$0 = $12;
$148 = $81;
} else {
if (($81 | 0) == (HEAP32[$7 >> 2] | 0)) {
if (!((_poolGrow($8) | 0) << 24 >> 24)) {
$$3 = 0;
label = 53;
break;
}
$90 = HEAP32[$6 >> 2] | 0;
} else $90 = $81;
HEAP32[$6 >> 2] = $90 + 1;
HEAP8[$90 >> 0] = 0;
$92 = _lookup($14, HEAP32[$9 >> 2] | 0, 8) | 0;
if (!$92) {
$$3 = 0;
label = 53;
break;
}
$94 = HEAP32[$92 >> 2] | 0;
$95 = HEAP32[$9 >> 2] | 0;
$97 = $95;
if (($94 | 0) == ($95 | 0)) {
$$0$i = $94;
while (1) {
$98 = HEAP32[$16 >> 2] | 0;
if (($98 | 0) == (HEAP32[$17 >> 2] | 0)) {
if (!((_poolGrow($15) | 0) << 24 >> 24)) {
label = 30;
break L4;
}
$105 = HEAP32[$16 >> 2] | 0;
} else $105 = $98;
$103 = HEAP8[$$0$i >> 0] | 0;
HEAP32[$16 >> 2] = $105 + 1;
HEAP8[$105 >> 0] = $103;
if (!(HEAP8[$$0$i >> 0] | 0)) break; else $$0$i = $$0$i + 1 | 0;
}
$109 = HEAP32[$18 >> 2] | 0;
HEAP32[$18 >> 2] = HEAP32[$16 >> 2];
HEAP32[$92 >> 2] = $109;
if (!$109) {
$$3 = 0;
label = 53;
break;
}
$112 = HEAP32[$9 >> 2] | 0;
} else $112 = $97;
HEAP32[$6 >> 2] = $112;
$$0 = $92;
$148 = $112;
}
$$076$pn = $$07696;
$117 = $148;
L59 : while (1) {
$$282 = $$076$pn + 1 | 0;
$114 = HEAP8[$$282 >> 0] | 0;
$116 = ($117 | 0) == (HEAP32[$7 >> 2] | 0);
switch ($114 << 24 >> 24) {
case 0:
case 12:
{
break L59;
break;
}
default:
{}
}
if ($116) {
if (!((_poolGrow($8) | 0) << 24 >> 24)) {
$$3 = 0;
label = 53;
break L4;
}
$121 = HEAP32[$6 >> 2] | 0;
$122 = HEAP8[$$282 >> 0] | 0;
} else {
$121 = $117;
$122 = $114;
}
HEAP32[$6 >> 2] = $121 + 1;
HEAP8[$121 >> 0] = $122;
$$076$pn = $$282;
$117 = HEAP32[$6 >> 2] | 0;
}
if ($116) {
if (!((_poolGrow($8) | 0) << 24 >> 24)) {
$$3 = 0;
label = 53;
break;
}
$126 = HEAP32[$6 >> 2] | 0;
} else $126 = $117;
HEAP32[$6 >> 2] = $126 + 1;
HEAP8[$126 >> 0] = 0;
if (_addBinding($0, $$0, 0, HEAP32[$9 >> 2] | 0, $13) | 0) {
$$3 = 0;
label = 53;
break;
}
HEAP32[$6 >> 2] = HEAP32[$9 >> 2];
$$080$ph$be = (HEAP8[$$282 >> 0] | 0) == 0 ? $$282 : $$076$pn + 2 | 0;
}
$147 = HEAP8[$$080$ph$be >> 0] | 0;
if (!($147 << 24 >> 24)) {
$$3 = 1;
label = 53;
break;
} else $$076$ph101 = $$080$ph$be;
}
if ((label | 0) == 30) {
HEAP32[$92 >> 2] = 0;
$$3 = 0;
return $$3 | 0;
} else if ((label | 0) == 53) return $$3 | 0;
return 0;
}
function __ZN7XMLCell12mergeXMLCellEPKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$012$i$i = 0, $$01215$i$i = 0, $$01216$i$i = 0, $$02535$i$i = 0, $$04171 = 0, $$4$i$i = 0, $$pre$phiZ2D = 0, $$sink$i$i = 0, $$sink$i$i45 = 0, $$sink19$i = 0, $$sroa$061$073 = 0, $$sroa$061$1 = 0, $$sroa$061$2 = 0, $$sroa$061$3 = 0, $$sroa$6$072 = 0, $101 = 0, $102 = 0, $104 = 0, $106 = 0, $109 = 0, $11 = 0, $111 = 0, $113 = 0, $12 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $130 = 0, $132 = 0, $140 = 0, $15 = 0, $154 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $25 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $35 = 0, $36 = 0, $49 = 0, $53 = 0, $55 = 0, $56 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $68 = 0, $72 = 0, $75 = 0, $76 = 0, $79 = 0, $80 = 0, $87 = 0, $91 = 0, $92 = 0, $95 = 0, $96 = 0, $97 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer2 = sp + 8 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
if (_strcmp(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0) {
STACKTOP = sp;
return;
}
if (HEAP32[$1 + 12 >> 2] | 0) {}
$11 = HEAP32[$1 + 4 >> 2] | 0;
$12 = $11 + 4 | 0;
$13 = HEAP32[$12 >> 2] | 0;
L10 : do if (($13 | 0) > -1) {
$15 = $0 + 4 | 0;
$$sroa$061$073 = -1;
$$sroa$6$072 = 0;
$21 = $13;
while (1) {
$$sroa$061$1 = $$sroa$061$073;
$17 = $$sroa$6$072;
$19 = $$sroa$061$073;
while (1) {
if (!$17) {
$18 = $19 + 1 | 0;
if (($18 | 0) < ($21 | 0)) {
$$sink19$i = (HEAP32[$11 >> 2] | 0) + ($18 << 3) | 0;
$$sroa$061$2 = $18;
$154 = $18;
label = 12;
} else {
$$sroa$061$3 = $18;
$28 = $18;
}
} else {
$$sink19$i = $17 + 8 | 0;
$$sroa$061$2 = $$sroa$061$1;
$154 = $19;
label = 12;
}
if ((label | 0) == 12) {
label = 0;
$25 = HEAP32[$$sink19$i >> 2] | 0;
if (!$25) {
$$sroa$061$3 = $$sroa$061$2;
$28 = $154;
} else break;
}
if (($28 | 0) < ($21 | 0)) {
$$sroa$061$1 = $$sroa$061$3;
$17 = 0;
$19 = $28;
} else break L10;
}
$29 = HEAP32[$25 >> 2] | 0;
$31 = HEAP32[$25 + 4 >> 2] | 0;
$32 = HEAP32[$15 >> 2] | 0;
$35 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($29, HEAP32[$32 + 4 >> 2] | 0) | 0;
$36 = HEAP32[$32 >> 2] | 0;
L24 : do if ((HEAP16[$36 + ($35 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i = HEAP32[$36 + ($35 << 3) >> 2] | 0;
if (!$$01215$i$i) label = 19; else {
$$01216$i$i = $$01215$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($29, HEAP32[$$01216$i$i >> 2] | 0) | 0) break;
$$012$i$i = HEAP32[$$01216$i$i + 8 >> 2] | 0;
if (!$$012$i$i) {
label = 19;
break L24;
} else $$01216$i$i = $$012$i$i;
}
$$sink$i$i = $$01216$i$i + 4 | 0;
}
} else label = 19; while (0);
if ((label | 0) == 19) {
label = 0;
$$sink$i$i = $32 + 20 | 0;
}
$49 = HEAP32[$15 >> 2] | 0;
if ((HEAP32[$$sink$i$i >> 2] | 0) == (HEAP32[$49 + 20 >> 2] | 0)) {
$55 = __Z10copyStringPKc($29) | 0;
$56 = __Z10copyStringPKc($31) | 0;
$59 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($55, HEAP32[$49 + 4 >> 2] | 0) | 0;
$60 = HEAP32[$49 >> 2] | 0;
$61 = $60 + ($59 << 3) | 0;
$62 = $60 + ($59 << 3) + 4 | 0;
switch (HEAP16[$62 >> 1] | 0) {
case 0:
{
$64 = __Znwj(12) | 0;
HEAP32[$64 >> 2] = $55;
HEAP32[$64 + 4 >> 2] = $56;
HEAP32[$64 + 8 >> 2] = 0;
HEAP32[$61 >> 2] = $64;
$68 = $49 + 12 | 0;
HEAP32[$68 >> 2] = (HEAP32[$68 >> 2] | 0) + -1;
$$sink$i$i45 = $49 + 16 | 0;
break;
}
case 1:
{
$72 = $49 + 16 | 0;
HEAP32[$72 >> 2] = (HEAP32[$72 >> 2] | 0) + -1;
label = 25;
break;
}
default:
label = 25;
}
if ((label | 0) == 25) {
label = 0;
$75 = HEAP32[$61 >> 2] | 0;
$76 = __Znwj(12) | 0;
$79 = $75 + 8 | 0;
$80 = HEAP32[$79 >> 2] | 0;
HEAP32[$76 >> 2] = $55;
HEAP32[$76 + 4 >> 2] = $56;
HEAP32[$76 + 8 >> 2] = $80;
HEAP32[$79 >> 2] = $76;
$$sink$i$i45 = $49 + 8 | 0;
}
HEAP32[$$sink$i$i45 >> 2] = (HEAP32[$$sink$i$i45 >> 2] | 0) + 1;
HEAP16[$62 >> 1] = (HEAP16[$62 >> 1] | 0) + 1 << 16 >> 16;
$87 = $49 + 24 | 0;
HEAP32[$87 >> 2] = (HEAP32[$87 >> 2] | 0) + 1;
}
$53 = HEAP32[$12 >> 2] | 0;
if (($$sroa$061$2 | 0) < ($53 | 0)) {
$$sroa$061$073 = $$sroa$061$2;
$$sroa$6$072 = $25;
$21 = $53;
} else break;
}
} while (0);
$91 = HEAP32[$1 + 8 >> 2] | 0;
$92 = $91 + 12 | 0;
if ((HEAP32[$92 >> 2] | 0) <= 0) {
STACKTOP = sp;
return;
}
$95 = $0 + 8 | 0;
$96 = $91 + 8 | 0;
$97 = $91 + 4 | 0;
$$04171 = 0;
$101 = 0;
do {
L48 : do if ($$04171 << 16 >> 16 >= 0) {
$102 = HEAP32[(HEAP32[$91 >> 2] | 0) + ($101 << 2) >> 2] | 0;
if ($102 | 0) {
$104 = HEAP32[$102 >> 2] | 0;
do if ($104 | 0) {
$106 = HEAP32[$95 >> 2] | 0;
L53 : do if (!$106) $$4$i$i = 0; else {
$109 = HEAP32[$106 + 12 >> 2] | 0;
if (($109 | 0) > 0) {
$111 = HEAP32[$106 >> 2] | 0;
$$02535$i$i = 0;
do {
$113 = HEAP32[$111 + ($$02535$i$i << 2) >> 2] | 0;
if (!(_strcmp($104, HEAP32[$113 >> 2] | 0) | 0)) {
$$4$i$i = $113;
break L53;
}
$$02535$i$i = $$02535$i$i + 1 | 0;
} while (($$02535$i$i | 0) < ($109 | 0));
}
if (!0) $$4$i$i = 0; else {
HEAP32[$vararg_buffer >> 2] = $104;
HEAP32[$vararg_buffer + 4 >> 2] = 0;
__Z7eprintfPKcz(54384, $vararg_buffer);
$$4$i$i = 0;
}
} while (0);
$121 = ($$4$i$i | 0) == 0;
if ($121 & 0 != 0) {
HEAP32[$vararg_buffer2 >> 2] = $104;
__Z7eprintfPKcz(54421, $vararg_buffer2);
break;
}
if (!$121) {
__ZN7XMLCell12mergeXMLCellEPKS_($$4$i$i, $102);
break L48;
}
} while (0);
$122 = HEAP32[$95 >> 2] | 0;
$123 = $122 + 12 | 0;
$124 = HEAP32[$123 >> 2] | 0;
if (($124 | 0) >= 0) {
if ((HEAP32[$122 + 8 >> 2] | 0) > ($124 | 0)) {
$$pre$phiZ2D = $124 + 1 | 0;
label = 46;
} else {
$130 = HEAP32[$122 + 4 >> 2] | 0;
$132 = $124 + 1 | 0;
__ZN13DynamicArrayPI7XMLCellE6resizeEi($122, ($130 | 0) > ($124 | 0) ? $130 : $132 + ($124 >>> 1) | 0);
if ((HEAP32[$123 >> 2] | 0) <= ($124 | 0)) {
$$pre$phiZ2D = $132;
label = 46;
}
}
if ((label | 0) == 46) {
label = 0;
HEAP32[$123 >> 2] = $$pre$phiZ2D;
}
HEAP32[(HEAP32[$122 >> 2] | 0) + ($124 << 2) >> 2] = $102;
}
if ((HEAP32[$96 >> 2] | 0) <= ($101 | 0)) {
$140 = HEAP32[$97 >> 2] | 0;
__ZN13DynamicArrayPI7XMLCellE6resizeEi($91, ($140 | 0) > ($101 | 0) ? $140 : $101 + 1 + ($101 >>> 1) | 0);
}
if ((HEAP32[$92 >> 2] | 0) <= ($101 | 0)) HEAP32[$92 >> 2] = $101 + 1;
HEAP32[(HEAP32[$91 >> 2] | 0) + ($101 << 2) >> 2] = 0;
}
} while (0);
$$04171 = $$04171 + 1 << 16 >> 16;
$101 = $$04171 << 16 >> 16;
} while ((HEAP32[$92 >> 2] | 0) > ($101 | 0));
STACKTOP = sp;
return;
}
function __ZN20HanimAnimationRecordD2Ev($0) {
$0 = $0 | 0;
var $$015 = 0, $$016 = 0, $$06$i = 0, $$06$i18 = 0, $1 = 0, $10 = 0, $100 = 0, $102 = 0, $103 = 0, $104 = 0, $106 = 0, $107 = 0, $109 = 0, $11 = 0, $110 = 0, $112 = 0, $116 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $125 = 0, $126 = 0, $128 = 0, $129 = 0, $13 = 0, $133 = 0, $135 = 0, $136 = 0, $141 = 0, $143 = 0, $144 = 0, $149 = 0, $15 = 0, $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $40 = 0, $42 = 0, $43 = 0, $48 = 0, $50 = 0, $51 = 0, $54 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $70 = 0, $71 = 0, $76 = 0, $8 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $86 = 0, $87 = 0, $90 = 0, $91 = 0, $96 = 0, label = 0;
$1 = HEAP32[16165] | 0;
if (!$1) label = 5; else {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0, $1 | 0);
$6 = __THREW__;
__THREW__ = 0;
if ($6 & 1) label = 4; else {
HEAP32[16165] = 0;
label = 5;
}
}
L4 : do if ((label | 0) == 5) {
$10 = $0 + 100 | 0;
$11 = HEAP32[$10 >> 2] | 0;
do if ($11 | 0) {
__THREW__ = 0;
invoke_vi(105, $11 | 0);
$13 = __THREW__;
__THREW__ = 0;
if ($13 & 1) {
$15 = ___cxa_find_matching_catch_2() | 0;
$16 = tempRet0;
__ZdlPv($11);
$$015 = $16;
$$016 = $15;
break L4;
} else {
__ZdlPv($11);
HEAP32[$10 >> 2] = 0;
break;
}
} while (0);
$17 = $0 + 104 | 0;
$18 = HEAP32[$17 >> 2] | 0;
do if ($18 | 0) {
__THREW__ = 0;
invoke_vi(106, $18 | 0);
$20 = __THREW__;
__THREW__ = 0;
if ($20 & 1) {
$25 = ___cxa_find_matching_catch_2() | 0;
$26 = tempRet0;
__ZdlPv($18);
$$015 = $26;
$$016 = $25;
break L4;
} else {
__ZdlPv($18);
HEAP32[$17 >> 2] = 0;
break;
}
} while (0);
$22 = $0 + 288 | 0;
$23 = HEAP32[$22 >> 2] | 0;
if (!$23) label = 17; else {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$23 >> 2] | 0) + 4 >> 2] | 0, $23 | 0);
$30 = __THREW__;
__THREW__ = 0;
if (!($30 & 1)) {
HEAP32[$22 >> 2] = 0;
label = 17;
}
}
do if ((label | 0) == 17) {
$34 = $0 + 272 | 0;
$35 = HEAP32[$34 >> 2] | 0;
if ($35 | 0) {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$35 >> 2] | 0) + 4 >> 2] | 0, $35 | 0);
$40 = __THREW__;
__THREW__ = 0;
if ($40 & 1) break;
HEAP32[$34 >> 2] = 0;
}
$42 = $0 + 296 | 0;
$43 = HEAP32[$42 >> 2] | 0;
if ($43 | 0) {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$43 >> 2] | 0) + 4 >> 2] | 0, $43 | 0);
$48 = __THREW__;
__THREW__ = 0;
if ($48 & 1) break;
HEAP32[$42 >> 2] = 0;
}
$50 = $0 + 292 | 0;
$51 = HEAP32[$50 >> 2] | 0;
if ($51 | 0) {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$51 >> 2] | 0) + 4 >> 2] | 0, $51 | 0);
$133 = __THREW__;
__THREW__ = 0;
if ($133 & 1) break;
HEAP32[$50 >> 2] = 0;
}
$135 = $0 + 276 | 0;
$136 = HEAP32[$135 >> 2] | 0;
if ($136 | 0) {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$136 >> 2] | 0) + 4 >> 2] | 0, $136 | 0);
$141 = __THREW__;
__THREW__ = 0;
if ($141 & 1) break;
HEAP32[$135 >> 2] = 0;
}
$143 = $0 + 300 | 0;
$144 = HEAP32[$143 >> 2] | 0;
if ($144 | 0) {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$144 >> 2] | 0) + 4 >> 2] | 0, $144 | 0);
$149 = __THREW__;
__THREW__ = 0;
if ($149 & 1) break;
HEAP32[$143 >> 2] = 0;
}
$59 = $0 + 304 | 0;
$54 = HEAP32[$59 >> 2] | 0;
if ($54 | 0) {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$54 >> 2] | 0) + 4 >> 2] | 0, $54 | 0);
$57 = __THREW__;
__THREW__ = 0;
if ($57 & 1) {
label = 4;
break L4;
}
HEAP32[$59 >> 2] = 0;
}
$60 = $0 + 340 | 0;
$61 = HEAP32[$60 >> 2] | 0;
if ($61 | 0) {
_free($61);
HEAP32[$60 >> 2] = 0;
}
$63 = $0 + 324 | 0;
$64 = HEAP32[$63 >> 2] | 0;
L50 : do if ($64 | 0) {
$66 = $0 + 336 | 0;
$67 = HEAP32[$66 >> 2] | 0;
if (($67 | 0) > 0) {
$$06$i = 0;
$152 = $67;
$70 = $64;
while (1) {
$71 = HEAP32[$70 + ($$06$i << 2) >> 2] | 0;
if (!$71) $82 = $152; else {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$71 >> 2] | 0) + 4 >> 2] | 0, $71 | 0);
$76 = __THREW__;
__THREW__ = 0;
if ($76 & 1) {
label = 4;
break L4;
}
HEAP32[(HEAP32[$63 >> 2] | 0) + ($$06$i << 2) >> 2] = 0;
$82 = HEAP32[$66 >> 2] | 0;
}
$80 = $$06$i + 1 | 0;
if (($80 | 0) >= ($82 | 0)) break L50;
$$06$i = $80;
$152 = $82;
$70 = HEAP32[$63 >> 2] | 0;
}
}
} while (0);
$83 = $0 + 308 | 0;
$84 = HEAP32[$83 >> 2] | 0;
L60 : do if ($84 | 0) {
$86 = $0 + 320 | 0;
$87 = HEAP32[$86 >> 2] | 0;
if (($87 | 0) > 0) {
$$06$i18 = 0;
$153 = $87;
$90 = $84;
while (1) {
$91 = HEAP32[$90 + ($$06$i18 << 2) >> 2] | 0;
if (!$91) $102 = $153; else {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$91 >> 2] | 0) + 4 >> 2] | 0, $91 | 0);
$96 = __THREW__;
__THREW__ = 0;
if ($96 & 1) {
label = 4;
break L4;
}
HEAP32[(HEAP32[$83 >> 2] | 0) + ($$06$i18 << 2) >> 2] = 0;
$102 = HEAP32[$86 >> 2] | 0;
}
$100 = $$06$i18 + 1 | 0;
if (($100 | 0) >= ($102 | 0)) break L60;
$$06$i18 = $100;
$153 = $102;
$90 = HEAP32[$83 >> 2] | 0;
}
}
} while (0);
$103 = $0 + 344 | 0;
$104 = HEAP32[$103 >> 2] | 0;
if ($104 | 0) {
_free($104);
HEAP32[$103 >> 2] = 0;
}
$106 = $0 + 348 | 0;
$107 = HEAP32[$106 >> 2] | 0;
if ($107 | 0) {
_free($107);
HEAP32[$106 >> 2] = 0;
}
$109 = $0 + 88 | 0;
$110 = HEAP32[$109 >> 2] | 0;
if ($110 | 0) {
_free($110);
HEAP32[$109 >> 2] = 0;
}
$112 = HEAP32[$63 >> 2] | 0;
if ($112 | 0) {
_free($112);
HEAP32[$63 >> 2] = 0;
}
HEAP32[$0 + 336 >> 2] = 0;
HEAP32[$0 + 332 >> 2] = 0;
$116 = HEAP32[$83 >> 2] | 0;
if (!$116) {
$118 = $0 + 320 | 0;
HEAP32[$118 >> 2] = 0;
$119 = $0 + 316 | 0;
HEAP32[$119 >> 2] = 0;
return;
}
_free($116);
HEAP32[$83 >> 2] = 0;
$118 = $0 + 320 | 0;
HEAP32[$118 >> 2] = 0;
$119 = $0 + 316 | 0;
HEAP32[$119 >> 2] = 0;
return;
} while (0);
$32 = ___cxa_find_matching_catch_2() | 0;
$$015 = tempRet0;
$$016 = $32;
} while (0);
if ((label | 0) == 4) {
$8 = ___cxa_find_matching_catch_2() | 0;
$$015 = tempRet0;
$$016 = $8;
}
$120 = $0 + 324 | 0;
$121 = HEAP32[$120 >> 2] | 0;
if ($121 | 0) {
_free($121);
HEAP32[$120 >> 2] = 0;
}
HEAP32[$0 + 336 >> 2] = 0;
HEAP32[$0 + 332 >> 2] = 0;
$125 = $0 + 308 | 0;
$126 = HEAP32[$125 >> 2] | 0;
if (!$126) {
$128 = $0 + 320 | 0;
HEAP32[$128 >> 2] = 0;
$129 = $0 + 316 | 0;
HEAP32[$129 >> 2] = 0;
___resumeException($$016 | 0);
}
_free($126);
HEAP32[$125 >> 2] = 0;
$128 = $0 + 320 | 0;
HEAP32[$128 >> 2] = 0;
$129 = $0 + 316 | 0;
HEAP32[$129 >> 2] = 0;
___resumeException($$016 | 0);
}
function __ZN17TargettedMovement18propagateHandStuffER12TwoHandStuffR20ArmHandConstellation($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$pre = 0, $100 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $110 = 0, $115 = 0, $116 = 0, $121 = 0, $123 = 0, $129 = 0, $130 = 0, $132 = 0, $134 = 0, $136 = 0, $140 = 0, $141 = 0, $146 = 0, $147 = 0, $152 = 0, $160 = 0, $165 = 0, $166 = 0, $171 = 0, $177 = 0, $18 = 0, $180 = 0, $181 = 0, $184 = 0, $188 = 0, $192 = 0, $193 = 0, $194 = 0, $21 = 0, $22 = 0, $3 = 0, $33 = 0, $38 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $51 = 0, $61 = 0, $64 = 0, $65 = 0, $68 = 0, $76 = 0, $8 = 0, $81 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $98 = 0, $99 = 0, $phitmp6$i = 0, $phitmp6$i12 = 0, dest = 0, src = 0, stop = 0;
$3 = $0 + 8 | 0;
$4 = HEAP32[$3 >> 2] | 0;
switch ($4 | 0) {
case 3:
case 5:
{
$8 = HEAP32[(HEAP32[$0 + 528 >> 2] | 0) + 28 >> 2] | 0;
if (Math_fround(HEAPF32[$8 + 20 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$8 + 24 >> 2]) == Math_fround(0.0)) $22 = (Math_fround(HEAPF32[$8 + 28 >> 2]) != Math_fround(0.0) & 1) << 4 & 65535; else $22 = 16; else $22 = 16;
$18 = $0 + 508 | 0;
$21 = (HEAPU8[$18 >> 0] | HEAPU8[$18 + 1 >> 0] << 8) & -17 | $22;
HEAP8[$18 >> 0] = $21;
HEAP8[$18 + 1 >> 0] = $21 >> 8;
$33 = ((Math_fround(HEAPF32[$8 + 32 >> 2]) != Math_fround(0.0) ? 1 : Math_fround(HEAPF32[$8 + 36 >> 2]) != Math_fround(0.0)) & 1) << 5 & 65535 | $21 & -33;
HEAP8[$18 >> 0] = $33;
HEAP8[$18 + 1 >> 0] = $33 >> 8;
if (!(HEAP8[$8 + 52 >> 0] | 0)) {
$$pre = $4;
$42 = $33;
$44 = 0;
} else {
$38 = HEAP32[$8 + 56 >> 2] | 0;
if (!$38) {
$$pre = $4;
$42 = $33;
$44 = 0;
} else {
$phitmp6$i12 = ((__ZNK9Handshape7definedEv($38) | 0) & 1) << 6 & 65535;
$$pre = HEAP32[$3 >> 2] | 0;
$42 = HEAPU8[$18 >> 0] | HEAPU8[$18 + 1 >> 0] << 8;
$44 = $phitmp6$i12;
}
}
$43 = $42 & -449 | $44;
HEAP8[$18 >> 0] = $43;
HEAP8[$18 + 1 >> 0] = $43 >> 8;
$46 = $$pre;
break;
}
default:
$46 = $4;
}
if (($46 | 1 | 0) == 5) {
$51 = HEAP32[(HEAP32[$0 + 528 >> 2] | 0) + 32 >> 2] | 0;
if (Math_fround(HEAPF32[$51 + 20 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$51 + 24 >> 2]) == Math_fround(0.0)) $65 = (Math_fround(HEAPF32[$51 + 28 >> 2]) != Math_fround(0.0) & 1) << 4 & 65535; else $65 = 16; else $65 = 16;
$61 = $0 + 510 | 0;
$64 = (HEAPU8[$61 >> 0] | HEAPU8[$61 + 1 >> 0] << 8) & -17 | $65;
HEAP8[$61 >> 0] = $64;
HEAP8[$61 + 1 >> 0] = $64 >> 8;
$68 = Math_fround(HEAPF32[$51 + 32 >> 2]) != Math_fround(0.0);
$76 = (($68 | Math_fround(HEAPF32[$51 + 36 >> 2]) != Math_fround(0.0)) & 1) << 5 & 65535 | $64 & -33;
HEAP8[$61 >> 0] = $76;
HEAP8[$61 + 1 >> 0] = $76 >> 8;
if (!(HEAP8[$51 + 52 >> 0] | 0)) {
$85 = $76;
$87 = 0;
} else {
$81 = HEAP32[$51 + 56 >> 2] | 0;
if (!$81) {
$85 = $76;
$87 = 0;
} else {
$phitmp6$i = ((__ZNK9Handshape7definedEv($81) | 0) & 1) << 6 & 65535;
$85 = HEAPU8[$61 >> 0] | HEAPU8[$61 + 1 >> 0] << 8;
$87 = $phitmp6$i;
}
}
$86 = $85 & -449 | $87;
HEAP8[$61 >> 0] = $86;
HEAP8[$61 + 1 >> 0] = $86 >> 8;
}
$88 = $1 + 20 | 0;
$89 = $0 + 100 | 0;
HEAP32[$89 >> 2] = HEAP32[$88 >> 2];
HEAP32[$89 + 4 >> 2] = HEAP32[$88 + 4 >> 2];
HEAP32[$89 + 8 >> 2] = HEAP32[$88 + 8 >> 2];
HEAP32[$89 + 12 >> 2] = HEAP32[$88 + 12 >> 2];
$90 = $1 + 64 | 0;
$91 = $0 + 212 | 0;
HEAP32[$91 >> 2] = HEAP32[$90 >> 2];
HEAP32[$91 + 4 >> 2] = HEAP32[$90 + 4 >> 2];
HEAP32[$91 + 8 >> 2] = HEAP32[$90 + 8 >> 2];
HEAP32[$91 + 12 >> 2] = HEAP32[$90 + 12 >> 2];
$92 = $1 + 36 | 0;
$93 = HEAP32[$92 >> 2] | 0;
if (!$93) $98 = 0; else $98 = HEAP32[$93 + 236 >> 2] | 0;
HEAP32[$0 + 116 >> 2] = $98;
$99 = $1 + 80 | 0;
$100 = HEAP32[$99 >> 2] | 0;
if (!$100) $105 = 0; else $105 = HEAP32[$100 + 236 >> 2] | 0;
HEAP32[$0 + 228 >> 2] = $105;
$106 = $0 + 528 | 0;
__ZN7Gesture18propagateHandStuffER12TwoHandStuff(HEAP32[$106 >> 2] | 0, $1);
$108 = $0 + 324 | 0;
HEAP32[$108 >> 2] = HEAP32[$88 >> 2];
HEAP32[$108 + 4 >> 2] = HEAP32[$88 + 4 >> 2];
HEAP32[$108 + 8 >> 2] = HEAP32[$88 + 8 >> 2];
HEAP32[$108 + 12 >> 2] = HEAP32[$88 + 12 >> 2];
$109 = $0 + 436 | 0;
HEAP32[$109 >> 2] = HEAP32[$90 >> 2];
HEAP32[$109 + 4 >> 2] = HEAP32[$90 + 4 >> 2];
HEAP32[$109 + 8 >> 2] = HEAP32[$90 + 8 >> 2];
HEAP32[$109 + 12 >> 2] = HEAP32[$90 + 12 >> 2];
$110 = HEAP32[$92 >> 2] | 0;
if (!$110) $115 = 0; else $115 = HEAP32[$110 + 236 >> 2] | 0;
HEAP32[$0 + 340 >> 2] = $115;
$116 = HEAP32[$99 >> 2] | 0;
if (!$116) $121 = 0; else $121 = HEAP32[$116 + 236 >> 2] | 0;
HEAP32[$0 + 452 >> 2] = $121;
$123 = $0 + 532 | 0;
__ZN7Gesture24MakeArmHandConstellationEPK20ArmHandConstellation(HEAP32[$106 >> 2] | 0, HEAP8[$123 >> 0] | 0 ? $2 : 0);
if (!(HEAP8[$123 >> 0] | 0)) {
$177 = $0 + 508 | 0;
$180 = (HEAPU8[$177 >> 0] | HEAPU8[$177 + 1 >> 0] << 8) & -2048 | 122;
HEAP8[$177 >> 0] = $180;
HEAP8[$177 + 1 >> 0] = $180 >> 8;
$181 = $0 + 510 | 0;
$184 = (HEAPU8[$181 >> 0] | HEAPU8[$181 + 1 >> 0] << 8) & -2048 | 122;
HEAP8[$181 >> 0] = $184;
HEAP8[$181 + 1 >> 0] = $184 >> 8;
} else {
$129 = HEAP32[$3 >> 2] | 0;
$130 = HEAP32[$106 >> 2] | 0;
$132 = HEAP32[$130 + 40 >> 2] | 0;
$134 = HEAP8[$132 + 60 >> 0] | 0;
$136 = HEAP8[$132 + 61 >> 0] | 0;
$140 = (HEAP8[$130 + 13 >> 0] & 64) != 0;
switch ($129 | 0) {
case 3:
case 5:
{
$141 = $0 + 508 | 0;
$146 = HEAP16[$141 >> 1] & -3 | ($140 ? $134 : $136) << 1 & 255;
HEAP16[$141 >> 1] = $146;
$147 = $132 + 62 | 0;
$152 = $146 & -9 | HEAP8[$147 >> 0] << 3 & 255;
HEAP16[$141 >> 1] = $152;
HEAP16[$141 >> 1] = $152 & -5 | HEAP8[$147 >> 0] << 2 & 255;
break;
}
default:
{}
}
if (($129 | 1 | 0) == 5) {
$160 = $0 + 510 | 0;
$165 = HEAP16[$160 >> 1] & -3 | ($140 ? $136 : $134) << 1 & 255;
HEAP16[$160 >> 1] = $165;
$166 = $132 + 62 | 0;
$171 = $165 & -9 | HEAP8[$166 >> 0] << 3 & 255;
HEAP16[$160 >> 1] = $171;
HEAP16[$160 >> 1] = $171 & -5 | HEAP8[$166 >> 0] << 2 & 255;
}
}
if (!0) {
$192 = HEAP32[$106 >> 2] | 0;
$193 = $192 + 40 | 0;
$194 = HEAP32[$193 >> 2] | 0;
dest = $2;
src = $194;
stop = dest + 64 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP8[$2 + 64 >> 0] = HEAP8[$194 + 64 >> 0] | 0;
return;
}
__Z5eputsPKc(40030);
$188 = HEAP32[(HEAP32[$106 >> 2] | 0) + 40 >> 2] | 0;
if (!$188) __Z5eputsPKc(61277); else __ZNK20ArmHandConstellation5printEP8_IO_FILE($188, HEAP32[16082] | 0);
__Z5eputsPKc(40050);
__ZNK20ArmHandConstellation5printEP8_IO_FILE($2, HEAP32[16082] | 0);
$192 = HEAP32[$106 >> 2] | 0;
$193 = $192 + 40 | 0;
$194 = HEAP32[$193 >> 2] | 0;
dest = $2;
src = $194;
stop = dest + 64 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP8[$2 + 64 >> 0] = HEAP8[$194 + 64 >> 0] | 0;
return;
}
function _normal_getAtts($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$0$phi = 0, $$0101 = 0, $$097 = 0, $$097$phi = 0, $$099 = 0, $$099$phi = 0, $$1100 = 0, $$2 = 0, $$3 = 0, $$pn = 0, $4 = 0, $47 = 0, $5 = 0, $55 = 0;
$4 = $0 + 72 | 0;
$$0 = 0;
$$097 = 0;
$$099 = 1;
$$pn = $1;
L1 : while (1) {
$$0101 = $$pn + 1 | 0;
$5 = HEAP8[$$0101 >> 0] | 0;
do switch (HEAP8[$4 + ($5 & 255) >> 0] | 0) {
case 5:
{
if (!$$099) if (($$097 | 0) < ($2 | 0)) {
HEAP32[$3 + ($$097 << 4) >> 2] = $$0101;
HEAP8[$3 + ($$097 << 4) + 12 >> 0] = 1;
$$1100 = 1;
} else $$1100 = 1; else $$1100 = $$099;
$$097$phi = $$097;
$$0$phi = $$0;
$$099 = $$1100;
$$pn = $$pn + 2 | 0;
$$097 = $$097$phi;
$$0 = $$0$phi;
continue L1;
break;
}
case 6:
{
if (!$$099) if (($$097 | 0) < ($2 | 0)) {
HEAP32[$3 + ($$097 << 4) >> 2] = $$0101;
HEAP8[$3 + ($$097 << 4) + 12 >> 0] = 1;
$$2 = 1;
} else $$2 = 1; else $$2 = $$099;
$$097$phi = $$097;
$$0$phi = $$0;
$$099 = $$2;
$$pn = $$pn + 3 | 0;
$$097 = $$097$phi;
$$0 = $$0$phi;
continue L1;
break;
}
case 7:
{
if (!$$099) if (($$097 | 0) < ($2 | 0)) {
HEAP32[$3 + ($$097 << 4) >> 2] = $$0101;
HEAP8[$3 + ($$097 << 4) + 12 >> 0] = 1;
$$3 = 1;
} else $$3 = 1; else $$3 = $$099;
$$097$phi = $$097;
$$0$phi = $$0;
$$099 = $$3;
$$pn = $$pn + 4 | 0;
$$097 = $$097$phi;
$$0 = $$0$phi;
continue L1;
break;
}
case 24:
case 22:
case 29:
{
if ($$099 | 0) {
$$099$phi = $$099;
$$097$phi = $$097;
$$0$phi = $$0;
$$pn = $$0101;
$$099 = $$099$phi;
$$097 = $$097$phi;
$$0 = $$0$phi;
continue L1;
}
if (($$097 | 0) >= ($2 | 0)) {
$$097$phi = $$097;
$$0$phi = $$0;
$$099 = 1;
$$pn = $$0101;
$$097 = $$097$phi;
$$0 = $$0$phi;
continue L1;
}
HEAP32[$3 + ($$097 << 4) >> 2] = $$0101;
HEAP8[$3 + ($$097 << 4) + 12 >> 0] = 1;
$$097$phi = $$097;
$$0$phi = $$0;
$$099 = 1;
$$pn = $$0101;
$$097 = $$097$phi;
$$0 = $$0$phi;
continue L1;
break;
}
case 12:
{
if (($$099 | 0) != 2) {
if (($$097 | 0) >= ($2 | 0)) {
$$097$phi = $$097;
$$0 = 12;
$$099 = 2;
$$pn = $$0101;
$$097 = $$097$phi;
continue L1;
}
HEAP32[$3 + ($$097 << 4) + 4 >> 2] = $$pn + 2;
$$097$phi = $$097;
$$0 = 12;
$$099 = 2;
$$pn = $$0101;
$$097 = $$097$phi;
continue L1;
}
if (($$0 | 0) != 12) {
$$097$phi = $$097;
$$0$phi = $$0;
$$099 = 2;
$$pn = $$0101;
$$097 = $$097$phi;
$$0 = $$0$phi;
continue L1;
}
if (($$097 | 0) < ($2 | 0)) HEAP32[$3 + ($$097 << 4) + 8 >> 2] = $$0101;
$$0 = 12;
$$097 = $$097 + 1 | 0;
$$099 = 0;
$$pn = $$0101;
continue L1;
break;
}
case 13:
{
if (($$099 | 0) != 2) {
if (($$097 | 0) >= ($2 | 0)) {
$$097$phi = $$097;
$$0 = 13;
$$099 = 2;
$$pn = $$0101;
$$097 = $$097$phi;
continue L1;
}
HEAP32[$3 + ($$097 << 4) + 4 >> 2] = $$pn + 2;
$$097$phi = $$097;
$$0 = 13;
$$099 = 2;
$$pn = $$0101;
$$097 = $$097$phi;
continue L1;
}
if (($$0 | 0) != 13) {
$$097$phi = $$097;
$$0$phi = $$0;
$$099 = 2;
$$pn = $$0101;
$$097 = $$097$phi;
$$0 = $$0$phi;
continue L1;
}
if (($$097 | 0) < ($2 | 0)) HEAP32[$3 + ($$097 << 4) + 8 >> 2] = $$0101;
$$0 = 13;
$$097 = $$097 + 1 | 0;
$$099 = 0;
$$pn = $$0101;
continue L1;
break;
}
case 3:
{
if (($$097 | 0) >= ($2 | 0)) {
$$099$phi = $$099;
$$097$phi = $$097;
$$0$phi = $$0;
$$pn = $$0101;
$$099 = $$099$phi;
$$097 = $$097$phi;
$$0 = $$0$phi;
continue L1;
}
HEAP8[$3 + ($$097 << 4) + 12 >> 0] = 0;
$$099$phi = $$099;
$$097$phi = $$097;
$$0$phi = $$0;
$$pn = $$0101;
$$099 = $$099$phi;
$$097 = $$097$phi;
$$0 = $$0$phi;
continue L1;
break;
}
case 21:
{
switch ($$099 | 0) {
case 1:
{
$$097$phi = $$097;
$$0$phi = $$0;
$$099 = 0;
$$pn = $$0101;
$$097 = $$097$phi;
$$0 = $$0$phi;
continue L1;
break;
}
case 2:
break;
default:
{
$$099$phi = $$099;
$$097$phi = $$097;
$$0$phi = $$0;
$$pn = $$0101;
$$099 = $$099$phi;
$$097 = $$097$phi;
$$0 = $$0$phi;
continue L1;
}
}
if (($$097 | 0) >= ($2 | 0)) {
$$097$phi = $$097;
$$0$phi = $$0;
$$099 = 2;
$$pn = $$0101;
$$097 = $$097$phi;
$$0 = $$0$phi;
continue L1;
}
$47 = $3 + ($$097 << 4) + 12 | 0;
if (!(HEAP8[$47 >> 0] | 0)) {
$$097$phi = $$097;
$$0$phi = $$0;
$$099 = 2;
$$pn = $$0101;
$$097 = $$097$phi;
$$0 = $$0$phi;
continue L1;
}
if ($5 << 24 >> 24 == 32 ? ($$0101 | 0) != (HEAP32[$3 + ($$097 << 4) + 4 >> 2] | 0) : 0) {
$55 = HEAP8[$$pn + 2 >> 0] | 0;
if ($55 << 24 >> 24 != 32) if (($$0 | 0) != (HEAPU8[$4 + ($55 & 255) >> 0] | 0)) {
$$097$phi = $$097;
$$0$phi = $$0;
$$099 = 2;
$$pn = $$0101;
$$097 = $$097$phi;
$$0 = $$0$phi;
continue L1;
}
}
HEAP8[$47 >> 0] = 0;
$$097$phi = $$097;
$$0$phi = $$0;
$$099 = 2;
$$pn = $$0101;
$$097 = $$097$phi;
$$0 = $$0$phi;
continue L1;
break;
}
case 10:
case 9:
{
switch ($$099 | 0) {
case 1:
{
$$097$phi = $$097;
$$0$phi = $$0;
$$099 = 0;
$$pn = $$0101;
$$097 = $$097$phi;
$$0 = $$0$phi;
continue L1;
break;
}
case 2:
break;
default:
{
$$099$phi = $$099;
$$097$phi = $$097;
$$0$phi = $$0;
$$pn = $$0101;
$$099 = $$099$phi;
$$097 = $$097$phi;
$$0 = $$0$phi;
continue L1;
}
}
if (($$097 | 0) >= ($2 | 0)) {
$$097$phi = $$097;
$$0$phi = $$0;
$$099 = 2;
$$pn = $$0101;
$$097 = $$097$phi;
$$0 = $$0$phi;
continue L1;
}
HEAP8[$3 + ($$097 << 4) + 12 >> 0] = 0;
$$097$phi = $$097;
$$0$phi = $$0;
$$099 = 2;
$$pn = $$0101;
$$097 = $$097$phi;
$$0 = $$0$phi;
continue L1;
break;
}
case 17:
case 11:
{
if (($$099 | 0) == 2) {
$$097$phi = $$097;
$$0$phi = $$0;
$$099 = 2;
$$pn = $$0101;
$$097 = $$097$phi;
$$0 = $$0$phi;
continue L1;
} else break L1;
break;
}
default:
{
$$099$phi = $$099;
$$097$phi = $$097;
$$0$phi = $$0;
$$pn = $$0101;
$$099 = $$099$phi;
$$097 = $$097$phi;
$$0 = $$0$phi;
continue L1;
}
} while (0);
}
return $$097 | 0;
}
function __Z12setupOptionsP7Getopts($0) {
$0 = $0 | 0;
var $vararg_buffer = 0, $vararg_buffer102 = 0, $vararg_buffer106 = 0, $vararg_buffer11 = 0, $vararg_buffer110 = 0, $vararg_buffer114 = 0, $vararg_buffer118 = 0, $vararg_buffer122 = 0, $vararg_buffer15 = 0, $vararg_buffer19 = 0, $vararg_buffer23 = 0, $vararg_buffer27 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer35 = 0, $vararg_buffer39 = 0, $vararg_buffer43 = 0, $vararg_buffer48 = 0, $vararg_buffer52 = 0, $vararg_buffer56 = 0, $vararg_buffer61 = 0, $vararg_buffer65 = 0, $vararg_buffer69 = 0, $vararg_buffer7 = 0, $vararg_buffer73 = 0, $vararg_buffer77 = 0, $vararg_buffer82 = 0, $vararg_buffer86 = 0, $vararg_buffer90 = 0, $vararg_buffer94 = 0, $vararg_buffer98 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 288 | 0;
$vararg_buffer122 = sp + 272 | 0;
$vararg_buffer118 = sp + 264 | 0;
$vararg_buffer114 = sp + 256 | 0;
$vararg_buffer110 = sp + 248 | 0;
$vararg_buffer106 = sp + 240 | 0;
$vararg_buffer102 = sp + 232 | 0;
$vararg_buffer98 = sp + 224 | 0;
$vararg_buffer94 = sp + 216 | 0;
$vararg_buffer90 = sp + 208 | 0;
$vararg_buffer86 = sp + 200 | 0;
$vararg_buffer82 = sp + 192 | 0;
$vararg_buffer77 = sp + 176 | 0;
$vararg_buffer73 = sp + 168 | 0;
$vararg_buffer69 = sp + 160 | 0;
$vararg_buffer65 = sp + 152 | 0;
$vararg_buffer61 = sp + 144 | 0;
$vararg_buffer56 = sp + 128 | 0;
$vararg_buffer52 = sp + 120 | 0;
$vararg_buffer48 = sp + 112 | 0;
$vararg_buffer43 = sp + 96 | 0;
$vararg_buffer39 = sp + 88 | 0;
$vararg_buffer35 = sp + 80 | 0;
$vararg_buffer31 = sp + 72 | 0;
$vararg_buffer27 = sp + 64 | 0;
$vararg_buffer23 = sp + 56 | 0;
$vararg_buffer19 = sp + 48 | 0;
$vararg_buffer15 = sp + 40 | 0;
$vararg_buffer11 = sp + 32 | 0;
$vararg_buffer7 = sp + 24 | 0;
$vararg_buffer3 = sp + 16 | 0;
$vararg_buffer = sp;
HEAP32[$vararg_buffer >> 2] = 55236;
HEAP32[$vararg_buffer + 4 >> 2] = 55241;
HEAP32[$vararg_buffer + 8 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 2, 0, 55216, $vararg_buffer);
HEAP32[$vararg_buffer3 >> 2] = 57271;
HEAP32[$vararg_buffer3 + 4 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 3, 1, 55243, $vararg_buffer3);
HEAP32[$vararg_buffer7 >> 2] = 55275;
HEAP32[$vararg_buffer7 + 4 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 3, 1, 55259, $vararg_buffer7);
HEAP32[$vararg_buffer11 >> 2] = 55296;
HEAP32[$vararg_buffer11 + 4 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 0, 1, 55285, $vararg_buffer11);
HEAP32[$vararg_buffer15 >> 2] = 55318;
HEAP32[$vararg_buffer15 + 4 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 0, 1, 55305, $vararg_buffer15);
HEAP32[$vararg_buffer19 >> 2] = 55376;
HEAP32[$vararg_buffer19 + 4 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 2, 1, 55325, $vararg_buffer19);
HEAP32[$vararg_buffer23 >> 2] = 55454;
HEAP32[$vararg_buffer23 + 4 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 1, 1, 55383, $vararg_buffer23);
HEAP32[$vararg_buffer27 >> 2] = 55519;
HEAP32[$vararg_buffer27 + 4 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 1, 1, 55462, $vararg_buffer27);
HEAP32[$vararg_buffer31 >> 2] = 55618;
HEAP32[$vararg_buffer31 + 4 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 1, 1, 55529, $vararg_buffer31);
HEAP32[$vararg_buffer35 >> 2] = 55678;
HEAP32[$vararg_buffer35 + 4 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 0, 1, 55625, $vararg_buffer35);
HEAP32[$vararg_buffer39 >> 2] = 55743;
HEAP32[$vararg_buffer39 + 4 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 1, 1, 55686, $vararg_buffer39);
HEAP32[$vararg_buffer43 >> 2] = 55843;
HEAP32[$vararg_buffer43 + 4 >> 2] = 57194;
HEAP32[$vararg_buffer43 + 8 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 0, 1, 55748, $vararg_buffer43);
HEAP32[$vararg_buffer48 >> 2] = 55978;
HEAP32[$vararg_buffer48 + 4 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 1, 1, 55853, $vararg_buffer48);
HEAP32[$vararg_buffer52 >> 2] = 56020;
HEAP32[$vararg_buffer52 + 4 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 1, 1, 55991, $vararg_buffer52);
HEAP32[$vararg_buffer56 >> 2] = 56086;
HEAP32[$vararg_buffer56 + 4 >> 2] = 56095;
HEAP32[$vararg_buffer56 + 8 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 1, 1, 56025, $vararg_buffer56);
HEAP32[$vararg_buffer61 >> 2] = 56167;
HEAP32[$vararg_buffer61 + 4 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 0, 1, 56097, $vararg_buffer61);
HEAP32[$vararg_buffer65 >> 2] = 56213;
HEAP32[$vararg_buffer65 + 4 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 1, 1, 56173, $vararg_buffer65);
HEAP32[$vararg_buffer69 >> 2] = 56254;
HEAP32[$vararg_buffer69 + 4 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 2, 1, 56220, $vararg_buffer69);
HEAP32[$vararg_buffer73 >> 2] = 56291;
HEAP32[$vararg_buffer73 + 4 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 2, 1, 56258, $vararg_buffer73);
HEAP32[$vararg_buffer77 >> 2] = 56351;
HEAP32[$vararg_buffer77 + 4 >> 2] = 56362;
HEAP32[$vararg_buffer77 + 8 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 2, 1, 56298, $vararg_buffer77);
HEAP32[$vararg_buffer82 >> 2] = 56524;
HEAP32[$vararg_buffer82 + 4 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 1, 1, 56366, $vararg_buffer82);
HEAP32[$vararg_buffer86 >> 2] = 56582;
HEAP32[$vararg_buffer86 + 4 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 2, 1, 56529, $vararg_buffer86);
HEAP32[$vararg_buffer90 >> 2] = 56645;
HEAP32[$vararg_buffer90 + 4 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 2, 1, 56591, $vararg_buffer90);
HEAP32[$vararg_buffer94 >> 2] = 56702;
HEAP32[$vararg_buffer94 + 4 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 2, 1, 56655, $vararg_buffer94);
HEAP32[$vararg_buffer98 >> 2] = 57183;
HEAP32[$vararg_buffer98 + 4 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 0, 0, 56712, $vararg_buffer98);
HEAP32[$vararg_buffer102 >> 2] = 57196;
HEAP32[$vararg_buffer102 + 4 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 0, 0, 56739, $vararg_buffer102);
HEAP32[$vararg_buffer106 >> 2] = 56826;
HEAP32[$vararg_buffer106 + 4 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 0, 0, 56774, $vararg_buffer106);
HEAP32[$vararg_buffer110 >> 2] = 57278;
HEAP32[$vararg_buffer110 + 4 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 0, 0, 56835, $vararg_buffer110);
HEAP32[$vararg_buffer114 >> 2] = 57284;
HEAP32[$vararg_buffer114 + 4 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 0, 0, 56923, $vararg_buffer114);
HEAP32[$vararg_buffer118 >> 2] = 57291;
HEAP32[$vararg_buffer118 + 4 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 0, 0, 56965, $vararg_buffer118);
HEAP32[$vararg_buffer122 >> 2] = 57298;
HEAP32[$vararg_buffer122 + 4 >> 2] = 0;
__ZN7Getopts6AddoptE10OptionTypebPKcz($0, 0, 0, 57014, $vararg_buffer122);
STACKTOP = sp;
return;
}
function __ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = Math_fround($4);
var $$0 = 0, $$011$i$i = 0, $$01115$i$i = 0, $$01116$i$i = 0, $$pre$phiZ2D = 0, $$sink$i$i = 0, $$sink$i$i30 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $25 = 0, $32 = 0, $33 = 0, $36 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $47 = 0, $49 = 0, $5 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $67 = 0, $7 = 0, $71 = 0, $74 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $85 = 0, $9 = 0, $90 = 0, $92 = 0, $tmpcast$i$i$byval_copy = 0, $tmpcast$i29$byval_copy = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$tmpcast$i29$byval_copy = sp + 52 | 0;
$tmpcast$i$i$byval_copy = sp + 48 | 0;
$vararg_buffer7 = sp + 32 | 0;
$vararg_buffer5 = sp + 24 | 0;
$vararg_buffer3 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$5 = sp + 44 | 0;
$6 = sp + 40 | 0;
$7 = sp + 36 | 0;
$8 = HEAP32[$1 >> 2] | 0;
HEAP32[$7 >> 2] = $8;
$9 = $0 + 176 | 0;
$10 = HEAP32[$9 >> 2] | 0;
HEAP8[$tmpcast$i29$byval_copy >> 0] = HEAP8[$7 >> 0] | 0;
HEAP8[$tmpcast$i29$byval_copy + 1 >> 0] = HEAP8[$7 + 1 >> 0] | 0;
HEAP8[$tmpcast$i29$byval_copy + 2 >> 0] = HEAP8[$7 + 2 >> 0] | 0;
HEAP8[$tmpcast$i29$byval_copy + 3 >> 0] = HEAP8[$7 + 3 >> 0] | 0;
$11 = __ZN6KeyOpsIK6SiteIDE12hashFunctionES0_i($tmpcast$i29$byval_copy, $10) | 0;
$12 = $0 + 172 | 0;
$13 = HEAP32[$12 >> 2] | 0;
L1 : do if ((HEAP16[$13 + ($11 << 3) + 4 >> 1] | 0) > 0) {
$$01115$i$i = HEAP32[$13 + ($11 << 3) >> 2] | 0;
if (!$$01115$i$i) label = 6; else {
$$01116$i$i = $$01115$i$i;
while (1) {
HEAP32[$5 >> 2] = $8;
HEAP32[$6 >> 2] = HEAP32[$$01116$i$i >> 2];
HEAP32[$tmpcast$i$i$byval_copy >> 2] = HEAP32[$5 >> 2];
HEAP8[$tmpcast$i29$byval_copy >> 0] = HEAP8[$6 >> 0] | 0;
HEAP8[$tmpcast$i29$byval_copy + 1 >> 0] = HEAP8[$6 + 1 >> 0] | 0;
HEAP8[$tmpcast$i29$byval_copy + 2 >> 0] = HEAP8[$6 + 2 >> 0] | 0;
HEAP8[$tmpcast$i29$byval_copy + 3 >> 0] = HEAP8[$6 + 3 >> 0] | 0;
if (__ZN6KeyOpsIK6SiteIDE5eqkeyES0_S0_($tmpcast$i$i$byval_copy, $tmpcast$i29$byval_copy) | 0) break;
$$011$i$i = HEAP32[$$01116$i$i + 8 >> 2] | 0;
if (!$$011$i$i) {
label = 6;
break L1;
} else $$01116$i$i = $$011$i$i;
}
$$sink$i$i = $$01116$i$i + 4 | 0;
}
} else label = 6; while (0);
if ((label | 0) == 6) $$sink$i$i = $0 + 192 | 0;
$25 = HEAP32[$$sink$i$i >> 2] | 0;
if (0) if (((HEAPU16[$1 >> 1] | HEAPU8[$1 + 2 >> 0] << 16) & 255 | 0) == 44) {
HEAP32[$vararg_buffer >> 2] = $25;
__Z7eprintfPKcz(21783, $vararg_buffer);
__ZNK6SiteID5printEP8_IO_FILE($1, HEAP32[16082] | 0);
__Z5eputcc(10);
}
do if (!$25) {
$32 = __Znwj(56) | 0;
__THREW__ = 0;
invoke_vii(140, $32 | 0, 0);
$33 = __THREW__;
__THREW__ = 0;
if ($33 & 1) {
$90 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($32);
___resumeException($90 | 0);
}
HEAP32[$32 + 8 >> 2] = 2;
$36 = $32 + 12 | 0;
HEAP16[$36 >> 1] = HEAP16[$1 >> 1] | 0;
HEAP8[$36 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0;
HEAP32[$32 + 16 >> 2] = $2;
__ZN5Joint7addSiteEP4Site($2, $32);
$38 = $0 + 108 | 0;
$39 = HEAP32[$38 >> 2] | 0;
$40 = $39 + 12 | 0;
$41 = HEAP32[$40 >> 2] | 0;
if (($41 | 0) < 0) $56 = $41; else {
if ((HEAP32[$39 + 8 >> 2] | 0) > ($41 | 0)) {
$$pre$phiZ2D = $41 + 1 | 0;
label = 16;
} else {
$47 = HEAP32[$39 + 4 >> 2] | 0;
$49 = $41 + 1 | 0;
__ZN13DynamicArrayPI4SiteE6resizeEi($39, ($47 | 0) > ($41 | 0) ? $47 : $49 + ($41 >>> 1) | 0);
if ((HEAP32[$40 >> 2] | 0) <= ($41 | 0)) {
$$pre$phiZ2D = $49;
label = 16;
}
}
if ((label | 0) == 16) HEAP32[$40 >> 2] = $$pre$phiZ2D;
HEAP32[(HEAP32[$39 >> 2] | 0) + ($41 << 2) >> 2] = $32;
$56 = HEAP32[(HEAP32[$38 >> 2] | 0) + 12 >> 2] | 0;
}
HEAP32[$32 + 4 >> 2] = $56;
__ZN4Site17setGlobalPositionERK6Vector($32, $3);
$57 = HEAP32[$1 >> 2] | 0;
HEAP32[$tmpcast$i$i$byval_copy >> 2] = $57;
$58 = HEAP32[$9 >> 2] | 0;
HEAP8[$tmpcast$i29$byval_copy >> 0] = HEAP8[$tmpcast$i$i$byval_copy >> 0] | 0;
HEAP8[$tmpcast$i29$byval_copy + 1 >> 0] = HEAP8[$tmpcast$i$i$byval_copy + 1 >> 0] | 0;
HEAP8[$tmpcast$i29$byval_copy + 2 >> 0] = HEAP8[$tmpcast$i$i$byval_copy + 2 >> 0] | 0;
HEAP8[$tmpcast$i29$byval_copy + 3 >> 0] = HEAP8[$tmpcast$i$i$byval_copy + 3 >> 0] | 0;
$59 = __ZN6KeyOpsIK6SiteIDE12hashFunctionES0_i($tmpcast$i29$byval_copy, $58) | 0;
$60 = HEAP32[$12 >> 2] | 0;
$61 = $60 + ($59 << 3) | 0;
$62 = $60 + ($59 << 3) + 4 | 0;
switch (HEAP16[$62 >> 1] | 0) {
case 0:
{
$64 = __Znwj(12) | 0;
HEAP32[$64 >> 2] = $57;
HEAP32[$64 + 4 >> 2] = $32;
HEAP32[$64 + 8 >> 2] = 0;
HEAP32[$61 >> 2] = $64;
$67 = $0 + 184 | 0;
HEAP32[$67 >> 2] = (HEAP32[$67 >> 2] | 0) + -1;
$$sink$i$i30 = $0 + 188 | 0;
break;
}
case 1:
{
$71 = $0 + 188 | 0;
HEAP32[$71 >> 2] = (HEAP32[$71 >> 2] | 0) + -1;
label = 21;
break;
}
default:
label = 21;
}
if ((label | 0) == 21) {
$74 = HEAP32[$61 >> 2] | 0;
$76 = __Znwj(12) | 0;
$77 = $74 + 8 | 0;
$78 = HEAP32[$77 >> 2] | 0;
HEAP32[$76 >> 2] = $57;
HEAP32[$76 + 4 >> 2] = $32;
HEAP32[$76 + 8 >> 2] = $78;
HEAP32[$77 >> 2] = $76;
$$sink$i$i30 = $0 + 180 | 0;
}
HEAP32[$$sink$i$i30 >> 2] = (HEAP32[$$sink$i$i30 >> 2] | 0) + 1;
HEAP16[$62 >> 1] = (HEAP16[$62 >> 1] | 0) + 1 << 16 >> 16;
$85 = $0 + 196 | 0;
HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + 1;
if (!0) $$0 = $32; else {
__Z7eprintfPKcz(21819, $vararg_buffer1);
__ZNK6SiteID5printEP8_IO_FILE($1, HEAP32[16082] | 0);
__Z5eputcc(10);
$$0 = $32;
}
} else {
$92 = $25 + 40 | 0;
if (Math_fround(HEAPF32[$92 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$25 + 44 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$25 + 48 >> 2]) == Math_fround(0.0)) {
__ZN4Site17setGlobalPositionERK6Vector($25, $3);
if (!0) {
$$0 = $25;
break;
}
__Z7eprintfPKcz(21859, $vararg_buffer3);
__ZNK6SiteID5printEP8_IO_FILE($1, HEAP32[16082] | 0);
__Z7eprintfPKcz(21899, $vararg_buffer5);
__ZNK6Vector5printEP8_IO_FILEi($3, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
$$0 = $25;
break;
}
if (!0) $$0 = $25; else {
__Z7eprintfPKcz(21859, $vararg_buffer7);
__ZNK6SiteID5printEP8_IO_FILE($1, HEAP32[16082] | 0);
__Z5eputsPKc(21929);
__ZNK6Vector5printEP8_IO_FILEi($92, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
$$0 = $25;
}
} while (0);
if (!($4 != Math_fround(0.0))) {
STACKTOP = sp;
return $$0 | 0;
}
HEAPF32[$$0 + 20 >> 2] = $4;
STACKTOP = sp;
return $$0 | 0;
}
function __ZN6Vector12circumCentreERKS_S1_S1_($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$pre2035 = f0, $$pre2531 = f0, $$pre2732 = f0, $$pre34 = f0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $11 = 0, $111 = 0, $116 = 0, $117 = 0, $12 = f0, $14 = f0, $15 = f0, $17 = f0, $18 = f0, $19 = 0, $20 = f0, $22 = f0, $23 = f0, $24 = 0, $25 = f0, $27 = f0, $29 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $4 = 0, $41 = 0, $48 = f0, $49 = f0, $5 = 0, $50 = f0, $52 = f0, $53 = f0, $54 = f0, $55 = 0, $56 = f0, $58 = f0, $59 = f0, $6 = 0, $60 = f0, $61 = 0, $62 = f0, $64 = f0, $65 = 0, $66 = 0, $68 = 0, $7 = f0, $70 = 0, $72 = 0, $77 = 0, $8 = 0, $84 = f0, $85 = f0, $88 = f0, $89 = f0, $9 = f0, $90 = f0, $93 = f0, $94 = f0, $95 = f0, $98 = f0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer8 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 208 | 0;
$vararg_buffer20 = sp + 120 | 0;
$vararg_buffer18 = sp + 112 | 0;
$vararg_buffer10 = sp + 64 | 0;
$vararg_buffer8 = sp + 56 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$4 = sp + 192 | 0;
$5 = sp + 180 | 0;
$6 = sp + 168 | 0;
$7 = Math_fround(HEAPF32[$1 >> 2]);
$8 = $1 + 4 | 0;
$9 = Math_fround(HEAPF32[$8 >> 2]);
$11 = $1 + 8 | 0;
$12 = Math_fround(HEAPF32[$11 >> 2]);
$14 = Math_fround($7 * Math_fround(.5));
$15 = Math_fround(HEAPF32[$2 >> 2]);
$17 = Math_fround($14 + Math_fround($15 * Math_fround(.5)));
HEAPF32[$4 >> 2] = $17;
$18 = Math_fround($9 * Math_fround(.5));
$19 = $2 + 4 | 0;
$20 = Math_fround(HEAPF32[$19 >> 2]);
$22 = Math_fround($18 + Math_fround($20 * Math_fround(.5)));
HEAPF32[$4 + 4 >> 2] = $22;
$23 = Math_fround($12 * Math_fround(.5));
$24 = $2 + 8 | 0;
$25 = Math_fround(HEAPF32[$24 >> 2]);
$27 = Math_fround($23 + Math_fround($25 * Math_fround(.5)));
HEAPF32[$4 + 8 >> 2] = $27;
$29 = (HEAPF32[tempDoublePtr >> 2] = $22, HEAP32[tempDoublePtr >> 2] | 0);
$30 = (HEAPF32[tempDoublePtr >> 2] = $27, HEAP32[tempDoublePtr >> 2] | 0);
do if (!0) {
$116 = 1;
$49 = $15;
$54 = $20;
$60 = $25;
} else {
$32 = (HEAPF32[tempDoublePtr >> 2] = $17, HEAP32[tempDoublePtr >> 2] | 0) & 2147483647;
if ($32 >>> 0 <= 2139095040) {
$34 = $29 & 2147483647;
if ($34 >>> 0 <= 2139095040) {
$36 = $30 & 2147483647;
if (!(($32 | 0) == 2139095040 | $36 >>> 0 > 2139095040)) if (!(($34 | 0) == 2139095040 | ($36 | 0) == 2139095040)) {
$116 = 0;
$49 = $15;
$54 = $20;
$60 = $25;
break;
}
}
}
__Z7eprintfPKcz(11903, $vararg_buffer);
$41 = HEAP32[16082] | 0;
if ($41 | 0) {
HEAP32[$vararg_buffer1 >> 2] = 4;
HEAPF64[$vararg_buffer1 + 8 >> 3] = +$17;
HEAP32[$vararg_buffer1 + 16 >> 2] = 4;
HEAPF64[$vararg_buffer1 + 24 >> 3] = +$22;
HEAP32[$vararg_buffer1 + 32 >> 2] = 4;
HEAPF64[$vararg_buffer1 + 40 >> 3] = +$27;
_fprintf($41, 11888, $vararg_buffer1) | 0;
}
__Z5eputcc(10);
$$pre34 = Math_fround(HEAPF32[$2 >> 2]);
$$pre2035 = Math_fround(HEAPF32[$19 >> 2]);
$116 = 0 == 0;
$49 = $$pre34;
$54 = $$pre2035;
$60 = Math_fround(HEAPF32[$24 >> 2]);
} while (0);
$48 = Math_fround($49 * Math_fround(.5));
$50 = Math_fround(HEAPF32[$3 >> 2]);
$52 = Math_fround($48 + Math_fround($50 * Math_fround(.5)));
HEAPF32[$5 >> 2] = $52;
$53 = Math_fround($54 * Math_fround(.5));
$55 = $3 + 4 | 0;
$56 = Math_fround(HEAPF32[$55 >> 2]);
$58 = Math_fround($53 + Math_fround($56 * Math_fround(.5)));
HEAPF32[$5 + 4 >> 2] = $58;
$59 = Math_fround($60 * Math_fround(.5));
$61 = $3 + 8 | 0;
$62 = Math_fround(HEAPF32[$61 >> 2]);
$64 = Math_fround($59 + Math_fround($62 * Math_fround(.5)));
HEAPF32[$5 + 8 >> 2] = $64;
$65 = (HEAPF32[tempDoublePtr >> 2] = $58, HEAP32[tempDoublePtr >> 2] | 0);
$66 = (HEAPF32[tempDoublePtr >> 2] = $64, HEAP32[tempDoublePtr >> 2] | 0);
do if ($116) {
$117 = 1;
$85 = $50;
$90 = $56;
$95 = $62;
} else {
$68 = (HEAPF32[tempDoublePtr >> 2] = $52, HEAP32[tempDoublePtr >> 2] | 0) & 2147483647;
if ($68 >>> 0 <= 2139095040) {
$70 = $65 & 2147483647;
if ($70 >>> 0 <= 2139095040) {
$72 = $66 & 2147483647;
if (!(($68 | 0) == 2139095040 | $72 >>> 0 > 2139095040)) if (!(($70 | 0) == 2139095040 | ($72 | 0) == 2139095040)) {
$117 = 0;
$85 = $50;
$90 = $56;
$95 = $62;
break;
}
}
}
__Z7eprintfPKcz(11903, $vararg_buffer8);
$77 = HEAP32[16082] | 0;
if ($77 | 0) {
HEAP32[$vararg_buffer10 >> 2] = 4;
HEAPF64[$vararg_buffer10 + 8 >> 3] = +$52;
HEAP32[$vararg_buffer10 + 16 >> 2] = 4;
HEAPF64[$vararg_buffer10 + 24 >> 3] = +$58;
HEAP32[$vararg_buffer10 + 32 >> 2] = 4;
HEAPF64[$vararg_buffer10 + 40 >> 3] = +$64;
_fprintf($77, 11888, $vararg_buffer10) | 0;
}
__Z5eputcc(10);
$$pre2531 = Math_fround(HEAPF32[$3 >> 2]);
$$pre2732 = Math_fround(HEAPF32[$55 >> 2]);
$117 = 0 == 0;
$85 = $$pre2531;
$90 = $$pre2732;
$95 = Math_fround(HEAPF32[$61 >> 2]);
} while (0);
$84 = Math_fround($85 * Math_fround(.5));
$88 = Math_fround($84 + Math_fround(Math_fround(HEAPF32[$1 >> 2]) * Math_fround(.5)));
HEAPF32[$6 >> 2] = $88;
$89 = Math_fround($90 * Math_fround(.5));
$93 = Math_fround($89 + Math_fround(Math_fround(HEAPF32[$8 >> 2]) * Math_fround(.5)));
HEAPF32[$6 + 4 >> 2] = $93;
$94 = Math_fround($95 * Math_fround(.5));
$98 = Math_fround($94 + Math_fround(Math_fround(HEAPF32[$11 >> 2]) * Math_fround(.5)));
HEAPF32[$6 + 8 >> 2] = $98;
$99 = (HEAPF32[tempDoublePtr >> 2] = $93, HEAP32[tempDoublePtr >> 2] | 0);
$100 = (HEAPF32[tempDoublePtr >> 2] = $98, HEAP32[tempDoublePtr >> 2] | 0);
if ($117) {
__ZN6Vector14altitudeCentreERKS_S1_S1_($0, $5, $6, $4);
__ZNK6Vector16checkValidVectorEv($0);
STACKTOP = sp;
return;
}
$102 = (HEAPF32[tempDoublePtr >> 2] = $88, HEAP32[tempDoublePtr >> 2] | 0) & 2147483647;
if ($102 >>> 0 <= 2139095040) {
$104 = $99 & 2147483647;
if ($104 >>> 0 <= 2139095040) {
$106 = $100 & 2147483647;
if (!(($102 | 0) == 2139095040 | $106 >>> 0 > 2139095040)) if (!(($104 | 0) == 2139095040 | ($106 | 0) == 2139095040)) {
__ZN6Vector14altitudeCentreERKS_S1_S1_($0, $5, $6, $4);
__ZNK6Vector16checkValidVectorEv($0);
STACKTOP = sp;
return;
}
}
}
__Z7eprintfPKcz(11903, $vararg_buffer18);
$111 = HEAP32[16082] | 0;
if ($111 | 0) {
HEAP32[$vararg_buffer20 >> 2] = 4;
HEAPF64[$vararg_buffer20 + 8 >> 3] = +$88;
HEAP32[$vararg_buffer20 + 16 >> 2] = 4;
HEAPF64[$vararg_buffer20 + 24 >> 3] = +$93;
HEAP32[$vararg_buffer20 + 32 >> 2] = 4;
HEAPF64[$vararg_buffer20 + 40 >> 3] = +$98;
_fprintf($111, 11888, $vararg_buffer20) | 0;
}
__Z5eputcc(10);
__ZN6Vector14altitudeCentreERKS_S1_S1_($0, $5, $6, $4);
__ZNK6Vector16checkValidVectorEv($0);
STACKTOP = sp;
return;
}
function _lookup($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0$lcssa$i = 0, $$0$lcssa$i155 = 0, $$0$lcssa$i161 = 0, $$0146189 = 0, $$0182 = 0, $$034$i = 0, $$034$i153 = 0, $$034$i159 = 0, $$05$i = 0, $$05$i152 = 0, $$05$i158 = 0, $$057$i = 0, $$08$i = 0, $$1139$be = 0, $$1139$lcssa = 0, $$1139190 = 0, $$1147 = 0, $$2140185 = 0, $$2148181 = 0, $$3141$be = 0, $$3141180 = 0, $$4 = 0, $$4150179 = 0, $$7 = 0, $$lcssa174 = 0, $$pre$phi203Z2D = 0, $$pre$phiZ2D = 0, $100 = 0, $101 = 0, $102 = 0, $107 = 0, $108 = 0, $11 = 0, $111 = 0, $112 = 0, $119 = 0, $121 = 0, $124 = 0, $129 = 0, $13 = 0, $134 = 0, $145 = 0, $147 = 0, $155 = 0, $160 = 0, $165 = 0, $171 = 0, $18 = 0, $19 = 0, $25 = 0, $3 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $49 = 0, $63 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $89 = 0, $91 = 0, $93 = 0, $94 = 0, $95 = 0, $98 = 0;
$3 = $0 + 8 | 0;
$4 = HEAP32[$3 >> 2] | 0;
do if (!$4) {
if (!$2) {
$$4 = 0;
return $$4 | 0;
}
HEAP8[$0 + 4 >> 0] = 6;
HEAP32[$3 >> 2] = 64;
$8 = $0 + 16 | 0;
$11 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$8 >> 2] >> 2] & 63](256) | 0;
HEAP32[$0 >> 2] = $11;
if (!$11) {
HEAP32[$3 >> 2] = 0;
$$4 = 0;
return $$4 | 0;
}
_memset($11 | 0, 0, 256) | 0;
$13 = HEAP8[$1 >> 0] | 0;
if (!($13 << 24 >> 24)) $$0$lcssa$i = 0; else {
$$034$i = $1;
$$05$i = 0;
$18 = $13;
while (1) {
$$034$i = $$034$i + 1 | 0;
$19 = $$05$i * 1000003 ^ $18 & 255;
$18 = HEAP8[$$034$i >> 0] | 0;
if (!($18 << 24 >> 24)) {
$$0$lcssa$i = $19;
break;
} else $$05$i = $19;
}
}
$$7 = (HEAP32[$3 >> 2] | 0) + -1 & $$0$lcssa$i;
$$pre$phi203Z2D = $8;
$$pre$phiZ2D = $0;
} else {
$25 = HEAP8[$1 >> 0] | 0;
if (!($25 << 24 >> 24)) $$0$lcssa$i155 = 0; else {
$$034$i153 = $1;
$$05$i152 = 0;
$30 = $25;
while (1) {
$$034$i153 = $$034$i153 + 1 | 0;
$31 = $$05$i152 * 1000003 ^ $30 & 255;
$30 = HEAP8[$$034$i153 >> 0] | 0;
if (!($30 << 24 >> 24)) {
$$0$lcssa$i155 = $31;
break;
} else $$05$i152 = $31;
}
}
$34 = $4 + -1 | 0;
$35 = $34 & $$0$lcssa$i155;
$36 = HEAP32[$0 >> 2] | 0;
$38 = HEAP32[$36 + ($35 << 2) >> 2] | 0;
L19 : do if (!$38) $$1139$lcssa = $35; else {
$41 = $$0$lcssa$i155 & 0 - $4;
$42 = $0 + 4 | 0;
$43 = $34 >>> 2;
$$0146189 = 0;
$$1139190 = $35;
$45 = $38;
L21 : while (1) {
$44 = HEAP32[$45 >> 2] | 0;
if ($25 << 24 >> 24 == (HEAP8[$44 >> 0] | 0)) {
$$057$i = $1;
$$08$i = $44;
$49 = $25;
do {
if (!($49 << 24 >> 24)) {
$$4 = $45;
break L21;
}
$$057$i = $$057$i + 1 | 0;
$$08$i = $$08$i + 1 | 0;
$49 = HEAP8[$$057$i >> 0] | 0;
} while ($49 << 24 >> 24 == (HEAP8[$$08$i >> 0] | 0));
}
if (!($$0146189 << 24 >> 24)) $$1147 = ($41 >>> ((HEAPU8[$42 >> 0] | 0) + -1 | 0) & $43 | 1) & 255; else $$1147 = $$0146189;
$63 = $$1147 & 255;
$$1139$be = $$1139190 - $63 + ($$1139190 >>> 0 < $63 >>> 0 ? $4 : 0) | 0;
$45 = HEAP32[$36 + ($$1139$be << 2) >> 2] | 0;
if (!$45) {
$$1139$lcssa = $$1139$be;
break L19;
} else {
$$0146189 = $$1147;
$$1139190 = $$1139$be;
}
}
return $$4 | 0;
} while (0);
if (!$2) {
$$4 = 0;
return $$4 | 0;
}
$73 = $0 + 4 | 0;
$74 = HEAP8[$73 >> 0] | 0;
$75 = $74 & 255;
if (!((HEAP32[$0 + 12 >> 2] | 0) >>> ($75 + -1 | 0))) {
$$7 = $$1139$lcssa;
$$pre$phi203Z2D = $0 + 16 | 0;
$$pre$phiZ2D = $0;
break;
}
$80 = $75 + 1 & 255;
$82 = $74 + 1 & 255;
$83 = 1 << $82;
$84 = $83 + -1 | 0;
$85 = $83 << 2;
$86 = $0 + 16 | 0;
$89 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$86 >> 2] >> 2] & 63]($85) | 0;
if (!$89) {
$$4 = 0;
return $$4 | 0;
}
_memset($89 | 0, 0, $85 | 0) | 0;
$91 = HEAP32[$3 >> 2] | 0;
if ($91 | 0) {
$93 = 0 - $83 | 0;
$94 = $82 + -1 | 0;
$95 = $84 >>> 2;
$$2140185 = 0;
$171 = $91;
while (1) {
$98 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($$2140185 << 2) >> 2] | 0;
$100 = $98;
if (!$98) $129 = $171; else {
$101 = HEAP32[$98 >> 2] | 0;
$102 = HEAP8[$101 >> 0] | 0;
if (!($102 << 24 >> 24)) $$0$lcssa$i161 = 0; else {
$$034$i159 = $101;
$$05$i158 = 0;
$107 = $102;
while (1) {
$$034$i159 = $$034$i159 + 1 | 0;
$108 = $$05$i158 * 1000003 ^ $107 & 255;
$107 = HEAP8[$$034$i159 >> 0] | 0;
if (!($107 << 24 >> 24)) {
$$0$lcssa$i161 = $108;
break;
} else $$05$i158 = $108;
}
}
$111 = $$0$lcssa$i161 & $84;
$112 = $89 + ($111 << 2) | 0;
if (!(HEAP32[$112 >> 2] | 0)) $$lcssa174 = $112; else {
$119 = (($$0$lcssa$i161 & $93) >>> $94 & $95 | 1) & 255;
$$0182 = $111;
$$2148181 = 0;
do {
$$2148181 = $$2148181 << 24 >> 24 == 0 ? $119 : $$2148181;
$121 = $$2148181 & 255;
$$0182 = $$0182 + ($$0182 >>> 0 < $121 >>> 0 ? $83 : 0) - $121 | 0;
$124 = $89 + ($$0182 << 2) | 0;
} while ((HEAP32[$124 >> 2] | 0) != 0);
$$lcssa174 = $124;
}
HEAP32[$$lcssa174 >> 2] = $100;
$129 = HEAP32[$3 >> 2] | 0;
}
$$2140185 = $$2140185 + 1 | 0;
if ($$2140185 >>> 0 >= $129 >>> 0) break; else $171 = $129;
}
}
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$86 >> 2] | 0) + 8 >> 2] & 255](HEAP32[$0 >> 2] | 0);
HEAP32[$0 >> 2] = $89;
HEAP8[$73 >> 0] = $80;
HEAP32[$3 >> 2] = $83;
$134 = $84 & $$0$lcssa$i155;
if (!(HEAP32[$89 + ($134 << 2) >> 2] | 0)) {
$$7 = $134;
$$pre$phi203Z2D = $86;
$$pre$phiZ2D = $0;
} else {
$145 = (($$0$lcssa$i155 & 0 - $83) >>> ($82 + -1 | 0) & $84 >>> 2 | 1) & 255;
$$3141180 = $134;
$$4150179 = 0;
while (1) {
$$4150179 = $$4150179 << 24 >> 24 == 0 ? $145 : $$4150179;
$147 = $$4150179 & 255;
$$3141$be = $$3141180 + ($$3141180 >>> 0 < $147 >>> 0 ? $83 : 0) - $147 | 0;
if (!(HEAP32[$89 + ($$3141$be << 2) >> 2] | 0)) {
$$7 = $$3141$be;
$$pre$phi203Z2D = $86;
$$pre$phiZ2D = $0;
break;
} else $$3141180 = $$3141$be;
}
}
} while (0);
$155 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$$pre$phi203Z2D >> 2] >> 2] & 63]($2) | 0;
HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + ($$7 << 2) >> 2] = $155;
$160 = HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + ($$7 << 2) >> 2] | 0;
if (!$160) {
$$4 = 0;
return $$4 | 0;
}
_memset($160 | 0, 0, $2 | 0) | 0;
HEAP32[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + ($$7 << 2) >> 2] >> 2] = $1;
$165 = $0 + 12 | 0;
HEAP32[$165 >> 2] = (HEAP32[$165 >> 2] | 0) + 1;
$$4 = HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + ($$7 << 2) >> 2] | 0;
return $$4 | 0;
}
function __ZN16CompoundMovement6DeNestEv($0) {
$0 = $0 | 0;
var $$014$i = 0, $$014$i49 = 0, $$03856 = 0, $$057 = 0, $$pre$phi61Z2D = 0, $$pre$phi63Z2D = 0, $$pre$phiZ2D = 0, $1 = 0, $103 = 0, $104 = 0, $106 = 0, $107 = 0, $11 = 0, $110 = 0, $113 = 0, $115 = 0, $119 = 0, $121 = 0, $124 = 0, $13 = 0, $131 = 0, $133 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $5 = 0, $54 = 0, $6 = 0, $60 = 0, $62 = 0, $69 = 0, $71 = 0, $73 = 0, $74 = 0, $76 = 0, $81 = 0, $82 = 0, $85 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$vararg_buffer3 = sp + 8 | 0;
$vararg_buffer = sp;
$1 = sp + 24 | 0;
$2 = $0 + 528 | 0;
$3 = $0 + 540 | 0;
$4 = HEAP32[$3 >> 2] | 0;
$5 = $1 + 4 | 0;
HEAP32[$5 >> 2] = 10;
$6 = $1 + 12 | 0;
HEAP32[$6 >> 2] = 0;
L1 : do if (!$4) {
HEAP32[$1 >> 2] = 0;
HEAP32[$1 + 8 >> 2] = 0;
label = 13;
} else {
HEAP32[$1 + 8 >> 2] = $4;
$11 = _malloc($4 << 2) | 0;
HEAP32[$1 >> 2] = $11;
if (!$11) {
HEAP32[$vararg_buffer >> 2] = $4;
__Z7eprintfPKcz(57303, $vararg_buffer);
$13 = ___cxa_allocate_exception(4) | 0;
HEAP32[$13 >> 2] = 1;
___cxa_throw($13 | 0, 32, 0);
}
if (($4 | 0) > 0) {
HEAP32[$11 >> 2] = 0;
if (($4 | 0) != 1) {
HEAP32[$11 + 4 >> 2] = 0;
if (($4 | 0) != 2) {
HEAP32[$11 + 8 >> 2] = 0;
if (($4 | 0) != 3) {
$20 = 3;
do {
HEAP32[(HEAP32[$1 >> 2] | 0) + ($20 << 2) >> 2] = 0;
$20 = $20 + 1 | 0;
} while (($20 | 0) != ($4 | 0));
}
if (($4 | 0) <= 0) {
label = 13;
break;
}
}
}
$18 = $1 + 8 | 0;
$$057 = 0;
while (1) {
$27 = (HEAP32[$3 >> 2] | 0) + (HEAP32[$6 >> 2] | 0) | 0;
$28 = HEAP32[$18 >> 2] | 0;
if (($28 | 0) < ($27 | 0)) {
$30 = HEAP32[$5 >> 2] | 0;
if (($30 | 0) > ($27 | 0)) $35 = $30; else $35 = $27 + 1 + (($27 | 0) / 2 | 0) | 0;
__THREW__ = 0;
invoke_vii(167, $1 | 0, $35 | 0);
$36 = __THREW__;
__THREW__ = 0;
if ($36 & 1) {
$$pre$phiZ2D = $1;
break;
}
$39 = HEAP32[$18 >> 2] | 0;
} else $39 = $28;
if (($27 | 0) <= ($39 | 0)) {
if ((HEAP32[$3 >> 2] | 0) > 0) {
$$014$i = 0;
do {
HEAP32[(HEAP32[$1 >> 2] | 0) + ((HEAP32[$6 >> 2] | 0) + $$014$i << 2) >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + ($$014$i << 2) >> 2];
$$014$i = $$014$i + 1 | 0;
} while (($$014$i | 0) < (HEAP32[$3 >> 2] | 0));
}
HEAP32[$6 >> 2] = $27;
}
$$057 = $$057 + 1 | 0;
if (($$057 | 0) >= ($4 | 0)) {
label = 12;
break;
}
}
L32 : do if ((label | 0) == 12) {
HEAP32[$3 >> 2] = 0;
$22 = $0 + 4 | 0;
$23 = $0 + 536 | 0;
$24 = $0 + 532 | 0;
$$03856 = 0;
while (1) {
if ((HEAP32[$6 >> 2] | 0) > ($$03856 | 0)) {
$60 = HEAP32[(HEAP32[$1 >> 2] | 0) + ($$03856 << 2) >> 2] | 0;
$110 = $60;
$62 = $60;
} else {
$110 = 0;
$62 = 0;
}
if ((HEAP32[$62 + 4 >> 2] | 0) == (HEAP32[$22 >> 2] | 0)) if (Math_fround(HEAPF32[$62 + 52 >> 2]) == Math_fround(0.0)) {
$69 = $62 + 528 | 0;
$71 = $62 + 540 | 0;
$73 = (HEAP32[$71 >> 2] | 0) + (HEAP32[$3 >> 2] | 0) | 0;
$74 = HEAP32[$23 >> 2] | 0;
if (($74 | 0) < ($73 | 0)) {
$76 = HEAP32[$24 >> 2] | 0;
if (($76 | 0) > ($73 | 0)) $81 = $76; else $81 = $73 + 1 + (($73 | 0) / 2 | 0) | 0;
__THREW__ = 0;
invoke_vii(167, $2 | 0, $81 | 0);
$82 = __THREW__;
__THREW__ = 0;
if ($82 & 1) {
$$pre$phiZ2D = $1;
break L32;
}
$85 = HEAP32[$23 >> 2] | 0;
} else $85 = $74;
if (($73 | 0) <= ($85 | 0)) {
if ((HEAP32[$71 >> 2] | 0) > 0) {
$$014$i49 = 0;
do {
HEAP32[(HEAP32[$2 >> 2] | 0) + ((HEAP32[$3 >> 2] | 0) + $$014$i49 << 2) >> 2] = HEAP32[(HEAP32[$69 >> 2] | 0) + ($$014$i49 << 2) >> 2];
$$014$i49 = $$014$i49 + 1 | 0;
} while (($$014$i49 | 0) < (HEAP32[$71 >> 2] | 0));
}
HEAP32[$3 >> 2] = $73;
}
if (0) {
__THREW__ = 0;
invoke_i(1) | 0;
$99 = __THREW__;
__THREW__ = 0;
if ($99 & 1) {
$$pre$phiZ2D = $1;
break L32;
}
__THREW__ = 0;
$103 = invoke_iii(31, HEAP32[16658] | 0, HEAP32[$22 >> 2] | 0) | 0;
$104 = __THREW__;
__THREW__ = 0;
if ($104 & 1) {
$$pre$phiZ2D = $1;
break L32;
}
$106 = HEAP32[$71 >> 2] | 0;
__THREW__ = 0;
HEAP32[$vararg_buffer3 >> 2] = $103;
HEAP32[$vararg_buffer3 + 4 >> 2] = $106;
HEAP32[$vararg_buffer3 + 8 >> 2] = $$03856;
invoke_vii(115, 47479, $vararg_buffer3 | 0);
$107 = __THREW__;
__THREW__ = 0;
if ($107 & 1) {
$$pre$phiZ2D = $1;
break L32;
}
}
HEAP32[$71 >> 2] = 0;
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$110 >> 2] | 0) + 4 >> 2] | 0, $62 | 0);
$113 = __THREW__;
__THREW__ = 0;
if ($113 & 1) {
$$pre$phiZ2D = $1;
break L32;
}
} else label = 46; else label = 46;
if ((label | 0) == 46) {
label = 0;
$115 = HEAP32[$3 >> 2] | 0;
if (($115 | 0) >= 0) {
if ((HEAP32[$23 >> 2] | 0) > ($115 | 0)) {
$$pre$phi63Z2D = $115 + 1 | 0;
label = 51;
} else {
$119 = HEAP32[$24 >> 2] | 0;
$121 = $115 + 1 | 0;
__THREW__ = 0;
invoke_vii(167, $2 | 0, (($119 | 0) > ($115 | 0) ? $119 : $121 + ($115 >>> 1) | 0) | 0);
$124 = __THREW__;
__THREW__ = 0;
if ($124 & 1) {
$$pre$phiZ2D = $1;
break L32;
}
if ((HEAP32[$3 >> 2] | 0) <= ($115 | 0)) {
$$pre$phi63Z2D = $121;
label = 51;
}
}
if ((label | 0) == 51) {
label = 0;
HEAP32[$3 >> 2] = $$pre$phi63Z2D;
}
HEAP32[(HEAP32[$2 >> 2] | 0) + ($115 << 2) >> 2] = $110;
}
}
$$03856 = $$03856 + 1 | 0;
if (($$03856 | 0) >= ($4 | 0)) {
$$pre$phi61Z2D = $1;
break L1;
}
}
} while (0);
$131 = ___cxa_find_matching_catch_2() | 0;
$133 = HEAP32[$$pre$phiZ2D >> 2] | 0;
if (!$133) ___resumeException($131 | 0);
_free($133);
HEAP32[$$pre$phiZ2D >> 2] = 0;
___resumeException($131 | 0);
} else label = 13;
} while (0);
if ((label | 0) == 13) {
HEAP32[$3 >> 2] = 0;
$$pre$phi61Z2D = $1;
}
$54 = HEAP32[$$pre$phi61Z2D >> 2] | 0;
if (!$54) {
STACKTOP = sp;
return;
}
_free($54);
HEAP32[$$pre$phi61Z2D >> 2] = 0;
STACKTOP = sp;
return;
}
function __ZN7ASDdata9readJointEP7XMLCellsf($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = Math_fround($3);
var $$0 = 0, $$05761 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $104 = 0, $110 = 0, $111 = 0, $13 = 0, $14 = 0, $19 = 0, $22 = f0, $24 = f0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $33 = f0, $35 = f0, $37 = f0, $39 = f0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $6 = 0, $60 = 0, $64 = 0, $7 = 0, $70 = 0, $75 = 0, $79 = 0, $8 = 0, $83 = 0, $85 = 0, $90 = 0, $94 = 0, $98 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer17 = 0, $vararg_buffer23 = 0, $vararg_buffer28 = 0, $vararg_buffer33 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 176 | 0;
$vararg_buffer33 = sp + 128 | 0;
$vararg_buffer28 = sp + 112 | 0;
$vararg_buffer23 = sp + 96 | 0;
$vararg_buffer17 = sp + 80 | 0;
$vararg_buffer12 = sp + 64 | 0;
$vararg_buffer7 = sp + 48 | 0;
$vararg_buffer4 = sp + 40 | 0;
$vararg_buffer1 = sp + 32 | 0;
$vararg_buffer = sp + 24 | 0;
$4 = sp + 16 | 0;
$5 = sp + 8 | 0;
$6 = sp;
$7 = sp + 152 | 0;
$8 = sp + 136 | 0;
if (!$1) {
STACKTOP = sp;
return;
}
$10 = __ZN7XMLCell13attrib_stringEPKc($1, 16607) | 0;
if (!$10) $$0 = __ZN7XMLCell13attrib_stringEPKc($1, 53439) | 0; else $$0 = $10;
$13 = __ZN7XMLCell13attrib_stringEPKc($1, 16614) | 0;
$14 = __ZN7XMLCell13attrib_stringEPKc($1, 16623) | 0;
if (!$$0) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer >> 2] = $2 << 16 >> 16;
__Z7eprintfPKcz(16632, $vararg_buffer);
STACKTOP = sp;
return;
}
if (!$13) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer1 >> 2] = $$0;
__Z7eprintfPKcz(16675, $vararg_buffer1);
STACKTOP = sp;
return;
}
if (!$14) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer4 >> 2] = $$0;
__Z7eprintfPKcz(16708, $vararg_buffer4);
STACKTOP = sp;
return;
}
__ZN6VectorC2Ev($7);
HEAPF64[$4 >> 3] = 0.0;
HEAPF64[$5 >> 3] = 0.0;
HEAPF64[$6 >> 3] = 0.0;
HEAP32[$vararg_buffer7 >> 2] = $4;
HEAP32[$vararg_buffer7 + 4 >> 2] = $5;
HEAP32[$vararg_buffer7 + 8 >> 2] = $6;
$19 = _sscanf($13, 54499, $vararg_buffer7) | 0;
if (($19 | 0) != 3) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer12 >> 2] = 16316;
HEAP32[$vararg_buffer12 + 4 >> 2] = $$0;
HEAP32[$vararg_buffer12 + 8 >> 2] = $19;
__Z7eprintfPKcz(16741, $vararg_buffer12);
}
$22 = Math_fround(+HEAPF64[$4 >> 3]);
$24 = Math_fround(+HEAPF64[$5 >> 3]);
__ZN6Vector7setFromEfff($7, $22, $24, Math_fround(+HEAPF64[$6 >> 3]));
__ZN6Vector8setScaleEf($7, $3);
HEAPF32[$8 >> 2] = Math_fround(0.0);
$27 = $8 + 4 | 0;
HEAPF32[$27 >> 2] = Math_fround(0.0);
$28 = $8 + 8 | 0;
HEAPF32[$28 >> 2] = Math_fround(0.0);
$29 = $8 + 12 | 0;
HEAPF32[$29 >> 2] = Math_fround(1.0);
HEAPF64[$vararg_buffer7 >> 3] = 0.0;
HEAPF64[$4 >> 3] = 0.0;
HEAPF64[$5 >> 3] = 0.0;
HEAPF64[$6 >> 3] = 0.0;
HEAP32[$vararg_buffer17 >> 2] = $vararg_buffer7;
HEAP32[$vararg_buffer17 + 4 >> 2] = $4;
HEAP32[$vararg_buffer17 + 8 >> 2] = $5;
HEAP32[$vararg_buffer17 + 12 >> 2] = $6;
$30 = _sscanf($14, 50382, $vararg_buffer17) | 0;
if (($30 | 0) != 4) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer23 >> 2] = 16316;
HEAP32[$vararg_buffer23 + 4 >> 2] = $$0;
HEAP32[$vararg_buffer23 + 8 >> 2] = $30;
__Z7eprintfPKcz(16814, $vararg_buffer23);
}
$33 = Math_fround(+HEAPF64[$vararg_buffer7 >> 3]);
$35 = Math_fround(+HEAPF64[$4 >> 3]);
$37 = Math_fround(+HEAPF64[$5 >> 3]);
$39 = Math_fround(+HEAPF64[$6 >> 3]);
HEAPF32[$8 >> 2] = $33;
HEAPF32[$27 >> 2] = $35;
HEAPF32[$28 >> 2] = $37;
HEAPF32[$29 >> 2] = $39;
__ZN10Quaternion9normaliseEv($8);
$40 = $0 + 12 | 0;
$42 = __ZNK28InvertibleDynamicStringArray14indexFromValueEPKc(HEAP32[$40 >> 2] | 0, $$0) | 0;
$43 = HEAP32[$40 >> 2] | 0;
if (($42 | 0) != (HEAP32[$43 + 12 >> 2] | 0)) {
__Z7LogTimev() | 0;
$48 = __ZNK28InvertibleDynamicStringArray6lengthEv(HEAP32[$40 >> 2] | 0) | 0;
HEAP32[$vararg_buffer28 >> 2] = $$0;
HEAP32[$vararg_buffer28 + 4 >> 2] = $42;
HEAP32[$vararg_buffer28 + 8 >> 2] = $48;
__Z7eprintfPKcz(16887, $vararg_buffer28);
$49 = ___cxa_allocate_exception(4) | 0;
HEAP32[$49 >> 2] = 15;
___cxa_throw($49 | 0, 232, 0);
}
__ZN28InvertibleDynamicStringArray10addElementEPKc($43, $$0) | 0;
$51 = __ZNK28InvertibleDynamicStringArray6lengthEv(HEAP32[$40 >> 2] | 0) | 0;
$52 = $51 + -1 | 0;
$54 = HEAP32[$0 + 16 >> 2] | 0;
if (($51 | 0) >= 1) {
if ((HEAP32[$54 + 8 >> 2] | 0) < ($51 | 0)) {
$60 = HEAP32[$54 + 4 >> 2] | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($54, ($60 | 0) >= ($51 | 0) ? $60 : ($52 >>> 1) + $51 | 0);
}
$64 = $54 + 12 | 0;
if ((HEAP32[$64 >> 2] | 0) < ($51 | 0)) HEAP32[$64 >> 2] = $51;
HEAP16[(HEAP32[$54 >> 2] | 0) + ($52 << 1) >> 1] = $2;
$70 = HEAP32[$0 + 20 >> 2] | 0;
if ((HEAP32[$70 + 8 >> 2] | 0) < ($51 | 0)) {
$75 = HEAP32[$70 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($70, ($75 | 0) >= ($51 | 0) ? $75 : ($52 >>> 1) + $51 | 0);
}
$79 = $70 + 12 | 0;
if ((HEAP32[$79 >> 2] | 0) < ($51 | 0)) HEAP32[$79 >> 2] = $51;
$83 = (HEAP32[$70 >> 2] | 0) + ($52 * 12 | 0) | 0;
HEAP32[$83 >> 2] = HEAP32[$7 >> 2];
HEAP32[$83 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
HEAP32[$83 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
$85 = HEAP32[$0 + 24 >> 2] | 0;
if ((HEAP32[$85 + 8 >> 2] | 0) < ($51 | 0)) {
$90 = HEAP32[$85 + 4 >> 2] | 0;
__ZN13DynamicArray1I10QuaternionE6resizeEi($85, ($90 | 0) >= ($51 | 0) ? $90 : ($52 >>> 1) + $51 | 0);
}
$94 = $85 + 12 | 0;
if ((HEAP32[$94 >> 2] | 0) < ($51 | 0)) HEAP32[$94 >> 2] = $51;
$98 = (HEAP32[$85 >> 2] | 0) + ($52 << 4) | 0;
HEAP32[$98 >> 2] = HEAP32[$8 >> 2];
HEAP32[$98 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
HEAP32[$98 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
HEAP32[$98 + 12 >> 2] = HEAP32[$8 + 12 >> 2];
}
$100 = HEAP32[$1 + 8 >> 2] | 0;
$101 = $100 + 12 | 0;
$102 = HEAP32[$101 >> 2] | 0;
if (($102 | 0) > 0) {
$104 = $52 & 65535;
$$05761 = 0;
do {
if ((HEAP32[$101 >> 2] | 0) > ($$05761 | 0)) $111 = HEAP32[(HEAP32[$100 >> 2] | 0) + ($$05761 << 2) >> 2] | 0; else $111 = 0;
$110 = HEAP32[$111 >> 2] | 0;
do if (!(_strcmp($110, 16316) | 0)) __ZN7ASDdata9readJointEP7XMLCellsf($0, $111, $104, $3); else if (!(_strcmp($110, 16964) | 0)) {
__ZN7ASDdata11readFeatureEP7XMLCellsf($0, $111, $104, $3);
break;
} else {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer33 >> 2] = HEAP32[$111 >> 2];
HEAP32[$vararg_buffer33 + 4 >> 2] = $$0;
__Z7eprintfPKcz(16972, $vararg_buffer33);
break;
} while (0);
$$05761 = $$05761 + 1 | 0;
} while (($$05761 | 0) != ($102 | 0));
}
STACKTOP = sp;
return;
}
function __ZN16DirectedMovement25setAvatarDependentValues1ER15OneHDirMoveSpecR6VectorRK12AvatarTimingb($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0$i$i = 0, $$017$mux$i$i = 0, $$018$mux$i$i = 0, $$2$i$i = 0, $$220$i$i = 0, $10 = 0, $101 = 0, $105 = 0, $11 = 0, $110 = 0, $111 = f0, $113 = f0, $119 = 0, $122 = f0, $123 = 0, $125 = f0, $129 = f0, $13 = 0, $131 = 0, $140 = f0, $142 = f0, $15 = 0, $17 = 0, $19 = 0, $21 = f0, $23 = f0, $25 = f0, $26 = 0, $29 = 0, $31 = 0, $32 = 0, $37 = f0, $38 = f0, $39 = f0, $5 = 0, $52 = 0, $54 = 0, $57 = 0, $6 = 0, $64 = 0, $7 = 0, $76 = 0, $78 = f0, $8 = 0, $82 = f0, $84 = 0, $85 = f0, $89 = f0, $9 = 0, $90 = 0, $92 = f0, $93 = 0, $98 = f0, $99 = 0, $or$cond = 0, $tmpcast$i7$i$byval_copy = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 96 | 0;
$tmpcast$i7$i$byval_copy = sp + 68 | 0;
$5 = sp + 56 | 0;
$6 = sp + 80 | 0;
$7 = sp + 36 | 0;
$8 = sp + 24 | 0;
$9 = sp;
$10 = sp + 48 | 0;
$11 = sp + 16 | 0;
$13 = HEAP32[$0 + 528 >> 2] | 0;
$15 = HEAP32[$0 + 532 >> 2] | 0;
$17 = HEAP32[$0 + 536 >> 2] | 0;
$19 = HEAP32[$0 + 540 >> 2] | 0;
$21 = Math_fround(HEAPF32[$0 + 544 >> 2]);
$23 = Math_fround(HEAPF32[$0 + 548 >> 2]);
$25 = Math_fround(HEAPF32[$0 + 552 >> 2]);
$26 = $4 ? HEAP16[36082] | 0 : HEAP16[36081] | 0;
HEAP32[$7 >> 2] = $13;
HEAP32[$7 + 4 >> 2] = $15;
HEAP32[$7 + 8 >> 2] = $17;
HEAP16[$6 >> 1] = $26;
HEAP8[$tmpcast$i7$i$byval_copy >> 0] = HEAP8[$6 >> 0] | 0;
HEAP8[$tmpcast$i7$i$byval_copy + 1 >> 0] = HEAP8[$6 + 1 >> 0] | 0;
__ZNK10Direction310makeMirrorE9Mirroring($5, $7, $tmpcast$i7$i$byval_copy);
__ZN5SiGML19convertDirectionVecER6Vector10Direction3($2, $5);
$29 = 64904 + ($19 << 2) | 0;
__ZN6Vector8setScaleEf($2, Math_fround(HEAPF32[$29 >> 2]));
$31 = $21 == Math_fround(0.0);
$32 = $23 == Math_fround(0.0);
$or$cond = $31 & $32;
if ($25 != Math_fround(0.0) | $or$cond ^ 1) {
__ZN6VectorC2Ev($8);
HEAP32[$9 >> 2] = $13;
HEAP32[$9 + 4 >> 2] = $15;
HEAP32[$9 + 8 >> 2] = $17;
HEAP16[$6 >> 1] = $26;
HEAP8[$tmpcast$i7$i$byval_copy >> 0] = HEAP8[$6 >> 0] | 0;
HEAP8[$tmpcast$i7$i$byval_copy + 1 >> 0] = HEAP8[$6 + 1 >> 0] | 0;
__ZNK10Direction310makeMirrorE9Mirroring($5, $9, $tmpcast$i7$i$byval_copy);
__ZN5SiGML19convertDirectionVecER6Vector10Direction3($8, $5);
__ZN6Vector8setScaleEf($8, Math_fround(HEAPF32[$29 >> 2]));
__ZN6Vector11setMidPointERKS_S1_f($2, $2, $8, Math_fround(.5));
$37 = (HEAP32[tempDoublePtr >> 2] = $13, Math_fround(HEAPF32[tempDoublePtr >> 2]));
$38 = (HEAP32[tempDoublePtr >> 2] = $15, Math_fround(HEAPF32[tempDoublePtr >> 2]));
$39 = (HEAP32[tempDoublePtr >> 2] = $17, Math_fround(HEAPF32[tempDoublePtr >> 2]));
do if (!($37 > Math_fround(1.0) | $37 < Math_fround(-1.0))) if (!($38 > Math_fround(1.0) | $38 < Math_fround(-1.0))) if (!($39 > Math_fround(1.0) | $39 < Math_fround(-1.0))) if (!($21 > Math_fround(1.0) | $21 < Math_fround(-1.0))) if (!($23 > Math_fround(1.0) | $23 < Math_fround(-1.0))) if (!($25 > Math_fround(1.0) | $25 < Math_fround(-1.0))) {
$52 = $37 == Math_fround(0.0);
$54 = $38 == Math_fround(0.0);
$57 = $39 == Math_fround(0.0);
if ((($54 & 1) + ($52 & 1) + ($57 & 1) | 0) == 1) {
$64 = $25 == Math_fround(0.0);
if ((($32 & 1) + ($31 & 1) + ($64 & 1) | 0) == 1) {
$$018$mux$i$i = $54 ? 1 : ($52 ^ 1) << 31 >> 31;
if (!($52 & $54)) {
if ($57) if ($$018$mux$i$i << 16 >> 16 == -1) $$220$i$i = 2; else break; else $$220$i$i = $$018$mux$i$i;
$$017$mux$i$i = $32 ? 1 : ($31 ^ 1) << 31 >> 31;
if (!$or$cond) {
if ($64) if ($$017$mux$i$i << 16 >> 16 == -1) $$2$i$i = 2; else break; else $$2$i$i = $$017$mux$i$i;
if ($$220$i$i << 16 >> 16 != $$2$i$i << 16 >> 16) {
$$0$i$i = 0;
while (1) if ($$0$i$i << 16 >> 16 == $$220$i$i << 16 >> 16 ? 1 : $$0$i$i << 16 >> 16 == $$2$i$i << 16 >> 16) $$0$i$i = $$0$i$i + 1 << 16 >> 16; else break;
$76 = $2 + ($$0$i$i << 16 >> 16 << 2) | 0;
if ($$0$i$i << 16 >> 16 != -1) {
$78 = Math_fround(Math_fround(HEAPF32[$76 >> 2]) * Math_fround(.5));
HEAPF32[$76 >> 2] = $78;
}
}
}
}
}
}
} while (0);
}
__ZN6Vector8setScaleEf($2, Math_fround(HEAPF32[$0 + 48 >> 2]));
$82 = Math_fround(HEAPF32[$0 + 560 >> 2]);
$84 = $0 + 564 | 0;
if ($82 == Math_fround(0.0)) {
$85 = Math_fround(HEAPF32[$84 >> 2]);
if (!($85 == Math_fround(0.0))) {
$101 = (HEAPF32[tempDoublePtr >> 2] = $85, HEAP32[tempDoublePtr >> 2] | 0);
label = 25;
}
} else {
$101 = HEAP32[$84 >> 2] | 0;
label = 25;
}
if ((label | 0) == 25) {
$89 = Math_fround(HEAPF32[$0 + 44 >> 2]);
$90 = $0 + 40 | 0;
$92 = Math_fround(Math_fround(HEAPF32[$90 >> 2]) - $89);
$93 = $0 + 568 | 0;
$98 = Math_fround($89 + Math_fround($92 * Math_fround(HEAPF32[64964 + (HEAP32[$93 >> 2] << 2) >> 2])));
HEAPF32[$90 >> 2] = $98;
$99 = $1 + 28 | 0;
HEAPF32[$10 >> 2] = $82;
HEAP32[$10 + 4 >> 2] = $101;
__ZN5SiGML21convertCurveDirectionER6VectorRKS0_10Direction2($99, $2, $10);
__ZN6Vector15setCrossProductERKS_S1_($1, $99, $2);
__ZN6Vector7setUnitEv($1) | 0;
$105 = $1 + 12 | 0;
HEAP32[$105 >> 2] = HEAP32[64924 + (HEAP32[$93 >> 2] << 2) >> 2];
HEAP32[$1 + 40 >> 2] = HEAP32[64944 + (HEAP32[$93 >> 2] << 2) >> 2];
__ZN6VectorC2ERKS_($tmpcast$i7$i$byval_copy, $99);
$110 = $1 + 16 | 0;
__ZN6Vector8setScaleERKS_f($110, $2, Math_fround(-.5));
$111 = Math_fround(__ZNK6Vector6lengthEv($110));
$113 = Math_fround(Math_fround(HEAPF32[$105 >> 2]) * Math_fround(.5));
__ZN6Vector8setScaleEf($tmpcast$i7$i$byval_copy, Math_fround($111 * Math_fround(+Math_tan(+Math_fround(Math_fround(HEAPF32[563]) - $113)))));
__ZN6Vector6setAddERKS_($110, $tmpcast$i7$i$byval_copy);
}
$119 = HEAP32[$0 + 572 >> 2] | 0;
if (!$119) {
STACKTOP = sp;
return;
}
$122 = Math_fround(HEAPF32[$0 + 44 >> 2]);
$123 = $0 + 40 | 0;
$125 = Math_fround(Math_fround(HEAPF32[$123 >> 2]) - $122);
$129 = Math_fround($122 + Math_fround($125 * Math_fround(HEAPF32[$3 + 8 >> 2])));
HEAPF32[$123 >> 2] = $129;
HEAP32[$1 + 44 >> 2] = $119;
$131 = $1 + 48 | 0;
HEAP32[$11 >> 2] = HEAP32[$0 + 588 >> 2];
HEAP32[$11 + 4 >> 2] = HEAP32[$0 + 592 >> 2];
__ZN5SiGML21convertCurveDirectionER6VectorRKS0_10Direction2($131, $2, $11);
$140 = Math_fround(HEAPF32[65024 + (HEAP32[$0 + 576 >> 2] << 2) >> 2]);
$142 = Math_fround($140 * Math_fround(HEAPF32[16222]));
__ZN6Vector8setScaleEf($131, Math_fround($142 * Math_fround(__ZNK6Vector6lengthEv($2))));
HEAP32[$1 + 68 >> 2] = HEAP32[$3 + 12 >> 2];
STACKTOP = sp;
return;
}
function __ZNK16CircularMovement5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $10 = 0, $110 = 0, $116 = 0, $122 = 0, $128 = 0, $134 = 0, $25 = 0, $4 = 0, $40 = 0, $52 = 0, $64 = 0, $72 = 0, $80 = 0, $86 = 0, $92 = 0, $98 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 96 | 0;
$vararg_buffer31 = sp + 88 | 0;
$vararg_buffer28 = sp + 80 | 0;
$vararg_buffer25 = sp + 72 | 0;
$vararg_buffer22 = sp + 64 | 0;
$vararg_buffer19 = sp + 56 | 0;
$vararg_buffer16 = sp + 48 | 0;
$vararg_buffer13 = sp + 40 | 0;
$vararg_buffer10 = sp + 32 | 0;
$vararg_buffer7 = sp + 24 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
HEAP32[$vararg_buffer >> 2] = $0;
_fprintf($1, 37855, $vararg_buffer) | 0;
__ZNK13BasicMovement5printEP8_IO_FILE($0, $1);
$4 = $0 + 552 | 0;
if (HEAP32[$4 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(36882, 9, 1, $1) | 0;
HEAP32[$vararg_buffer1 >> 2] = HEAP32[$4 >> 2];
_fprintf($1, 35092, $vararg_buffer1) | 0;
}
$10 = $0 + 528 | 0;
if (Math_fround(HEAPF32[$10 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 532 >> 2]) == Math_fround(0.0)) {
if (!(Math_fround(HEAPF32[$0 + 536 >> 2]) == Math_fround(0.0))) label = 7;
} else label = 7; else label = 7;
if ((label | 0) == 7) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(37118, 9, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK10Direction35printEP8_IO_FILE($10, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$25 = $0 + 540 | 0;
if (Math_fround(HEAPF32[$25 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 544 >> 2]) == Math_fround(0.0)) {
if (!(Math_fround(HEAPF32[$0 + 548 >> 2]) == Math_fround(0.0))) label = 11;
} else label = 11; else label = 11;
if ((label | 0) == 11) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(37877, 16, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK10Direction35printEP8_IO_FILE($25, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$40 = $0 + 556 | 0;
if (Math_fround(HEAPF32[$40 >> 2]) == Math_fround(0.0)) {
if (!(Math_fround(HEAPF32[$0 + 560 >> 2]) == Math_fround(0.0))) label = 14;
} else label = 14;
if ((label | 0) == 14) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(37894, 10, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK10Direction25printEP8_IO_FILE($40, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$52 = $0 + 568 | 0;
if (Math_fround(HEAPF32[$52 >> 2]) == Math_fround(0.0)) {
if (!(Math_fround(HEAPF32[$0 + 572 >> 2]) == Math_fround(0.0))) label = 17;
} else label = 17;
if ((label | 0) == 17) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(37905, 8, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK10Direction25printEP8_IO_FILE($52, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$64 = $0 + 564 | 0;
if (HEAP8[$64 >> 0] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
HEAP32[$vararg_buffer4 >> 2] = HEAP8[$64 >> 0] | 0 ? 84 : 70;
_fprintf($1, 37914, $vararg_buffer4) | 0;
}
$72 = $0 + 565 | 0;
if (HEAP8[$72 >> 0] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
HEAP32[$vararg_buffer7 >> 2] = HEAP8[$72 >> 0] | 0 ? 84 : 70;
_fprintf($1, 37932, $vararg_buffer7) | 0;
}
$80 = $0 + 588 | 0;
if (HEAP32[$80 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(37957, 13, 1, $1) | 0;
HEAP32[$vararg_buffer10 >> 2] = HEAP32[$80 >> 2];
_fprintf($1, 35092, $vararg_buffer10) | 0;
}
$86 = $0 + 592 | 0;
if (HEAP32[$86 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(37971, 18, 1, $1) | 0;
HEAP32[$vararg_buffer13 >> 2] = HEAP32[$86 >> 2];
_fprintf($1, 35092, $vararg_buffer13) | 0;
}
$92 = $0 + 584 | 0;
if (HEAP32[$92 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(37990, 17, 1, $1) | 0;
HEAP32[$vararg_buffer16 >> 2] = HEAP32[$92 >> 2];
_fprintf($1, 35092, $vararg_buffer16) | 0;
}
$98 = $0 + 576 | 0;
if (Math_fround(HEAPF32[$98 >> 2]) == Math_fround(0.0)) {
if (!(Math_fround(HEAPF32[$0 + 580 >> 2]) == Math_fround(0.0))) label = 30;
} else label = 30;
if ((label | 0) == 30) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(37040, 22, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK10Direction25printEP8_IO_FILE($98, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$110 = $0 + 596 | 0;
if (HEAP32[$110 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(36958, 17, 1, $1) | 0;
HEAP32[$vararg_buffer19 >> 2] = HEAP32[$110 >> 2];
_fprintf($1, 35092, $vararg_buffer19) | 0;
}
$116 = $0 + 600 | 0;
if (HEAP32[$116 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(36976, 16, 1, $1) | 0;
HEAP32[$vararg_buffer22 >> 2] = HEAP32[$116 >> 2];
_fprintf($1, 35092, $vararg_buffer22) | 0;
}
$122 = $0 + 604 | 0;
if (HEAP32[$122 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(36993, 20, 1, $1) | 0;
HEAP32[$vararg_buffer25 >> 2] = HEAP32[$122 >> 2];
_fprintf($1, 35092, $vararg_buffer25) | 0;
}
$128 = $0 + 608 | 0;
if (HEAP32[$128 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(37014, 25, 1, $1) | 0;
HEAP32[$vararg_buffer28 >> 2] = HEAP32[$128 >> 2];
_fprintf($1, 35092, $vararg_buffer28) | 0;
}
$134 = $0 + 612 | 0;
if (HEAP16[$134 >> 1] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(37063, 16, 1, $1) | 0;
HEAP32[$vararg_buffer31 >> 2] = HEAP16[$134 >> 1];
_fprintf($1, 35092, $vararg_buffer31) | 0;
}
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(38008, 17, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK16TwoHCircMoveSpec5printEP8_IO_FILE($0 + 616 | 0, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
STACKTOP = sp;
return;
}
function __ZN14OneArmAnimator21computeJointRotationsERK19OneHConcretePosturef($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
var $$031$i = f0, $$1$i = f0, $$pre = 0, $104 = 0, $106 = 0, $108 = f0, $110 = f0, $120 = f0, $122 = f0, $126 = 0, $131 = 0, $134 = f0, $135 = f0, $145 = f0, $146 = f0, $153 = 0, $16 = 0, $161 = f0, $175 = f0, $3 = 0, $32 = 0, $37 = f0, $4 = 0, $42 = 0, $48 = f0, $49 = 0, $5 = 0, $50 = f0, $52 = f0, $54 = f0, $6 = 0, $61 = f0, $62 = 0, $68 = f0, $70 = f0, $77 = f0, $78 = 0.0, $8 = 0, $82 = f0, $84 = f0, $86 = f0, $88 = f0, $90 = 0.0, $94 = f0, $96 = f0, $98 = f0, $99 = 0, $indvars$iv$i = 0, $vararg_buffer11 = 0, $vararg_buffer3 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 192 | 0;
$vararg_buffer11 = sp + 72 | 0;
$vararg_buffer3 = sp + 16 | 0;
$3 = sp + 168 | 0;
$4 = sp + 152 | 0;
$5 = sp + 128 | 0;
$6 = $0 + 32 | 0;
$8 = $1 + 56 | 0;
if ((HEAP32[$6 >> 2] | 0) != (HEAP32[$8 >> 2] | 0)) {
__ZN18HandJointRotations7setFromEPKS_(HEAP32[$0 + 976 >> 2] | 0, HEAP32[$0 + 12 >> 2] | 0);
HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
}
__ZN6VectorC2Ev($3);
$16 = $0 + 4 | 0;
__ZNK19OneHConcretePosture15computeWristLocEPK11HanimAvatarR6Vector($1, HEAP32[$16 >> 2] | 0, $3);
HEAP32[$4 >> 2] = HEAP32[$1 + 40 >> 2];
HEAP32[$4 + 4 >> 2] = HEAP32[$1 + 44 >> 2];
HEAP32[$4 + 8 >> 2] = HEAP32[$1 + 48 >> 2];
HEAP32[$4 + 12 >> 2] = HEAP32[$1 + 52 >> 2];
if (0) __Z7eprintfPKcz(11993, sp);
$32 = $0 + 8 | 0;
$37 = Math_fround(HEAPF32[$1 + 64 >> 2]);
__ZNK11HanimAvatar19computeArmRotationsEPP13JointRotationbRK6VectorRK10QuaternionS8_ff(HEAP32[$16 >> 2] | 0, $0 + 16 | 0, (HEAP8[$32 >> 0] | 0) != 0, $3, $4, $1 + 76 | 0, $37, Math_fround(HEAPF32[$1 + 68 >> 2]));
if (0) {
__Z7eprintfPKcz(12045, sp + 8 | 0);
$42 = HEAP32[$0 + 20 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$42 >> 2] | 0) + 64 >> 2] & 127]($42, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
$48 = Math_fround(HEAPF32[$1 + 72 >> 2]);
$49 = $1 + 60 | 0;
$50 = Math_fround(HEAPF32[$49 >> 2]);
$52 = Math_fround(Math_fround(1.0) - Math_fround($50 * Math_fround(2.0)));
$54 = Math_fround(Math_fround($48 * Math_fround(-.333333313)) + Math_fround(.5));
$61 = Math_fround(Math_fround(Math_fround(Math_fround(1.0) - $54) * $50) / Math_fround($54 + Math_fround(Math_fround(Math_fround(1.0) - Math_fround($54 * Math_fround(2.0))) * $50)));
$62 = $48 == Math_fround(0.0);
if ($62) $68 = $50; else $68 = Math_fround(Math_fround(Math_fround($48 + Math_fround(1.0)) * $50) / Math_fround(Math_fround(1.0) - Math_fround($48 * $52)));
HEAPF32[$5 >> 2] = $68;
$70 = Math_fround(Math_fround($48 * Math_fround(-.166666657)) + Math_fround(.5));
$77 = Math_fround(Math_fround(Math_fround(Math_fround(1.0) - $70) * $50) / Math_fround($70 + Math_fround(Math_fround(Math_fround(1.0) - Math_fround($70 * Math_fround(2.0))) * $50)));
if ($62) $82 = $50; else $82 = Math_fround(Math_fround(Math_fround($48 + Math_fround(1.0)) * $50) / Math_fround(Math_fround(1.0) - Math_fround($48 * $52)));
HEAPF32[$5 + 4 >> 2] = $82;
$145 = Math_fround($48 * Math_fround(0.0));
$146 = Math_fround($145 + Math_fround(.5));
$94 = Math_fround(Math_fround(Math_fround(Math_fround(1.0) - $146) * $50) / Math_fround($146 + Math_fround(Math_fround(Math_fround(1.0) - Math_fround($146 * Math_fround(2.0))) * $50)));
$153 = $145 == Math_fround(0.0);
if ($153) $84 = $50; else $84 = Math_fround(Math_fround(Math_fround($145 + Math_fround(1.0)) * $50) / Math_fround(Math_fround(1.0) - Math_fround($145 * $52)));
HEAPF32[$5 + 8 >> 2] = $84;
$161 = Math_fround(Math_fround($48 * Math_fround(.166666687)) + Math_fround(.5));
$96 = Math_fround(Math_fround(Math_fround(Math_fround(1.0) - $161) * $50) / Math_fround($161 + Math_fround(Math_fround(Math_fround(1.0) - Math_fround($161 * Math_fround(2.0))) * $50)));
if ($153) $86 = $50; else $86 = Math_fround(Math_fround(Math_fround($145 + Math_fround(1.0)) * $50) / Math_fround(Math_fround(1.0) - Math_fround($145 * $52)));
HEAPF32[$5 + 12 >> 2] = $86;
$175 = Math_fround(Math_fround($48 * Math_fround(.333333313)) + Math_fround(.5));
$98 = Math_fround(Math_fround(Math_fround(Math_fround(1.0) - $175) * $50) / Math_fround($175 + Math_fround(Math_fround(Math_fround(1.0) - Math_fround($175 * Math_fround(2.0))) * $50)));
if ($153) $88 = $50; else $88 = Math_fround(Math_fround(Math_fround($145 + Math_fround(1.0)) * $50) / Math_fround(Math_fround(1.0) - Math_fround($145 * $52)));
HEAPF32[$5 + 16 >> 2] = $88;
if (0) {
$78 = +$48;
HEAPF64[$vararg_buffer3 >> 3] = $78;
HEAPF64[$vararg_buffer3 + 8 >> 3] = +$50;
HEAPF64[$vararg_buffer3 + 16 >> 3] = +$68;
HEAPF64[$vararg_buffer3 + 24 >> 3] = +$82;
HEAPF64[$vararg_buffer3 + 32 >> 3] = +$84;
HEAPF64[$vararg_buffer3 + 40 >> 3] = +$86;
HEAPF64[$vararg_buffer3 + 48 >> 3] = +$88;
__Z7eprintfPKcz(12075, $vararg_buffer3);
$90 = +Math_fround(HEAPF32[$49 >> 2]);
HEAPF64[$vararg_buffer11 >> 3] = $78;
HEAPF64[$vararg_buffer11 + 8 >> 3] = $90;
HEAPF64[$vararg_buffer11 + 16 >> 3] = +$61;
HEAPF64[$vararg_buffer11 + 24 >> 3] = +$77;
HEAPF64[$vararg_buffer11 + 32 >> 3] = +$94;
HEAPF64[$vararg_buffer11 + 40 >> 3] = +$96;
HEAPF64[$vararg_buffer11 + 48 >> 3] = +$98;
__Z7eprintfPKcz(12115, $vararg_buffer11);
}
$99 = HEAP32[$8 >> 2] | 0;
$$pre = $0 + 12 | 0;
if ($99 | 0) __ZN18HandJointRotations19interpolateHandrotsEPKS_S1_PKf(HEAP32[$$pre >> 2] | 0, HEAP32[$0 + 976 >> 2] | 0, $99, $5);
$104 = HEAP32[$$pre >> 2] | 0;
$106 = HEAP32[$1 + 92 >> 2] | 0;
$108 = Math_fround(HEAPF32[$1 + 100 >> 2]);
$110 = Math_fround(HEAPF32[$1 + 104 >> 2]);
if (!$106) {
STACKTOP = sp;
return;
}
$120 = Math_fround(Math_fround($108 + $110) * Math_fround(.5));
$122 = Math_fround(Math_fround($108 - $110) * Math_fround(.5));
$126 = ((HEAP8[$32 >> 0] | 0) == 0 ? HEAP16[$1 + 108 >> 1] | 0 : HEAP16[$1 + 110 >> 1] | 0) << 16 >> 16;
$$031$i = Math_fround(Math_fround(HEAPF32[$1 + 96 >> 2]) + Math_fround(-1.2566371));
$indvars$iv$i = ($106 | 0) != 2 & 1;
while (1) {
if (!(1 << $indvars$iv$i & $126)) $$1$i = $$031$i; else {
$131 = HEAP32[$104 + ($indvars$iv$i * 12 | 0) >> 2] | 0;
$134 = Math_fround($120 + Math_fround($122 * Math_fround(+Math_sin(+$$031$i))));
$135 = Math_fround($$031$i + Math_fround(1.2566371));
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$131 >> 2] | 0) + 36 >> 2] & 63]($131, $134);
$$1$i = $135;
}
$indvars$iv$i = $indvars$iv$i + 1 | 0;
if (($indvars$iv$i | 0) == 5) break; else $$031$i = $$1$i;
}
STACKTOP = sp;
return;
}
function __Z17FindGestureByNamePKcR10ParserData($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$012$i$i = 0, $$012$i$i65 = 0, $$01215$i$i = 0, $$01215$i$i62 = 0, $$01216$i$i = 0, $$01216$i$i63 = 0, $$05497 = 0, $$096 = 0, $$3 = 0, $$5 = 0, $$sink$i$i = 0, $$sink$i$i67 = 0, $10 = 0, $101 = 0, $103 = 0, $109 = 0, $111 = 0, $118 = 0, $119 = 0, $121 = 0, $132 = 0, $2 = 0, $22 = 0, $24 = 0, $25 = 0, $30 = 0, $31 = 0, $38 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $47 = 0, $5 = 0, $55 = 0, $57 = 0, $59 = 0, $65 = 0, $66 = 0, $68 = 0, $71 = 0, $72 = 0, $74 = 0, $81 = 0, $82 = 0, $88 = 0, $9 = 0, $95 = 0, $97 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$2 = sp + 4 | 0;
if (!$0) {
$$5 = 0;
STACKTOP = sp;
return $$5 | 0;
}
$4 = $1 + 4 | 0;
$5 = HEAP32[$4 >> 2] | 0;
if (!$5) {
$$5 = 0;
STACKTOP = sp;
return $$5 | 0;
}
$9 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($0, HEAP32[$5 + 4 >> 2] | 0) | 0;
$10 = HEAP32[$5 >> 2] | 0;
L7 : do if ((HEAP16[$10 + ($9 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i = HEAP32[$10 + ($9 << 3) >> 2] | 0;
if (!$$01215$i$i) label = 8; else {
$$01216$i$i = $$01215$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($0, HEAP32[$$01216$i$i >> 2] | 0) | 0) break;
$$012$i$i = HEAP32[$$01216$i$i + 8 >> 2] | 0;
if (!$$012$i$i) {
label = 8;
break L7;
} else $$01216$i$i = $$012$i$i;
}
$$sink$i$i = $$01216$i$i + 4 | 0;
}
} else label = 8; while (0);
if ((label | 0) == 8) $$sink$i$i = $5 + 20 | 0;
$22 = HEAP32[$$sink$i$i >> 2] | 0;
if ($22 | 0) {
$$5 = $22;
STACKTOP = sp;
return $$5 | 0;
}
$24 = $1 + 8 | 0;
$25 = HEAP32[$24 >> 2] | 0;
if (!$25) {
$$5 = 0;
STACKTOP = sp;
return $$5 | 0;
};
HEAP32[$2 >> 2] = 0;
HEAP32[$2 + 4 >> 2] = 0;
HEAP32[$2 + 8 >> 2] = 0;
L22 : do if ((HEAP32[$25 + 12 >> 2] | 0) > 0) {
$30 = $2 + 11 | 0;
$31 = $2 + 4 | 0;
$$05497 = 0;
$38 = $25;
while (1) {
__THREW__ = 0;
invoke_iii(26, $2 | 0, HEAP32[(HEAP32[$38 >> 2] | 0) + ($$05497 << 2) >> 2] | 0) | 0;
$41 = __THREW__;
__THREW__ = 0;
if ($41 & 1) {
label = 46;
break L22;
}
$43 = HEAP8[$30 >> 0] | 0;
$44 = $43 << 24 >> 24 < 0;
$47 = $44 ? HEAP32[$31 >> 2] | 0 : $43 & 255;
if (($47 | 0) > 0) if ((HEAP8[($44 ? HEAP32[$2 >> 2] | 0 : $2) + ($47 + -1) >> 0] | 0) != 47) {
__THREW__ = 0;
invoke_vii(147, $2 | 0, 47);
$55 = __THREW__;
__THREW__ = 0;
if ($55 & 1) {
label = 46;
break L22;
}
}
__THREW__ = 0;
invoke_iii(27, $2 | 0, $0 | 0) | 0;
$57 = __THREW__;
__THREW__ = 0;
if ($57 & 1) {
label = 46;
break L22;
}
__THREW__ = 0;
invoke_iii(27, $2 | 0, 30890) | 0;
$59 = __THREW__;
__THREW__ = 0;
if ($59 & 1) {
label = 46;
break L22;
}
__THREW__ = 0;
$65 = invoke_iiii(17, ((HEAP8[$30 >> 0] | 0) < 0 ? HEAP32[$2 >> 2] | 0 : $2) | 0, $1 | 0, 0) | 0;
$66 = __THREW__;
__THREW__ = 0;
if ($66 & 1) {
label = 46;
break L22;
}
$68 = HEAP32[$4 >> 2] | 0;
__THREW__ = 0;
$71 = invoke_iii(22, $0 | 0, HEAP32[$68 + 4 >> 2] | 0) | 0;
$72 = __THREW__;
__THREW__ = 0;
if ($72 & 1) {
label = 46;
break L22;
}
$74 = HEAP32[$68 >> 2] | 0;
L35 : do if ((HEAP16[$74 + ($71 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i62 = HEAP32[$74 + ($71 << 3) >> 2] | 0;
if (!$$01215$i$i62) label = 28; else {
$$01216$i$i63 = $$01215$i$i62;
while (1) {
__THREW__ = 0;
$81 = invoke_iii(23, $0 | 0, HEAP32[$$01216$i$i63 >> 2] | 0) | 0;
$82 = __THREW__;
__THREW__ = 0;
if ($82 & 1) {
label = 46;
break L22;
}
if ($81) break;
$$012$i$i65 = HEAP32[$$01216$i$i63 + 8 >> 2] | 0;
if (!$$012$i$i65) {
label = 28;
break L35;
} else $$01216$i$i63 = $$012$i$i65;
}
$$sink$i$i67 = $$01216$i$i63 + 4 | 0;
}
} else label = 28; while (0);
if ((label | 0) == 28) {
label = 0;
$$sink$i$i67 = $68 + 20 | 0;
}
$88 = HEAP32[$$sink$i$i67 >> 2] | 0;
if ($88 | 0) {
$$3 = $88;
label = 43;
break L22;
}
$$05497 = $$05497 + 1 | 0;
if (($65 | 0) != 1) break;
$38 = HEAP32[$24 >> 2] | 0;
if (($$05497 | 0) >= (HEAP32[$38 + 12 >> 2] | 0)) {
label = 33;
break L22;
}
}
__THREW__ = 0;
invoke_vii(148, $65 | 0, ((HEAP8[$30 >> 0] | 0) < 0 ? HEAP32[$2 >> 2] | 0 : $2) | 0);
$95 = __THREW__;
__THREW__ = 0;
if ($95 & 1) label = 46; else {
__THREW__ = 0;
invoke_v(4);
$97 = __THREW__;
__THREW__ = 0;
if ($97 & 1) label = 46; else {
$$3 = 0;
label = 43;
}
}
} else label = 33; while (0);
L49 : do if ((label | 0) == 33) {
__THREW__ = 0;
invoke_i(1) | 0;
$99 = __THREW__;
__THREW__ = 0;
if ($99 & 1) label = 46; else {
__THREW__ = 0;
HEAP32[$vararg_buffer >> 2] = $0;
invoke_vii(115, 30897, $vararg_buffer | 0);
$101 = __THREW__;
__THREW__ = 0;
if ($101 & 1) label = 46; else {
__THREW__ = 0;
invoke_v(4);
$103 = __THREW__;
__THREW__ = 0;
if ($103 & 1) label = 46; else if ((HEAP32[(HEAP32[$24 >> 2] | 0) + 12 >> 2] | 0) > 0) {
$$096 = 0;
while (1) {
__THREW__ = 0;
invoke_vi(130, 53852);
$109 = __THREW__;
__THREW__ = 0;
if ($109 & 1) {
label = 46;
break L49;
}
$111 = HEAP32[$24 >> 2] | 0;
if ((HEAP32[$111 + 12 >> 2] | 0) > ($$096 | 0)) $118 = HEAP32[(HEAP32[$111 >> 2] | 0) + ($$096 << 2) >> 2] | 0; else $118 = 0;
__THREW__ = 0;
invoke_vi(130, $118 | 0);
$119 = __THREW__;
__THREW__ = 0;
if ($119 & 1) {
label = 46;
break L49;
}
__THREW__ = 0;
invoke_vi(122, 10);
$121 = __THREW__;
__THREW__ = 0;
if ($121 & 1) {
label = 46;
break L49;
}
$$096 = $$096 + 1 | 0;
if (($$096 | 0) >= (HEAP32[(HEAP32[$24 >> 2] | 0) + 12 >> 2] | 0)) {
$$3 = 0;
label = 43;
break;
}
}
} else {
$$3 = 0;
label = 43;
}
}
}
} while (0);
if ((label | 0) == 43) {
if ((HEAP8[$2 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$2 >> 2] | 0);
$$5 = $$3;
STACKTOP = sp;
return $$5 | 0;
} else if ((label | 0) == 46) {
$132 = ___cxa_find_matching_catch_2() | 0;
if ((HEAP8[$2 + 11 >> 0] | 0) >= 0) ___resumeException($132 | 0);
__ZdlPv(HEAP32[$2 >> 2] | 0);
___resumeException($132 | 0);
}
return 0;
}
function __ZL8PNMtoATMP13DynamicArray1I15AtomicNonmanualE($0) {
$0 = $0 | 0;
var $$03587 = 0, $$1 = 0, $$2 = 0, $$238 = 0, $$pre$phi$iZ2D = 0, $$sroa$0$0 = 0, $$sroa$10$0 = f0, $$sroa$10$0$$sroa_idx71 = 0, $$sroa$10$0$copyload75 = f0, $$sroa$11$0 = f0, $$sroa$11$0$$sroa_idx76 = 0, $$sroa$6$0 = 0, $$sroa$6$0$$sroa_idx44 = 0, $$sroa$7$0$$sroa_raw_idx = 0, $$sroa$755$0 = 0, $$sroa$755$0$$sroa_idx56 = 0, $$sroa$8$0 = f0, $$sroa$8$0$$sroa_idx61 = 0, $$sroa$8$0$copyload65 = f0, $$sroa$9$0 = f0, $$sroa$9$0$$sroa_idx66 = 0, $$sroa$9$0$copyload70 = f0, $1 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $2 = 0, $21 = 0, $24 = 0, $26 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $48 = 0, $5 = 0, $50 = 0, $53 = 0, $6 = 0, $62 = 0, $68 = 0, $7 = 0, $73 = 0, $75 = 0, $8 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$1 = sp + 28 | 0;
$2 = sp;
if (!$0) {
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
$4 = $0 + 12 | 0;
$5 = HEAP32[$4 >> 2] | 0;
switch ($5 | 0) {
case 1:
{
$6 = HEAP32[$0 >> 2] | 0;
HEAP32[$1 >> 2] = HEAP32[$6 >> 2];
HEAP32[$1 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
HEAP32[$1 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
HEAP32[$1 + 12 >> 2] = HEAP32[$6 + 12 >> 2];
HEAP32[$1 + 16 >> 2] = HEAP32[$6 + 16 >> 2];
HEAP32[$1 + 20 >> 2] = HEAP32[$6 + 20 >> 2];
HEAP32[$1 + 24 >> 2] = HEAP32[$6 + 24 >> 2];
__THREW__ = 0;
$7 = invoke_ii(29, $1 | 0) | 0;
$8 = __THREW__;
__THREW__ = 0;
if (!($8 & 1)) {
$$1 = $7;
STACKTOP = sp;
return $$1 | 0;
}
$$2 = ___cxa_find_matching_catch_2() | 0;
$$238 = tempRet0;
___resumeException($$2 | 0);
break;
}
case 0:
{
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
default:
{
$12 = __Znwj(28) | 0;
$13 = $12 + 4 | 0;
HEAP32[$13 >> 2] = 0;
HEAP32[$13 + 4 >> 2] = 0;
HEAP32[$13 + 8 >> 2] = 0;
HEAP32[$13 + 12 >> 2] = 0;
HEAP32[$12 + 20 >> 2] = 2;
HEAP32[$12 >> 2] = 3260;
__THREW__ = 0;
$15 = invoke_ii(20, 16) | 0;
$16 = __THREW__;
__THREW__ = 0;
if ($16 & 1) {
$26 = ___cxa_find_matching_catch_2() | 0;
$27 = tempRet0;
__ZdlPv($12);
$$2 = $26;
$$238 = $27;
___resumeException($$2 | 0);
}
HEAP32[$15 + 4 >> 2] = 10;
HEAP32[$15 + 12 >> 2] = 0;
HEAP32[$15 >> 2] = 0;
HEAP32[$15 + 8 >> 2] = 0;
$21 = $12 + 24 | 0;
HEAP32[$21 >> 2] = $15;
do if (($5 | 0) > 0) {
$$sroa$6$0$$sroa_idx44 = $2 + 4 | 0;
$$sroa$7$0$$sroa_raw_idx = $2 + 6 | 0;
$$sroa$755$0$$sroa_idx56 = $2 + 8 | 0;
$$sroa$8$0$$sroa_idx61 = $2 + 12 | 0;
$$sroa$9$0$$sroa_idx66 = $2 + 16 | 0;
$$sroa$10$0$$sroa_idx71 = $2 + 20 | 0;
$$sroa$11$0$$sroa_idx76 = $2 + 24 | 0;
$$03587 = 0;
$30 = $5;
$31 = 0;
while (1) {
if ($$03587 << 16 >> 16 > -1 & ($30 | 0) > ($31 | 0)) {
$32 = HEAP32[$0 >> 2] | 0;
$33 = $32 + ($31 * 28 | 0) | 0;
$$sroa$8$0$copyload65 = Math_fround(HEAPF32[$32 + ($31 * 28 | 0) + 12 >> 2]);
$$sroa$9$0$copyload70 = Math_fround(HEAPF32[$32 + ($31 * 28 | 0) + 16 >> 2]);
$$sroa$10$0$copyload75 = Math_fround(HEAPF32[$32 + ($31 * 28 | 0) + 20 >> 2]);
$$sroa$0$0 = HEAP32[$33 >> 2] | 0;
$$sroa$10$0 = $$sroa$10$0$copyload75;
$$sroa$11$0 = Math_fround(HEAPF32[$32 + ($31 * 28 | 0) + 24 >> 2]);
$$sroa$6$0 = HEAP16[$32 + ($31 * 28 | 0) + 4 >> 1] | 0;
$$sroa$755$0 = HEAP32[$32 + ($31 * 28 | 0) + 8 >> 2] | 0;
$$sroa$8$0 = $$sroa$8$0$copyload65;
$$sroa$9$0 = $$sroa$9$0$copyload70;
$35 = HEAP16[$33 + 6 >> 1] | 0;
} else {
$$sroa$0$0 = 0;
$$sroa$10$0 = Math_fround(1.0);
$$sroa$11$0 = Math_fround(1.0);
$$sroa$6$0 = -1;
$$sroa$755$0 = 0;
$$sroa$8$0 = Math_fround(-1.0);
$$sroa$9$0 = Math_fround(1.0);
$35 = 0;
}
HEAP32[$2 >> 2] = $$sroa$0$0;
HEAP16[$$sroa$6$0$$sroa_idx44 >> 1] = $$sroa$6$0;
HEAP16[$$sroa$7$0$$sroa_raw_idx >> 1] = $35;
HEAP32[$$sroa$755$0$$sroa_idx56 >> 2] = $$sroa$755$0;
HEAPF32[$$sroa$8$0$$sroa_idx61 >> 2] = $$sroa$8$0;
HEAPF32[$$sroa$9$0$$sroa_idx66 >> 2] = $$sroa$9$0;
HEAPF32[$$sroa$10$0$$sroa_idx71 >> 2] = $$sroa$10$0;
HEAPF32[$$sroa$11$0$$sroa_idx76 >> 2] = $$sroa$11$0;
__THREW__ = 0;
$36 = invoke_ii(29, $2 | 0) | 0;
$37 = __THREW__;
__THREW__ = 0;
if ($37 & 1) break;
if ($36 | 0) {
$40 = HEAP32[$21 >> 2] | 0;
$41 = $40 + 12 | 0;
$42 = HEAP32[$41 >> 2] | 0;
if (($42 | 0) >= 0) {
if ((HEAP32[$40 + 8 >> 2] | 0) > ($42 | 0)) {
$$pre$phi$iZ2D = $42 + 1 | 0;
label = 20;
} else {
$48 = HEAP32[$40 + 4 >> 2] | 0;
$50 = $42 + 1 | 0;
__THREW__ = 0;
invoke_vii(171, $40 | 0, (($48 | 0) > ($42 | 0) ? $48 : $50 + ($42 >>> 1) | 0) | 0);
$53 = __THREW__;
__THREW__ = 0;
if ($53 & 1) break;
if ((HEAP32[$41 >> 2] | 0) <= ($42 | 0)) {
$$pre$phi$iZ2D = $50;
label = 20;
}
}
if ((label | 0) == 20) {
label = 0;
HEAP32[$41 >> 2] = $$pre$phi$iZ2D;
}
HEAP32[(HEAP32[$40 >> 2] | 0) + ($42 << 2) >> 2] = $36;
}
}
$$03587 = $$03587 + 1 << 16 >> 16;
$31 = $$03587 << 16 >> 16;
$30 = HEAP32[$4 >> 2] | 0;
if (($30 | 0) <= ($31 | 0)) {
label = 8;
break;
}
}
if ((label | 0) == 8) {
$24 = HEAP32[$21 >> 2] | 0;
break;
}
$62 = ___cxa_find_matching_catch_2() | 0;
$$2 = $62;
$$238 = tempRet0;
___resumeException($$2 | 0);
} else $24 = $15; while (0);
switch (HEAP32[$24 + 12 >> 2] | 0) {
case 0:
{
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$12 >> 2] | 0) + 4 >> 2] & 255]($12);
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
case 1:
{
$68 = HEAP32[HEAP32[$24 >> 2] >> 2] | 0;
if ((HEAP32[$24 + 8 >> 2] | 0) <= 0) {
$73 = HEAP32[$24 + 4 >> 2] | 0;
__ZN13DynamicArrayPI18AbstractTimedMorphE6resizeEi($24, ($73 | 0) > 1 ? $73 : 1);
}
$75 = $24 + 12 | 0;
if ((HEAP32[$75 >> 2] | 0) <= 0) HEAP32[$75 >> 2] = 1;
HEAP32[HEAP32[$24 >> 2] >> 2] = 0;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$12 >> 2] | 0) + 4 >> 2] & 255]($12);
$$1 = $68;
STACKTOP = sp;
return $$1 | 0;
}
default:
{
$$1 = $12;
STACKTOP = sp;
return $$1 | 0;
}
}
}
}
return 0;
}
function __Z16convertGlossToIDP7HashAnyIPKcS1_E($0) {
$0 = $0 | 0;
var $$0 = 0, $$012$i$i = 0, $$012$i$i35 = 0, $$012$i$i42 = 0, $$01215$i$i = 0, $$01215$i$i32 = 0, $$01215$i$i39 = 0, $$01216$i$i = 0, $$01216$i$i33 = 0, $$01216$i$i40 = 0, $$031 = 0, $$05$i = 0, $$05$i47 = 0, $$05$i51 = 0, $$sink$i$i = 0, $$sink$i$i37 = 0, $$sink$i$i44 = 0, $1 = 0, $100 = 0, $102 = 0, $103 = 0, $105 = 0, $107 = 0, $108 = 0, $110 = 0, $112 = 0, $117 = 0, $118 = 0, $123 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $3 = 0, $35 = 0, $37 = 0, $38 = 0, $5 = 0, $51 = 0, $52 = 0, $53 = 0, $56 = 0, $58 = 0, $6 = 0, $63 = 0, $66 = 0, $68 = 0, $73 = 0, $76 = 0, $78 = 0, $82 = 0, $84 = 0, $86 = 0, $92 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$1 = sp + 12 | 0;
$2 = sp;
$3 = $0 + 4 | 0;
$5 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(52834, HEAP32[$3 >> 2] | 0) | 0;
$6 = HEAP32[$0 >> 2] | 0;
L1 : do if ((HEAP16[$6 + ($5 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i = HEAP32[$6 + ($5 << 3) >> 2] | 0;
if (!$$01215$i$i) label = 6; else {
$$01216$i$i = $$01215$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(52834, HEAP32[$$01216$i$i >> 2] | 0) | 0) break;
$$012$i$i = HEAP32[$$01216$i$i + 8 >> 2] | 0;
if (!$$012$i$i) {
label = 6;
break L1;
} else $$01216$i$i = $$012$i$i;
}
$$sink$i$i = $$01216$i$i + 4 | 0;
}
} else label = 6; while (0);
if ((label | 0) == 6) $$sink$i$i = $0 + 20 | 0;
$19 = __Z10copyStringPKc(HEAP32[$$sink$i$i >> 2] | 0) | 0;
$21 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(52854, HEAP32[$3 >> 2] | 0) | 0;
$22 = HEAP32[$0 >> 2] | 0;
L10 : do if ((HEAP16[$22 + ($21 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i32 = HEAP32[$22 + ($21 << 3) >> 2] | 0;
if (!$$01215$i$i32) label = 12; else {
$$01216$i$i33 = $$01215$i$i32;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(52854, HEAP32[$$01216$i$i33 >> 2] | 0) | 0) break;
$$012$i$i35 = HEAP32[$$01216$i$i33 + 8 >> 2] | 0;
if (!$$012$i$i35) {
label = 12;
break L10;
} else $$01216$i$i33 = $$012$i$i35;
}
$$sink$i$i37 = $$01216$i$i33 + 4 | 0;
}
} else label = 12; while (0);
if ((label | 0) == 12) $$sink$i$i37 = $0 + 20 | 0;
$35 = __Z10copyStringPKc(HEAP32[$$sink$i$i37 >> 2] | 0) | 0;
$37 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(52840, HEAP32[$3 >> 2] | 0) | 0;
$38 = HEAP32[$0 >> 2] | 0;
L19 : do if ((HEAP16[$38 + ($37 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i39 = HEAP32[$38 + ($37 << 3) >> 2] | 0;
if (!$$01215$i$i39) label = 18; else {
$$01216$i$i40 = $$01215$i$i39;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(52840, HEAP32[$$01216$i$i40 >> 2] | 0) | 0) break;
$$012$i$i42 = HEAP32[$$01216$i$i40 + 8 >> 2] | 0;
if (!$$012$i$i42) {
label = 18;
break L19;
} else $$01216$i$i40 = $$012$i$i42;
}
$$sink$i$i44 = $$01216$i$i40 + 4 | 0;
}
} else label = 18; while (0);
if ((label | 0) == 18) $$sink$i$i44 = $0 + 20 | 0;
$51 = __Z10copyStringPKc(HEAP32[$$sink$i$i44 >> 2] | 0) | 0;
$52 = ($19 | 0) == 0;
if (!$52) {
$53 = HEAP8[$19 >> 0] | 0;
if ($53 << 24 >> 24) {
$$05$i = $19;
$56 = $53;
do {
$58 = (_tolower($56 << 24 >> 24) | 0) & 255;
HEAP8[$$05$i >> 0] = $58;
$$05$i = $$05$i + 1 | 0;
$56 = HEAP8[$$05$i >> 0] | 0;
} while ($56 << 24 >> 24 != 0);
}
}
if ($35 | 0) {
$63 = HEAP8[$35 >> 0] | 0;
if ($63 << 24 >> 24) {
$$05$i47 = $35;
$66 = $63;
do {
$68 = (_tolower($66 << 24 >> 24) | 0) & 255;
HEAP8[$$05$i47 >> 0] = $68;
$$05$i47 = $$05$i47 + 1 | 0;
$66 = HEAP8[$$05$i47 >> 0] | 0;
} while ($66 << 24 >> 24 != 0);
}
}
if ($51 | 0) {
$73 = HEAP8[$51 >> 0] | 0;
if ($73 << 24 >> 24) {
$$05$i51 = $51;
$76 = $73;
do {
$78 = (_tolower($76 << 24 >> 24) | 0) & 255;
HEAP8[$$05$i51 >> 0] = $78;
$$05$i51 = $$05$i51 + 1 | 0;
$76 = HEAP8[$$05$i51 >> 0] | 0;
} while ($76 << 24 >> 24 != 0);
}
};
HEAP32[$1 >> 2] = 0;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$1 + 8 >> 2] = 0;
do if ($52) {
__THREW__ = 0;
invoke_iii(27, $1 | 0, 53444) | 0;
$82 = __THREW__;
__THREW__ = 0;
if ($82 & 1) label = 34; else {
__THREW__ = 0;
invoke_vii(180, $2 | 0, $1 | 0);
$84 = __THREW__;
__THREW__ = 0;
if ($84 & 1) label = 34; else {
__THREW__ = 0;
invoke_vii(181, $2 | 0, 0);
$86 = __THREW__;
__THREW__ = 0;
if ($86 & 1) {
$94 = ___cxa_find_matching_catch_2() | 0;
$95 = tempRet0;
if ((HEAP8[$2 + 11 >> 0] | 0) >= 0) {
$$0 = $95;
$$031 = $94;
break;
}
__ZdlPv(HEAP32[$2 >> 2] | 0);
$$0 = $95;
$$031 = $94;
break;
} else {
if ((HEAP8[$2 + 11 >> 0] | 0) >= 0) {
label = 38;
break;
}
__ZdlPv(HEAP32[$2 >> 2] | 0);
label = 38;
break;
}
}
}
} else {
__THREW__ = 0;
invoke_iii(27, $1 | 0, $19 | 0) | 0;
$100 = __THREW__;
__THREW__ = 0;
if ($100 & 1) label = 34; else label = 38;
} while (0);
do if ((label | 0) == 38) {
$102 = ($35 | 0) != 0;
if ($102) {
__THREW__ = 0;
invoke_iii(27, $1 | 0, 53450) | 0;
$103 = __THREW__;
__THREW__ = 0;
if ($103 & 1) {
label = 34;
break;
}
__THREW__ = 0;
invoke_iii(27, $1 | 0, $35 | 0) | 0;
$105 = __THREW__;
__THREW__ = 0;
if ($105 & 1) {
label = 34;
break;
}
}
$107 = ($51 | 0) != 0;
if ($107) {
__THREW__ = 0;
invoke_iii(27, $1 | 0, 53450) | 0;
$108 = __THREW__;
__THREW__ = 0;
if ($108 & 1) {
label = 34;
break;
}
__THREW__ = 0;
invoke_iii(27, $1 | 0, $51 | 0) | 0;
$110 = __THREW__;
__THREW__ = 0;
if ($110 & 1) {
label = 34;
break;
}
}
if (!$52) _free($19);
if ($102) _free($35);
if ($107) _free($51);
$112 = $1 + 11 | 0;
__THREW__ = 0;
$117 = invoke_ii(21, ((HEAP8[$112 >> 0] | 0) < 0 ? HEAP32[$1 >> 2] | 0 : $1) | 0) | 0;
$118 = __THREW__;
__THREW__ = 0;
if ($118 & 1) {
$123 = ___cxa_find_matching_catch_2() | 0;
$$0 = tempRet0;
$$031 = $123;
break;
}
if ((HEAP8[$112 >> 0] | 0) >= 0) {
STACKTOP = sp;
return $117 | 0;
}
__ZdlPv(HEAP32[$1 >> 2] | 0);
STACKTOP = sp;
return $117 | 0;
} while (0);
if ((label | 0) == 34) {
$92 = ___cxa_find_matching_catch_2() | 0;
$$0 = tempRet0;
$$031 = $92;
}
if ((HEAP8[$1 + 11 >> 0] | 0) >= 0) ___resumeException($$031 | 0);
__ZdlPv(HEAP32[$1 >> 2] | 0);
___resumeException($$031 | 0);
return 0;
}
function __ZNK7Gesture17printPostureSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE18PostureChangeFlagsS6_($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $111 = 0, $117 = 0, $12 = 0, $122 = 0, $126 = 0, $13 = 0, $132 = 0, $137 = 0, $14 = 0, $141 = 0, $142 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $24 = 0, $26 = 0, $29 = 0, $33 = 0, $34 = 0, $39 = 0, $4 = 0, $44 = 0, $45 = 0, $6 = 0, $63 = 0, $64 = 0, $67 = 0, $75 = 0, $9 = 0, $93 = 0, $98 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$4 = sp;
$6 = HEAP8[$0 + 13 >> 0] | 0;
if (($6 & 13) == 13) {
$9 = $0 + 20 | 0;
$12 = HEAP32[(HEAP32[$9 >> 2] | 0) + 56 >> 2] | 0;
$13 = ($12 | 0) == 0;
$14 = $0 + 24 | 0;
$17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 56 >> 2] | 0;
$18 = ($17 | 0) == 0;
if ($13 | $18) {
$24 = (HEAPU8[$2 >> 0] | HEAPU8[$2 + 1 >> 0] << 8) & 64;
if ($13 ^ $18) {
$142 = $2;
$29 = $24;
label = 7;
} else {
$141 = $2;
$26 = $24;
label = 5;
}
} else {
$19 = __ZeqRK9HandshapeS1_($12, $17) | 0;
$21 = (HEAPU8[$2 >> 0] | HEAPU8[$2 + 1 >> 0] << 8) & 64;
if ($19) {
$141 = $2;
$26 = $21;
label = 5;
} else {
$142 = $2;
$29 = $21;
label = 7;
}
}
if ((label | 0) == 5) if (!($26 << 16 >> 16)) $34 = $141; else {
__ZNK19OneHAbstractPosture15printShapeSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE(HEAP32[$9 >> 2] | 0, $1);
$34 = $141;
} else if ((label | 0) == 7) {
__ZNK7Gesture19printSplitHandshapeERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEbb($0, $1, $29 << 16 >> 16 != 0, ((HEAPU8[$3 >> 0] | HEAPU8[$3 + 1 >> 0] << 8) & 64) != 0);
$34 = $142;
}
$33 = HEAPU8[$34 >> 0] | HEAPU8[$34 + 1 >> 0] << 8;
$39 = HEAPU8[$3 >> 0] | HEAPU8[$3 + 1 >> 0] << 8;
__ZNK7Gesture21printSplitOrientationERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEbbbb($0, $1, ($33 & 16) != 0, ($33 & 32) != 0, ($39 & 16) != 0, ($39 & 32) != 0);
$44 = $0 + 40 | 0;
$45 = HEAP32[$44 >> 2] | 0;
if ($45 | 0) if (HEAP32[$45 + 44 >> 2] | 0) {
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
HEAP8[$4 >> 0] = 60;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $4, 1) | 0, 51420, 17) | 0;
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, 1, 52811, HEAP32[(HEAP32[$44 >> 2] | 0) + 44 >> 2] | 0, HEAP32[17197] | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36571, 2) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6SiteID10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE((HEAP32[$14 >> 2] | 0) + 16 | 0, $1);
__ZNK6SiteID10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE((HEAP32[$9 >> 2] | 0) + 16 | 0, $1);
$63 = HEAP32[$9 >> 2] | 0;
$64 = $63 + 4 | 0;
$67 = (HEAPU16[$64 >> 1] | HEAPU8[$64 + 2 >> 0] << 16) & 255;
if (($67 + -1 | 0) >>> 0 < 11 | ($67 & 252 | 0) == 12) __ZNK10SiteIDPair10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE((HEAP32[$14 >> 2] | 0) + 4 | 0, $1); else __ZNK10SiteIDPair10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE($63 + 4 | 0, $1);
$75 = (HEAP16[36078] | 0) + -1 << 16 >> 16;
HEAP16[36078] = $75;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, $75 << 16 >> 16);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36574, 2) | 0, 51420, 17) | 0, 36571, 2) | 0;
STACKTOP = sp;
return;
}
__ZNK7Gesture19printSplitAbsTargetERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEbb($0, $1, ((HEAPU8[$34 >> 0] | HEAPU8[$34 + 1 >> 0] << 8) & 2) != 0, ((HEAPU8[$3 >> 0] | HEAPU8[$3 + 1 >> 0] << 8) & 2) != 0);
STACKTOP = sp;
return;
}
if (($6 & 12) == 12) {
__ZNK7Gesture19printSplitHandshapeERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEbb($0, $1, ((HEAPU8[$2 >> 0] | HEAPU8[$2 + 1 >> 0] << 8) & 64) != 0, ((HEAPU8[$3 >> 0] | HEAPU8[$3 + 1 >> 0] << 8) & 64) != 0);
$93 = HEAPU8[$2 >> 0] | HEAPU8[$2 + 1 >> 0] << 8;
$98 = HEAPU8[$3 >> 0] | HEAPU8[$3 + 1 >> 0] << 8;
__ZNK7Gesture21printSplitOrientationERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEbbbb($0, $1, ($93 & 16) != 0, ($93 & 32) != 0, ($98 & 16) != 0, ($98 & 32) != 0);
__ZNK7Gesture19printSplitAbsTargetERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEbb($0, $1, ((HEAPU8[$2 >> 0] | HEAPU8[$2 + 1 >> 0] << 8) & 2) != 0, ((HEAPU8[$3 >> 0] | HEAPU8[$3 + 1 >> 0] << 8) & 2) != 0);
STACKTOP = sp;
return;
}
if (!($6 & 2)) {
$126 = HEAPU8[$2 >> 0] | HEAPU8[$2 + 1 >> 0] << 8;
if (!($126 & 64)) $132 = $126; else {
__ZNK19OneHAbstractPosture15printShapeSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE(HEAP32[$0 + 20 >> 2] | 0, $1);
$132 = HEAPU8[$2 >> 0] | HEAPU8[$2 + 1 >> 0] << 8;
}
if (!($132 & 48)) $137 = $132; else {
__ZNK19OneHAbstractPosture21printOrientationSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE(HEAP32[$0 + 20 >> 2] | 0, $1);
$137 = HEAPU8[$2 >> 0] | HEAPU8[$2 + 1 >> 0] << 8;
}
if (!($137 & 2)) {
STACKTOP = sp;
return;
}
__ZNK19OneHAbstractPosture18printLocationSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE(HEAP32[$0 + 20 >> 2] | 0, $1);
STACKTOP = sp;
return;
} else {
$111 = HEAPU8[$3 >> 0] | HEAPU8[$3 + 1 >> 0] << 8;
if (!($111 & 64)) $117 = $111; else {
__ZNK19OneHAbstractPosture15printShapeSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE(HEAP32[$0 + 24 >> 2] | 0, $1);
$117 = HEAPU8[$3 >> 0] | HEAPU8[$3 + 1 >> 0] << 8;
}
if (!($117 & 48)) $122 = $117; else {
__ZNK19OneHAbstractPosture21printOrientationSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE(HEAP32[$0 + 24 >> 2] | 0, $1);
$122 = HEAPU8[$3 >> 0] | HEAPU8[$3 + 1 >> 0] << 8;
}
if (!($122 & 2)) {
STACKTOP = sp;
return;
}
__ZNK19OneHAbstractPosture18printLocationSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE(HEAP32[$0 + 24 >> 2] | 0, $1);
STACKTOP = sp;
return;
}
}
function __ZN18SiGMLConstellation24AnalyseHandConstellationEP7XMLCellb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0 = 0, $$012$i$i = 0, $$01215$i$i = 0, $$01216$i$i = 0, $$025 = 0, $$02543 = 0, $$026 = 0, $$02642 = 0, $$sink$i$i = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $22 = 0, $3 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = f0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $5 = 0, $53 = 0, $55 = 0, $56 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $7 = 0, $73 = 0, $75 = 0, $76 = 0, $78 = 0, $81 = 0, $82 = 0, $9 = 0, $95 = 0, $tmpcast$byval_copy = 0, $vararg_buffer12 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 80 | 0;
$tmpcast$byval_copy = sp + 64 | 0;
$vararg_buffer12 = sp + 48 | 0;
$vararg_buffer9 = sp + 40 | 0;
$vararg_buffer7 = sp + 32 | 0;
$3 = sp + 52 | 0;
$4 = sp + 60 | 0;
$5 = sp + 56 | 0;
$6 = sp + 62 | 0;
$7 = sp + 58 | 0;
$9 = HEAP32[$1 + 8 >> 2] | 0;
$11 = HEAP32[$9 + 12 >> 2] | 0;
switch ($11 | 0) {
case 0:
{
if (0) __Z7eprintfPKcz(25570, sp);
break;
}
case 1:
{
$14 = HEAP32[HEAP32[$9 >> 2] >> 2] | 0;
if (!0) {
$$0 = $14;
$$025 = 0;
$$026 = 0;
label = 12;
} else {
__Z7eprintfPKcz(25596, sp + 8 | 0);
$$0 = $14;
$$025 = 0;
$$026 = 0;
label = 12;
}
break;
}
case 2:
{
$16 = HEAP32[$9 >> 2] | 0;
$18 = HEAP32[$16 + 4 >> 2] | 0;
$19 = HEAP32[$16 >> 2] | 0;
if (!0) {
$$02543 = $19;
$$02642 = $18;
label = 14;
} else {
__Z7eprintfPKcz(25630, sp + 16 | 0);
$$02543 = $19;
$$02642 = $18;
label = 14;
}
break;
}
default:
{
if (($11 | 0) > 1) {
$22 = HEAP32[$9 >> 2] | 0;
$103 = HEAP32[$22 >> 2] | 0;
$104 = HEAP32[$22 + 4 >> 2] | 0;
$105 = HEAP32[$22 + 8 >> 2] | 0;
} else {
$103 = 0;
$104 = 0;
$105 = 0;
}
if (!0) {
$$0 = $105;
$$025 = $103;
$$026 = $104;
label = 12;
} else {
__Z7eprintfPKcz(25673, sp + 24 | 0);
$$0 = $105;
$$025 = $103;
$$026 = $104;
label = 12;
}
}
}
if ((label | 0) == 12) if (!$$0) {
$$02543 = $$025;
$$02642 = $$026;
label = 14;
} else {
$31 = HEAP32[$$0 + 4 >> 2] | 0;
$32 = HEAP16[36081] | 0;
HEAP16[$4 >> 1] = $32;
HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$4 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$4 + 1 >> 0] | 0;
__Z17SiteIDFromAttribsPK7HashAnyIPKcS1_E9Mirroringbbb($3, $31, $tmpcast$byval_copy, 0, 0, $2);
$33 = $0 + 72 | 0;
HEAP16[$33 >> 1] = HEAP16[$3 >> 1] | 0;
HEAP8[$33 + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0;
HEAP16[$5 >> 1] = $32;
HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$5 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$5 + 1 >> 0] | 0;
__Z17SiteIDFromAttribsPK7HashAnyIPKcS1_E9Mirroringbbb($3, $31, $tmpcast$byval_copy, 1, 0, $2);
$34 = $0 + 76 | 0;
HEAP16[$34 >> 1] = HEAP16[$3 >> 1] | 0;
HEAP8[$34 + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0;
$35 = Math_fround(__Z23HashAttribs_attrib_REALPK7HashAnyIPKcS1_ES1_f($31, 25448, Math_fround(.5)));
HEAPF32[$0 + 80 >> 2] = $35;
$$02543 = $$025;
$$02642 = $$026;
label = 14;
}
if ((label | 0) == 14) {
if ($$02642 | 0) {
$39 = HEAP32[$$02642 + 4 >> 2] | 0;
HEAP16[$6 >> 1] = HEAP16[36081] | 0;
HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$6 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$6 + 1 >> 0] | 0;
__Z17SiteIDFromAttribsPK7HashAnyIPKcS1_E9Mirroringbbb($3, $39, $tmpcast$byval_copy, 0, 1, $2);
$41 = $0 + 64 | 0;
HEAP16[$41 >> 1] = HEAP16[$3 >> 1] | 0;
HEAP8[$41 + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0;
$42 = HEAP32[$41 >> 2] | 0;
if ((HEAP32[16607] ^ $42) & 16777215 | 0) {
if (($42 & 6291456) >>> 0 < 2097152 | 1 == 0) $55 = $42; else {
__Z7LogTimev() | 0;
$53 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17197] | 0, ((HEAPU16[$41 >> 1] | HEAPU8[$41 + 2 >> 0] << 16) & 16777215) >>> 20 & 7) | 0;
HEAP32[$vararg_buffer7 >> 2] = $53;
__Z7eprintfPKcz(25463, $vararg_buffer7);
$55 = HEAPU16[$41 >> 1] | HEAPU8[$41 + 2 >> 0] << 16;
}
$56 = $55 & 9437183 | 1048576;
HEAP16[$41 >> 1] = $56;
HEAP8[$41 + 2 >> 0] = $56 >>> 16;
}
}
if ($$02543 | 0) {
$59 = HEAP32[$$02543 + 4 >> 2] | 0;
HEAP16[$7 >> 1] = HEAP16[36081] | 0;
HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$7 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$7 + 1 >> 0] | 0;
__Z17SiteIDFromAttribsPK7HashAnyIPKcS1_E9Mirroringbbb($3, $59, $tmpcast$byval_copy, 0, 0, $2);
$61 = $0 + 68 | 0;
HEAP16[$61 >> 1] = HEAP16[$3 >> 1] | 0;
HEAP8[$61 + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0;
$62 = HEAP32[$61 >> 2] | 0;
if ((HEAP32[16607] ^ $62) & 16777215 | 0) {
if (($62 & 6291456) >>> 0 < 2097152 | 1 == 0) $75 = $62; else {
__Z7LogTimev() | 0;
$73 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17197] | 0, ((HEAPU16[$61 >> 1] | HEAPU8[$61 + 2 >> 0] << 16) & 16777215) >>> 20 & 7) | 0;
HEAP32[$vararg_buffer9 >> 2] = $73;
__Z7eprintfPKcz(25463, $vararg_buffer9);
$75 = HEAPU16[$61 >> 1] | HEAPU8[$61 + 2 >> 0] << 16;
}
$76 = $75 & 9437183 | 1048576;
HEAP16[$61 >> 1] = $76;
HEAP8[$61 + 2 >> 0] = $76 >>> 16;
}
}
}
$78 = HEAP32[$1 + 4 >> 2] | 0;
$81 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(52811, HEAP32[$78 + 4 >> 2] | 0) | 0;
$82 = HEAP32[$78 >> 2] | 0;
L31 : do if ((HEAP16[$82 + ($81 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i = HEAP32[$82 + ($81 << 3) >> 2] | 0;
if (!$$01215$i$i) label = 29; else {
$$01216$i$i = $$01215$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(52811, HEAP32[$$01216$i$i >> 2] | 0) | 0) break;
$$012$i$i = HEAP32[$$01216$i$i + 8 >> 2] | 0;
if (!$$012$i$i) {
label = 29;
break L31;
} else $$01216$i$i = $$012$i$i;
}
$$sink$i$i = $$01216$i$i + 4 | 0;
}
} else label = 29; while (0);
if ((label | 0) == 29) $$sink$i$i = $78 + 20 | 0;
$95 = __ZN5SiGML16convertProximityEPKc(HEAP32[$$sink$i$i >> 2] | 0) | 0;
HEAP32[$0 + 48 >> 2] = ($95 | 0) == 0 ? 3 : $95;
if (!0) {
STACKTOP = sp;
return;
}
__Z7eprintfPKcz(25720, $vararg_buffer12);
__Z5eputsPKc(25742);
__ZNK6SiteID5printEP8_IO_FILE($0 + 64 | 0, HEAP32[16082] | 0);
__Z5eputcc(10);
__Z5eputsPKc(25753);
__ZNK6SiteID5printEP8_IO_FILE($0 + 68 | 0, HEAP32[16082] | 0);
__Z5eputcc(10);
STACKTOP = sp;
return;
}
function __ZN5SiGML15handOrientationER10Quaternionb10Direction310Direction2($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$021 = 0, $$pre = f0, $$pre22 = f0, $$pre23 = f0, $103 = f0, $110 = f0, $118 = f0, $120 = f0, $121 = f0, $122 = f0, $123 = f0, $125 = f0, $126 = f0, $127 = f0, $129 = f0, $130 = f0, $131 = f0, $133 = f0, $134 = f0, $141 = f0, $148 = f0, $156 = f0, $16 = 0, $19 = f0, $20 = 0, $21 = f0, $24 = f0, $27 = f0, $28 = 0, $29 = 0, $30 = 0, $31 = f0, $34 = f0, $36 = 0, $37 = f0, $38 = f0, $4 = 0, $40 = f0, $42 = f0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = f0, $48 = f0, $49 = f0, $5 = 0, $50 = 0, $51 = f0, $52 = f0, $54 = f0, $55 = f0, $56 = f0, $58 = f0, $59 = 0, $6 = f0, $60 = f0, $61 = f0, $63 = f0, $70 = f0, $77 = f0, $85 = f0, $86 = f0, $87 = f0, $88 = f0, $90 = f0, $91 = f0, $93 = f0, $94 = f0, $96 = f0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$4 = sp + 32 | 0;
$5 = sp + 16 | 0;
$6 = Math_fround(HEAPF32[$2 >> 2]);
if ($6 == Math_fround(0.0)) if (Math_fround(HEAPF32[$2 + 4 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$2 + 8 >> 2]) == Math_fround(0.0)) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(53857, $vararg_buffer);
$$021 = 0;
STACKTOP = sp;
return $$021 | 0;
}
$16 = $3 + 4 | 0;
if (Math_fround(HEAPF32[$3 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$16 >> 2]) == Math_fround(0.0)) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(53893, $vararg_buffer1);
$$021 = 0;
STACKTOP = sp;
return $$021 | 0;
}
$19 = Math_fround($6 * $6);
$20 = $2 + 8 | 0;
$21 = Math_fround(HEAPF32[$20 >> 2]);
$24 = Math_fround(Math_sqrt(Math_fround($19 + Math_fround($21 * $21))));
$27 = Math_fround(+Math_atan2(+Math_fround(HEAPF32[$2 + 4 >> 2]), +$24));
HEAPF32[$4 >> 2] = Math_fround(0.0);
$28 = $4 + 4 | 0;
HEAPF32[$28 >> 2] = Math_fround(0.0);
$29 = $4 + 8 | 0;
HEAPF32[$29 >> 2] = Math_fround(0.0);
$30 = $4 + 12 | 0;
HEAPF32[$30 >> 2] = Math_fround(1.0);
__ZN10Quaternion15setFromVecAngleEffffb($4, Math_fround(-1.0), Math_fround(0.0), Math_fround(0.0), $27, 1);
$31 = Math_fround(HEAPF32[$2 >> 2]);
__ZN10Quaternion15setFromVecAngleEffffb($0, Math_fround(0.0), Math_fround(1.0), Math_fround(0.0), Math_fround(+Math_atan2(+$31, +Math_fround(HEAPF32[$20 >> 2]))), 1);
$34 = Math_fround(HEAPF32[$16 >> 2]);
$36 = Math_fround(HEAPF32[$20 >> 2]) >= Math_fround(0.0);
$37 = Math_fround(HEAPF32[$3 >> 2]);
$38 = Math_fround(-$37);
$40 = Math_fround(+Math_atan2(+$34, +($36 ? $37 : $38)));
$42 = Math_fround($40 + Math_fround(HEAPF32[17842]));
HEAPF32[$5 >> 2] = Math_fround(0.0);
$43 = $5 + 4 | 0;
HEAPF32[$43 >> 2] = Math_fround(0.0);
$44 = $5 + 8 | 0;
HEAPF32[$44 >> 2] = Math_fround(0.0);
$45 = $5 + 12 | 0;
HEAPF32[$45 >> 2] = Math_fround(1.0);
__ZN10Quaternion15setFromVecAngleEffffb($5, Math_fround(0.0), Math_fround(0.0), Math_fround(1.0), $1 ? $40 : $42, 1);
$46 = $0 + 4 | 0;
$47 = Math_fround(HEAPF32[$46 >> 2]);
$48 = Math_fround(HEAPF32[$29 >> 2]);
$49 = Math_fround($47 * $48);
$50 = $0 + 8 | 0;
$51 = Math_fround(HEAPF32[$50 >> 2]);
$52 = Math_fround(HEAPF32[$28 >> 2]);
$54 = Math_fround($49 - Math_fround($51 * $52));
$55 = Math_fround(HEAPF32[$0 >> 2]);
$56 = Math_fround(HEAPF32[$30 >> 2]);
$58 = Math_fround($54 + Math_fround($55 * $56));
$59 = $0 + 12 | 0;
$60 = Math_fround(HEAPF32[$59 >> 2]);
$61 = Math_fround(HEAPF32[$4 >> 2]);
$63 = Math_fround($58 + Math_fround($60 * $61));
$70 = Math_fround(Math_fround($52 * $60) + Math_fround(Math_fround($47 * $56) + Math_fround(Math_fround($51 * $61) - Math_fround($48 * $55))));
$77 = Math_fround(Math_fround($48 * $60) + Math_fround(Math_fround($51 * $56) + Math_fround(Math_fround($52 * $55) - Math_fround($47 * $61))));
$85 = Math_fround(Math_fround($56 * $60) + Math_fround(Math_fround(Math_fround(-Math_fround($55 * $61)) - Math_fround($47 * $52)) - Math_fround($48 * $51)));
$86 = Math_fround(HEAPF32[$44 >> 2]);
$87 = Math_fround($70 * $86);
$88 = Math_fround(HEAPF32[$43 >> 2]);
$90 = Math_fround($87 - Math_fround($77 * $88));
$91 = Math_fround(HEAPF32[$45 >> 2]);
$93 = Math_fround($90 + Math_fround($63 * $91));
$94 = Math_fround(HEAPF32[$5 >> 2]);
$96 = Math_fround($93 + Math_fround($85 * $94));
$103 = Math_fround(Math_fround($85 * $88) + Math_fround(Math_fround($70 * $91) + Math_fround(Math_fround($77 * $94) - Math_fround($86 * $63))));
$110 = Math_fround(Math_fround($85 * $86) + Math_fround(Math_fround($77 * $91) + Math_fround(Math_fround($88 * $63) - Math_fround($70 * $94))));
$118 = Math_fround(Math_fround($85 * $91) + Math_fround(Math_fround(Math_fround(-Math_fround($63 * $94)) - Math_fround($70 * $88)) - Math_fround($77 * $86)));
HEAPF32[$0 >> 2] = $96;
HEAPF32[$46 >> 2] = $103;
HEAPF32[$50 >> 2] = $110;
HEAPF32[$59 >> 2] = $118;
if ($118 < Math_fround(0.0)) {
__ZN10Quaternion7setFlipEv($0);
$$pre = Math_fround(HEAPF32[$46 >> 2]);
$$pre22 = Math_fround(HEAPF32[$50 >> 2]);
$$pre23 = Math_fround(HEAPF32[$0 >> 2]);
$122 = $$pre;
$125 = $$pre22;
$129 = $$pre23;
$133 = Math_fround(HEAPF32[$59 >> 2]);
} else {
$122 = $103;
$125 = $110;
$129 = $96;
$133 = $118;
}
$120 = Math_fround(HEAPF32[16665]);
$121 = Math_fround($122 * $120);
$123 = Math_fround(HEAPF32[16664]);
$126 = Math_fround($121 - Math_fround($125 * $123));
$127 = Math_fround(HEAPF32[16666]);
$130 = Math_fround($126 + Math_fround($129 * $127));
$131 = Math_fround(HEAPF32[16663]);
$134 = Math_fround($130 + Math_fround($133 * $131));
$141 = Math_fround(Math_fround($123 * $133) + Math_fround(Math_fround($122 * $127) + Math_fround(Math_fround($125 * $131) - Math_fround($120 * $129))));
$148 = Math_fround(Math_fround($120 * $133) + Math_fround(Math_fround($125 * $127) + Math_fround(Math_fround($123 * $129) - Math_fround($122 * $131))));
$156 = Math_fround(Math_fround($127 * $133) + Math_fround(Math_fround(Math_fround(-Math_fround($129 * $131)) - Math_fround($122 * $123)) - Math_fround($120 * $125)));
HEAPF32[$0 >> 2] = $134;
HEAPF32[$46 >> 2] = $141;
HEAPF32[$50 >> 2] = $148;
HEAPF32[$59 >> 2] = $156;
$$021 = 1;
STACKTOP = sp;
return $$021 | 0;
}
function __ZN14OneArmAnimatorD2Ev($0) {
$0 = $0 | 0;
var $$0 = 0, $$09 = 0, $$1 = 0, $$110 = 0, $$2 = 0, $$211 = 0, $$3 = 0, $$312 = 0, $$4 = 0, $$413 = 0, $$lcssa = 0, $1 = 0, $101 = 0, $102 = 0, $107 = 0, $109 = 0, $11 = 0, $110 = 0, $115 = 0, $12 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $35 = 0, $37 = 0, $38 = 0, $43 = 0, $45 = 0, $46 = 0, $49 = 0, $50 = 0, $54 = 0, $57 = 0, $59 = 0, $61 = 0, $63 = 0, $66 = 0, $68 = 0, $7 = 0, $70 = 0, $71 = 0, $76 = 0, $78 = 0, $80 = 0, $82 = 0, $83 = 0, $85 = 0, $86 = 0, $88 = 0, $9 = 0, $91 = 0, $94 = 0, $99 = 0, label = 0;
$1 = $0 + 16 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if (!$2) label = 5; else {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0, $2 | 0);
$7 = __THREW__;
__THREW__ = 0;
if ($7 & 1) label = 4; else {
HEAP32[$1 >> 2] = 0;
label = 5;
}
}
L4 : do if ((label | 0) == 5) {
$11 = $0 + 20 | 0;
$12 = HEAP32[$11 >> 2] | 0;
if ($12 | 0) {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$12 >> 2] | 0) + 4 >> 2] | 0, $12 | 0);
$99 = __THREW__;
__THREW__ = 0;
if ($99 & 1) {
label = 4;
break;
}
HEAP32[$11 >> 2] = 0;
}
$101 = $0 + 24 | 0;
$102 = HEAP32[$101 >> 2] | 0;
if ($102 | 0) {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$102 >> 2] | 0) + 4 >> 2] | 0, $102 | 0);
$107 = __THREW__;
__THREW__ = 0;
if ($107 & 1) {
label = 4;
break;
}
HEAP32[$101 >> 2] = 0;
}
$109 = $0 + 28 | 0;
$110 = HEAP32[$109 >> 2] | 0;
if ($110 | 0) {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$110 >> 2] | 0) + 4 >> 2] | 0, $110 | 0);
$115 = __THREW__;
__THREW__ = 0;
if ($115 & 1) {
label = 4;
break;
}
HEAP32[$109 >> 2] = 0;
}
$17 = $0 + 12 | 0;
$14 = HEAP32[$17 >> 2] | 0;
do if ($14 | 0) {
__THREW__ = 0;
invoke_vi(102, $14 | 0);
$15 = __THREW__;
__THREW__ = 0;
if ($15 & 1) {
$18 = ___cxa_find_matching_catch_2() | 0;
$19 = tempRet0;
__ZdlPv($14);
$$0 = $19;
$$09 = $18;
label = 23;
break L4;
} else {
__ZdlPv($14);
HEAP32[$17 >> 2] = 0;
break;
}
} while (0);
$20 = $0 + 976 | 0;
$21 = HEAP32[$20 >> 2] | 0;
do if ($21 | 0) {
__THREW__ = 0;
invoke_vi(102, $21 | 0);
$23 = __THREW__;
__THREW__ = 0;
if ($23 & 1) {
$25 = ___cxa_find_matching_catch_2() | 0;
$26 = tempRet0;
__ZdlPv($21);
$$0 = $26;
$$09 = $25;
label = 23;
break L4;
} else {
__ZdlPv($21);
HEAP32[$20 >> 2] = 0;
break;
}
} while (0);
$27 = $0 + 980 | 0;
$28 = $0 + 2912 | 0;
__THREW__ = 0;
invoke_vi(15, $28 | 0);
$29 = __THREW__;
__THREW__ = 0;
if ($29 & 1) $$lcssa = $28; else {
$31 = $0 + 2268 | 0;
__THREW__ = 0;
invoke_vi(15, $31 | 0);
$32 = __THREW__;
__THREW__ = 0;
if ($32 & 1) $$lcssa = $31; else {
$82 = $0 + 1624 | 0;
__THREW__ = 0;
invoke_vi(15, $82 | 0);
$83 = __THREW__;
__THREW__ = 0;
if ($83 & 1) $$lcssa = $82; else {
$85 = $0 + 980 | 0;
__THREW__ = 0;
invoke_vi(15, $85 | 0);
$86 = __THREW__;
__THREW__ = 0;
if ($86 & 1) $$lcssa = $85; else {
__THREW__ = 0;
$88 = __THREW__;
__THREW__ = 0;
if ($88 & 1) {
$59 = ___cxa_find_matching_catch_2() | 0;
$$2 = tempRet0;
$$211 = $59;
label = 28;
break;
}
__THREW__ = 0;
invoke_vi(15, $0 + 224 | 0);
$35 = __THREW__;
__THREW__ = 0;
if ($35 & 1) {
$63 = ___cxa_find_matching_catch_2() | 0;
$$3 = tempRet0;
$$312 = $63;
label = 30;
break;
}
$37 = $0 + 220 | 0;
$38 = HEAP32[$37 >> 2] | 0;
if (!$38) return;
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$38 >> 2] | 0) + 4 >> 2] | 0, $38 | 0);
$43 = __THREW__;
__THREW__ = 0;
if ($43 & 1) {
$68 = ___cxa_find_matching_catch_2() | 0;
$$4 = tempRet0;
$$413 = $68;
label = 33;
break;
}
HEAP32[$37 >> 2] = 0;
return;
}
}
}
}
$45 = ___cxa_find_matching_catch_2() | 0;
$46 = tempRet0;
if (($27 | 0) == ($$lcssa | 0)) {
$$1 = $46;
$$110 = $45;
label = 26;
} else {
$49 = $$lcssa;
while (1) {
$49 = $49 + -644 | 0;
__THREW__ = 0;
invoke_vi(15, $49 | 0);
$50 = __THREW__;
__THREW__ = 0;
if ($50 & 1) break L4;
if (($49 | 0) == ($27 | 0)) {
$$1 = $46;
$$110 = $45;
label = 26;
break;
}
}
}
} while (0);
if ((label | 0) == 4) {
$9 = ___cxa_find_matching_catch_2() | 0;
$$0 = tempRet0;
$$09 = $9;
label = 23;
}
if ((label | 0) == 23) {
__THREW__ = 0;
invoke_vi(15, $0 + 2912 | 0);
$54 = __THREW__;
__THREW__ = 0;
if (!($54 & 1)) {
__THREW__ = 0;
invoke_vi(15, $0 + 2268 | 0);
$57 = __THREW__;
__THREW__ = 0;
if (!($57 & 1)) {
__THREW__ = 0;
invoke_vi(15, $0 + 1624 | 0);
$91 = __THREW__;
__THREW__ = 0;
if (!($91 & 1)) {
__THREW__ = 0;
invoke_vi(15, $0 + 980 | 0);
$94 = __THREW__;
__THREW__ = 0;
if (!($94 & 1)) {
$$1 = $$0;
$$110 = $$09;
label = 26;
}
}
}
}
}
if ((label | 0) == 26) {
__THREW__ = 0;
$61 = __THREW__;
__THREW__ = 0;
if (!($61 & 1)) {
$$2 = $$1;
$$211 = $$110;
label = 28;
}
}
if ((label | 0) == 28) {
__THREW__ = 0;
invoke_vi(15, $0 + 224 | 0);
$66 = __THREW__;
__THREW__ = 0;
if (!($66 & 1)) {
$$3 = $$2;
$$312 = $$211;
label = 30;
}
}
if ((label | 0) == 30) {
$70 = $0 + 220 | 0;
$71 = HEAP32[$70 >> 2] | 0;
if (!$71) {
$$4 = $$3;
$$413 = $$312;
label = 33;
} else {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$71 >> 2] | 0) + 4 >> 2] | 0, $71 | 0);
$76 = __THREW__;
__THREW__ = 0;
if (!($76 & 1)) {
HEAP32[$70 >> 2] = 0;
$$4 = $$3;
$$413 = $$312;
label = 33;
}
}
}
if ((label | 0) == 33) {
__THREW__ = 0;
$78 = __THREW__;
__THREW__ = 0;
if (!($78 & 1)) ___resumeException($$413 | 0);
}
$80 = ___cxa_find_matching_catch_3(0) | 0;
___clang_call_terminate($80);
}
function __ZN20QuaternionControllerC2Ev($0) {
$0 = $0 | 0;
var $107 = 0, $88 = 0, $91 = 0, $95 = 0, dest = 0, stop = 0;
HEAPF32[$0 + 4 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 8 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 12 >> 2] = Math_fround(1.0);
HEAP32[$0 >> 2] = 976;
HEAPF32[$0 + 20 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 24 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 28 >> 2] = Math_fround(1.0);
HEAP32[$0 + 16 >> 2] = 860;
HEAPF32[$0 + 32 >> 2] = Math_fround(10.0);
HEAPF32[$0 + 36 >> 2] = Math_fround(.0500000007);
HEAPF32[$0 + 40 >> 2] = Math_fround(7.0);
HEAPF32[$0 + 44 >> 2] = Math_fround(0.0);
HEAP8[$0 + 48 >> 0] = 0;
HEAPF32[$0 + 52 >> 2] = Math_fround(4.0);
HEAPF32[$0 + 56 >> 2] = Math_fround(15.0e3);
HEAPF32[$0 + 60 >> 2] = Math_fround(15.0);
HEAPF32[$0 + 64 >> 2] = Math_fround(2.0e4);
HEAPF32[$0 + 68 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 72 >> 2] = Math_fround(.0199999996);
HEAP32[$0 + 76 >> 2] = 3;
HEAPF32[$0 + 80 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 84 >> 2] = Math_fround(-1.0);
dest = $0 + 88 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAPF32[$0 + 128 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 132 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 136 >> 2] = Math_fround(1.0);
HEAP32[$0 + 124 >> 2] = 860;
HEAPF32[$0 + 140 >> 2] = Math_fround(10.0);
HEAPF32[$0 + 144 >> 2] = Math_fround(.0500000007);
HEAPF32[$0 + 148 >> 2] = Math_fround(7.0);
HEAPF32[$0 + 152 >> 2] = Math_fround(0.0);
HEAP8[$0 + 156 >> 0] = 0;
HEAPF32[$0 + 160 >> 2] = Math_fround(4.0);
HEAPF32[$0 + 164 >> 2] = Math_fround(15.0e3);
HEAPF32[$0 + 168 >> 2] = Math_fround(15.0);
HEAPF32[$0 + 172 >> 2] = Math_fround(2.0e4);
HEAPF32[$0 + 176 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 180 >> 2] = Math_fround(.0199999996);
HEAP32[$0 + 184 >> 2] = 3;
HEAPF32[$0 + 188 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 192 >> 2] = Math_fround(-1.0);
dest = $0 + 196 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAPF32[$0 + 236 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 240 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 244 >> 2] = Math_fround(1.0);
HEAP32[$0 + 232 >> 2] = 860;
HEAPF32[$0 + 248 >> 2] = Math_fround(10.0);
HEAPF32[$0 + 252 >> 2] = Math_fround(.0500000007);
HEAPF32[$0 + 256 >> 2] = Math_fround(7.0);
HEAPF32[$0 + 260 >> 2] = Math_fround(0.0);
HEAP8[$0 + 264 >> 0] = 0;
HEAPF32[$0 + 268 >> 2] = Math_fround(4.0);
HEAPF32[$0 + 272 >> 2] = Math_fround(15.0e3);
HEAPF32[$0 + 276 >> 2] = Math_fround(15.0);
HEAPF32[$0 + 280 >> 2] = Math_fround(2.0e4);
HEAPF32[$0 + 284 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 288 >> 2] = Math_fround(.0199999996);
HEAP32[$0 + 292 >> 2] = 3;
HEAPF32[$0 + 296 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 300 >> 2] = Math_fround(-1.0);
dest = $0 + 304 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAPF32[$0 + 344 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 348 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 352 >> 2] = Math_fround(1.0);
HEAP32[$0 + 340 >> 2] = 860;
HEAPF32[$0 + 356 >> 2] = Math_fround(10.0);
HEAPF32[$0 + 360 >> 2] = Math_fround(.0500000007);
HEAPF32[$0 + 364 >> 2] = Math_fround(7.0);
HEAPF32[$0 + 368 >> 2] = Math_fround(0.0);
HEAP8[$0 + 372 >> 0] = 0;
HEAPF32[$0 + 376 >> 2] = Math_fround(4.0);
HEAPF32[$0 + 380 >> 2] = Math_fround(15.0e3);
HEAPF32[$0 + 384 >> 2] = Math_fround(15.0);
HEAPF32[$0 + 388 >> 2] = Math_fround(2.0e4);
HEAPF32[$0 + 392 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 396 >> 2] = Math_fround(.0199999996);
HEAP32[$0 + 400 >> 2] = 3;
HEAPF32[$0 + 404 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 408 >> 2] = Math_fround(-1.0);
dest = $0 + 412 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[$0 + 448 >> 2] = 3;
HEAPF32[$0 + 452 >> 2] = Math_fround(15.0);
HEAPF32[$0 + 456 >> 2] = Math_fround(.0500000007);
HEAPF32[$0 + 460 >> 2] = Math_fround(5.0);
HEAPF32[$0 + 464 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 468 >> 2] = Math_fround(4.0);
HEAPF32[$0 + 472 >> 2] = Math_fround(15.0);
HEAPF32[$0 + 476 >> 2] = Math_fround(1.0);
$88 = $0 + 480 | 0;
HEAP32[$88 >> 2] = 0;
HEAP32[$88 + 4 >> 2] = 0;
HEAP32[$88 + 8 >> 2] = 0;
HEAP32[$88 + 12 >> 2] = 0;
HEAPF32[$0 + 496 >> 2] = Math_fround(1.0);
$91 = $0 + 500 | 0;
HEAPF32[$91 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 504 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 508 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 512 >> 2] = Math_fround(1.0);
$95 = $0 + 516 | 0;
HEAPF32[$95 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 520 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 524 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 528 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 532 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 536 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 540 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 544 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 548 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 552 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 556 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 560 >> 2] = Math_fround(1.0);
$107 = $0 + 564 | 0;
HEAPF32[$107 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 568 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 572 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 576 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 580 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 584 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 588 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 592 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 596 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 600 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 604 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 608 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 612 >> 2] = Math_fround(2.0e4);
HEAPF32[$0 + 616 >> 2] = Math_fround(15.0e3);
HEAPF32[$0 + 620 >> 2] = Math_fround(.0199999996);
HEAPF32[$0 + 628 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 632 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 636 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 640 >> 2] = Math_fround(1.0);
__ZN10Quaternion10setZeroVecEv($107);
__ZN10Quaternion10setZeroVecEv($91);
__ZN10Quaternion10setZeroVecEv($0 + 484 | 0);
__ZN10Quaternion10setZeroVecEv($95);
return;
}
function ___floatscan($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0 = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107127 = 0, $$0113 = 0, $$0114 = 0.0, $$1$lcssa = 0, $$1108 = 0, $$1128 = 0, $$2 = 0, $$2109125 = 0, $$3110 = 0, $$3126 = 0, $$4 = 0, $$4111 = 0, $$5 = 0, $$6 = 0, $$in = 0, $102 = 0, $106 = 0, $116 = 0, $118 = 0, $12 = 0, $126 = 0, $18 = 0, $19 = 0, $3 = 0, $32 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $5 = 0, $63 = 0, $70 = 0, $72 = 0, $80 = 0, $85 = 0, $93 = 0, label = 0;
switch ($1 | 0) {
case 0:
{
$$0105$ph = -149;
$$0106$ph = 24;
label = 4;
break;
}
case 1:
{
$$0105$ph = -1074;
$$0106$ph = 53;
label = 4;
break;
}
case 2:
{
$$0105$ph = -1074;
$$0106$ph = 53;
label = 4;
break;
}
default:
$$0114 = 0.0;
}
L4 : do if ((label | 0) == 4) {
$3 = $0 + 4 | 0;
$4 = $0 + 100 | 0;
do {
$5 = HEAP32[$3 >> 2] | 0;
if ($5 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
HEAP32[$3 >> 2] = $5 + 1;
$12 = HEAPU8[$5 >> 0] | 0;
} else $12 = ___shgetc($0) | 0;
} while ((_isspace($12) | 0) != 0);
L13 : do switch ($12 | 0) {
case 43:
case 45:
{
$18 = 1 - ((($12 | 0) == 45 & 1) << 1) | 0;
$19 = HEAP32[$3 >> 2] | 0;
if ($19 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
HEAP32[$3 >> 2] = $19 + 1;
$$0 = HEAPU8[$19 >> 0] | 0;
$$0113 = $18;
break L13;
} else {
$$0 = ___shgetc($0) | 0;
$$0113 = $18;
break L13;
}
break;
}
default:
{
$$0 = $12;
$$0113 = 1;
}
} while (0);
$$0107127 = 0;
$$1128 = $$0;
while (1) {
if (($$1128 | 32 | 0) != (HEAP8[63225 + $$0107127 >> 0] | 0)) {
$$0107$lcssa = $$0107127;
$$1$lcssa = $$1128;
break;
}
do if ($$0107127 >>> 0 < 7) {
$32 = HEAP32[$3 >> 2] | 0;
if ($32 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
HEAP32[$3 >> 2] = $32 + 1;
$$2 = HEAPU8[$32 >> 0] | 0;
break;
} else {
$$2 = ___shgetc($0) | 0;
break;
}
} else $$2 = $$1128; while (0);
$39 = $$0107127 + 1 | 0;
if ($39 >>> 0 < 8) {
$$0107127 = $39;
$$1128 = $$2;
} else {
$$0107$lcssa = $39;
$$1$lcssa = $$2;
break;
}
}
L29 : do switch ($$0107$lcssa | 0) {
case 8:
break;
case 3:
{
label = 23;
break;
}
default:
{
$42 = ($2 | 0) != 0;
if ($42 & $$0107$lcssa >>> 0 > 3) if (($$0107$lcssa | 0) == 8) break L29; else {
label = 23;
break L29;
}
L34 : do if (!$$0107$lcssa) {
$$2109125 = 0;
$$3126 = $$1$lcssa;
while (1) {
if (($$3126 | 32 | 0) != (HEAP8[63234 + $$2109125 >> 0] | 0)) {
$$3110 = $$2109125;
$$5 = $$3126;
break L34;
}
do if ($$2109125 >>> 0 < 2) {
$63 = HEAP32[$3 >> 2] | 0;
if ($63 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
HEAP32[$3 >> 2] = $63 + 1;
$$4 = HEAPU8[$63 >> 0] | 0;
break;
} else {
$$4 = ___shgetc($0) | 0;
break;
}
} else $$4 = $$3126; while (0);
$70 = $$2109125 + 1 | 0;
if ($70 >>> 0 < 3) {
$$2109125 = $70;
$$3126 = $$4;
} else {
$$3110 = $70;
$$5 = $$4;
break;
}
}
} else {
$$3110 = $$0107$lcssa;
$$5 = $$1$lcssa;
} while (0);
switch ($$3110 | 0) {
case 3:
{
$72 = HEAP32[$3 >> 2] | 0;
if ($72 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
HEAP32[$3 >> 2] = $72 + 1;
$80 = HEAPU8[$72 >> 0] | 0;
} else $80 = ___shgetc($0) | 0;
if (($80 | 0) == 40) $$4111 = 1; else {
if (!(HEAP32[$4 >> 2] | 0)) {
$$0114 = nan;
break L4;
}
HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
$$0114 = nan;
break L4;
}
while (1) {
$85 = HEAP32[$3 >> 2] | 0;
if ($85 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
HEAP32[$3 >> 2] = $85 + 1;
$93 = HEAPU8[$85 >> 0] | 0;
} else $93 = ___shgetc($0) | 0;
if (!(($93 + -48 | 0) >>> 0 < 10 | ($93 + -65 | 0) >>> 0 < 26)) if (!(($93 | 0) == 95 | ($93 + -97 | 0) >>> 0 < 26)) break;
$$4111 = $$4111 + 1 | 0;
}
if (($93 | 0) == 41) {
$$0114 = nan;
break L4;
}
$102 = (HEAP32[$4 >> 2] | 0) == 0;
if (!$102) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
if (!$42) {
$106 = ___errno_location() | 0;
HEAP32[$106 >> 2] = 22;
___shlim($0, 0);
$$0114 = 0.0;
break L4;
}
if (!$$4111) {
$$0114 = nan;
break L4;
} else $$in = $$4111;
while (1) {
$$in = $$in + -1 | 0;
if (!$102) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
if (!$$in) {
$$0114 = nan;
break L4;
}
}
break;
}
case 0:
{
if (($$5 | 0) == 48) {
$118 = HEAP32[$3 >> 2] | 0;
if ($118 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
HEAP32[$3 >> 2] = $118 + 1;
$126 = HEAPU8[$118 >> 0] | 0;
} else $126 = ___shgetc($0) | 0;
if (($126 | 32 | 0) == 120) {
$$0114 = +_hexfloat($0, $$0106$ph, $$0105$ph, $$0113, $2);
break L4;
}
if (!(HEAP32[$4 >> 2] | 0)) $$6 = 48; else {
HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
$$6 = 48;
}
} else $$6 = $$5;
$$0114 = +_decfloat($0, $$6, $$0106$ph, $$0105$ph, $$0113, $2);
break L4;
break;
}
default:
{
if (HEAP32[$4 >> 2] | 0) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
$116 = ___errno_location() | 0;
HEAP32[$116 >> 2] = 22;
___shlim($0, 0);
$$0114 = 0.0;
break L4;
}
}
}
} while (0);
if ((label | 0) == 23) {
$45 = (HEAP32[$4 >> 2] | 0) == 0;
if (!$45) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
if (($2 | 0) != 0 & $$0107$lcssa >>> 0 > 3) {
$$1108 = $$0107$lcssa;
do {
if (!$45) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
$$1108 = $$1108 + -1 | 0;
} while ($$1108 >>> 0 > 3);
}
}
$$0114 = +Math_fround(Math_fround($$0113 | 0) * Math_fround(inf));
} while (0);
return +$$0114;
}
function __ZN11HanimAvatar14setSiteNormalsEv($0) {
$0 = $0 | 0;
var $$byval_copy5 = 0, $1 = 0, $15 = f0, $18 = f0, $2 = 0, $21 = f0, $24 = f0, $25 = 0, $3 = 0, $31 = f0, $34 = f0, $37 = f0, $4 = 0, $40 = f0, $41 = 0, $47 = f0, $5 = 0, $50 = f0, $53 = f0, $56 = f0, $57 = 0, $6 = 0, $63 = f0, $66 = f0, $69 = f0, $7 = 0, $72 = f0, $73 = 0, $79 = f0, $8 = 0, $82 = f0, $85 = f0, $88 = f0, $89 = 0, $9 = 0, $indvars$iv = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$$byval_copy5 = sp + 28 | 0;
$1 = sp + 12 | 0;
$2 = sp + 24 | 0;
$3 = sp;
$4 = sp + 20 | 0;
$5 = sp + 16 | 0;
$6 = $0 + 72 | 0;
$indvars$iv = 0;
do {
$7 = 1744 + ($indvars$iv << 2) | 0;
$8 = HEAP32[$7 >> 2] | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($1, 7, $8, 0, 1, 1, 0);
$9 = HEAP32[$6 >> 2] | 0;
$15 = Math_fround(HEAPF32[(HEAP32[$9 + 52 + ($indvars$iv * 60 | 0) + 4 >> 2] | 0) + 72 >> 2]);
$18 = Math_fround($15 - Math_fround(HEAPF32[(HEAP32[$9 + 52 + ($indvars$iv * 60 | 0) + 8 >> 2] | 0) + 72 >> 2]));
$21 = Math_fround($18 * Math_fround(HEAPF32[64824 + ($indvars$iv * 20 | 0) >> 2]));
HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
__ZN6VectorC2Efff($3, Math_fround(0.0), Math_fround(-$21), Math_fround(0.0));
$24 = Math_fround(HEAPF32[16216]);
HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0;
HEAP8[$$byval_copy5 + 1 >> 0] = HEAP8[$2 + 1 >> 0] | 0;
HEAP8[$$byval_copy5 + 2 >> 0] = HEAP8[$2 + 2 >> 0] | 0;
HEAP8[$$byval_copy5 + 3 >> 0] = HEAP8[$2 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $$byval_copy5, $3, $24);
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($1, 7, $8, 0, 2, 1, 0);
$25 = HEAP32[$6 >> 2] | 0;
$31 = Math_fround(HEAPF32[(HEAP32[$25 + 52 + ($indvars$iv * 60 | 0) + 16 >> 2] | 0) + 72 >> 2]);
$34 = Math_fround($31 - Math_fround(HEAPF32[(HEAP32[$25 + 52 + ($indvars$iv * 60 | 0) + 20 >> 2] | 0) + 72 >> 2]));
$37 = Math_fround($34 * Math_fround(HEAPF32[64824 + ($indvars$iv * 20 | 0) + 4 >> 2]));
HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
__ZN6VectorC2Efff($3, Math_fround(0.0), Math_fround(-$37), Math_fround(0.0));
$40 = Math_fround(HEAPF32[16216]);
HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0;
HEAP8[$$byval_copy5 + 1 >> 0] = HEAP8[$2 + 1 >> 0] | 0;
HEAP8[$$byval_copy5 + 2 >> 0] = HEAP8[$2 + 2 >> 0] | 0;
HEAP8[$$byval_copy5 + 3 >> 0] = HEAP8[$2 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $$byval_copy5, $3, $40);
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($1, 7, $8, 0, 4, 1, 0);
$41 = HEAP32[$6 >> 2] | 0;
$47 = Math_fround(HEAPF32[(HEAP32[$41 + 52 + ($indvars$iv * 60 | 0) + 28 >> 2] | 0) + 72 >> 2]);
$50 = Math_fround($47 - Math_fround(HEAPF32[(HEAP32[$41 + 52 + ($indvars$iv * 60 | 0) + 32 >> 2] | 0) + 72 >> 2]));
$53 = Math_fround($50 * Math_fround(HEAPF32[64824 + ($indvars$iv * 20 | 0) + 8 >> 2]));
HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
__ZN6VectorC2Efff($3, Math_fround(0.0), Math_fround(-$53), Math_fround(0.0));
$56 = Math_fround(HEAPF32[16216]);
HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0;
HEAP8[$$byval_copy5 + 1 >> 0] = HEAP8[$2 + 1 >> 0] | 0;
HEAP8[$$byval_copy5 + 2 >> 0] = HEAP8[$2 + 2 >> 0] | 0;
HEAP8[$$byval_copy5 + 3 >> 0] = HEAP8[$2 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $$byval_copy5, $3, $56);
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($1, 7, $8, 0, 8, 1, 0);
$57 = HEAP32[$6 >> 2] | 0;
$63 = Math_fround(HEAPF32[(HEAP32[$57 + 52 + ($indvars$iv * 60 | 0) + 40 >> 2] | 0) + 72 >> 2]);
$66 = Math_fround($63 - Math_fround(HEAPF32[(HEAP32[$57 + 52 + ($indvars$iv * 60 | 0) + 44 >> 2] | 0) + 72 >> 2]));
$69 = Math_fround($66 * Math_fround(HEAPF32[64824 + ($indvars$iv * 20 | 0) + 12 >> 2]));
HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
__ZN6VectorC2Efff($3, Math_fround(0.0), Math_fround(-$69), Math_fround(0.0));
$72 = Math_fround(HEAPF32[16216]);
HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0;
HEAP8[$$byval_copy5 + 1 >> 0] = HEAP8[$2 + 1 >> 0] | 0;
HEAP8[$$byval_copy5 + 2 >> 0] = HEAP8[$2 + 2 >> 0] | 0;
HEAP8[$$byval_copy5 + 3 >> 0] = HEAP8[$2 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $$byval_copy5, $3, $72);
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($1, 7, $8, 0, 16, 1, 0);
$73 = HEAP32[$6 >> 2] | 0;
$79 = Math_fround(HEAPF32[(HEAP32[$73 + 52 + ($indvars$iv * 60 | 0) + 52 >> 2] | 0) + 72 >> 2]);
$82 = Math_fround($79 - Math_fround(HEAPF32[(HEAP32[$73 + 52 + ($indvars$iv * 60 | 0) + 56 >> 2] | 0) + 72 >> 2]));
$85 = Math_fround($82 * Math_fround(HEAPF32[64824 + ($indvars$iv * 20 | 0) + 16 >> 2]));
HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
__ZN6VectorC2Efff($3, Math_fround(0.0), Math_fround(-$85), Math_fround(0.0));
$88 = Math_fround(HEAPF32[16216]);
HEAP8[$$byval_copy5 >> 0] = HEAP8[$2 >> 0] | 0;
HEAP8[$$byval_copy5 + 1 >> 0] = HEAP8[$2 + 1 >> 0] | 0;
HEAP8[$$byval_copy5 + 2 >> 0] = HEAP8[$2 + 2 >> 0] | 0;
HEAP8[$$byval_copy5 + 3 >> 0] = HEAP8[$2 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $$byval_copy5, $3, $88);
$89 = HEAP32[$7 >> 2] | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($4, 1, $89, 3, 0, 1, 0);
HEAP8[$$byval_copy5 >> 0] = HEAP8[$4 >> 0] | 0;
HEAP8[$$byval_copy5 + 1 >> 0] = HEAP8[$4 + 1 >> 0] | 0;
HEAP8[$$byval_copy5 + 2 >> 0] = HEAP8[$4 + 2 >> 0] | 0;
HEAP8[$$byval_copy5 + 3 >> 0] = HEAP8[$4 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vector($0, $$byval_copy5, 64552);
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($5, 1, $89, 4, 0, 1, 0);
HEAP8[$$byval_copy5 >> 0] = HEAP8[$5 >> 0] | 0;
HEAP8[$$byval_copy5 + 1 >> 0] = HEAP8[$5 + 1 >> 0] | 0;
HEAP8[$$byval_copy5 + 2 >> 0] = HEAP8[$5 + 2 >> 0] | 0;
HEAP8[$$byval_copy5 + 3 >> 0] = HEAP8[$5 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vector($0, $$byval_copy5, 64588);
$indvars$iv = $indvars$iv + 1 | 0;
} while (($indvars$iv | 0) != 2);
STACKTOP = sp;
return;
}
function __ZN11SeqMovement18propagateHandStuffER12TwoHandStuffR20ArmHandConstellation($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$041 = 0, $$sink3 = 0, $$sink8 = 0, $104 = 0, $105 = 0, $108 = 0, $113 = 0, $119 = 0, $125 = 0, $13 = 0, $131 = 0, $137 = 0, $14 = 0, $143 = 0, $149 = 0, $15 = 0, $155 = 0, $161 = 0, $162 = 0, $20 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $44 = 0, $48 = 0, $5 = 0, $51 = 0, $56 = 0, $6 = 0, $62 = 0, $68 = 0, $7 = 0, $74 = 0, $8 = 0, $80 = 0, $86 = 0, $92 = 0, $98 = 0, $sext = 0, label = 0;
$3 = $1 + 20 | 0;
$4 = $0 + 100 | 0;
HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
HEAP32[$4 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
HEAP32[$4 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
HEAP32[$4 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
$5 = $1 + 64 | 0;
$6 = $0 + 212 | 0;
HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
HEAP32[$6 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
HEAP32[$6 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
HEAP32[$6 + 12 >> 2] = HEAP32[$5 + 12 >> 2];
$7 = $1 + 36 | 0;
$8 = HEAP32[$7 >> 2] | 0;
if (!$8) $13 = 0; else $13 = HEAP32[$8 + 236 >> 2] | 0;
HEAP32[$0 + 116 >> 2] = $13;
$14 = $1 + 80 | 0;
$15 = HEAP32[$14 >> 2] | 0;
if (!$15) $20 = 0; else $20 = HEAP32[$15 + 236 >> 2] | 0;
HEAP32[$0 + 228 >> 2] = $20;
$sext = HEAP32[$0 + 540 >> 2] << 16;
$23 = $sext >> 16;
if (($sext | 0) > 0) {
$25 = $0 + 528 | 0;
$26 = $0 + 508 | 0;
$27 = $0 + 510 | 0;
$$041 = 0;
do {
$44 = HEAP32[(HEAP32[$25 >> 2] | 0) + ($$041 << 2) >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$44 >> 2] | 0) + 24 >> 2] & 127]($44, $1, $2);
$48 = HEAPU8[$26 >> 0] | HEAPU8[$26 + 1 >> 0] << 8;
$51 = $44 + 508 | 0;
$56 = (($48 & 1) == 0 ? (HEAPU8[$51 >> 0] | HEAPU8[$51 + 1 >> 0] << 8) & 1 : 1) | $48 & -2;
HEAP8[$26 >> 0] = $56;
HEAP8[$26 + 1 >> 0] = $56 >> 8;
$62 = $56 & -3 | (($48 & 2) == 0 ? (HEAPU8[$51 >> 0] | HEAPU8[$51 + 1 >> 0] << 8) & 2 : 2);
HEAP8[$26 >> 0] = $62;
HEAP8[$26 + 1 >> 0] = $62 >> 8;
$68 = $62 & -5 | (($48 & 4) == 0 ? (HEAPU8[$51 >> 0] | HEAPU8[$51 + 1 >> 0] << 8) & 4 : 4);
HEAP8[$26 >> 0] = $68;
HEAP8[$26 + 1 >> 0] = $68 >> 8;
$74 = $68 & -9 | (($48 & 8) == 0 ? (HEAPU8[$51 >> 0] | HEAPU8[$51 + 1 >> 0] << 8) & 8 : 8);
HEAP8[$26 >> 0] = $74;
HEAP8[$26 + 1 >> 0] = $74 >> 8;
$80 = $74 & -17 | (($48 & 16) == 0 ? (HEAPU8[$51 >> 0] | HEAPU8[$51 + 1 >> 0] << 8) & 16 : 16);
HEAP8[$26 >> 0] = $80;
HEAP8[$26 + 1 >> 0] = $80 >> 8;
$86 = $80 & -33 | (($48 & 32) == 0 ? (HEAPU8[$51 >> 0] | HEAPU8[$51 + 1 >> 0] << 8) & 32 : 32);
HEAP8[$26 >> 0] = $86;
HEAP8[$26 + 1 >> 0] = $86 >> 8;
$92 = $86 & -65 | (($48 & 64) == 0 ? (HEAPU8[$51 >> 0] | HEAPU8[$51 + 1 >> 0] << 8) & 64 : 64);
HEAP8[$26 >> 0] = $92;
HEAP8[$26 + 1 >> 0] = $92 >> 8;
$98 = $92 & -129 | (($48 & 128) == 0 ? (HEAPU8[$51 >> 0] | HEAPU8[$51 + 1 >> 0] << 8) & 128 : 128);
HEAP8[$26 >> 0] = $98;
HEAP8[$26 + 1 >> 0] = $98 >> 8;
$104 = $98 & -257 | (($48 & 256) == 0 ? (HEAPU8[$51 >> 0] | HEAPU8[$51 + 1 >> 0] << 8) & 256 : 256);
HEAP8[$26 >> 0] = $104;
HEAP8[$26 + 1 >> 0] = $104 >> 8;
$105 = HEAPU8[$27 >> 0] | HEAPU8[$27 + 1 >> 0] << 8;
$108 = $44 + 510 | 0;
$113 = (($105 & 1) == 0 ? (HEAPU8[$108 >> 0] | HEAPU8[$108 + 1 >> 0] << 8) & 1 : 1) | $105 & -2;
HEAP8[$27 >> 0] = $113;
HEAP8[$27 + 1 >> 0] = $113 >> 8;
$119 = $113 & -3 | (($105 & 2) == 0 ? (HEAPU8[$108 >> 0] | HEAPU8[$108 + 1 >> 0] << 8) & 2 : 2);
HEAP8[$27 >> 0] = $119;
HEAP8[$27 + 1 >> 0] = $119 >> 8;
$125 = $119 & -5 | (($105 & 4) == 0 ? (HEAPU8[$108 >> 0] | HEAPU8[$108 + 1 >> 0] << 8) & 4 : 4);
HEAP8[$27 >> 0] = $125;
HEAP8[$27 + 1 >> 0] = $125 >> 8;
$131 = $125 & -9 | (($105 & 8) == 0 ? (HEAPU8[$108 >> 0] | HEAPU8[$108 + 1 >> 0] << 8) & 8 : 8);
HEAP8[$27 >> 0] = $131;
HEAP8[$27 + 1 >> 0] = $131 >> 8;
$137 = $131 & -17 | (($105 & 16) == 0 ? (HEAPU8[$108 >> 0] | HEAPU8[$108 + 1 >> 0] << 8) & 16 : 16);
HEAP8[$27 >> 0] = $137;
HEAP8[$27 + 1 >> 0] = $137 >> 8;
$143 = $137 & -33 | (($105 & 32) == 0 ? (HEAPU8[$108 >> 0] | HEAPU8[$108 + 1 >> 0] << 8) & 32 : 32);
HEAP8[$27 >> 0] = $143;
HEAP8[$27 + 1 >> 0] = $143 >> 8;
$149 = $143 & -65 | (($105 & 64) == 0 ? (HEAPU8[$108 >> 0] | HEAPU8[$108 + 1 >> 0] << 8) & 64 : 64);
HEAP8[$27 >> 0] = $149;
HEAP8[$27 + 1 >> 0] = $149 >> 8;
$155 = $149 & -129 | (($105 & 128) == 0 ? (HEAPU8[$108 >> 0] | HEAPU8[$108 + 1 >> 0] << 8) & 128 : 128);
HEAP8[$27 >> 0] = $155;
HEAP8[$27 + 1 >> 0] = $155 >> 8;
$161 = $155 & -257 | (($105 & 256) == 0 ? (HEAPU8[$108 >> 0] | HEAPU8[$108 + 1 >> 0] << 8) & 256 : 256);
HEAP8[$27 >> 0] = $161;
HEAP8[$27 + 1 >> 0] = $161 >> 8;
$162 = HEAP16[$51 >> 1] | 0;
if (!($162 & 2)) {
if ($162 & 1) {
$$sink3 = -3;
label = 14;
}
} else {
$$sink3 = -2;
label = 14;
}
if ((label | 0) == 14) {
label = 0;
HEAP16[$26 >> 1] = $104 & $$sink3;
}
if (!(HEAP16[$108 >> 1] & 2)) {
if (HEAP16[$51 >> 1] & 1) {
$$sink8 = -3;
label = 17;
}
} else {
$$sink8 = -2;
label = 17;
}
if ((label | 0) == 17) {
label = 0;
HEAP16[$27 >> 1] = $161 & $$sink8;
}
$$041 = $$041 + 1 | 0;
} while (($$041 | 0) < ($23 | 0));
}
$28 = $0 + 324 | 0;
HEAP32[$28 >> 2] = HEAP32[$3 >> 2];
HEAP32[$28 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
HEAP32[$28 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
HEAP32[$28 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
$29 = $0 + 436 | 0;
HEAP32[$29 >> 2] = HEAP32[$5 >> 2];
HEAP32[$29 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
HEAP32[$29 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
HEAP32[$29 + 12 >> 2] = HEAP32[$5 + 12 >> 2];
$30 = HEAP32[$7 >> 2] | 0;
if (!$30) $35 = 0; else $35 = HEAP32[$30 + 236 >> 2] | 0;
HEAP32[$0 + 340 >> 2] = $35;
$36 = HEAP32[$14 >> 2] | 0;
if (!$36) {
$41 = 0;
$40 = $0 + 452 | 0;
HEAP32[$40 >> 2] = $41;
return;
}
$41 = HEAP32[$36 + 236 >> 2] | 0;
$40 = $0 + 452 | 0;
HEAP32[$40 >> 2] = $41;
return;
}
function __ZN11OneHGesture20InitConcretePosture1ER19OneHConcretePosture($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$sroa$2$0$$sroa_idx = 0, $$sroa$2$0$copyload = 0, $$sroa$3$0$copyload = f0, $10 = 0, $105 = 0, $11 = 0, $112 = 0, $113 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = f0, $29 = f0, $3 = 0, $31 = 0, $32 = f0, $4 = 0, $40 = 0, $48 = 0, $5 = 0, $6 = 0, $61 = 0, $68 = 0, $7 = 0, $71 = 0, $73 = 0, $8 = 0, $82 = 0, $86 = 0, $87 = 0, $9 = 0, $93 = 0, $95 = 0, $tmpcast3$i$byval_copy = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 112 | 0;
$tmpcast3$i$byval_copy = sp + 100 | 0;
$vararg_buffer12 = sp + 32 | 0;
$vararg_buffer10 = sp + 24 | 0;
$vararg_buffer6 = sp + 16 | 0;
$vararg_buffer2 = sp + 8 | 0;
$vararg_buffer = sp;
$2 = sp + 96 | 0;
$3 = sp + 72 | 0;
$4 = sp + 60 | 0;
$5 = sp + 84 | 0;
$6 = sp + 64 | 0;
$7 = sp + 48 | 0;
$8 = sp + 44 | 0;
$9 = sp + 40 | 0;
$10 = sp + 36 | 0;
$11 = $0 + 72 | 0;
$12 = HEAP32[$11 >> 2] | 0;
$14 = HEAP32[$12 + 8 >> 2] | 0;
$15 = HEAP32[$12 >> 2] | 0;
$16 = HEAP8[$0 >> 0] | 0;
$18 = $16 << 24 >> 24 ? 48924 : 48928;
$20 = Math_fround(HEAPF32[$0 + 20 >> 2]);
if ($20 == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 24 >> 2]) == Math_fround(0.0)) if (!(Math_fround(HEAPF32[$0 + 28 >> 2]) != Math_fround(0.0))) {
STACKTOP = sp;
return;
}
$29 = Math_fround(HEAPF32[$0 + 32 >> 2]);
$31 = $0 + 36 | 0;
do if ($29 == Math_fround(0.0)) {
$32 = Math_fround(HEAPF32[$31 >> 2]);
if ($32 != Math_fround(0.0)) {
$48 = (HEAPF32[tempDoublePtr >> 2] = $32, HEAP32[tempDoublePtr >> 2] | 0);
break;
} else {
STACKTOP = sp;
return;
}
} else $48 = HEAP32[$31 >> 2] | 0; while (0);
$40 = $16 << 24 >> 24 == ((HEAPU8[$12 + 13 >> 0] | 0) >>> 6 & 1);
HEAPF32[$5 >> 2] = $20;
HEAP32[$5 + 4 >> 2] = HEAP32[$0 + 24 >> 2];
HEAP32[$5 + 8 >> 2] = HEAP32[$0 + 28 >> 2];
HEAPF32[$6 >> 2] = $29;
HEAP32[$6 + 4 >> 2] = $48;
if (!(__ZN5SiGML15handOrientationER10Quaternionb10Direction310Direction2($1 + 40 | 0, $40, $5, $6) | 0)) {
STACKTOP = sp;
return;
}
$61 = HEAP32[(HEAP32[$15 + 72 >> 2] | 0) + 20 + (((HEAP8[$0 >> 0] | 0) == ((HEAPU8[(HEAP32[$11 >> 2] | 0) + 13 >> 0] | 0) >>> 6 & 1) & 1) << 4) + 12 >> 2] | 0;
if (!$61) {
__Z7LogTimev() | 0;
$68 = HEAP8[$0 >> 0] | 0 ? 48924 : 48928;
HEAP32[$vararg_buffer >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 8 >> 2];
HEAP32[$vararg_buffer + 4 >> 2] = $68;
__Z7eprintfPKcz(48935, $vararg_buffer);
HEAP32[$vararg_buffer2 >> 2] = $14;
HEAP32[$vararg_buffer2 + 4 >> 2] = $18;
__Z7eprintfPKcz(48993, $vararg_buffer2);
HEAP8[(HEAP32[$11 >> 2] | 0) + 12 >> 0] = 0;
STACKTOP = sp;
return;
}
__ZN6VectorC2Ev($7);
HEAP32[$8 >> 2] = 0;
HEAP32[$9 >> 2] = 0;
$71 = $0 + 16 | 0;
HEAP32[$10 >> 2] = HEAP32[$71 >> 2];
HEAP8[$tmpcast3$i$byval_copy >> 0] = HEAP8[$10 >> 0] | 0;
HEAP8[$tmpcast3$i$byval_copy + 1 >> 0] = HEAP8[$10 + 1 >> 0] | 0;
HEAP8[$tmpcast3$i$byval_copy + 2 >> 0] = HEAP8[$10 + 2 >> 0] | 0;
HEAP8[$tmpcast3$i$byval_copy + 3 >> 0] = HEAP8[$10 + 3 >> 0] | 0;
__ZNK11HanimAvatar12locateSiteIDEb6SiteIDP6VectorRP5JointRP4Site($15, 0, $tmpcast3$i$byval_copy, $7, $8, $9);
$73 = HEAP32[$8 >> 2] | 0;
if (!$73) {
__Z7LogTimev() | 0;
$82 = HEAP8[$0 >> 0] | 0 ? 48924 : 48928;
HEAP32[$vararg_buffer6 >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 8 >> 2];
HEAP32[$vararg_buffer6 + 4 >> 2] = $82;
__Z7eprintfPKcz(48935, $vararg_buffer6);
__Z7eprintfPKcz(49078, $vararg_buffer10);
__ZNK6SiteID5printEP8_IO_FILE($71, HEAP32[16082] | 0);
__Z7eprintfPKcz(49093, $vararg_buffer12);
HEAP8[(HEAP32[$11 >> 2] | 0) + 12 >> 0] = 0;
} else __ZN7Gesture16transferLocationER6VectorP5JointS3_RKS0_(HEAP32[$11 >> 2] | 0, $1 + 16 | 0, $61, $73, $7);
$86 = $1 + 4 | 0;
$$sroa$2$0$$sroa_idx = $0 + 8 | 0;
$$sroa$2$0$copyload = HEAP32[$$sroa$2$0$$sroa_idx >> 2] | 0;
$$sroa$3$0$copyload = Math_fround(HEAPF32[$0 + 12 >> 2]);
HEAP32[$2 >> 2] = HEAP32[$0 + 4 >> 2];
__THREW__ = 0;
HEAP8[$tmpcast3$i$byval_copy >> 0] = HEAP8[$2 >> 0] | 0;
HEAP8[$tmpcast3$i$byval_copy + 1 >> 0] = HEAP8[$2 + 1 >> 0] | 0;
HEAP8[$tmpcast3$i$byval_copy + 2 >> 0] = HEAP8[$2 + 2 >> 0] | 0;
HEAP8[$tmpcast3$i$byval_copy + 3 >> 0] = HEAP8[$2 + 3 >> 0] | 0;
invoke_viii(95, $0 | 0, $86 | 0, $tmpcast3$i$byval_copy | 0);
$87 = __THREW__;
__THREW__ = 0;
if ($87 & 1) {
$112 = ___cxa_find_matching_catch_2() | 0;
$113 = tempRet0;
___resumeException($112 | 0);
}
if ((HEAP32[16607] ^ HEAP32[$$sroa$2$0$$sroa_idx >> 2]) & 16777215 | 0) {
__THREW__ = 0;
invoke_vi(98, $3 | 0);
$93 = __THREW__;
__THREW__ = 0;
if ($93 & 1) {
$112 = ___cxa_find_matching_catch_2() | 0;
$113 = tempRet0;
___resumeException($112 | 0);
}
HEAP32[$4 >> 2] = $$sroa$2$0$copyload;
__THREW__ = 0;
HEAP8[$tmpcast3$i$byval_copy >> 0] = HEAP8[$4 >> 0] | 0;
HEAP8[$tmpcast3$i$byval_copy + 1 >> 0] = HEAP8[$4 + 1 >> 0] | 0;
HEAP8[$tmpcast3$i$byval_copy + 2 >> 0] = HEAP8[$4 + 2 >> 0] | 0;
HEAP8[$tmpcast3$i$byval_copy + 3 >> 0] = HEAP8[$4 + 3 >> 0] | 0;
invoke_viii(95, $0 | 0, $3 | 0, $tmpcast3$i$byval_copy | 0);
$95 = __THREW__;
__THREW__ = 0;
if ($95 & 1) {
$112 = ___cxa_find_matching_catch_2() | 0;
$113 = tempRet0;
___resumeException($112 | 0);
}
if (Math_fround(HEAPF32[$3 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$3 + 4 >> 2]) == Math_fround(0.0)) {
if (!(Math_fround(HEAPF32[$3 + 8 >> 2]) == Math_fround(0.0))) label = 21;
} else label = 21; else label = 21;
if ((label | 0) == 21) {
__THREW__ = 0;
invoke_viiif(7, $86 | 0, $86 | 0, $3 | 0, +$$sroa$3$0$copyload);
$105 = __THREW__;
__THREW__ = 0;
if ($105 & 1) {
$112 = ___cxa_find_matching_catch_2() | 0;
$113 = tempRet0;
___resumeException($112 | 0);
}
}
}
HEAP32[$1 + 56 >> 2] = HEAP32[(HEAP32[$0 + 56 >> 2] | 0) + 236 >> 2];
STACKTOP = sp;
return;
}
function __ZNK17NonmanualMovement5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$06193 = 0, $$094 = 0, $$sroa$0$0$copyload = 0, $$sroa$1073$0$copyload = 0, $$sroa$16$0$copyload = f0, $$sroa$16$097 = f0, $$sroa$16$098 = f0, $$sroa$6$0$copyload = 0, $$sroa$6$099 = 0, $15 = 0, $25 = 0, $26 = 0, $3 = 0, $30 = 0, $31 = 0, $37 = 0, $39 = 0, $40 = 0, $45 = 0, $55 = 0, $61 = 0, $70 = 0, $74 = 0, $82 = 0, $84 = 0, $88 = 0, $9 = 0, $90 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer22 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 80 | 0;
$vararg_buffer29 = sp + 72 | 0;
$vararg_buffer26 = sp + 64 | 0;
$vararg_buffer22 = sp + 56 | 0;
$vararg_buffer18 = sp + 48 | 0;
$vararg_buffer14 = sp + 40 | 0;
$vararg_buffer10 = sp + 32 | 0;
$vararg_buffer7 = sp + 24 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$3 = $0 + 8 | 0;
if (HEAP32[$3 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(36607, 14, 1, $1) | 0;
HEAP32[$vararg_buffer >> 2] = HEAP32[$3 >> 2];
_fprintf($1, 35092, $vararg_buffer) | 0;
}
$9 = $0 + 12 | 0;
if (HEAP32[$9 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(36622, 15, 1, $1) | 0;
HEAP32[$vararg_buffer1 >> 2] = HEAP32[$9 >> 2];
_fprintf($1, 35092, $vararg_buffer1) | 0;
}
$15 = $0 + 16 | 0;
if (HEAP8[$15 >> 0] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
HEAP32[$vararg_buffer4 >> 2] = HEAP8[$15 >> 0] | 0 ? 84 : 70;
_fprintf($1, 36638, $vararg_buffer4) | 0;
}
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$25 = $0 + 4 | 0;
$26 = HEAP32[$25 >> 2] | 0;
if (!$26) $30 = -1; else $30 = HEAP32[$26 + 12 >> 2] | 0;
HEAP32[$vararg_buffer7 >> 2] = $30;
_fprintf($1, 36665, $vararg_buffer7) | 0;
$31 = HEAP32[$25 >> 2] | 0;
if ($31 | 0) if ((HEAP32[$31 + 12 >> 2] | 0) > 0) {
$$094 = 0;
$37 = $31;
while (1) {
$39 = HEAP32[(HEAP32[$37 >> 2] | 0) + ($$094 << 2) >> 2] | 0;
$40 = $39 + 12 | 0;
if ((HEAP32[$40 >> 2] | 0) > 0) {
$$06193 = 0;
do {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(($$06193 | 0) == 0 ? 36682 : 53852, 4, 1, $1) | 0;
L24 : do if ((HEAP32[$40 >> 2] | 0) > ($$06193 | 0)) {
$55 = HEAP32[$39 >> 2] | 0;
$$sroa$0$0$copyload = HEAP32[$55 + ($$06193 * 28 | 0) >> 2] | 0;
$$sroa$6$0$copyload = HEAP16[$55 + ($$06193 * 28 | 0) + 4 >> 1] | 0;
$$sroa$1073$0$copyload = HEAP32[$55 + ($$06193 * 28 | 0) + 8 >> 2] | 0;
$$sroa$16$0$copyload = Math_fround(HEAPF32[$55 + ($$06193 * 28 | 0) + 24 >> 2]);
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
switch ($$sroa$0$0$copyload | 0) {
case 0:
{
$$sroa$16$098 = $$sroa$16$0$copyload;
$$sroa$6$099 = $$sroa$6$0$copyload;
label = 19;
break L24;
break;
}
case 11:
{
$61 = __ZNK28InvertibleDynamicStringArray14valueFromIndexEi(HEAP32[17820] | 0, $$sroa$6$0$copyload << 16 >> 16) | 0;
HEAP32[$vararg_buffer14 >> 2] = $$094;
HEAP32[$vararg_buffer14 + 4 >> 2] = $61;
_fprintf($1, 36701, $vararg_buffer14) | 0;
$$sroa$16$097 = $$sroa$16$0$copyload;
break L24;
break;
}
case 9:
{
HEAP32[$vararg_buffer18 >> 2] = $$094;
HEAP32[$vararg_buffer18 + 4 >> 2] = $$sroa$1073$0$copyload;
_fprintf($1, 36721, $vararg_buffer18) | 0;
if (!$$sroa$1073$0$copyload) {
$$sroa$16$097 = $$sroa$16$0$copyload;
break L24;
}
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$sroa$1073$0$copyload >> 2] | 0) + 40 >> 2] & 255]($$sroa$1073$0$copyload, $1);
_fputc(10, $1) | 0;
$$sroa$16$097 = $$sroa$16$0$copyload;
break L24;
break;
}
default:
{
$70 = HEAP32[(HEAP32[17821] | 0) + ($$sroa$0$0$copyload << 2) >> 2] | 0;
if (!$70) $74 = 36583; else $74 = __ZNK28InvertibleDynamicStringArray14valueFromIndexEi($70, $$sroa$6$0$copyload << 16 >> 16) | 0;
HEAP32[$vararg_buffer22 >> 2] = $$094;
HEAP32[$vararg_buffer22 + 4 >> 2] = $74;
_fprintf($1, 36742, $vararg_buffer22) | 0;
$$sroa$16$097 = $$sroa$16$0$copyload;
break L24;
}
}
} else {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$$sroa$16$098 = Math_fround(1.0);
$$sroa$6$099 = -1;
label = 19;
} while (0);
if ((label | 0) == 19) {
label = 0;
HEAP32[$vararg_buffer10 >> 2] = $$094;
HEAP32[$vararg_buffer10 + 4 >> 2] = $$sroa$6$099 << 16 >> 16;
_fprintf($1, 36687, $vararg_buffer10) | 0;
$$sroa$16$097 = $$sroa$16$098;
}
if (($$06193 | 0) == ((HEAP32[$40 >> 2] | 0) + -1 | 0)) _fwrite(36748, 2, 1, $1) | 0;
HEAPF64[$vararg_buffer26 >> 3] = +$$sroa$16$097;
_fprintf($1, 36751, $vararg_buffer26) | 0;
_fputc(10, $1) | 0;
$$06193 = $$06193 + 1 | 0;
} while (($$06193 | 0) < (HEAP32[$40 >> 2] | 0));
$45 = HEAP32[$25 >> 2] | 0;
} else $45 = $37;
$$094 = $$094 + 1 | 0;
if (($$094 | 0) >= (HEAP32[$45 + 12 >> 2] | 0)) break; else $37 = $45;
}
}
$82 = $0 + 20 | 0;
$84 = (HEAP32[$82 >> 2] | 0) == 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
if ($84) {
__Z7eprintfPKcz(36777, $vararg_buffer29);
STACKTOP = sp;
return;
} else {
_fwrite(36764, 12, 1, $1) | 0;
$88 = (HEAP16[36078] | 0) + 1 << 16 >> 16;
HEAP16[36078] = $88;
__Z11printIndentP8_IO_FILEi($1, $88 << 16 >> 16);
$90 = HEAP32[$82 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$90 >> 2] | 0) + 44 >> 2] & 127]($90, $1, HEAP16[36078] | 0);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
STACKTOP = sp;
return;
}
}
function __ZL18MakeARPFrameBufferP11HanimAvatarb($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$04247 = 0, $100 = f0, $102 = f0, $104 = f0, $106 = f0, $108 = f0, $110 = f0, $116 = 0, $119 = f0, $12 = 0, $121 = f0, $123 = f0, $125 = f0, $127 = f0, $129 = f0, $135 = 0, $138 = f0, $14 = 0, $140 = f0, $142 = f0, $144 = f0, $146 = f0, $148 = f0, $154 = 0, $157 = f0, $159 = f0, $161 = f0, $163 = f0, $165 = f0, $167 = f0, $17 = 0, $19 = 0, $20 = 0, $23 = f0, $25 = f0, $27 = f0, $29 = f0, $31 = f0, $33 = f0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $45 = f0, $47 = f0, $49 = f0, $5 = 0, $51 = f0, $53 = f0, $55 = f0, $58 = 0, $61 = 0, $64 = f0, $66 = f0, $68 = f0, $7 = 0, $70 = f0, $72 = f0, $74 = f0, $79 = 0, $8 = 0, $82 = f0, $84 = f0, $86 = f0, $88 = f0, $9 = 0, $90 = f0, $92 = f0, $97 = 0, $indvars$iv = 0, $indvars$iv$next55 = 0, $indvars$iv54 = 0, $sext = 0;
if (HEAP32[16165] | 0) return;
$4 = __Znwj(44) | 0;
__THREW__ = 0;
invoke_vi(107, $4 | 0);
$5 = __THREW__;
__THREW__ = 0;
if ($5 & 1) {
$14 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($4);
___resumeException($14 | 0);
}
HEAP32[16165] = $4;
if ($1) {
$8 = $0 + 104 | 0;
$9 = HEAP32[$8 >> 2] | 0;
$sext = HEAP32[$9 + 12 >> 2] << 16;
$12 = $sext >> 16;
if (($sext | 0) > 0) {
$$04247 = 0;
$17 = $9;
$19 = 0;
$36 = $4;
} else return;
while (1) {
$20 = HEAP32[(HEAP32[$17 >> 2] | 0) + ($19 << 2) >> 2] | 0;
$23 = Math_fround(HEAPF32[$20 + 52 >> 2]);
$25 = Math_fround(HEAPF32[$20 + 56 >> 2]);
$27 = Math_fround(HEAPF32[$20 + 60 >> 2]);
$29 = Math_fround(HEAPF32[$20 + 64 >> 2]);
$31 = Math_fround(HEAPF32[$20 + 40 >> 2]);
$33 = Math_fround(HEAPF32[$20 + 44 >> 2]);
__ZN7SSFrame8AddPRSetEPcfffffff($36, HEAP32[$20 >> 2] | 0, $23, $25, $27, $29, $31, $33, Math_fround(HEAPF32[$20 + 48 >> 2]));
$37 = $$04247 + 1 << 16 >> 16;
$38 = $37 << 16 >> 16;
if (($12 | 0) <= ($38 | 0)) break;
$$04247 = $37;
$17 = HEAP32[$8 >> 2] | 0;
$19 = $38;
$36 = HEAP32[16165] | 0;
}
return;
}
$7 = $0 + 72 | 0;
$58 = $4;
$indvars$iv54 = 0;
while (1) {
$40 = HEAP32[$7 >> 2] | 0;
$42 = HEAP32[$40 + 20 + ($indvars$iv54 << 4) >> 2] | 0;
$45 = Math_fround(HEAPF32[$42 + 52 >> 2]);
$47 = Math_fround(HEAPF32[$42 + 56 >> 2]);
$49 = Math_fround(HEAPF32[$42 + 60 >> 2]);
$51 = Math_fround(HEAPF32[$42 + 64 >> 2]);
$53 = Math_fround(HEAPF32[$42 + 40 >> 2]);
$55 = Math_fround(HEAPF32[$42 + 44 >> 2]);
__ZN7SSFrame8AddPRSetEPcfffffff($58, HEAP32[$42 >> 2] | 0, $45, $47, $49, $51, $53, $55, Math_fround(HEAPF32[$42 + 48 >> 2]));
$61 = HEAP32[$40 + 20 + ($indvars$iv54 << 4) + 4 >> 2] | 0;
$64 = Math_fround(HEAPF32[$61 + 52 >> 2]);
$66 = Math_fround(HEAPF32[$61 + 56 >> 2]);
$68 = Math_fround(HEAPF32[$61 + 60 >> 2]);
$70 = Math_fround(HEAPF32[$61 + 64 >> 2]);
$72 = Math_fround(HEAPF32[$61 + 40 >> 2]);
$74 = Math_fround(HEAPF32[$61 + 44 >> 2]);
__ZN7SSFrame8AddPRSetEPcfffffff(HEAP32[16165] | 0, HEAP32[$61 >> 2] | 0, $64, $66, $68, $70, $72, $74, Math_fround(HEAPF32[$61 + 48 >> 2]));
$79 = HEAP32[$40 + 20 + ($indvars$iv54 << 4) + 8 >> 2] | 0;
$82 = Math_fround(HEAPF32[$79 + 52 >> 2]);
$84 = Math_fround(HEAPF32[$79 + 56 >> 2]);
$86 = Math_fround(HEAPF32[$79 + 60 >> 2]);
$88 = Math_fround(HEAPF32[$79 + 64 >> 2]);
$90 = Math_fround(HEAPF32[$79 + 40 >> 2]);
$92 = Math_fround(HEAPF32[$79 + 44 >> 2]);
__ZN7SSFrame8AddPRSetEPcfffffff(HEAP32[16165] | 0, HEAP32[$79 >> 2] | 0, $82, $84, $86, $88, $90, $92, Math_fround(HEAPF32[$79 + 48 >> 2]));
$97 = HEAP32[$40 + 20 + ($indvars$iv54 << 4) + 12 >> 2] | 0;
$100 = Math_fround(HEAPF32[$97 + 52 >> 2]);
$102 = Math_fround(HEAPF32[$97 + 56 >> 2]);
$104 = Math_fround(HEAPF32[$97 + 60 >> 2]);
$106 = Math_fround(HEAPF32[$97 + 64 >> 2]);
$108 = Math_fround(HEAPF32[$97 + 40 >> 2]);
$110 = Math_fround(HEAPF32[$97 + 44 >> 2]);
__ZN7SSFrame8AddPRSetEPcfffffff(HEAP32[16165] | 0, HEAP32[$97 >> 2] | 0, $100, $102, $104, $106, $108, $110, Math_fround(HEAPF32[$97 + 48 >> 2]));
$indvars$iv = 0;
do {
$116 = HEAP32[(HEAP32[$7 >> 2] | 0) + 52 + ($indvars$iv54 * 60 | 0) + ($indvars$iv * 12 | 0) >> 2] | 0;
$119 = Math_fround(HEAPF32[$116 + 52 >> 2]);
$121 = Math_fround(HEAPF32[$116 + 56 >> 2]);
$123 = Math_fround(HEAPF32[$116 + 60 >> 2]);
$125 = Math_fround(HEAPF32[$116 + 64 >> 2]);
$127 = Math_fround(HEAPF32[$116 + 40 >> 2]);
$129 = Math_fround(HEAPF32[$116 + 44 >> 2]);
__ZN7SSFrame8AddPRSetEPcfffffff(HEAP32[16165] | 0, HEAP32[$116 >> 2] | 0, $119, $121, $123, $125, $127, $129, Math_fround(HEAPF32[$116 + 48 >> 2]));
$135 = HEAP32[(HEAP32[$7 >> 2] | 0) + 52 + ($indvars$iv54 * 60 | 0) + ($indvars$iv * 12 | 0) + 4 >> 2] | 0;
$138 = Math_fround(HEAPF32[$135 + 52 >> 2]);
$140 = Math_fround(HEAPF32[$135 + 56 >> 2]);
$142 = Math_fround(HEAPF32[$135 + 60 >> 2]);
$144 = Math_fround(HEAPF32[$135 + 64 >> 2]);
$146 = Math_fround(HEAPF32[$135 + 40 >> 2]);
$148 = Math_fround(HEAPF32[$135 + 44 >> 2]);
__ZN7SSFrame8AddPRSetEPcfffffff(HEAP32[16165] | 0, HEAP32[$135 >> 2] | 0, $138, $140, $142, $144, $146, $148, Math_fround(HEAPF32[$135 + 48 >> 2]));
$154 = HEAP32[(HEAP32[$7 >> 2] | 0) + 52 + ($indvars$iv54 * 60 | 0) + ($indvars$iv * 12 | 0) + 8 >> 2] | 0;
$157 = Math_fround(HEAPF32[$154 + 52 >> 2]);
$159 = Math_fround(HEAPF32[$154 + 56 >> 2]);
$161 = Math_fround(HEAPF32[$154 + 60 >> 2]);
$163 = Math_fround(HEAPF32[$154 + 64 >> 2]);
$165 = Math_fround(HEAPF32[$154 + 40 >> 2]);
$167 = Math_fround(HEAPF32[$154 + 44 >> 2]);
__ZN7SSFrame8AddPRSetEPcfffffff(HEAP32[16165] | 0, HEAP32[$154 >> 2] | 0, $157, $159, $161, $163, $165, $167, Math_fround(HEAPF32[$154 + 48 >> 2]));
$indvars$iv = $indvars$iv + 1 | 0;
} while (($indvars$iv | 0) != 5);
$indvars$iv$next55 = $indvars$iv54 + 1 | 0;
if (($indvars$iv$next55 | 0) == 2) break;
$58 = HEAP32[16165] | 0;
$indvars$iv54 = $indvars$iv$next55;
}
return;
}
function _try_realloc_chunk($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$1272 = 0, $$1275 = 0, $$2 = 0, $$3 = 0, $$pre$phiZ2D = 0, $101 = 0, $103 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $114 = 0, $115 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $129 = 0, $130 = 0, $144 = 0, $147 = 0, $148 = 0, $154 = 0, $165 = 0, $168 = 0, $175 = 0, $2 = 0, $24 = 0, $26 = 0, $3 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $6 = 0, $60 = 0, $67 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $96 = 0, $storemerge = 0, $storemerge4 = 0;
$2 = $0 + 4 | 0;
$3 = HEAP32[$2 >> 2] | 0;
$4 = $3 & -8;
$5 = $0 + $4 | 0;
$6 = HEAP32[17871] | 0;
$8 = $3 & 3;
if (!(($8 | 0) != 1 & $6 >>> 0 <= $0 >>> 0 & $5 >>> 0 > $0 >>> 0)) _abort();
$11 = $5 + 4 | 0;
$12 = HEAP32[$11 >> 2] | 0;
if (!($12 & 1)) _abort();
if (!$8) {
if ($1 >>> 0 < 256) {
$$2 = 0;
return $$2 | 0;
}
if ($4 >>> 0 >= ($1 + 4 | 0) >>> 0) if (($4 - $1 | 0) >>> 0 <= HEAP32[17987] << 1 >>> 0) {
$$2 = $0;
return $$2 | 0;
}
$$2 = 0;
return $$2 | 0;
}
if ($4 >>> 0 >= $1 >>> 0) {
$24 = $4 - $1 | 0;
if ($24 >>> 0 <= 15) {
$$2 = $0;
return $$2 | 0;
}
$26 = $0 + $1 | 0;
HEAP32[$2 >> 2] = $3 & 1 | $1 | 2;
HEAP32[$26 + 4 >> 2] = $24 | 3;
HEAP32[$11 >> 2] = HEAP32[$11 >> 2] | 1;
_dispose_chunk($26, $24);
$$2 = $0;
return $$2 | 0;
}
if ((HEAP32[17873] | 0) == ($5 | 0)) {
$37 = (HEAP32[17870] | 0) + $4 | 0;
$39 = $37 - $1 | 0;
$40 = $0 + $1 | 0;
if ($37 >>> 0 <= $1 >>> 0) {
$$2 = 0;
return $$2 | 0;
}
HEAP32[$2 >> 2] = $3 & 1 | $1 | 2;
HEAP32[$40 + 4 >> 2] = $39 | 1;
HEAP32[17873] = $40;
HEAP32[17870] = $39;
$$2 = $0;
return $$2 | 0;
}
if ((HEAP32[17872] | 0) == ($5 | 0)) {
$49 = (HEAP32[17869] | 0) + $4 | 0;
if ($49 >>> 0 < $1 >>> 0) {
$$2 = 0;
return $$2 | 0;
}
$51 = $49 - $1 | 0;
if ($51 >>> 0 > 15) {
$53 = $0 + $1 | 0;
$54 = $0 + $49 | 0;
HEAP32[$2 >> 2] = $3 & 1 | $1 | 2;
HEAP32[$53 + 4 >> 2] = $51 | 1;
HEAP32[$54 >> 2] = $51;
$60 = $54 + 4 | 0;
HEAP32[$60 >> 2] = HEAP32[$60 >> 2] & -2;
$storemerge = $53;
$storemerge4 = $51;
} else {
HEAP32[$2 >> 2] = $3 & 1 | $49 | 2;
$67 = $0 + $49 + 4 | 0;
HEAP32[$67 >> 2] = HEAP32[$67 >> 2] | 1;
$storemerge = 0;
$storemerge4 = 0;
}
HEAP32[17869] = $storemerge4;
HEAP32[17872] = $storemerge;
$$2 = $0;
return $$2 | 0;
}
if ($12 & 2 | 0) {
$$2 = 0;
return $$2 | 0;
}
$73 = ($12 & -8) + $4 | 0;
if ($73 >>> 0 < $1 >>> 0) {
$$2 = 0;
return $$2 | 0;
}
$75 = $73 - $1 | 0;
$76 = $12 >>> 3;
L49 : do if ($12 >>> 0 < 256) {
$79 = HEAP32[$5 + 8 >> 2] | 0;
$81 = HEAP32[$5 + 12 >> 2] | 0;
$83 = 71508 + ($76 << 1 << 2) | 0;
if (($79 | 0) != ($83 | 0)) {
if ($6 >>> 0 > $79 >>> 0) _abort();
if ((HEAP32[$79 + 12 >> 2] | 0) != ($5 | 0)) _abort();
}
if (($81 | 0) == ($79 | 0)) {
HEAP32[17867] = HEAP32[17867] & ~(1 << $76);
break;
}
if (($81 | 0) == ($83 | 0)) $$pre$phiZ2D = $81 + 8 | 0; else {
if ($6 >>> 0 > $81 >>> 0) _abort();
$96 = $81 + 8 | 0;
if ((HEAP32[$96 >> 2] | 0) == ($5 | 0)) $$pre$phiZ2D = $96; else _abort();
}
HEAP32[$79 + 12 >> 2] = $81;
HEAP32[$$pre$phiZ2D >> 2] = $79;
} else {
$101 = HEAP32[$5 + 24 >> 2] | 0;
$103 = HEAP32[$5 + 12 >> 2] | 0;
do if (($103 | 0) == ($5 | 0)) {
$114 = $5 + 16 | 0;
$115 = $114 + 4 | 0;
$116 = HEAP32[$115 >> 2] | 0;
if (!$116) {
$118 = HEAP32[$114 >> 2] | 0;
if (!$118) {
$$3 = 0;
break;
} else {
$$1272 = $118;
$$1275 = $114;
}
} else {
$$1272 = $116;
$$1275 = $115;
}
while (1) {
$120 = $$1272 + 20 | 0;
$121 = HEAP32[$120 >> 2] | 0;
if ($121 | 0) {
$$1272 = $121;
$$1275 = $120;
continue;
}
$123 = $$1272 + 16 | 0;
$124 = HEAP32[$123 >> 2] | 0;
if (!$124) break; else {
$$1272 = $124;
$$1275 = $123;
}
}
if ($6 >>> 0 > $$1275 >>> 0) _abort(); else {
HEAP32[$$1275 >> 2] = 0;
$$3 = $$1272;
break;
}
} else {
$106 = HEAP32[$5 + 8 >> 2] | 0;
if ($6 >>> 0 > $106 >>> 0) _abort();
$108 = $106 + 12 | 0;
if ((HEAP32[$108 >> 2] | 0) != ($5 | 0)) _abort();
$111 = $103 + 8 | 0;
if ((HEAP32[$111 >> 2] | 0) == ($5 | 0)) {
HEAP32[$108 >> 2] = $103;
HEAP32[$111 >> 2] = $106;
$$3 = $103;
break;
} else _abort();
} while (0);
if ($101 | 0) {
$129 = HEAP32[$5 + 28 >> 2] | 0;
$130 = 71772 + ($129 << 2) | 0;
do if ((HEAP32[$130 >> 2] | 0) == ($5 | 0)) {
HEAP32[$130 >> 2] = $$3;
if (!$$3) {
HEAP32[17868] = HEAP32[17868] & ~(1 << $129);
break L49;
}
} else if ((HEAP32[17871] | 0) >>> 0 > $101 >>> 0) _abort(); else {
HEAP32[$101 + 16 + (((HEAP32[$101 + 16 >> 2] | 0) != ($5 | 0) & 1) << 2) >> 2] = $$3;
if (!$$3) break L49; else break;
} while (0);
$144 = HEAP32[17871] | 0;
if ($144 >>> 0 > $$3 >>> 0) _abort();
HEAP32[$$3 + 24 >> 2] = $101;
$147 = $5 + 16 | 0;
$148 = HEAP32[$147 >> 2] | 0;
do if ($148 | 0) if ($144 >>> 0 > $148 >>> 0) _abort(); else {
HEAP32[$$3 + 16 >> 2] = $148;
HEAP32[$148 + 24 >> 2] = $$3;
break;
} while (0);
$154 = HEAP32[$147 + 4 >> 2] | 0;
if ($154 | 0) if ((HEAP32[17871] | 0) >>> 0 > $154 >>> 0) _abort(); else {
HEAP32[$$3 + 20 >> 2] = $154;
HEAP32[$154 + 24 >> 2] = $$3;
break;
}
}
} while (0);
if ($75 >>> 0 < 16) {
HEAP32[$2 >> 2] = $73 | $3 & 1 | 2;
$165 = $0 + $73 + 4 | 0;
HEAP32[$165 >> 2] = HEAP32[$165 >> 2] | 1;
$$2 = $0;
return $$2 | 0;
} else {
$168 = $0 + $1 | 0;
HEAP32[$2 >> 2] = $3 & 1 | $1 | 2;
HEAP32[$168 + 4 >> 2] = $75 | 3;
$175 = $0 + $73 + 4 | 0;
HEAP32[$175 >> 2] = HEAP32[$175 >> 2] | 1;
_dispose_chunk($168, $75);
$$2 = $0;
return $$2 | 0;
}
return 0;
}
function __ZL10whichHandsP7XMLCell($$0$2$val) {
$$0$2$val = $$0$2$val | 0;
var $$0$i40 = 0, $$012$i$i = 0, $$012$i$i71 = 0, $$01215$i$i = 0, $$01215$i$i68 = 0, $$01216$i$i = 0, $$01216$i$i69 = 0, $$05921 = 0, $$06020 = 0, $$06725 = 0, $$9 = 0, $$sink$i$i = 0, $$sink$i$i73 = 0, $1 = 0, $10 = 0, $2 = 0, $28 = 0, $30 = 0, $32 = 0, $33 = 0, $4 = 0, $45 = 0, $5 = 0, $51 = 0, $52 = 0, $75 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$vararg_buffer10 = sp + 32 | 0;
$vararg_buffer7 = sp + 24 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
L1 : do if (!$$0$2$val) $$9 = 0; else {
$1 = $$0$2$val + 12 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if (!$2) $$9 = 0; else {
$4 = ($2 | 0) > 0;
if ($4) {
$5 = HEAP32[$$0$2$val >> 2] | 0;
$$06725 = 0;
while (1) {
$9 = HEAP32[$5 + ($$06725 << 2) >> 2] | 0;
$10 = HEAP32[$9 >> 2] | 0;
if (!(_strncmp($10, 30682, 6) | 0)) {
label = 9;
break;
}
if (!(_strcmp($10, 51420) | 0)) {
label = 12;
break;
}
if (!(_strcmp($10, 51362) | 0)) {
label = 15;
break;
}
if (!(_strcmp($10, 51376) | 0)) {
label = 19;
break;
}
$$06725 = $$06725 + 1 | 0;
if (!(_strcmp($10, 51353) | 0)) {
label = 19;
break;
}
if (($$06725 | 0) >= ($2 | 0)) {
label = 6;
break;
}
}
if ((label | 0) == 6) {
if (!$4) {
$$9 = 1;
break;
}
$$05921 = 0;
$$06020 = 0;
while (1) {
$75 = __ZL10whichHandsP7XMLCell(HEAP32[(HEAP32[(HEAP32[$$0$2$val >> 2] | 0) + ($$05921 << 2) >> 2] | 0) + 8 >> 2] | 0) | 0;
switch ($$06020 | 0) {
case 5:
{
$$9 = 5;
break L1;
break;
}
case 1:
{
if (($75 | 0) == 2) {
$$9 = 5;
break L1;
} else $$0$i40 = 1;
break;
}
case 2:
{
if (($75 | 0) == 1) {
$$9 = 5;
break L1;
} else $$0$i40 = 2;
break;
}
case 3:
{
if (($75 | 0) == 4) {
$$9 = 5;
break L1;
} else $$0$i40 = 3;
break;
}
case 4:
{
if (($75 | 0) == 3) {
$$9 = 5;
break L1;
} else $$0$i40 = 4;
break;
}
case 0:
{
if (($75 | 0) == 5) {
$$9 = 5;
break L1;
} else $$0$i40 = $75;
break;
}
default:
$$0$i40 = $$06020;
}
$$05921 = $$05921 + 1 | 0;
if (($$05921 | 0) >= (HEAP32[$1 >> 2] | 0)) {
$$9 = 1;
break L1;
} else $$06020 = $$0$i40;
}
} else if ((label | 0) == 9) {
if (!1) {
$$9 = 5;
break;
}
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer >> 2] = HEAP32[$9 >> 2];
__Z7eprintfPKcz(30689, $vararg_buffer);
$$9 = 5;
break;
} else if ((label | 0) == 12) {
if (!1) {
$$9 = 5;
break;
}
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer1 >> 2] = HEAP32[$9 >> 2];
__Z7eprintfPKcz(30689, $vararg_buffer1);
$$9 = 5;
break;
} else if ((label | 0) == 15) {
if (!1) {
$$9 = 5;
break;
}
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer4 >> 2] = HEAP32[$9 >> 2];
__Z7eprintfPKcz(30689, $vararg_buffer4);
$$9 = 5;
break;
} else if ((label | 0) == 19) {
$28 = HEAP32[$9 + 4 >> 2] | 0;
if (!$28) {
$$9 = 1;
break;
}
$30 = $28 + 4 | 0;
$32 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(51353, HEAP32[$30 >> 2] | 0) | 0;
$33 = HEAP32[$28 >> 2] | 0;
L28 : do if ((HEAP16[$33 + ($32 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i = HEAP32[$33 + ($32 << 3) >> 2] | 0;
if (!$$01215$i$i) label = 25; else {
$$01216$i$i = $$01215$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(51353, HEAP32[$$01216$i$i >> 2] | 0) | 0) break;
$$012$i$i = HEAP32[$$01216$i$i + 8 >> 2] | 0;
if (!$$012$i$i) {
label = 25;
break L28;
} else $$01216$i$i = $$012$i$i;
}
$$sink$i$i = $$01216$i$i + 4 | 0;
}
} else label = 25; while (0);
if ((label | 0) == 25) $$sink$i$i = $28 + 20 | 0;
$45 = HEAP32[$$sink$i$i >> 2] | 0;
if (((__ZN5SiGML15convertLocationEPKc($45) | 0) & -4 | 0) == 12) {
if (!1) {
$$9 = 5;
break;
}
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer7 >> 2] = $45;
__Z7eprintfPKcz(30753, $vararg_buffer7);
$$9 = 5;
break;
}
$51 = __ZN6KeyOpsIPKcE12hashFunctionES1_i(52716, HEAP32[$30 >> 2] | 0) | 0;
$52 = HEAP32[$28 >> 2] | 0;
L41 : do if ((HEAP16[$52 + ($51 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i68 = HEAP32[$52 + ($51 << 3) >> 2] | 0;
if (!$$01215$i$i68) label = 34; else {
$$01216$i$i69 = $$01215$i$i68;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_(52716, HEAP32[$$01216$i$i69 >> 2] | 0) | 0) break;
$$012$i$i71 = HEAP32[$$01216$i$i69 + 8 >> 2] | 0;
if (!$$012$i$i71) {
label = 34;
break L41;
} else $$01216$i$i69 = $$012$i$i71;
}
$$sink$i$i73 = $$01216$i$i69 + 4 | 0;
}
} else label = 34; while (0);
if ((label | 0) == 34) $$sink$i$i73 = $28 + 20 | 0;
if (((__ZN5SiGML15convertLocationEPKc(HEAP32[$$sink$i$i73 >> 2] | 0) | 0) & -4 | 0) != 12) {
$$9 = 1;
break;
}
if (!1) {
$$9 = 5;
break;
}
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer10 >> 2] = $45;
__Z7eprintfPKcz(30753, $vararg_buffer10);
$$9 = 5;
break;
}
} else $$9 = 1;
}
} while (0);
STACKTOP = sp;
return $$9 | 0;
}
function _animgen_lite_terminate() {
var $$0$i = 0, $$01$i = 0, $$02021$i$i = 0, $$02022$i$i = 0, $$023$i$i = 0, $$pre4$i = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $39 = 0, $41 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $51 = 0, $53 = 0, $55 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $7 = 0, $71 = 0, $72 = 0, $73 = 0, $75 = 0, $77 = 0, $80 = 0, $85 = 0, $9 = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
__Z7LogTimev() | 0;
$0 = __Z13VersionStringv() | 0;
HEAP32[$vararg_buffer >> 2] = $0;
__Z7eprintfPKcz(58275, $vararg_buffer);
__Z20DestroySiGMLHandlersv();
$1 = HEAP32[17862] | 0;
do if ($1 | 0) {
__THREW__ = 0;
invoke_vi(144, $1 | 0);
$3 = __THREW__;
__THREW__ = 0;
if (!($3 & 1)) {
__ZdlPv($1);
HEAP32[17862] = 0;
break;
}
$5 = ___cxa_find_matching_catch_2() | 0;
$6 = tempRet0;
__ZdlPv($1);
$$0$i = $6;
$$01$i = $5;
___resumeException($$01$i | 0);
} while (0);
$7 = HEAP32[17859] | 0;
do if ($7 | 0) {
__THREW__ = 0;
invoke_vi(171, $7 | 0);
$9 = __THREW__;
__THREW__ = 0;
if (!($9 & 1)) {
__ZdlPv($7);
HEAP32[17859] = 0;
break;
}
$11 = ___cxa_find_matching_catch_2() | 0;
$12 = tempRet0;
__ZdlPv($7);
$$0$i = $12;
$$01$i = $11;
___resumeException($$01$i | 0);
} while (0);
$13 = HEAP32[17863] | 0;
if ($13 | 0) {
_free($13);
HEAP32[17863] = 0;
}
$15 = HEAP32[17860] | 0;
do if ($15 | 0) {
__THREW__ = 0;
invoke_vi(172, $15 | 0);
$17 = __THREW__;
__THREW__ = 0;
if (!($17 & 1)) {
__ZdlPv($15);
HEAP32[17860] = 0;
break;
}
$19 = ___cxa_find_matching_catch_2() | 0;
$20 = tempRet0;
__ZdlPv($15);
$$0$i = $20;
$$01$i = $19;
___resumeException($$01$i | 0);
} while (0);
$21 = HEAP32[16638] | 0;
L25 : do if ($21 | 0) {
__THREW__ = 0;
invoke_vi(101, $21 + 112 | 0);
$24 = __THREW__;
__THREW__ = 0;
do if ($24 & 1) {
$28 = ___cxa_find_matching_catch_2() | 0;
$29 = tempRet0;
__THREW__ = 0;
invoke_vi(101, $21 | 0);
$30 = __THREW__;
__THREW__ = 0;
if ($30 & 1) {
$32 = ___cxa_find_matching_catch_3(0) | 0;
___clang_call_terminate($32);
} else {
$eh$lpad$body$i$index2Z2D = $29;
$eh$lpad$body$i$indexZ2D = $28;
}
} else {
__THREW__ = 0;
invoke_vi(101, $21 | 0);
$26 = __THREW__;
__THREW__ = 0;
if ($26 & 1) {
$34 = ___cxa_find_matching_catch_2() | 0;
$eh$lpad$body$i$index2Z2D = tempRet0;
$eh$lpad$body$i$indexZ2D = $34;
break;
} else {
__ZdlPv($21);
HEAP32[16638] = 0;
break L25;
}
} while (0);
__ZdlPv($21);
$$0$i = $eh$lpad$body$i$index2Z2D;
$$01$i = $eh$lpad$body$i$indexZ2D;
___resumeException($$01$i | 0);
} while (0);
HEAP32[16637] = 0;
$36 = HEAP32[17866] | 0;
L37 : do if ($36 | 0) {
$38 = $36 + 4 | 0;
$39 = HEAP32[$38 >> 2] | 0;
do if (($39 | 0) > 0) {
$41 = $36 + 20 | 0;
$$023$i$i = 0;
$85 = $39;
L41 : while (1) {
$$02021$i$i = HEAP32[(HEAP32[$36 >> 2] | 0) + ($$023$i$i << 3) >> 2] | 0;
if (!$$02021$i$i) $60 = $85; else {
$$02022$i$i = $$02021$i$i;
do {
$45 = $$02022$i$i + 4 | 0;
$46 = HEAP32[$45 >> 2] | 0;
$47 = HEAP32[$41 >> 2] | 0;
if (($46 | 0) != ($47 | 0)) {
if (!$46) $55 = $47; else {
__THREW__ = 0;
invoke_vi(142, $46 | 0);
$51 = __THREW__;
__THREW__ = 0;
if ($51 & 1) {
label = 31;
break L41;
}
__ZdlPv($46);
$55 = HEAP32[$41 >> 2] | 0;
}
HEAP32[$45 >> 2] = $55;
}
$$02022$i$i = HEAP32[$$02022$i$i + 8 >> 2] | 0;
} while (($$02022$i$i | 0) != 0);
$60 = HEAP32[$38 >> 2] | 0;
}
$$023$i$i = $$023$i$i + 1 | 0;
if (($$023$i$i | 0) >= ($60 | 0)) {
label = 36;
break;
} else $85 = $60;
}
if ((label | 0) == 31) {
$53 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($46);
___resumeException($53 | 0);
} else if ((label | 0) == 36) {
$$pre4$i = HEAP32[17866] | 0;
if (!$$pre4$i) break L37; else {
$62 = $$pre4$i;
break;
}
}
} else $62 = $36; while (0);
__THREW__ = 0;
invoke_vi(173, $62 | 0);
$63 = __THREW__;
__THREW__ = 0;
if (!($63 & 1)) {
__ZdlPv($62);
HEAP32[17866] = 0;
break;
}
$65 = ___cxa_find_matching_catch_2() | 0;
$66 = tempRet0;
__ZdlPv($62);
$$0$i = $66;
$$01$i = $65;
___resumeException($$01$i | 0);
} while (0);
$67 = HEAP32[17865] | 0;
do if ($67 | 0) {
__THREW__ = 0;
invoke_vi(174, $67 | 0);
$69 = __THREW__;
__THREW__ = 0;
if (!($69 & 1)) {
__ZdlPv($67);
HEAP32[17865] = 0;
break;
}
$71 = ___cxa_find_matching_catch_2() | 0;
$72 = tempRet0;
__ZdlPv($67);
$$0$i = $72;
$$01$i = $71;
___resumeException($$01$i | 0);
} while (0);
__Z19DeleteNonmanualDefsv();
__ZN10Trajectory19DestroyTrajectoriesEv();
$73 = HEAP32[16168] | 0;
do if ($73 | 0) {
__THREW__ = 0;
invoke_vi(110, $73 | 0);
$75 = __THREW__;
__THREW__ = 0;
if ($75 & 1) {
$77 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($73);
___resumeException($77 | 0);
} else {
__ZdlPv($73);
HEAP32[16168] = 0;
break;
}
} while (0);
__Z18DestroyNameIndexesv();
__Z21DeleteControllerTablev();
__Z21DeleteTrajectoryTablev();
__Z17DeleteSiGMLTablesv();
__Z20DeleteMovementTablesv();
if (1) {}
__Z17END_UNIMPLEMENTEDv();
__Z17DeleteVersionInfov();
$80 = HEAP32[16082] | 0;
if (($80 | 0) == 0 | ($80 | 0) == (HEAP32[1832] | 0)) {
HEAP32[17861] = 0;
STACKTOP = sp;
return;
}
_fflush($80) | 0;
_fclose(HEAP32[16082] | 0) | 0;
HEAP32[17861] = 0;
STACKTOP = sp;
return;
}
function __Z21DeleteNonmanualTablesv() {
var $$0 = 0, $$01 = 0, $0 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $64 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $86 = 0, $87 = 0, $88 = 0, $90 = 0, $92 = 0, $93 = 0;
$0 = HEAP32[17820] | 0;
do if ($0 | 0) {
__THREW__ = 0;
invoke_vi(111, $0 | 0);
$2 = __THREW__;
__THREW__ = 0;
if (!($2 & 1)) {
__ZdlPv($0);
HEAP32[17820] = 0;
break;
}
$4 = ___cxa_find_matching_catch_2() | 0;
$5 = tempRet0;
__ZdlPv($0);
$$0 = $5;
$$01 = $4;
___resumeException($$01 | 0);
} while (0);
$6 = HEAP32[17821] | 0;
if ($6 | 0) {
_free($6);
HEAP32[17821] = 0;
}
$8 = HEAP32[17822] | 0;
do if ($8 | 0) {
__THREW__ = 0;
invoke_vi(147, $8 | 0);
$10 = __THREW__;
__THREW__ = 0;
if (!($10 & 1)) {
__ZdlPv($8);
HEAP32[17822] = 0;
break;
}
$12 = ___cxa_find_matching_catch_2() | 0;
$13 = tempRet0;
__ZdlPv($8);
$$0 = $13;
$$01 = $12;
___resumeException($$01 | 0);
} while (0);
$14 = HEAP32[17823] | 0;
if ($14 | 0) {
$16 = HEAP32[$14 >> 2] | 0;
if ($16 | 0) _free($16);
__ZdlPv($14);
HEAP32[17823] = 0;
}
$18 = HEAP32[17824] | 0;
do if ($18 | 0) {
__THREW__ = 0;
invoke_vi(144, $18 | 0);
$20 = __THREW__;
__THREW__ = 0;
if (!($20 & 1)) {
__ZdlPv($18);
HEAP32[17824] = 0;
break;
}
$22 = ___cxa_find_matching_catch_2() | 0;
$23 = tempRet0;
__ZdlPv($18);
$$0 = $23;
$$01 = $22;
___resumeException($$01 | 0);
} while (0);
$24 = HEAP32[17825] | 0;
if ($24 | 0) {
$26 = HEAP32[$24 >> 2] | 0;
if ($26 | 0) _free($26);
__ZdlPv($24);
HEAP32[17825] = 0;
}
$28 = HEAP32[17826] | 0;
do if ($28 | 0) {
__THREW__ = 0;
invoke_vi(144, $28 | 0);
$30 = __THREW__;
__THREW__ = 0;
if (!($30 & 1)) {
__ZdlPv($28);
HEAP32[17826] = 0;
break;
}
$32 = ___cxa_find_matching_catch_2() | 0;
$33 = tempRet0;
__ZdlPv($28);
$$0 = $33;
$$01 = $32;
___resumeException($$01 | 0);
} while (0);
$34 = HEAP32[17827] | 0;
do if ($34 | 0) {
__THREW__ = 0;
invoke_vi(147, $34 | 0);
$36 = __THREW__;
__THREW__ = 0;
if (!($36 & 1)) {
__ZdlPv($34);
HEAP32[17827] = 0;
break;
}
$38 = ___cxa_find_matching_catch_2() | 0;
$39 = tempRet0;
__ZdlPv($34);
$$0 = $39;
$$01 = $38;
___resumeException($$01 | 0);
} while (0);
$40 = HEAP32[17828] | 0;
do if ($40 | 0) {
__THREW__ = 0;
invoke_vi(111, $40 | 0);
$42 = __THREW__;
__THREW__ = 0;
if (!($42 & 1)) {
__ZdlPv($40);
HEAP32[17828] = 0;
break;
}
$44 = ___cxa_find_matching_catch_2() | 0;
$45 = tempRet0;
__ZdlPv($40);
$$0 = $45;
$$01 = $44;
___resumeException($$01 | 0);
} while (0);
$46 = HEAP32[17829] | 0;
do if ($46 | 0) {
__THREW__ = 0;
invoke_vi(111, $46 | 0);
$48 = __THREW__;
__THREW__ = 0;
if (!($48 & 1)) {
__ZdlPv($46);
HEAP32[17829] = 0;
break;
}
$50 = ___cxa_find_matching_catch_2() | 0;
$51 = tempRet0;
__ZdlPv($46);
$$0 = $51;
$$01 = $50;
___resumeException($$01 | 0);
} while (0);
$52 = HEAP32[17830] | 0;
do if ($52 | 0) {
__THREW__ = 0;
invoke_vi(111, $52 | 0);
$54 = __THREW__;
__THREW__ = 0;
if (!($54 & 1)) {
__ZdlPv($52);
HEAP32[17830] = 0;
break;
}
$56 = ___cxa_find_matching_catch_2() | 0;
$57 = tempRet0;
__ZdlPv($52);
$$0 = $57;
$$01 = $56;
___resumeException($$01 | 0);
} while (0);
$58 = HEAP32[17831] | 0;
do if ($58 | 0) {
__THREW__ = 0;
invoke_vi(111, $58 | 0);
$60 = __THREW__;
__THREW__ = 0;
if (!($60 & 1)) {
__ZdlPv($58);
HEAP32[17831] = 0;
break;
}
$62 = ___cxa_find_matching_catch_2() | 0;
$63 = tempRet0;
__ZdlPv($58);
$$0 = $63;
$$01 = $62;
___resumeException($$01 | 0);
} while (0);
$64 = HEAP32[17832] | 0;
do if ($64 | 0) {
__THREW__ = 0;
invoke_vi(111, $64 | 0);
$66 = __THREW__;
__THREW__ = 0;
if (!($66 & 1)) {
__ZdlPv($64);
HEAP32[17832] = 0;
break;
}
$68 = ___cxa_find_matching_catch_2() | 0;
$69 = tempRet0;
__ZdlPv($64);
$$0 = $69;
$$01 = $68;
___resumeException($$01 | 0);
} while (0);
$70 = HEAP32[17833] | 0;
do if ($70 | 0) {
__THREW__ = 0;
invoke_vi(111, $70 | 0);
$72 = __THREW__;
__THREW__ = 0;
if (!($72 & 1)) {
__ZdlPv($70);
HEAP32[17833] = 0;
break;
}
$74 = ___cxa_find_matching_catch_2() | 0;
$75 = tempRet0;
__ZdlPv($70);
$$0 = $75;
$$01 = $74;
___resumeException($$01 | 0);
} while (0);
$76 = HEAP32[17834] | 0;
do if ($76 | 0) {
__THREW__ = 0;
invoke_vi(111, $76 | 0);
$78 = __THREW__;
__THREW__ = 0;
if (!($78 & 1)) {
__ZdlPv($76);
HEAP32[17834] = 0;
break;
}
$80 = ___cxa_find_matching_catch_2() | 0;
$81 = tempRet0;
__ZdlPv($76);
$$0 = $81;
$$01 = $80;
___resumeException($$01 | 0);
} while (0);
$82 = HEAP32[17835] | 0;
do if ($82 | 0) {
__THREW__ = 0;
invoke_vi(111, $82 | 0);
$84 = __THREW__;
__THREW__ = 0;
if (!($84 & 1)) {
__ZdlPv($82);
HEAP32[17835] = 0;
break;
}
$86 = ___cxa_find_matching_catch_2() | 0;
$87 = tempRet0;
__ZdlPv($82);
$$0 = $87;
$$01 = $86;
___resumeException($$01 | 0);
} while (0);
$88 = HEAP32[17836] | 0;
if (!$88) return;
__THREW__ = 0;
invoke_vi(111, $88 | 0);
$90 = __THREW__;
__THREW__ = 0;
if ($90 & 1) {
$92 = ___cxa_find_matching_catch_2() | 0;
$93 = tempRet0;
__ZdlPv($88);
$$0 = $93;
$$01 = $92;
___resumeException($$01 | 0);
} else {
__ZdlPv($88);
HEAP32[17836] = 0;
return;
}
}
function _XmlParseXmlDecl($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
$6 = $6 | 0;
$7 = $7 | 0;
$8 = $8 | 0;
$9 = $9 | 0;
var $$0$i5$i = 0, $$013$i$i$i = 0, $$014$i$i$i = 0, $$015$i$i$i = 0, $$1$i = 0, $$pre11$i = 0, $10 = 0, $102 = 0, $103 = 0, $107 = 0, $109 = 0, $11 = 0, $110 = 0, $116 = 0, $118 = 0, $119 = 0, $12 = 0, $128 = 0, $13 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $23 = 0, $25 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $39 = 0, $41 = 0, $45 = 0, $51 = 0, $52 = 0, $55 = 0, $56 = 0, $69 = 0, $76 = 0, $78 = 0, $91 = 0, $98 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 160 | 0;
$10 = sp + 152 | 0;
$11 = sp + 24 | 0;
$12 = sp + 16 | 0;
$13 = sp + 12 | 0;
$14 = sp + 8 | 0;
$15 = sp + 4 | 0;
$16 = sp;
HEAP32[$14 >> 2] = 0;
HEAP32[$15 >> 2] = 0;
HEAP32[$16 >> 2] = 0;
$17 = $1 + 64 | 0;
$18 = HEAP32[$17 >> 2] | 0;
$20 = $2 + ($18 * 5 | 0) | 0;
HEAP32[$13 >> 2] = $20;
$23 = $3 + (0 - ($18 << 1)) | 0;
$25 = (_parsePseudoAttribute($1, $20, $23, $15, $16, $14, $13) | 0) != 0;
$26 = HEAP32[$15 >> 2] | 0;
$28 = $26;
if (!($25 & ($26 | 0) != 0)) {
HEAP32[$4 >> 2] = HEAP32[$13 >> 2];
$$1$i = 0;
STACKTOP = sp;
return $$1$i | 0;
}
$30 = $1 + 24 | 0;
$32 = HEAP32[$16 >> 2] | 0;
do if (!(FUNCTION_TABLE_iiiii[HEAP32[$30 >> 2] & 63]($1, $26, $32, 57404) | 0)) if (!$0) {
HEAP32[$4 >> 2] = $28;
$$1$i = 0;
STACKTOP = sp;
return $$1$i | 0;
} else {
$137 = $28;
$51 = $26;
$52 = $32;
} else {
if ($5 | 0) HEAP32[$5 >> 2] = HEAP32[$14 >> 2];
if (!$6) $41 = HEAP32[$13 >> 2] | 0; else {
$39 = HEAP32[$13 >> 2] | 0;
HEAP32[$6 >> 2] = $39;
$41 = $39;
}
if (!(_parsePseudoAttribute($1, $41, $23, $15, $16, $14, $13) | 0)) {
HEAP32[$4 >> 2] = HEAP32[$13 >> 2];
$$1$i = 0;
STACKTOP = sp;
return $$1$i | 0;
}
$45 = HEAP32[$15 >> 2] | 0;
if ($45 | 0) {
$137 = $45;
$51 = $45;
$52 = HEAP32[$16 >> 2] | 0;
break;
}
if (!$0) {
$$1$i = 1;
STACKTOP = sp;
return $$1$i | 0;
}
HEAP32[$4 >> 2] = HEAP32[$13 >> 2];
$$1$i = 0;
STACKTOP = sp;
return $$1$i | 0;
} while (0);
do if (!(FUNCTION_TABLE_iiiii[HEAP32[$30 >> 2] & 63]($1, $51, $52, 60510) | 0)) {
$102 = $51;
$103 = $52;
$107 = $137;
} else {
$55 = HEAP32[$14 >> 2] | 0;
HEAP32[$10 >> 2] = $55;
HEAP32[$11 >> 2] = $12;
$56 = $1 + 56 | 0;
FUNCTION_TABLE_viiiii[HEAP32[$56 >> 2] & 15]($1, $10, $23, $11, $12 + 1 | 0);
if (!((HEAP32[$11 >> 2] | 0) != ($12 | 0) ? ((HEAP8[$12 >> 0] & -33) + -65 | 0) >>> 0 < 26 : 0)) {
HEAP32[$4 >> 2] = $55;
$$1$i = 0;
STACKTOP = sp;
return $$1$i | 0;
}
if ($7 | 0) HEAP32[$7 >> 2] = $55;
$$pre11$i = HEAP32[$13 >> 2] | 0;
if ($8 | 0) {
$69 = $$pre11$i + (0 - (HEAP32[$17 >> 2] | 0)) | 0;
HEAP32[$10 >> 2] = $55;
HEAP32[$12 >> 2] = $11;
FUNCTION_TABLE_viiiii[HEAP32[$56 >> 2] & 15]($1, $10, $69, $12, $11 + 127 | 0);
do if ((HEAP32[$10 >> 2] | 0) == ($69 | 0)) {
HEAP8[HEAP32[$12 >> 2] >> 0] = 0;
$$014$i$i$i = 60485;
$$015$i$i$i = $11;
L42 : while (1) {
$76 = HEAP8[$$015$i$i$i >> 0] | 0;
$78 = HEAP8[$$014$i$i$i >> 0] | 0;
$$013$i$i$i = ($76 + -97 & 255) < 26 ? ($76 & 255) + 224 & 255 : $76;
switch (($$013$i$i$i << 24 >> 24 == (($78 + -97 & 255) < 26 ? ($78 & 255) + 224 & 255 : $78) << 24 >> 24 ? ($$013$i$i$i << 24 >> 24 == 0 ? 2 : 0) : 1) & 3) {
case 0:
{
$$014$i$i$i = $$014$i$i$i + 1 | 0;
$$015$i$i$i = $$015$i$i$i + 1 | 0;
break;
}
case 1:
{
break L42;
break;
}
case 2:
{
label = 27;
break L42;
break;
}
default:
{
label = 26;
break L42;
}
}
}
if ((label | 0) == 26) {} else if ((label | 0) == 27) if ((HEAP32[$17 >> 2] | 0) == 2) {
$$0$i5$i = $1;
break;
}
$91 = _getEncodingIndex($11) | 0;
if (($91 | 0) == -1) $$0$i5$i = 0; else $$0$i5$i = HEAP32[6732 + ($91 << 2) >> 2] | 0;
} else $$0$i5$i = 0; while (0);
HEAP32[$8 >> 2] = $$0$i5$i;
}
if (!(_parsePseudoAttribute($1, $$pre11$i, $23, $15, $16, $14, $13) | 0)) {
HEAP32[$4 >> 2] = HEAP32[$13 >> 2];
$$1$i = 0;
STACKTOP = sp;
return $$1$i | 0;
}
$98 = HEAP32[$15 >> 2] | 0;
if (!$98) {
$$1$i = 1;
STACKTOP = sp;
return $$1$i | 0;
} else {
$102 = $98;
$103 = HEAP32[$16 >> 2] | 0;
$107 = $98;
break;
}
} while (0);
if (($0 | 0) != 0 | (FUNCTION_TABLE_iiiii[HEAP32[$30 >> 2] & 63]($1, $102, $103, 60519) | 0) == 0) {
HEAP32[$4 >> 2] = $107;
$$1$i = 0;
STACKTOP = sp;
return $$1$i | 0;
}
$109 = HEAP32[$14 >> 2] | 0;
$110 = HEAP32[$13 >> 2] | 0;
$116 = $109;
do if (!(FUNCTION_TABLE_iiiii[HEAP32[$30 >> 2] & 63]($1, $109, $110 + (0 - (HEAP32[$17 >> 2] | 0)) | 0, 60530) | 0)) if (!(FUNCTION_TABLE_iiiii[HEAP32[$30 >> 2] & 63]($1, $109, $110 + (0 - (HEAP32[$17 >> 2] | 0)) | 0, 60534) | 0)) {
HEAP32[$4 >> 2] = $116;
$$1$i = 0;
STACKTOP = sp;
return $$1$i | 0;
} else {
if (!$9) break;
HEAP32[$9 >> 2] = 0;
break;
} else if ($9 | 0) HEAP32[$9 >> 2] = 1; while (0);
$118 = $1 + 56 | 0;
$119 = $12 + 1 | 0;
$128 = $110;
L73 : while (1) {
HEAP32[$10 >> 2] = $128;
HEAP32[$11 >> 2] = $12;
FUNCTION_TABLE_viiiii[HEAP32[$118 >> 2] & 15]($1, $10, $23, $11, $119);
switch (((HEAP32[$11 >> 2] | 0) == ($12 | 0) ? -1 : HEAP8[$12 >> 0] | 0) | 0) {
case 9:
case 10:
case 13:
case 32:
break;
default:
break L73;
}
$128 = $128 + (HEAP32[$17 >> 2] | 0) | 0;
}
HEAP32[$13 >> 2] = $128;
if (($128 | 0) == ($23 | 0)) {
$$1$i = 1;
STACKTOP = sp;
return $$1$i | 0;
}
HEAP32[$4 >> 2] = $128;
$$1$i = 0;
STACKTOP = sp;
return $$1$i | 0;
}
function _fmod($0, $1) {
$0 = +$0;
$1 = +$1;
var $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27586 = 0, $$376$lcssa = 0, $$37683 = 0, $$lcssa = 0, $101 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $123 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $150 = 0, $153 = 0, $154 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $18 = 0, $2 = 0, $20 = 0, $27 = 0.0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $41 = 0, $42 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $59 = 0, $6 = 0, $64 = 0, $65 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $82 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $97 = 0, $99 = 0, label = 0;
HEAPF64[tempDoublePtr >> 3] = $0;
$2 = HEAP32[tempDoublePtr >> 2] | 0;
$3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
HEAPF64[tempDoublePtr >> 3] = $1;
$4 = HEAP32[tempDoublePtr >> 2] | 0;
$5 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
$6 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
$8 = $6 & 2047;
$9 = _bitshift64Lshr($4 | 0, $5 | 0, 52) | 0;
$11 = $9 & 2047;
$12 = $3 & -2147483648;
$13 = _bitshift64Shl($4 | 0, $5 | 0, 1) | 0;
$14 = tempRet0;
L1 : do if (($13 | 0) == 0 & ($14 | 0) == 0) label = 3; else {
$18 = ___DOUBLE_BITS_271($1) | 0;
$20 = tempRet0 & 2147483647;
if (($8 | 0) == 2047 | ($20 >>> 0 > 2146435072 | ($20 | 0) == 2146435072 & $18 >>> 0 > 0)) label = 3; else {
$29 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0;
$30 = tempRet0;
if (!($30 >>> 0 > $14 >>> 0 | ($30 | 0) == ($14 | 0) & $29 >>> 0 > $13 >>> 0)) return +(($29 | 0) == ($13 | 0) & ($30 | 0) == ($14 | 0) ? $0 * 0.0 : $0);
if (!$8) {
$41 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0;
$42 = tempRet0;
if (($42 | 0) > -1 | ($42 | 0) == -1 & $41 >>> 0 > 4294967295) {
$$073100 = 0;
$49 = $41;
$50 = $42;
while (1) {
$48 = $$073100 + -1 | 0;
$49 = _bitshift64Shl($49 | 0, $50 | 0, 1) | 0;
$50 = tempRet0;
if (!(($50 | 0) > -1 | ($50 | 0) == -1 & $49 >>> 0 > 4294967295)) {
$$073$lcssa = $48;
break;
} else $$073100 = $48;
}
} else $$073$lcssa = 0;
$59 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $$073$lcssa | 0) | 0;
$$174 = $$073$lcssa;
$87 = $59;
$88 = tempRet0;
} else {
$$174 = $8;
$87 = $2;
$88 = $3 & 1048575 | 1048576;
}
if (!$11) {
$64 = _bitshift64Shl($4 | 0, $5 | 0, 12) | 0;
$65 = tempRet0;
if (($65 | 0) > -1 | ($65 | 0) == -1 & $64 >>> 0 > 4294967295) {
$$07194 = 0;
$72 = $64;
$73 = $65;
while (1) {
$71 = $$07194 + -1 | 0;
$72 = _bitshift64Shl($72 | 0, $73 | 0, 1) | 0;
$73 = tempRet0;
if (!(($73 | 0) > -1 | ($73 | 0) == -1 & $72 >>> 0 > 4294967295)) {
$$071$lcssa = $71;
break;
} else $$07194 = $71;
}
} else $$071$lcssa = 0;
$82 = _bitshift64Shl($4 | 0, $5 | 0, 1 - $$071$lcssa | 0) | 0;
$$172$ph = $$071$lcssa;
$89 = $82;
$90 = tempRet0;
} else {
$$172$ph = $11;
$89 = $4;
$90 = $5 & 1048575 | 1048576;
}
$91 = _i64Subtract($87 | 0, $88 | 0, $89 | 0, $90 | 0) | 0;
$92 = tempRet0;
$97 = ($92 | 0) > -1 | ($92 | 0) == -1 & $91 >>> 0 > 4294967295;
L23 : do if (($$174 | 0) > ($$172$ph | 0)) {
$$27586 = $$174;
$101 = $92;
$156 = $97;
$157 = $87;
$158 = $88;
$99 = $91;
while (1) {
if ($156) if (($99 | 0) == 0 & ($101 | 0) == 0) break; else {
$104 = $99;
$105 = $101;
} else {
$104 = $157;
$105 = $158;
}
$106 = _bitshift64Shl($104 | 0, $105 | 0, 1) | 0;
$107 = tempRet0;
$108 = $$27586 + -1 | 0;
$110 = _i64Subtract($106 | 0, $107 | 0, $89 | 0, $90 | 0) | 0;
$111 = tempRet0;
$116 = ($111 | 0) > -1 | ($111 | 0) == -1 & $110 >>> 0 > 4294967295;
if (($108 | 0) > ($$172$ph | 0)) {
$$27586 = $108;
$101 = $111;
$156 = $116;
$157 = $106;
$158 = $107;
$99 = $110;
} else {
$$275$lcssa = $108;
$$lcssa = $116;
$118 = $110;
$120 = $111;
$159 = $106;
$160 = $107;
break L23;
}
}
$$070 = $0 * 0.0;
break L1;
} else {
$$275$lcssa = $$174;
$$lcssa = $97;
$118 = $91;
$120 = $92;
$159 = $87;
$160 = $88;
} while (0);
if ($$lcssa) if (($118 | 0) == 0 & ($120 | 0) == 0) {
$$070 = $0 * 0.0;
break;
} else {
$123 = $120;
$125 = $118;
} else {
$123 = $160;
$125 = $159;
}
if ($123 >>> 0 < 1048576 | ($123 | 0) == 1048576 & $125 >>> 0 < 0) {
$$37683 = $$275$lcssa;
$130 = $125;
$131 = $123;
while (1) {
$132 = _bitshift64Shl($130 | 0, $131 | 0, 1) | 0;
$133 = tempRet0;
$134 = $$37683 + -1 | 0;
if ($133 >>> 0 < 1048576 | ($133 | 0) == 1048576 & $132 >>> 0 < 0) {
$$37683 = $134;
$130 = $132;
$131 = $133;
} else {
$$376$lcssa = $134;
$141 = $132;
$142 = $133;
break;
}
}
} else {
$$376$lcssa = $$275$lcssa;
$141 = $125;
$142 = $123;
}
if (($$376$lcssa | 0) > 0) {
$143 = _i64Add($141 | 0, $142 | 0, 0, -1048576) | 0;
$144 = tempRet0;
$145 = _bitshift64Shl($$376$lcssa | 0, 0, 52) | 0;
$153 = $144 | tempRet0;
$154 = $143 | $145;
} else {
$150 = _bitshift64Lshr($141 | 0, $142 | 0, 1 - $$376$lcssa | 0) | 0;
$153 = tempRet0;
$154 = $150;
}
HEAP32[tempDoublePtr >> 2] = $154;
HEAP32[tempDoublePtr + 4 >> 2] = $153 | $12;
$$070 = +HEAPF64[tempDoublePtr >> 3];
}
} while (0);
if ((label | 0) == 3) {
$27 = $0 * $1;
$$070 = $27 / $27;
}
return +$$070;
}
function __ZN14RepeatMovement17GetCurrentPostureER19TwoHConcretePosturefb($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
var $$ = f0, $$74 = f0, $11 = f0, $117 = 0, $119 = f0, $124 = 0.0, $129 = 0, $136 = f0, $15 = f0, $16 = 0, $17 = 0, $18 = f0, $24 = f0, $25 = f0, $26 = f0, $30 = 0, $32 = 0, $36 = f0, $37 = 0, $4 = 0, $40 = f0, $42 = f0, $43 = 0, $46 = f0, $5 = 0, $50 = 0, $51 = 0, $52 = f0, $53 = 0, $54 = 0, $59 = f0, $6 = 0, $61 = 0, $64 = 0, $65 = 0, $70 = 0, $71 = 0, $73 = 0, $76 = f0, $77 = f0, $78 = 0, $8 = f0, $81 = f0, $83 = f0, $84 = 0, $85 = 0, $86 = f0, $92 = f0, $93 = f0, $94 = f0, $95 = f0, $96 = 0, $97 = 0, $vararg_buffer = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer3 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 128 | 0;
$vararg_buffer18 = sp + 88 | 0;
$vararg_buffer16 = sp + 80 | 0;
$vararg_buffer14 = sp + 72 | 0;
$vararg_buffer3 = sp + 16 | 0;
$vararg_buffer = sp;
$4 = sp + 116 | 0;
$5 = sp + 104 | 0;
$6 = sp + 92 | 0;
$8 = Math_fround(HEAPF32[$0 + 40 >> 2]);
$11 = Math_fround($8 - Math_fround(HEAPF32[$0 + 44 >> 2]));
if ($2 <= Math_fround(0.0) | $11 <= $2) {
if (!($11 <= Math_fround(0.0))) {
$15 = Math_fround($2 / $11);
$16 = $15 < Math_fround(0.0);
$17 = $15 > Math_fround(1.0);
$18 = $17 ? Math_fround(1.0) : $15;
$24 = $16 ? Math_fround(0.0) : $18;
} else $24 = Math_fround(1.0);
$25 = Math_fround(__ZNK10Trajectory16lookupByFractionEf(HEAP32[66492 + (HEAP32[$0 + 12 >> 2] << 2) >> 2] | 0, $24));
$26 = Math_fround(Math_fround(1.0) - $25);
if (0) {
$30 = HEAP32[$0 + 4 >> 2] | 0;
$32 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[16658] | 0, $30) | 0;
HEAP32[$vararg_buffer >> 2] = $30;
HEAP32[$vararg_buffer + 4 >> 2] = $32;
HEAPF64[$vararg_buffer + 8 >> 3] = +$2;
__Z7eprintfPKcz(35945, $vararg_buffer);
}
__ZNK25TwoHConcretePostureChange11interpolateER19TwoHConcretePosturef12SET_OF_HANDSb($0 + 60 | 0, $1, $3 ? $25 : $26, HEAP32[$0 + 8 >> 2] | 0, $3);
STACKTOP = sp;
return;
}
$36 = Math_fround($11 - $2);
$$ = $3 ? $2 : $36;
$37 = $0 + 696 | 0;
$40 = Math_fround(HEAPF32[(HEAP32[$37 >> 2] | 0) + 40 >> 2]);
$42 = Math_fround(HEAPF32[$0 + 576 >> 2]);
$43 = $0 + 584 | 0;
$46 = Math_fround(__Z8remfloatff($$, Math_fround($40 * Math_fround(HEAPF32[$43 >> 2]))));
$50 = ~~Math_fround($$ / Math_fround($40 * Math_fround(HEAPF32[$43 >> 2])));
$51 = $46 <= $40;
if ($51) {
$52 = Math_fround($46 / $40);
$53 = HEAP32[$37 >> 2] | 0;
$54 = $53 + 40 | 0;
$71 = 1;
$73 = $53;
$76 = Math_fround($52 * Math_fround(HEAPF32[$54 >> 2]));
$78 = $54;
} else {
$59 = Math_fround(Math_fround($46 - $40) / Math_fround($40 * $42));
$61 = HEAP8[$0 + 571 >> 0] | 0;
$64 = HEAP32[($61 << 24 >> 24 == 0 ? $37 : $0 + 700 | 0) >> 2] | 0;
$65 = $64 + 40 | 0;
$71 = $61 & 255;
$73 = $64;
$76 = Math_fround($59 * Math_fround(HEAPF32[$65 >> 2]));
$78 = $65;
}
$70 = ($71 | 0) == ($3 & 1 | 0);
FUNCTION_TABLE_viifi[HEAP32[(HEAP32[$73 >> 2] | 0) + 60 >> 2] & 15]($73, $1, $76, $70);
$77 = Math_fround(HEAPF32[$78 >> 2]);
$81 = Math_fround($77 - Math_fround(HEAPF32[$73 + 44 >> 2]));
if (!($81 <= Math_fround(0.0))) {
$83 = Math_fround($76 / $81);
$84 = $83 < Math_fround(0.0);
$85 = $83 > Math_fround(1.0);
$86 = $85 ? Math_fround(1.0) : $83;
$92 = $84 ? Math_fround(0.0) : $86;
} else $92 = Math_fround(1.0);
$93 = Math_fround(__ZNK10Trajectory16lookupByFractionEf(HEAP32[66492 + (HEAP32[$73 + 12 >> 2] << 2) >> 2] | 0, $92));
$94 = Math_fround(Math_fround(1.0) - $93);
$95 = Math_fround(Math_fround(1.0) - ($70 ? $93 : $94));
$$74 = $70 ? $93 : $95;
$96 = $0 + 8 | 0;
$97 = HEAP32[$96 >> 2] | 0;
switch ($97 | 0) {
case 3:
case 5:
{
__ZN6VectorC2Ev($4);
__ZN6VectorC2Ev($5);
__ZL19CalcStartEndRepDispP6VectorS0_ibRKS_S2_S2_S2_ff($4, $5, $50, $51, $0 + 592 | 0, $0 + 604 | 0, $0 + 616 | 0, $0 + 628 | 0, Math_fround(HEAPF32[$0 + 692 >> 2]), Math_fround(HEAPF32[$0 + 688 >> 2]));
__ZN6VectorC2Ev($6);
__ZN6Vector11setMidPointERKS_S1_f($6, $4, $5, $$74);
__ZN6Vector6setAddERKS_($1 + 4 | 0, $6);
if (!((HEAP32[16082] | 0) == 0 | 0 == 0)) {
$117 = HEAP8[$0 + 571 >> 0] | 0 ? 84 : 70;
$119 = Math_fround(HEAPF32[$78 >> 2]);
$124 = +Math_fround($76 / $119);
HEAP32[$vararg_buffer3 >> 2] = ($73 | 0) == (HEAP32[$37 >> 2] | 0) ? 39398 : 39402;
HEAP32[$vararg_buffer3 + 4 >> 2] = $70 ? 84 : 70;
HEAP32[$vararg_buffer3 + 8 >> 2] = $51 ? 84 : 70;
HEAP32[$vararg_buffer3 + 12 >> 2] = $117;
HEAP32[$vararg_buffer3 + 16 >> 2] = $3 ? 84 : 70;
HEAPF64[$vararg_buffer3 + 24 >> 3] = +$119;
HEAPF64[$vararg_buffer3 + 32 >> 3] = +$$74;
HEAPF64[$vararg_buffer3 + 40 >> 3] = +$76;
HEAPF64[$vararg_buffer3 + 48 >> 3] = $124;
__Z7eprintfPKcz(39406, $vararg_buffer3);
__Z7eprintfPKcz(39484, $vararg_buffer14);
__ZNK6Vector5printEP8_IO_FILEi($4, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(39502, $vararg_buffer16);
__ZNK6Vector5printEP8_IO_FILEi($6, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(39514, $vararg_buffer18);
__ZNK6Vector5printEP8_IO_FILEi($5, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
$129 = HEAP32[$96 >> 2] | 0;
break;
}
default:
$129 = $97;
}
if (($129 | 1 | 0) != 5) {
STACKTOP = sp;
return;
}
__ZN6VectorC2Ev($4);
__ZN6VectorC2Ev($5);
$136 = Math_fround(HEAPF32[$0 + 692 >> 2]);
__ZL19CalcStartEndRepDispP6VectorS0_ibRKS_S2_S2_S2_ff($4, $5, $50, $51, $0 + 640 | 0, $0 + 652 | 0, $0 + 664 | 0, $0 + 676 | 0, $136, Math_fround(HEAPF32[$0 + 688 >> 2]));
__ZN6VectorC2Ev($6);
__ZN6Vector11setMidPointERKS_S1_f($6, $4, $5, $$74);
__ZN6Vector6setAddERKS_($1 + 116 | 0, $6);
STACKTOP = sp;
return;
}
function __ZNK19OneHAbstractPosture21printOrientationSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEbb($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $100 = 0, $101 = f0, $105 = 0, $24 = 0, $35 = f0, $37 = 0, $38 = f0, $39 = 0, $4 = 0, $40 = 0, $45 = 0, $5 = 0, $55 = 0, $59 = f0, $6 = 0, $61 = 0, $62 = f0, $66 = 0, $67 = 0, $7 = 0, $74 = 0, $8 = 0, $83 = f0, $85 = 0, $86 = f0, $87 = 0, $88 = 0, $93 = 0, $98 = f0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$4 = sp + 44 | 0;
$5 = sp + 32 | 0;
$6 = sp + 24 | 0;
$7 = sp + 8 | 0;
$8 = sp;
if ($2) {
if (Math_fround(HEAPF32[$0 + 20 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 24 >> 2]) == Math_fround(0.0)) if (!(Math_fround(HEAPF32[$0 + 28 >> 2]) != Math_fround(0.0))) label = 5;
} else label = 5;
if ((label | 0) == 5) {
if (!$3) {
STACKTOP = sp;
return;
}
if (Math_fround(HEAPF32[$0 + 32 >> 2]) == Math_fround(0.0)) if (!(Math_fround(HEAPF32[$0 + 36 >> 2]) != Math_fround(0.0))) {
STACKTOP = sp;
return;
}
}
$24 = $0 + 40 | 0;
if (!(HEAP8[$24 >> 0] | 0)) if (!(HEAP8[$0 + 41 >> 0] | 0)) {
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
HEAP8[$4 >> 0] = 60;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $4, 1) | 0, 51325, 10) | 0;
do if ($2) {
$83 = Math_fround(HEAPF32[$0 + 20 >> 2]);
$85 = $0 + 24 | 0;
if ($83 == Math_fround(0.0)) {
$86 = Math_fround(HEAPF32[$85 >> 2]);
$87 = $86 == Math_fround(0.0);
$88 = (HEAPF32[tempDoublePtr >> 2] = $86, HEAP32[tempDoublePtr >> 2] | 0);
if ($87) if (Math_fround(HEAPF32[$0 + 28 >> 2]) != Math_fround(0.0)) $93 = $88; else break; else $93 = $88;
} else $93 = HEAP32[$85 >> 2] | 0;
HEAPF32[$7 >> 2] = $83;
HEAP32[$7 + 4 >> 2] = $93;
HEAP32[$7 + 8 >> 2] = HEAP32[$0 + 28 >> 2];
__ZL20printDirection3SiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKc10Direction3($1, 1, 53281, $7);
} while (0);
do if ($3) {
$98 = Math_fround(HEAPF32[$0 + 32 >> 2]);
$100 = $0 + 36 | 0;
if ($98 == Math_fround(0.0)) {
$101 = Math_fround(HEAPF32[$100 >> 2]);
if (!($101 != Math_fround(0.0))) break;
$105 = (HEAPF32[tempDoublePtr >> 2] = $101, HEAP32[tempDoublePtr >> 2] | 0);
} else $105 = HEAP32[$100 >> 2] | 0;
HEAPF32[$8 >> 2] = $98;
HEAP32[$8 + 4 >> 2] = $105;
__ZL20printDirection2SiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKc10Direction2($1, 1, 53003, $8);
} while (0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36603, 3) | 0;
STACKTOP = sp;
return;
}
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36843, 1) | 0, 51325, 10) | 0, 49554, 1) | 0;
do if ($2) {
$35 = Math_fround(HEAPF32[$0 + 20 >> 2]);
$37 = $0 + 24 | 0;
if ($35 == Math_fround(0.0)) {
$38 = Math_fround(HEAPF32[$37 >> 2]);
$39 = $38 == Math_fround(0.0);
$40 = (HEAPF32[tempDoublePtr >> 2] = $38, HEAP32[tempDoublePtr >> 2] | 0);
if ($39) if (Math_fround(HEAPF32[$0 + 28 >> 2]) != Math_fround(0.0)) $45 = $40; else break; else $45 = $40;
} else $45 = HEAP32[$37 >> 2] | 0;
HEAPF32[$5 >> 2] = $35;
HEAP32[$5 + 4 >> 2] = $45;
HEAP32[$5 + 8 >> 2] = HEAP32[$0 + 28 >> 2];
__ZL20printDirection3SiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKc10Direction3($1, 0, 53281, $5);
if (HEAP8[$24 >> 0] | 0) {
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, (HEAP16[36078] | 0) + 1 | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 46471, 17) | 0;
$55 = (HEAP8[$24 >> 0] | 0) != 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $55 ? 52414 : 52419, $55 ? 4 : 5) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 34937, 2) | 0;
}
} while (0);
do if ($3) {
$59 = Math_fround(HEAPF32[$0 + 32 >> 2]);
$61 = $0 + 36 | 0;
if ($59 == Math_fround(0.0)) {
$62 = Math_fround(HEAPF32[$61 >> 2]);
if (!($62 != Math_fround(0.0))) break;
$66 = (HEAPF32[tempDoublePtr >> 2] = $62, HEAP32[tempDoublePtr >> 2] | 0);
} else $66 = HEAP32[$61 >> 2] | 0;
HEAPF32[$6 >> 2] = $59;
HEAP32[$6 + 4 >> 2] = $66;
__ZL20printDirection2SiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKc10Direction2($1, 0, 53003, $6);
$67 = $0 + 41 | 0;
if (HEAP8[$67 >> 0] | 0) {
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, (HEAP16[36078] | 0) + 1 | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 46489, 15) | 0;
$74 = (HEAP8[$67 >> 0] | 0) != 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $74 ? 52414 : 52419, $74 ? 4 : 5) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 34937, 2) | 0;
}
} while (0);
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36603, 3) | 0;
STACKTOP = sp;
return;
}
function _reportProcessingInstruction($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$0$i45 = 0, $$0$ph$i = 0, $$012$i = 0, $$018$i = 0, $$024$ph$i = 0, $$113$i = 0, $$2$i = 0, $$in$i = 0, $$in$i$phi = 0, $$pre$phi$iZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $111 = 0, $112 = 0, $122 = 0, $123 = 0, $126 = 0, $129 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $33 = 0, $4 = 0, $45 = 0, $48 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $67 = 0, $70 = 0, $76 = 0, $77 = 0, $82 = 0, $86 = 0, $9 = 0, $99 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$4 = sp + 4 | 0;
$5 = sp;
$6 = $0 + 64 | 0;
if (!(HEAP32[$6 >> 2] | 0)) {
$9 = $0 + 80 | 0;
$10 = HEAP32[$9 >> 2] | 0;
if (!$10) {
$$0 = 1;
STACKTOP = sp;
return $$0 | 0;
}
HEAP32[$4 >> 2] = $2;
if (!(HEAP8[$1 + 68 >> 0] | 0)) {
if ((HEAP32[$0 + 144 >> 2] | 0) == ($1 | 0)) {
$$0$ph$i = $0 + 276 | 0;
$$024$ph$i = $0 + 272 | 0;
} else {
$21 = HEAP32[$0 + 284 >> 2] | 0;
$$0$ph$i = $21 + 4 | 0;
$$024$ph$i = $21;
}
$23 = $0 + 44 | 0;
$24 = $1 + 56 | 0;
$25 = $0 + 48 | 0;
$26 = $0 + 4 | 0;
do {
HEAP32[$5 >> 2] = HEAP32[$23 >> 2];
FUNCTION_TABLE_viiiii[HEAP32[$24 >> 2] & 15]($1, $4, $3, $5, HEAP32[$25 >> 2] | 0);
HEAP32[$$0$ph$i >> 2] = HEAP32[$4 >> 2];
$33 = HEAP32[$23 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[$9 >> 2] & 127](HEAP32[$26 >> 2] | 0, $33, (HEAP32[$5 >> 2] | 0) - $33 | 0);
HEAP32[$$024$ph$i >> 2] = HEAP32[$4 >> 2];
} while ((HEAP32[$4 >> 2] | 0) != ($3 | 0));
} else FUNCTION_TABLE_viii[$10 & 127](HEAP32[$0 + 4 >> 2] | 0, $2, $3 - $2 | 0);
$$0 = 1;
STACKTOP = sp;
return $$0 | 0;
}
$45 = $1 + 64 | 0;
$48 = $2 + (HEAP32[$45 >> 2] << 1) | 0;
$52 = $48 + (FUNCTION_TABLE_iii[HEAP32[$1 + 28 >> 2] & 63]($1, $48) | 0) | 0;
$53 = $0 + 400 | 0;
HEAP32[$4 >> 2] = $48;
$54 = $0 + 412 | 0;
if (!(HEAP32[$54 >> 2] | 0)) {
if ((_poolGrow($53) | 0) << 24 >> 24) label = 13;
} else label = 13;
L20 : do if ((label | 0) == 13) {
$59 = $1 + 56 | 0;
$60 = $0 + 408 | 0;
while (1) {
FUNCTION_TABLE_viiiii[HEAP32[$59 >> 2] & 15]($1, $4, $52, $54, HEAP32[$60 >> 2] | 0);
if ((HEAP32[$4 >> 2] | 0) == ($52 | 0)) break;
if (!((_poolGrow($53) | 0) << 24 >> 24)) break L20;
}
$67 = $0 + 416 | 0;
if (!(HEAP32[$67 >> 2] | 0)) {
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
$70 = HEAP32[$54 >> 2] | 0;
do if (($70 | 0) == (HEAP32[$60 >> 2] | 0)) if (!((_poolGrow($53) | 0) << 24 >> 24)) {
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else {
$76 = HEAP32[$54 >> 2] | 0;
break;
} else $76 = $70; while (0);
HEAP32[$54 >> 2] = $76 + 1;
HEAP8[$76 >> 0] = 0;
$77 = HEAP32[$67 >> 2] | 0;
if (!$77) {
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
HEAP32[$67 >> 2] = HEAP32[$54 >> 2];
$82 = FUNCTION_TABLE_iii[HEAP32[$1 + 32 >> 2] & 63]($1, $52) | 0;
$86 = $3 + (0 - (HEAP32[$45 >> 2] << 1)) | 0;
HEAP32[$4 >> 2] = $82;
if (!(HEAP32[$54 >> 2] | 0)) {
if ((_poolGrow($53) | 0) << 24 >> 24) label = 24;
} else label = 24;
L40 : do if ((label | 0) == 24) {
while (1) {
label = 0;
FUNCTION_TABLE_viiiii[HEAP32[$59 >> 2] & 15]($1, $4, $86, $54, HEAP32[$60 >> 2] | 0);
if ((HEAP32[$4 >> 2] | 0) == ($86 | 0)) break;
if (!((_poolGrow($53) | 0) << 24 >> 24)) break L40; else label = 24;
}
if (!(HEAP32[$67 >> 2] | 0)) {
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
$99 = HEAP32[$54 >> 2] | 0;
do if (($99 | 0) == (HEAP32[$60 >> 2] | 0)) if (!((_poolGrow($53) | 0) << 24 >> 24)) {
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else {
$105 = HEAP32[$54 >> 2] | 0;
break;
} else $105 = $99; while (0);
HEAP32[$54 >> 2] = $105 + 1;
HEAP8[$105 >> 0] = 0;
$106 = HEAP32[$67 >> 2] | 0;
if (!$106) {
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else $$012$i = $106;
L56 : while (1) {
switch (HEAP8[$$012$i >> 0] | 0) {
case 0:
{
break L56;
break;
}
case 13:
{
$$0$i45 = $$012$i;
$$113$i = $$012$i;
$111 = 13;
label = 34;
break L56;
break;
}
default:
{}
}
$$012$i = $$012$i + 1 | 0;
}
if ((label | 0) == 34) {
while (1) {
label = 0;
if ($111 << 24 >> 24 == 13) {
HEAP8[$$0$i45 >> 0] = 10;
$112 = $$113$i + 1 | 0;
$$2$i = (HEAP8[$112 >> 0] | 0) == 10 ? $$113$i + 2 | 0 : $112;
} else {
HEAP8[$$0$i45 >> 0] = $111;
$$2$i = $$113$i + 1 | 0;
}
$$0$i45 = $$0$i45 + 1 | 0;
$111 = HEAP8[$$2$i >> 0] | 0;
if (!($111 << 24 >> 24)) break; else {
$$113$i = $$2$i;
label = 34;
}
}
HEAP8[$$0$i45 >> 0] = 0;
}
FUNCTION_TABLE_viii[HEAP32[$6 >> 2] & 127](HEAP32[$0 + 4 >> 2] | 0, $77, $106);
$122 = $0 + 404 | 0;
$123 = HEAP32[$122 >> 2] | 0;
if (!$123) {
HEAP32[$122 >> 2] = HEAP32[$53 >> 2];
$$pre$phi$iZ2D = $53;
} else {
$126 = HEAP32[$53 >> 2] | 0;
if (!$126) $$pre$phi$iZ2D = $53; else {
$$018$i = $126;
$$in$i = $123;
while (1) {
$129 = HEAP32[$$018$i >> 2] | 0;
HEAP32[$$018$i >> 2] = $$in$i;
HEAP32[$122 >> 2] = $$018$i;
if (!$129) {
$$pre$phi$iZ2D = $53;
break;
} else {
$$in$i$phi = $$018$i;
$$018$i = $129;
$$in$i = $$in$i$phi;
}
}
}
}
HEAP32[$$pre$phi$iZ2D >> 2] = 0;
HEAP32[$67 >> 2] = 0;
HEAP32[$54 >> 2] = 0;
HEAP32[$60 >> 2] = 0;
$$0 = 1;
STACKTOP = sp;
return $$0 | 0;
} while (0);
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} while (0);
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
function _getEncodingIndex($0) {
$0 = $0 | 0;
var $$013$i = 0, $$013$i$1 = 0, $$013$i$2 = 0, $$013$i$3 = 0, $$013$i$4 = 0, $$013$i$5 = 0, $$014$i = 0, $$014$i$1 = 0, $$014$i$2 = 0, $$014$i$3 = 0, $$014$i$4 = 0, $$014$i$5 = 0, $$015$i = 0, $$015$i$1 = 0, $$015$i$2 = 0, $$015$i$3 = 0, $$015$i$4 = 0, $$015$i$5 = 0, $$06 = 0, $17 = 0, $19 = 0, $3 = 0, $31 = 0, $33 = 0, $45 = 0, $47 = 0, $5 = 0, $59 = 0, $61 = 0, $73 = 0, $75 = 0, label = 0;
if (!$0) {
$$06 = 6;
return $$06 | 0;
} else {
$$014$i = 60459;
$$015$i = $0;
}
L3 : while (1) {
$3 = HEAP8[$$015$i >> 0] | 0;
$5 = HEAP8[$$014$i >> 0] | 0;
$$013$i = ($3 + -97 & 255) < 26 ? ($3 & 255) + 224 & 255 : $3;
switch (($$013$i << 24 >> 24 == (($5 + -97 & 255) < 26 ? ($5 & 255) + 224 & 255 : $5) << 24 >> 24 ? ($$013$i << 24 >> 24 == 0 ? 2 : 0) : 1) & 3) {
case 0:
{
$$014$i = $$014$i + 1 | 0;
$$015$i = $$015$i + 1 | 0;
break;
}
case 1:
{
$$014$i$1 = 60470;
$$015$i$1 = $0;
label = 5;
break L3;
break;
}
case 2:
{
$$06 = 0;
label = 4;
break L3;
break;
}
default:
{
label = 3;
break L3;
}
}
}
if ((label | 0) == 3) {} else if ((label | 0) == 4) return $$06 | 0; else if ((label | 0) == 5) {
L6 : while (1) {
label = 0;
$17 = HEAP8[$$015$i$1 >> 0] | 0;
$19 = HEAP8[$$014$i$1 >> 0] | 0;
$$013$i$1 = ($17 + -97 & 255) < 26 ? ($17 & 255) + 224 & 255 : $17;
switch (($$013$i$1 << 24 >> 24 == (($19 + -97 & 255) < 26 ? ($19 & 255) + 224 & 255 : $19) << 24 >> 24 ? ($$013$i$1 << 24 >> 24 == 0 ? 2 : 0) : 1) & 3) {
case 0:
{
$$014$i$1 = $$014$i$1 + 1 | 0;
$$015$i$1 = $$015$i$1 + 1 | 0;
label = 5;
break;
}
case 1:
{
$$014$i$2 = 60479;
$$015$i$2 = $0;
label = 6;
break L6;
break;
}
case 2:
{
$$06 = 1;
label = 4;
break L6;
break;
}
default:
{
label = 3;
break L6;
}
}
}
if ((label | 0) == 3) {} else if ((label | 0) == 4) return $$06 | 0; else if ((label | 0) == 6) {
L9 : while (1) {
label = 0;
$31 = HEAP8[$$015$i$2 >> 0] | 0;
$33 = HEAP8[$$014$i$2 >> 0] | 0;
$$013$i$2 = ($31 + -97 & 255) < 26 ? ($31 & 255) + 224 & 255 : $31;
switch (($$013$i$2 << 24 >> 24 == (($33 + -97 & 255) < 26 ? ($33 & 255) + 224 & 255 : $33) << 24 >> 24 ? ($$013$i$2 << 24 >> 24 == 0 ? 2 : 0) : 1) & 3) {
case 0:
{
$$014$i$2 = $$014$i$2 + 1 | 0;
$$015$i$2 = $$015$i$2 + 1 | 0;
label = 6;
break;
}
case 1:
{
$$014$i$3 = 60485;
$$015$i$3 = $0;
label = 7;
break L9;
break;
}
case 2:
{
$$06 = 2;
label = 4;
break L9;
break;
}
default:
{
label = 3;
break L9;
}
}
}
if ((label | 0) == 3) {} else if ((label | 0) == 4) return $$06 | 0; else if ((label | 0) == 7) {
L12 : while (1) {
label = 0;
$45 = HEAP8[$$015$i$3 >> 0] | 0;
$47 = HEAP8[$$014$i$3 >> 0] | 0;
$$013$i$3 = ($45 + -97 & 255) < 26 ? ($45 & 255) + 224 & 255 : $45;
switch (($$013$i$3 << 24 >> 24 == (($47 + -97 & 255) < 26 ? ($47 & 255) + 224 & 255 : $47) << 24 >> 24 ? ($$013$i$3 << 24 >> 24 == 0 ? 2 : 0) : 1) & 3) {
case 0:
{
$$014$i$3 = $$014$i$3 + 1 | 0;
$$015$i$3 = $$015$i$3 + 1 | 0;
label = 7;
break;
}
case 1:
{
$$014$i$4 = 60492;
$$015$i$4 = $0;
label = 8;
break L12;
break;
}
case 2:
{
$$06 = 3;
label = 4;
break L12;
break;
}
default:
{
label = 3;
break L12;
}
}
}
if ((label | 0) == 3) {} else if ((label | 0) == 4) return $$06 | 0; else if ((label | 0) == 8) {
L15 : while (1) {
label = 0;
$59 = HEAP8[$$015$i$4 >> 0] | 0;
$61 = HEAP8[$$014$i$4 >> 0] | 0;
$$013$i$4 = ($59 + -97 & 255) < 26 ? ($59 & 255) + 224 & 255 : $59;
switch (($$013$i$4 << 24 >> 24 == (($61 + -97 & 255) < 26 ? ($61 & 255) + 224 & 255 : $61) << 24 >> 24 ? ($$013$i$4 << 24 >> 24 == 0 ? 2 : 0) : 1) & 3) {
case 0:
{
$$014$i$4 = $$014$i$4 + 1 | 0;
$$015$i$4 = $$015$i$4 + 1 | 0;
label = 8;
break;
}
case 1:
{
$$014$i$5 = 60501;
$$015$i$5 = $0;
label = 9;
break L15;
break;
}
case 2:
{
$$06 = 4;
label = 4;
break L15;
break;
}
default:
{
label = 3;
break L15;
}
}
}
if ((label | 0) == 3) {} else if ((label | 0) == 4) return $$06 | 0; else if ((label | 0) == 9) {
L18 : while (1) {
label = 0;
$73 = HEAP8[$$015$i$5 >> 0] | 0;
$75 = HEAP8[$$014$i$5 >> 0] | 0;
$$013$i$5 = ($73 + -97 & 255) < 26 ? ($73 & 255) + 224 & 255 : $73;
switch (($$013$i$5 << 24 >> 24 == (($75 + -97 & 255) < 26 ? ($75 & 255) + 224 & 255 : $75) << 24 >> 24 ? ($$013$i$5 << 24 >> 24 == 0 ? 2 : 0) : 1) & 3) {
case 0:
{
$$014$i$5 = $$014$i$5 + 1 | 0;
$$015$i$5 = $$015$i$5 + 1 | 0;
label = 9;
break;
}
case 1:
{
label = 10;
break L18;
break;
}
case 2:
{
$$06 = 5;
label = 4;
break L18;
break;
}
default:
{
label = 3;
break L18;
}
}
}
if ((label | 0) == 3) {} else if ((label | 0) == 4) return $$06 | 0; else if ((label | 0) == 10) {
$$06 = -1;
return $$06 | 0;
}
}
}
}
}
}
return 0;
}
function __ZN16CircularMovement25setAvatarDependentValues1ER16OneHCircMoveSpecRK19OneHConcretePosture9Mirroring($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = f0, $$sroa$044$0$extract$trunc = 0, $10 = 0, $104 = f0, $105 = f0, $108 = f0, $109 = f0, $11 = 0, $110 = 0, $111 = 0, $114 = 0, $117 = f0, $12 = 0, $120 = f0, $125 = f0, $126 = f0, $13 = 0, $131 = f0, $132 = f0, $14 = 0, $15 = 0, $18 = 0, $21 = 0, $23 = 0, $26 = 0, $29 = 0, $31 = 0, $33 = f0, $38 = f0, $4 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $54 = 0, $58 = f0, $6 = 0, $60 = 0, $62 = f0, $64 = 0, $66 = f0, $67 = 0, $7 = 0, $77 = 0, $8 = 0, $80 = 0, $85 = f0, $86 = 0, $87 = 0, $88 = f0, $9 = 0, $90 = 0, $93 = 0, $97 = f0, $98 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 128 | 0;
$4 = sp + 108 | 0;
$5 = sp + 96 | 0;
$6 = sp + 84 | 0;
$7 = sp + 72 | 0;
$8 = sp + 60 | 0;
$9 = sp + 36 | 0;
$10 = sp + 24 | 0;
$11 = sp + 16 | 0;
$12 = sp + 48 | 0;
$13 = sp + 8 | 0;
$14 = sp;
$15 = $0 + 528 | 0;
HEAP32[$6 >> 2] = HEAP32[$15 >> 2];
$18 = $0 + 532 | 0;
HEAP32[$6 + 4 >> 2] = HEAP32[$18 >> 2];
$21 = $0 + 536 | 0;
HEAP32[$6 + 8 >> 2] = HEAP32[$21 >> 2];
$23 = $0 + 540 | 0;
HEAP32[$7 >> 2] = HEAP32[$23 >> 2];
$26 = $0 + 544 | 0;
HEAP32[$7 + 4 >> 2] = HEAP32[$26 >> 2];
$29 = $0 + 548 | 0;
HEAP32[$7 + 8 >> 2] = HEAP32[$29 >> 2];
$31 = HEAP16[$3 >> 1] | 0;
$$sroa$044$0$extract$trunc = $31 & 255;
__ZL15ConvertAxisPairR6Vector10Direction3S1_9Mirroring($1, $6, $7, $$sroa$044$0$extract$trunc, ($31 & 65535) >>> 8 & 255);
__ZN6Vector7setUnitEv($1) | 0;
$33 = Math_fround(HEAPF32[$0 + 48 >> 2]);
$38 = Math_fround($33 * Math_fround(HEAPF32[64984 + (HEAP32[$0 + 552 >> 2] << 2) >> 2]));
__ZN6VectorC2Ev($8);
HEAP32[$9 >> 2] = HEAP32[$15 >> 2];
HEAP32[$9 + 4 >> 2] = HEAP32[$18 >> 2];
HEAP32[$9 + 8 >> 2] = HEAP32[$21 >> 2];
HEAP32[$10 >> 2] = HEAP32[$23 >> 2];
HEAP32[$10 + 4 >> 2] = HEAP32[$26 >> 2];
HEAP32[$10 + 8 >> 2] = HEAP32[$29 >> 2];
$49 = HEAP16[36081] | 0;
__ZL15ConvertAxisPairR6Vector10Direction3S1_9Mirroring($8, $9, $10, $49 & 255, ($49 & 65535) >>> 8 & 255);
$50 = $1 + 24 | 0;
$51 = $0 + 576 | 0;
HEAP32[$11 >> 2] = HEAP32[$51 >> 2];
$54 = $0 + 580 | 0;
HEAP32[$11 + 4 >> 2] = HEAP32[$54 >> 2];
__ZN5SiGML21convertCurveDirectionER6VectorRKS0_10Direction2($50, $8, $11);
if ($$sroa$044$0$extract$trunc & 2) {
$58 = Math_fround(-Math_fround(HEAPF32[$50 >> 2]));
HEAPF32[$50 >> 2] = $58;
}
if ($$sroa$044$0$extract$trunc & 4) {
$60 = $1 + 28 | 0;
$62 = Math_fround(-Math_fround(HEAPF32[$60 >> 2]));
HEAPF32[$60 >> 2] = $62;
}
if ($$sroa$044$0$extract$trunc & 8) {
$64 = $1 + 32 | 0;
$66 = Math_fround(-Math_fround(HEAPF32[$64 >> 2]));
HEAPF32[$64 >> 2] = $66;
}
$67 = $1 + 12 | 0;
__ZN6Vector15setCrossProductERKS_S1_($67, $1, $50);
__ZN6Vector8setScaleEf($67, $38);
if (Math_fround(HEAPF32[$51 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$54 >> 2]) != Math_fround(0.0)) label = 9; else __ZN6Vector8setScaleEf($50, $38); else label = 9;
if ((label | 0) == 9) __ZN6Vector8setScaleEf($50, Math_fround($38 * Math_fround(HEAPF32[65064 + (HEAP32[$0 + 584 >> 2] << 2) >> 2])));
__ZN6VectorC2Ev($12);
$77 = $0 + 556 | 0;
HEAP32[$13 >> 2] = HEAP32[$77 >> 2];
$80 = $0 + 560 | 0;
HEAP32[$13 + 4 >> 2] = HEAP32[$80 >> 2];
__ZN5SiGML21convertCurveDirectionER6VectorRKS0_10Direction2($12, $1, $13);
if (HEAP8[$0 + 33 >> 0] | 0) __ZN6Vector8setScaleEf($12, Math_fround(-1.0));
$85 = Math_fround(__ZN6Vector7findRotERKS_S1_($12, $67, $50));
$86 = $1 + 60 | 0;
HEAPF32[$86 >> 2] = $85;
$87 = $0 + 568 | 0;
$88 = Math_fround(HEAPF32[$87 >> 2]);
if ($88 == Math_fround(0.0)) {
$90 = $0 + 572 | 0;
if (Math_fround(HEAPF32[$90 >> 2]) != Math_fround(0.0)) $97 = $88; else {
$93 = HEAP32[$77 >> 2] | 0;
HEAP32[$87 >> 2] = $93;
HEAP32[$90 >> 2] = HEAP32[$80 >> 2];
$97 = (HEAP32[tempDoublePtr >> 2] = $93, Math_fround(HEAPF32[tempDoublePtr >> 2]));
}
} else $97 = $88;
$98 = $0 + 572 | 0;
if ($97 == Math_fround(0.0)) if (Math_fround(HEAPF32[$98 >> 2]) != Math_fround(0.0)) label = 18; else {
$105 = Math_fround(HEAPF32[$86 >> 2]);
$$0 = Math_fround($105 + Math_fround(HEAPF32[589]));
$109 = $105;
} else label = 18;
if ((label | 0) == 18) {
__ZN6VectorC2Ev($4);
HEAP32[$14 >> 2] = HEAP32[$87 >> 2];
HEAP32[$14 + 4 >> 2] = HEAP32[$98 >> 2];
__ZN5SiGML21convertCurveDirectionER6VectorRKS0_10Direction2($4, $1, $14);
$104 = Math_fround(__ZN6Vector7findRotERKS_S1_($4, $67, $50));
$$0 = $104;
$109 = Math_fround(HEAPF32[$86 >> 2]);
}
$108 = Math_fround($$0 - $109);
$110 = $1 + 64 | 0;
HEAPF32[$110 >> 2] = $108;
$111 = $1 + 36 | 0;
__ZN6VectorC2ERKS_($4, $67);
__ZN6Vector8setScaleEf($4, Math_fround(+Math_sin(+$109)));
__ZN6VectorC2ERKS_($5, $50);
__ZN6Vector8setScaleEf($5, Math_fround(+Math_cos(+$109)));
__ZN6Vector6setAddERKS_S1_($111, $4, $5);
$114 = $1 + 48 | 0;
__ZN6VectorC2ERKS_($4, $67);
__ZN6Vector8setScaleEf($4, Math_fround(+Math_sin(+$$0)));
__ZN6VectorC2ERKS_($5, $50);
__ZN6Vector8setScaleEf($5, Math_fround(+Math_cos(+$$0)));
__ZN6Vector6setAddERKS_S1_($114, $4, $5);
__ZN6Vector11setSubtractERKS_($114, $111);
$117 = Math_fround(HEAPF32[$110 >> 2]);
if (!($117 <= Math_fround(0.0))) $126 = $117; else {
$120 = Math_fround($117 + Math_fround(HEAPF32[589]));
HEAPF32[$110 >> 2] = $120;
$126 = $120;
}
if (!(HEAP8[$0 + 564 >> 0] | 0)) $132 = $126; else {
$125 = Math_fround(Math_fround(HEAPF32[589]) + $126);
HEAPF32[$110 >> 2] = $125;
$132 = $125;
}
if (!(HEAP8[$0 + 565 >> 0] | 0)) {
STACKTOP = sp;
return;
}
$131 = Math_fround(Math_fround(HEAPF32[589]) + $132);
HEAPF32[$110 >> 2] = $131;
STACKTOP = sp;
return;
}
function __ZNK6SiteID17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $11 = 0, $22 = 0, $25 = 0, $35 = 0, $37 = 0, $43 = 0, $46 = 0, $48 = 0, $5 = 0, $56 = 0, $6 = 0, $67 = 0, $70 = 0, $80 = 0, $82 = 0, $84 = 0, $88 = 0, $94 = 0;
$5 = (HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 >> 0] << 16) & 255;
$6 = HEAP32[17192] | 0;
if ($2) {
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, 0, 52716, $5, $6);
__Z22printDigitsAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKcs($1, 0, 53536, ((HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 >> 0] << 16) & 16777215) >>> 15 & 31);
$11 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 >> 0] << 16;
if (!($11 & 28672)) $25 = $11; else {
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, (HEAP16[36078] | 0) + 1 | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 24796, 22) | 0;
$22 = HEAP32[1836 + ((((HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 >> 0] << 16) & 16777215) >>> 12 & 7) << 2) >> 2] | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $22, _strlen($22) | 0) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 34937, 2) | 0;
$25 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 >> 0] << 16;
}
if (!($25 & 3840)) $37 = $25; else {
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, (HEAP16[36078] | 0) + 1 | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 24867, 17) | 0;
$35 = HEAP32[1856 + ((((HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 >> 0] << 16) & 16777215) >>> 8 & 15) << 2) >> 2] | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $35, _strlen($35) | 0) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 34937, 2) | 0;
$37 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 >> 0] << 16;
}
if (($37 << 8 >> 8 | 0) < 0) {
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, (HEAP16[36078] | 0) + 1 | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 24885, 15) | 0;
$43 = ((HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 >> 0] << 16) << 8 >> 8 | 0) < 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $43 ? 52414 : 52419, $43 ? 4 : 5) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 34937, 2) | 0;
$46 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 >> 0] << 16;
} else $46 = $37;
$48 = ($46 & 16777215) >>> 20 & 7;
if (!($48 & 16777215)) return;
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, 0, 52819, $48 & 16777215, HEAP32[17197] | 0);
return;
} else {
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, 0, 51353, $5, $6);
__Z22printDigitsAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKcs($1, 0, 53550, ((HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 >> 0] << 16) & 16777215) >>> 15 & 31);
$56 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 >> 0] << 16;
if (!($56 & 28672)) $70 = $56; else {
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, (HEAP16[36078] | 0) + 1 | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 24901, 15) | 0;
$67 = HEAP32[1836 + ((((HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 >> 0] << 16) & 16777215) >>> 12 & 7) << 2) >> 2] | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $67, _strlen($67) | 0) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 34937, 2) | 0;
$70 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 >> 0] << 16;
}
if (!($70 & 3840)) $82 = $70; else {
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, (HEAP16[36078] | 0) + 1 | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 24965, 10) | 0;
$80 = HEAP32[1856 + ((((HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 >> 0] << 16) & 16777215) >>> 8 & 15) << 2) >> 2] | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $80, _strlen($80) | 0) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 34937, 2) | 0;
$82 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 >> 0] << 16;
}
$84 = ($82 & 16777215) >>> 20 & 7;
if (!($84 & 16777215)) $88 = $82; else {
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, 0, 52811, $84 & 16777215, HEAP32[17197] | 0);
$88 = HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 >> 0] << 16;
}
if (($88 << 8 >> 8 | 0) >= 0) return;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, (HEAP16[36078] | 0) + 1 | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 24976, 8) | 0;
$94 = ((HEAPU16[$0 >> 1] | HEAPU8[$0 + 2 >> 0] << 16) << 8 >> 8 | 0) < 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $94 ? 52414 : 52419, $94 ? 4 : 5) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 34937, 2) | 0;
return;
}
}
function _normal_scanRef($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$015$i$i = 0, $$01520$i$i = 0, $$01522$i$i = 0, $$019$i = 0, $$06683 = 0, $$pn$i = 0, $$pn21$i$i = 0, $$pn21$i$i$phi = 0, $$sink = 0, $$sink90 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $40 = 0, $42 = 0, $44 = 0, $5 = 0, $89 = 0, label = 0;
if (($1 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
$5 = $0 + 72 | 0;
switch (HEAP8[$5 + (HEAPU8[$1 >> 0] | 0) >> 0] | 0) {
case 29:
{
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
case 24:
case 22:
{
$$sink = 1;
break;
}
case 5:
{
if (($2 - $1 | 0) < 2) {
$$0 = -2;
return $$0 | 0;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 340 >> 2] & 63]($0, $1) | 0)) {
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
} else $$sink = 2;
break;
}
case 6:
{
if (($2 - $1 | 0) < 3) {
$$0 = -2;
return $$0 | 0;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 344 >> 2] & 63]($0, $1) | 0)) {
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
} else $$sink = 3;
break;
}
case 7:
{
if (($2 - $1 | 0) < 4) {
$$0 = -2;
return $$0 | 0;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 348 >> 2] & 63]($0, $1) | 0)) {
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
} else $$sink = 4;
break;
}
case 19:
{
$40 = $1 + 1 | 0;
if (($40 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
$42 = HEAP8[$40 >> 0] | 0;
if ($42 << 24 >> 24 != 120) {
if ((HEAP8[$5 + ($42 & 255) >> 0] | 0) == 25) $$pn$i = $40; else {
HEAP32[$3 >> 2] = $40;
$$0 = 0;
return $$0 | 0;
}
L36 : while (1) {
$$019$i = $$pn$i + 1 | 0;
if (($$019$i | 0) == ($2 | 0)) {
$$0 = -1;
label = 46;
break;
}
switch (HEAP8[$5 + (HEAPU8[$$019$i >> 0] | 0) >> 0] | 0) {
case 25:
{
$$pn$i = $$019$i;
break;
}
case 18:
{
label = 29;
break L36;
break;
}
default:
{
label = 30;
break L36;
}
}
}
if ((label | 0) == 29) {
HEAP32[$3 >> 2] = $$pn$i + 2;
$$0 = 10;
return $$0 | 0;
} else if ((label | 0) == 30) {
HEAP32[$3 >> 2] = $$019$i;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 46) return $$0 | 0;
}
$44 = $1 + 2 | 0;
if (($44 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
if ((HEAP8[$5 + (HEAPU8[$44 >> 0] | 0) >> 0] & -2) << 24 >> 24 != 24) {
HEAP32[$3 >> 2] = $44;
$$0 = 0;
return $$0 | 0;
}
$$01520$i$i = $1 + 3 | 0;
if (($$01520$i$i | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
} else {
$$01522$i$i = $$01520$i$i;
$$pn21$i$i = $44;
}
L55 : while (1) {
switch (HEAP8[$5 + (HEAPU8[$$01522$i$i >> 0] | 0) >> 0] | 0) {
case 18:
{
label = 23;
break L55;
break;
}
case 24:
case 25:
break;
default:
{
label = 24;
break L55;
}
}
$$015$i$i = $$01522$i$i + 1 | 0;
if (($$015$i$i | 0) == ($2 | 0)) {
$$0 = -1;
label = 46;
break;
} else {
$$pn21$i$i$phi = $$01522$i$i;
$$01522$i$i = $$015$i$i;
$$pn21$i$i = $$pn21$i$i$phi;
}
}
if ((label | 0) == 23) {
HEAP32[$3 >> 2] = $$pn21$i$i + 2;
$$0 = 10;
return $$0 | 0;
} else if ((label | 0) == 24) {
HEAP32[$3 >> 2] = $$01522$i$i;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 46) return $$0 | 0;
break;
}
default:
{
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
}
$10 = $1 + $$sink | 0;
if (($10 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
$12 = $2;
$13 = $0 + 328 | 0;
$14 = $0 + 332 | 0;
$15 = $0 + 336 | 0;
$$06683 = $10;
L68 : while (1) {
switch (HEAP8[$5 + (HEAPU8[$$06683 >> 0] | 0) >> 0] | 0) {
case 29:
{
label = 33;
break L68;
break;
}
case 18:
{
label = 44;
break L68;
break;
}
case 27:
case 26:
case 25:
case 24:
case 22:
{
$$sink90 = 1;
break;
}
case 5:
{
if (($12 - $$06683 | 0) < 2) {
$$0 = -2;
label = 46;
break L68;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$13 >> 2] & 63]($0, $$06683) | 0)) {
label = 36;
break L68;
} else $$sink90 = 2;
break;
}
case 6:
{
if (($12 - $$06683 | 0) < 3) {
$$0 = -2;
label = 46;
break L68;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$14 >> 2] & 63]($0, $$06683) | 0)) {
label = 39;
break L68;
} else $$sink90 = 3;
break;
}
case 7:
{
if (($12 - $$06683 | 0) < 4) {
$$0 = -2;
label = 46;
break L68;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$15 >> 2] & 63]($0, $$06683) | 0)) {
label = 42;
break L68;
} else $$sink90 = 4;
break;
}
default:
{
label = 45;
break L68;
}
}
$89 = $$06683 + $$sink90 | 0;
if (($89 | 0) == ($2 | 0)) {
$$0 = -1;
label = 46;
break;
} else $$06683 = $89;
}
if ((label | 0) == 33) {
HEAP32[$3 >> 2] = $$06683;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 36) {
HEAP32[$3 >> 2] = $$06683;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 39) {
HEAP32[$3 >> 2] = $$06683;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 42) {
HEAP32[$3 >> 2] = $$06683;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 44) {
HEAP32[$3 >> 2] = $$06683 + 1;
$$0 = 9;
return $$0 | 0;
} else if ((label | 0) == 45) {
HEAP32[$3 >> 2] = $$06683;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 46) return $$0 | 0;
return 0;
}
function __Z13TokeniseSAMPAPKc($0) {
$0 = $0 | 0;
var $$044 = 0, $$045$lcssa = 0, $$04574 = 0, $$046$lcssa = 0, $$04673 = 0, $$072 = 0, $$1 = 0, $$147 = 0, $$pre$phi$i53Z2D = 0, $$pre$phi$i61Z2D = 0, $$pre$phi$i69Z2D = 0, $$pre$phi$iZ2D = 0, $100 = 0, $13 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $24 = 0, $3 = 0, $30 = 0, $33 = 0, $36 = 0, $38 = 0, $4 = 0, $42 = 0, $44 = 0, $5 = 0, $53 = 0, $56 = 0, $58 = 0, $6 = 0, $62 = 0, $64 = 0, $70 = 0, $75 = 0, $78 = 0, $80 = 0, $84 = 0, $86 = 0, $9 = 0, $93 = 0, $96 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
if (!$0) {
$$044 = 0;
STACKTOP = sp;
return $$044 | 0;
}
$2 = __Znwj(16) | 0;
$3 = $2 + 4 | 0;
HEAP32[$3 >> 2] = 10;
$4 = $2 + 12 | 0;
HEAP32[$4 >> 2] = 0;
HEAP32[$2 >> 2] = 0;
$5 = $2 + 8 | 0;
HEAP32[$5 >> 2] = 0;
$6 = HEAP8[$0 >> 0] | 0;
L4 : do if (!($6 << 24 >> 24)) {
$$045$lcssa = $0;
$$046$lcssa = $0;
} else {
$$04574 = $0;
$$04673 = $0;
$9 = $6;
while (1) {
switch ($9 << 24 >> 24 | 0) {
case 95:
{
$$1 = $$04574 + 1 | 0;
$$147 = $$04673;
break;
}
case 37:
case 34:
{
$13 = $$04574 - $$04673 | 0;
if (($13 | 0) > 0) {
$16 = _malloc($13 + 1 | 0) | 0;
_strncpy($16, $$04673, $13) | 0;
HEAP8[$16 + $13 >> 0] = 0;
$18 = HEAP32[$4 >> 2] | 0;
if (($18 | 0) >= 0) {
if ((HEAP32[$5 >> 2] | 0) > ($18 | 0)) {
$$pre$phi$i53Z2D = $18 + 1 | 0;
label = 10;
} else {
$22 = HEAP32[$3 >> 2] | 0;
$24 = $18 + 1 | 0;
__ZN13DynamicArrayPIcE6resizeEi($2, ($22 | 0) > ($18 | 0) ? $22 : $24 + ($18 >>> 1) | 0);
if ((HEAP32[$4 >> 2] | 0) <= ($18 | 0)) {
$$pre$phi$i53Z2D = $24;
label = 10;
}
}
if ((label | 0) == 10) {
label = 0;
HEAP32[$4 >> 2] = $$pre$phi$i53Z2D;
}
HEAP32[(HEAP32[$2 >> 2] | 0) + ($18 << 2) >> 2] = $16;
}
}
$30 = $$04574 + 1 | 0;
$$1 = $30;
$$147 = $30;
break;
}
case 61:
{
$33 = $$04574 - $$04673 | 0;
if (($33 | 0) > 0) {
$36 = _malloc($33 + 1 | 0) | 0;
_strncpy($36, $$04673, $33) | 0;
HEAP8[$36 + $33 >> 0] = 0;
$38 = HEAP32[$4 >> 2] | 0;
if (($38 | 0) >= 0) {
if ((HEAP32[$5 >> 2] | 0) > ($38 | 0)) {
$$pre$phi$i61Z2D = $38 + 1 | 0;
label = 18;
} else {
$42 = HEAP32[$3 >> 2] | 0;
$44 = $38 + 1 | 0;
__ZN13DynamicArrayPIcE6resizeEi($2, ($42 | 0) > ($38 | 0) ? $42 : $44 + ($38 >>> 1) | 0);
if ((HEAP32[$4 >> 2] | 0) <= ($38 | 0)) {
$$pre$phi$i61Z2D = $44;
label = 18;
}
}
if ((label | 0) == 18) {
label = 0;
HEAP32[$4 >> 2] = $$pre$phi$i61Z2D;
}
HEAP32[(HEAP32[$2 >> 2] | 0) + ($38 << 2) >> 2] = $36;
}
}
$$1 = $$04574 + 1 | 0;
$$147 = $$04574;
break;
}
case 126:
case 58:
{
$$1 = $$04574;
$$147 = $$04673;
break;
}
default:
{
$53 = $$04574 - $$04673 | 0;
if (($53 | 0) > 0) {
$56 = _malloc($53 + 1 | 0) | 0;
_strncpy($56, $$04673, $53) | 0;
HEAP8[$56 + $53 >> 0] = 0;
$58 = HEAP32[$4 >> 2] | 0;
if (($58 | 0) < 0) {
$$1 = $$04574;
$$147 = $$04574;
} else {
if ((HEAP32[$5 >> 2] | 0) > ($58 | 0)) {
$$pre$phi$i69Z2D = $58 + 1 | 0;
label = 26;
} else {
$62 = HEAP32[$3 >> 2] | 0;
$64 = $58 + 1 | 0;
__ZN13DynamicArrayPIcE6resizeEi($2, ($62 | 0) > ($58 | 0) ? $62 : $64 + ($58 >>> 1) | 0);
if ((HEAP32[$4 >> 2] | 0) <= ($58 | 0)) {
$$pre$phi$i69Z2D = $64;
label = 26;
}
}
if ((label | 0) == 26) {
label = 0;
HEAP32[$4 >> 2] = $$pre$phi$i69Z2D;
}
HEAP32[(HEAP32[$2 >> 2] | 0) + ($58 << 2) >> 2] = $56;
$$1 = $$04574;
$$147 = $$04574;
}
} else {
$$1 = $$04574;
$$147 = $$04574;
}
}
}
$70 = $$1 + 1 | 0;
$9 = HEAP8[$70 >> 0] | 0;
if (!($9 << 24 >> 24)) {
$$045$lcssa = $70;
$$046$lcssa = $$147;
break L4;
} else {
$$04574 = $70;
$$04673 = $$147;
}
}
} while (0);
$75 = $$045$lcssa - $$046$lcssa | 0;
if (($75 | 0) > 0) {
$78 = _malloc($75 + 1 | 0) | 0;
_strncpy($78, $$046$lcssa, $75) | 0;
HEAP8[$78 + $75 >> 0] = 0;
$80 = HEAP32[$4 >> 2] | 0;
if (($80 | 0) >= 0) {
if ((HEAP32[$5 >> 2] | 0) > ($80 | 0)) {
$$pre$phi$iZ2D = $80 + 1 | 0;
label = 34;
} else {
$84 = HEAP32[$3 >> 2] | 0;
$86 = $80 + 1 | 0;
__ZN13DynamicArrayPIcE6resizeEi($2, ($84 | 0) > ($80 | 0) ? $84 : $86 + ($80 >>> 1) | 0);
if ((HEAP32[$4 >> 2] | 0) <= ($80 | 0)) {
$$pre$phi$iZ2D = $86;
label = 34;
}
}
if ((label | 0) == 34) HEAP32[$4 >> 2] = $$pre$phi$iZ2D;
HEAP32[(HEAP32[$2 >> 2] | 0) + ($80 << 2) >> 2] = $78;
}
}
if (!0) {
$$044 = $2;
STACKTOP = sp;
return $$044 | 0;
}
HEAP32[$vararg_buffer >> 2] = $0;
__Z7eprintfPKcz(9412, $vararg_buffer);
$93 = HEAP32[$4 >> 2] | 0;
if (($93 | 0) > 0) {
$$072 = 0;
$96 = $93;
do {
if (($96 | 0) > ($$072 | 0)) $100 = HEAP32[(HEAP32[$2 >> 2] | 0) + ($$072 << 2) >> 2] | 0; else $100 = 0;
HEAP32[$vararg_buffer1 >> 2] = $100;
__Z7eprintfPKcz(9434, $vararg_buffer1);
$$072 = $$072 + 1 | 0;
$96 = HEAP32[$4 >> 2] | 0;
} while (($$072 | 0) < ($96 | 0));
}
__Z5eputcc(10);
$$044 = $2;
STACKTOP = sp;
return $$044 | 0;
}
function __ZN25TwoHConcretePostureChangeC2Ev($0) {
$0 = $0 | 0;
var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $20 = 0, $22 = 0, $23 = 0, $28 = 0, $30 = 0, $32 = 0, $35 = 0, $38 = 0, $41 = 0, $47 = 0, $49 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $61 = 0, $69 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0;
HEAP8[$0 >> 0] = 1;
__ZN6VectorC2Ev($0 + 4 | 0);
__ZN6VectorC2Ev($0 + 16 | 0);
__ZN6VectorC2Ev($0 + 28 | 0);
HEAPF32[$0 + 40 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 44 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 48 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 52 >> 2] = Math_fround(1.0);
$8 = $0 + 56 | 0;
HEAP32[$8 >> 2] = 0;
HEAPF32[$0 + 60 >> 2] = Math_fround(1.0);
$10 = $0 + 64 | 0;
HEAP32[$10 >> 2] = 0;
HEAP32[$10 + 4 >> 2] = 0;
HEAP32[$10 + 8 >> 2] = 0;
HEAP32[$10 + 12 >> 2] = 0;
HEAP32[$10 + 16 >> 2] = 0;
HEAP32[$10 + 20 >> 2] = 0;
HEAPF32[$0 + 88 >> 2] = Math_fround(1.0);
$12 = $0 + 92 | 0;
HEAP32[$12 >> 2] = 0;
HEAP32[$12 + 4 >> 2] = 0;
HEAP32[$12 + 8 >> 2] = 0;
HEAP32[$12 + 12 >> 2] = 0;
HEAP32[$12 + 16 >> 2] = 0;
HEAP8[$12 + 20 >> 0] = 0;
__THREW__ = 0;
invoke_vi(98, $0 + 116 | 0);
$14 = __THREW__;
__THREW__ = 0;
if ($14 & 1) {
$22 = ___cxa_find_matching_catch_2() | 0;
$23 = tempRet0;
HEAP32[$8 >> 2] = 0;
___resumeException($22 | 0);
}
__THREW__ = 0;
invoke_vi(98, $0 + 128 | 0);
$17 = __THREW__;
__THREW__ = 0;
if ($17 & 1) {
$22 = ___cxa_find_matching_catch_2() | 0;
$23 = tempRet0;
HEAP32[$8 >> 2] = 0;
___resumeException($22 | 0);
}
__THREW__ = 0;
invoke_vi(98, $0 + 140 | 0);
$20 = __THREW__;
__THREW__ = 0;
if ($20 & 1) {
$22 = ___cxa_find_matching_catch_2() | 0;
$23 = tempRet0;
HEAP32[$8 >> 2] = 0;
___resumeException($22 | 0);
}
HEAPF32[$0 + 152 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 156 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 160 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 164 >> 2] = Math_fround(1.0);
$28 = $0 + 168 | 0;
HEAP32[$28 >> 2] = 0;
HEAPF32[$0 + 172 >> 2] = Math_fround(1.0);
$30 = $0 + 176 | 0;
HEAP32[$30 >> 2] = 0;
HEAP32[$30 + 4 >> 2] = 0;
HEAP32[$30 + 8 >> 2] = 0;
HEAP32[$30 + 12 >> 2] = 0;
HEAP32[$30 + 16 >> 2] = 0;
HEAP32[$30 + 20 >> 2] = 0;
HEAPF32[$0 + 200 >> 2] = Math_fround(1.0);
$32 = $0 + 204 | 0;
HEAP32[$32 >> 2] = 0;
HEAP32[$32 + 4 >> 2] = 0;
HEAP32[$32 + 8 >> 2] = 0;
HEAP32[$32 + 12 >> 2] = 0;
HEAP32[$32 + 16 >> 2] = 0;
HEAP8[$0 + 224 >> 0] = 1;
__THREW__ = 0;
invoke_vi(98, $0 + 228 | 0);
$35 = __THREW__;
__THREW__ = 0;
if (!($35 & 1)) {
__THREW__ = 0;
invoke_vi(98, $0 + 240 | 0);
$38 = __THREW__;
__THREW__ = 0;
if (!($38 & 1)) {
__THREW__ = 0;
invoke_vi(98, $0 + 252 | 0);
$41 = __THREW__;
__THREW__ = 0;
if (!($41 & 1)) {
HEAPF32[$0 + 264 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 268 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 272 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 276 >> 2] = Math_fround(1.0);
$47 = $0 + 280 | 0;
HEAP32[$47 >> 2] = 0;
HEAPF32[$0 + 284 >> 2] = Math_fround(1.0);
$49 = $0 + 288 | 0;
HEAP32[$49 >> 2] = 0;
HEAP32[$49 + 4 >> 2] = 0;
HEAP32[$49 + 8 >> 2] = 0;
HEAP32[$49 + 12 >> 2] = 0;
HEAP32[$49 + 16 >> 2] = 0;
HEAP32[$49 + 20 >> 2] = 0;
HEAPF32[$0 + 312 >> 2] = Math_fround(1.0);
$51 = $0 + 316 | 0;
HEAP32[$51 >> 2] = 0;
HEAP32[$51 + 4 >> 2] = 0;
HEAP32[$51 + 8 >> 2] = 0;
HEAP32[$51 + 12 >> 2] = 0;
HEAP32[$51 + 16 >> 2] = 0;
HEAP8[$51 + 20 >> 0] = 0;
__THREW__ = 0;
invoke_vi(98, $0 + 340 | 0);
$53 = __THREW__;
__THREW__ = 0;
if (!($53 & 1)) {
__THREW__ = 0;
invoke_vi(98, $0 + 352 | 0);
$56 = __THREW__;
__THREW__ = 0;
if (!($56 & 1)) {
__THREW__ = 0;
invoke_vi(98, $0 + 364 | 0);
$59 = __THREW__;
__THREW__ = 0;
if (!($59 & 1)) {
HEAPF32[$0 + 376 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 380 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 384 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 388 >> 2] = Math_fround(1.0);
HEAP32[$0 + 392 >> 2] = 0;
HEAPF32[$0 + 396 >> 2] = Math_fround(1.0);
$69 = $0 + 400 | 0;
HEAP32[$69 >> 2] = 0;
HEAP32[$69 + 4 >> 2] = 0;
HEAP32[$69 + 8 >> 2] = 0;
HEAP32[$69 + 12 >> 2] = 0;
HEAP32[$69 + 16 >> 2] = 0;
HEAP32[$69 + 20 >> 2] = 0;
HEAPF32[$0 + 424 >> 2] = Math_fround(1.0);
$71 = $0 + 428 | 0;
HEAP32[$71 >> 2] = 0;
HEAP32[$71 + 4 >> 2] = 0;
HEAP32[$71 + 8 >> 2] = 0;
HEAP32[$71 + 12 >> 2] = 0;
HEAP32[$71 + 16 >> 2] = 0;
$72 = $0 + 448 | 0;
$74 = (HEAPU8[$72 >> 0] | HEAPU8[$72 + 1 >> 0] << 8) & -2048;
HEAP8[$72 >> 0] = $74;
HEAP8[$72 + 1 >> 0] = $74 >> 8;
$75 = $0 + 450 | 0;
$77 = (HEAPU8[$75 >> 0] | HEAPU8[$75 + 1 >> 0] << 8) & -2048;
HEAP8[$75 >> 0] = $77;
HEAP8[$75 + 1 >> 0] = $77 >> 8;
$78 = $0 + 452 | 0;
HEAP32[$78 >> 2] = 0;
HEAP32[$78 + 4 >> 2] = 0;
HEAP32[$78 + 8 >> 2] = 0;
HEAP32[$78 + 12 >> 2] = 0;
return;
}
}
}
$61 = ___cxa_find_matching_catch_2() | 0;
HEAP32[$47 >> 2] = 0;
$eh$lpad$body$index2Z2D = tempRet0;
$eh$lpad$body$indexZ2D = $61;
HEAP32[$28 >> 2] = 0;
HEAP32[$8 >> 2] = 0;
___resumeException($eh$lpad$body$indexZ2D | 0);
}
}
}
$79 = ___cxa_find_matching_catch_2() | 0;
$eh$lpad$body$index2Z2D = tempRet0;
$eh$lpad$body$indexZ2D = $79;
HEAP32[$28 >> 2] = 0;
HEAP32[$8 >> 2] = 0;
___resumeException($eh$lpad$body$indexZ2D | 0);
}
function __ZN7Getopts11processArgsEPPKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0, $$012$i$i$i = 0, $$01215$i$i$i = 0, $$01216$i$i$i = 0, $$04851 = 0, $$04851$sink = 0, $$pre$phiZ2D = 0, $$sink$i$i$i = 0, $12 = 0, $13 = 0, $2 = 0, $25 = 0, $27 = 0, $34 = 0, $37 = 0, $4 = 0, $43 = 0, $44 = 0, $47 = 0, $51 = 0, $52 = 0, $55 = 0, $56 = 0, $58 = 0, $6 = 0, $66 = 0, $70 = 0, $73 = 0, $75 = 0, $79 = 0, $8 = 0, $81 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $94 = 0, $96 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$vararg_buffer14 = sp + 40 | 0;
$vararg_buffer11 = sp + 32 | 0;
$vararg_buffer7 = sp + 24 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$2 = HEAP32[$1 >> 2] | 0;
if (!$2) {
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
$4 = $0 + 8 | 0;
$$04851 = $1;
$6 = $2;
while (1) {
if ((HEAP8[$6 >> 0] | 0) != 45) {
$$0 = $$04851;
label = 46;
break;
}
$8 = $6 + 1 | 0;
$9 = HEAP32[$0 >> 2] | 0;
$12 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($8, HEAP32[$9 + 4 >> 2] | 0) | 0;
$13 = HEAP32[$9 >> 2] | 0;
L7 : do if ((HEAP16[$13 + ($12 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i = HEAP32[$13 + ($12 << 3) >> 2] | 0;
if (!$$01215$i$i$i) label = 9; else {
$$01216$i$i$i = $$01215$i$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($8, HEAP32[$$01216$i$i$i >> 2] | 0) | 0) break;
$$012$i$i$i = HEAP32[$$01216$i$i$i + 8 >> 2] | 0;
if (!$$012$i$i$i) {
label = 9;
break L7;
} else $$01216$i$i$i = $$012$i$i$i;
}
$$sink$i$i$i = $$01216$i$i$i + 4 | 0;
}
} else label = 9; while (0);
if ((label | 0) == 9) {
label = 0;
$$sink$i$i$i = $9 + 20 | 0;
}
$25 = HEAP32[$$sink$i$i$i >> 2] | 0;
do if (($25 | 0) == -1) label = 44; else {
$27 = HEAP32[$4 >> 2] | 0;
if (($25 | 0) < 0) label = 44; else if ((HEAP32[$27 + 12 >> 2] | 0) > ($25 | 0)) {
$34 = HEAP32[(HEAP32[$27 >> 2] | 0) + ($25 << 2) >> 2] | 0;
if (!$34) label = 44; else {
if (0) {
HEAP32[$vararg_buffer >> 2] = $8;
__Z7eprintfPKcz(9594, $vararg_buffer);
}
$37 = $34 + 16 | 0;
HEAP32[$37 >> 2] = (HEAP32[$37 >> 2] | 0) + 1;
if (HEAP8[$34 + 4 >> 0] | 0) {
$43 = $$04851 + 4 | 0;
$44 = HEAP32[$43 >> 2] | 0;
if (!$44) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer4 >> 2] = $8;
__Z7eprintfPKcz(9644, $vararg_buffer4);
$$04851$sink = $43;
break;
}
if (!0) $47 = $44; else {
HEAP32[$vararg_buffer1 >> 2] = $44;
__Z7eprintfPKcz(9617, $vararg_buffer1);
$47 = HEAP32[$43 >> 2] | 0;
}
__ZN7Getopts12argsFromFileEPKcP13DynamicArrayPIcE($0, $47, 0) | 0;
$$04851$sink = $43;
break;
}
if (!(HEAP8[$34 + 1 >> 0] | 0)) $$04851$sink = $$04851; else {
$51 = $$04851 + 4 | 0;
$52 = HEAP32[$51 >> 2] | 0;
if (!$52) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer11 >> 2] = $8;
__Z7eprintfPKcz(9723, $vararg_buffer11);
$$04851$sink = $51;
break;
}
if (0) {
HEAP32[$vararg_buffer7 >> 2] = $52;
HEAP32[$vararg_buffer7 + 4 >> 2] = $8;
__Z7eprintfPKcz(9682, $vararg_buffer7);
}
$55 = $34 + 12 | 0;
$56 = HEAP32[$55 >> 2] | 0;
if (!$56) {
$58 = __Znwj(16) | 0;
HEAP32[$58 + 4 >> 2] = 10;
HEAP32[$58 + 12 >> 2] = 0;
HEAP32[$58 >> 2] = 0;
HEAP32[$58 + 8 >> 2] = 0;
HEAP32[$55 >> 2] = $58;
$66 = $58;
} else $66 = $56;
if (!(HEAP8[$34 + 3 >> 0] | 0)) {
$86 = __Z10copyStringPKc(HEAP32[$51 >> 2] | 0) | 0;
$87 = $66 + 12 | 0;
$88 = HEAP32[$87 >> 2] | 0;
if (($88 | 0) < 0) {
$$04851$sink = $51;
break;
}
if ((HEAP32[$66 + 8 >> 2] | 0) > ($88 | 0)) {
$$pre$phiZ2D = $88 + 1 | 0;
label = 41;
} else {
$94 = HEAP32[$66 + 4 >> 2] | 0;
$96 = $88 + 1 | 0;
__ZN13DynamicArrayPIKcE6resizeEi($66, ($94 | 0) > ($88 | 0) ? $94 : $96 + ($88 >>> 1) | 0);
if ((HEAP32[$87 >> 2] | 0) <= ($88 | 0)) {
$$pre$phiZ2D = $96;
label = 41;
}
}
if ((label | 0) == 41) {
label = 0;
HEAP32[$87 >> 2] = $$pre$phiZ2D;
}
HEAP32[(HEAP32[$66 >> 2] | 0) + ($88 << 2) >> 2] = $86;
$$04851$sink = $51;
break;
}
if ((HEAP32[$66 + 12 >> 2] | 0) > 0) {
$70 = HEAP32[HEAP32[$66 >> 2] >> 2] | 0;
if (!$70) $75 = $66; else {
_free($70);
$75 = HEAP32[$55 >> 2] | 0;
}
} else $75 = $66;
$73 = __Z10copyStringPKc(HEAP32[$51 >> 2] | 0) | 0;
if ((HEAP32[$75 + 8 >> 2] | 0) <= 0) {
$79 = HEAP32[$75 + 4 >> 2] | 0;
__ZN13DynamicArrayPIKcE6resizeEi($75, ($79 | 0) > 1 ? $79 : 1);
}
$81 = $75 + 12 | 0;
if ((HEAP32[$81 >> 2] | 0) <= 0) HEAP32[$81 >> 2] = 1;
HEAP32[HEAP32[$75 >> 2] >> 2] = $73;
$$04851$sink = $51;
}
}
} else label = 44;
} while (0);
if ((label | 0) == 44) {
label = 0;
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer14 >> 2] = $8;
__Z7eprintfPKcz(9780, $vararg_buffer14);
$$04851$sink = $$04851;
}
$$04851 = $$04851$sink + 4 | 0;
$6 = HEAP32[$$04851 >> 2] | 0;
if (!$6) {
$$0 = 0;
label = 46;
break;
}
}
if ((label | 0) == 46) {
STACKTOP = sp;
return $$0 | 0;
}
return 0;
}
function __ZN5Joint16InitArticulationEv($0) {
$0 = $0 | 0;
var $$0 = 0, $$02 = 0, $1 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $26 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $40 = 0, $41 = 0, $46 = 0, $48 = 0, $5 = 0, $50 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $73 = 0, $75 = 0, $77 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$1 = $0 + 36 | 0;
if (HEAP32[$1 >> 2] | 0) {
STACKTOP = sp;
return;
}
$5 = HEAP32[$0 + 24 >> 2] | 0;
switch ($5 | 0) {
case 5:
{
$6 = __Znwj(24) | 0;
HEAP32[$6 + 4 >> 2] = $0;
HEAP32[$6 >> 2] = 1032;
$8 = $6 + 8 | 0;
__THREW__ = 0;
invoke_vi(98, $8 | 0);
$9 = __THREW__;
__THREW__ = 0;
if (!($9 & 1)) {
HEAPF32[$6 + 20 >> 2] = Math_fround(0.0);
__THREW__ = 0;
invoke_vi(108, $8 | 0);
$12 = __THREW__;
__THREW__ = 0;
if (!($12 & 1)) {
HEAP32[$1 >> 2] = $6;
STACKTOP = sp;
return;
}
}
$14 = ___cxa_find_matching_catch_2() | 0;
$15 = tempRet0;
__ZdlPv($6);
$$0 = $15;
$$02 = $14;
___resumeException($$02 | 0);
break;
}
case 2:
{
$16 = __Znwj(40) | 0;
HEAP32[$16 + 4 >> 2] = $0;
HEAP32[$16 >> 2] = 1124;
$18 = $16 + 8 | 0;
__THREW__ = 0;
invoke_vi(98, $18 | 0);
$19 = __THREW__;
__THREW__ = 0;
if (!($19 & 1)) {
$21 = $16 + 20 | 0;
__THREW__ = 0;
invoke_vi(98, $21 | 0);
$22 = __THREW__;
__THREW__ = 0;
if (!($22 & 1)) {
HEAPF32[$16 + 32 >> 2] = Math_fround(0.0);
HEAPF32[$16 + 36 >> 2] = Math_fround(0.0);
__THREW__ = 0;
invoke_vi(108, $18 | 0);
$26 = __THREW__;
__THREW__ = 0;
if (!($26 & 1)) {
__THREW__ = 0;
invoke_vi(108, $21 | 0);
$28 = __THREW__;
__THREW__ = 0;
if (!($28 & 1)) {
HEAP32[$1 >> 2] = $16;
STACKTOP = sp;
return;
}
}
}
}
$30 = ___cxa_find_matching_catch_2() | 0;
$31 = tempRet0;
__ZdlPv($16);
$$0 = $31;
$$02 = $30;
___resumeException($$02 | 0);
break;
}
case 3:
{
$32 = __Znwj(72) | 0;
HEAP32[$32 + 4 >> 2] = $0;
HEAP32[$32 >> 2] = 1216;
$34 = $32 + 8 | 0;
__THREW__ = 0;
invoke_vi(98, $34 | 0);
$35 = __THREW__;
__THREW__ = 0;
if (!($35 & 1)) {
$37 = $32 + 20 | 0;
__THREW__ = 0;
invoke_vi(98, $37 | 0);
$38 = __THREW__;
__THREW__ = 0;
if (!($38 & 1)) {
$40 = $32 + 32 | 0;
__THREW__ = 0;
invoke_vi(98, $40 | 0);
$41 = __THREW__;
__THREW__ = 0;
if (!($41 & 1)) {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$32 >> 2] | 0) + 12 >> 2] | 0, $32 | 0);
$46 = __THREW__;
__THREW__ = 0;
if (!($46 & 1)) {
__THREW__ = 0;
invoke_vi(108, $34 | 0);
$48 = __THREW__;
__THREW__ = 0;
if (!($48 & 1)) {
__THREW__ = 0;
invoke_vi(108, $37 | 0);
$50 = __THREW__;
__THREW__ = 0;
if (!($50 & 1)) {
__THREW__ = 0;
invoke_vi(108, $40 | 0);
$52 = __THREW__;
__THREW__ = 0;
if (!($52 & 1)) {
HEAP32[$1 >> 2] = $32;
STACKTOP = sp;
return;
}
}
}
}
}
}
}
$54 = ___cxa_find_matching_catch_2() | 0;
$55 = tempRet0;
__ZdlPv($32);
$$0 = $55;
$$02 = $54;
___resumeException($$02 | 0);
break;
}
case 4:
{
$56 = __Znwj(68) | 0;
HEAP32[$56 + 4 >> 2] = $0;
HEAP32[$56 >> 2] = 1308;
$58 = $56 + 8 | 0;
__THREW__ = 0;
invoke_vi(98, $58 | 0);
$59 = __THREW__;
__THREW__ = 0;
if (!($59 & 1)) {
$61 = $56 + 20 | 0;
__THREW__ = 0;
invoke_vi(98, $61 | 0);
$62 = __THREW__;
__THREW__ = 0;
if (!($62 & 1)) {
$64 = $56 + 32 | 0;
__THREW__ = 0;
invoke_vi(98, $64 | 0);
$65 = __THREW__;
__THREW__ = 0;
if (!($65 & 1)) {
HEAPF32[$56 + 44 >> 2] = Math_fround(0.0);
HEAPF32[$56 + 48 >> 2] = Math_fround(0.0);
HEAPF32[$56 + 52 >> 2] = Math_fround(0.0);
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$56 >> 2] | 0) + 12 >> 2] | 0, $56 | 0);
$73 = __THREW__;
__THREW__ = 0;
if (!($73 & 1)) {
__THREW__ = 0;
invoke_vi(108, $58 | 0);
$75 = __THREW__;
__THREW__ = 0;
if (!($75 & 1)) {
__THREW__ = 0;
invoke_vi(108, $61 | 0);
$77 = __THREW__;
__THREW__ = 0;
if (!($77 & 1)) {
__THREW__ = 0;
invoke_vi(108, $64 | 0);
$79 = __THREW__;
__THREW__ = 0;
if (!($79 & 1)) {
HEAP32[$1 >> 2] = $56;
STACKTOP = sp;
return;
}
}
}
}
}
}
}
$81 = ___cxa_find_matching_catch_2() | 0;
$82 = tempRet0;
__ZdlPv($56);
$$0 = $82;
$$02 = $81;
___resumeException($$02 | 0);
break;
}
case 1:
{
$83 = __Znwj(24) | 0;
HEAP32[$83 + 4 >> 2] = $0;
HEAP32[$83 >> 2] = 1400;
HEAPF32[$83 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$83 + 12 >> 2] = Math_fround(0.0);
HEAPF32[$83 + 16 >> 2] = Math_fround(0.0);
HEAPF32[$83 + 20 >> 2] = Math_fround(1.0);
HEAP32[$1 >> 2] = $83;
STACKTOP = sp;
return;
}
default:
{
HEAP32[$vararg_buffer >> 2] = $5;
__Z7eprintfPKcz(12960, $vararg_buffer);
STACKTOP = sp;
return;
}
}
}
function __ZN11HanimAvatar16AddARPSiteByNameEPKcP5Joint($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$011$i$i = 0, $$01115$i$i = 0, $$01116$i$i = 0, $$pre$phiZ2D = 0, $$sink$i$i = 0, $$sink$i$i30 = 0, $$sink$i$i35 = 0, $$sroa$0$0$extract$trunc = 0, $102 = 0, $105 = 0, $107 = 0, $108 = 0, $109 = 0, $116 = 0, $119 = 0, $12 = 0, $13 = 0, $25 = 0, $3 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $41 = 0, $43 = 0, $49 = 0, $5 = 0, $50 = 0, $53 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $62 = 0, $66 = 0, $69 = 0, $7 = 0, $71 = 0, $72 = 0, $73 = 0, $80 = 0, $83 = 0, $88 = 0, $89 = 0, $9 = 0, $91 = 0, $92 = 0, $93 = 0, $95 = 0, $98 = 0, $tmpcast$i$byval_copy = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$tmpcast$i$byval_copy = sp + 4 | 0;
$3 = sp;
if (!$2) {
STACKTOP = sp;
return;
}
$5 = __Z10copyStringPKc($1) | 0;
$6 = __Znwj(56) | 0;
__THREW__ = 0;
invoke_vii(140, $6 | 0, $5 | 0);
$7 = __THREW__;
__THREW__ = 0;
if ($7 & 1) {
$119 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($6);
___resumeException($119 | 0);
}
$9 = HEAP32[16535] | 0;
$12 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($5, HEAP32[$9 + 4 >> 2] | 0) | 0;
$13 = HEAP32[$9 >> 2] | 0;
L7 : do if ((HEAP16[$13 + ($12 << 3) + 4 >> 1] | 0) > 0) {
$$01115$i$i = HEAP32[$13 + ($12 << 3) >> 2] | 0;
if (!$$01115$i$i) label = 8; else {
$$01116$i$i = $$01115$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($5, HEAP32[$$01116$i$i >> 2] | 0) | 0) break;
$$011$i$i = HEAP32[$$01116$i$i + 8 >> 2] | 0;
if (!$$011$i$i) {
label = 8;
break L7;
} else $$01116$i$i = $$011$i$i;
}
$$sink$i$i = $$01116$i$i + 4 | 0;
}
} else label = 8; while (0);
if ((label | 0) == 8) $$sink$i$i = $9 + 20 | 0;
$$sroa$0$0$extract$trunc = HEAP32[$$sink$i$i >> 2] | 0;
$25 = $6 + 12 | 0;
HEAP16[$25 >> 1] = $$sroa$0$0$extract$trunc;
HEAP8[$25 + 2 >> 0] = $$sroa$0$0$extract$trunc >>> 16;
HEAP32[$6 + 8 >> 2] = ((HEAP32[16607] ^ HEAP32[$25 >> 2]) & 16777215 | 0) == 0 ? 3 : 1;
$32 = $0 + 108 | 0;
$33 = HEAP32[$32 >> 2] | 0;
$34 = $33 + 12 | 0;
$35 = HEAP32[$34 >> 2] | 0;
if (($35 | 0) < 0) $50 = $35; else {
if ((HEAP32[$33 + 8 >> 2] | 0) > ($35 | 0)) {
$$pre$phiZ2D = $35 + 1 | 0;
label = 13;
} else {
$41 = HEAP32[$33 + 4 >> 2] | 0;
$43 = $35 + 1 | 0;
__ZN13DynamicArrayPI4SiteE6resizeEi($33, ($41 | 0) > ($35 | 0) ? $41 : $43 + ($35 >>> 1) | 0);
if ((HEAP32[$34 >> 2] | 0) <= ($35 | 0)) {
$$pre$phiZ2D = $43;
label = 13;
}
}
if ((label | 0) == 13) HEAP32[$34 >> 2] = $$pre$phiZ2D;
HEAP32[(HEAP32[$33 >> 2] | 0) + ($35 << 2) >> 2] = $6;
$50 = HEAP32[(HEAP32[$32 >> 2] | 0) + 12 >> 2] | 0;
}
$49 = $50 + -1 | 0;
$53 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($5, HEAP32[$0 + 148 >> 2] | 0) | 0;
$55 = HEAP32[$0 + 144 >> 2] | 0;
$56 = $55 + ($53 << 3) | 0;
$57 = $55 + ($53 << 3) + 4 | 0;
switch (HEAP16[$57 >> 1] | 0) {
case 0:
{
$59 = __Znwj(12) | 0;
HEAP32[$59 >> 2] = $5;
HEAP32[$59 + 4 >> 2] = $49;
HEAP32[$59 + 8 >> 2] = 0;
HEAP32[$56 >> 2] = $59;
$62 = $0 + 156 | 0;
HEAP32[$62 >> 2] = (HEAP32[$62 >> 2] | 0) + -1;
$$sink$i$i30 = $0 + 160 | 0;
break;
}
case 1:
{
$66 = $0 + 160 | 0;
HEAP32[$66 >> 2] = (HEAP32[$66 >> 2] | 0) + -1;
label = 18;
break;
}
default:
label = 18;
}
if ((label | 0) == 18) {
$69 = HEAP32[$56 >> 2] | 0;
$71 = __Znwj(12) | 0;
$72 = $69 + 8 | 0;
$73 = HEAP32[$72 >> 2] | 0;
HEAP32[$71 >> 2] = $5;
HEAP32[$71 + 4 >> 2] = $49;
HEAP32[$71 + 8 >> 2] = $73;
HEAP32[$72 >> 2] = $71;
$$sink$i$i30 = $0 + 152 | 0;
}
HEAP32[$$sink$i$i30 >> 2] = (HEAP32[$$sink$i$i30 >> 2] | 0) + 1;
HEAP16[$57 >> 1] = (HEAP16[$57 >> 1] | 0) + 1 << 16 >> 16;
$80 = $0 + 168 | 0;
HEAP32[$80 >> 2] = (HEAP32[$80 >> 2] | 0) + 1;
$83 = HEAP32[$25 >> 2] | 0;
if ((HEAP32[16607] ^ $83) & 16777215 | 0) {
HEAP32[$3 >> 2] = $83;
$88 = HEAP32[$0 + 176 >> 2] | 0;
HEAP8[$tmpcast$i$byval_copy >> 0] = HEAP8[$3 >> 0] | 0;
HEAP8[$tmpcast$i$byval_copy + 1 >> 0] = HEAP8[$3 + 1 >> 0] | 0;
HEAP8[$tmpcast$i$byval_copy + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0;
HEAP8[$tmpcast$i$byval_copy + 3 >> 0] = HEAP8[$3 + 3 >> 0] | 0;
$89 = __ZN6KeyOpsIK6SiteIDE12hashFunctionES0_i($tmpcast$i$byval_copy, $88) | 0;
$91 = HEAP32[$0 + 172 >> 2] | 0;
$92 = $91 + ($89 << 3) | 0;
$93 = $91 + ($89 << 3) + 4 | 0;
switch (HEAP16[$93 >> 1] | 0) {
case 0:
{
$95 = __Znwj(12) | 0;
HEAP32[$95 >> 2] = $83;
HEAP32[$95 + 4 >> 2] = $6;
HEAP32[$95 + 8 >> 2] = 0;
HEAP32[$92 >> 2] = $95;
$98 = $0 + 184 | 0;
HEAP32[$98 >> 2] = (HEAP32[$98 >> 2] | 0) + -1;
$$sink$i$i35 = $0 + 188 | 0;
break;
}
case 1:
{
$102 = $0 + 188 | 0;
HEAP32[$102 >> 2] = (HEAP32[$102 >> 2] | 0) + -1;
label = 23;
break;
}
default:
label = 23;
}
if ((label | 0) == 23) {
$105 = HEAP32[$92 >> 2] | 0;
$107 = __Znwj(12) | 0;
$108 = $105 + 8 | 0;
$109 = HEAP32[$108 >> 2] | 0;
HEAP32[$107 >> 2] = $83;
HEAP32[$107 + 4 >> 2] = $6;
HEAP32[$107 + 8 >> 2] = $109;
HEAP32[$108 >> 2] = $107;
$$sink$i$i35 = $0 + 180 | 0;
}
HEAP32[$$sink$i$i35 >> 2] = (HEAP32[$$sink$i$i35 >> 2] | 0) + 1;
HEAP16[$93 >> 1] = (HEAP16[$93 >> 1] | 0) + 1 << 16 >> 16;
$116 = $0 + 196 | 0;
HEAP32[$116 >> 2] = (HEAP32[$116 >> 2] | 0) + 1;
}
__ZN5Joint7addSiteEP4Site($2, $6);
HEAP32[$6 + 16 >> 2] = $2;
HEAPF32[$6 + 20 >> 2] = Math_fround(.0500000007);
STACKTOP = sp;
return;
}
function _addBinding($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$ = 0, $$0100$lcssa = 0, $$0100106 = 0, $$0102105 = 0, $$0102105$us = 0, $$0104121 = 0, $$097$ = 0, $$097$lcssa = 0, $$097107 = 0, $$097107$us = 0, $$099 = 0, $$1 = 0, $$1101 = 0, $$1103 = 0, $$1103$us = 0, $$lcssa = 0, $$sink = 0, $102 = 0, $115 = 0, $123 = 0, $124 = 0, $18 = 0, $26 = 0, $31 = 0, $32 = 0, $36 = 0, $41 = 0, $47 = 0, $5 = 0, $51 = 0, $62 = 0, $66 = 0, $67 = 0, $69 = 0, $7 = 0, $74 = 0, $76 = 0, $77 = 0, $8 = 0, $81 = 0, $83 = 0, $86 = 0, $87 = 0, $94 = 0, $96 = 0, label = 0;
$5 = HEAP8[$3 >> 0] | 0;
$7 = HEAP32[$1 >> 2] | 0;
$8 = ($7 | 0) == 0;
L1 : do if (!($5 << 24 >> 24)) if ($8) {
$$0100$lcssa = 1;
$$0104121 = 0;
$$097$lcssa = 0;
$$lcssa = 1;
} else {
$$1 = 28;
return $$1 | 0;
} else {
do if ($8) {
$$0100106 = 1;
$$0102105 = 1;
$$097107 = 0;
$123 = 1;
$41 = $5;
} else if ((HEAP8[$7 >> 0] | 0) == 120) if ((HEAP8[$7 + 1 >> 0] | 0) == 109) if ((HEAP8[$7 + 2 >> 0] | 0) == 108) {
$18 = HEAP8[$7 + 3 >> 0] | 0;
if ($18 << 24 >> 24 == 110) {
if ((HEAP8[$7 + 4 >> 0] | 0) != 115) {
$$0100106 = 1;
$$0102105 = 1;
$$097107 = 0;
$123 = 1;
$41 = $5;
break;
}
if (!(HEAP8[$7 + 5 >> 0] | 0)) $$1 = 39; else {
$$0100106 = 1;
$$0102105 = 1;
$$097107 = 0;
$123 = 1;
$41 = $5;
break;
}
return $$1 | 0;
}
$26 = $18 << 24 >> 24 == 0;
$$ = $26 & 1;
if ($26) {
$$0102105$us = 1;
$$097107$us = 0;
$124 = 1;
$31 = $5;
while (1) {
do if ($124) {
if (($$097107$us | 0) <= 36) if ($31 << 24 >> 24 == (HEAP8[58394 + $$097107$us >> 0] | 0)) {
$$1103$us = $$0102105$us;
break;
}
$$1103$us = 0;
} else $$1103$us = 0; while (0);
$32 = $$097107$us + 1 | 0;
$31 = HEAP8[$3 + $32 >> 0] | 0;
$36 = $$1103$us << 24 >> 24 != 0;
if (!($31 << 24 >> 24)) {
$$0100$lcssa = 1;
$$0104121 = $$;
$$097$lcssa = $32;
$$lcssa = $36;
break L1;
} else {
$$0102105$us = $$1103$us;
$$097107$us = $32;
$124 = $36;
}
}
} else {
$$0100106 = 1;
$$0102105 = 1;
$$097107 = 0;
$123 = 1;
$41 = $5;
}
} else {
$$0100106 = 1;
$$0102105 = 1;
$$097107 = 0;
$123 = 1;
$41 = $5;
} else {
$$0100106 = 1;
$$0102105 = 1;
$$097107 = 0;
$123 = 1;
$41 = $5;
} else {
$$0100106 = 1;
$$0102105 = 1;
$$097107 = 0;
$123 = 1;
$41 = $5;
} while (0);
while (1) {
do if ($123) {
if (($$097107 | 0) <= 36) if ($41 << 24 >> 24 == (HEAP8[58394 + $$097107 >> 0] | 0)) {
$$1103 = $$0102105;
break;
}
$$1103 = 0;
} else $$1103 = 0; while (0);
do if (!($$0100106 << 24 >> 24)) $$1101 = 0; else {
if (($$097107 | 0) <= 29) if ($41 << 24 >> 24 == (HEAP8[58431 + $$097107 >> 0] | 0)) {
$$1101 = $$0100106;
break;
}
$$1101 = 0;
} while (0);
$47 = $$097107 + 1 | 0;
$41 = HEAP8[$3 + $47 >> 0] | 0;
$51 = $$1103 << 24 >> 24 != 0;
if (!($41 << 24 >> 24)) {
$$0100$lcssa = $$1101;
$$0104121 = 0;
$$097$lcssa = $47;
$$lcssa = $51;
break;
} else {
$$0100106 = $$1101;
$$0102105 = $$1103;
$$097107 = $47;
$123 = $51;
}
}
} while (0);
if (($$0104121 & 255 | 0) != ($$lcssa & ($$097$lcssa | 0) == 36 & 1 | 0)) {
$$1 = $$0104121 << 24 >> 24 ? 38 : 40;
return $$1 | 0;
}
if ($$0100$lcssa << 24 >> 24 != 0 & ($$097$lcssa | 0) == 29) {
$$1 = 40;
return $$1 | 0;
}
$62 = $0 + 456 | 0;
$$097$ = $$097$lcssa + ((HEAP8[$62 >> 0] | 0) != 0 & 1) | 0;
$66 = $0 + 360 | 0;
$67 = HEAP32[$66 >> 2] | 0;
do if (!$67) {
$81 = $0 + 12 | 0;
$83 = FUNCTION_TABLE_ii[HEAP32[$81 >> 2] & 63](28) | 0;
if (!$83) {
$$1 = 1;
return $$1 | 0;
}
$86 = $$097$ + 24 | 0;
$87 = FUNCTION_TABLE_ii[HEAP32[$81 >> 2] & 63]($86) | 0;
HEAP32[$83 + 16 >> 2] = $87;
if ($87 | 0) {
HEAP32[$83 + 24 >> 2] = $86;
$$099 = $83;
break;
}
FUNCTION_TABLE_vi[HEAP32[$0 + 20 >> 2] & 255]($83);
$$1 = 1;
return $$1 | 0;
} else {
$69 = $67 + 24 | 0;
do if (($$097$ | 0) > (HEAP32[$69 >> 2] | 0)) {
$74 = $67 + 16 | 0;
$76 = $$097$ + 24 | 0;
$77 = FUNCTION_TABLE_iii[HEAP32[$0 + 16 >> 2] & 63](HEAP32[$74 >> 2] | 0, $76) | 0;
if (!$77) {
$$1 = 1;
return $$1 | 0;
} else {
HEAP32[$74 >> 2] = $77;
HEAP32[$69 >> 2] = $76;
break;
}
} while (0);
HEAP32[$66 >> 2] = HEAP32[$67 + 4 >> 2];
$$099 = $67;
} while (0);
HEAP32[$$099 + 20 >> 2] = $$097$;
$94 = $$099 + 16 | 0;
_memcpy(HEAP32[$94 >> 2] | 0, $3 | 0, $$097$ | 0) | 0;
$96 = HEAP8[$62 >> 0] | 0;
if ($96 << 24 >> 24) HEAP8[(HEAP32[$94 >> 2] | 0) + ($$097$ + -1) >> 0] = $96;
HEAP32[$$099 >> 2] = $1;
HEAP32[$$099 + 12 >> 2] = $2;
$102 = $1 + 4 | 0;
HEAP32[$$099 + 8 >> 2] = HEAP32[$102 >> 2];
if (!(HEAP8[$3 >> 0] | 0)) if (((HEAP32[$0 + 340 >> 2] | 0) + 132 | 0) == ($1 | 0)) $$sink = 0; else label = 41; else label = 41;
if ((label | 0) == 41) $$sink = $$099;
HEAP32[$102 >> 2] = $$sink;
HEAP32[$$099 + 4 >> 2] = HEAP32[$4 >> 2];
HEAP32[$4 >> 2] = $$099;
if (!$2) {
$$1 = 0;
return $$1 | 0;
}
$115 = HEAP32[$0 + 100 >> 2] | 0;
if (!$115) {
$$1 = 0;
return $$1 | 0;
}
FUNCTION_TABLE_viii[$115 & 127](HEAP32[$0 + 4 >> 2] | 0, HEAP32[$1 >> 2] | 0, HEAP32[$102 >> 2] | 0 ? $3 : 0);
$$1 = 0;
return $$1 | 0;
}
function __ZN10Trajectory22PrecomputeTrajectoriesEv() {
var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $103 = 0, $105 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $13 = f0, $14 = 0, $17 = 0, $19 = 0, $20 = f0, $23 = 0, $25 = 0, $27 = 0, $29 = f0, $35 = 0, $4 = f0, $46 = 0, $50 = 0, $51 = 0, $54 = 0, $56 = 0, $58 = 0, $61 = 0, $63 = 0, $65 = 0, $68 = 0, $70 = 0, $72 = 0, $75 = 0, $77 = 0, $79 = 0, $8 = 0, $82 = 0, $84 = 0, $86 = 0, $89 = 0, $91 = 0, $93 = 0, $96 = 0, $98 = 0;
$0 = __Znwj(32) | 0;
$1 = HEAP32[476] | 0;
$4 = Math_fround(1.0 / +($1 | 0));
HEAPF32[$0 >> 2] = $4;
HEAPF32[$0 + 4 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 12 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 16 >> 2] = Math_fround(.00100000005);
HEAPF32[$0 + 20 >> 2] = Math_fround(.990000009);
HEAPF32[$0 + 24 >> 2] = Math_fround(0.0);
$8 = $0 + 28 | 0;
$10 = _malloc($1 << 2) | 0;
HEAP32[$8 >> 2] = $10;
HEAP32[16614] = $0;
if (($1 | 0) > 0) {
$13 = Math_fround(Math_fround(0.0) / Math_fround($1 | 0));
HEAPF32[$10 >> 2] = $13;
$14 = HEAP32[476] | 0;
if (($14 | 0) > 1) {
$17 = 1;
$19 = $14;
while (1) {
$20 = Math_fround(Math_fround($17 | 0) / Math_fround($19 | 0));
HEAPF32[(HEAP32[$8 >> 2] | 0) + ($17 << 2) >> 2] = $20;
$17 = $17 + 1 | 0;
$23 = HEAP32[476] | 0;
if (($17 | 0) >= ($23 | 0)) {
$27 = $23;
break;
} else $19 = $23;
}
} else $27 = $14;
} else $27 = $1;
$25 = __Znwj(32) | 0;
$29 = Math_fround(1.0 / +($27 | 0));
HEAPF32[$25 >> 2] = $29;
HEAPF32[$25 + 4 >> 2] = Math_fround(0.0);
HEAPF32[$25 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$25 + 12 >> 2] = Math_fround(0.0);
HEAPF32[$25 + 16 >> 2] = Math_fround(.00100000005);
HEAPF32[$25 + 20 >> 2] = Math_fround(.990000009);
HEAPF32[$25 + 24 >> 2] = Math_fround(0.0);
$35 = _malloc($27 << 2) | 0;
HEAP32[$25 + 28 >> 2] = $35;
HEAP32[16613] = $25;
if (($27 | 0) > 0) {
HEAPF32[HEAP32[$25 + 28 >> 2] >> 2] = Math_fround(1.0);
if ((HEAP32[476] | 0) > 1) {
$46 = 1;
do {
HEAPF32[(HEAP32[(HEAP32[16613] | 0) + 28 >> 2] | 0) + ($46 << 2) >> 2] = Math_fround(1.0);
$46 = $46 + 1 | 0;
} while (($46 | 0) < (HEAP32[476] | 0));
}
}
if (HEAP8[72309] | 0) {
$50 = HEAP32[16614] | 0;
HEAP32[16615] = $50;
HEAP32[16616] = $50;
HEAP32[16617] = $50;
HEAP32[16618] = $50;
HEAP32[16619] = $50;
HEAP32[16620] = $50;
HEAP32[16621] = $50;
$$sink = $50;
$107 = $50;
$109 = $50;
$110 = $50;
$111 = $50;
$112 = $50;
$114 = $50;
HEAP32[16622] = $$sink;
HEAP32[16623] = $107;
$108 = HEAP32[16613] | 0;
HEAP32[16625] = $108;
HEAP32[16626] = $107;
HEAP32[16629] = $109;
HEAP32[16630] = $107;
HEAP32[16631] = $110;
HEAP32[16632] = $111;
HEAP32[16633] = $112;
$113 = $$sink;
HEAP32[16624] = $113;
HEAP32[16634] = $114;
return;
}
$51 = __Znwj(32) | 0;
__THREW__ = 0;
invoke_vii(143, $51 | 0, (HEAP32[16636] | 0) + 28 | 0);
$54 = __THREW__;
__THREW__ = 0;
if ($54 & 1) {
$56 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($51);
___resumeException($56 | 0);
}
HEAP32[16615] = $51;
$58 = __Znwj(32) | 0;
__THREW__ = 0;
invoke_vii(143, $58 | 0, (HEAP32[16636] | 0) + 56 | 0);
$61 = __THREW__;
__THREW__ = 0;
if ($61 & 1) {
$63 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($58);
___resumeException($63 | 0);
}
HEAP32[16616] = $58;
$65 = __Znwj(32) | 0;
__THREW__ = 0;
invoke_vii(143, $65 | 0, (HEAP32[16636] | 0) + 84 | 0);
$68 = __THREW__;
__THREW__ = 0;
if ($68 & 1) {
$70 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($65);
___resumeException($70 | 0);
}
HEAP32[16617] = $65;
$72 = __Znwj(32) | 0;
__THREW__ = 0;
invoke_vii(143, $72 | 0, (HEAP32[16636] | 0) + 196 | 0);
$75 = __THREW__;
__THREW__ = 0;
if ($75 & 1) {
$77 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($72);
___resumeException($77 | 0);
}
HEAP32[16618] = $72;
$79 = __Znwj(32) | 0;
__THREW__ = 0;
invoke_vii(143, $79 | 0, (HEAP32[16636] | 0) + 112 | 0);
$82 = __THREW__;
__THREW__ = 0;
if ($82 & 1) {
$84 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($79);
___resumeException($84 | 0);
}
HEAP32[16619] = $79;
$86 = __Znwj(32) | 0;
__THREW__ = 0;
invoke_vii(143, $86 | 0, (HEAP32[16636] | 0) + 140 | 0);
$89 = __THREW__;
__THREW__ = 0;
if ($89 & 1) {
$91 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($86);
___resumeException($91 | 0);
}
HEAP32[16620] = $86;
$93 = __Znwj(32) | 0;
__THREW__ = 0;
invoke_vii(143, $93 | 0, (HEAP32[16636] | 0) + 168 | 0);
$96 = __THREW__;
__THREW__ = 0;
if ($96 & 1) {
$98 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($93);
___resumeException($98 | 0);
}
HEAP32[16621] = $93;
$100 = __Znwj(32) | 0;
__THREW__ = 0;
invoke_vii(143, $100 | 0, (HEAP32[16636] | 0) + 224 | 0);
$103 = __THREW__;
__THREW__ = 0;
if ($103 & 1) {
$105 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($100);
___resumeException($105 | 0);
}
$$sink = $100;
$107 = HEAP32[16615] | 0;
$109 = HEAP32[16618] | 0;
$110 = HEAP32[16619] | 0;
$111 = HEAP32[16620] | 0;
$112 = HEAP32[16621] | 0;
$114 = HEAP32[16614] | 0;
HEAP32[16622] = $$sink;
HEAP32[16623] = $107;
$108 = HEAP32[16613] | 0;
HEAP32[16625] = $108;
HEAP32[16626] = $107;
HEAP32[16629] = $109;
HEAP32[16630] = $107;
HEAP32[16631] = $110;
HEAP32[16632] = $111;
HEAP32[16633] = $112;
$113 = $$sink;
HEAP32[16624] = $113;
HEAP32[16634] = $114;
return;
}
function __Z7FourBarRK6VectorS1_S1_S1_S1_fffRS_S2_R10QuaternionS4_S4_S4_S4_Rf($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = Math_fround($5);
$6 = Math_fround($6);
$7 = Math_fround($7);
$8 = $8 | 0;
$9 = $9 | 0;
$10 = $10 | 0;
$11 = $11 | 0;
$12 = $12 | 0;
$13 = $13 | 0;
$14 = $14 | 0;
$15 = $15 | 0;
var $23 = f0, $25 = f0, $27 = f0, $30 = f0, $32 = f0, $35 = f0, $36 = f0, $37 = f0, $47 = 0, $48 = f0, $50 = f0, $51 = f0, $52 = 0, $53 = f0, $55 = f0, $57 = f0, $58 = f0, $60 = f0, $62 = f0, $63 = 0, $64 = f0, $65 = f0, $67 = f0, $74 = f0, $81 = f0, $89 = f0, $vararg_buffer11 = 0, $vararg_buffer27 = 0, $vararg_buffer31 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 208 | 0;
$vararg_buffer31 = sp + 168 | 0;
$vararg_buffer27 = sp + 144 | 0;
$vararg_buffer11 = sp + 64 | 0;
$vararg_buffer7 = sp + 40 | 0;
$vararg_buffer5 = sp + 24 | 0;
__Z7eprintfPKcz(11430, sp);
__ZNK6Vector5printEP8_IO_FILEi($0, HEAP32[16082] | 0, 6);
__Z7eprintfPKcz(11443, sp + 8 | 0);
__ZNK6Vector5printEP8_IO_FILEi($1, HEAP32[16082] | 0, 6);
__Z7eprintfPKcz(11449, sp + 16 | 0);
__ZNK6Vector5printEP8_IO_FILEi($2, HEAP32[16082] | 0, 6);
__Z7eprintfPKcz(11464, $vararg_buffer5);
__ZNK6Vector5printEP8_IO_FILEi($3, HEAP32[16082] | 0, 6);
HEAPF64[$vararg_buffer7 >> 3] = +$5;
HEAPF64[$vararg_buffer7 + 8 >> 3] = +$6;
HEAPF64[$vararg_buffer7 + 16 >> 3] = +$7;
__Z7eprintfPKcz(11470, $vararg_buffer7);
__ZN10QuaternionC2ERK6Vectorfb($vararg_buffer7, 64540, $5, 1);
__ZN6VectorC2Efff($vararg_buffer5, $6, Math_fround(0.0), $7);
__ZL15TransformOneLegRK6VectorS1_S1_RK10QuaternionS1_RS_RS2_S6_($0, $2, $4, $vararg_buffer7, $vararg_buffer5, $8, $10, $12);
__ZL15TransformOneLegRK6VectorS1_S1_RK10QuaternionS1_RS_RS2_S6_($1, $3, $4, $vararg_buffer7, $vararg_buffer5, $9, $11, $13);
$23 = Math_fround(__ZNK6Vector8distanceERKS_($3, $2));
$25 = Math_fround(Math_fround(__ZNK6Vector8distanceERKS_($9, $8)) - $23);
HEAPF32[$15 >> 2] = $25;
$27 = Math_fround(HEAPF32[$8 + 4 >> 2]);
$30 = Math_fround($27 - Math_fround(HEAPF32[$2 + 4 >> 2]));
$32 = Math_fround(HEAPF32[$9 + 4 >> 2]);
$35 = Math_fround($32 - Math_fround(HEAPF32[$3 + 4 >> 2]));
$36 = Math_fround($30 - $35);
$37 = Math_fround(+Math_atan2(+$36, +$23));
HEAPF64[$vararg_buffer11 >> 3] = +$30;
HEAPF64[$vararg_buffer11 + 8 >> 3] = +$35;
HEAPF64[$vararg_buffer11 + 16 >> 3] = +$25;
HEAPF64[$vararg_buffer11 + 24 >> 3] = +$37;
HEAPF64[$vararg_buffer11 + 32 >> 3] = +$36;
HEAPF64[$vararg_buffer11 + 40 >> 3] = +$23;
__Z7eprintfPKcz(11502, $vararg_buffer11);
__ZN10Quaternion15setFromVecAngleERK6Vectorfb($14, 64552, $37, 1);
__ZN10Quaternion13setPreComposeERKS_($14, $vararg_buffer7);
__Z7eprintfPKcz(11553, sp + 112 | 0);
__ZN10Quaternion5printEP8_IO_FILEi($14, HEAP32[16082] | 0, 6);
__Z5eputcc(10);
__ZN10Quaternion16setPreInvComposeERKS_($12, $14);
__Z7eprintfPKcz(11564, sp + 120 | 0);
__ZN10Quaternion5printEP8_IO_FILEi($12, HEAP32[16082] | 0, 6);
__Z5eputcc(10);
__Z7eprintfPKcz(11582, sp + 128 | 0);
__ZN10Quaternion5printEP8_IO_FILEi($10, HEAP32[16082] | 0, 6);
__Z5eputcc(10);
$47 = $13 + 4 | 0;
$48 = Math_fround(HEAPF32[$47 >> 2]);
$50 = Math_fround(HEAPF32[$14 + 8 >> 2]);
$51 = Math_fround($48 * $50);
$52 = $13 + 8 | 0;
$53 = Math_fround(HEAPF32[$52 >> 2]);
$55 = Math_fround(HEAPF32[$14 + 4 >> 2]);
$57 = Math_fround($51 - Math_fround($53 * $55));
$58 = Math_fround(HEAPF32[$13 >> 2]);
$60 = Math_fround(HEAPF32[$14 + 12 >> 2]);
$62 = Math_fround($57 + Math_fround($58 * $60));
$63 = $13 + 12 | 0;
$64 = Math_fround(HEAPF32[$63 >> 2]);
$65 = Math_fround(HEAPF32[$14 >> 2]);
$67 = Math_fround($62 + Math_fround($64 * $65));
$74 = Math_fround(Math_fround($55 * $64) + Math_fround(Math_fround($48 * $60) + Math_fround(Math_fround($53 * $65) - Math_fround($50 * $58))));
$81 = Math_fround(Math_fround($50 * $64) + Math_fround(Math_fround($53 * $60) + Math_fround(Math_fround($55 * $58) - Math_fround($48 * $65))));
$89 = Math_fround(Math_fround($60 * $64) + Math_fround(Math_fround(Math_fround(-Math_fround($58 * $65)) - Math_fround($48 * $55)) - Math_fround($50 * $53)));
HEAPF32[$13 >> 2] = $67;
HEAPF32[$47 >> 2] = $74;
HEAPF32[$52 >> 2] = $81;
HEAPF32[$63 >> 2] = $89;
__Z7eprintfPKcz(11596, sp + 136 | 0);
__ZN10Quaternion5printEP8_IO_FILEi($13, HEAP32[16082] | 0, 6);
__Z5eputcc(10);
__Z7eprintfPKcz(11615, $vararg_buffer27);
__ZN10Quaternion5printEP8_IO_FILEi($11, HEAP32[16082] | 0, 6);
__Z5eputcc(10);
__ZN6VectorC2Ev($vararg_buffer27);
__ZN6Vector7setFromERKS_($vararg_buffer27, $2);
__ZNK10Quaternion26invRotateVectorAboutCentreERK6VectorRS0_($10, $0, $vararg_buffer27);
__Z7eprintfPKcz(11630, sp + 160 | 0);
__ZNK6Vector5printEP8_IO_FILEi($vararg_buffer27, HEAP32[16082] | 0, 6);
__Z5eputcc(10);
__Z7eprintfPKcz(11644, $vararg_buffer31);
__ZNK6Vector5printEP8_IO_FILEi($8, HEAP32[16082] | 0, 6);
__Z5eputcc(10);
__ZN6VectorC2Ev($vararg_buffer31);
__ZN6Vector7setFromERKS_($vararg_buffer31, $3);
__ZNK10Quaternion26invRotateVectorAboutCentreERK6VectorRS0_($11, $1, $vararg_buffer31);
__Z7eprintfPKcz(11656, sp + 184 | 0);
__ZNK6Vector5printEP8_IO_FILEi($vararg_buffer31, HEAP32[16082] | 0, 6);
__Z5eputcc(10);
__Z7eprintfPKcz(11671, sp + 192 | 0);
__ZNK6Vector5printEP8_IO_FILEi($9, HEAP32[16082] | 0, 6);
__Z5eputcc(10);
STACKTOP = sp;
return;
}
function __ZN18FingerPlayMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$$1$1$i = 0, $$$1$1$i27 = 0, $$$i = 0, $$$i13 = 0, $$1$1$i = 0, $$1$1$i20 = 0, $$1$3$i = 0, $$1$3$i34 = 0, $$2$i = 0, $$2$i39 = 0, $$sroa$0$0$copyload$1$i = f0, $$sroa$0$0$copyload$1$i15 = f0, $$sroa$0$0$copyload$2$i = f0, $$sroa$0$0$copyload$2$i22 = f0, $$sroa$0$0$copyload$3$i = f0, $$sroa$0$0$copyload$3$i29 = f0, $$sroa$0$0$copyload$i = f0, $$sroa$0$0$copyload$i8 = f0, $$sroa$2$0$copyload$1$i = f0, $$sroa$2$0$copyload$1$i17 = f0, $$sroa$2$0$copyload$2$i = f0, $$sroa$2$0$copyload$2$i24 = f0, $$sroa$2$0$copyload$3$i = f0, $$sroa$2$0$copyload$3$i31 = f0, $$sroa$2$0$copyload$i = f0, $$sroa$2$0$copyload$i10 = f0, $11 = f0, $12 = 0, $14 = f0, $18 = 0, $20 = 0, $24 = 0, $30 = 0, $35 = 0, $41 = 0, $47 = 0, $61 = 0, $67 = 0, $72 = 0, $78 = 0, $8 = f0, $84 = 0, $vararg_buffer1 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
__ZN13BasicMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture($0, $1, $2);
if (0) __Z7eprintfPKcz(38853, sp);
HEAP32[$0 + 536 >> 2] = HEAP32[16334];
HEAP32[$0 + 540 >> 2] = HEAP32[16335];
$8 = Math_fround(HEAPF32[16336]);
HEAPF32[$0 + 544 >> 2] = $8;
$11 = Math_fround($8 * Math_fround(HEAPF32[16337]));
$12 = $0 + 40 | 0;
$14 = Math_fround(Math_fround(HEAPF32[$12 >> 2]) * $11);
HEAPF32[$12 >> 2] = $14;
$18 = (HEAP8[$1 + 13 >> 0] & 64) != 0;
$20 = HEAP32[$0 + 8 >> 2] | 0;
switch ($20 | 0) {
case 3:
case 5:
{
$24 = HEAP32[($18 ? $2 : $2 + 72 | 0) + 56 >> 2] | 0;
do if (!$24) $$2$i39 = 0; else {
$$sroa$0$0$copyload$i8 = Math_fround(HEAPF32[$24 + 96 >> 2]);
$$sroa$2$0$copyload$i10 = Math_fround(HEAPF32[$24 + 100 >> 2]);
$30 = $$sroa$0$0$copyload$i8 > Math_fround(2.0) ? !(Math_fround(Math_fround($$sroa$0$0$copyload$i8 + $$sroa$2$0$copyload$i10) + Math_fround(HEAPF32[$24 + 104 >> 2])) > Math_fround(6.0)) : 1;
$$$i13 = $30 ? 2 : 0;
$$sroa$0$0$copyload$1$i15 = Math_fround(HEAPF32[$24 + 112 >> 2]);
$$sroa$2$0$copyload$1$i17 = Math_fround(HEAPF32[$24 + 116 >> 2]);
$35 = $$sroa$0$0$copyload$1$i15 > Math_fround(2.0) ? !(Math_fround(Math_fround($$sroa$0$0$copyload$1$i15 + $$sroa$2$0$copyload$1$i17) + Math_fround(HEAPF32[$24 + 120 >> 2])) > Math_fround(6.0)) : 1;
$$1$1$i20 = $35 ? $$$i13 | 4 : $$$i13;
$$sroa$0$0$copyload$2$i22 = Math_fround(HEAPF32[$24 + 128 >> 2]);
$$sroa$2$0$copyload$2$i24 = Math_fround(HEAPF32[$24 + 132 >> 2]);
$41 = $$sroa$0$0$copyload$2$i22 > Math_fround(2.0) ? !(Math_fround(Math_fround($$sroa$0$0$copyload$2$i22 + $$sroa$2$0$copyload$2$i24) + Math_fround(HEAPF32[$24 + 136 >> 2])) > Math_fround(6.0)) : 1;
$$$1$1$i27 = $41 ? $$1$1$i20 | 8 : $$1$1$i20;
$$sroa$0$0$copyload$3$i29 = Math_fround(HEAPF32[$24 + 144 >> 2]);
$$sroa$2$0$copyload$3$i31 = Math_fround(HEAPF32[$24 + 148 >> 2]);
$47 = $$sroa$0$0$copyload$3$i29 > Math_fround(2.0) ? !(Math_fround(Math_fround($$sroa$0$0$copyload$3$i29 + $$sroa$2$0$copyload$3$i31) + Math_fround(HEAPF32[$24 + 152 >> 2])) > Math_fround(6.0)) : 1;
$$1$3$i34 = $47 ? $$$1$1$i27 | 16 : $$$1$1$i27;
if (((HEAP32[$24 >> 2] | 0) + -7 | 0) >>> 0 >= 6) if ((HEAP32[$24 + 28 >> 2] | 0) != 4) {
$$2$i39 = $$1$3$i34;
break;
}
$$2$i39 = $$1$3$i34 | 1;
} while (0);
HEAP16[$0 + 550 >> 1] = $$2$i39;
break;
}
default:
{}
}
if (($20 | 1 | 0) == 5) {
$61 = HEAP32[($18 ? $2 + 72 | 0 : $2) + 56 >> 2] | 0;
do if (!$61) $$2$i = 0; else {
$$sroa$0$0$copyload$i = Math_fround(HEAPF32[$61 + 96 >> 2]);
$$sroa$2$0$copyload$i = Math_fround(HEAPF32[$61 + 100 >> 2]);
$67 = $$sroa$0$0$copyload$i > Math_fround(2.0) ? !(Math_fround(Math_fround($$sroa$0$0$copyload$i + $$sroa$2$0$copyload$i) + Math_fround(HEAPF32[$61 + 104 >> 2])) > Math_fround(6.0)) : 1;
$$$i = $67 ? 2 : 0;
$$sroa$0$0$copyload$1$i = Math_fround(HEAPF32[$61 + 112 >> 2]);
$$sroa$2$0$copyload$1$i = Math_fround(HEAPF32[$61 + 116 >> 2]);
$72 = $$sroa$0$0$copyload$1$i > Math_fround(2.0) ? !(Math_fround(Math_fround($$sroa$0$0$copyload$1$i + $$sroa$2$0$copyload$1$i) + Math_fround(HEAPF32[$61 + 120 >> 2])) > Math_fround(6.0)) : 1;
$$1$1$i = $72 ? $$$i | 4 : $$$i;
$$sroa$0$0$copyload$2$i = Math_fround(HEAPF32[$61 + 128 >> 2]);
$$sroa$2$0$copyload$2$i = Math_fround(HEAPF32[$61 + 132 >> 2]);
$78 = $$sroa$0$0$copyload$2$i > Math_fround(2.0) ? !(Math_fround(Math_fround($$sroa$0$0$copyload$2$i + $$sroa$2$0$copyload$2$i) + Math_fround(HEAPF32[$61 + 136 >> 2])) > Math_fround(6.0)) : 1;
$$$1$1$i = $78 ? $$1$1$i | 8 : $$1$1$i;
$$sroa$0$0$copyload$3$i = Math_fround(HEAPF32[$61 + 144 >> 2]);
$$sroa$2$0$copyload$3$i = Math_fround(HEAPF32[$61 + 148 >> 2]);
$84 = $$sroa$0$0$copyload$3$i > Math_fround(2.0) ? !(Math_fround(Math_fround($$sroa$0$0$copyload$3$i + $$sroa$2$0$copyload$3$i) + Math_fround(HEAPF32[$61 + 152 >> 2])) > Math_fround(6.0)) : 1;
$$1$3$i = $84 ? $$$1$1$i | 16 : $$$1$1$i;
if (((HEAP32[$61 >> 2] | 0) + -7 | 0) >>> 0 >= 6) if ((HEAP32[$61 + 28 >> 2] | 0) != 4) {
$$2$i = $$1$3$i;
break;
}
$$2$i = $$1$3$i | 1;
} while (0);
HEAP16[$0 + 548 >> 1] = $$2$i;
}
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$0 >> 2] | 0) + 68 >> 2] & 255]($0);
if (!0) {
STACKTOP = sp;
return;
}
__Z7eprintfPKcz(38871, $vararg_buffer1);
STACKTOP = sp;
return;
}
function __ZN18HandJointRotations19interpolateHandrotsEPKS_S1_PKf($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $101 = f0, $103 = 0, $116 = f0, $124 = f0, $132 = f0, $140 = f0, $148 = f0, $22 = f0, $30 = f0, $38 = f0, $4 = 0, $46 = f0, $5 = 0, $54 = f0, $56 = 0, $69 = f0, $7 = 0, $77 = f0, $85 = f0, $9 = 0, $93 = f0, $indvars$iv = 0;
$4 = ($1 | 0) == 0;
if ($4) __Z3diePKc(32317);
$5 = ($2 | 0) == 0;
if ($5) __Z3diePKc(32372);
if ($4) __Z3diePKc(32427);
if ($5) __Z3diePKc(32493);
if (($1 | 0) == ($2 | 0)) {
__ZN18HandJointRotations7setFromEPKS_($0, $1);
$indvars$iv = 0;
} else $indvars$iv = 0;
do {
$7 = $3 + ($indvars$iv << 2) | 0;
$9 = HEAP32[$0 + ($indvars$iv * 12 | 0) >> 2] | 0;
L17 : do if ($9 | 0) switch (HEAP32[(HEAP32[$9 + 4 >> 2] | 0) + 24 >> 2] | 0) {
case 5:
{
$22 = Math_fround(HEAPF32[$7 >> 2]);
FUNCTION_TABLE_viiif[HEAP32[(HEAP32[$9 >> 2] | 0) + 80 >> 2] & 7]($9, HEAP32[$1 + ($indvars$iv * 12 | 0) >> 2] | 0, HEAP32[$2 + ($indvars$iv * 12 | 0) >> 2] | 0, $22);
break L17;
break;
}
case 2:
{
$30 = Math_fround(HEAPF32[$7 >> 2]);
FUNCTION_TABLE_viiif[HEAP32[(HEAP32[$9 >> 2] | 0) + 80 >> 2] & 7]($9, HEAP32[$1 + ($indvars$iv * 12 | 0) >> 2] | 0, HEAP32[$2 + ($indvars$iv * 12 | 0) >> 2] | 0, $30);
break L17;
break;
}
case 3:
{
$38 = Math_fround(HEAPF32[$7 >> 2]);
FUNCTION_TABLE_viiif[HEAP32[(HEAP32[$9 >> 2] | 0) + 80 >> 2] & 7]($9, HEAP32[$1 + ($indvars$iv * 12 | 0) >> 2] | 0, HEAP32[$2 + ($indvars$iv * 12 | 0) >> 2] | 0, $38);
break L17;
break;
}
case 4:
{
$46 = Math_fround(HEAPF32[$7 >> 2]);
FUNCTION_TABLE_viiif[HEAP32[(HEAP32[$9 >> 2] | 0) + 80 >> 2] & 7]($9, HEAP32[$1 + ($indvars$iv * 12 | 0) >> 2] | 0, HEAP32[$2 + ($indvars$iv * 12 | 0) >> 2] | 0, $46);
break L17;
break;
}
case 1:
{
$54 = Math_fround(HEAPF32[$7 >> 2]);
FUNCTION_TABLE_viiif[HEAP32[(HEAP32[$9 >> 2] | 0) + 80 >> 2] & 7]($9, HEAP32[$1 + ($indvars$iv * 12 | 0) >> 2] | 0, HEAP32[$2 + ($indvars$iv * 12 | 0) >> 2] | 0, $54);
break L17;
break;
}
default:
break L17;
} while (0);
$56 = HEAP32[$0 + ($indvars$iv * 12 | 0) + 4 >> 2] | 0;
L26 : do if ($56 | 0) switch (HEAP32[(HEAP32[$56 + 4 >> 2] | 0) + 24 >> 2] | 0) {
case 5:
{
$101 = Math_fround(HEAPF32[$7 >> 2]);
FUNCTION_TABLE_viiif[HEAP32[(HEAP32[$56 >> 2] | 0) + 80 >> 2] & 7]($56, HEAP32[$1 + ($indvars$iv * 12 | 0) + 4 >> 2] | 0, HEAP32[$2 + ($indvars$iv * 12 | 0) + 4 >> 2] | 0, $101);
break L26;
break;
}
case 2:
{
$93 = Math_fround(HEAPF32[$7 >> 2]);
FUNCTION_TABLE_viiif[HEAP32[(HEAP32[$56 >> 2] | 0) + 80 >> 2] & 7]($56, HEAP32[$1 + ($indvars$iv * 12 | 0) + 4 >> 2] | 0, HEAP32[$2 + ($indvars$iv * 12 | 0) + 4 >> 2] | 0, $93);
break L26;
break;
}
case 3:
{
$85 = Math_fround(HEAPF32[$7 >> 2]);
FUNCTION_TABLE_viiif[HEAP32[(HEAP32[$56 >> 2] | 0) + 80 >> 2] & 7]($56, HEAP32[$1 + ($indvars$iv * 12 | 0) + 4 >> 2] | 0, HEAP32[$2 + ($indvars$iv * 12 | 0) + 4 >> 2] | 0, $85);
break L26;
break;
}
case 4:
{
$77 = Math_fround(HEAPF32[$7 >> 2]);
FUNCTION_TABLE_viiif[HEAP32[(HEAP32[$56 >> 2] | 0) + 80 >> 2] & 7]($56, HEAP32[$1 + ($indvars$iv * 12 | 0) + 4 >> 2] | 0, HEAP32[$2 + ($indvars$iv * 12 | 0) + 4 >> 2] | 0, $77);
break L26;
break;
}
case 1:
{
$69 = Math_fround(HEAPF32[$7 >> 2]);
FUNCTION_TABLE_viiif[HEAP32[(HEAP32[$56 >> 2] | 0) + 80 >> 2] & 7]($56, HEAP32[$1 + ($indvars$iv * 12 | 0) + 4 >> 2] | 0, HEAP32[$2 + ($indvars$iv * 12 | 0) + 4 >> 2] | 0, $69);
break L26;
break;
}
default:
break L26;
} while (0);
$103 = HEAP32[$0 + ($indvars$iv * 12 | 0) + 8 >> 2] | 0;
L35 : do if ($103 | 0) switch (HEAP32[(HEAP32[$103 + 4 >> 2] | 0) + 24 >> 2] | 0) {
case 5:
{
$148 = Math_fround(HEAPF32[$7 >> 2]);
FUNCTION_TABLE_viiif[HEAP32[(HEAP32[$103 >> 2] | 0) + 80 >> 2] & 7]($103, HEAP32[$1 + ($indvars$iv * 12 | 0) + 8 >> 2] | 0, HEAP32[$2 + ($indvars$iv * 12 | 0) + 8 >> 2] | 0, $148);
break L35;
break;
}
case 2:
{
$140 = Math_fround(HEAPF32[$7 >> 2]);
FUNCTION_TABLE_viiif[HEAP32[(HEAP32[$103 >> 2] | 0) + 80 >> 2] & 7]($103, HEAP32[$1 + ($indvars$iv * 12 | 0) + 8 >> 2] | 0, HEAP32[$2 + ($indvars$iv * 12 | 0) + 8 >> 2] | 0, $140);
break L35;
break;
}
case 3:
{
$132 = Math_fround(HEAPF32[$7 >> 2]);
FUNCTION_TABLE_viiif[HEAP32[(HEAP32[$103 >> 2] | 0) + 80 >> 2] & 7]($103, HEAP32[$1 + ($indvars$iv * 12 | 0) + 8 >> 2] | 0, HEAP32[$2 + ($indvars$iv * 12 | 0) + 8 >> 2] | 0, $132);
break L35;
break;
}
case 4:
{
$124 = Math_fround(HEAPF32[$7 >> 2]);
FUNCTION_TABLE_viiif[HEAP32[(HEAP32[$103 >> 2] | 0) + 80 >> 2] & 7]($103, HEAP32[$1 + ($indvars$iv * 12 | 0) + 8 >> 2] | 0, HEAP32[$2 + ($indvars$iv * 12 | 0) + 8 >> 2] | 0, $124);
break L35;
break;
}
case 1:
{
$116 = Math_fround(HEAPF32[$7 >> 2]);
FUNCTION_TABLE_viiif[HEAP32[(HEAP32[$103 >> 2] | 0) + 80 >> 2] & 7]($103, HEAP32[$1 + ($indvars$iv * 12 | 0) + 8 >> 2] | 0, HEAP32[$2 + ($indvars$iv * 12 | 0) + 8 >> 2] | 0, $116);
break L35;
break;
}
default:
break L35;
} while (0);
$indvars$iv = $indvars$iv + 1 | 0;
} while (($indvars$iv | 0) != 5);
return;
}
function __ZN14RepeatMovement18propagateHandStuffER12TwoHandStuffR20ArmHandConstellation($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $10 = 0, $104 = 0, $106 = 0, $110 = 0, $117 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $129 = 0, $130 = 0, $131 = 0, $136 = 0, $137 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $77 = 0, $8 = 0, $80 = 0, $82 = 0, $83 = 0, $85 = 0, $89 = 0, $9 = 0, $91 = 0, $92 = 0, $93 = 0, $98 = 0, $99 = 0, dest = 0, sp = 0, src = 0, stop = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 160 | 0;
$3 = sp + 72 | 0;
$4 = sp;
$5 = $1 + 20 | 0;
$6 = $0 + 100 | 0;
HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
HEAP32[$6 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
HEAP32[$6 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
HEAP32[$6 + 12 >> 2] = HEAP32[$5 + 12 >> 2];
$7 = $1 + 64 | 0;
$8 = $0 + 212 | 0;
HEAP32[$8 >> 2] = HEAP32[$7 >> 2];
HEAP32[$8 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
HEAP32[$8 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
HEAP32[$8 + 12 >> 2] = HEAP32[$7 + 12 >> 2];
$9 = $1 + 36 | 0;
$10 = HEAP32[$9 >> 2] | 0;
if (!$10) $15 = 0; else $15 = HEAP32[$10 + 236 >> 2] | 0;
HEAP32[$0 + 116 >> 2] = $15;
$16 = $1 + 80 | 0;
$17 = HEAP32[$16 >> 2] | 0;
if (!$17) $22 = 0; else $22 = HEAP32[$17 + 236 >> 2] | 0;
HEAP32[$0 + 228 >> 2] = $22;
if (!(HEAP8[$0 + 570 >> 0] | 0)) {
$124 = $0 + 696 | 0;
$125 = HEAP32[$124 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$125 >> 2] | 0) + 24 >> 2] & 127]($125, $1, $2);
$129 = $0 + 324 | 0;
HEAP32[$129 >> 2] = HEAP32[$5 >> 2];
HEAP32[$129 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
HEAP32[$129 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
HEAP32[$129 + 12 >> 2] = HEAP32[$5 + 12 >> 2];
$130 = $0 + 436 | 0;
HEAP32[$130 >> 2] = HEAP32[$7 >> 2];
HEAP32[$130 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
HEAP32[$130 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
HEAP32[$130 + 12 >> 2] = HEAP32[$7 + 12 >> 2];
$131 = HEAP32[$9 >> 2] | 0;
if (!$131) $136 = 0; else $136 = HEAP32[$131 + 236 >> 2] | 0;
HEAP32[$0 + 340 >> 2] = $136;
$137 = HEAP32[$16 >> 2] | 0;
if (!$137) $142 = 0; else $142 = HEAP32[$137 + 236 >> 2] | 0;
HEAP32[$0 + 452 >> 2] = $142;
$143 = HEAP32[$124 >> 2] | 0;
$144 = $143 + 508 | 0;
$145 = $0 + 508 | 0;
$146 = HEAPU8[$144 >> 0] | HEAPU8[$144 + 1 >> 0] << 8;
HEAP8[$145 >> 0] = $146;
HEAP8[$145 + 1 >> 0] = $146 >> 8;
$147 = $143 + 510 | 0;
$148 = $0 + 510 | 0;
$149 = HEAPU8[$147 >> 0] | HEAPU8[$147 + 1 >> 0] << 8;
HEAP8[$148 >> 0] = $149;
HEAP8[$148 + 1 >> 0] = $149 >> 8;
STACKTOP = sp;
return;
}
HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
HEAP32[$3 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[$3 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
HEAP32[$3 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
HEAP32[$3 + 20 >> 2] = HEAP32[$5 >> 2];
HEAP32[$3 + 24 >> 2] = HEAP32[$1 + 24 >> 2];
HEAP32[$3 + 28 >> 2] = HEAP32[$1 + 28 >> 2];
HEAP32[$3 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
$50 = $3 + 36 | 0;
HEAP32[$50 >> 2] = HEAP32[$9 >> 2];
HEAP8[$50 + 4 >> 0] = HEAP8[$9 + 4 >> 0] | 0;
HEAP32[$3 + 44 >> 2] = HEAP32[$1 + 44 >> 2];
HEAP32[$3 + 48 >> 2] = HEAP32[$1 + 48 >> 2];
HEAP32[$3 + 52 >> 2] = HEAP32[$1 + 52 >> 2];
HEAP32[$3 + 56 >> 2] = HEAP32[$1 + 56 >> 2];
HEAP32[$3 + 60 >> 2] = HEAP32[$1 + 60 >> 2];
HEAP32[$3 + 64 >> 2] = HEAP32[$7 >> 2];
HEAP32[$3 + 68 >> 2] = HEAP32[$1 + 68 >> 2];
HEAP32[$3 + 72 >> 2] = HEAP32[$1 + 72 >> 2];
HEAP32[$3 + 76 >> 2] = HEAP32[$1 + 76 >> 2];
$77 = $3 + 80 | 0;
HEAP32[$77 >> 2] = HEAP32[$16 >> 2];
HEAP8[$77 + 4 >> 0] = HEAP8[$16 + 4 >> 0] | 0;
dest = $4;
src = $2;
stop = dest + 48 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
__THREW__ = 0;
invoke_vii(120, $4 + 48 | 0, $2 + 48 | 0);
$80 = __THREW__;
__THREW__ = 0;
if ($80 & 1) {
$122 = ___cxa_find_matching_catch_2() | 0;
$123 = tempRet0;
___resumeException($122 | 0);
}
$82 = $4 + 60 | 0;
$83 = $2 + 60 | 0;
HEAP32[$82 >> 2] = HEAP32[$83 >> 2];
HEAP8[$82 + 4 >> 0] = HEAP8[$83 + 4 >> 0] | 0;
$85 = HEAP32[$0 + 696 >> 2] | 0;
__THREW__ = 0;
invoke_viii(HEAP32[(HEAP32[$85 >> 2] | 0) + 24 >> 2] | 0, $85 | 0, $3 | 0, $4 | 0);
$89 = __THREW__;
__THREW__ = 0;
if ($89 & 1) {
$122 = ___cxa_find_matching_catch_2() | 0;
$123 = tempRet0;
___resumeException($122 | 0);
}
$91 = $0 + 324 | 0;
HEAP32[$91 >> 2] = HEAP32[$5 >> 2];
HEAP32[$91 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
HEAP32[$91 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
HEAP32[$91 + 12 >> 2] = HEAP32[$5 + 12 >> 2];
$92 = $0 + 436 | 0;
HEAP32[$92 >> 2] = HEAP32[$7 >> 2];
HEAP32[$92 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
HEAP32[$92 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
HEAP32[$92 + 12 >> 2] = HEAP32[$7 + 12 >> 2];
$93 = HEAP32[$9 >> 2] | 0;
if (!$93) $98 = 0; else $98 = HEAP32[$93 + 236 >> 2] | 0;
HEAP32[$0 + 340 >> 2] = $98;
$99 = HEAP32[$16 >> 2] | 0;
if (!$99) $104 = 0; else $104 = HEAP32[$99 + 236 >> 2] | 0;
HEAP32[$0 + 452 >> 2] = $104;
$106 = HEAP32[$0 + 8 >> 2] | 0;
$110 = $0 + 508 | 0;
HEAP16[$110 >> 1] = HEAP16[$110 >> 1] & -2 | (($106 | 0) == 3 | ($106 | 0) == 5) & 1;
$117 = $0 + 510 | 0;
HEAP16[$117 >> 1] = HEAP16[$117 >> 1] & -2 | ($106 | 1 | 0) == 5;
STACKTOP = sp;
return;
}
function __ZN16CircularMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$sink$i = f0, $$sink$i26 = f0, $$sink2$i = 0, $$sink2$i25 = 0, $103 = 0, $105 = f0, $108 = f0, $110 = f0, $111 = f0, $114 = f0, $124 = 0, $125 = 0, $126 = 0, $127 = f0, $18 = 0, $21 = 0, $3 = 0, $36 = f0, $4 = 0, $43 = f0, $50 = f0, $51 = f0, $6 = 0, $65 = 0, $68 = 0, $7 = 0, $70 = f0, $73 = f0, $78 = f0, $81 = f0, $83 = f0, $90 = f0, $97 = f0, $98 = f0, $tmpcast$byval_copy = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$tmpcast$byval_copy = sp + 40 | 0;
$vararg_buffer7 = sp + 32 | 0;
$vararg_buffer5 = sp + 24 | 0;
$vararg_buffer3 = sp + 16 | 0;
$3 = sp + 38 | 0;
$4 = sp + 36 | 0;
__ZN13BasicMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture($0, $1, $2);
if (0) __Z7eprintfPKcz(38130, sp);
$6 = $0 + 40 | 0;
HEAPF32[$6 >> 2] = Math_fround(0.0);
$7 = $0 + 8 | 0;
switch (HEAP32[$7 >> 2] | 0) {
case 3:
case 5:
{
__Z7eprintfPKcz(38148, sp + 8 | 0);
if ((HEAP32[$7 >> 2] | 0) == 5) $18 = HEAP8[$1 + 13 >> 0] & 64 ? 72162 : $1 + 14 | 0; else $18 = 72162;
HEAP16[$3 >> 1] = HEAP16[$18 >> 1] | 0;
HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$3 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$3 + 1 >> 0] | 0;
__ZN16CircularMovement25setAvatarDependentValues1ER16OneHCircMoveSpecRK19OneHConcretePosture9Mirroring($0, $0 + 616 | 0, 0, $tmpcast$byval_copy);
__ZN6Vector6setAddERKS_($0 + 288 | 0, $0 + 664 | 0);
$21 = HEAP32[$1 >> 2] | 0;
$36 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$21 + 232 >> 2]) * Math_fround(HEAPF32[$21 + 236 >> 2])) * Math_fround(HEAPF32[65004 + (HEAP32[$0 + 552 >> 2] << 2) >> 2])) * Math_fround(HEAPF32[$0 + 680 >> 2])) / Math_fround(HEAPF32[589]));
if (!(HEAP8[72310] | 0)) {
$43 = Math_fround(HEAPF32[64724 + (HEAP32[$0 + 12 >> 2] << 2) >> 2]);
$$sink$i = Math_fround($43 * Math_fround(HEAPF32[64772 + (HEAP32[$0 + 24 >> 2] << 2) >> 2]));
$$sink2$i = 64792 + (HEAP32[$0 + 16 >> 2] << 2) | 0;
} else {
$$sink$i = Math_fround(HEAPF32[16184]);
$$sink2$i = 64800;
}
$50 = Math_fround($36 * Math_fround($$sink$i * Math_fround(HEAPF32[$$sink2$i >> 2])));
$51 = Math_fround(HEAPF32[$6 >> 2]);
if ($51 < $50) {
HEAPF32[$6 >> 2] = $50;
$127 = $50;
} else $127 = $51;
break;
}
default:
$127 = Math_fround(0.0);
}
if ((HEAP32[$7 >> 2] | 1 | 0) == 5) {
__Z7eprintfPKcz(38171, $vararg_buffer3);
if ((HEAP32[$7 >> 2] | 0) == 5) $65 = HEAP8[$1 + 13 >> 0] & 64 ? $1 + 14 | 0 : 72162; else $65 = 72162;
HEAP16[$4 >> 1] = HEAP16[$65 >> 1] | 0;
HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$4 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$4 + 1 >> 0] | 0;
__ZN16CircularMovement25setAvatarDependentValues1ER16OneHCircMoveSpecRK19OneHConcretePosture9Mirroring($0, $0 + 684 | 0, 0, $tmpcast$byval_copy);
__ZN6Vector6setAddERKS_($0 + 400 | 0, $0 + 732 | 0);
$68 = HEAP32[$1 >> 2] | 0;
$70 = Math_fround(HEAPF32[$68 + 232 >> 2]);
$73 = Math_fround($70 * Math_fround(HEAPF32[$68 + 236 >> 2]));
$78 = Math_fround($73 * Math_fround(HEAPF32[65004 + (HEAP32[$0 + 552 >> 2] << 2) >> 2]));
$81 = Math_fround($78 * Math_fround(HEAPF32[$0 + 748 >> 2]));
$83 = Math_fround($81 / Math_fround(HEAPF32[589]));
if (!(HEAP8[72310] | 0)) {
$90 = Math_fround(HEAPF32[64724 + (HEAP32[$0 + 12 >> 2] << 2) >> 2]);
$$sink$i26 = Math_fround($90 * Math_fround(HEAPF32[64772 + (HEAP32[$0 + 24 >> 2] << 2) >> 2]));
$$sink2$i25 = 64792 + (HEAP32[$0 + 16 >> 2] << 2) | 0;
} else {
$$sink$i26 = Math_fround(HEAPF32[16184]);
$$sink2$i25 = 64800;
}
$97 = Math_fround($83 * Math_fround($$sink$i26 * Math_fround(HEAPF32[$$sink2$i25 >> 2])));
$98 = Math_fround(HEAPF32[$6 >> 2]);
if ($98 < $97) {
HEAPF32[$6 >> 2] = $97;
$111 = $97;
} else $111 = $98;
} else $111 = $127;
if (!(HEAP8[$0 + 20 >> 0] | 0)) $114 = $111; else {
$103 = HEAP32[$1 >> 2] | 0;
$105 = Math_fround(HEAPF32[$103 + 268 >> 2]);
$108 = Math_fround($105 * Math_fround(HEAPF32[$103 + 232 >> 2]));
HEAPF32[$0 + 44 >> 2] = $108;
$110 = Math_fround($108 + $111);
HEAPF32[$6 >> 2] = $110;
$114 = $110;
}
if (0) {
HEAPF64[$vararg_buffer5 >> 3] = +$114;
__Z7eprintfPKcz(38193, $vararg_buffer5);
__ZNK25TwoHConcretePostureChange5printEP8_IO_FILE($0 + 60 | 0, HEAP32[16082] | 0);
}
if (!1) {
$124 = HEAP32[$0 >> 2] | 0;
$125 = $124 + 68 | 0;
$126 = HEAP32[$125 >> 2] | 0;
FUNCTION_TABLE_vi[$126 & 255]($0);
STACKTOP = sp;
return;
}
if (__ZNK19TwoHConcretePosture14totallyDefinedE12SET_OF_HANDS($0 + 284 | 0, HEAP32[$7 >> 2] | 0) | 0) {
$124 = HEAP32[$0 >> 2] | 0;
$125 = $124 + 68 | 0;
$126 = HEAP32[$125 >> 2] | 0;
FUNCTION_TABLE_vi[$126 & 255]($0);
STACKTOP = sp;
return;
}
__Z7LogTimev() | 0;
__Z7eprintfPKcz(38214, $vararg_buffer7);
__ZNK25TwoHConcretePostureChange19printFinalUndefinedEP8_IO_FILE12SET_OF_HANDS($0 + 60 | 0, HEAP32[16082] | 0, HEAP32[$7 >> 2] | 0);
$124 = HEAP32[$0 >> 2] | 0;
$125 = $124 + 68 | 0;
$126 = HEAP32[$125 >> 2] | 0;
FUNCTION_TABLE_vi[$126 & 255]($0);
STACKTOP = sp;
return;
}
function __ZNK16DirectedMovement5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $100 = 0, $19 = 0, $25 = 0, $4 = 0, $40 = 0, $46 = 0, $58 = 0, $64 = 0, $70 = 0, $76 = 0, $82 = 0, $88 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 80 | 0;
$vararg_buffer22 = sp + 64 | 0;
$vararg_buffer19 = sp + 56 | 0;
$vararg_buffer16 = sp + 48 | 0;
$vararg_buffer13 = sp + 40 | 0;
$vararg_buffer10 = sp + 32 | 0;
$vararg_buffer7 = sp + 24 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
HEAP32[$vararg_buffer >> 2] = $0;
_fprintf($1, 36845, $vararg_buffer) | 0;
__ZNK13BasicMovement5printEP8_IO_FILE($0, $1);
$4 = $0 + 528 | 0;
if (Math_fround(HEAPF32[$4 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 532 >> 2]) == Math_fround(0.0)) {
if (!(Math_fround(HEAPF32[$0 + 536 >> 2]) == Math_fround(0.0))) label = 5;
} else label = 5; else label = 5;
if ((label | 0) == 5) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(36867, 14, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK10Direction35printEP8_IO_FILE($4, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$19 = $0 + 540 | 0;
if (HEAP32[$19 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(36882, 9, 1, $1) | 0;
HEAP32[$vararg_buffer1 >> 2] = HEAP32[$19 >> 2];
_fprintf($1, 35092, $vararg_buffer1) | 0;
}
$25 = $0 + 544 | 0;
if (Math_fround(HEAPF32[$25 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 548 >> 2]) == Math_fround(0.0)) {
if (!(Math_fround(HEAPF32[$0 + 552 >> 2]) == Math_fround(0.0))) label = 11;
} else label = 11; else label = 11;
if ((label | 0) == 11) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(36892, 21, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK10Direction35printEP8_IO_FILE($25, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$40 = $0 + 556 | 0;
if (HEAP32[$40 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(36914, 16, 1, $1) | 0;
HEAP32[$vararg_buffer4 >> 2] = HEAP32[$40 >> 2];
_fprintf($1, 35092, $vararg_buffer4) | 0;
}
$46 = $0 + 560 | 0;
if (Math_fround(HEAPF32[$46 >> 2]) == Math_fround(0.0)) {
if (!(Math_fround(HEAPF32[$0 + 564 >> 2]) == Math_fround(0.0))) label = 16;
} else label = 16;
if ((label | 0) == 16) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(36931, 10, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK10Direction25printEP8_IO_FILE($46, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$58 = $0 + 568 | 0;
if (HEAP32[$58 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(36942, 15, 1, $1) | 0;
HEAP32[$vararg_buffer7 >> 2] = HEAP32[$58 >> 2];
_fprintf($1, 35092, $vararg_buffer7) | 0;
}
$64 = $0 + 572 | 0;
if (HEAP32[$64 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(36958, 17, 1, $1) | 0;
HEAP32[$vararg_buffer10 >> 2] = HEAP32[$64 >> 2];
_fprintf($1, 35092, $vararg_buffer10) | 0;
}
$70 = $0 + 576 | 0;
if (HEAP32[$70 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(36976, 16, 1, $1) | 0;
HEAP32[$vararg_buffer13 >> 2] = HEAP32[$70 >> 2];
_fprintf($1, 35092, $vararg_buffer13) | 0;
}
$76 = $0 + 580 | 0;
if (HEAP32[$76 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(36993, 20, 1, $1) | 0;
HEAP32[$vararg_buffer16 >> 2] = HEAP32[$76 >> 2];
_fprintf($1, 35092, $vararg_buffer16) | 0;
}
$82 = $0 + 584 | 0;
if (HEAP32[$82 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(37014, 25, 1, $1) | 0;
HEAP32[$vararg_buffer19 >> 2] = HEAP32[$82 >> 2];
_fprintf($1, 35092, $vararg_buffer19) | 0;
}
$88 = $0 + 588 | 0;
if (Math_fround(HEAPF32[$88 >> 2]) == Math_fround(0.0)) {
if (!(Math_fround(HEAPF32[$0 + 592 >> 2]) == Math_fround(0.0))) label = 29;
} else label = 29;
if ((label | 0) == 29) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(37040, 22, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK10Direction25printEP8_IO_FILE($88, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$100 = $0 + 596 | 0;
if (HEAP16[$100 >> 1] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(37063, 16, 1, $1) | 0;
HEAP32[$vararg_buffer22 >> 2] = HEAP16[$100 >> 1];
_fprintf($1, 35092, $vararg_buffer22) | 0;
}
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(37080, 16, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK15TwoHDirMoveSpec5printEP8_IO_FILE($0 + 600 | 0, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
STACKTOP = sp;
return;
}
function __ZN13BasicMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$sink$i = f0, $$sink2$i = 0, $102 = 0, $106 = 0, $14 = 0, $16 = 0, $23 = f0, $29 = f0, $3 = 0, $30 = 0, $32 = f0, $33 = 0, $37 = f0, $39 = f0, $41 = f0, $42 = 0, $43 = 0, $47 = 0, $48 = 0, $49 = 0, $54 = 0, $55 = f0, $56 = 0, $66 = 0, $70 = 0, $74 = 0, $98 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, dest = 0, sp = 0, src = 0, stop = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$3 = sp + 12 | 0;
if (!$2) {
if (!1) {
STACKTOP = sp;
return;
}
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 4 >> 2];
__Z7eprintfPKcz(36223, $vararg_buffer);
STACKTOP = sp;
return;
}
if (!(__ZNK19TwoHAbstractPosture16isTotallyDefinedE12SET_OF_HANDS($2, HEAP32[$0 + 8 >> 2] | 0) | 0 | 1 == 0)) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer1 >> 2] = HEAP32[$0 + 4 >> 2];
__Z7eprintfPKcz(36275, $vararg_buffer1);
$14 = HEAP32[16082] | 0;
__ZN19OneHAbstractPosture15reportUndefinedEP8_IO_FILEb($2, $14, 1);
__ZN19OneHAbstractPosture15reportUndefinedEP8_IO_FILEb($2 + 72 | 0, $14, 0);
}
$16 = HEAP32[$1 >> 2] | 0;
if (!(HEAP8[72310] | 0)) {
$23 = Math_fround(HEAPF32[64724 + (HEAP32[$0 + 12 >> 2] << 2) >> 2]);
$$sink$i = Math_fround($23 * Math_fround(HEAPF32[64772 + (HEAP32[$0 + 24 >> 2] << 2) >> 2]));
$$sink2$i = 64792 + (HEAP32[$0 + 16 >> 2] << 2) | 0;
} else {
$$sink$i = Math_fround(HEAPF32[16184]);
$$sink2$i = 64800;
}
$29 = Math_fround($$sink$i * Math_fround(HEAPF32[$$sink2$i >> 2]));
$30 = $16 + 232 | 0;
$32 = Math_fround($29 * Math_fround(HEAPF32[$30 >> 2]));
$33 = $0 + 40 | 0;
HEAPF32[$33 >> 2] = $32;
if (HEAP8[$0 + 20 >> 0] | 0) {
$37 = Math_fround(HEAPF32[$16 + 268 >> 2]);
$39 = Math_fround($37 * Math_fround(HEAPF32[$30 >> 2]));
HEAPF32[$0 + 44 >> 2] = $39;
$41 = Math_fround($39 + $32);
HEAPF32[$33 >> 2] = $41;
}
$42 = $2 + 4 | 0;
HEAP32[$3 >> 2] = HEAP32[$42 >> 2];
HEAP32[$3 + 4 >> 2] = HEAP32[$42 + 4 >> 2];
HEAP32[$3 + 8 >> 2] = HEAP32[$42 + 8 >> 2];
$43 = HEAP32[$3 >> 2] | 0;
if (!((HEAP32[16607] ^ $43) & 16777215)) {
$47 = $2 + 76 | 0;
HEAP32[$3 >> 2] = HEAP32[$47 >> 2];
HEAP32[$3 + 4 >> 2] = HEAP32[$47 + 4 >> 2];
HEAP32[$3 + 8 >> 2] = HEAP32[$47 + 8 >> 2];
} else if ((($43 & 255) + -1 | 0) >>> 0 < 11 | ($43 & 252 | 0) == 12) {
$54 = $2 + 76 | 0;
HEAP32[$3 >> 2] = HEAP32[$54 >> 2];
HEAP32[$3 + 4 >> 2] = HEAP32[$54 + 4 >> 2];
HEAP32[$3 + 8 >> 2] = HEAP32[$54 + 8 >> 2];
}
__THREW__ = 0;
$55 = Math_fround(+invoke_fii(1, $16 | 0, $3 | 0));
$56 = __THREW__;
__THREW__ = 0;
if ($56 & 1) {
$48 = ___cxa_find_matching_catch_2() | 0;
$49 = tempRet0;
___resumeException($48 | 0);
}
HEAPF32[$0 + 48 >> 2] = $55;
HEAP8[$0 + 33 >> 0] = (HEAPU8[$1 + 13 >> 0] | 0) >>> 4 & 1;
__THREW__ = 0;
invoke_vii(121, $0 + 288 | 0, $0 + 64 | 0);
$66 = __THREW__;
__THREW__ = 0;
if ($66 & 1) {
$48 = ___cxa_find_matching_catch_2() | 0;
$49 = tempRet0;
___resumeException($48 | 0);
}
__THREW__ = 0;
invoke_vii(121, $0 + 300 | 0, $0 + 76 | 0);
$70 = __THREW__;
__THREW__ = 0;
if ($70 & 1) {
$48 = ___cxa_find_matching_catch_2() | 0;
$49 = tempRet0;
___resumeException($48 | 0);
}
__THREW__ = 0;
invoke_vii(121, $0 + 312 | 0, $0 + 88 | 0);
$74 = __THREW__;
__THREW__ = 0;
if ($74 & 1) {
$48 = ___cxa_find_matching_catch_2() | 0;
$49 = tempRet0;
___resumeException($48 | 0);
}
HEAP32[$0 + 348 >> 2] = HEAP32[$0 + 124 >> 2];
HEAP32[$0 + 352 >> 2] = HEAP32[$0 + 128 >> 2];
dest = $0 + 360 | 0;
src = $0 + 136 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[$0 + 324 >> 2] = HEAP32[$0 + 100 >> 2];
HEAP32[$0 + 328 >> 2] = HEAP32[$0 + 104 >> 2];
HEAP32[$0 + 332 >> 2] = HEAP32[$0 + 108 >> 2];
HEAP32[$0 + 336 >> 2] = HEAP32[$0 + 112 >> 2];
__THREW__ = 0;
invoke_vii(121, $0 + 400 | 0, $0 + 176 | 0);
$98 = __THREW__;
__THREW__ = 0;
if ($98 & 1) {
$48 = ___cxa_find_matching_catch_2() | 0;
$49 = tempRet0;
___resumeException($48 | 0);
}
__THREW__ = 0;
invoke_vii(121, $0 + 412 | 0, $0 + 188 | 0);
$102 = __THREW__;
__THREW__ = 0;
if ($102 & 1) {
$48 = ___cxa_find_matching_catch_2() | 0;
$49 = tempRet0;
___resumeException($48 | 0);
}
__THREW__ = 0;
invoke_vii(121, $0 + 424 | 0, $0 + 200 | 0);
$106 = __THREW__;
__THREW__ = 0;
if ($106 & 1) {
$48 = ___cxa_find_matching_catch_2() | 0;
$49 = tempRet0;
___resumeException($48 | 0);
}
HEAP32[$0 + 460 >> 2] = HEAP32[$0 + 236 >> 2];
HEAP32[$0 + 464 >> 2] = HEAP32[$0 + 240 >> 2];
dest = $0 + 472 | 0;
src = $0 + 248 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[$0 + 436 >> 2] = HEAP32[$0 + 212 >> 2];
HEAP32[$0 + 440 >> 2] = HEAP32[$0 + 216 >> 2];
HEAP32[$0 + 444 >> 2] = HEAP32[$0 + 220 >> 2];
HEAP32[$0 + 448 >> 2] = HEAP32[$0 + 224 >> 2];
STACKTOP = sp;
return;
}
function __Z25InitialiseRepetitionSpecsv() {
var $1 = 0, $104 = f0, $105 = f0, $108 = f0, $111 = f0, $112 = 0, $114 = f0, $119 = f0, $120 = f0, $123 = f0, $126 = f0, $127 = 0, $129 = f0, $134 = f0, $135 = f0, $138 = f0, $14 = f0, $141 = f0, $15 = f0, $18 = f0, $2 = f0, $21 = f0, $22 = 0, $24 = f0, $29 = f0, $3 = f0, $30 = f0, $33 = f0, $36 = f0, $37 = 0, $39 = f0, $4 = f0, $44 = f0, $45 = f0, $48 = f0, $5 = f0, $51 = f0, $52 = 0, $54 = f0, $59 = f0, $6 = f0, $60 = f0, $63 = f0, $66 = f0, $67 = 0, $69 = f0, $7 = 0, $74 = f0, $75 = f0, $78 = f0, $81 = f0, $82 = 0, $84 = f0, $89 = f0, $9 = f0, $90 = f0, $93 = f0, $96 = f0, $97 = 0, $99 = f0;
$1 = __ZN7XMLCell7elementEPKc(HEAP32[16168] | 0, 24580) | 0;
$2 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($1, 24592, Math_fround(1.0)));
HEAPF32[458] = $2;
$3 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($1, 24612, Math_fround(.400000006)));
HEAPF32[16551] = $3;
$4 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($1, 24631, Math_fround(-.100000001)));
HEAPF32[16552] = $4;
$5 = Math_fround(HEAPF32[458]);
$6 = Math_fround(HEAPF32[16551]);
$7 = HEAP8[66216] | 0;
$9 = $7 << 24 >> 24 ? $4 : Math_fround(-1.0);
HEAPF32[16556] = $9;
if (!($7 << 24 >> 24)) $14 = HEAP8[66215] | 0 ? $5 : Math_fround(1.0); else $14 = $6;
HEAPF32[16555] = $14;
$15 = Math_fround($14 + Math_fround(1.0));
HEAPF32[16557] = $15;
$18 = Math_fround($15 * Math_fround(HEAP16[33106] | 0));
HEAPF32[16558] = $18;
if (!(HEAP8[66214] | 0)) {
$21 = Math_fround($18 - $14);
HEAPF32[16558] = $21;
}
$22 = HEAP8[66240] | 0;
$24 = $22 << 24 >> 24 ? $4 : Math_fround(-1.0);
HEAPF32[16562] = $24;
if (!($22 << 24 >> 24)) $29 = HEAP8[66239] | 0 ? $5 : Math_fround(1.0); else $29 = $6;
HEAPF32[16561] = $29;
$30 = Math_fround($29 + Math_fround(1.0));
HEAPF32[16563] = $30;
$33 = Math_fround($30 * Math_fround(HEAP16[33118] | 0));
HEAPF32[16564] = $33;
if (!(HEAP8[66238] | 0)) {
$36 = Math_fround($33 - $29);
HEAPF32[16564] = $36;
}
$37 = HEAP8[66264] | 0;
$39 = $37 << 24 >> 24 ? $4 : Math_fround(-1.0);
HEAPF32[16568] = $39;
if (!($37 << 24 >> 24)) $44 = HEAP8[66263] | 0 ? $5 : Math_fround(1.0); else $44 = $6;
HEAPF32[16567] = $44;
$45 = Math_fround($44 + Math_fround(1.0));
HEAPF32[16569] = $45;
$48 = Math_fround($45 * Math_fround(HEAP16[33130] | 0));
HEAPF32[16570] = $48;
if (!(HEAP8[66262] | 0)) {
$51 = Math_fround($48 - $44);
HEAPF32[16570] = $51;
}
$52 = HEAP8[66288] | 0;
$54 = $52 << 24 >> 24 ? $4 : Math_fround(-1.0);
HEAPF32[16574] = $54;
if (!($52 << 24 >> 24)) $59 = HEAP8[66287] | 0 ? $5 : Math_fround(1.0); else $59 = $6;
HEAPF32[16573] = $59;
$60 = Math_fround($59 + Math_fround(1.0));
HEAPF32[16575] = $60;
$63 = Math_fround($60 * Math_fround(HEAP16[33142] | 0));
HEAPF32[16576] = $63;
if (!(HEAP8[66286] | 0)) {
$66 = Math_fround($63 - $59);
HEAPF32[16576] = $66;
}
$67 = HEAP8[66312] | 0;
$69 = $67 << 24 >> 24 ? $4 : Math_fround(-1.0);
HEAPF32[16580] = $69;
if (!($67 << 24 >> 24)) $74 = HEAP8[66311] | 0 ? $5 : Math_fround(1.0); else $74 = $6;
HEAPF32[16579] = $74;
$75 = Math_fround($74 + Math_fround(1.0));
HEAPF32[16581] = $75;
$78 = Math_fround($75 * Math_fround(HEAP16[33154] | 0));
HEAPF32[16582] = $78;
if (!(HEAP8[66310] | 0)) {
$81 = Math_fround($78 - $74);
HEAPF32[16582] = $81;
}
$82 = HEAP8[66336] | 0;
$84 = $82 << 24 >> 24 ? $4 : Math_fround(-1.0);
HEAPF32[16586] = $84;
if (!($82 << 24 >> 24)) $89 = HEAP8[66335] | 0 ? $5 : Math_fround(1.0); else $89 = $6;
HEAPF32[16585] = $89;
$90 = Math_fround($89 + Math_fround(1.0));
HEAPF32[16587] = $90;
$93 = Math_fround($90 * Math_fround(HEAP16[33166] | 0));
HEAPF32[16588] = $93;
if (!(HEAP8[66334] | 0)) {
$96 = Math_fround($93 - $89);
HEAPF32[16588] = $96;
}
$97 = HEAP8[66360] | 0;
$99 = $97 << 24 >> 24 ? $4 : Math_fround(-1.0);
HEAPF32[16592] = $99;
if (!($97 << 24 >> 24)) $104 = HEAP8[66359] | 0 ? $5 : Math_fround(1.0); else $104 = $6;
HEAPF32[16591] = $104;
$105 = Math_fround($104 + Math_fround(1.0));
HEAPF32[16593] = $105;
$108 = Math_fround($105 * Math_fround(HEAP16[33178] | 0));
HEAPF32[16594] = $108;
if (!(HEAP8[66358] | 0)) {
$111 = Math_fround($108 - $104);
HEAPF32[16594] = $111;
}
$112 = HEAP8[66384] | 0;
$114 = $112 << 24 >> 24 ? $4 : Math_fround(-1.0);
HEAPF32[16598] = $114;
if (!($112 << 24 >> 24)) $119 = HEAP8[66383] | 0 ? $5 : Math_fround(1.0); else $119 = $6;
HEAPF32[16597] = $119;
$120 = Math_fround($119 + Math_fround(1.0));
HEAPF32[16599] = $120;
$123 = Math_fround($120 * Math_fround(HEAP16[33190] | 0));
HEAPF32[16600] = $123;
if (!(HEAP8[66382] | 0)) {
$126 = Math_fround($123 - $119);
HEAPF32[16600] = $126;
}
$127 = HEAP8[66408] | 0;
$129 = $127 << 24 >> 24 ? $4 : Math_fround(-1.0);
HEAPF32[16604] = $129;
if (!($127 << 24 >> 24)) $134 = HEAP8[66407] | 0 ? $5 : Math_fround(1.0); else $134 = $6;
HEAPF32[16603] = $134;
$135 = Math_fround($134 + Math_fround(1.0));
HEAPF32[16605] = $135;
$138 = Math_fround($135 * Math_fround(HEAP16[33202] | 0));
HEAPF32[16606] = $138;
if (HEAP8[66406] | 0) return;
$141 = Math_fround($138 - $134);
HEAPF32[16606] = $141;
return;
}
function __ZeqRK14SiGMLHandshapeS1_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $101 = f0, $106 = f0, $11 = f0, $111 = f0, $116 = f0, $120 = 0, $122 = f0, $127 = f0, $132 = f0, $137 = f0, $147 = f0, $152 = f0, $157 = f0, $16 = f0, $162 = f0, $172 = f0, $177 = f0, $182 = f0, $187 = f0, $192 = f0, $21 = f0, $26 = f0, $36 = f0, $41 = f0, $46 = f0, $51 = f0, $81 = f0, $86 = f0, $91 = f0, $96 = f0;
if ((HEAP32[$0 >> 2] | 0) != (HEAP32[$1 >> 2] | 0)) {
$120 = 0;
return $120 | 0;
}
if ((HEAP32[$0 + 8 >> 2] | 0) != (HEAP32[$1 + 8 >> 2] | 0)) {
$120 = 0;
return $120 | 0;
}
$11 = Math_fround(HEAPF32[$0 + 12 >> 2]);
if (!($11 == Math_fround(HEAPF32[$1 + 12 >> 2]))) {
$120 = 0;
return $120 | 0;
}
$16 = Math_fround(HEAPF32[$0 + 16 >> 2]);
if (!($16 == Math_fround(HEAPF32[$1 + 16 >> 2]))) {
$120 = 0;
return $120 | 0;
}
$21 = Math_fround(HEAPF32[$0 + 20 >> 2]);
if (!($21 == Math_fround(HEAPF32[$1 + 20 >> 2]))) {
$120 = 0;
return $120 | 0;
}
$26 = Math_fround(HEAPF32[$0 + 24 >> 2]);
if ($26 != Math_fround(HEAPF32[$1 + 24 >> 2])) {
$120 = 0;
return $120 | 0;
}
if ((HEAP32[$0 + 28 >> 2] | 0) != (HEAP32[$1 + 28 >> 2] | 0)) {
$120 = 0;
return $120 | 0;
}
$36 = Math_fround(HEAPF32[$0 + 32 >> 2]);
if (!($36 == Math_fround(HEAPF32[$1 + 32 >> 2]))) {
$120 = 0;
return $120 | 0;
}
$41 = Math_fround(HEAPF32[$0 + 36 >> 2]);
if (!($41 == Math_fround(HEAPF32[$1 + 36 >> 2]))) {
$120 = 0;
return $120 | 0;
}
$46 = Math_fround(HEAPF32[$0 + 40 >> 2]);
if (!($46 == Math_fround(HEAPF32[$1 + 40 >> 2]))) {
$120 = 0;
return $120 | 0;
}
$51 = Math_fround(HEAPF32[$0 + 44 >> 2]);
if ($51 != Math_fround(HEAPF32[$1 + 44 >> 2])) {
$120 = 0;
return $120 | 0;
}
if ((HEAP32[$0 + 48 >> 2] | 0) != (HEAP32[$1 + 48 >> 2] | 0)) {
$120 = 0;
return $120 | 0;
}
if ((HEAP16[$0 + 52 >> 1] | 0) != (HEAP16[$1 + 52 >> 1] | 0)) {
$120 = 0;
return $120 | 0;
}
if ((HEAP16[$0 + 54 >> 1] | 0) != (HEAP16[$1 + 54 >> 1] | 0)) {
$120 = 0;
return $120 | 0;
}
if ((HEAP32[$0 + 64 >> 2] | 0) != (HEAP32[$1 + 64 >> 2] | 0)) {
$120 = 0;
return $120 | 0;
}
$81 = Math_fround(HEAPF32[$0 + 96 >> 2]);
if (!($81 == Math_fround(HEAPF32[$1 + 96 >> 2]))) {
$120 = 0;
return $120 | 0;
}
$86 = Math_fround(HEAPF32[$0 + 100 >> 2]);
if (!($86 == Math_fround(HEAPF32[$1 + 100 >> 2]))) {
$120 = 0;
return $120 | 0;
}
$91 = Math_fround(HEAPF32[$0 + 104 >> 2]);
if (!($91 == Math_fround(HEAPF32[$1 + 104 >> 2]))) {
$120 = 0;
return $120 | 0;
}
$96 = Math_fround(HEAPF32[$0 + 108 >> 2]);
if ($96 != Math_fround(HEAPF32[$1 + 108 >> 2])) {
$120 = 0;
return $120 | 0;
}
if ((HEAP32[$0 + 68 >> 2] | 0) != (HEAP32[$1 + 68 >> 2] | 0)) {
$120 = 0;
return $120 | 0;
}
$122 = Math_fround(HEAPF32[$0 + 112 >> 2]);
if (!($122 == Math_fround(HEAPF32[$1 + 112 >> 2]))) {
$120 = 0;
return $120 | 0;
}
$127 = Math_fround(HEAPF32[$0 + 116 >> 2]);
if (!($127 == Math_fround(HEAPF32[$1 + 116 >> 2]))) {
$120 = 0;
return $120 | 0;
}
$132 = Math_fround(HEAPF32[$0 + 120 >> 2]);
if (!($132 == Math_fround(HEAPF32[$1 + 120 >> 2]))) {
$120 = 0;
return $120 | 0;
}
$137 = Math_fround(HEAPF32[$0 + 124 >> 2]);
if ($137 != Math_fround(HEAPF32[$1 + 124 >> 2])) {
$120 = 0;
return $120 | 0;
}
if ((HEAP32[$0 + 72 >> 2] | 0) != (HEAP32[$1 + 72 >> 2] | 0)) {
$120 = 0;
return $120 | 0;
}
$147 = Math_fround(HEAPF32[$0 + 128 >> 2]);
if (!($147 == Math_fround(HEAPF32[$1 + 128 >> 2]))) {
$120 = 0;
return $120 | 0;
}
$152 = Math_fround(HEAPF32[$0 + 132 >> 2]);
if (!($152 == Math_fround(HEAPF32[$1 + 132 >> 2]))) {
$120 = 0;
return $120 | 0;
}
$157 = Math_fround(HEAPF32[$0 + 136 >> 2]);
if (!($157 == Math_fround(HEAPF32[$1 + 136 >> 2]))) {
$120 = 0;
return $120 | 0;
}
$162 = Math_fround(HEAPF32[$0 + 140 >> 2]);
if ($162 != Math_fround(HEAPF32[$1 + 140 >> 2])) {
$120 = 0;
return $120 | 0;
}
if ((HEAP32[$0 + 76 >> 2] | 0) != (HEAP32[$1 + 76 >> 2] | 0)) {
$120 = 0;
return $120 | 0;
}
$172 = Math_fround(HEAPF32[$0 + 144 >> 2]);
if (!($172 == Math_fround(HEAPF32[$1 + 144 >> 2]))) {
$120 = 0;
return $120 | 0;
}
$177 = Math_fround(HEAPF32[$0 + 148 >> 2]);
if (!($177 == Math_fround(HEAPF32[$1 + 148 >> 2]))) {
$120 = 0;
return $120 | 0;
}
$182 = Math_fround(HEAPF32[$0 + 152 >> 2]);
if (!($182 == Math_fround(HEAPF32[$1 + 152 >> 2]))) {
$120 = 0;
return $120 | 0;
}
$187 = Math_fround(HEAPF32[$0 + 156 >> 2]);
if ($187 != Math_fround(HEAPF32[$1 + 156 >> 2])) {
$120 = 0;
return $120 | 0;
}
$192 = Math_fround(HEAPF32[$0 + 160 >> 2]);
do if ($192 == Math_fround(HEAPF32[$1 + 160 >> 2])) {
$101 = Math_fround(HEAPF32[$0 + 164 >> 2]);
if (!($101 == Math_fround(HEAPF32[$1 + 164 >> 2]))) break;
$106 = Math_fround(HEAPF32[$0 + 168 >> 2]);
if (!($106 == Math_fround(HEAPF32[$1 + 168 >> 2]))) break;
$111 = Math_fround(HEAPF32[$0 + 172 >> 2]);
if (!($111 == Math_fround(HEAPF32[$1 + 172 >> 2]))) break;
$116 = Math_fround(HEAPF32[$0 + 176 >> 2]);
if ($116 != Math_fround(HEAPF32[$1 + 176 >> 2])) break; else $120 = 1;
return $120 | 0;
} while (0);
$120 = 0;
return $120 | 0;
}
function __ZN5Joint16NewJointRotationEv($0) {
$0 = $0 | 0;
var $$0 = 0, $$05 = 0, $$06 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $41 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $70 = 0, $73 = 0, $8 = 0, $vararg_buffer = 0, dest = 0, sp = 0, src = 0, stop = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
__ZN5Joint16InitArticulationEv($0);
$2 = HEAP32[$0 + 24 >> 2] | 0;
switch ($2 | 0) {
case 5:
{
$3 = __Znwj(24) | 0;
$5 = HEAP32[$0 + 36 >> 2] | 0;
$6 = $3 + 4 | 0;
HEAP32[$6 >> 2] = 0;
HEAP32[$3 >> 2] = 1032;
$7 = $3 + 8 | 0;
__THREW__ = 0;
invoke_vi(98, $7 | 0);
$8 = __THREW__;
__THREW__ = 0;
if ($8 & 1) {
$13 = ___cxa_find_matching_catch_2() | 0;
$14 = tempRet0;
__ZdlPv($3);
$$0 = $14;
$$05 = $13;
___resumeException($$05 | 0);
} else {
HEAP32[$6 >> 2] = HEAP32[$5 + 4 >> 2];
$12 = $5 + 8 | 0;
HEAP32[$7 >> 2] = HEAP32[$12 >> 2];
HEAP32[$7 + 4 >> 2] = HEAP32[$12 + 4 >> 2];
HEAP32[$7 + 8 >> 2] = HEAP32[$12 + 8 >> 2];
HEAP32[$7 + 12 >> 2] = HEAP32[$12 + 12 >> 2];
$$06 = $3;
STACKTOP = sp;
return $$06 | 0;
}
break;
}
case 2:
{
$15 = __Znwj(40) | 0;
$17 = HEAP32[$0 + 36 >> 2] | 0;
$18 = $15 + 4 | 0;
HEAP32[$18 >> 2] = 0;
HEAP32[$15 >> 2] = 1124;
$19 = $15 + 8 | 0;
__THREW__ = 0;
invoke_vi(98, $19 | 0);
$20 = __THREW__;
__THREW__ = 0;
if (!($20 & 1)) {
__THREW__ = 0;
invoke_vi(98, $15 + 20 | 0);
$23 = __THREW__;
__THREW__ = 0;
if (!($23 & 1)) {
HEAP32[$18 >> 2] = HEAP32[$17 + 4 >> 2];
$27 = $17 + 8 | 0;
HEAP32[$19 >> 2] = HEAP32[$27 >> 2];
HEAP32[$19 + 4 >> 2] = HEAP32[$27 + 4 >> 2];
HEAP32[$19 + 8 >> 2] = HEAP32[$27 + 8 >> 2];
HEAP32[$19 + 12 >> 2] = HEAP32[$27 + 12 >> 2];
HEAP32[$19 + 16 >> 2] = HEAP32[$27 + 16 >> 2];
HEAP32[$19 + 20 >> 2] = HEAP32[$27 + 20 >> 2];
HEAP32[$19 + 24 >> 2] = HEAP32[$27 + 24 >> 2];
HEAP32[$19 + 28 >> 2] = HEAP32[$27 + 28 >> 2];
$$06 = $15;
STACKTOP = sp;
return $$06 | 0;
}
}
$28 = ___cxa_find_matching_catch_2() | 0;
$29 = tempRet0;
__ZdlPv($15);
$$0 = $29;
$$05 = $28;
___resumeException($$05 | 0);
break;
}
case 3:
{
$30 = __Znwj(72) | 0;
$32 = HEAP32[$0 + 36 >> 2] | 0;
$33 = $30 + 4 | 0;
HEAP32[$33 >> 2] = 0;
HEAP32[$30 >> 2] = 1216;
$34 = $30 + 8 | 0;
__THREW__ = 0;
invoke_vi(98, $34 | 0);
$35 = __THREW__;
__THREW__ = 0;
if (!($35 & 1)) {
__THREW__ = 0;
invoke_vi(98, $30 + 20 | 0);
$38 = __THREW__;
__THREW__ = 0;
if (!($38 & 1)) {
__THREW__ = 0;
invoke_vi(98, $30 + 32 | 0);
$41 = __THREW__;
__THREW__ = 0;
if (!($41 & 1)) {
HEAP32[$33 >> 2] = HEAP32[$32 + 4 >> 2];
dest = $34;
src = $32 + 8 | 0;
stop = dest + 64 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
$$06 = $30;
STACKTOP = sp;
return $$06 | 0;
}
}
}
$46 = ___cxa_find_matching_catch_2() | 0;
$47 = tempRet0;
__ZdlPv($30);
$$0 = $47;
$$05 = $46;
___resumeException($$05 | 0);
break;
}
case 4:
{
$48 = __Znwj(68) | 0;
$50 = HEAP32[$0 + 36 >> 2] | 0;
$51 = $48 + 4 | 0;
HEAP32[$51 >> 2] = 0;
HEAP32[$48 >> 2] = 1308;
$52 = $48 + 8 | 0;
__THREW__ = 0;
invoke_vi(98, $52 | 0);
$53 = __THREW__;
__THREW__ = 0;
if (!($53 & 1)) {
__THREW__ = 0;
invoke_vi(98, $48 + 20 | 0);
$56 = __THREW__;
__THREW__ = 0;
if (!($56 & 1)) {
__THREW__ = 0;
invoke_vi(98, $48 + 32 | 0);
$59 = __THREW__;
__THREW__ = 0;
if (!($59 & 1)) {
HEAP32[$51 >> 2] = HEAP32[$50 + 4 >> 2];
dest = $52;
src = $50 + 8 | 0;
stop = dest + 60 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
$$06 = $48;
STACKTOP = sp;
return $$06 | 0;
}
}
}
$64 = ___cxa_find_matching_catch_2() | 0;
$65 = tempRet0;
__ZdlPv($48);
$$0 = $65;
$$05 = $64;
___resumeException($$05 | 0);
break;
}
case 1:
{
$66 = __Znwj(24) | 0;
$68 = HEAP32[$0 + 36 >> 2] | 0;
HEAP32[$66 >> 2] = 1400;
$70 = $66 + 8 | 0;
HEAP32[$66 + 4 >> 2] = HEAP32[$68 + 4 >> 2];
$73 = $68 + 8 | 0;
HEAP32[$70 >> 2] = HEAP32[$73 >> 2];
HEAP32[$70 + 4 >> 2] = HEAP32[$73 + 4 >> 2];
HEAP32[$70 + 8 >> 2] = HEAP32[$73 + 8 >> 2];
HEAP32[$70 + 12 >> 2] = HEAP32[$73 + 12 >> 2];
$$06 = $66;
STACKTOP = sp;
return $$06 | 0;
}
default:
{
HEAP32[$vararg_buffer >> 2] = $2;
__Z7eprintfPKcz(12960, $vararg_buffer);
$$06 = 0;
STACKTOP = sp;
return $$06 | 0;
}
}
return 0;
}
function __ZN18SiGMLConstellation20AnalyseSplitLocationEP7XMLCellb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $10 = 0, $12 = 0, $13 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = f0, $27 = 0, $3 = 0, $34 = 0, $35 = 0, $4 = 0, $46 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = f0, $6 = 0, $60 = 0, $67 = 0, $68 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $tmpcast20$i$byval_copy = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$tmpcast20$i$byval_copy = sp + 22 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$3 = sp + 12 | 0;
$4 = sp + 20 | 0;
$5 = sp + 18 | 0;
$6 = sp + 16 | 0;
$8 = HEAP32[$1 + 8 >> 2] | 0;
$10 = HEAP32[$8 + 12 >> 2] | 0;
if (($10 | 0) > 0) {
$12 = HEAP32[$8 >> 2] | 0;
$13 = HEAP32[$12 >> 2] | 0;
if (($10 | 0) == 1) {
$20 = $13;
$53 = 0;
} else {
$20 = $13;
$53 = HEAP32[$12 + 4 >> 2] | 0;
}
} else {
$20 = 0;
$53 = 0;
}
$17 = $0 + 40 | 0;
$18 = HEAP16[36081] | 0;
$21 = HEAP32[$20 + 4 >> 2] | 0;
HEAP16[$4 >> 1] = $18;
HEAP8[$tmpcast20$i$byval_copy >> 0] = HEAP8[$4 >> 0] | 0;
HEAP8[$tmpcast20$i$byval_copy + 1 >> 0] = HEAP8[$4 + 1 >> 0] | 0;
__Z17SiteIDFromAttribsPK7HashAnyIPKcS1_E9Mirroringbbb($3, $21, $tmpcast20$i$byval_copy, 0, 0, $2);
$22 = $0 + 16 | 0;
HEAP16[$22 >> 1] = HEAP16[$3 >> 1] | 0;
HEAP8[$22 + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0;
HEAP16[$5 >> 1] = $18;
HEAP8[$tmpcast20$i$byval_copy >> 0] = HEAP8[$5 >> 0] | 0;
HEAP8[$tmpcast20$i$byval_copy + 1 >> 0] = HEAP8[$5 + 1 >> 0] | 0;
__Z17SiteIDFromAttribsPK7HashAnyIPKcS1_E9Mirroringbbb($3, $21, $tmpcast20$i$byval_copy, 1, 0, $2);
$23 = $0 + 20 | 0;
HEAP16[$23 >> 1] = HEAP16[$3 >> 1] | 0;
HEAP8[$23 + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0;
$24 = Math_fround(__Z23HashAttribs_attrib_REALPK7HashAnyIPKcS1_ES1_f($21, 25448, Math_fround(.5)));
HEAPF32[$0 + 24 >> 2] = $24;
$27 = HEAP32[$20 + 8 >> 2] | 0;
if ((HEAP32[$27 + 12 >> 2] | 0) > 0) {
$34 = HEAP32[(HEAP32[HEAP32[$27 >> 2] >> 2] | 0) + 4 >> 2] | 0;
HEAP16[$6 >> 1] = $18;
HEAP8[$tmpcast20$i$byval_copy >> 0] = HEAP8[$6 >> 0] | 0;
HEAP8[$tmpcast20$i$byval_copy + 1 >> 0] = HEAP8[$6 + 1 >> 0] | 0;
__Z17SiteIDFromAttribsPK7HashAnyIPKcS1_E9Mirroringbbb($3, $34, $tmpcast20$i$byval_copy, 0, 1, $2);
HEAP16[$17 >> 1] = HEAP16[$3 >> 1] | 0;
HEAP8[$17 + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0;
$35 = HEAP32[$17 >> 2] | 0;
if ((HEAP32[16607] ^ $35) & 16777215 | 0) {
if (($35 & 6291456) >>> 0 < 2097152 | 1 == 0) $48 = $35; else {
__Z7LogTimev() | 0;
$46 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17197] | 0, ((HEAPU16[$17 >> 1] | 0 | (HEAPU8[$17 + 2 >> 0] | 0) << 16) & 16777215) >>> 20 & 7) | 0;
HEAP32[$vararg_buffer >> 2] = $46;
__Z7eprintfPKcz(25463, $vararg_buffer);
$48 = HEAPU16[$17 >> 1] | 0 | (HEAPU8[$17 + 2 >> 0] | 0) << 16;
}
$49 = $48 & 9437183 | 1048576;
HEAP16[$17 >> 1] = $49;
HEAP8[$17 + 2 >> 0] = $49 >>> 16;
}
}
$50 = $0 + 44 | 0;
$51 = HEAP16[36081] | 0;
$54 = HEAP32[$53 + 4 >> 2] | 0;
HEAP16[$4 >> 1] = $51;
HEAP8[$tmpcast20$i$byval_copy >> 0] = HEAP8[$4 >> 0] | 0;
HEAP8[$tmpcast20$i$byval_copy + 1 >> 0] = HEAP8[$4 + 1 >> 0] | 0;
__Z17SiteIDFromAttribsPK7HashAnyIPKcS1_E9Mirroringbbb($3, $54, $tmpcast20$i$byval_copy, 0, 1, $2);
$55 = $0 + 28 | 0;
HEAP16[$55 >> 1] = HEAP16[$3 >> 1] | 0;
HEAP8[$55 + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0;
HEAP16[$5 >> 1] = $51;
HEAP8[$tmpcast20$i$byval_copy >> 0] = HEAP8[$5 >> 0] | 0;
HEAP8[$tmpcast20$i$byval_copy + 1 >> 0] = HEAP8[$5 + 1 >> 0] | 0;
__Z17SiteIDFromAttribsPK7HashAnyIPKcS1_E9Mirroringbbb($3, $54, $tmpcast20$i$byval_copy, 1, 1, $2);
$56 = $0 + 32 | 0;
HEAP16[$56 >> 1] = HEAP16[$3 >> 1] | 0;
HEAP8[$56 + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0;
$57 = Math_fround(__Z23HashAttribs_attrib_REALPK7HashAnyIPKcS1_ES1_f($54, 25448, Math_fround(.5)));
HEAPF32[$0 + 36 >> 2] = $57;
$60 = HEAP32[$53 + 8 >> 2] | 0;
if ((HEAP32[$60 + 12 >> 2] | 0) <= 0) {
STACKTOP = sp;
return;
}
$67 = HEAP32[(HEAP32[HEAP32[$60 >> 2] >> 2] | 0) + 4 >> 2] | 0;
HEAP16[$6 >> 1] = $51;
HEAP8[$tmpcast20$i$byval_copy >> 0] = HEAP8[$6 >> 0] | 0;
HEAP8[$tmpcast20$i$byval_copy + 1 >> 0] = HEAP8[$6 + 1 >> 0] | 0;
__Z17SiteIDFromAttribsPK7HashAnyIPKcS1_E9Mirroringbbb($3, $67, $tmpcast20$i$byval_copy, 0, 0, $2);
HEAP16[$50 >> 1] = HEAP16[$3 >> 1] | 0;
HEAP8[$50 + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0;
$68 = HEAP32[$50 >> 2] | 0;
if (!((HEAP32[16607] ^ $68) & 16777215)) {
STACKTOP = sp;
return;
}
if (($68 & 6291456) >>> 0 < 2097152 | 1 == 0) $81 = $68; else {
__Z7LogTimev() | 0;
$79 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17197] | 0, ((HEAPU16[$50 >> 1] | 0 | (HEAPU8[$50 + 2 >> 0] | 0) << 16) & 16777215) >>> 20 & 7) | 0;
HEAP32[$vararg_buffer1 >> 2] = $79;
__Z7eprintfPKcz(25463, $vararg_buffer1);
$81 = HEAPU16[$50 >> 1] | 0 | (HEAPU8[$50 + 2 >> 0] | 0) << 16;
}
$82 = $81 & 9437183 | 1048576;
HEAP16[$50 >> 1] = $82;
HEAP8[$50 + 2 >> 0] = $82 >>> 16;
STACKTOP = sp;
return;
}
function __ZL17AddToARPSiteIndexPKc8Locationbb($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$sink$i$i = 0, $$sink$i$i25 = 0, $$sink$i$i34 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $19 = 0, $23 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $50 = 0, $53 = 0, $57 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $71 = 0, $74 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $87 = 0, $91 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer = sp;
$4 = sp + 20 | 0;
$5 = sp + 16 | 0;
if ($2) {
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($4, $1, 0, 0, 0, 1, 0);
$6 = HEAP32[16535] | 0;
$7 = _concatStrings($0, 19046) | 0;
$8 = HEAP32[$4 >> 2] | 0;
$11 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($7, HEAP32[$6 + 4 >> 2] | 0) | 0;
$12 = HEAP32[$6 >> 2] | 0;
$13 = $12 + ($11 << 3) | 0;
$14 = $12 + ($11 << 3) + 4 | 0;
switch (HEAP16[$14 >> 1] | 0) {
case 0:
{
$16 = __Znwj(12) | 0;
HEAP32[$16 >> 2] = $7;
HEAP32[$16 + 4 >> 2] = $8;
HEAP32[$16 + 8 >> 2] = 0;
HEAP32[$13 >> 2] = $16;
$19 = $6 + 12 | 0;
HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + -1;
$$sink$i$i = $6 + 16 | 0;
break;
}
case 1:
{
$23 = $6 + 16 | 0;
HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + -1;
label = 5;
break;
}
default:
label = 5;
}
if ((label | 0) == 5) {
$26 = HEAP32[$13 >> 2] | 0;
$28 = __Znwj(12) | 0;
$29 = $26 + 8 | 0;
$30 = HEAP32[$29 >> 2] | 0;
HEAP32[$28 >> 2] = $7;
HEAP32[$28 + 4 >> 2] = $8;
HEAP32[$28 + 8 >> 2] = $30;
HEAP32[$29 >> 2] = $28;
$$sink$i$i = $6 + 8 | 0;
}
HEAP32[$$sink$i$i >> 2] = (HEAP32[$$sink$i$i >> 2] | 0) + 1;
HEAP16[$14 >> 1] = (HEAP16[$14 >> 1] | 0) + 1 << 16 >> 16;
$37 = $6 + 24 | 0;
HEAP32[$37 >> 2] = (HEAP32[$37 >> 2] | 0) + 1;
}
if (!$3) {
STACKTOP = sp;
return;
}
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($4, $1, 2, 0, 0, 1, 0);
$40 = HEAP32[16535] | 0;
$41 = _concatStrings($0, 19049) | 0;
$42 = HEAP32[$4 >> 2] | 0;
$45 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($41, HEAP32[$40 + 4 >> 2] | 0) | 0;
$46 = HEAP32[$40 >> 2] | 0;
$47 = $46 + ($45 << 3) | 0;
$48 = $46 + ($45 << 3) + 4 | 0;
switch (HEAP16[$48 >> 1] | 0) {
case 0:
{
$50 = __Znwj(12) | 0;
HEAP32[$50 >> 2] = $41;
HEAP32[$50 + 4 >> 2] = $42;
HEAP32[$50 + 8 >> 2] = 0;
HEAP32[$47 >> 2] = $50;
$53 = $40 + 12 | 0;
HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + -1;
$$sink$i$i25 = $40 + 16 | 0;
break;
}
case 1:
{
$57 = $40 + 16 | 0;
HEAP32[$57 >> 2] = (HEAP32[$57 >> 2] | 0) + -1;
label = 11;
break;
}
default:
label = 11;
}
if ((label | 0) == 11) {
$60 = HEAP32[$47 >> 2] | 0;
$62 = __Znwj(12) | 0;
$63 = $60 + 8 | 0;
$64 = HEAP32[$63 >> 2] | 0;
HEAP32[$62 >> 2] = $41;
HEAP32[$62 + 4 >> 2] = $42;
HEAP32[$62 + 8 >> 2] = $64;
HEAP32[$63 >> 2] = $62;
$$sink$i$i25 = $40 + 8 | 0;
}
HEAP32[$$sink$i$i25 >> 2] = (HEAP32[$$sink$i$i25 >> 2] | 0) + 1;
HEAP16[$48 >> 1] = (HEAP16[$48 >> 1] | 0) + 1 << 16 >> 16;
$71 = $40 + 24 | 0;
HEAP32[$71 >> 2] = (HEAP32[$71 >> 2] | 0) + 1;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($5, $1, 1, 0, 0, 1, 0);
HEAP16[$4 >> 1] = HEAP16[$5 >> 1] | 0;
HEAP8[$4 + 2 >> 0] = HEAP8[$5 + 2 >> 0] | 0;
$74 = HEAP32[16535] | 0;
$75 = _concatStrings($0, 19052) | 0;
$76 = HEAP32[$4 >> 2] | 0;
$79 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($75, HEAP32[$74 + 4 >> 2] | 0) | 0;
$80 = HEAP32[$74 >> 2] | 0;
$81 = $80 + ($79 << 3) | 0;
$82 = $80 + ($79 << 3) + 4 | 0;
switch (HEAP16[$82 >> 1] | 0) {
case 0:
{
$84 = __Znwj(12) | 0;
HEAP32[$84 >> 2] = $75;
HEAP32[$84 + 4 >> 2] = $76;
HEAP32[$84 + 8 >> 2] = 0;
HEAP32[$81 >> 2] = $84;
$87 = $74 + 12 | 0;
HEAP32[$87 >> 2] = (HEAP32[$87 >> 2] | 0) + -1;
$$sink$i$i34 = $74 + 16 | 0;
break;
}
case 1:
{
$91 = $74 + 16 | 0;
HEAP32[$91 >> 2] = (HEAP32[$91 >> 2] | 0) + -1;
label = 15;
break;
}
default:
label = 15;
}
if ((label | 0) == 15) {
$94 = HEAP32[$81 >> 2] | 0;
$96 = __Znwj(12) | 0;
$97 = $94 + 8 | 0;
$98 = HEAP32[$97 >> 2] | 0;
HEAP32[$96 >> 2] = $75;
HEAP32[$96 + 4 >> 2] = $76;
HEAP32[$96 + 8 >> 2] = $98;
HEAP32[$97 >> 2] = $96;
$$sink$i$i34 = $74 + 8 | 0;
}
HEAP32[$$sink$i$i34 >> 2] = (HEAP32[$$sink$i$i34 >> 2] | 0) + 1;
HEAP16[$82 >> 1] = (HEAP16[$82 >> 1] | 0) + 1 << 16 >> 16;
$105 = $74 + 24 | 0;
HEAP32[$105 >> 2] = (HEAP32[$105 >> 2] | 0) + 1;
if (($1 | 0) == 44 & 0 != 0) {
HEAP32[$vararg_buffer >> 2] = $0;
HEAP32[$vararg_buffer + 4 >> 2] = 44;
HEAP32[$vararg_buffer + 8 >> 2] = $2 & 1;
HEAP32[$vararg_buffer + 12 >> 2] = 1;
__Z7eprintfPKcz(19055, $vararg_buffer);
__ZNK6SiteID5printEP8_IO_FILE($4, HEAP32[16082] | 0);
__Z5eputcc(10);
}
STACKTOP = sp;
return;
}
function _big2_cdataSectionTok($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$1 = 0, $$181$ph = 0, $$181102 = 0, $$mux = 0, $$sink = 0, $10 = 0, $11 = 0, $17 = 0, $23 = 0, $30 = 0, $38 = 0, $47 = 0, $6 = 0, $63 = 0, $64 = 0, $7 = 0, $82 = 0, $9 = 0, label = 0;
if (($1 | 0) == ($2 | 0)) {
$$1 = -4;
return $$1 | 0;
}
$6 = $1;
$7 = $2 - $6 | 0;
$9 = ($7 & 1 | 0) == 0;
$10 = $7 & -2;
$11 = ($10 | 0) == 0;
$$mux = $9 | $11 ? $2 : $1 + $10 | 0;
if (!($9 | $11 ^ 1)) {
$$1 = -1;
return $$1 | 0;
}
L7 : do switch (HEAP8[$1 >> 0] | 0) {
case 0:
{
$17 = $0 + 72 | 0;
switch (HEAP8[$17 + (HEAPU8[$1 + 1 >> 0] | 0) >> 0] | 0) {
case 7:
{
label = 22;
break L7;
break;
}
case 8:
case 1:
case 0:
{
label = 24;
break L7;
break;
}
case 4:
{
$23 = $1 + 2 | 0;
if (($23 | 0) == ($$mux | 0)) {
$$1 = -1;
return $$1 | 0;
}
if (HEAP8[$23 >> 0] | 0) {
$$181$ph = $23;
break L7;
}
if ((HEAP8[$1 + 3 >> 0] | 0) != 93) {
$$181$ph = $23;
break L7;
}
$30 = $1 + 4 | 0;
if (($30 | 0) == ($$mux | 0)) {
$$1 = -1;
return $$1 | 0;
}
if (HEAP8[$30 >> 0] | 0) {
$$181$ph = $23;
break L7;
}
if ((HEAP8[$1 + 5 >> 0] | 0) != 62) {
$$181$ph = $23;
break L7;
}
HEAP32[$3 >> 2] = $1 + 6;
$$1 = 40;
return $$1 | 0;
}
case 9:
{
$38 = $1 + 2 | 0;
if (($38 | 0) == ($$mux | 0)) {
$$1 = -1;
return $$1 | 0;
}
if (!(HEAP8[$38 >> 0] | 0)) $47 = (HEAP8[$17 + (HEAPU8[$1 + 3 >> 0] | 0) >> 0] | 0) == 10 ? $1 + 4 | 0 : $38; else $47 = $38;
HEAP32[$3 >> 2] = $47;
$$1 = 7;
return $$1 | 0;
}
case 10:
{
HEAP32[$3 >> 2] = $1 + 2;
$$1 = 7;
return $$1 | 0;
}
case 5:
{
if (($$mux - $6 | 0) < 2) {
$$1 = -2;
return $$1 | 0;
} else {
$$181$ph = $1 + 2 | 0;
break L7;
}
break;
}
case 6:
{
if (($$mux - $6 | 0) < 3) {
$$1 = -2;
return $$1 | 0;
} else {
$$181$ph = $1 + 3 | 0;
break L7;
}
break;
}
default:
{
label = 25;
break L7;
}
}
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 22;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 24;
break;
}
case -1:
{
if ((HEAPU8[$1 + 1 >> 0] | 0) > 253) label = 24; else label = 25;
break;
}
default:
label = 25;
} while (0);
do if ((label | 0) == 22) if (($$mux - $6 | 0) < 4) {
$$1 = -2;
return $$1 | 0;
} else {
$$181$ph = $1 + 4 | 0;
break;
} else if ((label | 0) == 24) {
HEAP32[$3 >> 2] = $1;
$$1 = 0;
return $$1 | 0;
} else if ((label | 0) == 25) $$181$ph = $1 + 2 | 0; while (0);
L50 : do if (($$181$ph | 0) != ($$mux | 0)) {
$63 = $0 + 72 | 0;
$64 = $$mux;
$$181102 = $$181$ph;
L52 : while (1) {
L54 : do switch (HEAP8[$$181102 >> 0] | 0) {
case -33:
case -34:
case -35:
case -36:
{
label = 37;
break L52;
break;
}
case 0:
{
switch (HEAP8[$63 + (HEAPU8[$$181102 + 1 >> 0] | 0) >> 0] | 0) {
case 4:
case 10:
case 9:
case 8:
case 1:
case 0:
{
label = 37;
break L52;
break;
}
case 7:
{
label = 35;
break L54;
break;
}
case 5:
{
if (($64 - $$181102 | 0) < 2) {
label = 32;
break L52;
} else {
$$sink = 2;
break L54;
}
break;
}
case 6:
{
if (($64 - $$181102 | 0) < 3) {
label = 34;
break L52;
} else {
$$sink = 3;
break L54;
}
break;
}
default:
{
$$sink = 2;
break L54;
}
}
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 35;
break;
}
case -1:
{
if ((HEAPU8[$$181102 + 1 >> 0] | 0) > 253) {
label = 37;
break L52;
} else $$sink = 2;
break;
}
default:
$$sink = 2;
} while (0);
if ((label | 0) == 35) {
label = 0;
if (($64 - $$181102 | 0) < 4) {
label = 36;
break;
} else $$sink = 4;
}
$82 = $$181102 + $$sink | 0;
if (($82 | 0) == ($$mux | 0)) break L50; else $$181102 = $82;
}
if ((label | 0) == 32) {
HEAP32[$3 >> 2] = $$181102;
$$1 = 6;
return $$1 | 0;
} else if ((label | 0) == 34) {
HEAP32[$3 >> 2] = $$181102;
$$1 = 6;
return $$1 | 0;
} else if ((label | 0) == 36) {
HEAP32[$3 >> 2] = $$181102;
$$1 = 6;
return $$1 | 0;
} else if ((label | 0) == 37) {
HEAP32[$3 >> 2] = $$181102;
$$1 = 6;
return $$1 | 0;
}
} while (0);
HEAP32[$3 >> 2] = $$mux;
$$1 = 6;
return $$1 | 0;
}
function __ZL15TransformOneLegRK6VectorS1_S1_RK10QuaternionS1_RS_RS2_S6_($0, $1, $2, $3, $4, $5, $6, $7) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
$6 = $6 | 0;
$7 = $7 | 0;
var $103 = f0, $11 = f0, $110 = f0, $12 = f0, $13 = f0, $14 = f0, $16 = f0, $18 = f0, $19 = f0, $21 = f0, $23 = f0, $26 = f0, $28 = f0, $29 = f0, $31 = f0, $32 = f0, $35 = f0, $39 = f0, $40 = 0, $42 = f0, $43 = 0, $45 = f0, $48 = f0, $51 = f0, $54 = f0, $60 = f0, $61 = 0, $63 = f0, $65 = 0, $67 = f0, $69 = 0, $72 = f0, $74 = f0, $75 = f0, $76 = f0, $78 = f0, $8 = 0, $80 = f0, $81 = f0, $83 = f0, $85 = f0, $86 = f0, $87 = f0, $89 = f0, $96 = f0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 96 | 0;
$vararg_buffer9 = sp + 56 | 0;
$vararg_buffer3 = sp + 24 | 0;
$vararg_buffer1 = sp + 8 | 0;
$8 = sp + 76 | 0;
__ZNK10Quaternion23rotateVectorAboutCentreERK6VectorS2_RS0_($3, $2, $1, $5);
__ZN6Vector6setAddERKS_($5, $4);
__ZN6VectorC2ERKS_($8, $0);
__ZN6Vector6setAddERKS_($8, $5);
__ZN6Vector11setSubtractERKS_($8, $1);
__Z7eprintfPKcz(11684, sp);
__ZNK6Vector5printEP8_IO_FILEi($5, HEAP32[16082] | 0, 6);
__Z5eputcc(10);
__Z7eprintfPKcz(11692, $vararg_buffer1);
__ZNK6Vector5printEP8_IO_FILEi($8, HEAP32[16082] | 0, 6);
__Z5eputcc(10);
$11 = Math_fround(HEAPF32[$1 >> 2]);
$12 = Math_fround(HEAPF32[$0 >> 2]);
$13 = Math_fround($11 - $12);
$14 = Math_fround($13 * $13);
$16 = Math_fround(HEAPF32[$1 + 8 >> 2]);
$18 = Math_fround(HEAPF32[$0 + 8 >> 2]);
$19 = Math_fround($16 - $18);
$21 = Math_fround($14 + Math_fround($19 * $19));
$23 = Math_fround(HEAPF32[$1 + 4 >> 2]);
$26 = Math_fround($23 - Math_fround(HEAPF32[$0 + 4 >> 2]));
$28 = Math_fround($21 + Math_fround($26 * $26));
$29 = Math_fround(Math_sqrt(Math_fround($28)));
$31 = Math_fround(Math_fround(HEAPF32[$5 >> 2]) - $12);
$32 = Math_fround($31 * $31);
$35 = Math_fround(Math_fround(HEAPF32[$5 + 8 >> 2]) - $18);
$39 = Math_fround(Math_sqrt(Math_fround($28 - Math_fround($32 + Math_fround($35 * $35)))));
$40 = $5 + 4 | 0;
$42 = Math_fround($39 - Math_fround(HEAPF32[$40 >> 2]));
HEAPF32[$40 >> 2] = $39;
$43 = $8 + 4 | 0;
$45 = Math_fround($42 + Math_fround(HEAPF32[$43 >> 2]));
HEAPF32[$43 >> 2] = $45;
HEAPF64[$vararg_buffer3 >> 3] = +$42;
__Z7eprintfPKcz(11702, $vararg_buffer3);
__ZNK6Vector5printEP8_IO_FILEi($5, HEAP32[16082] | 0, 6);
__Z5eputcc(10);
__ZN6VectorC2ERKS_($vararg_buffer3, $0);
__ZN6Vector11setSubtractERKS_($vararg_buffer3, $8);
$48 = Math_fround(__ZNK6Vector6lengthEv($vararg_buffer3));
$51 = Math_fround(-Math_fround(HEAPF32[$vararg_buffer3 + 8 >> 2]));
__ZN6VectorC2Efff($vararg_buffer1, $51, Math_fround(0.0), Math_fround(HEAPF32[$vararg_buffer3 >> 2]));
$54 = Math_fround(+Math_asin(+Math_fround($48 / $29)));
__ZN10Quaternion15setFromVecAngleERK6Vectorfb($7, $vararg_buffer1, $54, 0);
__Z7eprintfPKcz(11723, sp + 40 | 0);
__ZNK6Vector5printEP8_IO_FILEi($vararg_buffer3, HEAP32[16082] | 0, 6);
__Z5eputcc(10);
__Z7eprintfPKcz(11738, sp + 48 | 0);
__ZNK6Vector5printEP8_IO_FILEi($vararg_buffer1, HEAP32[16082] | 0, 6);
__Z5eputcc(10);
HEAPF64[$vararg_buffer9 >> 3] = +$54;
__Z7eprintfPKcz(11755, $vararg_buffer9);
__Z7eprintfPKcz(11776, sp + 64 | 0);
__ZN10Quaternion5printEP8_IO_FILEi($7, HEAP32[16082] | 0, 6);
__Z5eputcc(10);
$60 = Math_fround(-Math_fround(HEAPF32[$7 >> 2]));
HEAPF32[$6 >> 2] = $60;
$61 = $7 + 4 | 0;
$63 = Math_fround(-Math_fround(HEAPF32[$61 >> 2]));
HEAPF32[$6 + 4 >> 2] = $63;
$65 = $7 + 8 | 0;
$67 = Math_fround(-Math_fround(HEAPF32[$65 >> 2]));
HEAPF32[$6 + 8 >> 2] = $67;
$69 = $7 + 12 | 0;
HEAP32[$6 + 12 >> 2] = HEAP32[$69 >> 2];
$72 = Math_fround(HEAPF32[$61 >> 2]);
$74 = Math_fround(HEAPF32[$3 + 8 >> 2]);
$75 = Math_fround($72 * $74);
$76 = Math_fround(HEAPF32[$65 >> 2]);
$78 = Math_fround(HEAPF32[$3 + 4 >> 2]);
$80 = Math_fround(Math_fround($76 * $78) - $75);
$81 = Math_fround(HEAPF32[$7 >> 2]);
$83 = Math_fround(HEAPF32[$3 + 12 >> 2]);
$85 = Math_fround($80 + Math_fround($81 * $83));
$86 = Math_fround(HEAPF32[$69 >> 2]);
$87 = Math_fround(HEAPF32[$3 >> 2]);
$89 = Math_fround($85 - Math_fround($86 * $87));
$96 = Math_fround(Math_fround(Math_fround($72 * $83) + Math_fround(Math_fround($74 * $81) - Math_fround($76 * $87))) - Math_fround($78 * $86));
$103 = Math_fround(Math_fround(Math_fround($76 * $83) + Math_fround(Math_fround($72 * $87) - Math_fround($78 * $81))) - Math_fround($74 * $86));
$110 = Math_fround(Math_fround($83 * $86) + Math_fround(Math_fround($74 * $76) + Math_fround(Math_fround($72 * $78) + Math_fround($81 * $87))));
HEAPF32[$7 >> 2] = $89;
HEAPF32[$61 >> 2] = $96;
HEAPF32[$65 >> 2] = $103;
HEAPF32[$69 >> 2] = $110;
__Z7eprintfPKcz(11792, sp + 72 | 0);
__ZN10Quaternion5printEP8_IO_FILEi($7, HEAP32[16082] | 0, 6);
__Z5eputcc(10);
STACKTOP = sp;
return;
}
function _little2_cdataSectionTok($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$1 = 0, $$181$ph = 0, $$181102 = 0, $$mux = 0, $$sink = 0, $10 = 0, $11 = 0, $17 = 0, $22 = 0, $29 = 0, $37 = 0, $46 = 0, $6 = 0, $62 = 0, $63 = 0, $7 = 0, $80 = 0, $9 = 0, label = 0;
if (($1 | 0) == ($2 | 0)) {
$$1 = -4;
return $$1 | 0;
}
$6 = $1;
$7 = $2 - $6 | 0;
$9 = ($7 & 1 | 0) == 0;
$10 = $7 & -2;
$11 = ($10 | 0) == 0;
$$mux = $9 | $11 ? $2 : $1 + $10 | 0;
if (!($9 | $11 ^ 1)) {
$$1 = -1;
return $$1 | 0;
}
L7 : do switch (HEAP8[$1 + 1 >> 0] | 0) {
case 0:
{
$17 = $0 + 72 | 0;
switch (HEAP8[$17 + (HEAPU8[$1 >> 0] | 0) >> 0] | 0) {
case 7:
{
label = 22;
break L7;
break;
}
case 8:
case 1:
case 0:
{
label = 24;
break L7;
break;
}
case 4:
{
$22 = $1 + 2 | 0;
if (($22 | 0) == ($$mux | 0)) {
$$1 = -1;
return $$1 | 0;
}
if (HEAP8[$1 + 3 >> 0] | 0) {
$$181$ph = $22;
break L7;
}
if ((HEAP8[$22 >> 0] | 0) != 93) {
$$181$ph = $22;
break L7;
}
$29 = $1 + 4 | 0;
if (($29 | 0) == ($$mux | 0)) {
$$1 = -1;
return $$1 | 0;
}
if (HEAP8[$1 + 5 >> 0] | 0) {
$$181$ph = $22;
break L7;
}
if ((HEAP8[$29 >> 0] | 0) != 62) {
$$181$ph = $22;
break L7;
}
HEAP32[$3 >> 2] = $1 + 6;
$$1 = 40;
return $$1 | 0;
}
case 9:
{
$37 = $1 + 2 | 0;
if (($37 | 0) == ($$mux | 0)) {
$$1 = -1;
return $$1 | 0;
}
if (!(HEAP8[$1 + 3 >> 0] | 0)) $46 = (HEAP8[$17 + (HEAPU8[$37 >> 0] | 0) >> 0] | 0) == 10 ? $1 + 4 | 0 : $37; else $46 = $37;
HEAP32[$3 >> 2] = $46;
$$1 = 7;
return $$1 | 0;
}
case 10:
{
HEAP32[$3 >> 2] = $1 + 2;
$$1 = 7;
return $$1 | 0;
}
case 5:
{
if (($$mux - $6 | 0) < 2) {
$$1 = -2;
return $$1 | 0;
} else {
$$181$ph = $1 + 2 | 0;
break L7;
}
break;
}
case 6:
{
if (($$mux - $6 | 0) < 3) {
$$1 = -2;
return $$1 | 0;
} else {
$$181$ph = $1 + 3 | 0;
break L7;
}
break;
}
default:
{
label = 25;
break L7;
}
}
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 22;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 24;
break;
}
case -1:
{
if ((HEAPU8[$1 >> 0] | 0) > 253) label = 24; else label = 25;
break;
}
default:
label = 25;
} while (0);
do if ((label | 0) == 22) if (($$mux - $6 | 0) < 4) {
$$1 = -2;
return $$1 | 0;
} else {
$$181$ph = $1 + 4 | 0;
break;
} else if ((label | 0) == 24) {
HEAP32[$3 >> 2] = $1;
$$1 = 0;
return $$1 | 0;
} else if ((label | 0) == 25) $$181$ph = $1 + 2 | 0; while (0);
L50 : do if (($$181$ph | 0) != ($$mux | 0)) {
$62 = $0 + 72 | 0;
$63 = $$mux;
$$181102 = $$181$ph;
L52 : while (1) {
L54 : do switch (HEAP8[$$181102 + 1 >> 0] | 0) {
case -33:
case -34:
case -35:
case -36:
{
label = 37;
break L52;
break;
}
case 0:
{
switch (HEAP8[$62 + (HEAPU8[$$181102 >> 0] | 0) >> 0] | 0) {
case 4:
case 10:
case 9:
case 8:
case 1:
case 0:
{
label = 37;
break L52;
break;
}
case 7:
{
label = 35;
break L54;
break;
}
case 5:
{
if (($63 - $$181102 | 0) < 2) {
label = 32;
break L52;
} else {
$$sink = 2;
break L54;
}
break;
}
case 6:
{
if (($63 - $$181102 | 0) < 3) {
label = 34;
break L52;
} else {
$$sink = 3;
break L54;
}
break;
}
default:
{
$$sink = 2;
break L54;
}
}
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 35;
break;
}
case -1:
{
if ((HEAPU8[$$181102 >> 0] | 0) > 253) {
label = 37;
break L52;
} else $$sink = 2;
break;
}
default:
$$sink = 2;
} while (0);
if ((label | 0) == 35) {
label = 0;
if (($63 - $$181102 | 0) < 4) {
label = 36;
break;
} else $$sink = 4;
}
$80 = $$181102 + $$sink | 0;
if (($80 | 0) == ($$mux | 0)) break L50; else $$181102 = $80;
}
if ((label | 0) == 32) {
HEAP32[$3 >> 2] = $$181102;
$$1 = 6;
return $$1 | 0;
} else if ((label | 0) == 34) {
HEAP32[$3 >> 2] = $$181102;
$$1 = 6;
return $$1 | 0;
} else if ((label | 0) == 36) {
HEAP32[$3 >> 2] = $$181102;
$$1 = 6;
return $$1 | 0;
} else if ((label | 0) == 37) {
HEAP32[$3 >> 2] = $$181102;
$$1 = 6;
return $$1 | 0;
}
} while (0);
HEAP32[$3 >> 2] = $$mux;
$$1 = 6;
return $$1 | 0;
}
function __ZN10TorsoCurve10initialiseEv($0) {
$0 = $0 | 0;
var $1 = 0, $100 = f0, $106 = f0, $107 = f0, $11 = f0, $112 = f0, $115 = f0, $117 = 0, $12 = 0, $13 = f0, $14 = f0, $16 = f0, $17 = f0, $18 = 0, $19 = f0, $2 = 0, $20 = f0, $22 = f0, $24 = f0, $25 = f0, $26 = f0, $29 = 0, $36 = f0, $37 = f0, $38 = f0, $39 = f0, $40 = f0, $41 = 0, $42 = f0, $43 = f0, $45 = f0, $47 = f0, $48 = f0, $49 = f0, $5 = 0, $50 = 0, $51 = 0, $52 = f0, $53 = f0, $55 = f0, $61 = f0, $62 = f0, $67 = f0, $7 = 0, $70 = f0, $75 = f0, $78 = 0, $85 = f0, $86 = f0, $87 = f0, $88 = f0, $89 = f0, $9 = 0, $92 = f0, $93 = f0, $94 = f0, $95 = 0, $96 = 0, $97 = f0, $98 = f0;
$1 = $0 + 24 | 0;
$2 = HEAP32[$1 >> 2] | 0;
HEAP32[$0 + 124 >> 2] = $2;
$5 = HEAP32[$0 + 8 >> 2] | 0;
HEAP32[$0 + 128 >> 2] = $5;
$7 = $0 + 48 | 0;
$9 = HEAP32[$0 + 56 >> 2] | 0;
HEAP32[$0 + 132 >> 2] = $9;
$11 = Math_fround(HEAPF32[$0 >> 2]);
$12 = $0 + 12 | 0;
$13 = Math_fround(HEAPF32[$12 >> 2]);
$14 = Math_fround($13 + Math_fround(.0199999996));
$16 = $11 > $14 ? $11 : $14;
HEAPF32[$0 >> 2] = $16;
$17 = Math_fround(HEAPF32[$7 >> 2]);
$18 = $0 + 36 | 0;
$19 = Math_fround(HEAPF32[$18 >> 2]);
$20 = Math_fround($19 + Math_fround(-.0199999996));
$22 = $17 < $20 ? $17 : $20;
HEAPF32[$7 >> 2] = $22;
$24 = Math_fround(HEAPF32[$0 + 20 >> 2]);
$25 = (HEAP32[tempDoublePtr >> 2] = $5, Math_fround(HEAPF32[tempDoublePtr >> 2]));
$26 = Math_fround($24 - $25);
$29 = $0 + 68 | 0;
$36 = Math_fround(Math_fround(Math_fround($16 + $13) - Math_fround(Math_fround($26 * $26) / Math_fround($16 - $13))) * Math_fround(.5));
HEAPF32[$0 + 60 >> 2] = $36;
$37 = Math_fround($16 - $36);
HEAPF32[$0 + 64 >> 2] = $37;
$38 = Math_fround($13 - $36);
$39 = Math_fround($38 / $26);
HEAPF32[$0 + 72 >> 2] = $39;
$40 = Math_fround(+Math_atan2(+$26, +$38));
HEAPF32[$29 >> 2] = $40;
$41 = $37 < Math_fround(0.0);
$42 = (HEAP32[tempDoublePtr >> 2] = $2, Math_fround(HEAPF32[tempDoublePtr >> 2]));
$43 = (HEAP32[tempDoublePtr >> 2] = $9, Math_fround(HEAPF32[tempDoublePtr >> 2]));
if ($41) {
$45 = Math_fround(Math_fround(HEAPF32[16092]) - $40);
HEAPF32[$29 >> 2] = $45;
}
$47 = Math_fround(HEAPF32[$0 + 32 >> 2]);
$48 = Math_fround($47 - $25);
$49 = Math_fround($13 - $42);
$50 = $0 + 104 | 0;
$51 = $0 + 92 | 0;
$52 = Math_fround($48 - $26);
$53 = Math_fround($49 * $39);
$55 = Math_fround(Math_fround($53 - $52) - $52);
if (!($55 <= Math_fround(0.0))) {
$61 = Math_fround(Math_fround(Math_fround($26 * $53) - Math_fround($52 * Math_fround($48 + $26))) / $55);
HEAPF32[$50 >> 2] = $61;
$62 = Math_fround($48 - $61);
$67 = Math_fround($62 * Math_fround(Math_sqrt(Math_fround($49 / Math_fround($39 * Math_fround($26 - $61))))));
HEAPF32[$51 >> 2] = $67;
HEAPF32[$0 + 96 >> 2] = $62;
} else {
HEAPF32[$50 >> 2] = $48;
$70 = Math_fround($52 / Math_fround($49 * $49));
HEAPF32[$0 + 96 >> 2] = $70;
HEAPF32[$51 >> 2] = Math_fround(0.0);
}
HEAPF32[$0 + 100 >> 2] = $13;
$75 = Math_fround(Math_fround(HEAPF32[$0 + 44 >> 2]) - $43);
$78 = $0 + 84 | 0;
$85 = Math_fround(Math_fround(Math_fround($22 + $19) - Math_fround(Math_fround($75 * $75) / Math_fround($22 - $19))) * Math_fround(.5));
HEAPF32[$0 + 76 >> 2] = $85;
$86 = Math_fround($22 - $85);
HEAPF32[$0 + 80 >> 2] = $86;
$87 = Math_fround($19 - $85);
$88 = Math_fround($87 / $75);
HEAPF32[$0 + 88 >> 2] = $88;
$89 = Math_fround(+Math_atan2(+$75, +$87));
HEAPF32[$78 >> 2] = $89;
if ($86 < Math_fround(0.0)) {
$92 = Math_fround(Math_fround(HEAPF32[16092]) - $89);
HEAPF32[$78 >> 2] = $92;
}
$93 = Math_fround($47 - $43);
$94 = Math_fround($19 - $42);
$95 = $0 + 120 | 0;
$96 = $0 + 108 | 0;
$97 = Math_fround($93 - $75);
$98 = Math_fround($94 * $88);
$100 = Math_fround(Math_fround($98 - $97) - $97);
if (!($100 <= Math_fround(0.0))) {
$106 = Math_fround(Math_fround(Math_fround($75 * $98) - Math_fround($97 * Math_fround($93 + $75))) / $100);
HEAPF32[$95 >> 2] = $106;
$107 = Math_fround($93 - $106);
$112 = Math_fround($107 * Math_fround(Math_sqrt(Math_fround($94 / Math_fround($88 * Math_fround($75 - $106))))));
HEAPF32[$96 >> 2] = $112;
HEAPF32[$0 + 112 >> 2] = $107;
$117 = $0 + 116 | 0;
HEAPF32[$117 >> 2] = $19;
__ZNK6Vector16checkValidVectorEv($0);
__ZNK6Vector16checkValidVectorEv($12);
__ZNK6Vector16checkValidVectorEv($1);
__ZNK6Vector16checkValidVectorEv($18);
__ZNK6Vector16checkValidVectorEv($7);
return;
} else {
HEAPF32[$95 >> 2] = $93;
$115 = Math_fround($97 / Math_fround($94 * $94));
HEAPF32[$0 + 112 >> 2] = $115;
HEAPF32[$96 >> 2] = Math_fround(0.0);
$117 = $0 + 116 | 0;
HEAPF32[$117 >> 2] = $19;
__ZNK6Vector16checkValidVectorEv($0);
__ZNK6Vector16checkValidVectorEv($12);
__ZNK6Vector16checkValidVectorEv($1);
__ZNK6Vector16checkValidVectorEv($18);
__ZNK6Vector16checkValidVectorEv($7);
return;
}
}
function _getAttributeId($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$072 = 0, $$084 = 0, $$3 = 0, $$lcssa = 0, $$sink = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $16 = 0, $21 = 0, $28 = 0, $31 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $47 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $74 = 0, $77 = 0, $8 = 0, $81 = 0, $83 = 0, $86 = 0, $88 = 0, $9 = 0, $92 = 0, $95 = 0, $98 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$4 = sp;
$6 = HEAP32[$0 + 340 >> 2] | 0;
$7 = $6 + 80 | 0;
$8 = $6 + 92 | 0;
$9 = HEAP32[$8 >> 2] | 0;
$10 = $6 + 88 | 0;
do if (($9 | 0) == (HEAP32[$10 >> 2] | 0)) if (!((_poolGrow($7) | 0) << 24 >> 24)) {
$$3 = 0;
STACKTOP = sp;
return $$3 | 0;
} else {
$16 = HEAP32[$8 >> 2] | 0;
break;
} else $16 = $9; while (0);
HEAP32[$8 >> 2] = $16 + 1;
HEAP8[$16 >> 0] = 0;
HEAP32[$4 >> 2] = $2;
if (!(HEAP32[$8 >> 2] | 0)) {
if ((_poolGrow($7) | 0) << 24 >> 24) label = 6;
} else label = 6;
L9 : do if ((label | 0) == 6) {
$21 = $1 + 56 | 0;
while (1) {
FUNCTION_TABLE_viiiii[HEAP32[$21 >> 2] & 15]($1, $4, $3, $8, HEAP32[$10 >> 2] | 0);
if ((HEAP32[$4 >> 2] | 0) == ($3 | 0)) break;
if (!((_poolGrow($7) | 0) << 24 >> 24)) break L9;
}
$28 = $6 + 96 | 0;
if (!(HEAP32[$28 >> 2] | 0)) {
$$3 = 0;
STACKTOP = sp;
return $$3 | 0;
}
$31 = HEAP32[$8 >> 2] | 0;
do if (($31 | 0) == (HEAP32[$10 >> 2] | 0)) if (!((_poolGrow($7) | 0) << 24 >> 24)) {
$$3 = 0;
STACKTOP = sp;
return $$3 | 0;
} else {
$37 = HEAP32[$8 >> 2] | 0;
break;
} else $37 = $31; while (0);
HEAP32[$8 >> 2] = $37 + 1;
HEAP8[$37 >> 0] = 0;
$38 = HEAP32[$28 >> 2] | 0;
if (!$38) {
$$3 = 0;
STACKTOP = sp;
return $$3 | 0;
}
$40 = $38 + 1 | 0;
$42 = _lookup($6 + 40 | 0, $40, 12) | 0;
if (!$42) {
$$3 = 0;
STACKTOP = sp;
return $$3 | 0;
}
if ((HEAP32[$42 >> 2] | 0) != ($40 | 0)) {
HEAP32[$8 >> 2] = HEAP32[$28 >> 2];
$$3 = $42;
STACKTOP = sp;
return $$3 | 0;
}
$47 = HEAP32[$8 >> 2] | 0;
HEAP32[$28 >> 2] = $47;
$51 = $47;
if (!(HEAP8[$0 + 232 >> 0] | 0)) {
$$3 = $42;
STACKTOP = sp;
return $$3 | 0;
}
$52 = HEAP8[$40 >> 0] | 0;
L37 : do if ($52 << 24 >> 24 == 120) if ((HEAP8[$38 + 2 >> 0] | 0) == 109) if ((HEAP8[$38 + 3 >> 0] | 0) == 108) if ((HEAP8[$38 + 4 >> 0] | 0) == 110) if ((HEAP8[$38 + 5 >> 0] | 0) == 115) {
switch (HEAP8[$38 + 6 >> 0] | 0) {
case 0:
{
$$sink = $6 + 132 | 0;
break;
}
case 58:
{
$$sink = _lookup($6 + 60 | 0, $38 + 7 | 0, 8) | 0;
break;
}
default:
{
$$072 = 0;
$74 = 120;
break L37;
}
}
HEAP32[$42 + 4 >> 2] = $$sink;
HEAP8[$42 + 9 >> 0] = 1;
$$3 = $42;
STACKTOP = sp;
return $$3 | 0;
} else {
$$072 = 0;
$74 = 120;
} else {
$$072 = 0;
$74 = 120;
} else {
$$072 = 0;
$74 = 120;
} else {
$$072 = 0;
$74 = 120;
} else {
$$072 = 0;
$74 = $52;
} while (0);
L48 : while (1) {
switch ($74 << 24 >> 24) {
case 58:
{
break L48;
break;
}
case 0:
{
$$3 = $42;
label = 41;
break L48;
break;
}
default:
{}
}
$101 = $$072 + 1 | 0;
$$072 = $101;
$74 = HEAP8[$40 + $101 >> 0] | 0;
}
if ((label | 0) == 41) {
STACKTOP = sp;
return $$3 | 0;
}
$77 = (HEAP32[$10 >> 2] | 0) == ($51 | 0);
L54 : do if (($$072 | 0) > 0) {
$$084 = 0;
$102 = $51;
$103 = $77;
while (1) {
if ($103) {
if (!((_poolGrow($7) | 0) << 24 >> 24)) {
$$3 = 0;
break;
}
$83 = HEAP32[$8 >> 2] | 0;
} else $83 = $102;
$81 = HEAP8[$40 + $$084 >> 0] | 0;
HEAP32[$8 >> 2] = $83 + 1;
HEAP8[$83 >> 0] = $81;
$$084 = $$084 + 1 | 0;
$86 = HEAP32[$8 >> 2] | 0;
$88 = ($86 | 0) == (HEAP32[$10 >> 2] | 0);
if (($$084 | 0) >= ($$072 | 0)) {
$$lcssa = $88;
$104 = $86;
break L54;
} else {
$102 = $86;
$103 = $88;
}
}
STACKTOP = sp;
return $$3 | 0;
} else {
$$lcssa = $77;
$104 = $51;
} while (0);
do if ($$lcssa) if (!((_poolGrow($7) | 0) << 24 >> 24)) {
$$3 = 0;
STACKTOP = sp;
return $$3 | 0;
} else {
$92 = HEAP32[$8 >> 2] | 0;
break;
} else $92 = $104; while (0);
HEAP32[$8 >> 2] = $92 + 1;
HEAP8[$92 >> 0] = 0;
$95 = _lookup($6 + 60 | 0, HEAP32[$28 >> 2] | 0, 8) | 0;
HEAP32[$42 + 4 >> 2] = $95;
$98 = HEAP32[$28 >> 2] | 0;
if ((HEAP32[$95 >> 2] | 0) == ($98 | 0)) {
HEAP32[$28 >> 2] = HEAP32[$8 >> 2];
$$3 = $42;
STACKTOP = sp;
return $$3 | 0;
} else {
HEAP32[$8 >> 2] = $98;
$$3 = $42;
STACKTOP = sp;
return $$3 | 0;
}
} while (0);
$$3 = 0;
STACKTOP = sp;
return $$3 | 0;
}
function __ZNK16CircularMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $32 = 0, $4 = 0, $41 = 0, $46 = 0, $5 = 0, $55 = 0, $6 = 0, $7 = 0, $91 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$3 = sp + 36 | 0;
$4 = sp + 24 | 0;
$5 = sp + 16 | 0;
$6 = sp + 8 | 0;
$7 = sp;
__ZNK13BasicMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($0, $1, $2);
HEAP32[$3 >> 2] = HEAP32[$0 + 528 >> 2];
HEAP32[$3 + 4 >> 2] = HEAP32[$0 + 532 >> 2];
HEAP32[$3 + 8 >> 2] = HEAP32[$0 + 536 >> 2];
__ZL20printDirection3SiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKc10Direction3($1, $2, 51218, $3);
HEAP32[$4 >> 2] = HEAP32[$0 + 540 >> 2];
HEAP32[$4 + 4 >> 2] = HEAP32[$0 + 544 >> 2];
HEAP32[$4 + 8 >> 2] = HEAP32[$0 + 548 >> 2];
__ZL20printDirection3SiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKc10Direction3($1, $2, 51071, $4);
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, $2, 51093, HEAP32[$0 + 552 >> 2] | 0, HEAP32[17762] | 0);
HEAP32[$5 >> 2] = HEAP32[$0 + 556 >> 2];
HEAP32[$5 + 4 >> 2] = HEAP32[$0 + 560 >> 2];
__ZL20printDirection2SiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKc10Direction2($1, $2, 51183, $5);
$32 = $0 + 564 | 0;
if (HEAP8[$32 >> 0] | 0) {
if (!$2) __Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, (HEAP16[36078] | 0) + 1 | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2 ? 37791 : 37804, $2 ? 12 : 11) | 0;
$41 = (HEAP8[$32 >> 0] | 0) != 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $41 ? 52414 : 52419, $41 ? 4 : 5) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2 ? 34935 : 34937, $2 ? 1 : 2) | 0;
}
$46 = $0 + 565 | 0;
if (HEAP8[$46 >> 0] | 0) {
if (!$2) __Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, (HEAP16[36078] | 0) + 1 | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2 ? 37816 : 37836, $2 ? 19 : 18) | 0;
$55 = (HEAP8[$46 >> 0] | 0) != 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $55 ? 52414 : 52419, $55 ? 4 : 5) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2 ? 34935 : 34937, $2 ? 1 : 2) | 0;
}
HEAP32[$6 >> 2] = HEAP32[$0 + 568 >> 2];
HEAP32[$6 + 4 >> 2] = HEAP32[$0 + 572 >> 2];
__ZL20printDirection2SiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKc10Direction2($1, $2, 51179, $6);
HEAP32[$7 >> 2] = HEAP32[$0 + 576 >> 2];
HEAP32[$7 + 4 >> 2] = HEAP32[$0 + 580 >> 2];
__ZL20printDirection2SiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKc10Direction2($1, $2, 51098, $7);
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, $2, 51116, HEAP32[$0 + 584 >> 2] | 0, HEAP32[17762] | 0);
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, $2, 50938, HEAP32[$0 + 588 >> 2] | 0, HEAP32[17759] | 0);
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, $2, 50924, HEAP32[$0 + 592 >> 2] | 0, HEAP32[17762] | 0);
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, $2, 51205, HEAP32[$0 + 596 >> 2] | 0, HEAP32[17760] | 0);
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, $2, 51167, HEAP32[$0 + 600 >> 2] | 0, HEAP32[17762] | 0);
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, $2, 51189, HEAP32[$0 + 604 >> 2] | 0, HEAP32[17759] | 0);
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, $2, 51129, HEAP32[$0 + 608 >> 2] | 0, HEAP32[17762] | 0);
$91 = $0 + 612 | 0;
if (!(HEAP16[$91 >> 1] | 0)) {
STACKTOP = sp;
return;
}
if (!$2) __Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, (HEAP16[36078] | 0) + 1 | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2 ? 36814 : 36829, $2 ? 14 : 13) | 0;
__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEs($1, HEAP16[$91 >> 1] | 0) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2 ? 34935 : 34937, $2 ? 1 : 2) | 0;
STACKTOP = sp;
return;
}
function _parsePseudoAttribute($0, $1, $2, $3, $4, $5, $6) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
$6 = $6 | 0;
var $$0 = 0, $$0$i107130 = 0, $$0$i107132 = 0, $$0$i113 = 0, $$0100 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$5$lcssa = 0, $$5131 = 0, $$sink$sink = 0, $11 = 0, $13 = 0, $18 = 0, $20 = 0, $33 = 0, $44 = 0, $51 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$7 = sp + 4 | 0;
$8 = sp;
$9 = sp + 8 | 0;
if (($1 | 0) == ($2 | 0)) {
HEAP32[$3 >> 2] = 0;
$$0 = 1;
STACKTOP = sp;
return $$0 | 0;
}
HEAP32[$7 >> 2] = $1;
HEAP32[$8 >> 2] = $9;
$11 = $0 + 56 | 0;
$13 = $9 + 1 | 0;
FUNCTION_TABLE_viiiii[HEAP32[$11 >> 2] & 15]($0, $7, $2, $8, $13);
switch (((HEAP32[$8 >> 2] | 0) == ($9 | 0) ? -1 : HEAP8[$9 >> 0] | 0) | 0) {
case 9:
case 10:
case 13:
case 32:
break;
default:
{
HEAP32[$6 >> 2] = $1;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
}
$18 = $0 + 64 | 0;
$$0100 = $1;
L9 : while (1) {
$20 = $$0100 + (HEAP32[$18 >> 2] | 0) | 0;
HEAP32[$7 >> 2] = $20;
HEAP32[$8 >> 2] = $9;
FUNCTION_TABLE_viiiii[HEAP32[$11 >> 2] & 15]($0, $7, $2, $8, $13);
switch (((HEAP32[$8 >> 2] | 0) == ($9 | 0) ? -1 : HEAP8[$9 >> 0] | 0) | 0) {
case 9:
case 10:
case 13:
case 32:
{
$$0100 = $20;
break;
}
default:
break L9;
}
}
if (($20 | 0) == ($2 | 0)) {
HEAP32[$3 >> 2] = 0;
$$0 = 1;
STACKTOP = sp;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $20;
$$1 = $20;
L16 : while (1) {
HEAP32[$7 >> 2] = $$1;
HEAP32[$8 >> 2] = $9;
FUNCTION_TABLE_viiiii[HEAP32[$11 >> 2] & 15]($0, $7, $2, $8, $13);
switch (((HEAP32[$8 >> 2] | 0) == ($9 | 0) ? -1 : HEAP8[$9 >> 0] | 0) | 0) {
case -1:
{
label = 11;
break L16;
break;
}
case 61:
{
label = 12;
break L16;
break;
}
case 9:
case 10:
case 13:
case 32:
{
label = 13;
break L16;
break;
}
default:
{}
}
$$1 = $$1 + (HEAP32[$18 >> 2] | 0) | 0;
}
L19 : do if ((label | 0) == 11) {
HEAP32[$6 >> 2] = $$1;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else if ((label | 0) == 12) {
HEAP32[$4 >> 2] = $$1;
$$3 = $$1;
} else if ((label | 0) == 13) {
HEAP32[$4 >> 2] = $$1;
$$2 = $$1;
L24 : while (1) {
$33 = $$2 + (HEAP32[$18 >> 2] | 0) | 0;
HEAP32[$7 >> 2] = $33;
HEAP32[$8 >> 2] = $9;
FUNCTION_TABLE_viiiii[HEAP32[$11 >> 2] & 15]($0, $7, $2, $8, $13);
switch (((HEAP32[$8 >> 2] | 0) == ($9 | 0) ? -1 : HEAP8[$9 >> 0] | 0) | 0) {
case 61:
{
$$3 = $33;
break L19;
break;
}
case 9:
case 10:
case 13:
case 32:
{
$$2 = $33;
break;
}
default:
break L24;
}
}
HEAP32[$6 >> 2] = $33;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} while (0);
if (($$3 | 0) == (HEAP32[$3 >> 2] | 0)) {
HEAP32[$6 >> 2] = $$3;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
$$sink$sink = $$3;
L33 : while (1) {
$44 = $$sink$sink + (HEAP32[$18 >> 2] | 0) | 0;
HEAP32[$7 >> 2] = $44;
HEAP32[$8 >> 2] = $9;
FUNCTION_TABLE_viiiii[HEAP32[$11 >> 2] & 15]($0, $7, $2, $8, $13);
$$0$i113 = (HEAP32[$8 >> 2] | 0) == ($9 | 0) ? -1 : HEAP8[$9 >> 0] | 0;
switch ($$0$i113 | 0) {
case 9:
case 10:
case 13:
case 32:
{
$$sink$sink = $44;
break;
}
case 34:
case 39:
{
break L33;
break;
}
default:
{
label = 21;
break L33;
}
}
}
if ((label | 0) == 21) {
HEAP32[$6 >> 2] = $44;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
$51 = $44 + (HEAP32[$18 >> 2] | 0) | 0;
HEAP32[$5 >> 2] = $51;
HEAP32[$7 >> 2] = $51;
HEAP32[$8 >> 2] = $9;
FUNCTION_TABLE_viiiii[HEAP32[$11 >> 2] & 15]($0, $7, $2, $8, $13);
$$0$i107130 = (HEAP32[$8 >> 2] | 0) == ($9 | 0) ? -1 : HEAP8[$9 >> 0] | 0;
L39 : do if (($$0$i107130 | 0) == ($$0$i113 | 0)) $$5$lcssa = $51; else {
$$0$i107132 = $$0$i107130;
$$5131 = $51;
L40 : while (1) {
if (($$0$i107132 + -48 | 0) >>> 0 > 9 & (($$0$i107132 & -33) + -65 | 0) >>> 0 > 25) switch ($$0$i107132 | 0) {
case 45:
case 46:
case 95:
break;
default:
break L40;
}
$63 = $$5131 + (HEAP32[$18 >> 2] | 0) | 0;
HEAP32[$7 >> 2] = $63;
HEAP32[$8 >> 2] = $9;
FUNCTION_TABLE_viiiii[HEAP32[$11 >> 2] & 15]($0, $7, $2, $8, $13);
$$0$i107132 = (HEAP32[$8 >> 2] | 0) == ($9 | 0) ? -1 : HEAP8[$9 >> 0] | 0;
if (($$0$i107132 | 0) == ($$0$i113 | 0)) {
$$5$lcssa = $63;
break L39;
} else $$5131 = $63;
}
HEAP32[$6 >> 2] = $$5131;
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} while (0);
HEAP32[$6 >> 2] = $$5$lcssa + (HEAP32[$18 >> 2] | 0);
$$0 = 1;
STACKTOP = sp;
return $$0 | 0;
}
function __ZN7GestureD2Ev($0) {
$0 = $0 | 0;
var $$016 = 0, $$017 = 0, $$020 = 0, $$lcssa39 = 0, $$pr = 0, $$pr$1 = 0, $$pr$2 = 0, $$pr$3 = 0, $$pr$4 = 0, $$pr$5 = 0, $$pr$6 = 0, $$pr$7 = 0, $1 = 0, $10 = 0, $101 = 0, $109 = 0, $117 = 0, $12 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $29 = 0, $30 = 0, $32 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $44 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $63 = 0, $68 = 0, $69 = 0, $7 = 0, $77 = 0, $8 = 0, $85 = 0, $93 = 0;
$1 = $0 + 36 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if ($2 | 0) {
__ZdlPv($2);
HEAP32[$1 >> 2] = 0;
}
$4 = $0 + 40 | 0;
$5 = HEAP32[$4 >> 2] | 0;
if ($5 | 0) {
__ZdlPv($5);
HEAP32[$4 >> 2] = 0;
}
$7 = $0 + 20 | 0;
$8 = HEAP32[$7 >> 2] | 0;
do if ($8 | 0) {
__THREW__ = 0;
invoke_vi(131, $8 | 0);
$10 = __THREW__;
__THREW__ = 0;
if (!($10 & 1)) {
__ZdlPv($8);
HEAP32[$7 >> 2] = 0;
break;
}
$12 = ___cxa_find_matching_catch_2() | 0;
$13 = tempRet0;
__ZdlPv($8);
$$016 = $13;
$$017 = $12;
___resumeException($$017 | 0);
} while (0);
$14 = $0 + 24 | 0;
$15 = HEAP32[$14 >> 2] | 0;
do if ($15 | 0) {
__THREW__ = 0;
invoke_vi(131, $15 | 0);
$17 = __THREW__;
__THREW__ = 0;
if (!($17 & 1)) {
__ZdlPv($15);
HEAP32[$14 >> 2] = 0;
break;
}
$19 = ___cxa_find_matching_catch_2() | 0;
$20 = tempRet0;
__ZdlPv($15);
$$016 = $20;
$$017 = $19;
___resumeException($$017 | 0);
} while (0);
HEAP32[$0 + 28 >> 2] = 0;
HEAP32[$0 + 32 >> 2] = 0;
$23 = $0 + 44 | 0;
$24 = HEAP32[$23 >> 2] | 0;
if ($24 | 0) {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$24 >> 2] | 0) + 4 >> 2] & 255]($24);
HEAP32[$23 >> 2] = 0;
}
$29 = $0 + 48 | 0;
$30 = HEAP32[$29 >> 2] | 0;
if ($30 | 0) {
$32 = HEAP32[$30 >> 2] | 0;
if (!$32) $$pr = $30; else {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$32 >> 2] | 0) + 4 >> 2] & 255]($32);
HEAP32[HEAP32[$29 >> 2] >> 2] = 0;
$$pr = HEAP32[$29 >> 2] | 0;
}
$39 = HEAP32[$$pr + 4 >> 2] | 0;
if (!$39) $$pr$1 = $$pr; else {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$39 >> 2] | 0) + 4 >> 2] & 255]($39);
HEAP32[(HEAP32[$29 >> 2] | 0) + 4 >> 2] = 0;
$$pr$1 = HEAP32[$29 >> 2] | 0;
}
$77 = HEAP32[$$pr$1 + 8 >> 2] | 0;
if (!$77) $$pr$2 = $$pr$1; else {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$77 >> 2] | 0) + 4 >> 2] & 255]($77);
HEAP32[(HEAP32[$29 >> 2] | 0) + 8 >> 2] = 0;
$$pr$2 = HEAP32[$29 >> 2] | 0;
}
$85 = HEAP32[$$pr$2 + 12 >> 2] | 0;
if (!$85) $$pr$3 = $$pr$2; else {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$85 >> 2] | 0) + 4 >> 2] & 255]($85);
HEAP32[(HEAP32[$29 >> 2] | 0) + 12 >> 2] = 0;
$$pr$3 = HEAP32[$29 >> 2] | 0;
}
$93 = HEAP32[$$pr$3 + 16 >> 2] | 0;
if (!$93) $$pr$4 = $$pr$3; else {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$93 >> 2] | 0) + 4 >> 2] & 255]($93);
HEAP32[(HEAP32[$29 >> 2] | 0) + 16 >> 2] = 0;
$$pr$4 = HEAP32[$29 >> 2] | 0;
}
$101 = HEAP32[$$pr$4 + 20 >> 2] | 0;
if (!$101) $$pr$5 = $$pr$4; else {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$101 >> 2] | 0) + 4 >> 2] & 255]($101);
HEAP32[(HEAP32[$29 >> 2] | 0) + 20 >> 2] = 0;
$$pr$5 = HEAP32[$29 >> 2] | 0;
}
$109 = HEAP32[$$pr$5 + 24 >> 2] | 0;
if (!$109) $$pr$6 = $$pr$5; else {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$109 >> 2] | 0) + 4 >> 2] & 255]($109);
HEAP32[(HEAP32[$29 >> 2] | 0) + 24 >> 2] = 0;
$$pr$6 = HEAP32[$29 >> 2] | 0;
}
$117 = HEAP32[$$pr$6 + 28 >> 2] | 0;
if (!$117) $$pr$7 = $$pr$6; else {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$117 >> 2] | 0) + 4 >> 2] & 255]($117);
HEAP32[(HEAP32[$29 >> 2] | 0) + 28 >> 2] = 0;
$$pr$7 = HEAP32[$29 >> 2] | 0;
}
if ($$pr$7 | 0) {
_free($$pr$7);
HEAP32[$29 >> 2] = 0;
}
}
$41 = $0 + 4 | 0;
$42 = HEAP32[$41 >> 2] | 0;
do if ($42 | 0) {
$44 = HEAP32[$0 >> 2] | 0;
if ((HEAP32[(HEAP32[$44 + 104 >> 2] | 0) + 12 >> 2] | 0) > 0) {
$$020 = 0;
$125 = $44;
$53 = $42;
while (1) {
$54 = HEAP32[$53 + ($$020 << 2) >> 2] | 0;
if (!$54) {
$51 = $53;
$63 = $125;
} else {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$54 >> 2] | 0) + 4 >> 2] & 255]($54);
HEAP32[(HEAP32[$41 >> 2] | 0) + ($$020 << 2) >> 2] = 0;
$51 = HEAP32[$41 >> 2] | 0;
$63 = HEAP32[$0 >> 2] | 0;
}
$$020 = $$020 + 1 | 0;
if (($$020 | 0) >= (HEAP32[(HEAP32[$63 + 104 >> 2] | 0) + 12 >> 2] | 0)) break; else {
$125 = $63;
$53 = $51;
}
}
if (!$51) break; else $$lcssa39 = $51;
} else $$lcssa39 = $42;
_free($$lcssa39);
HEAP32[$41 >> 2] = 0;
} while (0);
$68 = $0 + 8 | 0;
$69 = HEAP32[$68 >> 2] | 0;
if (!$69) {
HEAP32[$0 >> 2] = 0;
return;
}
_free($69);
HEAP32[$68 >> 2] = 0;
HEAP32[$0 >> 2] = 0;
return;
}
function __ZN13WristMovement17GetCurrentPostureER19TwoHConcretePosturefb($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
var $$30 = f0, $10 = f0, $101 = f0, $103 = f0, $104 = 0, $105 = 0, $108 = 0, $110 = 0, $112 = 0, $12 = f0, $13 = 0, $14 = 0, $15 = f0, $21 = f0, $22 = f0, $23 = f0, $27 = 0, $29 = 0, $31 = 0, $33 = f0, $35 = f0, $38 = 0, $39 = 0, $4 = 0, $41 = f0, $42 = f0, $43 = f0, $47 = f0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $53 = f0, $57 = 0, $6 = 0, $62 = 0, $66 = 0, $68 = f0, $7 = f0, $73 = f0, $75 = f0, $8 = 0, $84 = 0, $94 = 0, $99 = f0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$vararg_buffer = sp;
$4 = sp + 32 | 0;
$5 = sp + 16 | 0;
$6 = $0 + 40 | 0;
$7 = Math_fround(HEAPF32[$6 >> 2]);
$8 = $0 + 44 | 0;
$10 = Math_fround($7 - Math_fround(HEAPF32[$8 >> 2]));
if (!($10 <= Math_fround(0.0))) {
$12 = Math_fround($2 / $10);
$13 = $12 < Math_fround(0.0);
$14 = $12 > Math_fround(1.0);
$15 = $14 ? Math_fround(1.0) : $12;
$21 = $13 ? Math_fround(0.0) : $15;
} else $21 = Math_fround(1.0);
$22 = Math_fround(__ZNK10Trajectory16lookupByFractionEf(HEAP32[66492 + (HEAP32[$0 + 12 >> 2] << 2) >> 2] | 0, $21));
$23 = Math_fround(Math_fround(1.0) - $22);
if (0) {
$27 = HEAP32[$0 + 4 >> 2] | 0;
$29 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[16658] | 0, $27) | 0;
HEAP32[$vararg_buffer >> 2] = $27;
HEAP32[$vararg_buffer + 4 >> 2] = $29;
HEAPF64[$vararg_buffer + 8 >> 3] = +$2;
__Z7eprintfPKcz(35945, $vararg_buffer);
}
$31 = $0 + 8 | 0;
__ZNK25TwoHConcretePostureChange11interpolateER19TwoHConcretePosturef12SET_OF_HANDSb($0 + 60 | 0, $1, $3 ? $22 : $23, HEAP32[$31 >> 2] | 0, $3);
$33 = Math_fround(HEAPF32[$6 >> 2]);
$35 = Math_fround($33 - Math_fround(HEAPF32[$8 >> 2]));
if ($2 <= Math_fround(0.0) | $35 <= $2) {
STACKTOP = sp;
return;
}
$38 = $0 + 528 | 0;
$39 = HEAP32[$38 >> 2] | 0;
if (!$39) {
STACKTOP = sp;
return;
}
$41 = Math_fround($35 - $2);
$42 = Math_fround(($3 ? $2 : $41) / $35);
$43 = Math_fround(HEAPF32[589]);
$47 = Math_fround($42 * Math_fround($43 * Math_fround(HEAPF32[$0 + 544 >> 2])));
HEAPF32[$4 >> 2] = Math_fround(0.0);
$48 = $4 + 4 | 0;
HEAPF32[$48 >> 2] = Math_fround(0.0);
$49 = $4 + 8 | 0;
HEAPF32[$49 >> 2] = Math_fround(0.0);
$50 = $4 + 12 | 0;
HEAPF32[$50 >> 2] = Math_fround(1.0);
if (($39 & -2 | 0) == 4) {
$53 = Math_fround(-$47);
$$30 = ($39 | 0) == 4 ? $53 : $47;
__ZN6VectorC2Efff($5, Math_fround(-Math_fround(+Math_cos(+$$30))), Math_fround(0.0), Math_fround(+Math_sin(+$$30)));
$57 = HEAP32[$31 >> 2] | 0;
switch ($57 | 0) {
case 3:
case 5:
{
__ZN10Quaternion15setFromVecAngleERK6Vectorfb($1 + 76 | 0, $5, Math_fround(HEAPF32[$0 + 536 >> 2]), 1);
$62 = HEAP32[$31 >> 2] | 0;
break;
}
default:
$62 = $57;
}
if (($62 | 1 | 0) == 5) {
$66 = $5 + (HEAP16[4149] << 2) | 0;
$68 = Math_fround(-Math_fround(HEAPF32[$66 >> 2]));
HEAPF32[$66 >> 2] = $68;
__ZN10Quaternion15setFromVecAngleERK6Vectorfb($1 + 188 | 0, $5, Math_fround(HEAPF32[$0 + 536 >> 2]), 1);
}
} else {
$73 = Math_fround(HEAPF32[$0 + 536 >> 2]);
$75 = Math_fround(HEAPF32[$0 + 540 >> 2]);
__ZN10Quaternion15setFromVecAngleERK6Vectorfb($4, $0 + 548 | 0, Math_fround(Math_fround(Math_fround($73 + $75) * Math_fround(.5)) + Math_fround(Math_fround(Math_fround(+Math_sin(+$47)) * Math_fround($73 - $75)) * Math_fround(.5))), 1);
$84 = HEAP32[$31 >> 2] | 0;
switch ($84 | 0) {
case 3:
case 5:
{
HEAP32[$1 + 76 >> 2] = HEAP32[$4 >> 2];
HEAP32[$1 + 80 >> 2] = HEAP32[$48 >> 2];
HEAP32[$1 + 84 >> 2] = HEAP32[$49 >> 2];
HEAP32[$1 + 88 >> 2] = HEAP32[$50 >> 2];
$94 = HEAP32[$31 >> 2] | 0;
break;
}
default:
$94 = $84;
}
if (($94 | 1 | 0) == 5) {
if ((HEAP32[$38 >> 2] | 0) == 2) {
$108 = HEAP32[$4 >> 2] | 0;
$110 = HEAP32[$48 >> 2] | 0;
$112 = HEAP32[$49 >> 2] | 0;
} else {
$99 = Math_fround(-Math_fround(HEAPF32[$4 >> 2]));
HEAPF32[$4 >> 2] = $99;
$101 = Math_fround(-Math_fround(HEAPF32[$48 >> 2]));
HEAPF32[$48 >> 2] = $101;
$103 = Math_fround(-Math_fround(HEAPF32[$49 >> 2]));
HEAPF32[$49 >> 2] = $103;
$104 = (HEAPF32[tempDoublePtr >> 2] = $99, HEAP32[tempDoublePtr >> 2] | 0);
$105 = (HEAPF32[tempDoublePtr >> 2] = $101, HEAP32[tempDoublePtr >> 2] | 0);
$108 = $104;
$110 = $105;
$112 = (HEAPF32[tempDoublePtr >> 2] = $103, HEAP32[tempDoublePtr >> 2] | 0);
}
HEAP32[$1 + 188 >> 2] = $108;
HEAP32[$1 + 192 >> 2] = $110;
HEAP32[$1 + 196 >> 2] = $112;
HEAP32[$1 + 200 >> 2] = HEAP32[$50 >> 2];
}
}
STACKTOP = sp;
return;
}
function __Z18MakeTrailingMorphsPK18AbstractTimedMorph($0) {
$0 = $0 | 0;
var $$0$i = 0, $$043 = 0, $$pre$phiZ2D = 0, $$tr44 = 0, $10 = 0, $12 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, $24 = 0, $28 = f0, $31 = f0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $41 = 0, $43 = 0, $63 = 0, $65 = 0, $67 = 0, $7 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $83 = 0, $86 = 0, $90 = 0, $91 = 0, $92 = 0, $94 = 0, $sext = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$0) {
STACKTOP = sp;
return;
} else $$tr44 = $0;
L3 : while (1) {
switch (HEAP32[$$tr44 + 20 >> 2] | 0) {
case 1:
{
label = 3;
break L3;
break;
}
case 2:
{
label = 23;
break L3;
break;
}
case 3:
break;
default:
{
label = 29;
break L3;
}
}
$63 = HEAP32[$$tr44 + 24 >> 2] | 0;
$65 = HEAP32[$63 + 12 >> 2] | 0;
if (($65 << 16 | 0) <= 0) {
label = 29;
break;
}
$67 = $65 & 65535;
if (!(($67 | 0) != 0 & ($65 | 0) >= ($67 | 0))) {
label = 29;
break;
}
$73 = HEAP32[(HEAP32[$63 >> 2] | 0) + ($67 + -1 << 2) >> 2] | 0;
if (!$73) {
label = 29;
break;
} else $$tr44 = $73;
}
if ((label | 0) == 3) {
$4 = $$tr44 + 48 | 0;
if (!(HEAP8[$4 >> 0] | 0)) {
STACKTOP = sp;
return;
}
$7 = $$tr44 + 49 | 0;
if (!(HEAP8[$7 >> 0] | 0)) {
STACKTOP = sp;
return;
}
$10 = HEAP32[16662] | 0;
if (!$10) {
$12 = __Znwj(16) | 0;
HEAP32[$12 + 4 >> 2] = 10;
HEAP32[$12 + 12 >> 2] = 0;
HEAP32[$12 >> 2] = 0;
HEAP32[$12 + 8 >> 2] = 0;
HEAP32[16662] = $12;
if (!(HEAP8[$4 >> 0] | 0)) {
$$0$i = 0;
$34 = $12;
} else if (!(HEAP8[$7 >> 0] | 0)) {
$$0$i = 0;
$34 = $12;
} else {
$94 = $12;
label = 8;
}
} else {
$94 = $10;
label = 8;
}
if ((label | 0) == 8) {
$18 = __Znwj(52) | 0;
$19 = $18 + 4 | 0;
HEAP32[$18 >> 2] = 1920;
$20 = $18 + 24 | 0;
$23 = $$tr44 + 4 | 0;
HEAP32[$19 >> 2] = HEAP32[$23 >> 2];
HEAP32[$19 + 4 >> 2] = HEAP32[$23 + 4 >> 2];
HEAP32[$19 + 8 >> 2] = HEAP32[$23 + 8 >> 2];
HEAP32[$19 + 12 >> 2] = HEAP32[$23 + 12 >> 2];
HEAP32[$19 + 16 >> 2] = HEAP32[$23 + 16 >> 2];
$24 = $$tr44 + 24 | 0;
HEAP32[$20 >> 2] = HEAP32[$24 >> 2];
HEAP32[$20 + 4 >> 2] = HEAP32[$24 + 4 >> 2];
HEAP32[$20 + 8 >> 2] = HEAP32[$24 + 8 >> 2];
HEAP32[$20 + 12 >> 2] = HEAP32[$24 + 12 >> 2];
HEAP32[$20 + 16 >> 2] = HEAP32[$24 + 16 >> 2];
HEAP32[$20 + 20 >> 2] = HEAP32[$24 + 20 >> 2];
HEAP8[$18 + 48 >> 0] = 1;
HEAP8[$18 + 49 >> 0] = 0;
HEAPF32[$19 >> 2] = Math_fround(0.0);
HEAPF32[$18 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$18 + 12 >> 2] = Math_fround(0.0);
$28 = Math_fround(HEAPF32[$$tr44 + 16 >> 2]);
$31 = Math_fround($28 - Math_fround(HEAPF32[$$tr44 + 12 >> 2]));
HEAPF32[$18 + 16 >> 2] = $31;
$$0$i = $18;
$34 = $94;
}
$33 = $34 + 12 | 0;
$35 = HEAP32[$33 >> 2] | 0;
if (($35 | 0) >= 0) {
if ((HEAP32[$34 + 8 >> 2] | 0) > ($35 | 0)) {
$$pre$phiZ2D = $35 + 1 | 0;
label = 13;
} else {
$41 = HEAP32[$34 + 4 >> 2] | 0;
$43 = $35 + 1 | 0;
__ZN13DynamicArrayPI18AbstractTimedMorphE6resizeEi($34, ($41 | 0) > ($35 | 0) ? $41 : $43 + ($35 >>> 1) | 0);
if ((HEAP32[$33 >> 2] | 0) <= ($35 | 0)) {
$$pre$phiZ2D = $43;
label = 13;
}
}
if ((label | 0) == 13) HEAP32[$33 >> 2] = $$pre$phiZ2D;
HEAP32[(HEAP32[$34 >> 2] | 0) + ($35 << 2) >> 2] = $$0$i;
}
if (!0) {
STACKTOP = sp;
return;
}
HEAP32[$vararg_buffer >> 2] = HEAP32[(HEAP32[16662] | 0) + 12 >> 2];
__Z7eprintfPKcz(46030, $vararg_buffer);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$tr44 >> 2] | 0) + 40 >> 2] & 255]($$tr44, HEAP32[16082] | 0);
if (!$$0$i) __Z5eputsPKc(61277); else FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$0$i >> 2] | 0) + 40 >> 2] & 255]($$0$i, HEAP32[16082] | 0);
__Z5eputcc(10);
STACKTOP = sp;
return;
} else if ((label | 0) == 23) {
$75 = $$tr44 + 24 | 0;
$76 = HEAP32[$75 >> 2] | 0;
$sext = HEAP32[$76 + 12 >> 2] << 16;
$79 = $sext >> 16;
if (($sext | 0) > 0) {
$$043 = 0;
$83 = $76;
$86 = 0;
} else {
STACKTOP = sp;
return;
}
while (1) {
if ($$043 << 16 >> 16 < 0) $90 = 0; else if ((HEAP32[$83 + 12 >> 2] | 0) > ($86 | 0)) $90 = HEAP32[(HEAP32[$83 >> 2] | 0) + ($86 << 2) >> 2] | 0; else $90 = 0;
__Z18MakeTrailingMorphsPK18AbstractTimedMorph($90);
$91 = $$043 + 1 << 16 >> 16;
$92 = $91 << 16 >> 16;
if (($79 | 0) <= ($92 | 0)) break;
$$043 = $91;
$83 = HEAP32[$75 >> 2] | 0;
$86 = $92;
}
STACKTOP = sp;
return;
} else if ((label | 0) == 29) {
STACKTOP = sp;
return;
}
}
function _big2_scanPercent($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$058 = 0, $$05881 = 0, $$05883 = 0, $$pn82 = 0, $$pn82$phi = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $43 = 0, $45 = 0, $47 = 0, $5 = 0, $56 = 0, $57 = 0, $7 = 0, label = 0;
if (($1 | 0) == ($2 | 0)) {
$$0 = -22;
return $$0 | 0;
}
$5 = HEAP8[$1 >> 0] | 0;
L4 : do switch ($5 << 24 >> 24) {
case 0:
{
$10 = HEAP8[$1 + 1 >> 0] | 0;
switch (HEAP8[$0 + 72 + ($10 & 255) >> 0] | 0) {
case 29:
{
$22 = $10;
label = 8;
break L4;
break;
}
case 24:
case 22:
{
break L4;
break;
}
case 7:
{
label = 14;
break L4;
break;
}
case 5:
{
if (($2 - $1 | 0) < 2) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
case 6:
{
if (($2 - $1 | 0) < 3) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
case 30:
case 9:
case 10:
case 21:
{
HEAP32[$3 >> 2] = $1;
$$0 = 22;
return $$0 | 0;
}
default:
{
label = 17;
break L4;
}
}
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 14;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 17;
break;
}
case -1:
{
$7 = HEAP8[$1 + 1 >> 0] | 0;
if (($7 & 255) > 253) label = 17; else {
$22 = $7;
label = 8;
}
break;
}
default:
{
$22 = HEAP8[$1 + 1 >> 0] | 0;
label = 8;
}
} while (0);
if ((label | 0) == 8) {
$21 = $22 & 255;
if (!(1 << ($21 & 31) & HEAP32[3996 + (($21 >>> 5 | HEAPU8[59947 + ($5 & 255) >> 0] << 3) << 2) >> 2])) {
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
} else if ((label | 0) == 14) {
if (($2 - $1 | 0) < 4) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 17) {
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
$$05881 = $1 + 2 | 0;
if (($$05881 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
$15 = $0 + 72 | 0;
$$05883 = $$05881;
$$pn82 = $1;
L36 : while (1) {
$43 = HEAP8[$$05883 >> 0] | 0;
switch ($43 << 24 >> 24) {
case -37:
case -38:
case -39:
case -40:
{
label = 29;
break L36;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 32;
break L36;
break;
}
case 0:
{
$47 = HEAP8[$$pn82 + 3 >> 0] | 0;
switch (HEAP8[$15 + ($47 & 255) >> 0] | 0) {
case 7:
{
label = 29;
break L36;
break;
}
case 5:
{
label = 25;
break L36;
break;
}
case 6:
{
label = 27;
break L36;
break;
}
case 18:
{
label = 31;
break L36;
break;
}
case 29:
{
$57 = $47;
label = 22;
break;
}
case 27:
case 26:
case 25:
case 24:
case 22:
break;
default:
{
label = 32;
break L36;
}
}
break;
}
case -1:
{
$45 = HEAP8[$$pn82 + 3 >> 0] | 0;
if (($45 & 255) > 253) {
label = 32;
break L36;
} else {
$57 = $45;
label = 22;
}
break;
}
default:
{
$57 = HEAP8[$$pn82 + 3 >> 0] | 0;
label = 22;
}
}
if ((label | 0) == 22) {
label = 0;
$56 = $57 & 255;
if (!(1 << ($56 & 31) & HEAP32[3996 + (($56 >>> 5 | HEAPU8[60203 + ($43 & 255) >> 0] << 3) << 2) >> 2])) {
label = 24;
break;
}
}
$$058 = $$05883 + 2 | 0;
if (($$058 | 0) == ($2 | 0)) {
$$0 = -1;
label = 33;
break;
} else {
$$pn82$phi = $$05883;
$$05883 = $$058;
$$pn82 = $$pn82$phi;
}
}
if ((label | 0) == 24) {
HEAP32[$3 >> 2] = $$05883;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 25) {
if (($2 - $$05883 | 0) < 2) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $$05883;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 27) {
if (($2 - $$05883 | 0) < 3) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $$05883;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 29) {
if (($2 - $$05883 | 0) < 4) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $$05883;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 31) {
HEAP32[$3 >> 2] = $$pn82 + 4;
$$0 = 28;
return $$0 | 0;
} else if ((label | 0) == 32) {
HEAP32[$3 >> 2] = $$05883;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 33) return $$0 | 0;
return 0;
}
function _little2_scanPercent($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$058 = 0, $$05881 = 0, $$05883 = 0, $$pn82 = 0, $$pn82$phi = 0, $14 = 0, $20 = 0, $21 = 0, $43 = 0, $44 = 0, $45 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $9 = 0, label = 0;
if (($1 | 0) == ($2 | 0)) {
$$0 = -22;
return $$0 | 0;
}
$6 = HEAP8[$1 + 1 >> 0] | 0;
L4 : do switch ($6 << 24 >> 24) {
case 0:
{
$9 = HEAP8[$1 >> 0] | 0;
switch (HEAP8[$0 + 72 + ($9 & 255) >> 0] | 0) {
case 29:
{
$21 = $9;
label = 8;
break L4;
break;
}
case 24:
case 22:
{
break L4;
break;
}
case 7:
{
label = 14;
break L4;
break;
}
case 5:
{
if (($2 - $1 | 0) < 2) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
case 6:
{
if (($2 - $1 | 0) < 3) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
case 30:
case 9:
case 10:
case 21:
{
HEAP32[$3 >> 2] = $1;
$$0 = 22;
return $$0 | 0;
}
default:
{
label = 17;
break L4;
}
}
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 14;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 17;
break;
}
case -1:
{
$7 = HEAP8[$1 >> 0] | 0;
if (($7 & 255) > 253) label = 17; else {
$21 = $7;
label = 8;
}
break;
}
default:
{
$21 = HEAP8[$1 >> 0] | 0;
label = 8;
}
} while (0);
if ((label | 0) == 8) {
$20 = $21 & 255;
if (!(1 << ($20 & 31) & HEAP32[3996 + (($20 >>> 5 | HEAPU8[59947 + ($6 & 255) >> 0] << 3) << 2) >> 2])) {
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
} else if ((label | 0) == 14) {
if (($2 - $1 | 0) < 4) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 17) {
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
$$05881 = $1 + 2 | 0;
if (($$05881 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
$14 = $0 + 72 | 0;
$$05883 = $$05881;
$$pn82 = $1;
L36 : while (1) {
$43 = HEAP8[$$pn82 + 3 >> 0] | 0;
switch ($43 << 24 >> 24) {
case -37:
case -38:
case -39:
case -40:
{
label = 29;
break L36;
break;
}
case -33:
case -34:
case -35:
case -36:
{
label = 32;
break L36;
break;
}
case 0:
{
$45 = HEAP8[$$05883 >> 0] | 0;
switch (HEAP8[$14 + ($45 & 255) >> 0] | 0) {
case 7:
{
label = 29;
break L36;
break;
}
case 5:
{
label = 25;
break L36;
break;
}
case 6:
{
label = 27;
break L36;
break;
}
case 18:
{
label = 31;
break L36;
break;
}
case 29:
{
$55 = $45;
label = 22;
break;
}
case 27:
case 26:
case 25:
case 24:
case 22:
break;
default:
{
label = 32;
break L36;
}
}
break;
}
case -1:
{
$44 = HEAP8[$$05883 >> 0] | 0;
if (($44 & 255) > 253) {
label = 32;
break L36;
} else {
$55 = $44;
label = 22;
}
break;
}
default:
{
$55 = HEAP8[$$05883 >> 0] | 0;
label = 22;
}
}
if ((label | 0) == 22) {
label = 0;
$54 = $55 & 255;
if (!(1 << ($54 & 31) & HEAP32[3996 + (($54 >>> 5 | HEAPU8[60203 + ($43 & 255) >> 0] << 3) << 2) >> 2])) {
label = 24;
break;
}
}
$$058 = $$05883 + 2 | 0;
if (($$058 | 0) == ($2 | 0)) {
$$0 = -1;
label = 33;
break;
} else {
$$pn82$phi = $$05883;
$$05883 = $$058;
$$pn82 = $$pn82$phi;
}
}
if ((label | 0) == 24) {
HEAP32[$3 >> 2] = $$05883;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 25) {
if (($2 - $$05883 | 0) < 2) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $$05883;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 27) {
if (($2 - $$05883 | 0) < 3) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $$05883;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 29) {
if (($2 - $$05883 | 0) < 4) {
$$0 = -2;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $$05883;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 31) {
HEAP32[$3 >> 2] = $$pn82 + 4;
$$0 = 28;
return $$0 | 0;
} else if ((label | 0) == 32) {
HEAP32[$3 >> 2] = $$05883;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 33) return $$0 | 0;
return 0;
}
function __ZNK16AtomicTimedMorph14getMorphAmountEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $$0 = f0, $$pre$phi29Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $12 = f0, $16 = f0, $18 = f0, $21 = f0, $25 = f0, $3 = f0, $32 = 0, $34 = f0, $41 = 0, $42 = 0, $44 = 0.0, $52 = 0, $53 = 0, $55 = 0.0, $58 = f0, $62 = f0, $63 = 0, $64 = f0, $67 = f0, $72 = f0, $78 = 0, $81 = 0.0, $87 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer18 = 0, $vararg_buffer24 = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 160 | 0;
$vararg_buffer24 = sp + 128 | 0;
$vararg_buffer18 = sp + 96 | 0;
$vararg_buffer13 = sp + 72 | 0;
$vararg_buffer8 = sp + 48 | 0;
$vararg_buffer3 = sp + 24 | 0;
$vararg_buffer = sp;
$3 = Math_fround(HEAPF32[$0 + 4 >> 2]);
if ($3 >= $1) {
if (!0) {
$$0 = Math_fround(0.0);
STACKTOP = sp;
return Math_fround($$0);
}
$10 = __ZNK28InvertibleDynamicStringArray14valueFromIndexEi(HEAP32[17820] | 0, HEAP32[$0 + 24 >> 2] | 0) | 0;
HEAPF64[$vararg_buffer >> 3] = +$1;
HEAP32[$vararg_buffer + 8 >> 2] = $10;
HEAPF64[$vararg_buffer + 16 >> 3] = 0.0;
__Z7eprintfPKcz(34607, $vararg_buffer);
$$0 = Math_fround(0.0);
STACKTOP = sp;
return Math_fround($$0);
}
$12 = Math_fround(HEAPF32[$0 + 8 >> 2]);
if ($12 >= $1) {
$16 = Math_fround(Math_fround($1 - $3) / Math_fround($12 - $3));
$18 = Math_fround(HEAPF32[$0 + 32 >> 2]);
$21 = Math_fround(Math_fround(HEAPF32[$0 + 28 >> 2]) - $18);
$25 = Math_fround($18 + Math_fround($21 * Math_fround(__ZNK10Trajectory16lookupByFractionEf(HEAP32[16626] | 0, $16))));
if (!0) {
$$0 = $25;
STACKTOP = sp;
return Math_fround($$0);
}
$32 = __ZNK28InvertibleDynamicStringArray14valueFromIndexEi(HEAP32[17820] | 0, HEAP32[$0 + 24 >> 2] | 0) | 0;
HEAPF64[$vararg_buffer3 >> 3] = +$1;
HEAP32[$vararg_buffer3 + 8 >> 2] = $32;
HEAPF64[$vararg_buffer3 + 16 >> 3] = +$25;
__Z7eprintfPKcz(34649, $vararg_buffer3);
$$0 = $25;
STACKTOP = sp;
return Math_fround($$0);
}
$34 = Math_fround(HEAPF32[$0 + 12 >> 2]);
if ($34 < Math_fround(0.0)) {
if (!0) $$pre$phiZ2D = $0 + 28 | 0; else {
$41 = __ZNK28InvertibleDynamicStringArray14valueFromIndexEi(HEAP32[17820] | 0, HEAP32[$0 + 24 >> 2] | 0) | 0;
$42 = $0 + 28 | 0;
$44 = +Math_fround(HEAPF32[$42 >> 2]);
HEAPF64[$vararg_buffer8 >> 3] = +$1;
HEAP32[$vararg_buffer8 + 8 >> 2] = $41;
HEAPF64[$vararg_buffer8 + 16 >> 3] = $44;
__Z7eprintfPKcz(34690, $vararg_buffer8);
$$pre$phiZ2D = $42;
}
$$0 = Math_fround(HEAPF32[$$pre$phiZ2D >> 2]);
STACKTOP = sp;
return Math_fround($$0);
}
if ($34 >= $1) {
if (!0) $$pre$phi29Z2D = $0 + 28 | 0; else {
$52 = __ZNK28InvertibleDynamicStringArray14valueFromIndexEi(HEAP32[17820] | 0, HEAP32[$0 + 24 >> 2] | 0) | 0;
$53 = $0 + 28 | 0;
$55 = +Math_fround(HEAPF32[$53 >> 2]);
HEAPF64[$vararg_buffer13 >> 3] = +$1;
HEAP32[$vararg_buffer13 + 8 >> 2] = $52;
HEAPF64[$vararg_buffer13 + 16 >> 3] = $55;
__Z7eprintfPKcz(34737, $vararg_buffer13);
$$pre$phi29Z2D = $53;
}
$$0 = Math_fround(HEAPF32[$$pre$phi29Z2D >> 2]);
STACKTOP = sp;
return Math_fround($$0);
}
$58 = Math_fround(HEAPF32[$0 + 16 >> 2]);
if (!($58 >= $1)) {
if (!0) {
$$0 = Math_fround(0.0);
STACKTOP = sp;
return Math_fround($$0);
}
$87 = __ZNK28InvertibleDynamicStringArray14valueFromIndexEi(HEAP32[17820] | 0, HEAP32[$0 + 24 >> 2] | 0) | 0;
HEAPF64[$vararg_buffer24 >> 3] = +$1;
HEAP32[$vararg_buffer24 + 8 >> 2] = $87;
HEAPF64[$vararg_buffer24 + 16 >> 3] = 0.0;
__Z7eprintfPKcz(34831, $vararg_buffer24);
$$0 = Math_fround(0.0);
STACKTOP = sp;
return Math_fround($$0);
} else {
$62 = Math_fround(Math_fround($1 - $34) / Math_fround($58 - $34));
$63 = $0 + 36 | 0;
$64 = Math_fround(HEAPF32[$63 >> 2]);
$67 = Math_fround(Math_fround(HEAPF32[$0 + 28 >> 2]) - $64);
$72 = Math_fround($64 + Math_fround($67 * Math_fround(Math_fround(1.0) - Math_fround(__ZNK10Trajectory16lookupByFractionEf(HEAP32[16626] | 0, $62)))));
if (!0) {
$$0 = $72;
STACKTOP = sp;
return Math_fround($$0);
}
$78 = __ZNK28InvertibleDynamicStringArray14valueFromIndexEi(HEAP32[17820] | 0, HEAP32[$0 + 24 >> 2] | 0) | 0;
$81 = +Math_fround(HEAPF32[$63 >> 2]);
HEAPF64[$vararg_buffer18 >> 3] = +$1;
HEAP32[$vararg_buffer18 + 8 >> 2] = $78;
HEAPF64[$vararg_buffer18 + 16 >> 3] = +$72;
HEAPF64[$vararg_buffer18 + 24 >> 3] = $81;
__Z7eprintfPKcz(34780, $vararg_buffer18);
$$0 = $72;
STACKTOP = sp;
return Math_fround($$0);
}
return Math_fround(0.0);
}
function __Z18DestroyNameIndexesv() {
var $$0 = 0, $$01 = 0, $$01013$i = 0, $$01013$i11 = 0, $$01013$i3 = 0, $$011$i = 0, $$011$i12 = 0, $$011$i4 = 0, $$012$i = 0, $$012$i13 = 0, $$012$i5 = 0, $$pre18 = 0, $$pre20 = 0, $$pre22 = 0, $0 = 0, $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $20 = 0, $26 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $4 = 0, $41 = 0, $47 = 0, $49 = 0, $5 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $6 = 0, $62 = 0, $68 = 0, $70 = 0, $71 = 0, $73 = 0, $74 = 0, $75 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
$0 = HEAP32[16540] | 0;
do if ($0 | 0) {
__THREW__ = 0;
invoke_vi(112, $0 | 0);
$2 = __THREW__;
__THREW__ = 0;
if (!($2 & 1)) {
__ZdlPv($0);
HEAP32[16540] = 0;
break;
}
$4 = ___cxa_find_matching_catch_2() | 0;
$5 = tempRet0;
__ZdlPv($0);
$$0 = $5;
$$01 = $4;
___resumeException($$01 | 0);
} while (0);
$6 = HEAP32[16528] | 0;
if ($6 | 0) {
__ZdlPv($6);
HEAP32[16528] = 0;
}
$8 = HEAP32[16527] | 0;
if ($8 | 0) {
__ZdlPv($8);
HEAP32[16527] = 0;
}
$10 = HEAP32[16526] | 0;
if ($10 | 0) {
__ZdlPv($10);
HEAP32[16526] = 0;
}
$12 = HEAP32[16533] | 0;
do if ($12 | 0) {
$14 = $12 + 4 | 0;
$15 = HEAP32[$14 >> 2] | 0;
if (($15 | 0) > 0) {
$$01013$i3 = 0;
$81 = $15;
while (1) {
$$011$i4 = HEAP32[(HEAP32[$12 >> 2] | 0) + ($$01013$i3 << 3) >> 2] | 0;
if (!$$011$i4) $26 = $81; else {
$$012$i5 = $$011$i4;
do {
$20 = HEAP32[$$012$i5 >> 2] | 0;
if ($20 | 0) _free($20);
$$012$i5 = HEAP32[$$012$i5 + 8 >> 2] | 0;
} while (($$012$i5 | 0) != 0);
$26 = HEAP32[$14 >> 2] | 0;
}
$$01013$i3 = $$01013$i3 + 1 | 0;
if (($$01013$i3 | 0) >= ($26 | 0)) break; else $81 = $26;
}
$$pre18 = HEAP32[16533] | 0;
if (!$$pre18) break; else $28 = $$pre18;
} else $28 = $12;
__THREW__ = 0;
invoke_vi(113, $28 | 0);
$29 = __THREW__;
__THREW__ = 0;
if (!($29 & 1)) {
__ZdlPv($28);
HEAP32[16533] = 0;
break;
}
$31 = ___cxa_find_matching_catch_2() | 0;
$32 = tempRet0;
__ZdlPv($28);
$$0 = $32;
$$01 = $31;
___resumeException($$01 | 0);
} while (0);
$33 = HEAP32[16534] | 0;
do if ($33 | 0) {
$35 = $33 + 4 | 0;
$36 = HEAP32[$35 >> 2] | 0;
if (($36 | 0) > 0) {
$$01013$i11 = 0;
$82 = $36;
while (1) {
$$011$i12 = HEAP32[(HEAP32[$33 >> 2] | 0) + ($$01013$i11 << 3) >> 2] | 0;
if (!$$011$i12) $47 = $82; else {
$$012$i13 = $$011$i12;
do {
$41 = HEAP32[$$012$i13 >> 2] | 0;
if ($41 | 0) _free($41);
$$012$i13 = HEAP32[$$012$i13 + 8 >> 2] | 0;
} while (($$012$i13 | 0) != 0);
$47 = HEAP32[$35 >> 2] | 0;
}
$$01013$i11 = $$01013$i11 + 1 | 0;
if (($$01013$i11 | 0) >= ($47 | 0)) break; else $82 = $47;
}
$$pre20 = HEAP32[16534] | 0;
if (!$$pre20) break; else $49 = $$pre20;
} else $49 = $33;
__THREW__ = 0;
invoke_vi(113, $49 | 0);
$50 = __THREW__;
__THREW__ = 0;
if (!($50 & 1)) {
__ZdlPv($49);
HEAP32[16534] = 0;
break;
}
$52 = ___cxa_find_matching_catch_2() | 0;
$53 = tempRet0;
__ZdlPv($49);
$$0 = $53;
$$01 = $52;
___resumeException($$01 | 0);
} while (0);
$54 = HEAP32[16535] | 0;
do if ($54 | 0) {
$56 = $54 + 4 | 0;
$57 = HEAP32[$56 >> 2] | 0;
if (($57 | 0) > 0) {
$$01013$i = 0;
$83 = $57;
while (1) {
$$011$i = HEAP32[(HEAP32[$54 >> 2] | 0) + ($$01013$i << 3) >> 2] | 0;
if (!$$011$i) $68 = $83; else {
$$012$i = $$011$i;
do {
$62 = HEAP32[$$012$i >> 2] | 0;
if ($62 | 0) _free($62);
$$012$i = HEAP32[$$012$i + 8 >> 2] | 0;
} while (($$012$i | 0) != 0);
$68 = HEAP32[$56 >> 2] | 0;
}
$$01013$i = $$01013$i + 1 | 0;
if (($$01013$i | 0) >= ($68 | 0)) break; else $83 = $68;
}
$$pre22 = HEAP32[16535] | 0;
if (!$$pre22) break; else $70 = $$pre22;
} else $70 = $54;
__THREW__ = 0;
invoke_vi(113, $70 | 0);
$71 = __THREW__;
__THREW__ = 0;
if (!($71 & 1)) {
__ZdlPv($70);
HEAP32[16535] = 0;
break;
}
$73 = ___cxa_find_matching_catch_2() | 0;
$74 = tempRet0;
__ZdlPv($70);
$$0 = $74;
$$01 = $73;
___resumeException($$01 | 0);
} while (0);
$75 = HEAP32[16525] | 0;
if (!$75) return;
__THREW__ = 0;
invoke_vi(114, $75 | 0);
$77 = __THREW__;
__THREW__ = 0;
if ($77 & 1) {
$79 = ___cxa_find_matching_catch_2() | 0;
$80 = tempRet0;
__ZdlPv($75);
$$0 = $80;
$$01 = $79;
___resumeException($$01 | 0);
} else {
__ZdlPv($75);
HEAP32[16525] = 0;
return;
}
}
function __ZN16DirectedMovement17GetCurrentPostureER19TwoHConcretePosturefb($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
var $$$i = f0, $10 = f0, $104 = f0, $12 = f0, $13 = 0, $14 = 0, $15 = f0, $17 = 0, $21 = f0, $22 = f0, $23 = f0, $27 = 0, $29 = 0, $31 = 0, $33 = f0, $35 = f0, $38 = 0, $4 = 0, $48 = f0, $49 = 0, $5 = 0, $50 = 0, $51 = f0, $56 = f0, $57 = f0, $58 = f0, $6 = 0, $62 = f0, $64 = f0, $66 = f0, $67 = 0, $68 = 0, $69 = f0, $7 = f0, $74 = f0, $75 = f0, $76 = f0, $77 = 0, $8 = 0, $93 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$vararg_buffer = sp;
$4 = sp + 28 | 0;
$5 = sp + 16 | 0;
$6 = $0 + 40 | 0;
$7 = Math_fround(HEAPF32[$6 >> 2]);
$8 = $0 + 44 | 0;
$10 = Math_fround($7 - Math_fround(HEAPF32[$8 >> 2]));
if (!($10 <= Math_fround(0.0))) {
$12 = Math_fround($2 / $10);
$13 = $12 < Math_fround(0.0);
$14 = $12 > Math_fround(1.0);
$15 = $14 ? Math_fround(1.0) : $12;
$21 = $13 ? Math_fround(0.0) : $15;
} else $21 = Math_fround(1.0);
$17 = $0 + 12 | 0;
$22 = Math_fround(__ZNK10Trajectory16lookupByFractionEf(HEAP32[66492 + (HEAP32[$17 >> 2] << 2) >> 2] | 0, $21));
$23 = Math_fround(Math_fround(1.0) - $22);
if (0) {
$27 = HEAP32[$0 + 4 >> 2] | 0;
$29 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[16658] | 0, $27) | 0;
HEAP32[$vararg_buffer >> 2] = $27;
HEAP32[$vararg_buffer + 4 >> 2] = $29;
HEAPF64[$vararg_buffer + 8 >> 3] = +$2;
__Z7eprintfPKcz(35945, $vararg_buffer);
}
$31 = $0 + 8 | 0;
__ZNK25TwoHConcretePostureChange11interpolateER19TwoHConcretePosturef12SET_OF_HANDSb($0 + 60 | 0, $1, $3 ? $22 : $23, HEAP32[$31 >> 2] | 0, $3);
$33 = Math_fround(HEAPF32[$6 >> 2]);
$35 = Math_fround($33 - Math_fround(HEAPF32[$8 >> 2]));
if ($2 <= Math_fround(0.0) | $35 <= $2) {
STACKTOP = sp;
return;
}
$38 = $0 + 560 | 0;
if (Math_fround(HEAPF32[$38 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 564 >> 2]) == Math_fround(0.0)) if (!(HEAP32[$0 + 572 >> 2] | 0)) {
STACKTOP = sp;
return;
}
if (!($35 <= Math_fround(0.0))) {
$48 = Math_fround($2 / $35);
$49 = $48 < Math_fround(0.0);
$50 = $48 > Math_fround(1.0);
$51 = $50 ? Math_fround(1.0) : $48;
$56 = $49 ? Math_fround(0.0) : $51;
} else $56 = Math_fround(1.0);
$57 = Math_fround(__ZNK10Trajectory16lookupByFractionEf(HEAP32[66492 + (HEAP32[$17 >> 2] << 2) >> 2] | 0, $56));
$58 = Math_fround(Math_fround(1.0) - $57);
$$$i = $3 ? $57 : $58;
if (!(HEAP8[$0 + 33 >> 0] | 0)) $104 = $$$i; else {
$62 = Math_fround(HEAPF32[$6 >> 2]);
$64 = Math_fround($62 - Math_fround(HEAPF32[$8 >> 2]));
if (!($64 <= Math_fround(0.0))) {
$66 = Math_fround($2 / $64);
$67 = $66 < Math_fround(0.0);
$68 = $66 > Math_fround(1.0);
$69 = $68 ? Math_fround(1.0) : $66;
$74 = $67 ? Math_fround(0.0) : $69;
} else $74 = Math_fround(1.0);
$75 = Math_fround(__ZNK10Trajectory16lookupByFractionEf(HEAP32[66492 + (HEAP32[$17 >> 2] << 2) >> 2] | 0, $74));
$76 = Math_fround(Math_fround(1.0) - $75);
$104 = $3 ? $76 : $75;
}
$77 = HEAP32[$31 >> 2] | 0;
switch ($77 | 0) {
case 3:
case 5:
{
__ZN6VectorC2Ev($4);
if (Math_fround(HEAPF32[$38 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 564 >> 2]) != Math_fround(0.0)) label = 18; else __ZN6Vector11setMidPointERKS_S1_f($4, $0 + 64 | 0, $0 + 288 | 0, $$$i); else label = 18;
if ((label | 0) == 18) {
__ZN15OneHDirMoveSpec15currentPositionER6Vectorf($0 + 600 | 0, $4, $$$i);
__ZN6Vector6setAddERKS_($4, $0 + 64 | 0);
}
if (HEAP32[$0 + 572 >> 2] | 0) {
__ZN6VectorC2Ev($5);
__ZNK10ZigzagInfo16zigzagTrajectoryER6Vectorf($0 + 644 | 0, $5, $$$i);
__ZN6Vector6setAddERKS_($4, $5);
}
__ZN6Vector7setFromERKS_($1 + 4 | 0, $4);
$93 = HEAP32[$31 >> 2] | 0;
break;
}
default:
$93 = $77;
}
if (($93 | 1 | 0) != 5) {
STACKTOP = sp;
return;
}
__ZN6VectorC2Ev($4);
if (Math_fround(HEAPF32[$38 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 564 >> 2]) != Math_fround(0.0)) label = 26; else __ZN6Vector11setMidPointERKS_S1_f($4, $0 + 176 | 0, $0 + 400 | 0, $104); else label = 26;
if ((label | 0) == 26) {
__ZN15OneHDirMoveSpec15currentPositionER6Vectorf($0 + 672 | 0, $4, $$$i);
__ZN6Vector6setAddERKS_($4, $0 + 176 | 0);
}
if (HEAP32[$0 + 572 >> 2] | 0) {
__ZN6VectorC2Ev($5);
__ZNK10ZigzagInfo16zigzagTrajectoryER6Vectorf($0 + 716 | 0, $5, $104);
__ZN6Vector6setAddERKS_($4, $5);
}
__ZN6Vector7setFromERKS_($1 + 116 | 0, $4);
STACKTOP = sp;
return;
}
function __ZL19CalcStartEndRepDispP6VectorS0_ibRKS_S2_S2_S2_ff($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
$6 = $6 | 0;
$7 = $7 | 0;
$8 = Math_fround($8);
$9 = Math_fround($9);
var $$0$lcssa = f0, $$08896 = 0, $$089$lcssa = f0, $$08995 = f0, $$090$lcssa = f0, $$09094 = f0, $$091$lcssa = f0, $$09193 = f0, $$097 = f0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $19 = f0, $20 = f0, $21 = f0, $22 = f0, $36 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 80 | 0;
$vararg_buffer = sp;
$10 = sp + 60 | 0;
$11 = sp + 48 | 0;
$12 = sp + 36 | 0;
$13 = sp + 24 | 0;
do if (!$2) {
if ($0 | 0) __ZN6Vector7setZeroEv($0);
if ($1 | 0) if ($3) {
__ZN6Vector7setZeroEv($1);
break;
} else {
__ZN6Vector7setFromERKS_($1, $7);
break;
}
} else {
if (($2 | 0) > 0) {
$$08896 = 0;
$$08995 = Math_fround(1.0);
$$09094 = Math_fround(0.0);
$$09193 = Math_fround(1.0);
$$097 = Math_fround(0.0);
while (1) {
$19 = Math_fround($$09193 + $$097);
$20 = Math_fround($$09193 * $8);
$21 = Math_fround($$09094 + $$08995);
$22 = Math_fround($$08995 * $9);
$$08896 = $$08896 + 1 | 0;
if (($$08896 | 0) == ($2 | 0)) {
$$0$lcssa = $19;
$$089$lcssa = $22;
$$090$lcssa = $21;
$$091$lcssa = $20;
break;
} else {
$$08995 = $22;
$$09094 = $21;
$$09193 = $20;
$$097 = $19;
}
}
} else {
$$0$lcssa = Math_fround(0.0);
$$089$lcssa = Math_fround(1.0);
$$090$lcssa = Math_fround(0.0);
$$091$lcssa = Math_fround(1.0);
}
__ZN6VectorC2ERKS_($10, $7);
__ZN6Vector8setScaleEf($10, $$0$lcssa);
__ZN6VectorC2ERKS_($11, $5);
__ZN6Vector6setAddERKS_($11, $10);
__ZN6VectorC2ERKS_($12, $6);
__ZN6Vector8setScaleEf($12, Math_fround($$090$lcssa + Math_fround(-1.0)));
__ZN6Vector6setAddERKS_($11, $12);
__ZN6VectorC2ERKS_($13, $4);
__ZN6Vector8setScaleEf($13, $$089$lcssa);
__ZN6Vector6setAddERKS_($11, $13);
if ($3) {
__ZN6VectorC2ERKS_($12, $6);
__ZN6Vector8setScaleEf($12, $$090$lcssa);
if ($0 | 0) __ZN6Vector6setAddERKS_S1_($0, $12, $10);
if ($1 | 0) __ZN6Vector7setFromERKS_($1, $11);
} else {
if ($0 | 0) __ZN6Vector7setFromERKS_($0, $11);
__ZN6VectorC2ERKS_($12, $6);
__ZN6Vector8setScaleEf($12, Math_fround($$090$lcssa * $9));
__ZN6VectorC2ERKS_($13, $7);
__ZN6Vector8setScaleEf($13, Math_fround($$091$lcssa + $$0$lcssa));
if ($1 | 0) __ZN6Vector6setAddERKS_S1_($1, $12, $13);
}
} while (0);
if ((HEAP32[16082] | 0) == 0 | 0 == 0) {
STACKTOP = sp;
return;
}
HEAP32[$vararg_buffer >> 2] = $2;
HEAP32[$vararg_buffer + 4 >> 2] = $3 ? 84 : 70;
HEAPF64[$vararg_buffer + 8 >> 3] = +$8;
HEAPF64[$vararg_buffer + 16 >> 3] = +$9;
__Z7eprintfPKcz(39530, $vararg_buffer);
$36 = HEAP32[16082] | 0;
__Z11printIndentP8_IO_FILEi($36, HEAP16[36078] | 0);
_fwrite(39590, 16, 1, $36) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($4, $36, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $36) | 0;
__Z11printIndentP8_IO_FILEi($36, HEAP16[36078] | 0);
_fwrite(39607, 19, 1, $36) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($5, $36, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $36) | 0;
__Z11printIndentP8_IO_FILEi($36, HEAP16[36078] | 0);
_fwrite(39627, 22, 1, $36) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($6, $36, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $36) | 0;
__Z11printIndentP8_IO_FILEi($36, HEAP16[36078] | 0);
_fwrite(39650, 14, 1, $36) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($7, $36, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $36) | 0;
if ($0 | 0) {
__Z11printIndentP8_IO_FILEi($36, HEAP16[36078] | 0);
_fwrite(39665, 14, 1, $36) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($0, $36, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $36) | 0;
}
if (!$1) {
STACKTOP = sp;
return;
}
__Z11printIndentP8_IO_FILEi($36, HEAP16[36078] | 0);
_fwrite(39680, 12, 1, $36) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($1, $36, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $36) | 0;
STACKTOP = sp;
return;
}
function _epilogProcessor($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$040 = 0, $$1$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $27 = 0, $34 = 0, $38 = 0, $4 = 0, $46 = 0, $47 = 0, $49 = 0, $5 = 0, $53 = 0, $6 = 0, $60 = 0, $64 = 0, $8 = 0, $82 = 0, $9 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$4 = sp + 8 | 0;
$5 = sp + 4 | 0;
$6 = sp;
HEAP32[$0 + 264 >> 2] = 32;
$8 = $0 + 272 | 0;
HEAP32[$8 >> 2] = $1;
$9 = $0 + 144 | 0;
$10 = $0 + 276 | 0;
$11 = $0 + 80 | 0;
$12 = $0 + 44 | 0;
$13 = $0 + 48 | 0;
$14 = $0 + 4 | 0;
$15 = $0 + 464 | 0;
$$040 = $1;
L1 : while (1) {
HEAP32[$6 >> 2] = 0;
$16 = HEAP32[$9 >> 2] | 0;
$18 = FUNCTION_TABLE_iiiii[HEAP32[$16 >> 2] & 63]($16, $$040, $2, $6) | 0;
$19 = HEAP32[$6 >> 2] | 0;
HEAP32[$10 >> 2] = $19;
$20 = $19;
switch ($18 | 0) {
case -15:
{
label = 3;
break L1;
break;
}
case -4:
{
label = 11;
break L1;
break;
}
case 0:
{
label = 20;
break L1;
break;
}
case -1:
{
label = 21;
break L1;
break;
}
case -2:
{
label = 23;
break L1;
break;
}
case 15:
{
$47 = HEAP32[$11 >> 2] | 0;
if ($47 | 0) {
$49 = HEAP32[$9 >> 2] | 0;
HEAP32[$4 >> 2] = $$040;
if (!(HEAP8[$49 + 68 >> 0] | 0)) {
$53 = $49 + 56 | 0;
do {
HEAP32[$5 >> 2] = HEAP32[$12 >> 2];
FUNCTION_TABLE_viiiii[HEAP32[$53 >> 2] & 15]($49, $4, $20, $5, HEAP32[$13 >> 2] | 0);
HEAP32[$10 >> 2] = HEAP32[$4 >> 2];
$60 = HEAP32[$12 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[$11 >> 2] & 127](HEAP32[$14 >> 2] | 0, $60, (HEAP32[$5 >> 2] | 0) - $60 | 0);
$64 = HEAP32[$4 >> 2] | 0;
HEAP32[$8 >> 2] = $64;
} while (($64 | 0) != ($20 | 0));
} else FUNCTION_TABLE_viii[$47 & 127](HEAP32[$14 >> 2] | 0, $$040, $19 - $$040 | 0);
}
break;
}
case 11:
{
if (!(_reportProcessingInstruction($0, HEAP32[$9 >> 2] | 0, $$040, $20) | 0)) {
$$1$ph = 1;
label = 28;
break L1;
}
break;
}
case 13:
{
if (!(_reportComment($0, HEAP32[$9 >> 2] | 0, $$040, $20) | 0)) {
$$1$ph = 1;
label = 28;
break L1;
}
break;
}
default:
{
$$1$ph = 9;
label = 28;
break L1;
}
}
$82 = HEAP32[$6 >> 2] | 0;
HEAP32[$8 >> 2] = $82;
switch (HEAP32[$15 >> 2] | 0) {
case 3:
{
label = 26;
break L1;
break;
}
case 2:
{
$$1$ph = 35;
label = 28;
break L1;
break;
}
default:
{}
}
$$040 = $82;
}
if ((label | 0) == 3) {
$21 = HEAP32[$11 >> 2] | 0;
do if (!$21) $46 = $19; else {
$23 = HEAP32[$9 >> 2] | 0;
HEAP32[$4 >> 2] = $$040;
if (!(HEAP8[$23 + 68 >> 0] | 0)) {
$27 = $23 + 56 | 0;
do {
HEAP32[$5 >> 2] = HEAP32[$12 >> 2];
FUNCTION_TABLE_viiiii[HEAP32[$27 >> 2] & 15]($23, $4, $20, $5, HEAP32[$13 >> 2] | 0);
HEAP32[$10 >> 2] = HEAP32[$4 >> 2];
$34 = HEAP32[$12 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[$11 >> 2] & 127](HEAP32[$14 >> 2] | 0, $34, (HEAP32[$5 >> 2] | 0) - $34 | 0);
$38 = HEAP32[$4 >> 2] | 0;
HEAP32[$8 >> 2] = $38;
} while (($38 | 0) != ($20 | 0));
} else FUNCTION_TABLE_viii[$21 & 127](HEAP32[$14 >> 2] | 0, $$040, $19 - $$040 | 0);
if ((HEAP32[$15 >> 2] | 0) == 2) {
$$1$ph = 35;
STACKTOP = sp;
return $$1$ph | 0;
} else {
$46 = HEAP32[$6 >> 2] | 0;
break;
}
} while (0);
HEAP32[$3 >> 2] = $46;
$$1$ph = 0;
STACKTOP = sp;
return $$1$ph | 0;
} else if ((label | 0) == 11) {
HEAP32[$3 >> 2] = $$040;
$$1$ph = 0;
STACKTOP = sp;
return $$1$ph | 0;
} else if ((label | 0) == 20) {
HEAP32[$8 >> 2] = $19;
$$1$ph = 4;
STACKTOP = sp;
return $$1$ph | 0;
} else if ((label | 0) == 21) {
if (HEAP8[$0 + 468 >> 0] | 0) {
$$1$ph = 5;
STACKTOP = sp;
return $$1$ph | 0;
}
HEAP32[$3 >> 2] = $$040;
$$1$ph = 0;
STACKTOP = sp;
return $$1$ph | 0;
} else if ((label | 0) == 23) {
if (HEAP8[$0 + 468 >> 0] | 0) {
$$1$ph = 6;
STACKTOP = sp;
return $$1$ph | 0;
}
HEAP32[$3 >> 2] = $$040;
$$1$ph = 0;
STACKTOP = sp;
return $$1$ph | 0;
} else if ((label | 0) == 26) {
HEAP32[$3 >> 2] = $82;
$$1$ph = 0;
STACKTOP = sp;
return $$1$ph | 0;
} else if ((label | 0) == 28) {
STACKTOP = sp;
return $$1$ph | 0;
}
return 0;
}
function __ZNK13BasicMovement5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $101 = 0.0, $11 = 0, $23 = 0, $29 = 0, $37 = 0, $45 = 0, $53 = 0, $61 = 0, $69 = 0, $81 = 0.0, $86 = 0.0, $91 = 0.0, $96 = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer26 = 0, $vararg_buffer30 = 0, $vararg_buffer34 = 0, $vararg_buffer38 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 144 | 0;
$vararg_buffer38 = sp + 128 | 0;
$vararg_buffer34 = sp + 112 | 0;
$vararg_buffer30 = sp + 96 | 0;
$vararg_buffer26 = sp + 80 | 0;
$vararg_buffer22 = sp + 64 | 0;
$vararg_buffer19 = sp + 56 | 0;
$vararg_buffer16 = sp + 48 | 0;
$vararg_buffer13 = sp + 40 | 0;
$vararg_buffer10 = sp + 32 | 0;
$vararg_buffer7 = sp + 24 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
HEAP32[$vararg_buffer >> 2] = HEAP32[2072 + (HEAP32[$0 + 8 >> 2] << 2) >> 2];
_fprintf($1, 35056, $vararg_buffer) | 0;
do if (HEAP32[16082] | 0) {
$11 = $0 + 12 | 0;
if (!(HEAP32[$11 >> 2] | 0)) if (!(HEAP32[$0 + 16 >> 2] | 0)) if (!(HEAP8[$0 + 20 >> 0] | 0)) break;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
__Z5eputsPKc(35066);
__ZNK11MannerFlags5printEP8_IO_FILE($11, HEAP32[16082] | 0);
} while (0);
$23 = $0 + 24 | 0;
if (HEAP32[$23 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(35077, 14, 1, $1) | 0;
HEAP32[$vararg_buffer1 >> 2] = HEAP32[$23 >> 2];
_fprintf($1, 35092, $vararg_buffer1) | 0;
}
$29 = $0 + 28 | 0;
if (HEAP8[$29 >> 0] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
HEAP32[$vararg_buffer4 >> 2] = HEAP8[$29 >> 0] | 0 ? 84 : 70;
_fprintf($1, 35096, $vararg_buffer4) | 0;
}
$37 = $0 + 29 | 0;
if (HEAP8[$37 >> 0] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
HEAP32[$vararg_buffer7 >> 2] = HEAP8[$37 >> 0] | 0 ? 84 : 70;
_fprintf($1, 35113, $vararg_buffer7) | 0;
}
$45 = $0 + 30 | 0;
if (HEAP8[$45 >> 0] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
HEAP32[$vararg_buffer10 >> 2] = HEAP8[$45 >> 0] | 0 ? 84 : 70;
_fprintf($1, 35127, $vararg_buffer10) | 0;
}
$53 = $0 + 31 | 0;
if (HEAP8[$53 >> 0] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
HEAP32[$vararg_buffer13 >> 2] = HEAP8[$53 >> 0] | 0 ? 84 : 70;
_fprintf($1, 35147, $vararg_buffer13) | 0;
}
$61 = $0 + 33 | 0;
if (HEAP8[$61 >> 0] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
HEAP32[$vararg_buffer16 >> 2] = HEAP8[$61 >> 0] | 0 ? 84 : 70;
_fprintf($1, 35174, $vararg_buffer16) | 0;
}
$69 = $0 + 32 | 0;
if (HEAP8[$69 >> 0] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
HEAP32[$vararg_buffer19 >> 2] = HEAP8[$69 >> 0] | 0 ? 84 : 70;
_fprintf($1, 35193, $vararg_buffer19) | 0;
}
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$81 = +Math_fround(HEAPF32[$0 + 48 >> 2]);
HEAP32[$vararg_buffer22 >> 2] = 3;
HEAPF64[$vararg_buffer22 + 8 >> 3] = $81;
_fprintf($1, 35212, $vararg_buffer22) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$86 = +Math_fround(HEAPF32[$0 + 40 >> 2]);
HEAP32[$vararg_buffer26 >> 2] = 3;
HEAPF64[$vararg_buffer26 + 8 >> 3] = $86;
_fprintf($1, 35228, $vararg_buffer26) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$91 = +Math_fround(HEAPF32[$0 + 44 >> 2]);
HEAP32[$vararg_buffer30 >> 2] = 3;
HEAPF64[$vararg_buffer30 + 8 >> 3] = $91;
_fprintf($1, 35247, $vararg_buffer30) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$96 = +Math_fround(HEAPF32[$0 + 52 >> 2]);
HEAP32[$vararg_buffer34 >> 2] = 3;
HEAPF64[$vararg_buffer34 + 8 >> 3] = $96;
_fprintf($1, 35267, $vararg_buffer34) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$101 = +Math_fround(HEAPF32[$0 + 56 >> 2]);
HEAP32[$vararg_buffer38 >> 2] = 3;
HEAPF64[$vararg_buffer38 + 8 >> 3] = $101;
_fprintf($1, 35294, $vararg_buffer38) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(35314, 18, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK25TwoHConcretePostureChange5printEP8_IO_FILE($0 + 60 | 0, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
STACKTOP = sp;
return;
}
function __ZNK11SeqMovement5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$035 = 0, $$lcssa = 0, $$sink$i$ph = 0, $11 = 0, $17 = 0.0, $18 = 0, $24 = 0.0, $25 = 0, $32 = 0, $33 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $46 = 0, $49 = 0, $62 = 0.0, $63 = 0.0, $65 = 0.0, $70 = 0, $72 = f0, $81 = 0, $sext = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer23 = 0, $vararg_buffer28 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 144 | 0;
$vararg_buffer28 = sp + 112 | 0;
$vararg_buffer23 = sp + 88 | 0;
$vararg_buffer18 = sp + 64 | 0;
$vararg_buffer15 = sp + 56 | 0;
$vararg_buffer12 = sp + 48 | 0;
$vararg_buffer8 = sp + 32 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
HEAP32[$vararg_buffer >> 2] = $0;
_fprintf($1, 44656, $vararg_buffer) | 0;
__ZNK13BasicMovement5printEP8_IO_FILE($0, $1);
$4 = $0 + 544 | 0;
if (HEAP16[$4 >> 1] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(44673, 18, 1, $1) | 0;
HEAP32[$vararg_buffer1 >> 2] = HEAP16[$4 >> 1];
_fprintf($1, 35092, $vararg_buffer1) | 0;
}
$11 = $0 + 548 | 0;
if (Math_fround(HEAPF32[$11 >> 2]) != Math_fround(0.0)) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$17 = +Math_fround(HEAPF32[$11 >> 2]);
HEAP32[$vararg_buffer4 >> 2] = 3;
HEAPF64[$vararg_buffer4 + 8 >> 3] = $17;
_fprintf($1, 44692, $vararg_buffer4) | 0;
}
$18 = $0 + 552 | 0;
if (Math_fround(HEAPF32[$18 >> 2]) != Math_fround(0.0)) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$24 = +Math_fround(HEAPF32[$18 >> 2]);
HEAP32[$vararg_buffer8 >> 2] = 3;
HEAPF64[$vararg_buffer8 + 8 >> 3] = $24;
_fprintf($1, 44711, $vararg_buffer8) | 0;
}
$25 = $0 + 556 | 0;
if (HEAP16[$25 >> 1] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(44730, 18, 1, $1) | 0;
HEAP32[$vararg_buffer12 >> 2] = HEAP16[$25 >> 1];
_fprintf($1, 35092, $vararg_buffer12) | 0;
}
$32 = $0 + 540 | 0;
$33 = HEAP32[$32 >> 2] | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$sext = $33 << 16;
$36 = $sext >> 16;
HEAP32[$vararg_buffer15 >> 2] = $36;
_fprintf($1, 44749, $vararg_buffer15) | 0;
$38 = (HEAP16[36078] | 0) + 1 << 16 >> 16;
HEAP16[36078] = $38;
if (($sext | 0) > 0) {
$40 = $0 + 576 | 0;
$41 = $0 + 572 | 0;
$42 = $0 + 560 | 0;
$43 = $0 + 528 | 0;
$$035 = 0;
$46 = $38;
$49 = 0;
while (1) {
__Z11printIndentP8_IO_FILEi($1, $46 << 16 >> 16);
do if (!($$035 << 16 >> 16)) {
$63 = 0.0;
label = 18;
} else {
if ($$035 << 16 >> 16 < 1) {
$72 = Math_fround(HEAPF32[$40 >> 2]);
HEAP32[$vararg_buffer28 >> 2] = $49;
HEAPF64[$vararg_buffer28 + 8 >> 3] = +$72;
HEAPF64[$vararg_buffer28 + 16 >> 3] = +$72;
_fprintf($1, 44777, $vararg_buffer28) | 0;
label = 24;
break;
}
if ((HEAP32[$41 >> 2] | 0) < ($49 | 0)) $$sink$i$ph = $40; else $$sink$i$ph = (HEAP32[$42 >> 2] | 0) + ($49 + -1 << 2) | 0;
$63 = +Math_fround(HEAPF32[$$sink$i$ph >> 2]);
label = 18;
} while (0);
if ((label | 0) == 18) {
label = 0;
if ((HEAP32[$41 >> 2] | 0) > ($49 | 0)) {
$62 = +Math_fround(HEAPF32[(HEAP32[$42 >> 2] | 0) + ($49 << 2) >> 2]);
HEAP32[$vararg_buffer18 >> 2] = $49;
HEAPF64[$vararg_buffer18 + 8 >> 3] = $63;
HEAPF64[$vararg_buffer18 + 16 >> 3] = $62;
_fprintf($1, 44777, $vararg_buffer18) | 0;
} else {
$65 = +Math_fround(HEAPF32[$40 >> 2]);
HEAP32[$vararg_buffer23 >> 2] = $49;
HEAPF64[$vararg_buffer23 + 8 >> 3] = $63;
HEAPF64[$vararg_buffer23 + 16 >> 3] = $65;
_fprintf($1, 44777, $vararg_buffer23) | 0;
}
if ((HEAP32[$32 >> 2] | 0) > ($49 | 0)) {
$70 = HEAP32[(HEAP32[$43 >> 2] | 0) + ($49 << 2) >> 2] | 0;
if (!$70) label = 24; else FUNCTION_TABLE_vii[HEAP32[(HEAP32[$70 >> 2] | 0) + 72 >> 2] & 255]($70, $1);
} else label = 24;
}
if ((label | 0) == 24) {
label = 0;
_fwrite(61277, 6, 1, $1) | 0;
}
$$035 = $$035 + 1 << 16 >> 16;
$49 = $$035 << 16 >> 16;
$81 = HEAP16[36078] | 0;
if (($36 | 0) <= ($49 | 0)) {
$$lcssa = $81;
break;
} else $46 = $81;
}
} else $$lcssa = $38;
HEAP16[36078] = $$lcssa + -1 << 16 >> 16;
STACKTOP = sp;
return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $13 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $47 = 0, $55 = 0, $58 = 0, $59 = 0, $60 = 0, $63 = 0, $66 = 0, $69 = 0, $76 = 0, $77 = 0, $78 = 0, label = 0;
L1 : do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); else {
if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
$58 = HEAP32[$0 + 12 >> 2] | 0;
$59 = $0 + 16 + ($58 << 3) | 0;
__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0 + 16 | 0, $1, $2, $3, $4);
$60 = $0 + 24 | 0;
if (($58 | 0) <= 1) break;
$63 = HEAP32[$0 + 8 >> 2] | 0;
if (!($63 & 2)) {
$66 = $1 + 36 | 0;
if ((HEAP32[$66 >> 2] | 0) != 1) {
if (!($63 & 1)) {
$78 = $1 + 54 | 0;
$$2 = $60;
while (1) {
if (HEAP8[$78 >> 0] | 0) break L1;
if ((HEAP32[$66 >> 2] | 0) == 1) break L1;
__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2, $1, $2, $3, $4);
$$2 = $$2 + 8 | 0;
if ($$2 >>> 0 >= $59 >>> 0) break L1;
}
}
$76 = $1 + 24 | 0;
$77 = $1 + 54 | 0;
$$1 = $60;
while (1) {
if (HEAP8[$77 >> 0] | 0) break L1;
if ((HEAP32[$66 >> 2] | 0) == 1) if ((HEAP32[$76 >> 2] | 0) == 1) break L1;
__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1, $1, $2, $3, $4);
$$1 = $$1 + 8 | 0;
if ($$1 >>> 0 >= $59 >>> 0) break L1;
}
}
}
$69 = $1 + 54 | 0;
$$0 = $60;
while (1) {
if (HEAP8[$69 >> 0] | 0) break L1;
__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0, $1, $2, $3, $4);
$$0 = $$0 + 8 | 0;
if ($$0 >>> 0 >= $59 >>> 0) break L1;
}
}
if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
$13 = $1 + 20 | 0;
if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
HEAP32[$1 + 32 >> 2] = $3;
$19 = $1 + 44 | 0;
if ((HEAP32[$19 >> 2] | 0) == 4) break;
$25 = $0 + 16 + (HEAP32[$0 + 12 >> 2] << 3) | 0;
$26 = $1 + 52 | 0;
$27 = $1 + 53 | 0;
$28 = $1 + 54 | 0;
$29 = $0 + 8 | 0;
$30 = $1 + 24 | 0;
$$081$off0 = 0;
$$084 = $0 + 16 | 0;
$$085$off0 = 0;
L32 : while (1) {
if ($$084 >>> 0 >= $25 >>> 0) {
$$283$off0 = $$081$off0;
label = 18;
break;
}
HEAP8[$26 >> 0] = 0;
HEAP8[$27 >> 0] = 0;
__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084, $1, $2, $2, 1, $4);
if (HEAP8[$28 >> 0] | 0) {
$$283$off0 = $$081$off0;
label = 18;
break;
}
do if (!(HEAP8[$27 >> 0] | 0)) {
$$182$off0 = $$081$off0;
$$186$off0 = $$085$off0;
} else {
if (!(HEAP8[$26 >> 0] | 0)) if (!(HEAP32[$29 >> 2] & 1)) {
$$283$off0 = 1;
label = 18;
break L32;
} else {
$$182$off0 = 1;
$$186$off0 = $$085$off0;
break;
}
if ((HEAP32[$30 >> 2] | 0) == 1) {
label = 23;
break L32;
}
if (!(HEAP32[$29 >> 2] & 2)) {
label = 23;
break L32;
} else {
$$182$off0 = 1;
$$186$off0 = 1;
}
} while (0);
$$081$off0 = $$182$off0;
$$084 = $$084 + 8 | 0;
$$085$off0 = $$186$off0;
}
do if ((label | 0) == 18) {
if (!$$085$off0) {
HEAP32[$13 >> 2] = $2;
$47 = $1 + 40 | 0;
HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + 1;
if ((HEAP32[$1 + 36 >> 2] | 0) == 1) if ((HEAP32[$30 >> 2] | 0) == 2) {
HEAP8[$28 >> 0] = 1;
if ($$283$off0) {
label = 23;
break;
} else {
$55 = 4;
break;
}
}
}
if ($$283$off0) label = 23; else $55 = 4;
} while (0);
if ((label | 0) == 23) $55 = 3;
HEAP32[$19 >> 2] = $55;
break;
}
}
if (($3 | 0) == 1) HEAP32[$1 + 32 >> 2] = 1;
} while (0);
return;
}
function _parserCreate($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0 = 0, $105 = 0, $108 = 0, $16 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $33 = 0, $34 = 0, $36 = 0, $43 = 0, $45 = 0, $47 = 0, $5 = 0, $71 = 0, $8 = 0, $83 = 0, $84 = 0, $89 = 0, $91 = 0, $95 = 0;
do if (!$1) {
$16 = _malloc(472) | 0;
if (!$16) {
$$0 = 0;
return $$0 | 0;
} else {
HEAP32[$16 + 12 >> 2] = 35;
HEAP32[$16 + 16 >> 2] = 38;
HEAP32[$16 + 20 >> 2] = 176;
$22 = $16;
$26 = 35;
break;
}
} else {
$5 = FUNCTION_TABLE_ii[HEAP32[$1 >> 2] & 63](472) | 0;
if (!$5) {
$$0 = 0;
return $$0 | 0;
} else {
$8 = HEAP32[$1 >> 2] | 0;
HEAP32[$5 + 12 >> 2] = $8;
HEAP32[$5 + 16 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$5 + 20 >> 2] = HEAP32[$1 + 8 >> 2];
$22 = $5;
$26 = $8;
break;
}
} while (0);
HEAP32[$22 + 8 >> 2] = 0;
HEAP32[$22 + 32 >> 2] = 0;
HEAP32[$22 + 364 >> 2] = 16;
$25 = $22 + 12 | 0;
$27 = FUNCTION_TABLE_ii[$26 & 63](256) | 0;
$28 = $22 + 376 | 0;
HEAP32[$28 >> 2] = $27;
if (!$27) {
FUNCTION_TABLE_vi[HEAP32[$22 + 20 >> 2] & 255]($22);
$$0 = 0;
return $$0 | 0;
}
$33 = FUNCTION_TABLE_ii[HEAP32[$25 >> 2] & 63](1024) | 0;
$34 = $22 + 44 | 0;
HEAP32[$34 >> 2] = $33;
if (!$33) {
$36 = $22 + 20 | 0;
FUNCTION_TABLE_vi[HEAP32[$36 >> 2] & 255](HEAP32[$28 >> 2] | 0);
FUNCTION_TABLE_vi[HEAP32[$36 >> 2] & 255]($22);
$$0 = 0;
return $$0 | 0;
}
HEAP32[$22 + 48 >> 2] = $33 + 1024;
$43 = FUNCTION_TABLE_ii[HEAP32[$25 >> 2] & 63](168) | 0;
if (!$43) {
HEAP32[$22 + 340 >> 2] = 0;
$95 = $22 + 20 | 0;
FUNCTION_TABLE_vi[HEAP32[$95 >> 2] & 255](HEAP32[$34 >> 2] | 0);
FUNCTION_TABLE_vi[HEAP32[$95 >> 2] & 255](HEAP32[$28 >> 2] | 0);
FUNCTION_TABLE_vi[HEAP32[$95 >> 2] & 255]($22);
$$0 = 0;
return $$0 | 0;
}
$45 = $43 + 80 | 0;
HEAP32[$45 >> 2] = 0;
HEAP32[$45 + 4 >> 2] = 0;
HEAP32[$45 + 8 >> 2] = 0;
HEAP32[$45 + 12 >> 2] = 0;
HEAP32[$45 + 16 >> 2] = 0;
HEAP32[$43 + 100 >> 2] = $25;
$47 = $43 + 104 | 0;
HEAP32[$47 >> 2] = 0;
HEAP32[$47 + 4 >> 2] = 0;
HEAP32[$47 + 8 >> 2] = 0;
HEAP32[$47 + 12 >> 2] = 0;
HEAP32[$47 + 16 >> 2] = 0;
HEAP32[$43 + 124 >> 2] = $25;
HEAP8[$43 + 4 >> 0] = 0;
HEAP32[$43 + 8 >> 2] = 0;
HEAP32[$43 + 12 >> 2] = 0;
HEAP32[$43 >> 2] = 0;
HEAP32[$43 + 16 >> 2] = $25;
HEAP8[$43 + 24 >> 0] = 0;
HEAP32[$43 + 28 >> 2] = 0;
HEAP32[$43 + 32 >> 2] = 0;
HEAP32[$43 + 20 >> 2] = 0;
HEAP32[$43 + 36 >> 2] = $25;
HEAP8[$43 + 44 >> 0] = 0;
HEAP32[$43 + 48 >> 2] = 0;
HEAP32[$43 + 52 >> 2] = 0;
HEAP32[$43 + 40 >> 2] = 0;
HEAP32[$43 + 56 >> 2] = $25;
HEAP8[$43 + 64 >> 0] = 0;
HEAP32[$43 + 68 >> 2] = 0;
HEAP32[$43 + 72 >> 2] = 0;
HEAP32[$43 + 60 >> 2] = 0;
HEAP32[$43 + 76 >> 2] = $25;
HEAP32[$43 + 132 >> 2] = 0;
HEAP32[$43 + 136 >> 2] = 0;
HEAP8[$43 + 140 >> 0] = 0;
$71 = $43 + 144 | 0;
HEAP32[$71 >> 2] = 0;
HEAP32[$71 + 4 >> 2] = 0;
HEAP32[$71 + 8 >> 2] = 0;
HEAP32[$71 + 12 >> 2] = 0;
HEAP32[$71 + 16 >> 2] = 0;
HEAP32[$71 + 20 >> 2] = 0;
HEAP8[$43 + 128 >> 0] = 1;
HEAP8[$43 + 129 >> 0] = 0;
HEAP8[$43 + 130 >> 0] = 0;
HEAP32[$22 + 340 >> 2] = $43;
HEAP32[$22 + 360 >> 2] = 0;
HEAP32[$22 + 352 >> 2] = 0;
HEAP32[$22 + 288 >> 2] = 0;
HEAP32[$22 + 452 >> 2] = 0;
HEAP32[$22 + 448 >> 2] = 0;
HEAP32[$22 + 124 >> 2] = 0;
HEAP32[$22 + 244 >> 2] = 0;
$83 = $22 + 456 | 0;
HEAP8[$83 >> 0] = 33;
$84 = $22 + 232 | 0;
HEAP8[$84 >> 0] = 0;
HEAP8[$22 + 233 >> 0] = 0;
HEAP32[$22 + 380 >> 2] = 0;
HEAP32[$22 + 384 >> 2] = 0;
HEAP8[$22 + 388 >> 0] = 0;
$89 = $22 + 400 | 0;
HEAP32[$89 >> 2] = 0;
HEAP32[$89 + 4 >> 2] = 0;
HEAP32[$89 + 8 >> 2] = 0;
HEAP32[$89 + 12 >> 2] = 0;
HEAP32[$89 + 16 >> 2] = 0;
HEAP32[$22 + 420 >> 2] = $25;
$91 = $22 + 424 | 0;
HEAP32[$91 >> 2] = 0;
HEAP32[$91 + 4 >> 2] = 0;
HEAP32[$91 + 8 >> 2] = 0;
HEAP32[$91 + 12 >> 2] = 0;
HEAP32[$91 + 16 >> 2] = 0;
HEAP32[$22 + 444 >> 2] = $25;
_parserInit($22, $0);
if ($0 | 0) if (!(HEAP32[$22 + 228 >> 2] | 0)) {
_XML_ParserFree($22);
$$0 = 0;
return $$0 | 0;
}
if (!$2) {
$108 = _XmlGetUtf8InternalEncoding() | 0;
HEAP32[$22 + 224 >> 2] = $108;
$$0 = $22;
return $$0 | 0;
} else {
HEAP8[$84 >> 0] = 1;
$105 = _XmlGetUtf8InternalEncoding() | 0;
HEAP32[$22 + 224 >> 2] = $105;
HEAP8[$83 >> 0] = HEAP8[$2 >> 0] | 0;
$$0 = $22;
return $$0 | 0;
}
return 0;
}
function __ZNK17NonmanualMovement10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$042 = 0, $$043 = 0, $$04449 = 0, $$048 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $3 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $45 = 0, $46 = 0, $50 = 0, $52 = 0, $7 = 0, $9 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$2 = sp;
$3 = $0 + 4 | 0;
$4 = HEAP32[$3 >> 2] | 0;
if (!$4) {
STACKTOP = sp;
return;
}
$7 = HEAP32[$4 + 12 >> 2] | 0;
if (($7 | 0) <= 0) {
STACKTOP = sp;
return;
}
$9 = $2 + 4 | 0;
$10 = $2 + 8 | 0;
$11 = $2 + 12 | 0;
$12 = $2 + 16 | 0;
$13 = $2 + 20 | 0;
$14 = $2 + 24 | 0;
$$04449 = 0;
$16 = $4;
L7 : while (1) {
L9 : do if ((HEAP32[$16 + 12 >> 2] | 0) > ($$04449 | 0)) {
$21 = HEAP32[(HEAP32[$16 >> 2] | 0) + ($$04449 << 2) >> 2] | 0;
if ($21 | 0) {
$23 = $21 + 12 | 0;
$24 = HEAP32[$23 >> 2] | 0;
switch ($24 | 0) {
case 0:
{
break L9;
break;
}
case 1:
{
$25 = HEAP32[$21 >> 2] | 0;
HEAP32[$2 >> 2] = HEAP32[$25 >> 2];
HEAP32[$2 + 4 >> 2] = HEAP32[$25 + 4 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$25 + 8 >> 2];
HEAP32[$2 + 12 >> 2] = HEAP32[$25 + 12 >> 2];
HEAP32[$2 + 16 >> 2] = HEAP32[$25 + 16 >> 2];
HEAP32[$2 + 20 >> 2] = HEAP32[$25 + 20 >> 2];
HEAP32[$2 + 24 >> 2] = HEAP32[$25 + 24 >> 2];
__THREW__ = 0;
invoke_vii(160, $2 | 0, $1 | 0);
$26 = __THREW__;
__THREW__ = 0;
if ($26 & 1) {
label = 9;
break L7;
}
break L9;
break;
}
default:
{}
}
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
HEAP8[$2 >> 0] = 60;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2, 1) | 0, 36557, 13) | 0, 36571, 2) | 0;
$35 = (HEAP16[36078] | 0) + 1 << 16 >> 16;
HEAP16[36078] = $35;
if (($24 | 0) > 0) {
$$048 = 0;
do {
if ((HEAP32[$23 >> 2] | 0) > ($$048 | 0)) {
$45 = (HEAP32[$21 >> 2] | 0) + ($$048 * 28 | 0) | 0;
HEAP32[$2 >> 2] = HEAP32[$45 >> 2];
HEAP32[$2 + 4 >> 2] = HEAP32[$45 + 4 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$45 + 8 >> 2];
HEAP32[$2 + 12 >> 2] = HEAP32[$45 + 12 >> 2];
HEAP32[$2 + 16 >> 2] = HEAP32[$45 + 16 >> 2];
HEAP32[$2 + 20 >> 2] = HEAP32[$45 + 20 >> 2];
HEAP32[$2 + 24 >> 2] = HEAP32[$45 + 24 >> 2];
} else {
HEAP32[$2 >> 2] = 0;
HEAP16[$9 >> 1] = -1;
HEAP32[$10 >> 2] = 0;
HEAPF32[$11 >> 2] = Math_fround(-1.0);
HEAPF32[$12 >> 2] = Math_fround(1.0);
HEAPF32[$13 >> 2] = Math_fround(1.0);
HEAPF32[$14 >> 2] = Math_fround(1.0);
}
__THREW__ = 0;
invoke_vii(160, $2 | 0, $1 | 0);
$46 = __THREW__;
__THREW__ = 0;
if ($46 & 1) {
label = 19;
break L7;
}
$$048 = $$048 + 1 | 0;
} while (($$048 | 0) < ($24 | 0));
$38 = HEAP16[36078] | 0;
} else $38 = $35;
$37 = $38 + -1 << 16 >> 16;
HEAP16[36078] = $37;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, $37 << 16 >> 16);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36574, 2) | 0, 36557, 13) | 0, 36571, 2) | 0;
}
} while (0);
$52 = $$04449 + 1 | 0;
if (($52 | 0) >= ($7 | 0)) {
label = 23;
break;
}
$$04449 = $52;
$16 = HEAP32[$3 >> 2] | 0;
}
if ((label | 0) == 9) {
$28 = ___cxa_find_matching_catch_2() | 0;
$$042 = tempRet0;
$$043 = $28;
___resumeException($$043 | 0);
} else if ((label | 0) == 19) {
$50 = ___cxa_find_matching_catch_2() | 0;
$$042 = tempRet0;
$$043 = $50;
___resumeException($$043 | 0);
} else if ((label | 0) == 23) {
STACKTOP = sp;
return;
}
}
function _reportComment($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$0$i = 0, $$0$ph$i = 0, $$012$i = 0, $$018$i = 0, $$024$ph$i = 0, $$113$i = 0, $$2$i = 0, $$in$i = 0, $$in$i$phi = 0, $$pre$phi$iZ2D = 0, $10 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $33 = 0, $4 = 0, $45 = 0, $47 = 0, $5 = 0, $51 = 0, $52 = 0, $57 = 0, $58 = 0, $6 = 0, $65 = 0, $68 = 0, $74 = 0, $75 = 0, $80 = 0, $81 = 0, $9 = 0, $91 = 0, $92 = 0, $95 = 0, $98 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$4 = sp + 4 | 0;
$5 = sp;
$6 = $0 + 68 | 0;
if (!(HEAP32[$6 >> 2] | 0)) {
$9 = $0 + 80 | 0;
$10 = HEAP32[$9 >> 2] | 0;
if (!$10) {
$$0 = 1;
STACKTOP = sp;
return $$0 | 0;
}
HEAP32[$4 >> 2] = $2;
if (!(HEAP8[$1 + 68 >> 0] | 0)) {
if ((HEAP32[$0 + 144 >> 2] | 0) == ($1 | 0)) {
$$0$ph$i = $0 + 276 | 0;
$$024$ph$i = $0 + 272 | 0;
} else {
$21 = HEAP32[$0 + 284 >> 2] | 0;
$$0$ph$i = $21 + 4 | 0;
$$024$ph$i = $21;
}
$23 = $0 + 44 | 0;
$24 = $1 + 56 | 0;
$25 = $0 + 48 | 0;
$26 = $0 + 4 | 0;
do {
HEAP32[$5 >> 2] = HEAP32[$23 >> 2];
FUNCTION_TABLE_viiiii[HEAP32[$24 >> 2] & 15]($1, $4, $3, $5, HEAP32[$25 >> 2] | 0);
HEAP32[$$0$ph$i >> 2] = HEAP32[$4 >> 2];
$33 = HEAP32[$23 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[$9 >> 2] & 127](HEAP32[$26 >> 2] | 0, $33, (HEAP32[$5 >> 2] | 0) - $33 | 0);
HEAP32[$$024$ph$i >> 2] = HEAP32[$4 >> 2];
} while ((HEAP32[$4 >> 2] | 0) != ($3 | 0));
} else FUNCTION_TABLE_viii[$10 & 127](HEAP32[$0 + 4 >> 2] | 0, $2, $3 - $2 | 0);
$$0 = 1;
STACKTOP = sp;
return $$0 | 0;
}
$45 = $0 + 400 | 0;
$47 = HEAP32[$1 + 64 >> 2] | 0;
$51 = $3 + (Math_imul($47, -3) | 0) | 0;
HEAP32[$4 >> 2] = $2 + ($47 << 2);
$52 = $0 + 412 | 0;
if (!(HEAP32[$52 >> 2] | 0)) {
if ((_poolGrow($45) | 0) << 24 >> 24) label = 13;
} else label = 13;
L20 : do if ((label | 0) == 13) {
$57 = $1 + 56 | 0;
$58 = $0 + 408 | 0;
while (1) {
FUNCTION_TABLE_viiiii[HEAP32[$57 >> 2] & 15]($1, $4, $51, $52, HEAP32[$58 >> 2] | 0);
if ((HEAP32[$4 >> 2] | 0) == ($51 | 0)) break;
if (!((_poolGrow($45) | 0) << 24 >> 24)) break L20;
}
$65 = $0 + 416 | 0;
if (!(HEAP32[$65 >> 2] | 0)) {
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
$68 = HEAP32[$52 >> 2] | 0;
do if (($68 | 0) == (HEAP32[$58 >> 2] | 0)) if (!((_poolGrow($45) | 0) << 24 >> 24)) {
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else {
$74 = HEAP32[$52 >> 2] | 0;
break;
} else $74 = $68; while (0);
HEAP32[$52 >> 2] = $74 + 1;
HEAP8[$74 >> 0] = 0;
$75 = HEAP32[$65 >> 2] | 0;
if (!$75) {
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else $$012$i = $75;
L37 : while (1) {
switch (HEAP8[$$012$i >> 0] | 0) {
case 0:
{
break L37;
break;
}
case 13:
{
$$0$i = $$012$i;
$$113$i = $$012$i;
$80 = 13;
label = 24;
break L37;
break;
}
default:
{}
}
$$012$i = $$012$i + 1 | 0;
}
if ((label | 0) == 24) {
while (1) {
label = 0;
if ($80 << 24 >> 24 == 13) {
HEAP8[$$0$i >> 0] = 10;
$81 = $$113$i + 1 | 0;
$$2$i = (HEAP8[$81 >> 0] | 0) == 10 ? $$113$i + 2 | 0 : $81;
} else {
HEAP8[$$0$i >> 0] = $80;
$$2$i = $$113$i + 1 | 0;
}
$$0$i = $$0$i + 1 | 0;
$80 = HEAP8[$$2$i >> 0] | 0;
if (!($80 << 24 >> 24)) break; else {
$$113$i = $$2$i;
label = 24;
}
}
HEAP8[$$0$i >> 0] = 0;
}
FUNCTION_TABLE_vii[HEAP32[$6 >> 2] & 255](HEAP32[$0 + 4 >> 2] | 0, $75);
$91 = $0 + 404 | 0;
$92 = HEAP32[$91 >> 2] | 0;
if (!$92) {
HEAP32[$91 >> 2] = HEAP32[$45 >> 2];
$$pre$phi$iZ2D = $45;
} else {
$95 = HEAP32[$45 >> 2] | 0;
if (!$95) $$pre$phi$iZ2D = $45; else {
$$018$i = $95;
$$in$i = $92;
while (1) {
$98 = HEAP32[$$018$i >> 2] | 0;
HEAP32[$$018$i >> 2] = $$in$i;
HEAP32[$91 >> 2] = $$018$i;
if (!$98) {
$$pre$phi$iZ2D = $45;
break;
} else {
$$in$i$phi = $$018$i;
$$018$i = $98;
$$in$i = $$in$i$phi;
}
}
}
}
HEAP32[$$pre$phi$iZ2D >> 2] = 0;
HEAP32[$65 >> 2] = 0;
HEAP32[$52 >> 2] = 0;
HEAP32[$58 >> 2] = 0;
$$0 = 1;
STACKTOP = sp;
return $$0 | 0;
} while (0);
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
function __ZN7HashAnyIPKcPS_IS1_iEE9vmakeHashES3_S1_Pi($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$04558 = 0, $$1 = 0, $$sink = 0, $$sink56 = 0, $100 = 0, $102 = 0, $110 = 0, $113 = 0, $114 = 0, $115 = 0, $117 = 0, $129 = 0, $16 = 0, $17 = 0, $3 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $57 = 0, $60 = 0, $63 = 0, $66 = 0, $67 = 0, $68 = 0, $70 = 0, $75 = 0, $83 = 0, $84 = 0, $86 = 0, $87 = 0, $93 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp;
HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
$4 = ($1 | 0) != 0;
if ($4) {
HEAP32[$2 >> 2] = ((HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1)) + 4;
$16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$17 = HEAP32[$16 >> 2] | 0;
HEAP32[$2 >> 2] = $16 + 4;
if (!$17) $$1 = 3; else {
$$04558 = 1;
do {
$$04558 = $$04558 + 1 | 0;
HEAP32[$2 >> 2] = ((HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1)) + 4;
$31 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$32 = HEAP32[$31 >> 2] | 0;
HEAP32[$2 >> 2] = $31 + 4;
} while (($32 | 0) != 0);
$$1 = $$04558 * 3 | 1;
}
} else $$1 = 3;
$34 = __Znwj(28) | 0;
__THREW__ = 0;
invoke_viii(98, $34 | 0, $0 | 0, $$1 | 0);
$35 = __THREW__;
__THREW__ = 0;
if ($35 & 1) {
$37 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($34);
___resumeException($37 | 0);
}
HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
if (!$4) {
STACKTOP = sp;
return $34 | 0;
}
$44 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$45 = HEAP32[$44 >> 2] | 0;
HEAP32[$2 >> 2] = $44 + 4;
$46 = $34 + 4 | 0;
$48 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($1, HEAP32[$46 >> 2] | 0) | 0;
$49 = HEAP32[$34 >> 2] | 0;
$50 = $49 + ($48 << 3) | 0;
$51 = $49 + ($48 << 3) + 4 | 0;
switch (HEAP16[$51 >> 1] | 0) {
case 0:
{
$53 = __Znwj(12) | 0;
HEAP32[$53 >> 2] = $1;
HEAP32[$53 + 4 >> 2] = $45;
HEAP32[$53 + 8 >> 2] = 0;
HEAP32[$50 >> 2] = $53;
$57 = $34 + 12 | 0;
HEAP32[$57 >> 2] = (HEAP32[$57 >> 2] | 0) + -1;
$$sink = 16;
break;
}
case 1:
{
$60 = $34 + 16 | 0;
HEAP32[$60 >> 2] = (HEAP32[$60 >> 2] | 0) + -1;
label = 11;
break;
}
default:
label = 11;
}
if ((label | 0) == 11) {
$63 = HEAP32[$50 >> 2] | 0;
$66 = __Znwj(12) | 0;
$67 = $63 + 8 | 0;
$68 = HEAP32[$67 >> 2] | 0;
HEAP32[$66 >> 2] = $1;
HEAP32[$66 + 4 >> 2] = $45;
HEAP32[$66 + 8 >> 2] = $68;
HEAP32[$67 >> 2] = $66;
$$sink = 8;
}
$70 = $34 + $$sink | 0;
HEAP32[$70 >> 2] = (HEAP32[$70 >> 2] | 0) + 1;
HEAP16[$51 >> 1] = (HEAP16[$51 >> 1] | 0) + 1 << 16 >> 16;
$75 = $34 + 24 | 0;
HEAP32[$75 >> 2] = (HEAP32[$75 >> 2] | 0) + 1;
$83 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$84 = HEAP32[$83 >> 2] | 0;
HEAP32[$2 >> 2] = $83 + 4;
if (!$84) {
STACKTOP = sp;
return $34 | 0;
}
$86 = $34 + 12 | 0;
$87 = $34 + 16 | 0;
$96 = $84;
do {
$93 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$94 = HEAP32[$93 >> 2] | 0;
HEAP32[$2 >> 2] = $93 + 4;
$97 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($96, HEAP32[$46 >> 2] | 0) | 0;
$98 = HEAP32[$34 >> 2] | 0;
$99 = $98 + ($97 << 3) | 0;
$100 = $98 + ($97 << 3) + 4 | 0;
switch (HEAP16[$100 >> 1] | 0) {
case 0:
{
$102 = __Znwj(12) | 0;
HEAP32[$102 >> 2] = $96;
HEAP32[$102 + 4 >> 2] = $94;
HEAP32[$102 + 8 >> 2] = 0;
HEAP32[$99 >> 2] = $102;
HEAP32[$86 >> 2] = (HEAP32[$86 >> 2] | 0) + -1;
$$sink56 = 16;
break;
}
case 1:
{
HEAP32[$87 >> 2] = (HEAP32[$87 >> 2] | 0) + -1;
label = 17;
break;
}
default:
label = 17;
}
if ((label | 0) == 17) {
label = 0;
$110 = HEAP32[$99 >> 2] | 0;
$113 = __Znwj(12) | 0;
$114 = $110 + 8 | 0;
$115 = HEAP32[$114 >> 2] | 0;
HEAP32[$113 >> 2] = $96;
HEAP32[$113 + 4 >> 2] = $94;
HEAP32[$113 + 8 >> 2] = $115;
HEAP32[$114 >> 2] = $113;
$$sink56 = 8;
}
$117 = $34 + $$sink56 | 0;
HEAP32[$117 >> 2] = (HEAP32[$117 >> 2] | 0) + 1;
HEAP16[$100 >> 1] = (HEAP16[$100 >> 1] | 0) + 1 << 16 >> 16;
HEAP32[$75 >> 2] = (HEAP32[$75 >> 2] | 0) + 1;
$129 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$96 = HEAP32[$129 >> 2] | 0;
HEAP32[$2 >> 2] = $129 + 4;
} while (($96 | 0) != 0);
STACKTOP = sp;
return $34 | 0;
}
function __ZNK25TwoHConcretePostureChange5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $57 = 0, $58 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer15 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 112 | 0;
$vararg_buffer15 = sp + 56 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
HEAP32[$vararg_buffer >> 2] = $0;
_fprintf($1, 35333, $vararg_buffer) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(35363, 15, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
$8 = $0 + 448 | 0;
$9 = HEAPU8[$8 >> 0] | HEAPU8[$8 + 1 >> 0] << 8;
HEAP32[$vararg_buffer1 >> 2] = (($9 & 65535) << 1 & 2 ^ 2) + 43;
HEAP32[$vararg_buffer1 + 4 >> 2] = $9 & 2 ? 65 : 45;
HEAP32[$vararg_buffer1 + 8 >> 2] = $9 & 4 ? 68 : 45;
HEAP32[$vararg_buffer1 + 12 >> 2] = $9 & 8 ? 72 : 45;
HEAP32[$vararg_buffer1 + 16 >> 2] = $9 & 16 ? 69 : 45;
HEAP32[$vararg_buffer1 + 20 >> 2] = $9 & 32 ? 80 : 45;
HEAP32[$vararg_buffer1 + 24 >> 2] = $9 & 64 ? 83 : 45;
HEAP32[$vararg_buffer1 + 28 >> 2] = $9 & 128 ? 70 : 45;
HEAP32[$vararg_buffer1 + 32 >> 2] = $9 & 256 ? 87 : 45;
HEAP32[$vararg_buffer1 + 36 >> 2] = ($9 & 112) == 0 ? 45 : ($9 & 6) == 0 ? 82 : 45;
HEAP32[$vararg_buffer1 + 40 >> 2] = (($9 & 65535) >>> 3 & 64 | 45) & 65535;
HEAP32[$vararg_buffer1 + 44 >> 2] = $9 & 1024 ? 114 : 45;
_fprintf($1, 35379, $vararg_buffer1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(35405, 14, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
$57 = $0 + 450 | 0;
$58 = HEAPU8[$57 >> 0] | HEAPU8[$57 + 1 >> 0] << 8;
HEAP32[$vararg_buffer15 >> 2] = (($58 & 65535) << 1 & 2 ^ 2) + 43;
HEAP32[$vararg_buffer15 + 4 >> 2] = $58 & 2 ? 65 : 45;
HEAP32[$vararg_buffer15 + 8 >> 2] = $58 & 4 ? 68 : 45;
HEAP32[$vararg_buffer15 + 12 >> 2] = $58 & 8 ? 72 : 45;
HEAP32[$vararg_buffer15 + 16 >> 2] = $58 & 16 ? 69 : 45;
HEAP32[$vararg_buffer15 + 20 >> 2] = $58 & 32 ? 80 : 45;
HEAP32[$vararg_buffer15 + 24 >> 2] = $58 & 64 ? 83 : 45;
HEAP32[$vararg_buffer15 + 28 >> 2] = $58 & 128 ? 70 : 45;
HEAP32[$vararg_buffer15 + 32 >> 2] = $58 & 256 ? 87 : 45;
HEAP32[$vararg_buffer15 + 36 >> 2] = ($58 & 112) == 0 ? 45 : ($58 & 6) == 0 ? 82 : 45;
HEAP32[$vararg_buffer15 + 40 >> 2] = (($58 & 65535) >>> 3 & 64 | 45) & 65535;
HEAP32[$vararg_buffer15 + 44 >> 2] = $58 & 1024 ? 114 : 45;
_fprintf($1, 35379, $vararg_buffer15) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(35420, 18, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK19OneHConcretePosture5printEP8_IO_FILE($0, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(35439, 17, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK19OneHConcretePosture5printEP8_IO_FILE($0 + 112 | 0, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(35457, 16, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK19OneHConcretePosture5printEP8_IO_FILE($0 + 224 | 0, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(35474, 15, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK19OneHConcretePosture5printEP8_IO_FILE($0 + 336 | 0, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(35490, 22, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK19PostureChangeTiming5printEP8_IO_FILE($0 + 452 | 0, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(35513, 21, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK19PostureChangeTiming5printEP8_IO_FILE($0 + 460 | 0, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
STACKTOP = sp;
return;
}
function __ZN7HashAnyIPKciE9vmakeHashEiS1_Pi($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$04557 = 0, $$1 = 0, $$sink = 0, $$sink55 = 0, $100 = 0, $107 = 0, $109 = 0, $110 = 0, $111 = 0, $113 = 0, $125 = 0, $16 = 0, $17 = 0, $3 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $73 = 0, $81 = 0, $82 = 0, $84 = 0, $85 = 0, $91 = 0, $92 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp;
HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
$4 = ($1 | 0) != 0;
if ($4) {
HEAP32[$2 >> 2] = ((HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1)) + 4;
$16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$17 = HEAP32[$16 >> 2] | 0;
HEAP32[$2 >> 2] = $16 + 4;
if (!$17) $$1 = 3; else {
$$04557 = 1;
do {
$$04557 = $$04557 + 1 | 0;
HEAP32[$2 >> 2] = ((HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1)) + 4;
$31 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$32 = HEAP32[$31 >> 2] | 0;
HEAP32[$2 >> 2] = $31 + 4;
} while (($32 | 0) != 0);
$$1 = $$04557 * 3 | 1;
}
} else $$1 = 3;
$34 = __Znwj(28) | 0;
__THREW__ = 0;
invoke_viii(74, $34 | 0, $0 | 0, $$1 | 0);
$35 = __THREW__;
__THREW__ = 0;
if ($35 & 1) {
$37 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($34);
___resumeException($37 | 0);
}
HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
if (!$4) {
STACKTOP = sp;
return $34 | 0;
}
$44 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$45 = HEAP32[$44 >> 2] | 0;
HEAP32[$2 >> 2] = $44 + 4;
$46 = $34 + 4 | 0;
$48 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($1, HEAP32[$46 >> 2] | 0) | 0;
$49 = HEAP32[$34 >> 2] | 0;
$50 = $49 + ($48 << 3) | 0;
$51 = $49 + ($48 << 3) + 4 | 0;
switch (HEAP16[$51 >> 1] | 0) {
case 0:
{
$53 = __Znwj(12) | 0;
HEAP32[$53 >> 2] = $1;
HEAP32[$53 + 4 >> 2] = $45;
HEAP32[$53 + 8 >> 2] = 0;
HEAP32[$50 >> 2] = $53;
$56 = $34 + 12 | 0;
HEAP32[$56 >> 2] = (HEAP32[$56 >> 2] | 0) + -1;
$$sink = 16;
break;
}
case 1:
{
$59 = $34 + 16 | 0;
HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + -1;
label = 11;
break;
}
default:
label = 11;
}
if ((label | 0) == 11) {
$62 = HEAP32[$50 >> 2] | 0;
$64 = __Znwj(12) | 0;
$65 = $62 + 8 | 0;
$66 = HEAP32[$65 >> 2] | 0;
HEAP32[$64 >> 2] = $1;
HEAP32[$64 + 4 >> 2] = $45;
HEAP32[$64 + 8 >> 2] = $66;
HEAP32[$65 >> 2] = $64;
$$sink = 8;
}
$68 = $34 + $$sink | 0;
HEAP32[$68 >> 2] = (HEAP32[$68 >> 2] | 0) + 1;
HEAP16[$51 >> 1] = (HEAP16[$51 >> 1] | 0) + 1 << 16 >> 16;
$73 = $34 + 24 | 0;
HEAP32[$73 >> 2] = (HEAP32[$73 >> 2] | 0) + 1;
$81 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$82 = HEAP32[$81 >> 2] | 0;
HEAP32[$2 >> 2] = $81 + 4;
if (!$82) {
STACKTOP = sp;
return $34 | 0;
}
$84 = $34 + 12 | 0;
$85 = $34 + 16 | 0;
$94 = $82;
do {
$91 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$92 = HEAP32[$91 >> 2] | 0;
HEAP32[$2 >> 2] = $91 + 4;
$95 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($94, HEAP32[$46 >> 2] | 0) | 0;
$96 = HEAP32[$34 >> 2] | 0;
$97 = $96 + ($95 << 3) | 0;
$98 = $96 + ($95 << 3) + 4 | 0;
switch (HEAP16[$98 >> 1] | 0) {
case 0:
{
$100 = __Znwj(12) | 0;
HEAP32[$100 >> 2] = $94;
HEAP32[$100 + 4 >> 2] = $92;
HEAP32[$100 + 8 >> 2] = 0;
HEAP32[$97 >> 2] = $100;
HEAP32[$84 >> 2] = (HEAP32[$84 >> 2] | 0) + -1;
$$sink55 = 16;
break;
}
case 1:
{
HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + -1;
label = 17;
break;
}
default:
label = 17;
}
if ((label | 0) == 17) {
label = 0;
$107 = HEAP32[$97 >> 2] | 0;
$109 = __Znwj(12) | 0;
$110 = $107 + 8 | 0;
$111 = HEAP32[$110 >> 2] | 0;
HEAP32[$109 >> 2] = $94;
HEAP32[$109 + 4 >> 2] = $92;
HEAP32[$109 + 8 >> 2] = $111;
HEAP32[$110 >> 2] = $109;
$$sink55 = 8;
}
$113 = $34 + $$sink55 | 0;
HEAP32[$113 >> 2] = (HEAP32[$113 >> 2] | 0) + 1;
HEAP16[$98 >> 1] = (HEAP16[$98 >> 1] | 0) + 1 << 16 >> 16;
HEAP32[$73 >> 2] = (HEAP32[$73 >> 2] | 0) + 1;
$125 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$94 = HEAP32[$125 >> 2] | 0;
HEAP32[$2 >> 2] = $125 + 4;
} while (($94 | 0) != 0);
STACKTOP = sp;
return $34 | 0;
}
function __Z19DeleteNonmanualDefsv() {
var $$01013$i = 0, $$011$i = 0, $$012$i = 0, $$06$i = 0, $$06$i$i = 0, $$06$i4 = 0, $$pre = 0, $$pre$i11 = 0, $$pre13 = 0, $$pre14 = 0, $$pre15 = 0, $0 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $25 = 0, $26 = 0, $31 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $47 = 0, $5 = 0, $50 = 0, $51 = 0, $58 = 0, $60 = 0, $62 = 0, $63 = 0, $65 = 0, $67 = 0, $69 = 0, $70 = 0, $73 = 0, $74 = 0, $8 = 0, $81 = 0, $83 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
$0 = HEAP32[16660] | 0;
do if ($0 | 0) {
$2 = HEAP32[$0 >> 2] | 0;
if (!$2) $21 = $0; else {
$4 = $0 + 12 | 0;
$5 = HEAP32[$4 >> 2] | 0;
if (($5 | 0) > 0) {
$$06$i = 0;
$8 = $2;
$91 = $5;
while (1) {
$9 = HEAP32[$8 + ($$06$i << 2) >> 2] | 0;
if (!$9) $18 = $91; else {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$9 >> 2] | 0) + 4 >> 2] & 255]($9);
HEAP32[(HEAP32[$0 >> 2] | 0) + ($$06$i << 2) >> 2] = 0;
$18 = HEAP32[$4 >> 2] | 0;
}
$16 = $$06$i + 1 | 0;
if (($16 | 0) >= ($18 | 0)) break;
$$06$i = $16;
$8 = HEAP32[$0 >> 2] | 0;
$91 = $18;
}
$$pre = HEAP32[16660] | 0;
if (!$$pre) break; else $21 = $$pre;
} else $21 = $0;
}
$20 = HEAP32[$21 >> 2] | 0;
if ($20 | 0) _free($20);
__ZdlPv($21);
HEAP32[16660] = 0;
} while (0);
$23 = HEAP32[16659] | 0;
do if ($23 | 0) {
$25 = $23 + 4 | 0;
$26 = HEAP32[$25 >> 2] | 0;
if (($26 | 0) > 0) {
$$01013$i = 0;
$92 = $26;
while (1) {
$$011$i = HEAP32[(HEAP32[$23 >> 2] | 0) + ($$01013$i << 3) >> 2] | 0;
if (!$$011$i) $37 = $92; else {
$$012$i = $$011$i;
do {
$31 = HEAP32[$$012$i >> 2] | 0;
if ($31 | 0) _free($31);
$$012$i = HEAP32[$$012$i + 8 >> 2] | 0;
} while (($$012$i | 0) != 0);
$37 = HEAP32[$25 >> 2] | 0;
}
$$01013$i = $$01013$i + 1 | 0;
if (($$01013$i | 0) >= ($37 | 0)) break; else $92 = $37;
}
$$pre13 = HEAP32[16659] | 0;
if (!$$pre13) break; else $39 = $$pre13;
} else $39 = $23;
__THREW__ = 0;
invoke_vi(145, $39 | 0);
$40 = __THREW__;
__THREW__ = 0;
if ($40 & 1) {
$89 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($39);
___resumeException($89 | 0);
} else {
__ZdlPv($39);
HEAP32[16659] = 0;
break;
}
} while (0);
$42 = HEAP32[16661] | 0;
do if ($42 | 0) {
$44 = HEAP32[$42 >> 2] | 0;
if (!$44) $63 = $42; else {
$46 = $42 + 12 | 0;
$47 = HEAP32[$46 >> 2] | 0;
if (($47 | 0) > 0) {
$$06$i4 = 0;
$50 = $44;
$93 = $47;
while (1) {
$51 = HEAP32[$50 + ($$06$i4 << 2) >> 2] | 0;
if (!$51) $60 = $93; else {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$51 >> 2] | 0) + 4 >> 2] & 255]($51);
HEAP32[(HEAP32[$42 >> 2] | 0) + ($$06$i4 << 2) >> 2] = 0;
$60 = HEAP32[$46 >> 2] | 0;
}
$58 = $$06$i4 + 1 | 0;
if (($58 | 0) >= ($60 | 0)) break;
$$06$i4 = $58;
$50 = HEAP32[$42 >> 2] | 0;
$93 = $60;
}
$$pre14 = HEAP32[16661] | 0;
if (!$$pre14) break; else $63 = $$pre14;
} else $63 = $42;
}
$62 = HEAP32[$63 >> 2] | 0;
if ($62 | 0) _free($62);
__ZdlPv($63);
HEAP32[16661] = 0;
} while (0);
$65 = HEAP32[16662] | 0;
if (!$65) return;
$67 = HEAP32[$65 >> 2] | 0;
L56 : do if (!$67) $88 = $65; else {
$69 = $65 + 12 | 0;
$70 = HEAP32[$69 >> 2] | 0;
do if (($70 | 0) > 0) {
$$06$i$i = 0;
$73 = $67;
$94 = $70;
while (1) {
$74 = HEAP32[$73 + ($$06$i$i << 2) >> 2] | 0;
if (!$74) $83 = $94; else {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$74 >> 2] | 0) + 4 >> 2] & 255]($74);
HEAP32[(HEAP32[$65 >> 2] | 0) + ($$06$i$i << 2) >> 2] = 0;
$83 = HEAP32[$69 >> 2] | 0;
}
$81 = $$06$i$i + 1 | 0;
if (($81 | 0) >= ($83 | 0)) break;
$$06$i$i = $81;
$73 = HEAP32[$65 >> 2] | 0;
$94 = $83;
}
$$pre$i11 = HEAP32[16662] | 0;
if (!$$pre$i11) return; else {
$$pre15 = HEAP32[$$pre$i11 >> 2] | 0;
if (!$$pre15) {
$88 = $$pre$i11;
break L56;
} else {
$86 = $$pre15;
$87 = $$pre$i11;
break;
}
}
} else {
$86 = $67;
$87 = $65;
} while (0);
_free($86);
HEAP32[$87 >> 2] = 0;
$88 = $87;
} while (0);
__ZdlPv($88);
HEAP32[16662] = 0;
return;
}
function __Z21CreateTrajectoryTablev() {
var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$vararg_buffer = sp;
HEAP32[$vararg_buffer >> 2] = 1;
HEAP32[$vararg_buffer + 4 >> 2] = 25201;
HEAP32[$vararg_buffer + 8 >> 2] = 2;
HEAP32[$vararg_buffer + 12 >> 2] = 25215;
HEAP32[$vararg_buffer + 16 >> 2] = 3;
HEAP32[$vararg_buffer + 20 >> 2] = 50587;
HEAP32[$vararg_buffer + 24 >> 2] = 8;
HEAP32[$vararg_buffer + 28 >> 2] = 25229;
HEAP32[$vararg_buffer + 32 >> 2] = 4;
HEAP32[$vararg_buffer + 36 >> 2] = 50591;
HEAP32[$vararg_buffer + 40 >> 2] = 5;
HEAP32[$vararg_buffer + 44 >> 2] = 50603;
HEAP32[$vararg_buffer + 48 >> 2] = 6;
HEAP32[$vararg_buffer + 52 >> 2] = 50571;
HEAP32[$vararg_buffer + 56 >> 2] = 7;
HEAP32[$vararg_buffer + 60 >> 2] = 0;
$0 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 50551, $vararg_buffer) | 0;
HEAP32[16635] = $0;
$1 = _malloc(280) | 0;
HEAP32[16636] = $1;
HEAPF32[$1 + 4 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 12 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 16 >> 2] = Math_fround(.00100000005);
HEAPF32[$1 + 20 >> 2] = Math_fround(.990000009);
HEAPF32[$1 + 24 >> 2] = Math_fround(0.0);
HEAPF32[$1 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 32 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 36 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 40 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 44 >> 2] = Math_fround(.00100000005);
HEAPF32[$1 + 48 >> 2] = Math_fround(.990000009);
HEAPF32[$1 + 52 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 28 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 60 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 64 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 68 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 72 >> 2] = Math_fround(.00100000005);
HEAPF32[$1 + 76 >> 2] = Math_fround(.990000009);
HEAPF32[$1 + 80 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 56 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 88 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 92 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 96 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 100 >> 2] = Math_fround(.00100000005);
HEAPF32[$1 + 104 >> 2] = Math_fround(.990000009);
HEAPF32[$1 + 108 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 84 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 116 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 120 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 124 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 128 >> 2] = Math_fround(.00100000005);
HEAPF32[$1 + 132 >> 2] = Math_fround(.990000009);
HEAPF32[$1 + 136 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 112 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 140 >> 2] = Math_fround(1.0);
HEAPF32[$1 + 144 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 148 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 152 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 156 >> 2] = Math_fround(.00100000005);
HEAPF32[$1 + 160 >> 2] = Math_fround(.990000009);
HEAPF32[$1 + 164 >> 2] = Math_fround(0.0);
$2 = HEAP32[16636] | 0;
HEAPF32[$2 + 140 >> 2] = Math_fround(0.0);
HEAPF32[$2 + 172 >> 2] = Math_fround(0.0);
HEAPF32[$2 + 176 >> 2] = Math_fround(0.0);
HEAPF32[$2 + 180 >> 2] = Math_fround(0.0);
HEAPF32[$2 + 184 >> 2] = Math_fround(.00100000005);
HEAPF32[$2 + 188 >> 2] = Math_fround(.990000009);
HEAPF32[$2 + 192 >> 2] = Math_fround(0.0);
HEAPF32[$2 + 168 >> 2] = Math_fround(0.0);
HEAPF32[$2 + 200 >> 2] = Math_fround(0.0);
HEAPF32[$2 + 204 >> 2] = Math_fround(0.0);
HEAPF32[$2 + 208 >> 2] = Math_fround(0.0);
HEAPF32[$2 + 212 >> 2] = Math_fround(.00100000005);
HEAPF32[$2 + 216 >> 2] = Math_fround(.990000009);
HEAPF32[$2 + 220 >> 2] = Math_fround(0.0);
HEAPF32[$2 + 196 >> 2] = Math_fround(0.0);
HEAPF32[$2 + 228 >> 2] = Math_fround(0.0);
HEAPF32[$2 + 232 >> 2] = Math_fround(0.0);
HEAPF32[$2 + 236 >> 2] = Math_fround(0.0);
HEAPF32[$2 + 240 >> 2] = Math_fround(.00100000005);
HEAPF32[$2 + 244 >> 2] = Math_fround(.990000009);
HEAPF32[$2 + 248 >> 2] = Math_fround(0.0);
HEAPF32[$2 + 224 >> 2] = Math_fround(0.0);
HEAPF32[$2 + 256 >> 2] = Math_fround(0.0);
HEAPF32[$2 + 260 >> 2] = Math_fround(0.0);
HEAPF32[$2 + 264 >> 2] = Math_fround(0.0);
HEAPF32[$2 + 268 >> 2] = Math_fround(.00100000005);
HEAPF32[$2 + 272 >> 2] = Math_fround(.990000009);
HEAPF32[$2 + 276 >> 2] = Math_fround(0.0);
HEAPF32[$2 + 252 >> 2] = Math_fround(0.0);
STACKTOP = sp;
return;
}
function _cdataSectionProcessor($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$152$i$i = 0, $$152$i$i22 = 0, $100 = 0, $103 = 0, $104 = 0, $11 = 0, $111 = 0, $112 = 0, $13 = 0, $18 = 0, $23 = 0, $26 = 0, $27 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $48 = 0, $5 = 0, $50 = 0, $52 = 0, $55 = 0, $56 = 0, $63 = 0, $64 = 0, $7 = 0, $71 = 0, $74 = 0, $75 = 0, $78 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $96 = 0, $98 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$4 = sp;
HEAP32[$4 >> 2] = $1;
$5 = $0 + 144 | 0;
$7 = $0 + 468 | 0;
$11 = _doCdataSection($0, HEAP32[$5 >> 2] | 0, $4, $2, $3, (HEAP8[$7 >> 0] | 0) == 0 & 1) | 0;
$13 = HEAP32[$4 >> 2] | 0;
if (($11 | 0) != 0 | ($13 | 0) == 0) {
$$0 = $11;
STACKTOP = sp;
return $$0 | 0;
}
$18 = $0 + 264 | 0;
if (!(HEAP32[$0 + 460 >> 2] | 0)) {
HEAP32[$18 >> 2] = 29;
$71 = _doContent($0, 0, HEAP32[$5 >> 2] | 0, $13, $2, $3, (HEAP8[$7 >> 0] | 0) == 0 & 1) | 0;
if ($71 | 0) {
$$0 = $71;
STACKTOP = sp;
return $$0 | 0;
}
$74 = $0 + 16 | 0;
$75 = HEAP32[$0 + 348 >> 2] | 0;
if (!$75) {
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else $78 = $75;
while (1) {
$80 = (HEAP32[$78 + 24 >> 2] | 0) + 1 | 0;
$81 = $78 + 36 | 0;
$82 = HEAP32[$81 >> 2] | 0;
$83 = $82 + $80 | 0;
$84 = $78 + 4 | 0;
$85 = HEAP32[$84 >> 2] | 0;
if (($85 | 0) == ($83 | 0)) {
$$0 = 0;
label = 25;
break;
}
$87 = $78 + 8 | 0;
$88 = HEAP32[$87 >> 2] | 0;
$89 = $88 + $80 | 0;
$90 = $78 + 40 | 0;
if (($89 | 0) > ((HEAP32[$90 >> 2] | 0) - $82 | 0)) {
$96 = FUNCTION_TABLE_iii[HEAP32[$74 >> 2] & 63]($82, $89) | 0;
if (!$96) {
$$0 = 1;
label = 25;
break;
}
$98 = $78 + 12 | 0;
$100 = HEAP32[$81 >> 2] | 0;
if ((HEAP32[$98 >> 2] | 0) == ($100 | 0)) HEAP32[$98 >> 2] = $96;
$103 = $78 + 16 | 0;
$104 = HEAP32[$103 >> 2] | 0;
if ($104 | 0) HEAP32[$103 >> 2] = $96 + ($104 - $100);
HEAP32[$81 >> 2] = $96;
HEAP32[$90 >> 2] = $96 + $89;
$$152$i$i22 = $96 + $80 | 0;
$111 = HEAP32[$84 >> 2] | 0;
$112 = HEAP32[$87 >> 2] | 0;
} else {
$$152$i$i22 = $83;
$111 = $85;
$112 = $88;
}
_memcpy($$152$i$i22 | 0, $111 | 0, $112 | 0) | 0;
HEAP32[$84 >> 2] = $$152$i$i22;
$78 = HEAP32[$78 >> 2] | 0;
if (!$78) {
$$0 = 0;
label = 25;
break;
}
}
if ((label | 0) == 25) {
STACKTOP = sp;
return $$0 | 0;
}
} else {
HEAP32[$18 >> 2] = 33;
$23 = _doContent($0, 1, HEAP32[$5 >> 2] | 0, $13, $2, $3, (HEAP8[$7 >> 0] | 0) == 0 & 1) | 0;
if ($23 | 0) {
$$0 = $23;
STACKTOP = sp;
return $$0 | 0;
}
$26 = $0 + 16 | 0;
$27 = HEAP32[$0 + 348 >> 2] | 0;
if (!$27) {
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
} else $30 = $27;
while (1) {
$32 = (HEAP32[$30 + 24 >> 2] | 0) + 1 | 0;
$33 = $30 + 36 | 0;
$34 = HEAP32[$33 >> 2] | 0;
$35 = $34 + $32 | 0;
$36 = $30 + 4 | 0;
$37 = HEAP32[$36 >> 2] | 0;
if (($37 | 0) == ($35 | 0)) {
$$0 = 0;
label = 25;
break;
}
$39 = $30 + 8 | 0;
$40 = HEAP32[$39 >> 2] | 0;
$41 = $40 + $32 | 0;
$42 = $30 + 40 | 0;
if (($41 | 0) > ((HEAP32[$42 >> 2] | 0) - $34 | 0)) {
$48 = FUNCTION_TABLE_iii[HEAP32[$26 >> 2] & 63]($34, $41) | 0;
if (!$48) {
$$0 = 1;
label = 25;
break;
}
$50 = $30 + 12 | 0;
$52 = HEAP32[$33 >> 2] | 0;
if ((HEAP32[$50 >> 2] | 0) == ($52 | 0)) HEAP32[$50 >> 2] = $48;
$55 = $30 + 16 | 0;
$56 = HEAP32[$55 >> 2] | 0;
if ($56 | 0) HEAP32[$55 >> 2] = $48 + ($56 - $52);
HEAP32[$33 >> 2] = $48;
HEAP32[$42 >> 2] = $48 + $41;
$$152$i$i = $48 + $32 | 0;
$63 = HEAP32[$36 >> 2] | 0;
$64 = HEAP32[$39 >> 2] | 0;
} else {
$$152$i$i = $35;
$63 = $37;
$64 = $40;
}
_memcpy($$152$i$i | 0, $63 | 0, $64 | 0) | 0;
HEAP32[$36 >> 2] = $$152$i$i;
$30 = HEAP32[$30 >> 2] | 0;
if (!$30) {
$$0 = 0;
label = 25;
break;
}
}
if ((label | 0) == 25) {
STACKTOP = sp;
return $$0 | 0;
}
}
return 0;
}
function __ZN7Getopts6AddoptE10OptionTypebPKcz($0, $1, $2, $3, $varargs) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$varargs = $varargs | 0;
var $$pre$phi26Z2D = 0, $$pre$phiZ2D = 0, $$sink$i$i = 0, $10 = 0, $103 = 0, $11 = 0, $110 = 0, $112 = 0, $20 = 0, $24 = 0, $25 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $39 = 0, $4 = 0, $41 = 0, $47 = 0, $48 = 0, $5 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $60 = 0, $61 = 0, $62 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $70 = 0, $73 = 0, $77 = 0, $8 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $91 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$4 = sp;
HEAP32[$4 >> 2] = $varargs;
$5 = __Znwj(20) | 0;
$7 = ($1 | 0) == 5;
$8 = ($1 | 0) == 2 | $7;
$10 = ($1 | 1 | 0) == 5;
switch ($1 | 0) {
case 0:
case 2:
case 3:
{
$20 = 1;
break;
}
default:
$20 = $7;
}
$11 = ($1 | 0) == 6;
HEAP8[$5 >> 0] = $8 & 1;
HEAP8[$5 + 1 >> 0] = ($11 | $2) & 1;
HEAP8[$5 + 2 >> 0] = $10 & 1;
HEAP8[$5 + 3 >> 0] = $20 & ($11 ^ 1) & 1;
HEAP8[$5 + 4 >> 0] = $11 & 1;
__THREW__ = 0;
$24 = invoke_ii(21, $3 | 0) | 0;
$25 = __THREW__;
__THREW__ = 0;
if ($25 & 1) {
$58 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($5);
___resumeException($58 | 0);
}
HEAP32[$5 + 8 >> 2] = $24;
HEAP32[$5 + 12 >> 2] = 0;
HEAP32[$5 + 16 >> 2] = 0;
$30 = $0 + 8 | 0;
$31 = HEAP32[$30 >> 2] | 0;
$32 = $31 + 12 | 0;
$33 = HEAP32[$32 >> 2] | 0;
if (($33 | 0) < 0) $48 = $33; else {
if ((HEAP32[$31 + 8 >> 2] | 0) > ($33 | 0)) {
$$pre$phi26Z2D = $33 + 1 | 0;
label = 8;
} else {
$39 = HEAP32[$31 + 4 >> 2] | 0;
$41 = $33 + 1 | 0;
__ZN13DynamicArrayPI10OptionSpecE6resizeEi($31, ($39 | 0) > ($33 | 0) ? $39 : $41 + ($33 >>> 1) | 0);
if ((HEAP32[$32 >> 2] | 0) <= ($33 | 0)) {
$$pre$phi26Z2D = $41;
label = 8;
}
}
if ((label | 0) == 8) HEAP32[$32 >> 2] = $$pre$phi26Z2D;
HEAP32[(HEAP32[$31 >> 2] | 0) + ($33 << 2) >> 2] = $5;
$48 = HEAP32[(HEAP32[$30 >> 2] | 0) + 12 >> 2] | 0;
}
$47 = $48 + -1 | 0;
$54 = (HEAP32[$4 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$55 = HEAP32[$54 >> 2] | 0;
HEAP32[$4 >> 2] = $54 + 4;
if (!$55) {
STACKTOP = sp;
return;
}
$57 = $0 + 4 | 0;
$60 = $55;
do {
$61 = __Z10copyStringPKc($60) | 0;
$62 = HEAP32[$0 >> 2] | 0;
$65 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($61, HEAP32[$62 + 4 >> 2] | 0) | 0;
$66 = HEAP32[$62 >> 2] | 0;
$67 = $66 + ($65 << 3) | 0;
$68 = $66 + ($65 << 3) + 4 | 0;
switch (HEAP16[$68 >> 1] | 0) {
case 0:
{
$70 = __Znwj(12) | 0;
HEAP32[$70 >> 2] = $61;
HEAP32[$70 + 4 >> 2] = $47;
HEAP32[$70 + 8 >> 2] = 0;
HEAP32[$67 >> 2] = $70;
$73 = $62 + 12 | 0;
HEAP32[$73 >> 2] = (HEAP32[$73 >> 2] | 0) + -1;
$$sink$i$i = $62 + 16 | 0;
break;
}
case 1:
{
$77 = $62 + 16 | 0;
HEAP32[$77 >> 2] = (HEAP32[$77 >> 2] | 0) + -1;
label = 16;
break;
}
default:
label = 16;
}
if ((label | 0) == 16) {
label = 0;
$80 = HEAP32[$67 >> 2] | 0;
$82 = __Znwj(12) | 0;
$83 = $80 + 8 | 0;
$84 = HEAP32[$83 >> 2] | 0;
HEAP32[$82 >> 2] = $61;
HEAP32[$82 + 4 >> 2] = $47;
HEAP32[$82 + 8 >> 2] = $84;
HEAP32[$83 >> 2] = $82;
$$sink$i$i = $62 + 8 | 0;
}
HEAP32[$$sink$i$i >> 2] = (HEAP32[$$sink$i$i >> 2] | 0) + 1;
HEAP16[$68 >> 1] = (HEAP16[$68 >> 1] | 0) + 1 << 16 >> 16;
$91 = $62 + 24 | 0;
HEAP32[$91 >> 2] = (HEAP32[$91 >> 2] | 0) + 1;
$94 = HEAP32[$57 >> 2] | 0;
$95 = $94 + 12 | 0;
$96 = HEAP32[$95 >> 2] | 0;
if (($96 | 0) >= 0) {
if ((HEAP32[$94 + 8 >> 2] | 0) > ($96 | 0)) {
$$pre$phiZ2D = $96 + 1 | 0;
label = 22;
} else {
$110 = HEAP32[$94 + 4 >> 2] | 0;
$112 = $96 + 1 | 0;
__ZN13DynamicArrayPIcE6resizeEi($94, ($110 | 0) > ($96 | 0) ? $110 : $112 + ($96 >>> 1) | 0);
if ((HEAP32[$95 >> 2] | 0) <= ($96 | 0)) {
$$pre$phiZ2D = $112;
label = 22;
}
}
if ((label | 0) == 22) {
label = 0;
HEAP32[$95 >> 2] = $$pre$phiZ2D;
}
HEAP32[(HEAP32[$94 >> 2] | 0) + ($96 << 2) >> 2] = $61;
}
$103 = (HEAP32[$4 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$60 = HEAP32[$103 >> 2] | 0;
HEAP32[$4 >> 2] = $103 + 4;
} while (($60 | 0) != 0);
STACKTOP = sp;
return;
}
function __ZN20HanimAnimationRecord16ApplyPseudoMorphEsf($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
var $19 = 0, $24 = 0, $3 = 0, $31 = 0, $36 = 0, $41 = 0, $46 = 0, $51 = 0, $56 = 0, $61 = 0, $66 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer = sp;
$3 = sp + 8 | 0;
do switch ($1 << 16 >> 16 | 0) {
case 0:
{
__ZL18DistributeRotationRK6VectorffR13DynamicArray1IP13JointRotationEPK11HanimAvatar(64576, $2, $2, $0 + 324 | 0);
STACKTOP = sp;
return;
}
case 1:
{
__ZL18DistributeRotationRK6VectorffR13DynamicArray1IP13JointRotationEPK11HanimAvatar(64552, $2, Math_fround($2 * Math_fround(.599999964)), $0 + 324 | 0);
STACKTOP = sp;
return;
}
case 2:
{
__ZL18DistributeRotationRK6VectorffR13DynamicArray1IP13JointRotationEPK11HanimAvatar(64528, $2, Math_fround($2 * Math_fround(.599999964)), $0 + 324 | 0);
STACKTOP = sp;
return;
}
case 3:
{
__ZL18DistributeRotationRK6VectorffR13DynamicArray1IP13JointRotationEPK11HanimAvatar(64528, Math_fround(0.0), $2, $0 + 324 | 0);
STACKTOP = sp;
return;
}
case 4:
{
__ZL18DistributeRotationRK6VectorffR13DynamicArray1IP13JointRotationEPK11HanimAvatar(64564, $2, Math_fround(-$2), $0 + 324 | 0);
STACKTOP = sp;
return;
}
case 5:
{
__ZL18DistributeRotationRK6VectorffR13DynamicArray1IP13JointRotationEPK11HanimAvatar(64576, $2, $2, $0 + 308 | 0);
STACKTOP = sp;
return;
}
case 6:
{
__ZL18DistributeRotationRK6VectorffR13DynamicArray1IP13JointRotationEPK11HanimAvatar(64552, $2, Math_fround($2 * Math_fround(.599999964)), $0 + 308 | 0);
STACKTOP = sp;
return;
}
case 7:
{
__ZL18DistributeRotationRK6VectorffR13DynamicArray1IP13JointRotationEPK11HanimAvatar(64528, $2, Math_fround($2 * Math_fround(.599999964)), $0 + 308 | 0);
STACKTOP = sp;
return;
}
case 8:
{
__ZN10QuaternionC2ERK6Vectorfb($3, 64528, $2, 1);
$19 = HEAP32[$0 + 120 >> 2] | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$19 >> 2] | 0) + 20 >> 2] & 255]($19, $3);
STACKTOP = sp;
return;
}
case 9:
{
__ZN10QuaternionC2ERK6Vectorfb($3, 64552, $2, 1);
$24 = HEAP32[$0 + 120 >> 2] | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$24 >> 2] | 0) + 20 >> 2] & 255]($24, $3);
if (!0) {
STACKTOP = sp;
return;
}
HEAPF64[$vararg_buffer >> 3] = +$2;
__Z7eprintfPKcz(12457, $vararg_buffer);
STACKTOP = sp;
return;
}
case 10:
{
__ZN10QuaternionC2ERK6Vectorfb($3, 64576, $2, 1);
$31 = HEAP32[$0 + 120 >> 2] | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$31 >> 2] | 0) + 20 >> 2] & 255]($31, $3);
STACKTOP = sp;
return;
}
case 11:
{
__ZN10QuaternionC2ERK6Vectorfb($3, 64528, $2, 1);
$36 = HEAP32[$0 + 136 >> 2] | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$36 >> 2] | 0) + 20 >> 2] & 255]($36, $3);
STACKTOP = sp;
return;
}
case 12:
{
__ZN10QuaternionC2ERK6Vectorfb($3, 64588, $2, 1);
$41 = HEAP32[$0 + 136 >> 2] | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$41 >> 2] | 0) + 20 >> 2] & 255]($41, $3);
STACKTOP = sp;
return;
}
case 13:
{
__ZN10QuaternionC2ERK6Vectorfb($3, 64540, $2, 1);
$46 = HEAP32[$0 + 136 >> 2] | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$46 >> 2] | 0) + 20 >> 2] & 255]($46, $3);
STACKTOP = sp;
return;
}
case 14:
{
__ZN10QuaternionC2ERK6Vectorfb($3, 64564, $2, 1);
$51 = HEAP32[$0 + 296 >> 2] | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$51 >> 2] | 0) + 20 >> 2] & 255]($51, $3);
STACKTOP = sp;
return;
}
case 15:
{
__ZN10QuaternionC2ERK6Vectorfb($3, 64576, $2, 1);
$56 = HEAP32[$0 + 296 >> 2] | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$56 >> 2] | 0) + 20 >> 2] & 255]($56, $3);
STACKTOP = sp;
return;
}
case 16:
{
__ZN10QuaternionC2ERK6Vectorfb($3, 64564, $2, 1);
$61 = HEAP32[$0 + 300 >> 2] | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$61 >> 2] | 0) + 20 >> 2] & 255]($61, $3);
STACKTOP = sp;
return;
}
case 17:
{
__ZN10QuaternionC2ERK6Vectorfb($3, 64576, $2, 1);
$66 = HEAP32[$0 + 300 >> 2] | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$66 >> 2] | 0) + 20 >> 2] & 255]($66, $3);
STACKTOP = sp;
return;
}
default:
{
STACKTOP = sp;
return;
}
} while (0);
}
function __ZN20HanimAnimationRecord15calcHipMovementEfff($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = Math_fround($2);
$3 = Math_fround($3);
var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $20 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 224 | 0;
$vararg_buffer = sp;
$4 = sp + 212 | 0;
$5 = sp + 200 | 0;
$6 = sp + 184 | 0;
$7 = sp + 168 | 0;
$8 = sp + 152 | 0;
$9 = sp + 136 | 0;
$10 = sp + 120 | 0;
$11 = sp + 112 | 0;
$12 = sp + 100 | 0;
$13 = sp + 88 | 0;
$14 = sp + 76 | 0;
$15 = sp + 64 | 0;
$16 = sp + 52 | 0;
if (!(HEAP8[$0 + 80 >> 0] | 0)) {
STACKTOP = sp;
return;
}
$20 = $0 + 4 | 0;
$23 = HEAP32[(HEAP32[$20 >> 2] | 0) + 72 >> 2] | 0;
if (!(HEAP32[$23 + 228 >> 2] | 0)) {
STACKTOP = sp;
return;
}
if (!(HEAP32[$23 + 232 >> 2] | 0)) {
STACKTOP = sp;
return;
}
if (!(HEAP32[$23 + 212 >> 2] | 0)) {
STACKTOP = sp;
return;
}
if (!(HEAP32[$23 + 216 >> 2] | 0)) {
STACKTOP = sp;
return;
}
__ZN6VectorC2Ev($4);
__ZN6VectorC2Ev($5);
HEAPF32[$6 >> 2] = Math_fround(0.0);
HEAPF32[$6 + 4 >> 2] = Math_fround(0.0);
HEAPF32[$6 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$6 + 12 >> 2] = Math_fround(1.0);
HEAPF32[$7 >> 2] = Math_fround(0.0);
HEAPF32[$7 + 4 >> 2] = Math_fround(0.0);
HEAPF32[$7 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$7 + 12 >> 2] = Math_fround(1.0);
HEAPF32[$8 >> 2] = Math_fround(0.0);
HEAPF32[$8 + 4 >> 2] = Math_fround(0.0);
HEAPF32[$8 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$8 + 12 >> 2] = Math_fround(1.0);
HEAPF32[$9 >> 2] = Math_fround(0.0);
HEAPF32[$9 + 4 >> 2] = Math_fround(0.0);
HEAPF32[$9 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$9 + 12 >> 2] = Math_fround(1.0);
HEAPF32[$10 >> 2] = Math_fround(0.0);
HEAPF32[$10 + 4 >> 2] = Math_fround(0.0);
HEAPF32[$10 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$10 + 12 >> 2] = Math_fround(1.0);
HEAPF32[$11 >> 2] = Math_fround(0.0);
__ZN6VectorC2ERKS_($12, (HEAP32[(HEAP32[(HEAP32[$20 >> 2] | 0) + 72 >> 2] | 0) + 228 >> 2] | 0) + 68 | 0);
__ZN6VectorC2ERKS_($13, (HEAP32[(HEAP32[(HEAP32[$20 >> 2] | 0) + 72 >> 2] | 0) + 232 >> 2] | 0) + 68 | 0);
__ZN6VectorC2ERKS_($14, (HEAP32[(HEAP32[(HEAP32[$20 >> 2] | 0) + 72 >> 2] | 0) + 212 >> 2] | 0) + 68 | 0);
__ZN6VectorC2ERKS_($15, (HEAP32[(HEAP32[(HEAP32[$20 >> 2] | 0) + 72 >> 2] | 0) + 216 >> 2] | 0) + 68 | 0);
__ZN6VectorC2ERKS_($16, (HEAP32[HEAP32[(HEAP32[$20 >> 2] | 0) + 72 >> 2] >> 2] | 0) + 68 | 0);
__Z7FourBarRK6VectorS1_S1_S1_S1_fffRS_S2_R10QuaternionS4_S4_S4_S4_Rf($12, $13, $14, $15, $16, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11);
HEAPF64[$vararg_buffer >> 3] = +$1;
HEAPF64[$vararg_buffer + 8 >> 3] = +$2;
HEAPF64[$vararg_buffer + 16 >> 3] = +$3;
__Z7eprintfPKcz(12753, $vararg_buffer);
__Z7eprintfPKcz(12808, sp + 24 | 0);
__ZNK9Transform5printEP8_IO_FILEi((HEAP32[(HEAP32[(HEAP32[$20 >> 2] | 0) + 72 >> 2] | 0) + 228 >> 2] | 0) + 68 | 0, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(12822, sp + 32 | 0);
__ZNK9Transform5printEP8_IO_FILEi((HEAP32[(HEAP32[(HEAP32[$20 >> 2] | 0) + 72 >> 2] | 0) + 228 >> 2] | 0) + 40 | 0, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__ZN5Joint17rotateJointGlobalERK10Quaternion(HEAP32[(HEAP32[(HEAP32[$20 >> 2] | 0) + 72 >> 2] | 0) + 228 >> 2] | 0, $6);
__Z7eprintfPKcz(12808, sp + 40 | 0);
__ZNK9Transform5printEP8_IO_FILEi((HEAP32[(HEAP32[(HEAP32[$20 >> 2] | 0) + 72 >> 2] | 0) + 228 >> 2] | 0) + 68 | 0, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(12822, sp + 48 | 0);
__ZNK9Transform5printEP8_IO_FILEi((HEAP32[(HEAP32[(HEAP32[$20 >> 2] | 0) + 72 >> 2] | 0) + 228 >> 2] | 0) + 40 | 0, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__ZN5Joint17rotateJointGlobalERK10Quaternion(HEAP32[(HEAP32[(HEAP32[$20 >> 2] | 0) + 72 >> 2] | 0) + 232 >> 2] | 0, $7);
__ZN5Joint17rotateJointGlobalERK10Quaternion(HEAP32[(HEAP32[(HEAP32[$20 >> 2] | 0) + 72 >> 2] | 0) + 212 >> 2] | 0, $8);
__ZN5Joint17rotateJointGlobalERK10Quaternion(HEAP32[(HEAP32[(HEAP32[$20 >> 2] | 0) + 72 >> 2] | 0) + 216 >> 2] | 0, $9);
__ZN5Joint17rotateJointGlobalERK10Quaternion(HEAP32[HEAP32[(HEAP32[$20 >> 2] | 0) + 72 >> 2] >> 2] | 0, $10);
STACKTOP = sp;
return;
}
function __ZN7Getopts12argsFromFileEPKcb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0 = 0, $$036$off0 = 0, $$06$i = 0, $$1 = 0, $$134 = 0, $$pre = 0, $$pre$i = 0, $$pre$phi47Z2D = 0, $$pre$phiZ2D = 0, $11 = 0, $12 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $30 = 0, $32 = 0, $41 = 0, $42 = 0, $44 = 0, $5 = 0, $51 = 0, $53 = 0, $56 = 0, $57 = 0, $6 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
if ($2) if (!(__Z10fileExistsPKc($1) | 0)) {
if (!0) {
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
HEAP32[$vararg_buffer >> 2] = $1;
__Z7eprintfPKcz(9485, $vararg_buffer);
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
$5 = __Znwj(40) | 0;
__THREW__ = 0;
invoke_vii(117, $5 | 0, $1 | 0);
$6 = __THREW__;
__THREW__ = 0;
if ($6 & 1) {
$11 = ___cxa_find_matching_catch_2() | 0;
$12 = tempRet0;
__ZdlPv($5);
$$1 = $12;
$$134 = $11;
___resumeException($$134 | 0);
}
if (!(HEAP8[$5 + 8 >> 0] | 0)) {
if (0) {
HEAP32[$vararg_buffer4 >> 2] = $1;
__Z7eprintfPKcz(9569, $vararg_buffer4);
}
HEAP8[$5 + 32 >> 0] = 1;
HEAP8[$5 + 33 >> 0] = 1;
$16 = __Znwj(16) | 0;
$17 = $16 + 4 | 0;
HEAP32[$17 >> 2] = 10;
$18 = $16 + 12 | 0;
HEAP32[$18 >> 2] = 0;
HEAP32[$16 >> 2] = 0;
$19 = $16 + 8 | 0;
HEAP32[$19 >> 2] = 0;
$20 = __ZN11TokenStream9nextTokenEv($5) | 0;
if (!$20) {
$41 = 0;
label = 20;
} else {
$22 = $20;
do {
$23 = __Z10copyStringPKc($22) | 0;
$24 = HEAP32[$18 >> 2] | 0;
if (($24 | 0) >= 0) {
if ((HEAP32[$19 >> 2] | 0) > ($24 | 0)) {
$$pre$phi47Z2D = $24 + 1 | 0;
label = 17;
} else {
$30 = HEAP32[$17 >> 2] | 0;
$32 = $24 + 1 | 0;
__ZN13DynamicArrayPIKcE6resizeEi($16, ($30 | 0) > ($24 | 0) ? $30 : $32 + ($24 >>> 1) | 0);
if ((HEAP32[$18 >> 2] | 0) <= ($24 | 0)) {
$$pre$phi47Z2D = $32;
label = 17;
}
}
if ((label | 0) == 17) {
label = 0;
HEAP32[$18 >> 2] = $$pre$phi47Z2D;
}
HEAP32[(HEAP32[$16 >> 2] | 0) + ($24 << 2) >> 2] = $23;
}
$22 = __ZN11TokenStream9nextTokenEv($5) | 0;
} while (($22 | 0) != 0);
$$pre = HEAP32[$18 >> 2] | 0;
if (($$pre | 0) >= 0) {
$41 = $$pre;
label = 20;
}
}
if ((label | 0) == 20) {
if ((HEAP32[$19 >> 2] | 0) > ($41 | 0)) {
$$pre$phiZ2D = $41 + 1 | 0;
label = 23;
} else {
$42 = HEAP32[$17 >> 2] | 0;
$44 = $41 + 1 | 0;
__ZN13DynamicArrayPIKcE6resizeEi($16, ($42 | 0) > ($41 | 0) ? $42 : $44 + ($41 >>> 1) | 0);
if ((HEAP32[$18 >> 2] | 0) <= ($41 | 0)) {
$$pre$phiZ2D = $44;
label = 23;
}
}
if ((label | 0) == 23) HEAP32[$18 >> 2] = $$pre$phiZ2D;
HEAP32[(HEAP32[$16 >> 2] | 0) + ($41 << 2) >> 2] = 0;
}
__ZN7Getopts11processArgsEPPKc($0, HEAP32[$16 >> 2] | 0) | 0;
$51 = HEAP32[$16 >> 2] | 0;
do if ($51 | 0) {
$53 = HEAP32[$18 >> 2] | 0;
if (($53 | 0) > 0) {
$$06$i = 0;
$56 = $51;
$70 = $53;
while (1) {
$57 = HEAP32[$56 + ($$06$i << 2) >> 2] | 0;
if (!$57) {
$$pre$i = $56;
$63 = $70;
} else {
_free($57);
HEAP32[(HEAP32[$16 >> 2] | 0) + ($$06$i << 2) >> 2] = 0;
$$pre$i = HEAP32[$16 >> 2] | 0;
$63 = HEAP32[$18 >> 2] | 0;
}
$$06$i = $$06$i + 1 | 0;
if (($$06$i | 0) >= ($63 | 0)) break; else {
$56 = $$pre$i;
$70 = $63;
}
}
if (!$$pre$i) break; else $65 = $$pre$i;
} else $65 = $51;
_free($65);
} while (0);
__ZdlPv($16);
$$036$off0 = 1;
} else {
HEAP32[$vararg_buffer1 >> 2] = $1;
__Z7eprintfPKcz(9530, $vararg_buffer1);
$$036$off0 = 0;
}
__THREW__ = 0;
invoke_vi(97, $5 | 0);
$66 = __THREW__;
__THREW__ = 0;
if ($66 & 1) {
$68 = ___cxa_find_matching_catch_2() | 0;
$69 = tempRet0;
__ZdlPv($5);
$$1 = $69;
$$134 = $68;
___resumeException($$134 | 0);
} else {
__ZdlPv($5);
$$0 = $$036$off0;
STACKTOP = sp;
return $$0 | 0;
}
return 0;
}
function __ZN17TargettedMovement22setOwnMotionAttributesERK16MotionAttributes($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$sroa$2$0$$sroa_idx = 0, $$sroa$2$0$copyload = 0, $$sroa$269$0$$sroa_idx = 0, $$sroa$269$0$copyload = 0, $$sroa$276$0$$sroa_idx = 0, $$sroa$276$0$copyload = 0, $11 = 0, $12 = 0, $15 = 0, $34 = 0, $36 = 0, $39 = 0, $5 = 0, $58 = 0, $60 = 0, $63 = 0, $8 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $90 = 0, $92 = 0, $94 = 0, $97 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$5 = HEAP32[(HEAP32[$0 + 528 >> 2] | 0) + 36 >> 2] | 0;
$8 = (HEAP32[$5 + 48 >> 2] | 0) == 1;
$9 = HEAP32[$5 >> 2] | 0;
$$sroa$276$0$$sroa_idx = $5 + 4 | 0;
$$sroa$276$0$copyload = HEAPU16[$$sroa$276$0$$sroa_idx >> 1] | 0 | (HEAPU8[$$sroa$276$0$$sroa_idx + 2 >> 0] | 0) << 16;
$11 = HEAP32[$5 + 12 >> 2] | 0;
$12 = HEAP32[16607] | 0;
do if (!(($12 ^ $9) & 16777215)) $84 = 0; else {
$15 = $9 & 255;
if (($9 & 252 | 0) == 12 | ($15 + -1 | 0) >>> 0 < 11) {
if (($9 & 6291456) >>> 0 >= 2097152) {
$84 = 0;
break;
}
if (($15 + -7 | 0) >>> 0 < 2) {
$84 = 9;
break;
}
$84 = (($11 & 255) + -7 | 0) >>> 0 < 2 ? 9 : 10;
break;
} else {
if (!(($12 ^ $11) & 16777215)) {
$84 = 0;
break;
}
if (!(($9 & 7340032 | 0) == 1048576 & ($11 & 6291456) >>> 0 < 2097152)) {
$84 = 0;
break;
}
$84 = ($$sroa$276$0$copyload & 6291456) >>> 0 < 2097152 ? ((($11 & 255) + -7 | 0) >>> 0 < 2 ? 9 : 10) : 0;
break;
}
} while (0);
$34 = HEAP32[$5 + 16 >> 2] | 0;
$$sroa$269$0$$sroa_idx = $5 + 20 | 0;
$$sroa$269$0$copyload = HEAPU16[$$sroa$269$0$$sroa_idx >> 1] | 0 | (HEAPU8[$$sroa$269$0$$sroa_idx + 2 >> 0] | 0) << 16;
$36 = HEAP32[$5 + 40 >> 2] | 0;
do if (!(($12 ^ $34) & 16777215)) $86 = 0; else {
$39 = $34 & 255;
if (($34 & 252 | 0) == 12 | ($39 + -1 | 0) >>> 0 < 11) {
if (($34 & 6291456) >>> 0 >= 2097152) {
$86 = 0;
break;
}
if (($39 + -7 | 0) >>> 0 < 2) {
$86 = 9;
break;
}
$86 = (($36 & 255) + -7 | 0) >>> 0 < 2 ? 9 : 10;
break;
} else {
if (!(($12 ^ $36) & 16777215)) {
$86 = 0;
break;
}
if (!(($34 & 7340032 | 0) == 1048576 & ($36 & 6291456) >>> 0 < 2097152)) {
$86 = 0;
break;
}
$86 = ($$sroa$269$0$copyload & 6291456) >>> 0 < 2097152 ? ((($36 & 255) + -7 | 0) >>> 0 < 2 ? 9 : 10) : 0;
break;
}
} while (0);
$58 = HEAP32[$5 + 28 >> 2] | 0;
$$sroa$2$0$$sroa_idx = $5 + 32 | 0;
$$sroa$2$0$copyload = HEAPU16[$$sroa$2$0$$sroa_idx >> 1] | 0 | (HEAPU8[$$sroa$2$0$$sroa_idx + 2 >> 0] | 0) << 16;
$60 = HEAP32[$5 + 44 >> 2] | 0;
do if (!(($12 ^ $58) & 16777215)) $88 = 0; else {
$63 = $58 & 255;
if (($58 & 252 | 0) == 12 | ($63 + -1 | 0) >>> 0 < 11) {
if (($58 & 6291456) >>> 0 >= 2097152) {
$88 = 0;
break;
}
if (($63 + -7 | 0) >>> 0 < 2) {
$88 = 9;
break;
}
$88 = (($60 & 255) + -7 | 0) >>> 0 < 2 ? 9 : 10;
break;
} else {
if (!(($12 ^ $60) & 16777215)) {
$88 = 0;
break;
}
if (!(($58 & 7340032 | 0) == 1048576 & ($60 & 6291456) >>> 0 < 2097152)) {
$88 = 0;
break;
}
$88 = ($$sroa$2$0$copyload & 6291456) >>> 0 < 2097152 ? ((($60 & 255) + -7 | 0) >>> 0 < 2 ? 9 : 10) : 0;
break;
}
} while (0);
$82 = $8 ? 9 : 0;
$83 = $84 & 65535;
$85 = $86 & 65535;
$87 = $88 & 65535;
$90 = $85 << 16 >> 16 > $87 << 16 >> 16 ? $85 : $87;
$92 = $90 << 16 >> 16 < $83 << 16 >> 16 ? $83 : $90;
$94 = $82 << 16 >> 16 > $92 << 16 >> 16 ? $82 : $92;
if (!($94 << 16 >> 16)) {
if (!1) {
STACKTOP = sp;
return;
}
__Z7LogTimev() | 0;
__Z7eprintfPKcz(42295, $vararg_buffer1);
__ZNK18SiGMLConstellation5printEP8_IO_FILE($5, HEAP32[16082] | 0);
STACKTOP = sp;
return;
} else {
$97 = $0 + 12 | 0;
HEAP32[$97 >> 2] = $94 & 65535;
if (!1) {
STACKTOP = sp;
return;
}
__Z7LogTimev() | 0;
__Z7eprintfPKcz(42238, $vararg_buffer);
__ZNK11MannerFlags5printEP8_IO_FILE($97, HEAP32[16082] | 0);
__Z5eputsPKc(42292);
__ZNK18SiGMLConstellation5printEP8_IO_FILE($5, HEAP32[16082] | 0);
STACKTOP = sp;
return;
}
}
function __ZN16DirectedMovementC2EPKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $23 = 0, $26 = 0, $31 = 0, $37 = 0, $41 = 0, $44 = 0, $49 = 0, $6 = 0, $7 = 0, $77 = 0, $78 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0;
HEAP32[$0 >> 2] = 1984;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 16 >> 2] = 0;
HEAP8[$0 + 20 >> 0] = 0;
__ZN25TwoHConcretePostureChangeC2Ev($0 + 60 | 0);
$6 = $0 + 4 | 0;
$7 = $1 + 4 | 0;
_memcpy($6 | 0, $7 | 0, 524) | 0;
HEAP32[$0 >> 2] = 2164;
$8 = $0 + 528 | 0;
HEAPF32[$8 >> 2] = Math_fround(0.0);
$9 = $0 + 532 | 0;
HEAPF32[$9 >> 2] = Math_fround(0.0);
$10 = $0 + 536 | 0;
HEAPF32[$10 >> 2] = Math_fround(0.0);
$11 = $0 + 544 | 0;
HEAPF32[$11 >> 2] = Math_fround(0.0);
$12 = $0 + 548 | 0;
HEAPF32[$12 >> 2] = Math_fround(0.0);
$13 = $0 + 552 | 0;
HEAPF32[$13 >> 2] = Math_fround(0.0);
$14 = $0 + 560 | 0;
HEAPF32[$14 >> 2] = Math_fround(0.0);
$15 = $0 + 564 | 0;
HEAPF32[$15 >> 2] = Math_fround(0.0);
$16 = $0 + 588 | 0;
HEAPF32[$16 >> 2] = Math_fround(0.0);
$17 = $0 + 592 | 0;
HEAPF32[$17 >> 2] = Math_fround(0.0);
__THREW__ = 0;
invoke_vi(98, $0 + 600 | 0);
$19 = __THREW__;
__THREW__ = 0;
if (!($19 & 1)) {
HEAPF32[$0 + 612 >> 2] = Math_fround(0.0);
__THREW__ = 0;
invoke_vi(98, $0 + 616 | 0);
$23 = __THREW__;
__THREW__ = 0;
if (!($23 & 1)) {
__THREW__ = 0;
invoke_vi(98, $0 + 628 | 0);
$26 = __THREW__;
__THREW__ = 0;
if (!($26 & 1)) {
HEAPF32[$0 + 640 >> 2] = Math_fround(0.0);
HEAP32[$0 + 644 >> 2] = 0;
__THREW__ = 0;
invoke_vi(98, $0 + 648 | 0);
$31 = __THREW__;
__THREW__ = 0;
if (!($31 & 1)) {
HEAPF32[$0 + 660 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 664 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 668 >> 2] = Math_fround(3.0);
__THREW__ = 0;
invoke_vi(98, $0 + 672 | 0);
$37 = __THREW__;
__THREW__ = 0;
if (!($37 & 1)) {
HEAPF32[$0 + 684 >> 2] = Math_fround(0.0);
__THREW__ = 0;
invoke_vi(98, $0 + 688 | 0);
$41 = __THREW__;
__THREW__ = 0;
if (!($41 & 1)) {
__THREW__ = 0;
invoke_vi(98, $0 + 700 | 0);
$44 = __THREW__;
__THREW__ = 0;
if (!($44 & 1)) {
HEAPF32[$0 + 712 >> 2] = Math_fround(0.0);
HEAP32[$0 + 716 >> 2] = 0;
__THREW__ = 0;
invoke_vi(98, $0 + 720 | 0);
$49 = __THREW__;
__THREW__ = 0;
if (!($49 & 1)) {
HEAPF32[$0 + 732 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 736 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 740 >> 2] = Math_fround(3.0);
_memcpy($6 | 0, $7 | 0, 524) | 0;
if (($0 | 0) == ($1 | 0)) {
$83 = $0 + 596 | 0;
$84 = $1 + 596 | 0;
_memcpy($83 | 0, $84 | 0, 148) | 0;
return;
}
HEAP32[$8 >> 2] = HEAP32[$1 + 528 >> 2];
HEAP32[$9 >> 2] = HEAP32[$1 + 532 >> 2];
HEAP32[$10 >> 2] = HEAP32[$1 + 536 >> 2];
HEAP32[$0 + 540 >> 2] = HEAP32[$1 + 540 >> 2];
HEAP32[$11 >> 2] = HEAP32[$1 + 544 >> 2];
HEAP32[$12 >> 2] = HEAP32[$1 + 548 >> 2];
HEAP32[$13 >> 2] = HEAP32[$1 + 552 >> 2];
HEAP32[$0 + 556 >> 2] = HEAP32[$1 + 556 >> 2];
HEAP32[$14 >> 2] = HEAP32[$1 + 560 >> 2];
HEAP32[$15 >> 2] = HEAP32[$1 + 564 >> 2];
$77 = $0 + 568 | 0;
$78 = $1 + 568 | 0;
HEAP32[$77 >> 2] = HEAP32[$78 >> 2];
HEAP32[$77 + 4 >> 2] = HEAP32[$78 + 4 >> 2];
HEAP32[$77 + 8 >> 2] = HEAP32[$78 + 8 >> 2];
HEAP32[$77 + 12 >> 2] = HEAP32[$78 + 12 >> 2];
HEAP32[$77 + 16 >> 2] = HEAP32[$78 + 16 >> 2];
HEAP32[$16 >> 2] = HEAP32[$1 + 588 >> 2];
HEAP32[$17 >> 2] = HEAP32[$1 + 592 >> 2];
$83 = $0 + 596 | 0;
$84 = $1 + 596 | 0;
_memcpy($83 | 0, $84 | 0, 148) | 0;
return;
}
}
}
}
}
}
}
}
$85 = ___cxa_find_matching_catch_2() | 0;
HEAP32[$0 >> 2] = 1984;
HEAP32[$0 + 452 >> 2] = 0;
HEAP32[$0 + 340 >> 2] = 0;
HEAP32[$0 + 228 >> 2] = 0;
HEAP32[$0 + 116 >> 2] = 0;
___resumeException($85 | 0);
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEs($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0, $$1 = 0, $$byval_copy = 0, $$pre$phi20Z2D = 0, $$pre$phi22Z2D = 0, $$pre$phiZ2D = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $49 = 0, $50 = 0, $51 = 0, $57 = 0, $61 = 0, $63 = 0, $65 = 0, $67 = 0, $69 = 0, $75 = 0, $77 = 0, $79 = 0, $81 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$$byval_copy = sp + 12 | 0;
$2 = sp + 8 | 0;
$3 = sp;
__THREW__ = 0;
invoke_vii(112, $3 | 0, $0 | 0);
$4 = __THREW__;
__THREW__ = 0;
L1 : do if ($4 & 1) {
$63 = ___cxa_find_matching_catch_3(0) | 0;
$$1 = $63;
$$pre$phi20Z2D = $0;
$$pre$phi22Z2D = $0;
label = 20;
} else {
L4 : do if (HEAP8[$3 >> 0] | 0) {
$11 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
$14 = HEAP32[$11 + 4 >> 2] & 74;
__ZNKSt3__28ios_base6getlocEv($$byval_copy, $11);
__THREW__ = 0;
$15 = invoke_iii(20, $$byval_copy | 0, 72060) | 0;
$16 = __THREW__;
__THREW__ = 0;
L6 : do if ($16 & 1) {
$65 = ___cxa_find_matching_catch_3(0) | 0;
__ZNSt3__26localeD2Ev($$byval_copy);
$$0 = $65;
} else {
__ZNSt3__26localeD2Ev($$byval_copy);
$21 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
$23 = HEAP32[$21 + 24 >> 2] | 0;
$24 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
$25 = $21 + 76 | 0;
do if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($24, HEAP32[$25 >> 2] | 0) | 0) {
__ZNKSt3__28ios_base6getlocEv($$byval_copy, $21);
__THREW__ = 0;
$28 = invoke_iii(20, $$byval_copy | 0, 72048) | 0;
$29 = __THREW__;
__THREW__ = 0;
if (!($29 & 1)) {
__THREW__ = 0;
$34 = invoke_iii(HEAP32[(HEAP32[$28 >> 2] | 0) + 28 >> 2] | 0, $28 | 0, 32) | 0;
$35 = __THREW__;
__THREW__ = 0;
if (!($35 & 1)) {
__ZNSt3__26localeD2Ev($$byval_copy);
$39 = $34 << 24 >> 24;
HEAP32[$25 >> 2] = $39;
$$pre$phiZ2D = $21;
$41 = $39;
label = 10;
break;
}
}
$37 = ___cxa_find_matching_catch_3(0) | 0;
__ZNSt3__26localeD2Ev($$byval_copy);
$eh$lpad$body$indexZ2D = $37;
} else {
$$pre$phiZ2D = $21;
$41 = HEAP32[$25 >> 2] | 0;
label = 10;
} while (0);
do if ((label | 0) == 10) {
$49 = HEAP32[(HEAP32[$15 >> 2] | 0) + 16 >> 2] | 0;
HEAP32[$2 >> 2] = $23;
__THREW__ = 0;
HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2];
$50 = invoke_iiiiii($49 | 0, $15 | 0, $$byval_copy | 0, $$pre$phiZ2D | 0, $41 & 255 | 0, (($14 | 0) == 64 | ($14 | 0) == 8 ? $1 & 65535 : $1 << 16 >> 16) | 0) | 0;
$51 = __THREW__;
__THREW__ = 0;
if ($51 & 1) {
$67 = ___cxa_find_matching_catch_3(0) | 0;
$eh$lpad$body$indexZ2D = $67;
break;
}
if ($50 | 0) break L4;
$57 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
__THREW__ = 0;
invoke_vii(114, $57 | 0, HEAP32[$57 + 16 >> 2] | 5 | 0);
$61 = __THREW__;
__THREW__ = 0;
if (!($61 & 1)) break L4;
$69 = ___cxa_find_matching_catch_3(0) | 0;
$$0 = $69;
break L6;
} while (0);
$$0 = $eh$lpad$body$indexZ2D;
} while (0);
__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
$$1 = $$0;
$$pre$phi20Z2D = $0;
$$pre$phi22Z2D = $0;
label = 20;
break L1;
} while (0);
__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
} while (0);
do if ((label | 0) == 20) {
___cxa_begin_catch($$1 | 0) | 0;
__THREW__ = 0;
invoke_vi(92, $$pre$phi22Z2D + (HEAP32[(HEAP32[$$pre$phi20Z2D >> 2] | 0) + -12 >> 2] | 0) | 0);
$75 = __THREW__;
__THREW__ = 0;
if (!($75 & 1)) {
___cxa_end_catch();
break;
}
$77 = ___cxa_find_matching_catch_2() | 0;
__THREW__ = 0;
invoke_v(3);
$79 = __THREW__;
__THREW__ = 0;
if ($79 & 1) {
$81 = ___cxa_find_matching_catch_3(0) | 0;
___clang_call_terminate($81);
} else ___resumeException($77 | 0);
} while (0);
STACKTOP = sp;
return $0 | 0;
}
function __ZNK10TorsoCurve5printEP8_IO_FILEs($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $12 = 0.0, $15 = 0.0, $18 = 0.0, $21 = 0.0, $24 = 0.0, $27 = 0.0, $30 = 0.0, $33 = 0.0, $36 = 0.0, $39 = 0.0, $42 = 0.0, $45 = 0.0, $48 = 0.0, $5 = 0, $51 = 0.0, $54 = 0.0, $57 = 0.0, $60 = 0.0, $63 = 0.0, $66 = 0.0, $vararg_buffer = 0, $vararg_buffer18 = 0, $vararg_buffer28 = 0, $vararg_buffer38 = 0, $vararg_buffer8 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 320 | 0;
$vararg_buffer38 = sp + 256 | 0;
$vararg_buffer28 = sp + 192 | 0;
$vararg_buffer18 = sp + 128 | 0;
$vararg_buffer8 = sp + 64 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
__ZN6VectorC2Ev(sp + 304 | 0);
_fwrite(10126, 10, 1, $1) | 0;
$5 = $2 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($0, $1, $5);
_fputc(10, $1) | 0;
_fwrite(10137, 7, 1, $1) | 0;
__ZNK6Vector5printEP8_IO_FILEi($0 + 12 | 0, $1, $5);
_fputc(10, $1) | 0;
_fwrite(10145, 9, 1, $1) | 0;
__ZNK6Vector5printEP8_IO_FILEi($0 + 24 | 0, $1, $5);
_fputc(10, $1) | 0;
_fwrite(10155, 8, 1, $1) | 0;
__ZNK6Vector5printEP8_IO_FILEi($0 + 36 | 0, $1, $5);
_fputc(10, $1) | 0;
_fwrite(10164, 11, 1, $1) | 0;
__ZNK6Vector5printEP8_IO_FILEi($0 + 48 | 0, $1, $5);
_fputc(10, $1) | 0;
_fwrite(10176, 6, 1, $1) | 0;
$12 = +Math_fround(HEAPF32[$0 + 60 >> 2]);
$15 = +Math_fround(HEAPF32[$0 + 64 >> 2]);
$18 = +Math_fround(HEAPF32[$0 + 68 >> 2]);
$21 = +Math_fround(HEAPF32[$0 + 72 >> 2]);
HEAP32[$vararg_buffer >> 2] = $5;
HEAPF64[$vararg_buffer + 8 >> 3] = $12;
HEAP32[$vararg_buffer + 16 >> 2] = $5;
HEAPF64[$vararg_buffer + 24 >> 3] = $15;
HEAP32[$vararg_buffer + 32 >> 2] = $5;
HEAPF64[$vararg_buffer + 40 >> 3] = $18;
HEAP32[$vararg_buffer + 48 >> 2] = $5;
HEAPF64[$vararg_buffer + 56 >> 3] = $21;
_fprintf($1, 10183, $vararg_buffer) | 0;
_fputc(10, $1) | 0;
_fwrite(10219, 6, 1, $1) | 0;
$24 = +Math_fround(HEAPF32[$0 + 92 >> 2]);
$27 = +Math_fround(HEAPF32[$0 + 96 >> 2]);
$30 = +Math_fround(HEAPF32[$0 + 100 >> 2]);
$33 = +Math_fround(HEAPF32[$0 + 104 >> 2]);
HEAP32[$vararg_buffer8 >> 2] = $5;
HEAPF64[$vararg_buffer8 + 8 >> 3] = $24;
HEAP32[$vararg_buffer8 + 16 >> 2] = $5;
HEAPF64[$vararg_buffer8 + 24 >> 3] = $27;
HEAP32[$vararg_buffer8 + 32 >> 2] = $5;
HEAPF64[$vararg_buffer8 + 40 >> 3] = $30;
HEAP32[$vararg_buffer8 + 48 >> 2] = $5;
HEAPF64[$vararg_buffer8 + 56 >> 3] = $33;
_fprintf($1, 10226, $vararg_buffer8) | 0;
_fputc(10, $1) | 0;
_fwrite(10265, 7, 1, $1) | 0;
$36 = +Math_fround(HEAPF32[$0 + 76 >> 2]);
$39 = +Math_fround(HEAPF32[$0 + 80 >> 2]);
$42 = +Math_fround(HEAPF32[$0 + 84 >> 2]);
$45 = +Math_fround(HEAPF32[$0 + 88 >> 2]);
HEAP32[$vararg_buffer18 >> 2] = $5;
HEAPF64[$vararg_buffer18 + 8 >> 3] = $36;
HEAP32[$vararg_buffer18 + 16 >> 2] = $5;
HEAPF64[$vararg_buffer18 + 24 >> 3] = $39;
HEAP32[$vararg_buffer18 + 32 >> 2] = $5;
HEAPF64[$vararg_buffer18 + 40 >> 3] = $42;
HEAP32[$vararg_buffer18 + 48 >> 2] = $5;
HEAPF64[$vararg_buffer18 + 56 >> 3] = $45;
_fprintf($1, 10183, $vararg_buffer18) | 0;
_fputc(10, $1) | 0;
_fwrite(10273, 7, 1, $1) | 0;
$48 = +Math_fround(HEAPF32[$0 + 108 >> 2]);
$51 = +Math_fround(HEAPF32[$0 + 112 >> 2]);
$54 = +Math_fround(HEAPF32[$0 + 116 >> 2]);
$57 = +Math_fround(HEAPF32[$0 + 120 >> 2]);
HEAP32[$vararg_buffer28 >> 2] = $5;
HEAPF64[$vararg_buffer28 + 8 >> 3] = $48;
HEAP32[$vararg_buffer28 + 16 >> 2] = $5;
HEAPF64[$vararg_buffer28 + 24 >> 3] = $51;
HEAP32[$vararg_buffer28 + 32 >> 2] = $5;
HEAPF64[$vararg_buffer28 + 40 >> 3] = $54;
HEAP32[$vararg_buffer28 + 48 >> 2] = $5;
HEAPF64[$vararg_buffer28 + 56 >> 3] = $57;
_fprintf($1, 10226, $vararg_buffer28) | 0;
_fputc(10, $1) | 0;
$60 = +Math_fround(HEAPF32[$0 + 124 >> 2]);
$63 = +Math_fround(HEAPF32[$0 + 128 >> 2]);
$66 = +Math_fround(HEAPF32[$0 + 132 >> 2]);
HEAP32[$vararg_buffer38 >> 2] = $5;
HEAPF64[$vararg_buffer38 + 8 >> 3] = $60;
HEAP32[$vararg_buffer38 + 16 >> 2] = $5;
HEAPF64[$vararg_buffer38 + 24 >> 3] = $63;
HEAP32[$vararg_buffer38 + 32 >> 2] = $5;
HEAPF64[$vararg_buffer38 + 40 >> 3] = $66;
_fprintf($1, 10281, $vararg_buffer38) | 0;
STACKTOP = sp;
return;
}
function __Z17AnchorFinalMorphsfPK18AbstractTimedMorph($0, $1) {
$0 = Math_fround($0);
$1 = $1 | 0;
var $$077 = 0, $$phi$trans$insert = 0, $$pre$phiZ2D = 0, $$tr7378 = 0, $13 = 0, $14 = 0, $15 = f0, $16 = 0, $18 = f0, $20 = 0, $24 = 0, $25 = f0, $27 = 0, $28 = f0, $29 = 0, $30 = 0, $31 = 0, $33 = f0, $34 = 0, $36 = f0, $38 = f0, $39 = f0, $43 = f0, $46 = f0, $47 = 0, $5 = 0, $51 = f0, $6 = 0, $61 = 0, $63 = 0, $65 = 0, $71 = 0, $73 = 0, $74 = 0, $77 = 0, $8 = 0, $81 = 0, $84 = 0, $88 = 0, $89 = 0, $90 = 0, $sext = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
} else $$tr7378 = $1;
L3 : while (1) {
switch (HEAP32[$$tr7378 + 20 >> 2] | 0) {
case 1:
{
label = 3;
break L3;
break;
}
case 2:
{
label = 21;
break L3;
break;
}
case 3:
break;
default:
{
label = 27;
break L3;
}
}
$61 = HEAP32[$$tr7378 + 24 >> 2] | 0;
$63 = HEAP32[$61 + 12 >> 2] | 0;
if (($63 << 16 | 0) <= 0) {
label = 27;
break;
}
$65 = $63 & 65535;
if (!(($65 | 0) != 0 & ($63 | 0) >= ($65 | 0))) {
label = 27;
break;
}
$71 = HEAP32[(HEAP32[$61 >> 2] | 0) + ($65 + -1 << 2) >> 2] | 0;
if (!$71) {
label = 27;
break;
} else $$tr7378 = $71;
}
if ((label | 0) == 3) {
$5 = $$tr7378 + 48 | 0;
$6 = HEAP8[$5 >> 0] | 0;
if (!($6 << 24 >> 24)) {
$8 = $$tr7378 + 16 | 0;
$16 = $8;
$24 = $$tr7378 + 12 | 0;
$27 = $8;
} else {
$13 = $$tr7378 + 16 | 0;
$14 = $$tr7378 + 12 | 0;
$16 = HEAP8[$$tr7378 + 49 >> 0] | 0 ? $14 : $13;
$24 = $14;
$27 = $13;
}
$15 = Math_fround(HEAPF32[$16 >> 2]);
if (!($15 < $0)) {
STACKTOP = sp;
return;
}
$18 = Math_fround($0 - $15);
if (!($18 > Math_fround(0.0))) {
STACKTOP = sp;
return;
}
$20 = $$tr7378 + 49 | 0;
if (!(HEAP8[$20 >> 0] | 0)) $30 = $6; else {
$25 = Math_fround($18 + Math_fround(HEAPF32[$24 >> 2]));
HEAPF32[$24 >> 2] = $25;
$28 = Math_fround($18 + Math_fround(HEAPF32[$27 >> 2]));
HEAPF32[$27 >> 2] = $28;
$30 = HEAP8[$5 >> 0] | 0;
}
$29 = $30 << 24 >> 24 == 0;
if ($29) {
$31 = $$tr7378 + 4 | 0;
$33 = Math_fround($18 + Math_fround(HEAPF32[$31 >> 2]));
HEAPF32[$31 >> 2] = $33;
$34 = $$tr7378 + 8 | 0;
$36 = Math_fround($18 + Math_fround(HEAPF32[$34 >> 2]));
HEAPF32[$34 >> 2] = $36;
$$pre$phiZ2D = $34;
$38 = $36;
} else {
$$phi$trans$insert = $$tr7378 + 8 | 0;
$$pre$phiZ2D = $$phi$trans$insert;
$38 = Math_fround(HEAPF32[$$phi$trans$insert >> 2]);
}
if ($38 > $0) {
$39 = Math_fround($38 - $0);
$43 = Math_fround($39 / Math_fround($38 - Math_fround(HEAPF32[$$tr7378 + 4 >> 2])));
$46 = Math_fround(Math_fround(HEAPF32[$$tr7378 + 28 >> 2]) * $43);
$47 = $$tr7378 + 36 | 0;
$51 = Math_fround($46 + Math_fround(Math_fround(HEAPF32[$47 >> 2]) * Math_fround(Math_fround(1.0) - $43)));
HEAPF32[$47 >> 2] = $51;
HEAPF32[$$pre$phiZ2D >> 2] = $0;
}
if (!0) {
STACKTOP = sp;
return;
}
if (!((HEAP8[$20 >> 0] | 0) != 0 | $29)) {
STACKTOP = sp;
return;
}
HEAPF64[$vararg_buffer >> 3] = +$18;
__Z7eprintfPKcz(46078, $vararg_buffer);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$tr7378 >> 2] | 0) + 40 >> 2] & 255]($$tr7378, HEAP32[16082] | 0);
__Z5eputcc(10);
STACKTOP = sp;
return;
} else if ((label | 0) == 21) {
$73 = $$tr7378 + 24 | 0;
$74 = HEAP32[$73 >> 2] | 0;
$sext = HEAP32[$74 + 12 >> 2] << 16;
$77 = $sext >> 16;
if (($sext | 0) > 0) {
$$077 = 0;
$81 = $74;
$84 = 0;
} else {
STACKTOP = sp;
return;
}
while (1) {
if ($$077 << 16 >> 16 < 0) $88 = 0; else if ((HEAP32[$81 + 12 >> 2] | 0) > ($84 | 0)) $88 = HEAP32[(HEAP32[$81 >> 2] | 0) + ($84 << 2) >> 2] | 0; else $88 = 0;
__Z17AnchorFinalMorphsfPK18AbstractTimedMorph($0, $88);
$89 = $$077 + 1 << 16 >> 16;
$90 = $89 << 16 >> 16;
if (($77 | 0) <= ($90 | 0)) break;
$$077 = $89;
$81 = HEAP32[$73 >> 2] | 0;
$84 = $90;
}
STACKTOP = sp;
return;
} else if ((label | 0) == 27) {
STACKTOP = sp;
return;
}
}
function __ZN9Handshape16SiteToHullVectorEP4SiteRK6VectorRS2_($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = f0, $$052 = f0, $$053$lcssa91 = f0, $$05388 = f0, $$05587 = 0, $$05686 = 0, $13 = 0, $14 = 0, $24 = 0, $25 = f0, $26 = 0, $29 = 0, $31 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $55 = f0, $56 = 0, $57 = f0, $6 = 0, $63 = 0, $8 = f0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 96 | 0;
$vararg_buffer15 = sp + 64 | 0;
$vararg_buffer13 = sp + 56 | 0;
$vararg_buffer11 = sp + 48 | 0;
$vararg_buffer9 = sp + 40 | 0;
$vararg_buffer7 = sp + 32 | 0;
$vararg_buffer5 = sp + 24 | 0;
$vararg_buffer3 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$4 = sp + 84 | 0;
$5 = sp + 72 | 0;
__ZN6Vector7setFromERKS_($3, $2);
__ZN6Vector7setUnitEv($3) | 0;
__ZN6VectorC2Ev($4);
$6 = $0 + 236 | 0;
__ZN18HandJointRotations19transferSiteToWristER6VectorP4Site(HEAP32[$6 >> 2] | 0, $4, $1);
$8 = Math_fround(__ZNK6Vector10dotProductERKS_($4, $3));
$13 = HEAP32[71356 + ((HEAPU8[$0 + 232 >> 0] | 0) << 2) >> 2] | 0;
$14 = $13 + 12 | 0;
if ((HEAP32[$14 >> 2] | 0) > 0) {
$$05388 = Math_fround(-1.0e5);
$$05587 = 0;
$$05686 = -1;
do {
__ZN6VectorC2Ev($5);
if ((HEAP32[$14 >> 2] | 0) > ($$05587 | 0)) $24 = HEAP32[(HEAP32[$13 >> 2] | 0) + ($$05587 << 2) >> 2] | 0; else $24 = 0;
__ZN18HandJointRotations19transferSiteToWristER6VectorP4Site(HEAP32[$6 >> 2] | 0, $5, $24);
$25 = Math_fround(__ZNK6Vector10dotProductERKS_($5, $3));
$26 = $$05388 < $25;
$$05686 = $26 ? $$05587 & 65535 : $$05686;
$$05388 = $26 ? $25 : $$05388;
$$05587 = $$05587 + 1 | 0;
$29 = HEAP32[$14 >> 2] | 0;
} while (($$05587 | 0) < ($29 | 0));
if ($$05686 << 16 >> 16 == -1) {
$$053$lcssa91 = $$05388;
$40 = 66428;
$63 = $5;
} else {
$31 = $$05686 << 16 >> 16;
if ($$05686 << 16 >> 16 > -1 & ($29 | 0) > ($31 | 0)) $38 = HEAP32[(HEAP32[$13 >> 2] | 0) + ($31 << 2) >> 2] | 0; else $38 = 0;
$$053$lcssa91 = $$05388;
$40 = $38 + 12 | 0;
$63 = $5;
}
} else {
$$053$lcssa91 = Math_fround(-1.0e5);
$40 = 66428;
$63 = $5;
}
$39 = HEAP32[$40 >> 2] | 0;
HEAP32[$5 >> 2] = $39;
$41 = $1 + 12 | 0;
if (!((HEAP32[$41 >> 2] ^ $39) & 16777215)) {
if (1) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(34167, $vararg_buffer);
__ZNK6SiteID5printEP8_IO_FILE($41, HEAP32[16082] | 0);
__Z7eprintfPKcz(34200, $vararg_buffer1);
__ZNK6Vector5printEP8_IO_FILEi($2, HEAP32[16082] | 0, 3);
__Z7eprintfPKcz(34215, $vararg_buffer3);
__ZNK4Site5printEP8_IO_FILE($1, HEAP32[16082] | 0);
}
__ZN6Vector7setZeroEv($3);
$$052 = Math_fround(0.0);
STACKTOP = sp;
return Math_fround($$052);
}
if (!((HEAP32[16607] ^ $39) & 16777215)) {
if (!1) {
$$052 = Math_fround(0.0);
STACKTOP = sp;
return Math_fround($$052);
}
__Z7LogTimev() | 0;
__Z7eprintfPKcz(34227, $vararg_buffer5);
__ZNK6SiteID5printEP8_IO_FILE($41, HEAP32[16082] | 0);
__Z7eprintfPKcz(34200, $vararg_buffer7);
__ZNK6Vector5printEP8_IO_FILEi($2, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
$$052 = Math_fround(0.0);
STACKTOP = sp;
return Math_fround($$052);
} else {
$55 = Math_fround($$053$lcssa91 - $8);
$56 = $55 < Math_fround(0.0);
$57 = Math_fround(-$55);
$$0 = $56 ? $57 : $55;
__ZN6Vector9setLengthEf($3, $$0) | 0;
if (!1) {
$$052 = $$0;
STACKTOP = sp;
return Math_fround($$052);
}
__Z7LogTimev() | 0;
__Z7eprintfPKcz(34251, $vararg_buffer9);
__ZNK6SiteID5printEP8_IO_FILE($41, HEAP32[16082] | 0);
__Z7eprintfPKcz(34200, $vararg_buffer11);
__ZNK6Vector5printEP8_IO_FILEi($2, HEAP32[16082] | 0, 3);
__Z7eprintfPKcz(34273, $vararg_buffer13);
__ZNK6SiteID5printEP8_IO_FILE($5, HEAP32[16082] | 0);
HEAPF64[$vararg_buffer15 >> 3] = +$$0;
__Z7eprintfPKcz(34278, $vararg_buffer15);
$$052 = $$0;
STACKTOP = sp;
return Math_fround($$052);
}
return Math_fround(0.0);
}
function __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0 = 0, $$byval_copy = 0, $$pre$phi18Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $25 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $48 = 0, $49 = 0, $5 = 0, $55 = 0, $59 = 0, $61 = 0, $63 = 0, $65 = 0, $67 = 0, $73 = 0, $75 = 0, $77 = 0, $79 = 0, $80 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$$byval_copy = sp + 12 | 0;
$3 = sp;
$4 = sp + 8 | 0;
__THREW__ = 0;
invoke_vii(112, $3 | 0, $0 | 0);
$5 = __THREW__;
__THREW__ = 0;
L1 : do if ($5 & 1) label = 15; else {
do if (HEAP8[$3 >> 0] | 0) {
$10 = (HEAP32[$0 >> 2] | 0) + -12 | 0;
HEAP32[$4 >> 2] = HEAP32[$0 + (HEAP32[$10 >> 2] | 0) + 24 >> 2];
$16 = $0 + (HEAP32[$10 >> 2] | 0) | 0;
$18 = HEAP32[$16 + 4 >> 2] | 0;
$19 = $1 + $2 | 0;
$20 = $16 + 76 | 0;
$21 = HEAP32[$20 >> 2] | 0;
do if (($21 | 0) == -1) {
__THREW__ = 0;
invoke_vii(113, $$byval_copy | 0, $16 | 0);
$23 = __THREW__;
__THREW__ = 0;
if ($23 & 1) label = 16; else {
__THREW__ = 0;
$25 = invoke_iii(20, $$byval_copy | 0, 72048) | 0;
$26 = __THREW__;
__THREW__ = 0;
if (!($26 & 1)) {
__THREW__ = 0;
$31 = invoke_iii(HEAP32[(HEAP32[$25 >> 2] | 0) + 28 >> 2] | 0, $25 | 0, 32) | 0;
$32 = __THREW__;
__THREW__ = 0;
if (!($32 & 1)) {
__THREW__ = 0;
invoke_vi(90, $$byval_copy | 0);
$40 = __THREW__;
__THREW__ = 0;
if ($40 & 1) {
label = 16;
break;
}
$42 = $31 << 24 >> 24;
HEAP32[$20 >> 2] = $42;
$44 = $42;
label = 12;
break;
}
}
$34 = ___cxa_find_matching_catch_3(0) | 0;
__THREW__ = 0;
invoke_vi(90, $$byval_copy | 0);
$36 = __THREW__;
__THREW__ = 0;
if ($36 & 1) {
$38 = ___cxa_find_matching_catch_3(0) | 0;
___clang_call_terminate($38);
} else {
$eh$lpad$body$indexZ2D = $34;
break;
}
}
} else {
$44 = $21;
label = 12;
} while (0);
if ((label | 0) == 12) {
__THREW__ = 0;
HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2];
$48 = invoke_iiiiiii(1, $$byval_copy | 0, $1 | 0, (($18 & 176 | 0) == 32 ? $19 : $1) | 0, $19 | 0, $16 | 0, $44 & 255 | 0) | 0;
$49 = __THREW__;
__THREW__ = 0;
if ($49 & 1) label = 16; else {
if ($48 | 0) break;
$55 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
__THREW__ = 0;
invoke_vii(114, $55 | 0, HEAP32[$55 + 16 >> 2] | 5 | 0);
$59 = __THREW__;
__THREW__ = 0;
if ($59 & 1) label = 16; else break;
}
}
if ((label | 0) == 16) {
$63 = ___cxa_find_matching_catch_3(0) | 0;
$eh$lpad$body$indexZ2D = $63;
}
__THREW__ = 0;
invoke_vi(91, $3 | 0);
$65 = __THREW__;
__THREW__ = 0;
if (!($65 & 1)) {
$$0 = $eh$lpad$body$indexZ2D;
$$pre$phi18Z2D = $0;
$$pre$phiZ2D = $0;
break L1;
}
$79 = ___cxa_find_matching_catch_3(0) | 0;
$80 = tempRet0;
___clang_call_terminate($79);
} while (0);
__THREW__ = 0;
invoke_vi(91, $3 | 0);
$67 = __THREW__;
__THREW__ = 0;
if ($67 & 1) label = 15; else {
STACKTOP = sp;
return $0 | 0;
}
} while (0);
if ((label | 0) == 15) {
$61 = ___cxa_find_matching_catch_3(0) | 0;
$$0 = $61;
$$pre$phi18Z2D = $0;
$$pre$phiZ2D = $0;
}
___cxa_begin_catch($$0 | 0) | 0;
__THREW__ = 0;
invoke_vi(92, $$pre$phi18Z2D + (HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + -12 >> 2] | 0) | 0);
$73 = __THREW__;
__THREW__ = 0;
if (!($73 & 1)) {
___cxa_end_catch();
STACKTOP = sp;
return $0 | 0;
}
$75 = ___cxa_find_matching_catch_2() | 0;
__THREW__ = 0;
invoke_v(3);
$77 = __THREW__;
__THREW__ = 0;
if ($77 & 1) {
$79 = ___cxa_find_matching_catch_3(0) | 0;
$80 = tempRet0;
___clang_call_terminate($79);
} else ___resumeException($75 | 0);
return 0;
}
function __ZN17NonmanualMovement24setAvatarDependentValuesEv($0) {
$0 = $0 | 0;
var $$03436$i = 0, $$1$i = 0, $$1$i3 = 0, $$pre$phi$i$iZ2D = 0, $$sink = f0, $1 = 0, $10 = 0, $11 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $34 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $47 = 0, $49 = 0, $63 = 0, $68 = 0, $8 = 0, $81 = 0, label = 0;
$1 = $0 + 20 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if ($2 | 0) {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] & 255]($2);
HEAP32[$1 >> 2] = 0;
}
$8 = HEAP32[$0 + 4 >> 2] | 0;
L4 : do if ($8 | 0) {
$10 = $8 + 12 | 0;
$11 = HEAP32[$10 >> 2] | 0;
L6 : do switch ($11 | 0) {
case 0:
{
break L4;
break;
}
case 1:
{
$$1$i = __ZL8PNMtoATMP13DynamicArray1I15AtomicNonmanualE(HEAP32[HEAP32[$8 >> 2] >> 2] | 0) | 0;
label = 29;
break;
}
default:
{
$15 = __Znwj(28) | 0;
$16 = $15 + 4 | 0;
HEAP32[$16 >> 2] = 0;
HEAP32[$16 + 4 >> 2] = 0;
HEAP32[$16 + 8 >> 2] = 0;
HEAP32[$16 + 12 >> 2] = 0;
HEAP32[$15 + 20 >> 2] = 3;
HEAP32[$15 >> 2] = 3324;
__THREW__ = 0;
$18 = invoke_ii(20, 16) | 0;
$19 = __THREW__;
__THREW__ = 0;
if ($19 & 1) {
$29 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($15);
___resumeException($29 | 0);
}
HEAP32[$18 + 4 >> 2] = 10;
HEAP32[$18 + 12 >> 2] = 0;
HEAP32[$18 >> 2] = 0;
HEAP32[$18 + 8 >> 2] = 0;
$24 = $15 + 24 | 0;
HEAP32[$24 >> 2] = $18;
if (($11 | 0) > 0) {
$$03436$i = 0;
$34 = 0;
do {
if ($$03436$i << 16 >> 16 < 0) $36 = 0; else $36 = HEAP32[(HEAP32[$8 >> 2] | 0) + ($34 << 2) >> 2] | 0;
$37 = __ZL8PNMtoATMP13DynamicArray1I15AtomicNonmanualE($36) | 0;
if ($37 | 0) {
$39 = HEAP32[$24 >> 2] | 0;
$40 = $39 + 12 | 0;
$41 = HEAP32[$40 >> 2] | 0;
if (($41 | 0) >= 0) {
if ((HEAP32[$39 + 8 >> 2] | 0) > ($41 | 0)) {
$$pre$phi$i$iZ2D = $41 + 1 | 0;
label = 19;
} else {
$47 = HEAP32[$39 + 4 >> 2] | 0;
$49 = $41 + 1 | 0;
__ZN13DynamicArrayPI18AbstractTimedMorphE6resizeEi($39, ($47 | 0) > ($41 | 0) ? $47 : $49 + ($41 >>> 1) | 0);
if ((HEAP32[$40 >> 2] | 0) <= ($41 | 0)) {
$$pre$phi$i$iZ2D = $49;
label = 19;
}
}
if ((label | 0) == 19) {
label = 0;
HEAP32[$40 >> 2] = $$pre$phi$i$iZ2D;
}
HEAP32[(HEAP32[$39 >> 2] | 0) + ($41 << 2) >> 2] = $37;
}
}
$$03436$i = $$03436$i + 1 << 16 >> 16;
$34 = $$03436$i << 16 >> 16;
} while ((HEAP32[$10 >> 2] | 0) > ($34 | 0));
$27 = HEAP32[$24 >> 2] | 0;
} else $27 = $18;
$26 = $27 + 12 | 0;
switch (HEAP32[$26 >> 2] | 0) {
case 0:
{
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$15 >> 2] | 0) + 4 >> 2] & 255]($15);
break L4;
break;
}
case 1:
{
$63 = HEAP32[HEAP32[$27 >> 2] >> 2] | 0;
if ((HEAP32[$27 + 8 >> 2] | 0) <= 0) {
$68 = HEAP32[$27 + 4 >> 2] | 0;
__ZN13DynamicArrayPI18AbstractTimedMorphE6resizeEi($27, ($68 | 0) > 1 ? $68 : 1);
if ((HEAP32[$26 >> 2] | 0) <= 0) HEAP32[$26 >> 2] = 1;
}
HEAP32[HEAP32[$27 >> 2] >> 2] = 0;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$15 >> 2] | 0) + 4 >> 2] & 255]($15);
$$1$i = $63;
label = 29;
break L6;
break;
}
default:
{
HEAP32[$1 >> 2] = $15;
$$1$i3 = $15;
break L6;
}
}
}
} while (0);
if ((label | 0) == 29) {
HEAP32[$1 >> 2] = $$1$i;
if (!$$1$i) {
$$sink = Math_fround(0.0);
$81 = $0 + 24 | 0;
HEAPF32[$81 >> 2] = $$sink;
return;
} else $$1$i3 = $$1$i;
}
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$$1$i3 >> 2] | 0) + 12 >> 2] & 63]($$1$i3, Math_fround(0.0));
$$sink = Math_fround(HEAPF32[(HEAP32[$1 >> 2] | 0) + 16 >> 2]);
$81 = $0 + 24 | 0;
HEAPF32[$81 >> 2] = $$sink;
return;
} while (0);
HEAP32[$1 >> 2] = 0;
$$sink = Math_fround(0.0);
$81 = $0 + 24 | 0;
HEAPF32[$81 >> 2] = $$sink;
return;
}
function __ZN11HanimAvatar13duplicateSiteE6SiteIDS0_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$011$i$i = 0, $$01115$i$i = 0, $$01116$i$i = 0, $$sink$i$i = 0, $$sink$i$i9 = 0, $10 = 0, $11 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $35 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpcast$i$i$byval_copy = 0, $tmpcast$i8$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$tmpcast$i8$byval_copy = sp + 20 | 0;
$tmpcast$i$i$byval_copy = sp + 16 | 0;
$vararg_buffer = sp;
$3 = sp + 12 | 0;
$4 = sp + 8 | 0;
$5 = sp + 4 | 0;
$6 = HEAP32[$1 >> 2] | 0;
HEAP32[$5 >> 2] = $6;
$7 = $0 + 176 | 0;
$8 = HEAP32[$7 >> 2] | 0;
HEAP8[$tmpcast$i8$byval_copy >> 0] = HEAP8[$5 >> 0] | 0;
HEAP8[$tmpcast$i8$byval_copy + 1 >> 0] = HEAP8[$5 + 1 >> 0] | 0;
HEAP8[$tmpcast$i8$byval_copy + 2 >> 0] = HEAP8[$5 + 2 >> 0] | 0;
HEAP8[$tmpcast$i8$byval_copy + 3 >> 0] = HEAP8[$5 + 3 >> 0] | 0;
$9 = __ZN6KeyOpsIK6SiteIDE12hashFunctionES0_i($tmpcast$i8$byval_copy, $8) | 0;
$10 = $0 + 172 | 0;
$11 = HEAP32[$10 >> 2] | 0;
L1 : do if ((HEAP16[$11 + ($9 << 3) + 4 >> 1] | 0) > 0) {
$$01115$i$i = HEAP32[$11 + ($9 << 3) >> 2] | 0;
if (!$$01115$i$i) label = 6; else {
$$01116$i$i = $$01115$i$i;
while (1) {
HEAP32[$3 >> 2] = $6;
HEAP32[$4 >> 2] = HEAP32[$$01116$i$i >> 2];
HEAP32[$tmpcast$i$i$byval_copy >> 2] = HEAP32[$3 >> 2];
HEAP8[$tmpcast$i8$byval_copy >> 0] = HEAP8[$4 >> 0] | 0;
HEAP8[$tmpcast$i8$byval_copy + 1 >> 0] = HEAP8[$4 + 1 >> 0] | 0;
HEAP8[$tmpcast$i8$byval_copy + 2 >> 0] = HEAP8[$4 + 2 >> 0] | 0;
HEAP8[$tmpcast$i8$byval_copy + 3 >> 0] = HEAP8[$4 + 3 >> 0] | 0;
if (__ZN6KeyOpsIK6SiteIDE5eqkeyES0_S0_($tmpcast$i$i$byval_copy, $tmpcast$i8$byval_copy) | 0) break;
$$011$i$i = HEAP32[$$01116$i$i + 8 >> 2] | 0;
if (!$$011$i$i) {
label = 6;
break L1;
} else $$01116$i$i = $$011$i$i;
}
$$sink$i$i = $$01116$i$i + 4 | 0;
}
} else label = 6; while (0);
if ((label | 0) == 6) $$sink$i$i = $0 + 192 | 0;
$23 = HEAP32[$$sink$i$i >> 2] | 0;
if (!$23) {
if (!1) {
STACKTOP = sp;
return $23 | 0;
}
__Z7LogTimev() | 0;
__Z7eprintfPKcz(22067, $vararg_buffer);
__ZNK6SiteID5printEP8_IO_FILE($1, HEAP32[16082] | 0);
__Z5eputsPKc(22140);
__ZNK6SiteID5printEP8_IO_FILE($2, HEAP32[16082] | 0);
__Z5eputsPKc(49554);
STACKTOP = sp;
return $23 | 0;
}
$25 = HEAP32[$2 >> 2] | 0;
HEAP32[$tmpcast$i$i$byval_copy >> 2] = $25;
$26 = HEAP32[$7 >> 2] | 0;
HEAP8[$tmpcast$i8$byval_copy >> 0] = HEAP8[$tmpcast$i$i$byval_copy >> 0] | 0;
HEAP8[$tmpcast$i8$byval_copy + 1 >> 0] = HEAP8[$tmpcast$i$i$byval_copy + 1 >> 0] | 0;
HEAP8[$tmpcast$i8$byval_copy + 2 >> 0] = HEAP8[$tmpcast$i$i$byval_copy + 2 >> 0] | 0;
HEAP8[$tmpcast$i8$byval_copy + 3 >> 0] = HEAP8[$tmpcast$i$i$byval_copy + 3 >> 0] | 0;
$27 = __ZN6KeyOpsIK6SiteIDE12hashFunctionES0_i($tmpcast$i8$byval_copy, $26) | 0;
$28 = HEAP32[$10 >> 2] | 0;
$29 = $28 + ($27 << 3) | 0;
$30 = $28 + ($27 << 3) + 4 | 0;
switch (HEAP16[$30 >> 1] | 0) {
case 0:
{
$32 = __Znwj(12) | 0;
HEAP32[$32 >> 2] = $25;
HEAP32[$32 + 4 >> 2] = $23;
HEAP32[$32 + 8 >> 2] = 0;
HEAP32[$29 >> 2] = $32;
$35 = $0 + 184 | 0;
HEAP32[$35 >> 2] = (HEAP32[$35 >> 2] | 0) + -1;
$$sink$i$i9 = $0 + 188 | 0;
break;
}
case 1:
{
$39 = $0 + 188 | 0;
HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + -1;
label = 11;
break;
}
default:
label = 11;
}
if ((label | 0) == 11) {
$42 = HEAP32[$29 >> 2] | 0;
$44 = __Znwj(12) | 0;
$45 = $42 + 8 | 0;
$46 = HEAP32[$45 >> 2] | 0;
HEAP32[$44 >> 2] = $25;
HEAP32[$44 + 4 >> 2] = $23;
HEAP32[$44 + 8 >> 2] = $46;
HEAP32[$45 >> 2] = $44;
$$sink$i$i9 = $0 + 180 | 0;
}
HEAP32[$$sink$i$i9 >> 2] = (HEAP32[$$sink$i$i9 >> 2] | 0) + 1;
HEAP16[$30 >> 1] = (HEAP16[$30 >> 1] | 0) + 1 << 16 >> 16;
$53 = $0 + 196 | 0;
HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + 1;
STACKTOP = sp;
return $23 | 0;
}
function __ZNK10TorsoCurve13GetCurvePointEfR6Vector($0, $1, $2) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = $2 | 0;
var $$0$i$i$i = f0, $$0$i$i36$i = f0, $$op = f0, $$sink = 0, $$sink7$sink$i12 = f0, $10 = f0, $103 = 0, $105 = f0, $110 = f0, $113 = 0, $115 = f0, $12 = f0, $14 = f0, $15 = 0, $16 = f0, $18 = f0, $21 = f0, $26 = f0, $29 = f0, $3 = 0, $31 = f0, $34 = f0, $35 = f0, $4 = 0, $40 = f0, $42 = f0, $43 = 0, $44 = f0, $46 = f0, $55 = f0, $58 = f0, $6 = f0, $60 = f0, $63 = f0, $64 = f0, $69 = f0, $71 = f0, $72 = 0, $73 = f0, $75 = f0, $84 = f0, $87 = f0, $89 = f0, $91 = f0, $92 = 0, $93 = f0, $95 = f0, $98 = f0;
$3 = $1 < Math_fround(0.0);
$4 = $1 > Math_fround(1.0);
$$op = Math_fround(($4 ? Math_fround(1.0) : $1) * Math_fround(4.0));
$6 = $3 ? Math_fround(0.0) : $$op;
do if (!($6 <= Math_fround(1.0))) {
if ($6 <= Math_fround(2.0)) {
$26 = Math_fround(Math_fround(1.0) - Math_fround($6 + Math_fround(-1.0)));
$29 = Math_fround($26 * Math_fround(HEAPF32[$0 + 116 >> 2]));
$31 = Math_fround(HEAPF32[$0 + 108 >> 2]);
if ($31 == Math_fround(0.0)) {
$34 = Math_fround(HEAPF32[$0 + 120 >> 2]);
$35 = Math_fround($29 * $29);
$$0$i$i36$i = Math_fround($34 - Math_fround($35 * Math_fround(HEAPF32[$0 + 112 >> 2])));
} else {
$40 = Math_fround($29 / $31);
$42 = Math_fround(Math_fround(1.0) - Math_fround($40 * $40));
$43 = $42 > Math_fround(0.0);
$44 = $43 ? $42 : Math_fround(0.0);
$46 = Math_fround(HEAPF32[$0 + 120 >> 2]);
$$0$i$i36$i = Math_fround($46 + Math_fround(Math_fround(HEAPF32[$0 + 112 >> 2]) * Math_fround(Math_sqrt(Math_fround($44)))));
}
HEAPF32[$2 >> 2] = $29;
HEAPF32[$2 + 8 >> 2] = $$0$i$i36$i;
__ZNK6Vector16checkValidVectorEv($2);
$$sink = $0 + 132 | 0;
break;
}
if (!($6 <= Math_fround(3.0))) {
$84 = Math_fround(Math_fround(1.0) - Math_fround($6 + Math_fround(-3.0)));
$87 = Math_fround($84 * Math_fround(HEAPF32[$0 + 68 >> 2]));
$89 = Math_fround(HEAPF32[$0 + 64 >> 2]);
$91 = Math_fround($89 * Math_fround(+Math_sin(+$87)));
$92 = $89 < Math_fround(0.0);
$93 = Math_fround(-$91);
$95 = Math_fround($89 * Math_fround(+Math_cos(+$87)));
$98 = Math_fround(Math_fround(HEAPF32[$0 + 60 >> 2]) + $95);
HEAPF32[$2 >> 2] = $98;
HEAPF32[$2 + 8 >> 2] = $92 ? $93 : $91;
$$sink = $0 + 128 | 0;
break;
}
$55 = Math_fround($6 + Math_fround(-2.0));
$58 = Math_fround($55 * Math_fround(HEAPF32[$0 + 100 >> 2]));
$60 = Math_fround(HEAPF32[$0 + 92 >> 2]);
if ($60 == Math_fround(0.0)) {
$63 = Math_fround(HEAPF32[$0 + 104 >> 2]);
$64 = Math_fround($58 * $58);
$$0$i$i$i = Math_fround($63 - Math_fround($64 * Math_fround(HEAPF32[$0 + 96 >> 2])));
} else {
$69 = Math_fround($58 / $60);
$71 = Math_fround(Math_fround(1.0) - Math_fround($69 * $69));
$72 = $71 > Math_fround(0.0);
$73 = $72 ? $71 : Math_fround(0.0);
$75 = Math_fround(HEAPF32[$0 + 104 >> 2]);
$$0$i$i$i = Math_fround($75 + Math_fround(Math_fround(HEAPF32[$0 + 96 >> 2]) * Math_fround(Math_sqrt(Math_fround($73)))));
}
HEAPF32[$2 >> 2] = $58;
HEAPF32[$2 + 8 >> 2] = $$0$i$i$i;
__ZNK6Vector16checkValidVectorEv($2);
$$sink = $0 + 128 | 0;
} else {
$10 = Math_fround($6 * Math_fround(HEAPF32[$0 + 84 >> 2]));
$12 = Math_fround(HEAPF32[$0 + 80 >> 2]);
$14 = Math_fround($12 * Math_fround(+Math_sin(+$10)));
$15 = $12 < Math_fround(0.0);
$16 = Math_fround(-$14);
$18 = Math_fround($12 * Math_fround(+Math_cos(+$10)));
$21 = Math_fround(Math_fround(HEAPF32[$0 + 76 >> 2]) + $18);
HEAPF32[$2 >> 2] = $21;
HEAPF32[$2 + 8 >> 2] = $15 ? $16 : $14;
$$sink = $0 + 132 | 0;
} while (0);
$$sink7$sink$i12 = Math_fround(HEAPF32[$$sink >> 2]);
$103 = $2 + (HEAP16[4149] << 2) | 0;
$105 = Math_fround($$sink7$sink$i12 + Math_fround(HEAPF32[$103 >> 2]));
HEAPF32[$103 >> 2] = $105;
HEAP32[$2 + 4 >> 2] = HEAP32[$0 + 28 >> 2];
$110 = Math_fround(HEAPF32[$0 + 124 >> 2]);
$113 = $2 + (HEAP16[36079] << 2) | 0;
$115 = Math_fround($110 + Math_fround(HEAPF32[$113 >> 2]));
HEAPF32[$113 >> 2] = $115;
return;
}
function __ZN19OneHAbstractPosture20defaultHandstuffFromERKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $21 = 0, $24 = 0, $35 = 0, $36 = 0, $38 = 0, $44 = 0, $48 = 0, $5 = 0, $52 = 0, $64 = 0, $8 = 0, $90 = 0, $91 = 0, $95 = 0, $98 = 0, $scevgep$i = 0;
$2 = $0 + 20 | 0;
if (Math_fround(HEAPF32[$2 >> 2]) == Math_fround(0.0)) {
$5 = $0 + 24 | 0;
if (Math_fround(HEAPF32[$5 >> 2]) == Math_fround(0.0)) {
$8 = $0 + 28 | 0;
if (Math_fround(HEAPF32[$8 >> 2]) == Math_fround(0.0)) {
if (($0 | 0) != ($1 | 0)) {
HEAP32[$2 >> 2] = HEAP32[$1 + 20 >> 2];
HEAP32[$5 >> 2] = HEAP32[$1 + 24 >> 2];
HEAP32[$8 >> 2] = HEAP32[$1 + 28 >> 2];
}
HEAP8[$0 + 40 >> 0] = HEAP8[$1 + 40 >> 0] | 0;
}
}
}
$21 = $0 + 32 | 0;
if (Math_fround(HEAPF32[$21 >> 2]) == Math_fround(0.0)) {
$24 = $0 + 36 | 0;
if (Math_fround(HEAPF32[$24 >> 2]) == Math_fround(0.0)) {
if (($0 | 0) != ($1 | 0)) {
HEAP32[$21 >> 2] = HEAP32[$1 + 32 >> 2];
HEAP32[$24 >> 2] = HEAP32[$1 + 36 >> 2];
}
HEAP8[$0 + 41 >> 0] = HEAP8[$1 + 41 >> 0] | 0;
}
}
$35 = $0 + 56 | 0;
$36 = HEAP32[$35 >> 2] | 0;
if (!$36) return;
$38 = $1 + 56 | 0;
if (!(HEAP32[$38 >> 2] | 0)) return;
if (__ZNK9Handshape7definedEv($36) | 0) return;
_memcpy(HEAP32[$35 >> 2] | 0, HEAP32[$38 >> 2] | 0, 217) | 0;
$44 = HEAP32[$38 >> 2] | 0;
if (!(HEAP32[$44 + 220 >> 2] | 0)) return;
$48 = HEAP32[$35 >> 2] | 0;
if (!(HEAP32[$48 + 220 >> 2] | 0)) {
$52 = __Znwj(220) | 0;
HEAP32[$52 >> 2] = 0;
HEAP8[$52 + 4 >> 0] = 0;
HEAP32[$52 + 8 >> 2] = 0;
HEAPF32[$52 + 12 >> 2] = Math_fround(-100.0);
HEAPF32[$52 + 16 >> 2] = Math_fround(-100.0);
HEAPF32[$52 + 20 >> 2] = Math_fround(-100.0);
HEAPF32[$52 + 24 >> 2] = Math_fround(-100.0);
HEAP32[$52 + 28 >> 2] = 0;
HEAPF32[$52 + 32 >> 2] = Math_fround(-100.0);
HEAPF32[$52 + 36 >> 2] = Math_fround(-100.0);
HEAPF32[$52 + 40 >> 2] = Math_fround(-100.0);
HEAPF32[$52 + 44 >> 2] = Math_fround(-100.0);
$64 = $52 + 48 | 0;
HEAP32[$64 >> 2] = 0;
HEAP32[$64 + 4 >> 2] = 0;
HEAP32[$64 + 8 >> 2] = 0;
HEAPF32[$52 + 80 >> 2] = Math_fround(-100.0);
HEAPF32[$52 + 84 >> 2] = Math_fround(-100.0);
HEAPF32[$52 + 88 >> 2] = Math_fround(-100.0);
HEAPF32[$52 + 92 >> 2] = Math_fround(-100.0);
HEAPF32[$52 + 96 >> 2] = Math_fround(-100.0);
HEAPF32[$52 + 100 >> 2] = Math_fround(-100.0);
HEAPF32[$52 + 104 >> 2] = Math_fround(-100.0);
HEAPF32[$52 + 108 >> 2] = Math_fround(-100.0);
HEAPF32[$52 + 112 >> 2] = Math_fround(-100.0);
HEAPF32[$52 + 116 >> 2] = Math_fround(-100.0);
HEAPF32[$52 + 120 >> 2] = Math_fround(-100.0);
HEAPF32[$52 + 124 >> 2] = Math_fround(-100.0);
HEAPF32[$52 + 128 >> 2] = Math_fround(-100.0);
HEAPF32[$52 + 132 >> 2] = Math_fround(-100.0);
HEAPF32[$52 + 136 >> 2] = Math_fround(-100.0);
HEAPF32[$52 + 140 >> 2] = Math_fround(-100.0);
HEAPF32[$52 + 144 >> 2] = Math_fround(-100.0);
HEAPF32[$52 + 148 >> 2] = Math_fround(-100.0);
HEAPF32[$52 + 152 >> 2] = Math_fround(-100.0);
HEAPF32[$52 + 156 >> 2] = Math_fround(-100.0);
HEAPF32[$52 + 160 >> 2] = Math_fround(-100.0);
HEAPF32[$52 + 164 >> 2] = Math_fround(-100.0);
HEAPF32[$52 + 168 >> 2] = Math_fround(-100.0);
HEAPF32[$52 + 172 >> 2] = Math_fround(-100.0);
HEAPF32[$52 + 176 >> 2] = Math_fround(-100.0);
$90 = $52 + 180 | 0;
$91 = $52 + 204 | 0;
HEAP32[$90 >> 2] = -1;
HEAP32[$90 + 4 >> 2] = -1;
HEAP32[$90 + 8 >> 2] = -1;
HEAP32[$90 + 12 >> 2] = -1;
HEAP32[$90 + 16 >> 2] = -1;
HEAP32[$90 + 20 >> 2] = -1;
$scevgep$i = $52 + 60 | 0;
HEAP32[$scevgep$i >> 2] = 0;
HEAP32[$scevgep$i + 4 >> 2] = 0;
HEAP32[$scevgep$i + 8 >> 2] = 0;
HEAP32[$scevgep$i + 12 >> 2] = 0;
HEAP32[$scevgep$i + 16 >> 2] = 0;
HEAP32[$91 >> 2] = 0;
HEAP32[$91 + 4 >> 2] = 0;
HEAP32[$91 + 8 >> 2] = 0;
HEAP8[$91 + 12 >> 0] = 0;
HEAP32[(HEAP32[$35 >> 2] | 0) + 220 >> 2] = $52;
$95 = HEAP32[$38 >> 2] | 0;
$98 = HEAP32[$35 >> 2] | 0;
} else {
$95 = $44;
$98 = $48;
}
_memcpy(HEAP32[$98 + 220 >> 2] | 0, HEAP32[$95 + 220 >> 2] | 0, 217) | 0;
return;
}
function __ZN7Gesture11PostProcessEv($0) {
$0 = $0 | 0;
var $$0 = 0, $$02 = 0, $$1 = 0, $$13 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $24 = 0, $28 = 0, $3 = 0, $32 = 0, $34 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $44 = 0, $46 = 0, $48 = 0, $5 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $62 = 0, $63 = 0, $64 = 0, $66 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 336 | 0;
$vararg_buffer = sp;
$1 = sp + 264 | 0;
$2 = sp + 176 | 0;
$3 = sp + 334 | 0;
$4 = sp + 332 | 0;
$5 = sp + 8 | 0;
if (0) {
HEAP32[$vararg_buffer >> 2] = $0;
__Z7eprintfPKcz(28912, $vararg_buffer);
}
$7 = $0 + 44 | 0;
__Z16SimplifyMovementRP13BasicMovement($7);
HEAP16[$1 >> 1] = 0;
HEAP8[$1 + 2 >> 0] = 0;
$8 = $1 + 4 | 0;
HEAP16[$8 >> 1] = 0;
HEAP8[$8 + 2 >> 0] = 0;
HEAPF32[$1 + 8 >> 2] = Math_fround(.5);
$10 = $1 + 12 | 0;
HEAP16[$10 >> 1] = 0;
HEAP8[$10 + 2 >> 0] = 0;
$11 = $1 + 16 | 0;
HEAP16[$11 >> 1] = 0;
HEAP8[$11 + 2 >> 0] = 0;
HEAPF32[$1 + 20 >> 2] = Math_fround(.5);
$13 = $1 + 24 | 0;
HEAP16[$13 >> 1] = 0;
HEAP8[$13 + 2 >> 0] = 0;
$14 = $1 + 28 | 0;
HEAP16[$14 >> 1] = 0;
HEAP8[$14 + 2 >> 0] = 0;
HEAPF32[$1 + 32 >> 2] = Math_fround(.5);
$16 = $1 + 36 | 0;
HEAP16[$16 >> 1] = 0;
HEAP8[$16 + 2 >> 0] = 0;
$17 = $1 + 40 | 0;
HEAP16[$17 >> 1] = 0;
HEAP8[$17 + 2 >> 0] = 0;
HEAP32[$1 + 44 >> 2] = 0;
__ZN6VectorC2Ev($1 + 48 | 0);
$20 = $1 + 60 | 0;
HEAP32[$20 >> 2] = 0;
HEAP8[$20 + 4 >> 0] = 0;
HEAP32[$2 >> 2] = 0;
HEAP32[$2 + 4 >> 2] = 0;
HEAP32[$2 + 8 >> 2] = 0;
HEAP32[$2 + 12 >> 2] = 0;
HEAP32[$2 + 16 >> 2] = 0;
HEAP32[$2 + 20 >> 2] = 0;
HEAP32[$2 + 24 >> 2] = 0;
HEAP32[$2 + 28 >> 2] = 0;
HEAPF32[$2 + 32 >> 2] = Math_fround(1.0);
HEAP32[$2 + 36 >> 2] = 0;
HEAP8[$2 + 40 >> 0] = 1;
$24 = $2 + 44 | 0;
HEAP32[$24 >> 2] = 0;
HEAP32[$24 + 4 >> 2] = 0;
HEAP32[$24 + 8 >> 2] = 0;
HEAP32[$24 + 12 >> 2] = 0;
HEAP32[$24 + 16 >> 2] = 0;
HEAP32[$24 + 20 >> 2] = 0;
HEAP32[$24 + 24 >> 2] = 0;
HEAP32[$24 + 28 >> 2] = 0;
HEAPF32[$2 + 76 >> 2] = Math_fround(1.0);
HEAP32[$2 + 80 >> 2] = 0;
HEAP8[$2 + 84 >> 0] = 0;
$28 = HEAP32[$7 >> 2] | 0;
__THREW__ = 0;
invoke_viii(HEAP32[(HEAP32[$28 >> 2] | 0) + 24 >> 2] | 0, $28 | 0, $2 | 0, $1 | 0);
$32 = __THREW__;
__THREW__ = 0;
if (!($32 & 1)) {
$34 = HEAP32[$7 >> 2] | 0;
$37 = HEAP32[(HEAP32[$34 >> 2] | 0) + 28 >> 2] | 0;
HEAP16[$3 >> 1] = 0;
HEAP16[$4 >> 1] = 0;
__THREW__ = 0;
invoke_viii($37 | 0, $34 | 0, $3 | 0, $4 | 0);
$38 = __THREW__;
__THREW__ = 0;
if ($38 & 1) {
$58 = ___cxa_find_matching_catch_2() | 0;
$$1 = tempRet0;
$$13 = $58;
___resumeException($$13 | 0);
}
$40 = HEAP32[$7 >> 2] | 0;
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$40 >> 2] | 0) + 36 >> 2] | 0, $40 | 0);
$44 = __THREW__;
__THREW__ = 0;
if (!($44 & 1)) {
__THREW__ = 0;
invoke_vii(144, $5 | 0, $0 | 0);
$46 = __THREW__;
__THREW__ = 0;
do if ($46 & 1) label = 12; else {
$48 = HEAP32[$7 >> 2] | 0;
__THREW__ = 0;
invoke_viii(HEAP32[(HEAP32[$48 >> 2] | 0) + 20 >> 2] | 0, $48 | 0, $0 | 0, $5 | 0);
$52 = __THREW__;
__THREW__ = 0;
if ($52 & 1) {
$62 = ___cxa_find_matching_catch_2() | 0;
$63 = tempRet0;
__THREW__ = 0;
invoke_vi(132, $5 | 0);
$64 = __THREW__;
__THREW__ = 0;
if (!($64 & 1)) {
$$0 = $63;
$$02 = $62;
break;
}
$66 = ___cxa_find_matching_catch_3(0) | 0;
___clang_call_terminate($66);
} else {
__THREW__ = 0;
invoke_vi(132, $5 | 0);
$54 = __THREW__;
__THREW__ = 0;
if ($54 & 1) {
label = 12;
break;
}
STACKTOP = sp;
return;
}
} while (0);
if ((label | 0) == 12) {
$60 = ___cxa_find_matching_catch_2() | 0;
$$0 = tempRet0;
$$02 = $60;
}
$$1 = $$0;
$$13 = $$02;
___resumeException($$13 | 0);
}
}
$56 = ___cxa_find_matching_catch_2() | 0;
$$1 = tempRet0;
$$13 = $56;
___resumeException($$13 | 0);
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $$0 = 0, $$1 = 0, $$byval_copy = 0, $$pre$phi13Z2D = 0, $$pre$phi15Z2D = 0, $$pre$phiZ2D = 0, $12 = 0, $13 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $50 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $62 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$$byval_copy = sp + 12 | 0;
$2 = sp + 8 | 0;
$3 = sp;
__THREW__ = 0;
invoke_vii(112, $3 | 0, $0 | 0);
$4 = __THREW__;
__THREW__ = 0;
L1 : do if ($4 & 1) {
$56 = ___cxa_find_matching_catch_3(0) | 0;
$$1 = $56;
$$pre$phi13Z2D = $0;
$$pre$phi15Z2D = $0;
label = 20;
} else {
L4 : do if (HEAP8[$3 >> 0] | 0) {
__ZNKSt3__28ios_base6getlocEv($$byval_copy, $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0);
__THREW__ = 0;
$12 = invoke_iii(20, $$byval_copy | 0, 72060) | 0;
$13 = __THREW__;
__THREW__ = 0;
L6 : do if ($13 & 1) {
$58 = ___cxa_find_matching_catch_3(0) | 0;
__ZNSt3__26localeD2Ev($$byval_copy);
$$0 = $58;
} else {
__ZNSt3__26localeD2Ev($$byval_copy);
$18 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
$20 = HEAP32[$18 + 24 >> 2] | 0;
$21 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
$22 = $18 + 76 | 0;
do if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($21, HEAP32[$22 >> 2] | 0) | 0) {
__ZNKSt3__28ios_base6getlocEv($$byval_copy, $18);
__THREW__ = 0;
$25 = invoke_iii(20, $$byval_copy | 0, 72048) | 0;
$26 = __THREW__;
__THREW__ = 0;
if (!($26 & 1)) {
__THREW__ = 0;
$31 = invoke_iii(HEAP32[(HEAP32[$25 >> 2] | 0) + 28 >> 2] | 0, $25 | 0, 32) | 0;
$32 = __THREW__;
__THREW__ = 0;
if (!($32 & 1)) {
__ZNSt3__26localeD2Ev($$byval_copy);
$36 = $31 << 24 >> 24;
HEAP32[$22 >> 2] = $36;
$$pre$phiZ2D = $18;
$38 = $36;
label = 10;
break;
}
}
$34 = ___cxa_find_matching_catch_3(0) | 0;
__ZNSt3__26localeD2Ev($$byval_copy);
$eh$lpad$body$indexZ2D = $34;
} else {
$$pre$phiZ2D = $18;
$38 = HEAP32[$22 >> 2] | 0;
label = 10;
} while (0);
do if ((label | 0) == 10) {
$42 = HEAP32[(HEAP32[$12 >> 2] | 0) + 32 >> 2] | 0;
HEAP32[$2 >> 2] = $20;
__THREW__ = 0;
HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2];
$43 = invoke_iiiiid($42 | 0, $12 | 0, $$byval_copy | 0, $$pre$phiZ2D | 0, $38 & 255 | 0, +(+$1)) | 0;
$44 = __THREW__;
__THREW__ = 0;
if ($44 & 1) {
$60 = ___cxa_find_matching_catch_3(0) | 0;
$eh$lpad$body$indexZ2D = $60;
break;
}
if ($43 | 0) break L4;
$50 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
__THREW__ = 0;
invoke_vii(114, $50 | 0, HEAP32[$50 + 16 >> 2] | 5 | 0);
$54 = __THREW__;
__THREW__ = 0;
if (!($54 & 1)) break L4;
$62 = ___cxa_find_matching_catch_3(0) | 0;
$$0 = $62;
break L6;
} while (0);
$$0 = $eh$lpad$body$indexZ2D;
} while (0);
__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
$$1 = $$0;
$$pre$phi13Z2D = $0;
$$pre$phi15Z2D = $0;
label = 20;
break L1;
} while (0);
__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
} while (0);
do if ((label | 0) == 20) {
___cxa_begin_catch($$1 | 0) | 0;
__THREW__ = 0;
invoke_vi(92, $$pre$phi15Z2D + (HEAP32[(HEAP32[$$pre$phi13Z2D >> 2] | 0) + -12 >> 2] | 0) | 0);
$68 = __THREW__;
__THREW__ = 0;
if (!($68 & 1)) {
___cxa_end_catch();
break;
}
$70 = ___cxa_find_matching_catch_2() | 0;
__THREW__ = 0;
invoke_v(3);
$72 = __THREW__;
__THREW__ = 0;
if ($72 & 1) {
$74 = ___cxa_find_matching_catch_3(0) | 0;
___clang_call_terminate($74);
} else ___resumeException($70 | 0);
} while (0);
STACKTOP = sp;
return $0 | 0;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0, $$1 = 0, $$byval_copy = 0, $$pre$phi20Z2D = 0, $$pre$phi22Z2D = 0, $$pre$phiZ2D = 0, $12 = 0, $13 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $49 = 0, $53 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $67 = 0, $69 = 0, $71 = 0, $73 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$$byval_copy = sp + 12 | 0;
$2 = sp + 8 | 0;
$3 = sp;
__THREW__ = 0;
invoke_vii(112, $3 | 0, $0 | 0);
$4 = __THREW__;
__THREW__ = 0;
L1 : do if ($4 & 1) {
$55 = ___cxa_find_matching_catch_3(0) | 0;
$$1 = $55;
$$pre$phi20Z2D = $0;
$$pre$phi22Z2D = $0;
label = 20;
} else {
L4 : do if (HEAP8[$3 >> 0] | 0) {
__ZNKSt3__28ios_base6getlocEv($$byval_copy, $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0);
__THREW__ = 0;
$12 = invoke_iii(20, $$byval_copy | 0, 72060) | 0;
$13 = __THREW__;
__THREW__ = 0;
L6 : do if ($13 & 1) {
$57 = ___cxa_find_matching_catch_3(0) | 0;
__ZNSt3__26localeD2Ev($$byval_copy);
$$0 = $57;
} else {
__ZNSt3__26localeD2Ev($$byval_copy);
$18 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
$20 = HEAP32[$18 + 24 >> 2] | 0;
$21 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
$22 = $18 + 76 | 0;
do if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($21, HEAP32[$22 >> 2] | 0) | 0) {
__ZNKSt3__28ios_base6getlocEv($$byval_copy, $18);
__THREW__ = 0;
$25 = invoke_iii(20, $$byval_copy | 0, 72048) | 0;
$26 = __THREW__;
__THREW__ = 0;
if (!($26 & 1)) {
__THREW__ = 0;
$31 = invoke_iii(HEAP32[(HEAP32[$25 >> 2] | 0) + 28 >> 2] | 0, $25 | 0, 32) | 0;
$32 = __THREW__;
__THREW__ = 0;
if (!($32 & 1)) {
__ZNSt3__26localeD2Ev($$byval_copy);
$36 = $31 << 24 >> 24;
HEAP32[$22 >> 2] = $36;
$$pre$phiZ2D = $18;
$38 = $36;
label = 10;
break;
}
}
$34 = ___cxa_find_matching_catch_3(0) | 0;
__ZNSt3__26localeD2Ev($$byval_copy);
$eh$lpad$body$indexZ2D = $34;
} else {
$$pre$phiZ2D = $18;
$38 = HEAP32[$22 >> 2] | 0;
label = 10;
} while (0);
do if ((label | 0) == 10) {
$41 = HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] | 0;
HEAP32[$2 >> 2] = $20;
__THREW__ = 0;
HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2];
$42 = invoke_iiiiii($41 | 0, $12 | 0, $$byval_copy | 0, $$pre$phiZ2D | 0, $38 & 255 | 0, $1 | 0) | 0;
$43 = __THREW__;
__THREW__ = 0;
if ($43 & 1) {
$59 = ___cxa_find_matching_catch_3(0) | 0;
$eh$lpad$body$indexZ2D = $59;
break;
}
if ($42 | 0) break L4;
$49 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
__THREW__ = 0;
invoke_vii(114, $49 | 0, HEAP32[$49 + 16 >> 2] | 5 | 0);
$53 = __THREW__;
__THREW__ = 0;
if (!($53 & 1)) break L4;
$61 = ___cxa_find_matching_catch_3(0) | 0;
$$0 = $61;
break L6;
} while (0);
$$0 = $eh$lpad$body$indexZ2D;
} while (0);
__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
$$1 = $$0;
$$pre$phi20Z2D = $0;
$$pre$phi22Z2D = $0;
label = 20;
break L1;
} while (0);
__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
} while (0);
do if ((label | 0) == 20) {
___cxa_begin_catch($$1 | 0) | 0;
__THREW__ = 0;
invoke_vi(92, $$pre$phi22Z2D + (HEAP32[(HEAP32[$$pre$phi20Z2D >> 2] | 0) + -12 >> 2] | 0) | 0);
$67 = __THREW__;
__THREW__ = 0;
if (!($67 & 1)) {
___cxa_end_catch();
break;
}
$69 = ___cxa_find_matching_catch_2() | 0;
__THREW__ = 0;
invoke_v(3);
$71 = __THREW__;
__THREW__ = 0;
if ($71 & 1) {
$73 = ___cxa_find_matching_catch_3(0) | 0;
___clang_call_terminate($73);
} else ___resumeException($69 | 0);
} while (0);
STACKTOP = sp;
return $0 | 0;
}
function __ZNK18SiGMLConstellation5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $106 = 0, $13 = 0, $16 = 0, $24 = 0, $27 = 0, $35 = 0, $38 = 0, $4 = 0, $46 = 0, $49 = 0, $57 = 0, $60 = 0, $68 = 0, $71 = 0, $79 = 0, $82 = 0, $90 = 0, $93 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$4 = HEAP32[16607] | 0;
if (!(($4 ^ HEAP32[$0 >> 2]) & 16777215)) $16 = $4; else {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(25767, 14, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK10SiteIDPair5printEP8_IO_FILE($0, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
$16 = HEAP32[16607] | 0;
}
$13 = $0 + 12 | 0;
if (!(($16 ^ HEAP32[$13 >> 2]) & 16777215)) $27 = $16; else {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(25782, 21, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6SiteID5printEP8_IO_FILE($13, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
$27 = HEAP32[16607] | 0;
}
$24 = $0 + 16 | 0;
if (!(($27 ^ HEAP32[$24 >> 2]) & 16777215)) $38 = $27; else {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(25804, 19, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK10SiteIDPair5printEP8_IO_FILE($24, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
$38 = HEAP32[16607] | 0;
}
$35 = $0 + 28 | 0;
if (!(($38 ^ HEAP32[$35 >> 2]) & 16777215)) $49 = $38; else {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(25824, 22, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK10SiteIDPair5printEP8_IO_FILE($35, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
$49 = HEAP32[16607] | 0;
}
$46 = $0 + 40 | 0;
if (!(($49 ^ HEAP32[$46 >> 2]) & 16777215)) $60 = $49; else {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(25847, 20, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6SiteID5printEP8_IO_FILE($46, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
$60 = HEAP32[16607] | 0;
}
$57 = $0 + 44 | 0;
if (!(($60 ^ HEAP32[$57 >> 2]) & 16777215)) $71 = $60; else {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(25868, 23, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6SiteID5printEP8_IO_FILE($57, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
$71 = HEAP32[16607] | 0;
}
$68 = $0 + 64 | 0;
if (!(($71 ^ HEAP32[$68 >> 2]) & 16777215)) $82 = $71; else {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(25892, 14, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6SiteID5printEP8_IO_FILE($68, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
$82 = HEAP32[16607] | 0;
}
$79 = $0 + 68 | 0;
if (!(($82 ^ HEAP32[$79 >> 2]) & 16777215)) $93 = $82; else {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(25907, 17, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6SiteID5printEP8_IO_FILE($79, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
$93 = HEAP32[16607] | 0;
}
$90 = $0 + 72 | 0;
if (($93 ^ HEAP32[$90 >> 2]) & 16777215 | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(25925, 13, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK10SiteIDPair5printEP8_IO_FILE($90, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$106 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17197] | 0, HEAP32[$0 + 48 >> 2] | 0) | 0;
HEAP32[$vararg_buffer >> 2] = $106;
_fprintf($1, 25939, $vararg_buffer) | 0;
STACKTOP = sp;
return;
}
function __ZN7GestureC2EPKcPK11HanimAvatarb($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$021 = 0, $$02223 = 0, $11 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $27 = 0, $29 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $45 = 0, $48 = 0, $49 = 0, $56 = 0, $57 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $69 = 0, $7 = 0, $70 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $9 = 0, $vararg_buffer = 0, dest = 0, sp = 0, stop = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
HEAP32[$0 >> 2] = $2;
$4 = $0 + 4 | 0;
HEAP32[$4 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = $1;
HEAP8[$0 + 12 >> 0] = 1;
$7 = $0 + 13 | 0;
$9 = HEAP8[$7 >> 0] & -128;
HEAP8[$7 >> 0] = $9 | 64;
$11 = $0 + 14 | 0;
HEAP8[$11 >> 0] = HEAP8[$11 >> 0] & -16;
$15 = $0 + 20 | 0;
$16 = $0 + 24 | 0;
$17 = $0 + 28 | 0;
$18 = $0 + 32 | 0;
$19 = $0 + 36 | 0;
$20 = ($2 | 0) == 0;
dest = $0 + 16 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
if ($20) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(28834, $vararg_buffer);
STACKTOP = sp;
return;
}
HEAP8[$7 >> 0] = $9 | ($3 & 1) << 6 & 255;
$27 = HEAP32[(HEAP32[$2 + 104 >> 2] | 0) + 12 >> 2] | 0;
$29 = _malloc($27 << 2) | 0;
HEAP32[$4 >> 2] = $29;
L5 : do if (($27 | 0) > 0) {
$$02223 = 0;
$48 = $2;
while (1) {
$49 = HEAP32[$48 + 104 >> 2] | 0;
if ((HEAP32[$49 + 12 >> 2] | 0) > ($$02223 | 0)) $56 = HEAP32[(HEAP32[$49 >> 2] | 0) + ($$02223 << 2) >> 2] | 0; else $56 = 0;
$57 = __ZN5Joint16NewJointRotationEv($56) | 0;
HEAP32[(HEAP32[$4 >> 2] | 0) + ($$02223 << 2) >> 2] = $57;
$60 = $$02223 + 1 | 0;
if (($60 | 0) == ($27 | 0)) break L5;
$$02223 = $60;
$48 = HEAP32[$0 >> 2] | 0;
}
} while (0);
$31 = __Znwj(84) | 0;
HEAP16[$31 >> 1] = 0;
HEAP8[$31 + 2 >> 0] = 0;
$32 = $31 + 4 | 0;
HEAP16[$32 >> 1] = 0;
HEAP8[$32 + 2 >> 0] = 0;
HEAPF32[$31 + 8 >> 2] = Math_fround(.5);
$34 = $31 + 12 | 0;
HEAP16[$34 >> 1] = 0;
HEAP8[$34 + 2 >> 0] = 0;
$35 = $31 + 16 | 0;
HEAP16[$35 >> 1] = 0;
HEAP8[$35 + 2 >> 0] = 0;
$36 = $31 + 20 | 0;
HEAP16[$36 >> 1] = 0;
HEAP8[$36 + 2 >> 0] = 0;
HEAPF32[$31 + 24 >> 2] = Math_fround(.5);
$38 = $31 + 28 | 0;
HEAP16[$38 >> 1] = 0;
HEAP8[$38 + 2 >> 0] = 0;
$39 = $31 + 32 | 0;
HEAP16[$39 >> 1] = 0;
HEAP8[$39 + 2 >> 0] = 0;
HEAPF32[$31 + 36 >> 2] = Math_fround(.5);
$41 = $31 + 40 | 0;
HEAP16[$41 >> 1] = 0;
HEAP8[$41 + 2 >> 0] = 0;
$42 = $31 + 44 | 0;
HEAP16[$42 >> 1] = 0;
HEAP8[$42 + 2 >> 0] = 0;
HEAP32[$31 + 48 >> 2] = 0;
__THREW__ = 0;
invoke_vi(98, $31 + 52 | 0);
$45 = __THREW__;
__THREW__ = 0;
if ($45 & 1) {
$74 = ___cxa_find_matching_catch_2() | 0;
$75 = tempRet0;
__ZdlPv($31);
$$0 = $75;
$$021 = $74;
___resumeException($$021 | 0);
}
$61 = $31 + 64 | 0;
HEAP16[$61 >> 1] = 0;
HEAP8[$61 + 2 >> 0] = 0;
$62 = $31 + 68 | 0;
HEAP16[$62 >> 1] = 0;
HEAP8[$62 + 2 >> 0] = 0;
$63 = $31 + 72 | 0;
HEAP16[$63 >> 1] = 0;
HEAP8[$63 + 2 >> 0] = 0;
$64 = $31 + 76 | 0;
HEAP16[$64 >> 1] = 0;
HEAP8[$64 + 2 >> 0] = 0;
HEAPF32[$31 + 80 >> 2] = Math_fround(.5);
HEAP32[$19 >> 2] = $31;
$66 = __Znwj(76) | 0;
__THREW__ = 0;
invoke_viii(84, $66 | 0, 1, $0 | 0);
$67 = __THREW__;
__THREW__ = 0;
if ($67 & 1) {
$76 = ___cxa_find_matching_catch_2() | 0;
$77 = tempRet0;
__ZdlPv($66);
$$0 = $77;
$$021 = $76;
___resumeException($$021 | 0);
}
HEAP32[$15 >> 2] = $66;
$69 = __Znwj(76) | 0;
__THREW__ = 0;
invoke_viii(84, $69 | 0, 0, $0 | 0);
$70 = __THREW__;
__THREW__ = 0;
if ($70 & 1) {
$78 = ___cxa_find_matching_catch_2() | 0;
$79 = tempRet0;
__ZdlPv($69);
$$0 = $79;
$$021 = $78;
___resumeException($$021 | 0);
} else {
HEAP32[$16 >> 2] = $69;
HEAP32[$17 >> 2] = HEAP32[($3 ? $15 : $16) >> 2];
HEAP32[$18 >> 2] = HEAP32[($3 ? $16 : $15) >> 2];
STACKTOP = sp;
return;
}
}
function __ZN16CircularMovementC2EPKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $24 = 0, $27 = 0, $30 = 0, $33 = 0, $38 = 0, $41 = 0, $44 = 0, $47 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0;
HEAP32[$0 >> 2] = 1984;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 16 >> 2] = 0;
HEAP8[$0 + 20 >> 0] = 0;
__ZN25TwoHConcretePostureChangeC2Ev($0 + 60 | 0);
$6 = $0 + 4 | 0;
$7 = $1 + 4 | 0;
_memcpy($6 | 0, $7 | 0, 524) | 0;
HEAP32[$0 >> 2] = 2264;
$8 = $0 + 528 | 0;
$9 = $0 + 532 | 0;
$10 = $0 + 536 | 0;
$11 = $0 + 540 | 0;
$12 = $0 + 544 | 0;
$13 = $0 + 548 | 0;
$14 = $0 + 556 | 0;
HEAPF32[$14 >> 2] = Math_fround(0.0);
$15 = $0 + 560 | 0;
HEAPF32[$15 >> 2] = Math_fround(0.0);
$16 = $0 + 568 | 0;
$17 = $0 + 572 | 0;
$18 = $0 + 576 | 0;
$19 = $0 + 580 | 0;
HEAP32[$8 >> 2] = 0;
HEAP32[$8 + 4 >> 2] = 0;
HEAP32[$8 + 8 >> 2] = 0;
HEAP32[$8 + 12 >> 2] = 0;
HEAP32[$8 + 16 >> 2] = 0;
HEAP32[$8 + 20 >> 2] = 0;
HEAP32[$16 >> 2] = 0;
HEAP32[$16 + 4 >> 2] = 0;
HEAP32[$16 + 8 >> 2] = 0;
HEAP32[$16 + 12 >> 2] = 0;
__THREW__ = 0;
invoke_vi(98, $0 + 616 | 0);
$21 = __THREW__;
__THREW__ = 0;
if (!($21 & 1)) {
__THREW__ = 0;
invoke_vi(98, $0 + 628 | 0);
$24 = __THREW__;
__THREW__ = 0;
if (!($24 & 1)) {
__THREW__ = 0;
invoke_vi(98, $0 + 640 | 0);
$27 = __THREW__;
__THREW__ = 0;
if (!($27 & 1)) {
__THREW__ = 0;
invoke_vi(98, $0 + 652 | 0);
$30 = __THREW__;
__THREW__ = 0;
if (!($30 & 1)) {
__THREW__ = 0;
invoke_vi(98, $0 + 664 | 0);
$33 = __THREW__;
__THREW__ = 0;
if (!($33 & 1)) {
HEAPF32[$0 + 676 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 680 >> 2] = Math_fround(0.0);
__THREW__ = 0;
invoke_vi(98, $0 + 684 | 0);
$38 = __THREW__;
__THREW__ = 0;
if (!($38 & 1)) {
__THREW__ = 0;
invoke_vi(98, $0 + 696 | 0);
$41 = __THREW__;
__THREW__ = 0;
if (!($41 & 1)) {
__THREW__ = 0;
invoke_vi(98, $0 + 708 | 0);
$44 = __THREW__;
__THREW__ = 0;
if (!($44 & 1)) {
__THREW__ = 0;
invoke_vi(98, $0 + 720 | 0);
$47 = __THREW__;
__THREW__ = 0;
if (!($47 & 1)) {
__THREW__ = 0;
invoke_vi(98, $0 + 732 | 0);
$50 = __THREW__;
__THREW__ = 0;
if (!($50 & 1)) {
HEAPF32[$0 + 744 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 748 >> 2] = Math_fround(0.0);
_memcpy($6 | 0, $7 | 0, 524) | 0;
if (($0 | 0) == ($1 | 0)) {
$85 = $0 + 584 | 0;
$86 = $1 + 584 | 0;
_memcpy($85 | 0, $86 | 0, 168) | 0;
return;
}
HEAP32[$8 >> 2] = HEAP32[$1 + 528 >> 2];
HEAP32[$9 >> 2] = HEAP32[$1 + 532 >> 2];
HEAP32[$10 >> 2] = HEAP32[$1 + 536 >> 2];
HEAP32[$11 >> 2] = HEAP32[$1 + 540 >> 2];
HEAP32[$12 >> 2] = HEAP32[$1 + 544 >> 2];
HEAP32[$13 >> 2] = HEAP32[$1 + 548 >> 2];
HEAP32[$0 + 552 >> 2] = HEAP32[$1 + 552 >> 2];
HEAP32[$14 >> 2] = HEAP32[$1 + 556 >> 2];
HEAP32[$15 >> 2] = HEAP32[$1 + 560 >> 2];
HEAP16[$0 + 564 >> 1] = HEAP16[$1 + 564 >> 1] | 0;
HEAP32[$16 >> 2] = HEAP32[$1 + 568 >> 2];
HEAP32[$17 >> 2] = HEAP32[$1 + 572 >> 2];
HEAP32[$18 >> 2] = HEAP32[$1 + 576 >> 2];
HEAP32[$19 >> 2] = HEAP32[$1 + 580 >> 2];
$85 = $0 + 584 | 0;
$86 = $1 + 584 | 0;
_memcpy($85 | 0, $86 | 0, 168) | 0;
return;
}
}
}
}
}
}
}
}
}
}
$87 = ___cxa_find_matching_catch_2() | 0;
HEAP32[$0 >> 2] = 1984;
HEAP32[$0 + 452 >> 2] = 0;
HEAP32[$0 + 340 >> 2] = 0;
HEAP32[$0 + 228 >> 2] = 0;
HEAP32[$0 + 116 >> 2] = 0;
___resumeException($87 | 0);
}
function _XmlInitUnknownEncoding($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0$i107 = 0, $$0102118 = 0, $$1103117 = 0, $$2 = 0, $$2104115 = 0, $$sink110 = 0, $10 = 0, $19 = 0, $34 = 0, $59 = 0, $64 = 0, $79 = 0, $8 = 0, $9 = 0, $trunc = 0, label = 0;
$$0102118 = 0;
do {
HEAP8[$0 + $$0102118 >> 0] = HEAP8[3632 + $$0102118 >> 0] | 0;
$$0102118 = $$0102118 + 1 | 0;
} while (($$0102118 | 0) != 364);
$$1103117 = 0;
L3 : while (1) {
switch (HEAP8[3704 + $$1103117 >> 0] | 0) {
case 0:
case 28:
break;
default:
if ((HEAP32[$1 + ($$1103117 << 2) >> 2] | 0) != ($$1103117 | 0)) {
$$2 = 0;
label = 32;
break L3;
}
}
if (($$1103117 | 0) < 127) $$1103117 = $$1103117 + 1 | 0; else break;
}
if ((label | 0) == 32) return $$2 | 0;
$8 = $0 + 72 | 0;
$9 = $0 + 372 | 0;
$10 = $0 + 884 | 0;
$$2104115 = 0;
L11 : while (1) {
$19 = HEAP32[$1 + ($$2104115 << 2) >> 2] | 0;
do if (($19 | 0) == -1) {
HEAP8[$8 + $$2104115 >> 0] = 1;
HEAP16[$9 + ($$2104115 << 1) >> 1] = -1;
HEAP8[$10 + ($$2104115 << 2) >> 0] = 1;
HEAP8[$10 + ($$2104115 << 2) + 1 >> 0] = 0;
} else {
if (($19 | 0) < 0) {
if (($19 | 0) < -4) {
$$2 = 0;
label = 32;
break L11;
}
HEAP8[$8 + $$2104115 >> 0] = 3 - $19;
HEAP8[$10 + ($$2104115 << 2) >> 0] = 0;
HEAP16[$9 + ($$2104115 << 1) >> 1] = 0;
break;
}
if (($19 | 0) < 128) {
$34 = HEAP8[3704 + $19 >> 0] | 0;
switch ($34 << 24 >> 24) {
case 0:
case 28:
break;
default:
if (($19 | 0) != ($$2104115 | 0)) {
$$2 = 0;
label = 32;
break L11;
}
}
HEAP8[$8 + $$2104115 >> 0] = $34;
HEAP8[$10 + ($$2104115 << 2) >> 0] = 1;
HEAP8[$10 + ($$2104115 << 2) + 1 >> 0] = $19;
HEAP16[$9 + ($$2104115 << 1) >> 1] = ($19 | 0) == 0 ? -1 : $19 & 65535;
break;
}
$trunc = $19 >>> 8;
switch ($trunc & 16777215 | 0) {
case 223:
case 222:
case 221:
case 220:
case 219:
case 218:
case 217:
case 216:
{
label = 19;
break;
}
case 0:
{
if (!(HEAP8[3704 + $19 >> 0] | 0)) label = 19;
break;
}
case 255:
{
if (($19 | 1 | 0) == 65535) label = 19;
break;
}
default:
{}
}
if ((label | 0) == 19) {
label = 0;
HEAP8[$8 + $$2104115 >> 0] = 0;
HEAP16[$9 + ($$2104115 << 1) >> 1] = -1;
HEAP8[$10 + ($$2104115 << 2) >> 0] = 1;
HEAP8[$10 + ($$2104115 << 2) + 1 >> 0] = 0;
break;
}
if (($19 | 0) > 65535) {
$$2 = 0;
label = 32;
break L11;
}
$59 = $19 >>> 5 & 7;
$64 = 1 << ($19 & 31);
if (!(HEAP32[3996 + ((HEAPU8[59947 + $trunc >> 0] << 3 | $59) << 2) >> 2] & $64)) HEAP8[$8 + $$2104115 >> 0] = HEAP32[3996 + ((HEAPU8[60203 + $trunc >> 0] << 3 | $59) << 2) >> 2] & $64 | 0 ? 26 : 28; else HEAP8[$8 + $$2104115 >> 0] = 22;
$79 = $10 + ($$2104115 << 2) + 1 | 0;
if (($19 | 0) < 2048) {
HEAP8[$79 >> 0] = $19 >>> 6 | 192;
$$0$i107 = 2;
$$sink110 = 1;
} else {
HEAP8[$79 >> 0] = $19 >>> 12 | 224;
HEAP8[$10 + ($$2104115 << 2) + 2 >> 0] = $19 >>> 6 & 63 | 128;
$$0$i107 = 3;
$$sink110 = 2;
}
HEAP8[$79 + $$sink110 >> 0] = $19 & 63 | 128;
HEAP8[$10 + ($$2104115 << 2) >> 0] = $$0$i107;
HEAP16[$9 + ($$2104115 << 1) >> 1] = $19;
} while (0);
if (($$2104115 | 0) < 255) $$2104115 = $$2104115 + 1 | 0; else {
label = 29;
break;
}
}
if ((label | 0) == 29) {
HEAP32[$0 + 368 >> 2] = $3;
HEAP32[$0 + 364 >> 2] = $2;
if ($2 | 0) {
HEAP32[$0 + 328 >> 2] = 39;
HEAP32[$0 + 332 >> 2] = 39;
HEAP32[$0 + 336 >> 2] = 39;
HEAP32[$0 + 340 >> 2] = 40;
HEAP32[$0 + 344 >> 2] = 40;
HEAP32[$0 + 348 >> 2] = 40;
HEAP32[$0 + 352 >> 2] = 41;
HEAP32[$0 + 356 >> 2] = 41;
HEAP32[$0 + 360 >> 2] = 41;
}
HEAP32[$0 + 56 >> 2] = 14;
HEAP32[$0 + 60 >> 2] = 15;
$$2 = $0;
return $$2 | 0;
} else if ((label | 0) == 32) return $$2 | 0;
return 0;
}
function __ZN6Vector14altitudeCentreERKS_S1_S1_($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$pre = f0, $$pre71 = f0, $10 = f0, $102 = f0, $12 = f0, $13 = f0, $15 = f0, $16 = f0, $17 = f0, $19 = f0, $21 = f0, $22 = f0, $23 = f0, $24 = f0, $25 = f0, $26 = f0, $27 = f0, $4 = f0, $41 = f0, $42 = f0, $45 = f0, $48 = f0, $49 = 0, $5 = 0, $52 = f0, $53 = 0, $56 = 0, $58 = 0, $6 = f0, $60 = 0, $65 = 0, $7 = 0, $71 = f0, $73 = f0, $75 = f0, $8 = f0, $89 = f0, $9 = f0, $90 = f0, $93 = f0, $97 = f0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$4 = Math_fround(HEAPF32[$2 >> 2]);
$5 = $2 + 4 | 0;
$6 = Math_fround(HEAPF32[$5 >> 2]);
$7 = $2 + 8 | 0;
$8 = Math_fround(HEAPF32[$7 >> 2]);
$9 = Math_fround(HEAPF32[$1 >> 2]);
$10 = Math_fround($4 - $9);
$12 = Math_fround(HEAPF32[$1 + 4 >> 2]);
$13 = Math_fround($6 - $12);
$15 = Math_fround(HEAPF32[$1 + 8 >> 2]);
$16 = Math_fround($8 - $15);
$17 = Math_fround(HEAPF32[$3 >> 2]);
$19 = Math_fround(HEAPF32[$3 + 4 >> 2]);
$21 = Math_fround(HEAPF32[$3 + 8 >> 2]);
$22 = Math_fround($17 - $4);
$23 = Math_fround($19 - $6);
$24 = Math_fround($21 - $8);
$25 = Math_fround($9 - $17);
$26 = Math_fround($12 - $19);
$27 = Math_fround($15 - $21);
$41 = Math_fround(Math_fround(-Math_fround(Math_fround(Math_fround(Math_fround($22 * $25) + Math_fround(0.0)) + Math_fround($23 * $26)) + Math_fround($24 * $27))) / Math_fround(Math_fround(Math_fround(Math_fround($25 * $25) + Math_fround(0.0)) + Math_fround($26 * $26)) + Math_fround($27 * $27)));
$42 = Math_fround(Math_fround(1.0) - $41);
$45 = Math_fround(Math_fround($9 * $41) + Math_fround($17 * $42));
$48 = Math_fround(Math_fround($12 * $41) + Math_fround($19 * $42));
$49 = (HEAPF32[tempDoublePtr >> 2] = $48, HEAP32[tempDoublePtr >> 2] | 0);
$52 = Math_fround(Math_fround($15 * $41) + Math_fround($21 * $42));
$53 = (HEAPF32[tempDoublePtr >> 2] = $52, HEAP32[tempDoublePtr >> 2] | 0);
do if (!0) {
$71 = $4;
$73 = $6;
$75 = $8;
} else {
$56 = (HEAPF32[tempDoublePtr >> 2] = $45, HEAP32[tempDoublePtr >> 2] | 0) & 2147483647;
if ($56 >>> 0 <= 2139095040) {
$58 = $49 & 2147483647;
if ($58 >>> 0 <= 2139095040) {
$60 = $53 & 2147483647;
if (!(($56 | 0) == 2139095040 | $60 >>> 0 > 2139095040)) if (!(($58 | 0) == 2139095040 | ($60 | 0) == 2139095040)) {
$71 = $4;
$73 = $6;
$75 = $8;
break;
}
}
}
__Z7eprintfPKcz(11903, $vararg_buffer);
$65 = HEAP32[16082] | 0;
if ($65 | 0) {
HEAP32[$vararg_buffer1 >> 2] = 4;
HEAPF64[$vararg_buffer1 + 8 >> 3] = +$45;
HEAP32[$vararg_buffer1 + 16 >> 2] = 4;
HEAPF64[$vararg_buffer1 + 24 >> 3] = +$48;
HEAP32[$vararg_buffer1 + 32 >> 2] = 4;
HEAPF64[$vararg_buffer1 + 40 >> 3] = +$52;
_fprintf($65, 11888, $vararg_buffer1) | 0;
}
__Z5eputcc(10);
$$pre = Math_fround(HEAPF32[$2 >> 2]);
$$pre71 = Math_fround(HEAPF32[$5 >> 2]);
$71 = $$pre;
$73 = $$pre71;
$75 = Math_fround(HEAPF32[$7 >> 2]);
} while (0);
$89 = Math_fround(Math_fround(-Math_fround(Math_fround(Math_fround(Math_fround($10 * $22) + Math_fround(0.0)) + Math_fround($13 * $23)) + Math_fround($16 * $24))) / Math_fround(Math_fround(Math_fround(Math_fround($22 * Math_fround($45 - $71)) + Math_fround(0.0)) + Math_fround($23 * Math_fround($48 - $73))) + Math_fround($24 * Math_fround($52 - $75))));
$90 = Math_fround(Math_fround(1.0) - $89);
$93 = Math_fround(Math_fround($45 * $89) + Math_fround($71 * $90));
HEAPF32[$0 >> 2] = $93;
$97 = Math_fround(Math_fround($48 * $89) + Math_fround(Math_fround(HEAPF32[$5 >> 2]) * $90));
HEAPF32[$0 + 4 >> 2] = $97;
$102 = Math_fround(Math_fround($52 * $89) + Math_fround(Math_fround(HEAPF32[$7 >> 2]) * $90));
HEAPF32[$0 + 8 >> 2] = $102;
__ZNK6Vector16checkValidVectorEv($0);
__ZNK6Vector16checkValidVectorEv($0);
STACKTOP = sp;
return;
}
function __ZN11HanimAvatar14createSitePairE6SiteIDff($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = Math_fround($3);
var $$0 = 0, $$028 = 0, $10 = 0, $11 = 0, $15 = 0, $16 = 0, $18 = f0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = f0, $24 = 0, $25 = f0, $27 = f0, $28 = 0, $29 = f0, $30 = 0, $31 = 0, $32 = 0, $34 = f0, $36 = f0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $44 = f0, $46 = 0, $48 = 0, $5 = 0, $52 = 0, $54 = f0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpcast30$byval_copy = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$tmpcast30$byval_copy = sp + 32 | 0;
$4 = sp + 24 | 0;
$5 = sp + 20 | 0;
$6 = sp + 28 | 0;
$7 = sp + 4 | 0;
$8 = sp + 16 | 0;
$9 = sp;
HEAP32[$4 >> 2] = 0;
HEAP32[$5 >> 2] = 0;
$10 = HEAP32[$1 >> 2] | 0;
HEAP32[$6 >> 2] = $10;
HEAP8[$tmpcast30$byval_copy >> 0] = HEAP8[$6 >> 0] | 0;
HEAP8[$tmpcast30$byval_copy + 1 >> 0] = HEAP8[$6 + 1 >> 0] | 0;
HEAP8[$tmpcast30$byval_copy + 2 >> 0] = HEAP8[$6 + 2 >> 0] | 0;
HEAP8[$tmpcast30$byval_copy + 3 >> 0] = HEAP8[$6 + 3 >> 0] | 0;
__ZNK11HanimAvatar12locateSiteIDEb6SiteIDP6VectorRP5JointRP4Site($0, 1, $tmpcast30$byval_copy, 0, $5, $4);
$11 = HEAP32[$4 >> 2] | 0;
if (!$11) {
STACKTOP = sp;
return;
}
__ZN6VectorC2ERKS_($7, $11 + 40 | 0);
$15 = HEAP16[36079] | 0;
$16 = $7 + ($15 << 2) | 0;
$18 = Math_fround(Math_fround(HEAPF32[$16 >> 2]) + $2);
HEAPF32[$16 >> 2] = $18;
HEAP32[$8 >> 2] = $10;
$19 = $10 & 16773375;
$20 = $19 | 512;
HEAP16[$8 >> 1] = $20;
HEAP8[$8 + 2 >> 0] = $20 >>> 16;
$21 = HEAP32[$5 >> 2] | 0;
$22 = $11 + 20 | 0;
$23 = Math_fround(HEAPF32[$22 >> 2]);
HEAP8[$tmpcast30$byval_copy >> 0] = HEAP8[$8 >> 0] | 0;
HEAP8[$tmpcast30$byval_copy + 1 >> 0] = HEAP8[$8 + 1 >> 0] | 0;
HEAP8[$tmpcast30$byval_copy + 2 >> 0] = HEAP8[$8 + 2 >> 0] | 0;
HEAP8[$tmpcast30$byval_copy + 3 >> 0] = HEAP8[$8 + 3 >> 0] | 0;
$24 = __ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast30$byval_copy, $21, $7, $23) | 0;
$25 = Math_fround($2 + $2);
$27 = Math_fround(Math_fround(HEAPF32[$16 >> 2]) - $25);
HEAPF32[$16 >> 2] = $27;
HEAP32[$9 >> 2] = $10;
$28 = $19 | 256;
HEAP16[$9 >> 1] = $28;
HEAP8[$9 + 2 >> 0] = $28 >>> 16;
$29 = Math_fround(HEAPF32[$22 >> 2]);
HEAP8[$tmpcast30$byval_copy >> 0] = HEAP8[$9 >> 0] | 0;
HEAP8[$tmpcast30$byval_copy + 1 >> 0] = HEAP8[$9 + 1 >> 0] | 0;
HEAP8[$tmpcast30$byval_copy + 2 >> 0] = HEAP8[$9 + 2 >> 0] | 0;
HEAP8[$tmpcast30$byval_copy + 3 >> 0] = HEAP8[$9 + 3 >> 0] | 0;
$30 = __ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast30$byval_copy, $21, $7, $29) | 0;
$31 = $11 + 24 | 0;
$32 = HEAP32[$31 >> 2] | 0;
do if ($32 | 0) {
$34 = Math_fround(__ZNK6Vector6lengthEv($32));
$36 = Math_fround($34 * Math_fround(+Math_tan(+$3)));
$37 = __Znwj(12) | 0;
__THREW__ = 0;
invoke_vii(139, $37 | 0, HEAP32[$31 >> 2] | 0);
$39 = __THREW__;
__THREW__ = 0;
if ($39 & 1) {
$56 = ___cxa_find_matching_catch_2() | 0;
$57 = tempRet0;
__ZdlPv($37);
$$0 = $57;
$$028 = $56;
___resumeException($$028 | 0);
}
$41 = $24 + 24 | 0;
HEAP32[$41 >> 2] = $37;
$42 = $37 + ($15 << 2) | 0;
$44 = Math_fround($36 + Math_fround(HEAPF32[$42 >> 2]));
HEAPF32[$42 >> 2] = $44;
__ZN6Vector9setLengthEf(HEAP32[$41 >> 2] | 0, $34) | 0;
$46 = __Znwj(12) | 0;
__THREW__ = 0;
invoke_vii(139, $46 | 0, HEAP32[$31 >> 2] | 0);
$48 = __THREW__;
__THREW__ = 0;
if (!($48 & 1)) {
HEAP32[$30 + 24 >> 2] = $46;
$52 = (HEAP32[$41 >> 2] | 0) + ($15 << 2) | 0;
$54 = Math_fround(Math_fround(HEAPF32[$52 >> 2]) - $36);
HEAPF32[$52 >> 2] = $54;
__ZN6Vector9setLengthEf(HEAP32[$41 >> 2] | 0, $34) | 0;
break;
}
$58 = ___cxa_find_matching_catch_2() | 0;
$59 = tempRet0;
__ZdlPv($46);
$$0 = $59;
$$028 = $58;
___resumeException($$028 | 0);
} while (0);
STACKTOP = sp;
return;
}
function __ZN13FingerBending16SetFingerBendingEPKcP7HashAnyIS1_S_E($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$011$i$i = 0, $$01113$i$i = 0, $$01114$i$i = 0, $$sink = f0, $11 = 0, $12 = 0, $20 = 0, $23 = 0, $26 = 0, $29 = 0, $3 = 0, $32 = 0, $37 = f0, $39 = f0, $4 = 0, $41 = f0, $43 = f0, $45 = f0, $47 = f0, $49 = f0, $5 = 0, $51 = 0, $55 = f0, $6 = 0, $60 = f0, $65 = f0, $vararg_buffer = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$vararg_buffer4 = sp + 56 | 0;
$vararg_buffer = sp + 40 | 0;
$3 = sp + 24 | 0;
$4 = sp + 16 | 0;
$5 = sp + 8 | 0;
$6 = sp;
if (!$1) {
STACKTOP = sp;
return;
}
if ($2 | 0) {
$11 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($1, HEAP32[$2 + 4 >> 2] | 0) | 0;
$12 = HEAP32[$2 >> 2] | 0;
L6 : do if ((HEAP16[$12 + ($11 << 3) + 4 >> 1] | 0) > 0) {
$$01113$i$i = HEAP32[$12 + ($11 << 3) >> 2] | 0;
if (!$$01113$i$i) label = 8; else {
$$01114$i$i = $$01113$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($1, HEAP32[$$01114$i$i >> 2] | 0) | 0) break;
$$011$i$i = HEAP32[$$01114$i$i + 20 >> 2] | 0;
if (!$$011$i$i) {
label = 8;
break L6;
} else $$01114$i$i = $$011$i$i;
}
$20 = $$01114$i$i + 4 | 0;
HEAP32[$3 >> 2] = HEAP32[$20 >> 2];
HEAP32[$3 + 4 >> 2] = HEAP32[$20 + 4 >> 2];
HEAP32[$3 + 8 >> 2] = HEAP32[$20 + 8 >> 2];
HEAP32[$3 + 12 >> 2] = HEAP32[$20 + 12 >> 2];
}
} else label = 8; while (0);
if ((label | 0) == 8) {
$23 = $2 + 20 | 0;
HEAP32[$3 >> 2] = HEAP32[$23 >> 2];
HEAP32[$3 + 4 >> 2] = HEAP32[$23 + 4 >> 2];
HEAP32[$3 + 8 >> 2] = HEAP32[$23 + 8 >> 2];
HEAP32[$3 + 12 >> 2] = HEAP32[$23 + 12 >> 2];
};
HEAP32[$0 >> 2] = HEAP32[$3 >> 2];
HEAP32[$0 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
HEAP32[$0 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
}
if (Math_fround(HEAPF32[$0 >> 2]) != Math_fround(-100.0)) {
STACKTOP = sp;
return;
}
$26 = $0 + 4 | 0;
if (Math_fround(HEAPF32[$26 >> 2]) != Math_fround(-100.0)) {
STACKTOP = sp;
return;
}
$29 = $0 + 8 | 0;
if (Math_fround(HEAPF32[$29 >> 2]) != Math_fround(-100.0)) {
STACKTOP = sp;
return;
}
$32 = $0 + 12 | 0;
if (Math_fround(HEAPF32[$32 >> 2]) != Math_fround(-100.0)) {
STACKTOP = sp;
return;
}
HEAP32[$vararg_buffer >> 2] = $3;
HEAP32[$vararg_buffer + 4 >> 2] = $4;
HEAP32[$vararg_buffer + 8 >> 2] = $5;
HEAP32[$vararg_buffer + 12 >> 2] = $6;
switch (_sscanf($1, 50382, $vararg_buffer) | 0) {
case 3:
{
$37 = Math_fround(+HEAPF64[$3 >> 3]);
HEAPF32[$0 >> 2] = $37;
$39 = Math_fround(+HEAPF64[$4 >> 3]);
HEAPF32[$26 >> 2] = $39;
$41 = Math_fround(+HEAPF64[$5 >> 3]);
HEAPF32[$29 >> 2] = $41;
break;
}
case 4:
{
$43 = Math_fround(+HEAPF64[$3 >> 3]);
HEAPF32[$0 >> 2] = $43;
$45 = Math_fround(+HEAPF64[$4 >> 3]);
HEAPF32[$26 >> 2] = $45;
$47 = Math_fround(+HEAPF64[$5 >> 3]);
HEAPF32[$29 >> 2] = $47;
$49 = Math_fround(+HEAPF64[$6 >> 3]);
HEAPF32[$32 >> 2] = $49;
break;
}
default:
{
$51 = (_strlen($1) | 0) << 16 >> 16;
if (($51 + -3 | 0) >>> 0 < 2) {
$55 = Math_fround((HEAP8[$1 >> 0] | 0) + -48 | 0);
HEAPF32[$0 >> 2] = $55;
$60 = Math_fround((HEAP8[$1 + 1 >> 0] | 0) + -48 | 0);
HEAPF32[$26 >> 2] = $60;
$65 = Math_fround((HEAP8[$1 + 2 >> 0] | 0) + -48 | 0);
HEAPF32[$29 >> 2] = $65;
if (($51 | 0) == 4) $$sink = Math_fround((HEAP8[$1 + 3 >> 0] | 0) + -48 | 0); else $$sink = Math_fround(-100.0);
} else {
HEAP32[$vararg_buffer4 >> 2] = $1;
__Z7eprintfPKcz(50398, $vararg_buffer4);
HEAPF32[$0 >> 2] = Math_fround(0.0);
HEAPF32[$26 >> 2] = Math_fround(0.0);
HEAPF32[$29 >> 2] = Math_fround(0.0);
$$sink = Math_fround(0.0);
}
HEAPF32[$32 >> 2] = $$sink;
}
}
STACKTOP = sp;
return;
}
function __Z17GetTrajectoryInfoP7XMLCell($0) {
$0 = $0 | 0;
var $$012$i$i = 0, $$01215$i$i = 0, $$01216$i$i = 0, $$060 = 0, $$sink$i$i = 0, $1 = 0, $11 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = f0, $22 = 0, $23 = 0, $3 = 0, $35 = 0, $36 = f0, $39 = f0, $42 = f0, $45 = f0, $49 = f0, $52 = f0, $57 = 0, $58 = 0, $6 = 0, $63 = 0.0, $66 = 0.0, $69 = 0.0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$1 = __ZN7XMLCell7elementEPKc($0, 25240) | 0;
$2 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($1, 25253, Math_fround(.995000004)));
HEAPF32[477] = $2;
$3 = __ZN7XMLCell12attrib_int32EPKci($1, 25262, 1e3) | 0;
HEAP32[476] = $3;
if (!$1) {
STACKTOP = sp;
return;
}
$6 = HEAP32[$1 + 8 >> 2] | 0;
if (!$6) {
STACKTOP = sp;
return;
}
$9 = HEAP32[$6 + 12 >> 2] | 0;
if (($9 | 0) <= 0) {
STACKTOP = sp;
return;
}
$11 = $6 + 12 | 0;
$$060 = 0;
do {
if ((HEAP32[$11 >> 2] | 0) > ($$060 | 0)) $19 = HEAP32[(HEAP32[$6 >> 2] | 0) + ($$060 << 2) >> 2] | 0; else $19 = 0;
$17 = HEAP32[16635] | 0;
$18 = HEAP32[$19 >> 2] | 0;
$22 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($18, HEAP32[$17 + 4 >> 2] | 0) | 0;
$23 = HEAP32[$17 >> 2] | 0;
L15 : do if ((HEAP16[$23 + ($22 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i = HEAP32[$23 + ($22 << 3) >> 2] | 0;
if (!$$01215$i$i) label = 13; else {
$$01216$i$i = $$01215$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($18, HEAP32[$$01216$i$i >> 2] | 0) | 0) break;
$$012$i$i = HEAP32[$$01216$i$i + 8 >> 2] | 0;
if (!$$012$i$i) {
label = 13;
break L15;
} else $$01216$i$i = $$012$i$i;
}
$$sink$i$i = $$01216$i$i + 4 | 0;
}
} else label = 13; while (0);
if ((label | 0) == 13) {
label = 0;
$$sink$i$i = $17 + 20 | 0;
}
$35 = HEAP32[$$sink$i$i >> 2] | 0;
if (!$35) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer >> 2] = HEAP32[$19 >> 2];
__Z7eprintfPKcz(25322, $vararg_buffer);
} else {
$36 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($19, 25271, Math_fround(0.0)));
HEAPF32[(HEAP32[16636] | 0) + ($35 * 28 | 0) >> 2] = $36;
$39 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($19, 25284, Math_fround(0.0)));
HEAPF32[(HEAP32[16636] | 0) + ($35 * 28 | 0) + 4 >> 2] = $39;
$42 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($19, 25296, Math_fround(0.0)));
HEAPF32[(HEAP32[16636] | 0) + ($35 * 28 | 0) + 8 >> 2] = $42;
$45 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($19, 25304, Math_fround(0.0)));
HEAPF32[(HEAP32[16636] | 0) + ($35 * 28 | 0) + 12 >> 2] = $45;
$49 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($19, 25253, Math_fround(HEAPF32[477])));
HEAPF32[(HEAP32[16636] | 0) + ($35 * 28 | 0) + 20 >> 2] = $49;
$52 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($19, 25314, Math_fround(0.0)));
HEAPF32[(HEAP32[16636] | 0) + ($35 * 28 | 0) + 24 >> 2] = $52;
}
if (0) {
HEAP32[$vararg_buffer1 >> 2] = $35;
__Z7eprintfPKcz(25394, $vararg_buffer1);
$57 = HEAP32[16636] | 0;
$58 = HEAP32[16082] | 0;
if ($58 | 0) {
_fwrite(25077, 8, 1, $58) | 0;
_fwrite(25086, 3, 1, $58) | 0;
__ZNK16ControllerParams5printEP8_IO_FILE($57 + ($35 * 28 | 0) | 0, $58);
$63 = +Math_fround(HEAPF32[$57 + ($35 * 28 | 0) + 16 >> 2]);
$66 = +Math_fround(HEAPF32[$57 + ($35 * 28 | 0) + 20 >> 2]);
$69 = +Math_fround(HEAPF32[$57 + ($35 * 28 | 0) + 24 >> 2]);
HEAPF64[$vararg_buffer4 >> 3] = $63;
HEAPF64[$vararg_buffer4 + 8 >> 3] = $66;
HEAPF64[$vararg_buffer4 + 16 >> 3] = $69;
_fprintf($58, 25090, $vararg_buffer4) | 0;
}
__Z5eputcc(10);
}
$$060 = $$060 + 1 | 0;
} while (($$060 | 0) != ($9 | 0));
STACKTOP = sp;
return;
}
function __ZN7XMLCell5clearEv($0) {
$0 = $0 | 0;
var $$01013$i = 0, $$011$i = 0, $$012 = 0, $$012$i = 0, $$013 = 0, $$01819$i = 0, $$01820$i = 0, $$021 = 0, $$021$i = 0, $$lcssa1829 = 0, $$lcssa30 = 0, $$pr16 = 0, $$pre25 = 0, $$pre26 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $19 = 0, $24 = 0, $25 = 0, $3 = 0, $30 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $64 = 0, $66 = 0, $67 = 0, $69 = 0, $7 = 0, $70 = 0, $9 = 0, label = 0;
$1 = HEAP32[$0 >> 2] | 0;
if ($1 | 0) {
_free($1);
HEAP32[$0 >> 2] = 0;
}
$3 = $0 + 4 | 0;
$4 = HEAP32[$3 >> 2] | 0;
do if ($4 | 0) {
$6 = $4 + 4 | 0;
$7 = HEAP32[$6 >> 2] | 0;
if (($7 | 0) > 0) {
$9 = $4 + 20 | 0;
$$021$i = 0;
$69 = $7;
while (1) {
$$01819$i = HEAP32[(HEAP32[$4 >> 2] | 0) + ($$021$i << 3) >> 2] | 0;
if (!$$01819$i) $24 = $69; else {
$$01820$i = $$01819$i;
do {
$13 = $$01820$i + 4 | 0;
$14 = HEAP32[$13 >> 2] | 0;
$15 = HEAP32[$9 >> 2] | 0;
if (($14 | 0) != ($15 | 0)) {
if (!$14) $19 = $15; else {
_free($14);
$19 = HEAP32[$9 >> 2] | 0;
}
HEAP32[$13 >> 2] = $19;
}
$$01820$i = HEAP32[$$01820$i + 8 >> 2] | 0;
} while (($$01820$i | 0) != 0);
$24 = HEAP32[$6 >> 2] | 0;
}
$$021$i = $$021$i + 1 | 0;
if (($$021$i | 0) >= ($24 | 0)) break; else $69 = $24;
}
$$pre25 = HEAP32[$3 >> 2] | 0;
$$pre26 = HEAP32[$$pre25 + 4 >> 2] | 0;
$25 = $$pre25 + 4 | 0;
if (($$pre26 | 0) > 0) {
$$01013$i = 0;
$70 = $$pre26;
while (1) {
$$011$i = HEAP32[(HEAP32[$$pre25 >> 2] | 0) + ($$01013$i << 3) >> 2] | 0;
if (!$$011$i) $36 = $70; else {
$$012$i = $$011$i;
do {
$30 = HEAP32[$$012$i >> 2] | 0;
if ($30 | 0) _free($30);
$$012$i = HEAP32[$$012$i + 8 >> 2] | 0;
} while (($$012$i | 0) != 0);
$36 = HEAP32[$25 >> 2] | 0;
}
$$01013$i = $$01013$i + 1 | 0;
if (($$01013$i | 0) >= ($36 | 0)) break; else $70 = $36;
}
$38 = HEAP32[$3 >> 2] | 0;
} else $38 = $$pre25;
if (!$38) break; else $39 = $38;
} else $39 = $4;
__THREW__ = 0;
invoke_vi(112, $39 | 0);
$40 = __THREW__;
__THREW__ = 0;
if (!($40 & 1)) {
__ZdlPv($39);
HEAP32[$3 >> 2] = 0;
break;
}
$42 = ___cxa_find_matching_catch_2() | 0;
$43 = tempRet0;
__ZdlPv($39);
$$012 = $43;
$$013 = $42;
___resumeException($$013 | 0);
} while (0);
$44 = $0 + 8 | 0;
$45 = HEAP32[$44 >> 2] | 0;
L42 : do if ($45 | 0) {
$47 = $45 + 12 | 0;
do if ((HEAP32[$47 >> 2] | 0) > 0) {
$$021 = 0;
$52 = $45;
while (1) {
$54 = HEAP32[(HEAP32[$52 >> 2] | 0) + ($$021 << 2) >> 2] | 0;
if (!$54) $$pr16 = $52; else {
__THREW__ = 0;
invoke_vi(151, $54 | 0);
$56 = __THREW__;
__THREW__ = 0;
if ($56 & 1) break;
__ZdlPv($54);
$$pr16 = HEAP32[$44 >> 2] | 0;
}
$$021 = $$021 + 1 | 0;
$61 = $$pr16 + 12 | 0;
if (($$021 | 0) >= (HEAP32[$61 >> 2] | 0)) {
label = 29;
break;
} else $52 = $$pr16;
}
if ((label | 0) == 29) if (!$$pr16) break L42; else {
$$lcssa1829 = $$pr16;
$$lcssa30 = $61;
break;
}
$58 = ___cxa_find_matching_catch_2() | 0;
$59 = tempRet0;
__ZdlPv($54);
$$012 = $59;
$$013 = $58;
___resumeException($$013 | 0);
} else {
$$lcssa1829 = $45;
$$lcssa30 = $47;
} while (0);
$64 = HEAP32[$$lcssa1829 >> 2] | 0;
if ($64 | 0) {
_free($64);
HEAP32[$$lcssa1829 >> 2] = 0;
}
HEAP32[$$lcssa30 >> 2] = 0;
__ZdlPv($$lcssa1829);
HEAP32[$44 >> 2] = 0;
} while (0);
$66 = $0 + 12 | 0;
$67 = HEAP32[$66 >> 2] | 0;
if (!$67) return;
__ZdlPv($67);
HEAP32[$66 >> 2] = 0;
return;
}
function __ZN11HanimAvatar12SetFacePointEPKcs($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$012$i$i$i = 0, $$01215$i$i$i = 0, $$01216$i$i$i = 0, $$pre$phi$iZ2D = 0, $$sink$i$i$i = 0, $19 = 0, $20 = 0, $24 = 0, $31 = 0, $35 = 0, $41 = 0, $43 = 0, $47 = 0, $48 = 0, $49 = 0, $55 = 0, $6 = 0, $60 = 0, $65 = 0, $66 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$vararg_buffer5 = sp + 32 | 0;
$vararg_buffer3 = sp + 24 | 0;
$vararg_buffer1 = sp + 16 | 0;
$vararg_buffer = sp;
if ($1 | 0) {
$6 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($1, HEAP32[$0 + 148 >> 2] | 0) | 0;
$8 = HEAP32[$0 + 144 >> 2] | 0;
L3 : do if ((HEAP16[$8 + ($6 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i = HEAP32[$8 + ($6 << 3) >> 2] | 0;
if (!$$01215$i$i$i) label = 7; else {
$$01216$i$i$i = $$01215$i$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($1, HEAP32[$$01216$i$i$i >> 2] | 0) | 0) break;
$$012$i$i$i = HEAP32[$$01216$i$i$i + 8 >> 2] | 0;
if (!$$012$i$i$i) {
label = 7;
break L3;
} else $$01216$i$i$i = $$012$i$i$i;
}
$$pre$phi$iZ2D = $0 + 164 | 0;
$$sink$i$i$i = $$01216$i$i$i + 4 | 0;
}
} else label = 7; while (0);
if ((label | 0) == 7) {
$19 = $0 + 164 | 0;
$$pre$phi$iZ2D = $19;
$$sink$i$i$i = $19;
}
$20 = HEAP32[$$sink$i$i$i >> 2] | 0;
if (($20 | 0) != (HEAP32[$$pre$phi$iZ2D >> 2] | 0)) {
$24 = HEAP32[$0 + 108 >> 2] | 0;
if (($20 | 0) >= 0) if ((HEAP32[$24 + 12 >> 2] | 0) > ($20 | 0)) {
$31 = HEAP32[(HEAP32[$24 >> 2] | 0) + ($20 << 2) >> 2] | 0;
if ($31 | 0) {
if (HEAP8[72207] | 0) {
$35 = $31 + 28 | 0;
if (Math_fround(Math_fround(__ZNK6Vector6lengthEv($35)) * Math_fround(23.6220474)) < Math_fround(.5)) {
HEAP32[$vararg_buffer >> 2] = HEAP32[$31 >> 2];
__Z7eprintfPKcz(21959, $vararg_buffer);
__ZNK6Vector5printEP8_IO_FILEi($35, HEAP32[16082] | 0, 3);
__ZN6VectorC2ERKS_($vararg_buffer, $35);
__ZN6Vector8setScaleEf($vararg_buffer, Math_fround(23.6220474));
__ZN4Site16setLocalPositionERK6Vector($31, $vararg_buffer);
$41 = $31 + 40 | 0;
HEAP32[$vararg_buffer >> 2] = HEAP32[$41 >> 2];
HEAP32[$vararg_buffer + 4 >> 2] = HEAP32[$41 + 4 >> 2];
HEAP32[$vararg_buffer + 8 >> 2] = HEAP32[$41 + 8 >> 2];
__ZN6Vector6setAddERKS_($vararg_buffer, 66188);
__ZN4Site17setGlobalPositionERK6Vector($31, $vararg_buffer);
$43 = HEAP32[$31 + 24 >> 2] | 0;
if ($43 | 0) __ZN6Vector8setScaleEf($43, Math_fround(23.6220474));
__Z7eprintfPKcz(21991, $vararg_buffer1);
__ZNK6Vector5printEP8_IO_FILEi($35, HEAP32[16082] | 0, 3);
__Z7eprintfPKcz(49554, $vararg_buffer3);
}
}
$47 = HEAP32[$0 + 488 >> 2] | 0;
$48 = $2 << 16 >> 16;
$49 = $31 + 40 | 0;
if ($2 << 16 >> 16 < 0) {
STACKTOP = sp;
return;
}
if ((HEAP32[$47 + 8 >> 2] | 0) <= ($48 | 0)) {
$55 = HEAP32[$47 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($47, ($55 | 0) > ($48 | 0) ? $55 : $48 + 1 + ($48 >>> 1) | 0);
}
$60 = $47 + 12 | 0;
if ((HEAP32[$60 >> 2] | 0) <= ($48 | 0)) HEAP32[$60 >> 2] = $48 + 1;
$65 = (HEAP32[$47 >> 2] | 0) + ($48 * 12 | 0) | 0;
HEAP32[$65 >> 2] = HEAP32[$49 >> 2];
HEAP32[$65 + 4 >> 2] = HEAP32[$49 + 4 >> 2];
HEAP32[$65 + 8 >> 2] = HEAP32[$49 + 8 >> 2];
STACKTOP = sp;
return;
}
}
}
}
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer5 >> 2] = $1;
__Z7eprintfPKcz(22007, $vararg_buffer5);
$66 = ___cxa_allocate_exception(4) | 0;
HEAP32[$66 >> 2] = 15;
___cxa_throw($66 | 0, 232, 0);
}
function __ZN20QuaternionController11microUpdateEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $$015$i = f0, $$016$i = f0, $12 = f0, $14 = f0, $15 = f0, $17 = f0, $18 = 0, $19 = f0, $2 = 0, $20 = 0, $21 = f0, $3 = 0, $30 = f0, $31 = 0, $32 = f0, $34 = f0, $36 = f0, $37 = f0, $39 = f0, $4 = 0, $41 = 0, $47 = 0, $49 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = f0, $61 = f0, $62 = f0, $88 = f0, $89 = f0, $phitmp$i = f0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
$3 = $0 + 548 | 0;
__ZN10Quaternion9normaliseEv($3);
$4 = $0 + 532 | 0;
__ZN10Quaternion9normaliseEv($4);
$5 = $0 + 564 | 0;
__ZL13computeError1R10QuaternionRKS_S2_($5, $4, $3);
if ((HEAP32[$0 + 448 >> 2] | 0) == 3) {
$12 = Math_fround(HEAPF32[$0 + 452 >> 2]);
$14 = Math_fround(HEAPF32[$0 + 460 >> 2]);
$15 = Math_fround(__ZNK10Quaternion6lengthEv($5));
$17 = Math_fround(HEAPF32[$0 + 8 >> 2]);
$18 = $15 < Math_fround(0.0);
$19 = Math_fround(-$15);
$$015$i = $18 ? $19 : $15;
$20 = $17 < Math_fround(0.0);
$21 = Math_fround(-$17);
$$016$i = $20 ? $21 : $17;
$phitmp$i = Math_fround(Math_fround($$015$i / $$016$i) * Math_fround(3.14159274));
$30 = Math_fround(Math_fround(Math_fround(Math_fround($14 + Math_fround(-1.0)) * Math_fround(.5)) * Math_fround(Math_fround(+Math_cos(+($$015$i > $$016$i ? Math_fround(3.14159274) : $phitmp$i))) + Math_fround(1.0))) + Math_fround(1.0));
$31 = $30 < Math_fround(1.0);
$32 = Math_fround($12 * ($31 ? Math_fround(1.0) : $30));
$34 = Math_fround(HEAPF32[$0 + 456 >> 2]);
HEAPF32[$0 + 472 >> 2] = $32;
$36 = Math_fround(Math_fround($32 - $34) * Math_fround(.25));
HEAPF32[$0 + 468 >> 2] = $36;
}
$37 = Math_fround(__ZNK10Quaternion6lengthEv($5));
$39 = Math_fround(HEAPF32[$0 + 464 >> 2]);
if ($39 > Math_fround(0.0)) {
$41 = $0 + 624 | 0;
if ($37 > Math_fround(-$39) & ($37 < $39 & (HEAP8[$41 >> 0] | 0) == 0)) {
$47 = $0 + 580 | 0;
HEAP32[$3 >> 2] = HEAP32[$47 >> 2];
HEAP32[$3 + 4 >> 2] = HEAP32[$47 + 4 >> 2];
HEAP32[$3 + 8 >> 2] = HEAP32[$47 + 8 >> 2];
HEAP32[$3 + 12 >> 2] = HEAP32[$47 + 12 >> 2];
__ZL13computeError1R10QuaternionRKS_S2_($5, $4, $3);
__ZN10Quaternion10setZeroVecEv($0 + 484 | 0);
HEAP8[$41 >> 0] = 1;
}
}
$49 = $0 + 500 | 0;
__ZN10Quaternion8setScaleERKS_f($49, $5, Math_fround(HEAPF32[$0 + 468 >> 2]));
$52 = $0 + 516 | 0;
$53 = $0 + 484 | 0;
__ZN10Quaternion11setSubtractERKS_S1_($52, $49, $53);
$54 = $0 + 596 | 0;
$56 = Math_fround(HEAPF32[$0 + 472 >> 2]);
__ZN10Quaternion8setScaleERKS_f($54, $52, Math_fround($56 / Math_fround(HEAPF32[$0 + 476 >> 2])));
$61 = Math_fround(HEAPF32[$0 + 612 >> 2]);
$62 = Math_fround(__ZNK10Quaternion8lengthsqEv($54));
if ($62 > Math_fround($61 * $61)) __ZN10Quaternion8setScaleEf($54, Math_fround($61 / Math_fround(Math_sqrt(Math_fround($62)))));
HEAP32[$2 >> 2] = HEAP32[$53 >> 2];
HEAP32[$2 + 4 >> 2] = HEAP32[$0 + 488 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$0 + 492 >> 2];
HEAP32[$2 + 12 >> 2] = HEAP32[$0 + 496 >> 2];
__ZN10Quaternion8setScaleEf($2, $1);
__ZN10Quaternion6setAddERKS_($4, $2);
__ZN10Quaternion9normaliseEv($4);
__ZN10Quaternion19setNonNegativePhaseEv($4);
HEAP32[$2 >> 2] = HEAP32[$54 >> 2];
HEAP32[$2 + 4 >> 2] = HEAP32[$0 + 600 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$0 + 604 >> 2];
HEAP32[$2 + 12 >> 2] = HEAP32[$0 + 608 >> 2];
__ZN10Quaternion8setScaleEf($2, $1);
__ZN10Quaternion6setAddERKS_($53, $2);
$88 = Math_fround(HEAPF32[$0 + 616 >> 2]);
$89 = Math_fround(__ZNK10Quaternion8lengthsqEv($53));
if (!($89 > Math_fround($88 * $88))) {
STACKTOP = sp;
return;
}
__ZN10Quaternion8setScaleEf($53, Math_fround($88 / Math_fround(Math_sqrt(Math_fround($89)))));
STACKTOP = sp;
return;
}
function __ZNK13BasicMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $12 = 0, $21 = 0, $26 = 0, $3 = 0, $35 = 0, $40 = 0, $49 = 0, $54 = 0, $63 = 0, $68 = 0, $77 = 0, label = 0;
$3 = $0 + 12 | 0;
if (!(HEAP32[$3 >> 2] | 0)) if (!(HEAP32[$0 + 16 >> 2] | 0)) {
if (HEAP8[$0 + 20 >> 0] | 0) label = 4;
} else label = 4; else label = 4;
if ((label | 0) == 4) __ZNK11MannerFlags17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($3, $1, $2);
$12 = $0 + 28 | 0;
if (HEAP8[$12 >> 0] | 0) {
if (!$2) __Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, (HEAP16[36078] | 0) + 1 | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2 ? 34912 : 34924, $2 ? 11 : 10) | 0;
$21 = (HEAP8[$12 >> 0] | 0) != 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $21 ? 52414 : 52419, $21 ? 4 : 5) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2 ? 34935 : 34937, $2 ? 1 : 2) | 0;
}
$26 = $0 + 29 | 0;
if (HEAP8[$26 >> 0] | 0) {
if (!$2) __Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, (HEAP16[36078] | 0) + 1 | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2 ? 34940 : 34949, $2 ? 8 : 7) | 0;
$35 = (HEAP8[$26 >> 0] | 0) != 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $35 ? 52414 : 52419, $35 ? 4 : 5) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2 ? 34935 : 34937, $2 ? 1 : 2) | 0;
}
$40 = $0 + 30 | 0;
if (HEAP8[$40 >> 0] | 0) {
if (!$2) __Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, (HEAP16[36078] | 0) + 1 | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2 ? 34957 : 34972, $2 ? 14 : 13) | 0;
$49 = (HEAP8[$40 >> 0] | 0) != 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $49 ? 52414 : 52419, $49 ? 4 : 5) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2 ? 34935 : 34937, $2 ? 1 : 2) | 0;
}
$54 = $0 + 31 | 0;
if (HEAP8[$54 >> 0] | 0) {
if (!$2) __Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, (HEAP16[36078] | 0) + 1 | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2 ? 34986 : 35008, $2 ? 21 : 20) | 0;
$63 = (HEAP8[$54 >> 0] | 0) != 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $63 ? 52414 : 52419, $63 ? 4 : 5) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2 ? 34935 : 34937, $2 ? 1 : 2) | 0;
}
$68 = $0 + 32 | 0;
if (!(HEAP8[$68 >> 0] | 0)) return;
if (!$2) __Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, (HEAP16[36078] | 0) + 1 | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2 ? 35029 : 35043, $2 ? 13 : 12) | 0;
$77 = (HEAP8[$68 >> 0] | 0) != 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $77 ? 52414 : 52419, $77 ? 4 : 5) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2 ? 34935 : 34937, $2 ? 1 : 2) | 0;
return;
}
function _normal_cdataSectionTok($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$1$ph = 0, $$186 = 0, $$sink = 0, $10 = 0, $14 = 0, $19 = 0, $5 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $83 = 0, label = 0;
if (($1 | 0) == ($2 | 0)) {
$$0 = -4;
return $$0 | 0;
}
$5 = $0 + 72 | 0;
L4 : do switch (HEAP8[$5 + (HEAPU8[$1 >> 0] | 0) >> 0] | 0) {
case 4:
{
$10 = $1 + 1 | 0;
if (($10 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
if ((HEAP8[$10 >> 0] | 0) == 93) {
$14 = $1 + 2 | 0;
if (($14 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
if ((HEAP8[$14 >> 0] | 0) == 62) {
HEAP32[$3 >> 2] = $1 + 3;
$$0 = 40;
return $$0 | 0;
} else $$1$ph = $10;
} else $$1$ph = $10;
break;
}
case 9:
{
$19 = $1 + 1 | 0;
if (($19 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
HEAP32[$3 >> 2] = (HEAP8[$5 + (HEAPU8[$19 >> 0] | 0) >> 0] | 0) == 10 ? $1 + 2 | 0 : $19;
$$0 = 7;
return $$0 | 0;
}
case 10:
{
HEAP32[$3 >> 2] = $1 + 1;
$$0 = 7;
return $$0 | 0;
}
case 5:
{
if (($2 - $1 | 0) < 2) {
$$0 = -2;
return $$0 | 0;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 352 >> 2] & 63]($0, $1) | 0)) {
$$1$ph = $1 + 2 | 0;
break L4;
}
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
case 6:
{
if (($2 - $1 | 0) < 3) {
$$0 = -2;
return $$0 | 0;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 356 >> 2] & 63]($0, $1) | 0)) {
$$1$ph = $1 + 3 | 0;
break L4;
}
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
case 7:
{
if (($2 - $1 | 0) < 4) {
$$0 = -2;
return $$0 | 0;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 360 >> 2] & 63]($0, $1) | 0)) {
$$1$ph = $1 + 4 | 0;
break L4;
}
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
case 8:
case 1:
case 0:
{
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
default:
$$1$ph = $1 + 1 | 0;
} while (0);
L50 : do if (($$1$ph | 0) != ($2 | 0)) {
$57 = $2;
$58 = $0 + 352 | 0;
$59 = $0 + 356 | 0;
$60 = $0 + 360 | 0;
$$186 = $$1$ph;
L52 : while (1) {
switch (HEAP8[$5 + (HEAPU8[$$186 >> 0] | 0) >> 0] | 0) {
case 4:
case 10:
case 9:
case 8:
case 1:
case 0:
{
label = 37;
break L52;
break;
}
case 5:
{
if (($57 - $$186 | 0) < 2) {
label = 30;
break L52;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$58 >> 2] & 63]($0, $$186) | 0)) $$sink = 2; else {
label = 30;
break L52;
}
break;
}
case 6:
{
if (($57 - $$186 | 0) < 3) {
label = 33;
break L52;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$59 >> 2] & 63]($0, $$186) | 0)) $$sink = 3; else {
label = 33;
break L52;
}
break;
}
case 7:
{
if (($57 - $$186 | 0) < 4) {
label = 36;
break L52;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$60 >> 2] & 63]($0, $$186) | 0)) $$sink = 4; else {
label = 36;
break L52;
}
break;
}
default:
$$sink = 1;
}
$83 = $$186 + $$sink | 0;
if (($83 | 0) == ($2 | 0)) break L50; else $$186 = $83;
}
if ((label | 0) == 30) {
HEAP32[$3 >> 2] = $$186;
$$0 = 6;
return $$0 | 0;
} else if ((label | 0) == 33) {
HEAP32[$3 >> 2] = $$186;
$$0 = 6;
return $$0 | 0;
} else if ((label | 0) == 36) {
HEAP32[$3 >> 2] = $$186;
$$0 = 6;
return $$0 | 0;
} else if ((label | 0) == 37) {
HEAP32[$3 >> 2] = $$186;
$$0 = 6;
return $$0 | 0;
}
} while (0);
HEAP32[$3 >> 2] = $2;
$$0 = 6;
return $$0 | 0;
}
function __Z21ProcessSingleXMLMorphP7XMLCellb($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0, $$038$i25 = 0, $$pre$phi$i$iZ2D = 0, $$tr$lcssa = 0, $$tr26 = 0, $12 = 0, $14 = 0, $15 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $32 = 0, $36 = 0, $38 = 0, $43 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $55 = 0, $57 = 0, $6 = 0, $73 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$2 = HEAP32[$0 >> 2] | 0;
L1 : do if (!(_strcmp(46756, $2) | 0)) $$tr$lcssa = $0; else {
$$tr26 = $0;
$6 = $2;
$73 = $0;
while (1) {
if (_strcmp(46762, $6) | 0) if (_strcmp(46771, $6) | 0) {
label = 24;
break;
}
$12 = HEAP32[$$tr26 + 8 >> 2] | 0;
if (!$12) {
$$0 = 0;
label = 28;
break;
}
$14 = $12 + 12 | 0;
$15 = HEAP32[$14 >> 2] | 0;
if (($15 | 0) < 1) {
$$0 = 0;
label = 28;
break;
}
if (($15 | 0) != 1) {
label = 9;
break;
}
$19 = HEAP32[HEAP32[$12 >> 2] >> 2] | 0;
$20 = HEAP32[$19 >> 2] | 0;
if (!(_strcmp(46756, $20) | 0)) {
$$tr$lcssa = $19;
break L1;
} else {
$$tr26 = $19;
$6 = $20;
$73 = $19;
}
}
if ((label | 0) == 9) {
$23 = __Znwj(28) | 0;
$24 = $23 + 4 | 0;
HEAP32[$24 >> 2] = 0;
HEAP32[$24 + 4 >> 2] = 0;
HEAP32[$24 + 8 >> 2] = 0;
HEAP32[$24 + 12 >> 2] = 0;
HEAP32[$23 + 20 >> 2] = 2;
HEAP32[$23 >> 2] = 3260;
__THREW__ = 0;
$26 = invoke_ii(20, 16) | 0;
$27 = __THREW__;
__THREW__ = 0;
if ($27 & 1) {
$38 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($23);
___resumeException($38 | 0);
}
HEAP32[$26 + 4 >> 2] = 10;
HEAP32[$26 + 12 >> 2] = 0;
HEAP32[$26 >> 2] = 0;
HEAP32[$26 + 8 >> 2] = 0;
$32 = $23 + 24 | 0;
HEAP32[$32 >> 2] = $26;
if ((HEAP32[$14 >> 2] | 0) > 0) {
$$038$i25 = 0;
$43 = 0;
do {
if ($$038$i25 << 16 >> 16 < 0) $45 = 0; else $45 = HEAP32[(HEAP32[$12 >> 2] | 0) + ($43 << 2) >> 2] | 0;
$46 = __Z21ProcessSingleXMLMorphP7XMLCellb($45, $1) | 0;
$47 = HEAP32[$32 >> 2] | 0;
$48 = $47 + 12 | 0;
$49 = HEAP32[$48 >> 2] | 0;
if (($49 | 0) >= 0) {
if ((HEAP32[$47 + 8 >> 2] | 0) > ($49 | 0)) {
$$pre$phi$i$iZ2D = $49 + 1 | 0;
label = 21;
} else {
$55 = HEAP32[$47 + 4 >> 2] | 0;
$57 = $49 + 1 | 0;
__ZN13DynamicArrayPI18AbstractTimedMorphE6resizeEi($47, ($55 | 0) > ($49 | 0) ? $55 : $57 + ($49 >>> 1) | 0);
if ((HEAP32[$48 >> 2] | 0) <= ($49 | 0)) {
$$pre$phi$i$iZ2D = $57;
label = 21;
}
}
if ((label | 0) == 21) {
label = 0;
HEAP32[$48 >> 2] = $$pre$phi$i$iZ2D;
}
HEAP32[(HEAP32[$47 >> 2] | 0) + ($49 << 2) >> 2] = $46;
}
$$038$i25 = $$038$i25 + 1 << 16 >> 16;
$43 = $$038$i25 << 16 >> 16;
} while ((HEAP32[$14 >> 2] | 0) > ($43 | 0));
$36 = HEAP32[$23 >> 2] | 0;
} else $36 = 3260;
FUNCTION_TABLE_vii[HEAP32[$36 + 52 >> 2] & 255]($23, $$tr26);
$$0 = $23;
STACKTOP = sp;
return $$0 | 0;
} else if ((label | 0) == 24) {
if (_strcmp(46781, $6) | 0) if (_strcmp(46790, $6) | 0) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer >> 2] = HEAP32[$73 >> 2];
__Z7eprintfPKcz(46800, $vararg_buffer);
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
$$0 = __ZL18ProcessSeqXMLMorphP7XMLCellb($$tr26, $1) | 0;
STACKTOP = sp;
return $$0 | 0;
} else if ((label | 0) == 28) {
STACKTOP = sp;
return $$0 | 0;
}
} while (0);
$$0 = __Z21ProcessAtomicXMLMorphP7XMLCellb($$tr$lcssa, $1) | 0;
STACKTOP = sp;
return $$0 | 0;
}
function __ZNK16OneHCircMoveSpec5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $17 = 0, $32 = 0, $47 = 0, $53 = 0.0, $54 = 0, $60 = 0.0, $61 = 0, $76 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer2 = sp + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
if (Math_fround(HEAPF32[$0 >> 2]) != Math_fround(0.0)) label = 5; else if (Math_fround(HEAPF32[$0 + 4 >> 2]) != Math_fround(0.0)) label = 5; else if (Math_fround(HEAPF32[$0 + 8 >> 2]) != Math_fround(0.0)) label = 5;
if ((label | 0) == 5) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(38026, 17, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($0, $1, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$17 = $0 + 12 | 0;
if (Math_fround(HEAPF32[$17 >> 2]) != Math_fround(0.0)) label = 9; else if (Math_fround(HEAPF32[$0 + 16 >> 2]) != Math_fround(0.0)) label = 9; else if (Math_fround(HEAPF32[$0 + 20 >> 2]) != Math_fround(0.0)) label = 9;
if ((label | 0) == 9) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(38044, 14, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($17, $1, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$32 = $0 + 24 | 0;
if (Math_fround(HEAPF32[$32 >> 2]) != Math_fround(0.0)) label = 13; else if (Math_fround(HEAPF32[$0 + 28 >> 2]) != Math_fround(0.0)) label = 13; else if (Math_fround(HEAPF32[$0 + 32 >> 2]) != Math_fround(0.0)) label = 13;
if ((label | 0) == 13) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(38059, 14, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($32, $1, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$47 = $0 + 60 | 0;
if (Math_fround(HEAPF32[$47 >> 2]) != Math_fround(0.0)) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$53 = +Math_fround(HEAPF32[$47 >> 2]);
HEAP32[$vararg_buffer >> 2] = 3;
HEAPF64[$vararg_buffer + 8 >> 3] = $53;
_fprintf($1, 38074, $vararg_buffer) | 0;
}
$54 = $0 + 64 | 0;
if (Math_fround(HEAPF32[$54 >> 2]) != Math_fround(0.0)) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$60 = +Math_fround(HEAPF32[$54 >> 2]);
HEAP32[$vararg_buffer2 >> 2] = 3;
HEAPF64[$vararg_buffer2 + 8 >> 3] = $60;
_fprintf($1, 38095, $vararg_buffer2) | 0;
}
$61 = $0 + 36 | 0;
if (Math_fround(HEAPF32[$61 >> 2]) != Math_fround(0.0)) label = 21; else if (Math_fround(HEAPF32[$0 + 40 >> 2]) != Math_fround(0.0)) label = 21; else if (Math_fround(HEAPF32[$0 + 44 >> 2]) != Math_fround(0.0)) label = 21;
if ((label | 0) == 21) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(37144, 15, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($61, $1, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$76 = $0 + 48 | 0;
if (!(Math_fround(HEAPF32[$76 >> 2]) != Math_fround(0.0))) if (!(Math_fround(HEAPF32[$0 + 52 >> 2]) != Math_fround(0.0))) if (!(Math_fround(HEAPF32[$0 + 56 >> 2]) != Math_fround(0.0))) {
STACKTOP = sp;
return;
}
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(38116, 13, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($76, $1, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
STACKTOP = sp;
return;
}
function __ZNK20ArmHandConstellation5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $10 = 0, $14 = 0, $24 = 0, $26 = 0, $35 = 0, $38 = 0, $46 = 0, $49 = 0, $57 = 0, $60 = 0, $68 = 0, $71 = 0, $84 = 0, $85 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer7 = sp + 24 | 0;
$vararg_buffer3 = sp + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$10 = HEAP8[$0 + 61 >> 0] | 0 ? 84 : 70;
$14 = HEAP8[$0 + 62 >> 0] | 0 ? 84 : 70;
HEAP32[$vararg_buffer >> 2] = HEAP8[$0 + 60 >> 0] | 0 ? 84 : 70;
HEAP32[$vararg_buffer + 4 >> 2] = $10;
HEAP32[$vararg_buffer + 8 >> 2] = $14;
_fprintf($1, 28087, $vararg_buffer) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$24 = HEAP8[$0 + 64 >> 0] | 0 ? 84 : 70;
HEAP32[$vararg_buffer3 >> 2] = HEAP8[$0 + 63 >> 0] | 0 ? 84 : 70;
HEAP32[$vararg_buffer3 + 4 >> 2] = $24;
_fprintf($1, 28138, $vararg_buffer3) | 0;
$26 = HEAP32[16607] | 0;
if (!(($26 ^ HEAP32[$0 >> 2]) & 16777215)) $38 = $26; else {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(28188, 17, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK10SiteIDPair5printEP8_IO_FILE($0, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
$38 = HEAP32[16607] | 0;
}
$35 = $0 + 12 | 0;
if (!(($38 ^ HEAP32[$35 >> 2]) & 16777215)) $49 = $38; else {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(28206, 14, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK10SiteIDPair5printEP8_IO_FILE($35, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
$49 = HEAP32[16607] | 0;
}
$46 = $0 + 36 | 0;
if (!(($49 ^ HEAP32[$46 >> 2]) & 16777215)) $60 = $49; else {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(28221, 16, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6SiteID5printEP8_IO_FILE($46, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
$60 = HEAP32[16607] | 0;
}
$57 = $0 + 24 | 0;
if (!(($60 ^ HEAP32[$57 >> 2]) & 16777215)) $71 = $60; else {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(28238, 17, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK10SiteIDPair5printEP8_IO_FILE($57, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
$71 = HEAP32[16607] | 0;
}
$68 = $0 + 40 | 0;
if (($71 ^ HEAP32[$68 >> 2]) & 16777215 | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(28256, 19, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6SiteID5printEP8_IO_FILE($68, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$84 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17197] | 0, HEAP32[$0 + 44 >> 2] | 0) | 0;
HEAP32[$vararg_buffer7 >> 2] = $84;
_fprintf($1, 25939, $vararg_buffer7) | 0;
$85 = $0 + 48 | 0;
if (!(Math_fround(HEAPF32[$85 >> 2]) != Math_fround(0.0))) if (!(Math_fround(HEAPF32[$0 + 52 >> 2]) != Math_fround(0.0))) if (!(Math_fround(HEAPF32[$0 + 56 >> 2]) != Math_fround(0.0))) {
STACKTOP = sp;
return;
}
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(28276, 21, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($85, $1, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
STACKTOP = sp;
return;
}
function __ZL11Expat_startPvPKcPS1_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0 = 0, $$04346 = 0, $$04447 = 0, $$pre$phiZ2D = 0, $$sink$i$i = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $19 = 0, $23 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $35 = 0, $39 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $54 = 0, $59 = 0, $60 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $70 = 0, $72 = 0, $79 = 0, $8 = 0, $81 = 0, $85 = 0, $87 = 0, $9 = 0, label = 0;
$$0 = 0;
while (1) if (!(HEAP32[$2 + ($$0 << 2) >> 2] | 0)) break; else $$0 = $$0 + 1 | 0;
$7 = __Znwj(16) | 0;
__THREW__ = 0;
$8 = invoke_ii(21, $1 | 0) | 0;
$9 = __THREW__;
__THREW__ = 0;
if ($9 & 1) {
$59 = ___cxa_find_matching_catch_2() | 0;
$60 = tempRet0;
__ZdlPv($7);
___resumeException($59 | 0);
}
__THREW__ = 0;
invoke_vii(184, $7 | 0, $8 | 0);
$11 = __THREW__;
__THREW__ = 0;
if ($11 & 1) {
$59 = ___cxa_find_matching_catch_2() | 0;
$60 = tempRet0;
__ZdlPv($7);
___resumeException($59 | 0);
}
$13 = $$0 + -1 | 0;
L10 : do if (($$0 | 0) > 1) {
$15 = $7 + 4 | 0;
$$04447 = 0;
while (1) {
$16 = HEAP32[$15 >> 2] | 0;
$19 = __Z10copyStringPKc(HEAP32[$2 + ($$04447 << 2) >> 2] | 0) | 0;
$23 = __Z10copyStringPKc(HEAP32[$2 + (($$04447 | 1) << 2) >> 2] | 0) | 0;
$26 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($19, HEAP32[$16 + 4 >> 2] | 0) | 0;
$27 = HEAP32[$16 >> 2] | 0;
$28 = $27 + ($26 << 3) | 0;
$29 = $27 + ($26 << 3) + 4 | 0;
switch (HEAP16[$29 >> 1] | 0) {
case 0:
{
$31 = __Znwj(12) | 0;
HEAP32[$31 >> 2] = $19;
HEAP32[$31 + 4 >> 2] = $23;
HEAP32[$31 + 8 >> 2] = 0;
HEAP32[$28 >> 2] = $31;
$35 = $16 + 12 | 0;
HEAP32[$35 >> 2] = (HEAP32[$35 >> 2] | 0) + -1;
$$sink$i$i = $16 + 16 | 0;
break;
}
case 1:
{
$39 = $16 + 16 | 0;
HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + -1;
label = 10;
break;
}
default:
label = 10;
}
if ((label | 0) == 10) {
label = 0;
$42 = HEAP32[$28 >> 2] | 0;
$45 = __Znwj(12) | 0;
$46 = $42 + 8 | 0;
$47 = HEAP32[$46 >> 2] | 0;
HEAP32[$45 >> 2] = $19;
HEAP32[$45 + 4 >> 2] = $23;
HEAP32[$45 + 8 >> 2] = $47;
HEAP32[$46 >> 2] = $45;
$$sink$i$i = $16 + 8 | 0;
}
HEAP32[$$sink$i$i >> 2] = (HEAP32[$$sink$i$i >> 2] | 0) + 1;
HEAP16[$29 >> 1] = (HEAP16[$29 >> 1] | 0) + 1 << 16 >> 16;
$54 = $16 + 24 | 0;
HEAP32[$54 >> 2] = (HEAP32[$54 >> 2] | 0) + 1;
$$04447 = $$04447 + 2 | 0;
if (($$04447 | 0) >= ($13 | 0)) break L10;
}
} while (0);
$62 = HEAP32[$0 + 28 >> 2] | 0;
$63 = $62 + 12 | 0;
$64 = HEAP32[$63 >> 2] | 0;
if (($64 | 0) >= 0) {
if ((HEAP32[$62 + 8 >> 2] | 0) > ($64 | 0)) {
$$pre$phiZ2D = $64 + 1 | 0;
label = 17;
} else {
$70 = HEAP32[$62 + 4 >> 2] | 0;
$72 = $64 + 1 | 0;
__ZN13DynamicArrayPI7XMLCellE6resizeEi($62, ($70 | 0) > ($64 | 0) ? $70 : $72 + ($64 >>> 1) | 0);
if ((HEAP32[$63 >> 2] | 0) <= ($64 | 0)) {
$$pre$phiZ2D = $72;
label = 17;
}
}
if ((label | 0) == 17) HEAP32[$63 >> 2] = $$pre$phiZ2D;
HEAP32[(HEAP32[$62 >> 2] | 0) + ($64 << 2) >> 2] = $7;
}
$79 = HEAP32[$0 + 4 >> 2] | 0;
if (!$79) return;
$81 = $0 + 8 | 0;
if (HEAP32[$81 >> 2] | 0) return;
$85 = HEAP32[$79 + 12 >> 2] | 0;
if (($85 | 0) <= 0) return;
$87 = HEAP32[$79 >> 2] | 0;
$$04346 = 0;
while (1) {
if (!(_strcmp(HEAP32[$87 + ($$04346 << 2) >> 2] | 0, $1) | 0)) break;
$$04346 = $$04346 + 1 | 0;
if (($$04346 | 0) >= ($85 | 0)) {
label = 26;
break;
}
}
if ((label | 0) == 26) return;
HEAP32[$81 >> 2] = $7;
return;
}
function __ZNK6Vector9angleWithERKS_S1_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$ = f0, $$24 = f0, $$25 = f0, $$pre = f0, $$pre19 = f0, $$pre20 = f0, $$pre21 = f0, $$pre22 = f0, $10 = f0, $12 = f0, $13 = 0, $14 = f0, $15 = 0, $16 = f0, $18 = f0, $19 = 0, $22 = f0, $25 = f0, $28 = f0, $29 = 0, $3 = f0, $30 = 0, $33 = 0, $35 = 0, $37 = 0, $4 = f0, $42 = 0, $47 = f0, $48 = f0, $49 = f0, $51 = f0, $52 = f0, $53 = f0, $54 = f0, $55 = f0, $56 = f0, $58 = f0, $59 = f0, $6 = f0, $60 = f0, $61 = f0, $63 = f0, $7 = 0, $75 = f0, $8 = f0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$3 = Math_fround(HEAPF32[$0 >> 2]);
$4 = Math_fround(HEAPF32[$1 >> 2]);
$6 = Math_fround(Math_fround($3 * $4) + Math_fround(0.0));
$7 = $0 + 4 | 0;
$8 = Math_fround(HEAPF32[$7 >> 2]);
$9 = $1 + 4 | 0;
$10 = Math_fround(HEAPF32[$9 >> 2]);
$12 = Math_fround($6 + Math_fround($8 * $10));
$13 = $0 + 8 | 0;
$14 = Math_fround(HEAPF32[$13 >> 2]);
$15 = $1 + 8 | 0;
$16 = Math_fround(HEAPF32[$15 >> 2]);
$18 = Math_fround($12 + Math_fround($14 * $16));
$19 = ($0 | 0) == 0;
$$ = $19 ? Math_fround(0.0) : $14;
$$24 = $19 ? Math_fround(0.0) : $8;
$$25 = $19 ? Math_fround(0.0) : $3;
$22 = Math_fround(Math_fround($$24 * $16) - Math_fround($$ * $10));
$25 = Math_fround(Math_fround($$ * $4) - Math_fround($$25 * $16));
$28 = Math_fround(Math_fround($$25 * $10) - Math_fround($$24 * $4));
$29 = (HEAPF32[tempDoublePtr >> 2] = $25, HEAP32[tempDoublePtr >> 2] | 0);
$30 = (HEAPF32[tempDoublePtr >> 2] = $28, HEAP32[tempDoublePtr >> 2] | 0);
do if (!0) {
$48 = $3;
$49 = $10;
$54 = $8;
$55 = $16;
$60 = $14;
$61 = $4;
} else {
$33 = (HEAPF32[tempDoublePtr >> 2] = $22, HEAP32[tempDoublePtr >> 2] | 0) & 2147483647;
if ($33 >>> 0 <= 2139095040) {
$35 = $29 & 2147483647;
if ($35 >>> 0 <= 2139095040) {
$37 = $30 & 2147483647;
if (!(($33 | 0) == 2139095040 | $37 >>> 0 > 2139095040)) if (!(($35 | 0) == 2139095040 | ($37 | 0) == 2139095040)) {
$48 = $3;
$49 = $10;
$54 = $8;
$55 = $16;
$60 = $14;
$61 = $4;
break;
}
}
}
__Z7eprintfPKcz(11903, $vararg_buffer);
$42 = HEAP32[16082] | 0;
if ($42 | 0) {
HEAP32[$vararg_buffer1 >> 2] = 4;
HEAPF64[$vararg_buffer1 + 8 >> 3] = +$22;
HEAP32[$vararg_buffer1 + 16 >> 2] = 4;
HEAPF64[$vararg_buffer1 + 24 >> 3] = +$25;
HEAP32[$vararg_buffer1 + 32 >> 2] = 4;
HEAPF64[$vararg_buffer1 + 40 >> 3] = +$28;
_fprintf($42, 11888, $vararg_buffer1) | 0;
}
__Z5eputcc(10);
$$pre = Math_fround(HEAPF32[$0 >> 2]);
$$pre19 = Math_fround(HEAPF32[$9 >> 2]);
$$pre20 = Math_fround(HEAPF32[$7 >> 2]);
$$pre21 = Math_fround(HEAPF32[$15 >> 2]);
$$pre22 = Math_fround(HEAPF32[$13 >> 2]);
$48 = $$pre;
$49 = $$pre19;
$54 = $$pre20;
$55 = $$pre21;
$60 = $$pre22;
$61 = Math_fround(HEAPF32[$1 >> 2]);
} while (0);
$47 = Math_fround($48 * $49);
$51 = Math_fround(HEAPF32[$2 + 8 >> 2]);
$52 = Math_fround($47 * $51);
$53 = Math_fround($54 * $55);
$56 = Math_fround(HEAPF32[$2 >> 2]);
$58 = Math_fround($52 + Math_fround($53 * $56));
$59 = Math_fround($60 * $61);
$63 = Math_fround(HEAPF32[$2 + 4 >> 2]);
$75 = Math_fround(+Math_atan2(+Math_fround(Math_fround(Math_fround(Math_fround($58 + Math_fround($59 * $63)) - Math_fround(Math_fround($48 * $55) * $63)) - Math_fround($56 * Math_fround($49 * $60))) - Math_fround($51 * Math_fround($54 * $61))), +$18));
STACKTOP = sp;
return Math_fround($75);
}
function __ZNK18OctantInterpolator11interpolateERK6VectorRS0_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $103 = f0, $11 = f0, $111 = f0, $16 = f0, $18 = f0, $19 = f0, $24 = f0, $26 = f0, $3 = 0, $33 = 0, $34 = f0, $36 = f0, $37 = f0, $38 = 0, $39 = f0, $4 = 0, $41 = f0, $43 = f0, $44 = f0, $46 = f0, $48 = f0, $49 = 0, $5 = 0, $50 = f0, $51 = f0, $53 = f0, $6 = 0, $60 = f0, $67 = f0, $7 = f0, $75 = f0, $77 = f0, $78 = f0, $8 = 0, $80 = f0, $82 = f0, $84 = f0, $86 = f0, $87 = f0, $89 = f0, $9 = f0, $96 = f0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$3 = sp + 32 | 0;
$4 = sp + 16 | 0;
$5 = sp;
$6 = $0 + 12 | 0;
$7 = Math_fround(__ZNK6Vector10dotProductERKS_($1, $6));
$8 = $0 + 24 | 0;
$9 = Math_fround(__ZNK6Vector10dotProductERKS_($1, $8));
$11 = Math_fround(+Math_atan2(+$9, +$7));
$16 = Math_fround(+Math_atan2(+Math_fround(__ZNK6Vector10dotProductERKS_($1, $0)), +Math_fround(Math_sqrt(Math_fround(Math_fround($7 * $7) + Math_fround($9 * $9))))));
__ZN10QuaternionC2ERK6Vectorfb($3, $0, $11, 1);
__ZN10QuaternionC2ERK6Vectorfb($4, $8, Math_fround(-$16), 1);
$18 = Math_fround($11 / Math_fround(1.57079637));
$19 = Math_fround($16 / Math_fround(1.57079637));
$24 = Math_fround(Math_fround(Math_fround(1.0) - $18) * Math_fround($19 * Math_fround(HEAPF32[$0 + 72 >> 2])));
$26 = Math_fround(HEAPF32[$0 + 76 >> 2]);
__ZN10QuaternionC2ERK6Vectorfb($5, $6, Math_fround($24 + Math_fround($18 * Math_fround($26 + Math_fround($19 * Math_fround(HEAPF32[$0 + 80 >> 2]))))), 1);
$33 = $3 + 4 | 0;
$34 = Math_fround(HEAPF32[$33 >> 2]);
$36 = Math_fround(HEAPF32[$4 + 8 >> 2]);
$37 = Math_fround($34 * $36);
$38 = $3 + 8 | 0;
$39 = Math_fround(HEAPF32[$38 >> 2]);
$41 = Math_fround(HEAPF32[$4 + 4 >> 2]);
$43 = Math_fround($37 - Math_fround($39 * $41));
$44 = Math_fround(HEAPF32[$3 >> 2]);
$46 = Math_fround(HEAPF32[$4 + 12 >> 2]);
$48 = Math_fround($43 + Math_fround($44 * $46));
$49 = $3 + 12 | 0;
$50 = Math_fround(HEAPF32[$49 >> 2]);
$51 = Math_fround(HEAPF32[$4 >> 2]);
$53 = Math_fround($48 + Math_fround($50 * $51));
$60 = Math_fround(Math_fround($41 * $50) + Math_fround(Math_fround($34 * $46) + Math_fround(Math_fround($39 * $51) - Math_fround($36 * $44))));
$67 = Math_fround(Math_fround($36 * $50) + Math_fround(Math_fround($39 * $46) + Math_fround(Math_fround($41 * $44) - Math_fround($34 * $51))));
$75 = Math_fround(Math_fround($46 * $50) + Math_fround(Math_fround(Math_fround(-Math_fround($44 * $51)) - Math_fround($34 * $41)) - Math_fround($36 * $39)));
$77 = Math_fround(HEAPF32[$5 + 8 >> 2]);
$78 = Math_fround($60 * $77);
$80 = Math_fround(HEAPF32[$5 + 4 >> 2]);
$82 = Math_fround($78 - Math_fround($67 * $80));
$84 = Math_fround(HEAPF32[$5 + 12 >> 2]);
$86 = Math_fround($82 + Math_fround($53 * $84));
$87 = Math_fround(HEAPF32[$5 >> 2]);
$89 = Math_fround($86 + Math_fround($75 * $87));
$96 = Math_fround(Math_fround($75 * $80) + Math_fround(Math_fround($60 * $84) + Math_fround(Math_fround($67 * $87) - Math_fround($77 * $53))));
$103 = Math_fround(Math_fround($75 * $77) + Math_fround(Math_fround($67 * $84) + Math_fround(Math_fround($80 * $53) - Math_fround($60 * $87))));
$111 = Math_fround(Math_fround($75 * $84) + Math_fround(Math_fround(Math_fround(-Math_fround($53 * $87)) - Math_fround($60 * $80)) - Math_fround($67 * $77)));
HEAPF32[$3 >> 2] = $89;
HEAPF32[$33 >> 2] = $96;
HEAPF32[$38 >> 2] = $103;
HEAPF32[$49 >> 2] = $111;
__ZNK10Quaternion12rotateVectorERK6VectorRS0_($3, $0 + 48 | 0, $2);
STACKTOP = sp;
return;
}
function __ZN13SplitMovement17GetCurrentPostureER19TwoHConcretePosturefb($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
var $$0 = 0, $$031 = 0, $13 = f0, $14 = 0, $15 = 0, $16 = f0, $22 = f0, $23 = f0, $24 = f0, $28 = 0, $30 = 0, $34 = 0, $37 = 0, $4 = 0, $41 = 0, $43 = 0, $45 = f0, $51 = 0, $55 = 0, $58 = 0, $6 = f0, $62 = 0, $66 = 0, $68 = f0, $75 = 0, $9 = f0, $vararg_buffer = 0, dest = 0, sp = 0, src = 0, stop = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 240 | 0;
$vararg_buffer = sp;
$4 = sp + 16 | 0;
$6 = Math_fround(HEAPF32[$0 + 40 >> 2]);
$9 = Math_fround($6 - Math_fround(HEAPF32[$0 + 44 >> 2]));
if ($2 <= Math_fround(0.0) | $9 <= $2) {
if (!($9 <= Math_fround(0.0))) {
$13 = Math_fround($2 / $9);
$14 = $13 < Math_fround(0.0);
$15 = $13 > Math_fround(1.0);
$16 = $15 ? Math_fround(1.0) : $13;
$22 = $14 ? Math_fround(0.0) : $16;
} else $22 = Math_fround(1.0);
$23 = Math_fround(__ZNK10Trajectory16lookupByFractionEf(HEAP32[66492 + (HEAP32[$0 + 12 >> 2] << 2) >> 2] | 0, $22));
$24 = Math_fround(Math_fround(1.0) - $23);
if (0) {
$28 = HEAP32[$0 + 4 >> 2] | 0;
$30 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[16658] | 0, $28) | 0;
HEAP32[$vararg_buffer >> 2] = $28;
HEAP32[$vararg_buffer + 4 >> 2] = $30;
HEAPF64[$vararg_buffer + 8 >> 3] = +$2;
__Z7eprintfPKcz(35945, $vararg_buffer);
}
__ZNK25TwoHConcretePostureChange11interpolateER19TwoHConcretePosturef12SET_OF_HANDSb($0 + 60 | 0, $1, $3 ? $23 : $24, HEAP32[$0 + 8 >> 2] | 0, $3);
STACKTOP = sp;
return;
}
$34 = $0 + 528 | 0;
do if (!(HEAP32[$34 >> 2] | 0)) {
$45 = Math_fround($2 / $9);
$51 = (HEAP16[$0 + 508 >> 1] & 64) != 0;
HEAPF32[$4 >> 2] = $45;
HEAPF32[$4 + 4 >> 2] = $45;
HEAPF32[$4 + 8 >> 2] = $45;
HEAPF32[$4 + 12 >> 2] = $45;
__ZN19OneHConcretePosture14setInterpolateERKS_S1_PKfb($1, $0 + 60 | 0, $0 + 284 | 0, $4, $51);
} else {
__ZN19TwoHConcretePostureC2ERKS_($4, $1);
$37 = HEAP32[$34 >> 2] | 0;
__THREW__ = 0;
invoke_viifi(HEAP32[(HEAP32[$37 >> 2] | 0) + 60 >> 2] | 0, $37 | 0, $4 | 0, +$2, $3 | 0);
$41 = __THREW__;
__THREW__ = 0;
if (!($41 & 1)) {
dest = $1;
src = $4;
stop = dest + 112 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
break;
}
$43 = ___cxa_find_matching_catch_2() | 0;
$$0 = $43;
$$031 = tempRet0;
___resumeException($$0 | 0);
} while (0);
$55 = $0 + 532 | 0;
if (!(HEAP32[$55 >> 2] | 0)) {
$68 = Math_fround($2 / $9);
$75 = (HEAP16[$0 + 508 >> 1] & 64) != 0;
HEAPF32[$4 >> 2] = $68;
HEAPF32[$4 + 4 >> 2] = $68;
HEAPF32[$4 + 8 >> 2] = $68;
HEAPF32[$4 + 12 >> 2] = $68;
__ZN19OneHConcretePosture14setInterpolateERKS_S1_PKfb($1 + 112 | 0, $0 + 172 | 0, $0 + 396 | 0, $4, $75);
STACKTOP = sp;
return;
}
__ZN19TwoHConcretePostureC2ERKS_($4, $1);
$58 = HEAP32[$55 >> 2] | 0;
__THREW__ = 0;
invoke_viifi(HEAP32[(HEAP32[$58 >> 2] | 0) + 60 >> 2] | 0, $58 | 0, $4 | 0, +$2, $3 | 0);
$62 = __THREW__;
__THREW__ = 0;
if ($62 & 1) {
$66 = ___cxa_find_matching_catch_2() | 0;
$$0 = $66;
$$031 = tempRet0;
___resumeException($$0 | 0);
} else {
dest = $1 + 112 | 0;
src = $4 + 112 | 0;
stop = dest + 112 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
STACKTOP = sp;
return;
}
}
function __ZN24AvatarJointRotationIndex17ZeroBodyRotationsEv($0) {
$0 = $0 | 0;
var $$02336 = 0, $$035 = 0, $1 = 0, $10 = 0, $103 = 0, $109 = 0, $115 = 0, $12 = 0, $121 = 0, $127 = 0, $16 = 0, $22 = 0, $28 = 0, $34 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $45 = 0, $47 = 0, $50 = 0, $57 = 0, $59 = 0, $62 = 0, $69 = 0, $7 = 0, $74 = 0, $8 = 0, $80 = 0, $91 = 0, $97 = 0;
$1 = HEAP32[$0 >> 2] | 0;
if ($1 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] & 255]($1);
$40 = HEAP32[$0 + 4 >> 2] | 0;
if ($40 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$40 >> 2] | 0) + 12 >> 2] & 255]($40);
$74 = HEAP32[$0 + 8 >> 2] | 0;
if ($74 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$74 >> 2] | 0) + 12 >> 2] & 255]($74);
$80 = HEAP32[$0 + 12 >> 2] | 0;
if ($80 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$80 >> 2] | 0) + 12 >> 2] & 255]($80);
$12 = HEAP32[$0 + 152 >> 2] | 0;
if ($12 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] & 255]($12);
$16 = HEAP32[$0 + 160 >> 2] | 0;
if ($16 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$16 >> 2] | 0) + 12 >> 2] & 255]($16);
$22 = HEAP32[$0 + 168 >> 2] | 0;
if ($22 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$22 >> 2] | 0) + 12 >> 2] & 255]($22);
$28 = HEAP32[$0 + 176 >> 2] | 0;
if ($28 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$28 >> 2] | 0) + 12 >> 2] & 255]($28);
$34 = HEAP32[$0 + 16 >> 2] | 0;
if ($34 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$34 >> 2] | 0) + 12 >> 2] & 255]($34);
$91 = HEAP32[$0 + 20 >> 2] | 0;
if ($91 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$91 >> 2] | 0) + 12 >> 2] & 255]($91);
$97 = HEAP32[$0 + 24 >> 2] | 0;
if ($97 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$97 >> 2] | 0) + 12 >> 2] & 255]($97);
$103 = HEAP32[$0 + 28 >> 2] | 0;
if ($103 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$103 >> 2] | 0) + 12 >> 2] & 255]($103);
$109 = HEAP32[$0 + 156 >> 2] | 0;
if ($109 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$109 >> 2] | 0) + 12 >> 2] & 255]($109);
$115 = HEAP32[$0 + 164 >> 2] | 0;
if ($115 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$115 >> 2] | 0) + 12 >> 2] & 255]($115);
$121 = HEAP32[$0 + 172 >> 2] | 0;
if ($121 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$121 >> 2] | 0) + 12 >> 2] & 255]($121);
$127 = HEAP32[$0 + 180 >> 2] | 0;
if ($127 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$127 >> 2] | 0) + 12 >> 2] & 255]($127);
$4 = HEAP32[$0 + 184 >> 2] | 0;
if ($4 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 255]($4);
$7 = $0 + 200 | 0;
$8 = HEAP32[$7 >> 2] | 0;
if (($8 | 0) > 0) {
$10 = $0 + 188 | 0;
$$02336 = 0;
$47 = $8;
while (1) {
do if (($47 | 0) > ($$02336 | 0)) {
$50 = HEAP32[(HEAP32[$10 >> 2] | 0) + ($$02336 << 2) >> 2] | 0;
if (!$50) {
$57 = $47;
break;
}
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$50 >> 2] | 0) + 12 >> 2] & 255]($50);
$57 = HEAP32[$7 >> 2] | 0;
} else $57 = $47; while (0);
$$02336 = $$02336 + 1 | 0;
if (($$02336 | 0) >= ($57 | 0)) break; else $47 = $57;
}
}
$42 = $0 + 216 | 0;
$43 = HEAP32[$42 >> 2] | 0;
if (($43 | 0) <= 0) return;
$45 = $0 + 204 | 0;
$$035 = 0;
$59 = $43;
while (1) {
do if (($59 | 0) > ($$035 | 0)) {
$62 = HEAP32[(HEAP32[$45 >> 2] | 0) + ($$035 << 2) >> 2] | 0;
if (!$62) {
$69 = $59;
break;
}
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$62 >> 2] | 0) + 12 >> 2] & 255]($62);
$69 = HEAP32[$42 >> 2] | 0;
} else $69 = $59; while (0);
$$035 = $$035 + 1 | 0;
if (($$035 | 0) >= ($69 | 0)) break; else $59 = $69;
}
return;
}
function _normal_scanPercent($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$06471 = 0, $$sink = 0, $$sink78 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $5 = 0, $62 = 0, label = 0;
if (($1 | 0) == ($2 | 0)) {
$$0 = -22;
return $$0 | 0;
}
$5 = $0 + 72 | 0;
switch (HEAP8[$5 + (HEAPU8[$1 >> 0] | 0) >> 0] | 0) {
case 29:
{
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
case 24:
case 22:
{
$$sink = 1;
break;
}
case 5:
{
if (($2 - $1 | 0) < 2) {
$$0 = -2;
return $$0 | 0;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 340 >> 2] & 63]($0, $1) | 0)) {
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
} else $$sink = 2;
break;
}
case 6:
{
if (($2 - $1 | 0) < 3) {
$$0 = -2;
return $$0 | 0;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 344 >> 2] & 63]($0, $1) | 0)) {
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
} else $$sink = 3;
break;
}
case 7:
{
if (($2 - $1 | 0) < 4) {
$$0 = -2;
return $$0 | 0;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$0 + 348 >> 2] & 63]($0, $1) | 0)) {
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
} else $$sink = 4;
break;
}
case 30:
case 9:
case 10:
case 21:
{
HEAP32[$3 >> 2] = $1;
$$0 = 22;
return $$0 | 0;
}
default:
{
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
}
$10 = $1 + $$sink | 0;
if (($10 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
$12 = $2;
$13 = $0 + 328 | 0;
$14 = $0 + 332 | 0;
$15 = $0 + 336 | 0;
$$06471 = $10;
L33 : while (1) {
switch (HEAP8[$5 + (HEAPU8[$$06471 >> 0] | 0) >> 0] | 0) {
case 29:
{
label = 18;
break L33;
break;
}
case 18:
{
label = 29;
break L33;
break;
}
case 27:
case 26:
case 25:
case 24:
case 22:
{
$$sink78 = 1;
break;
}
case 5:
{
if (($12 - $$06471 | 0) < 2) {
$$0 = -2;
label = 31;
break L33;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$13 >> 2] & 63]($0, $$06471) | 0)) {
label = 21;
break L33;
} else $$sink78 = 2;
break;
}
case 6:
{
if (($12 - $$06471 | 0) < 3) {
$$0 = -2;
label = 31;
break L33;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$14 >> 2] & 63]($0, $$06471) | 0)) {
label = 24;
break L33;
} else $$sink78 = 3;
break;
}
case 7:
{
if (($12 - $$06471 | 0) < 4) {
$$0 = -2;
label = 31;
break L33;
}
if (!(FUNCTION_TABLE_iii[HEAP32[$15 >> 2] & 63]($0, $$06471) | 0)) {
label = 27;
break L33;
} else $$sink78 = 4;
break;
}
default:
{
label = 30;
break L33;
}
}
$62 = $$06471 + $$sink78 | 0;
if (($62 | 0) == ($2 | 0)) {
$$0 = -1;
label = 31;
break;
} else $$06471 = $62;
}
if ((label | 0) == 18) {
HEAP32[$3 >> 2] = $$06471;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 21) {
HEAP32[$3 >> 2] = $$06471;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 24) {
HEAP32[$3 >> 2] = $$06471;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 27) {
HEAP32[$3 >> 2] = $$06471;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 29) {
HEAP32[$3 >> 2] = $$06471 + 1;
$$0 = 28;
return $$0 | 0;
} else if ((label | 0) == 30) {
HEAP32[$3 >> 2] = $$06471;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 31) return $$0 | 0;
return 0;
}
function __ZN7Gesture24MakeArmHandConstellationEPK20ArmHandConstellation($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $21 = 0, $3 = 0, $30 = 0, $33 = 0, $4 = 0, $42 = 0, $43 = 0, $47 = 0, $5 = 0, $50 = 0, $60 = 0, $61 = 0, $65 = 0, $67 = 0, $7 = 0, $70 = 0, $72 = 0, $75 = 0, $77 = 0, $78 = 0, $9 = 0, $tmpcast$byval_copy = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, dest = 0, sp = 0, src = 0, stop = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 112 | 0;
$tmpcast$byval_copy = sp + 98 | 0;
$vararg_buffer3 = sp + 8 | 0;
$vararg_buffer = sp;
$2 = sp + 12 | 0;
$3 = sp + 96 | 0;
$4 = $0 + 40 | 0;
$5 = HEAP32[$4 >> 2] | 0;
if ($5 | 0) {
__ZdlPv($5);
HEAP32[$4 >> 2] = 0;
}
$7 = __Znwj(68) | 0;
$9 = HEAP32[$0 + 36 >> 2] | 0;
dest = $2;
src = $9;
stop = dest + 52 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
__THREW__ = 0;
invoke_vii(120, $2 + 52 | 0, $9 + 52 | 0);
$12 = __THREW__;
__THREW__ = 0;
if ($12 & 1) {
$77 = ___cxa_find_matching_catch_2() | 0;
$78 = tempRet0;
__ZdlPv($7);
___resumeException($77 | 0);
}
$14 = $2 + 64 | 0;
$15 = $9 + 64 | 0;
HEAP32[$14 >> 2] = HEAP32[$15 >> 2];
HEAP32[$14 + 4 >> 2] = HEAP32[$15 + 4 >> 2];
HEAP32[$14 + 8 >> 2] = HEAP32[$15 + 8 >> 2];
HEAP32[$14 + 12 >> 2] = HEAP32[$15 + 12 >> 2];
HEAP32[$14 + 16 >> 2] = HEAP32[$15 + 16 >> 2];
$16 = $0 + 13 | 0;
$17 = HEAP8[$16 >> 0] | 0;
$21 = $17 & 8;
HEAP16[$3 >> 1] = HEAP16[$0 + 14 >> 1] | 0;
__THREW__ = 0;
HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$3 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$3 + 1 >> 0] | 0;
invoke_viiiiii(6, $7 | 0, $2 | 0, $1 | 0, ($17 & 4 ? $21 >>> 1 | 1 : $21 >>> 2) | 0, $tmpcast$byval_copy | 0, ($17 & 64) != 0 | 0);
$30 = __THREW__;
__THREW__ = 0;
if ($30 & 1) {
$77 = ___cxa_find_matching_catch_2() | 0;
$78 = tempRet0;
__ZdlPv($7);
___resumeException($77 | 0);
}
HEAP32[$4 >> 2] = $7;
$33 = HEAP32[$0 + 20 >> 2] | 0;
if ($33 | 0) if (HEAP8[$16 >> 0] & 4) if ((HEAP32[HEAP32[$33 + 56 >> 2] >> 2] | 0) == 1) {
$42 = $7 + 36 | 0;
$43 = HEAPU16[$42 >> 1] | 0 | (HEAPU8[$42 + 2 >> 0] | 0) << 16;
if (($43 & 255 | 0) == 1) {
$47 = $43 & 15732480 | 139273;
HEAP16[$42 >> 1] = $47;
HEAP8[$42 + 2 >> 0] = $47 >>> 16;
if (1) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(28937, $vararg_buffer);
}
}
}
$50 = HEAP32[$0 + 24 >> 2] | 0;
if (!$50) {
STACKTOP = sp;
return;
}
if (!(HEAP8[$16 >> 0] & 8)) {
STACKTOP = sp;
return;
}
if ((HEAP32[HEAP32[$50 + 56 >> 2] >> 2] | 0) != 1) {
STACKTOP = sp;
return;
}
$60 = (HEAP32[$4 >> 2] | 0) + 40 | 0;
$61 = HEAPU16[$60 >> 1] | 0 | (HEAPU8[$60 + 2 >> 0] | 0) << 16;
if (($61 & 255 | 0) != 1) {
STACKTOP = sp;
return;
}
$65 = $61 & 16776960 | 9;
HEAP16[$60 >> 1] = $65;
HEAP8[$60 + 2 >> 0] = $65 >>> 16;
$67 = (HEAP32[$4 >> 2] | 0) + 40 | 0;
$70 = (HEAPU16[$67 >> 1] | 0 | (HEAPU8[$67 + 2 >> 0] | 0) << 16) & 16748543 | 8192;
HEAP16[$67 >> 1] = $70;
HEAP8[$67 + 2 >> 0] = $70 >>> 16;
$72 = (HEAP32[$4 >> 2] | 0) + 40 | 0;
$75 = (HEAPU16[$72 >> 1] | 0 | (HEAPU8[$72 + 2 >> 0] | 0) << 16) & 15761407 | 131072;
HEAP16[$72 >> 1] = $75;
HEAP8[$72 + 2 >> 0] = $75 >>> 16;
if (!1) {
STACKTOP = sp;
return;
}
__Z7LogTimev() | 0;
__Z7eprintfPKcz(29012, $vararg_buffer3);
STACKTOP = sp;
return;
}
function __ZNK19TwoHAbstractPosture16isTotallyDefinedE12SET_OF_HANDS($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $123 = 0, $124 = 0, $131 = 0, $28 = 0, $29 = 0, $38 = 0, $6 = 0, $60 = 0, $61 = 0, $73 = 0, $95 = 0, $96 = 0, label = 0;
do if (($1 | 4 | 0) == 5) {
$6 = HEAP32[16607] | 0;
if (($6 ^ HEAP32[$0 + 4 >> 2]) & 16777215 | 0) if ((HEAP32[$0 + 16 >> 2] ^ $6) & 16777215 | 0) {
if (Math_fround(HEAPF32[$0 + 20 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 24 >> 2]) == Math_fround(0.0)) if (!(Math_fround(HEAPF32[$0 + 28 >> 2]) != Math_fround(0.0))) break;
if (Math_fround(HEAPF32[$0 + 32 >> 2]) == Math_fround(0.0)) if (!(Math_fround(HEAPF32[$0 + 36 >> 2]) != Math_fround(0.0))) break;
$28 = $0 + 56 | 0;
$29 = HEAP32[$28 >> 2] | 0;
if ($29 | 0) if (__ZNK9Handshape7definedEv($29) | 0) if (HEAP32[(HEAP32[$28 >> 2] | 0) + 236 >> 2] | 0) label = 12;
}
} else label = 12; while (0);
do if ((label | 0) == 12) {
switch ($1 | 0) {
case 2:
case 5:
break;
default:
{
$131 = 1;
return $131 | 0;
}
}
$38 = HEAP32[16607] | 0;
if (($38 ^ HEAP32[$0 + 76 >> 2]) & 16777215 | 0) if ((HEAP32[$0 + 88 >> 2] ^ $38) & 16777215 | 0) {
if (Math_fround(HEAPF32[$0 + 92 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 96 >> 2]) == Math_fround(0.0)) if (!(Math_fround(HEAPF32[$0 + 100 >> 2]) != Math_fround(0.0))) break;
if (Math_fround(HEAPF32[$0 + 104 >> 2]) == Math_fround(0.0)) if (!(Math_fround(HEAPF32[$0 + 108 >> 2]) != Math_fround(0.0))) break;
$60 = $0 + 128 | 0;
$61 = HEAP32[$60 >> 2] | 0;
if ($61 | 0) if (__ZNK9Handshape7definedEv($61) | 0) if (HEAP32[(HEAP32[$60 >> 2] | 0) + 236 >> 2] | 0) {
$131 = 1;
return $131 | 0;
}
}
} while (0);
if (!(HEAP32[$0 + 144 >> 2] | 0)) {
$131 = 0;
return $131 | 0;
}
$73 = HEAP32[16607] | 0;
if (!(($73 ^ HEAP32[$0 + 160 >> 2]) & 16777215)) {
$131 = 0;
return $131 | 0;
}
if (!(($73 ^ HEAP32[$0 + 16 >> 2]) & 16777215)) {
$131 = 0;
return $131 | 0;
}
if (Math_fround(HEAPF32[$0 + 20 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 24 >> 2]) == Math_fround(0.0)) if (!(Math_fround(HEAPF32[$0 + 28 >> 2]) != Math_fround(0.0))) {
$131 = 0;
return $131 | 0;
}
if (Math_fround(HEAPF32[$0 + 32 >> 2]) == Math_fround(0.0)) if (!(Math_fround(HEAPF32[$0 + 36 >> 2]) != Math_fround(0.0))) {
$131 = 0;
return $131 | 0;
}
$95 = $0 + 56 | 0;
$96 = HEAP32[$95 >> 2] | 0;
if (!$96) {
$131 = 0;
return $131 | 0;
}
if (!(__ZNK9Handshape7definedEv($96) | 0)) {
$131 = 0;
return $131 | 0;
}
if (!(HEAP32[(HEAP32[$95 >> 2] | 0) + 236 >> 2] | 0)) {
$131 = 0;
return $131 | 0;
}
if (!((HEAP32[16607] ^ HEAP32[$0 + 88 >> 2]) & 16777215)) {
$131 = 0;
return $131 | 0;
}
if (Math_fround(HEAPF32[$0 + 92 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 96 >> 2]) == Math_fround(0.0)) if (!(Math_fround(HEAPF32[$0 + 100 >> 2]) != Math_fround(0.0))) {
$131 = 0;
return $131 | 0;
}
if (Math_fround(HEAPF32[$0 + 104 >> 2]) == Math_fround(0.0)) if (!(Math_fround(HEAPF32[$0 + 108 >> 2]) != Math_fround(0.0))) {
$131 = 0;
return $131 | 0;
}
$123 = $0 + 128 | 0;
$124 = HEAP32[$123 >> 2] | 0;
if (!$124) {
$131 = 0;
return $131 | 0;
}
if (!(__ZNK9Handshape7definedEv($124) | 0)) {
$131 = 0;
return $131 | 0;
}
$131 = (HEAP32[(HEAP32[$123 >> 2] | 0) + 236 >> 2] | 0) != 0;
return $131 | 0;
}
function __ZN14RepeatMovementC2EPKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $10 = 0, $11 = 0, $15 = 0, $18 = 0, $21 = 0, $24 = 0, $27 = 0, $30 = 0, $33 = 0, $36 = 0, $39 = 0, $41 = 0, $42 = 0, $53 = 0, $57 = 0, $58 = 0, $6 = 0, $62 = 0, $66 = 0, $67 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0;
HEAP32[$0 >> 2] = 1984;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 16 >> 2] = 0;
HEAP8[$0 + 20 >> 0] = 0;
__ZN25TwoHConcretePostureChangeC2Ev($0 + 60 | 0);
$6 = $0 + 4 | 0;
$7 = $1 + 4 | 0;
_memcpy($6 | 0, $7 | 0, 524) | 0;
HEAP32[$0 >> 2] = 2656;
$8 = $0 + 544 | 0;
HEAPF32[$8 >> 2] = Math_fround(0.0);
$9 = $0 + 548 | 0;
HEAPF32[$9 >> 2] = Math_fround(0.0);
$10 = $0 + 552 | 0;
HEAPF32[$10 >> 2] = Math_fround(0.0);
$11 = $0 + 568 | 0;
HEAP16[$11 >> 1] = 1;
HEAP8[$0 + 570 >> 0] = 0;
HEAP8[$0 + 571 >> 0] = 1;
HEAP8[$0 + 572 >> 0] = 0;
__THREW__ = 0;
invoke_vi(143, $11 | 0);
$15 = __THREW__;
__THREW__ = 0;
if (!($15 & 1)) {
__THREW__ = 0;
invoke_vi(98, $0 + 592 | 0);
$18 = __THREW__;
__THREW__ = 0;
if (!($18 & 1)) {
__THREW__ = 0;
invoke_vi(98, $0 + 604 | 0);
$21 = __THREW__;
__THREW__ = 0;
if (!($21 & 1)) {
__THREW__ = 0;
invoke_vi(98, $0 + 616 | 0);
$24 = __THREW__;
__THREW__ = 0;
if (!($24 & 1)) {
__THREW__ = 0;
invoke_vi(98, $0 + 628 | 0);
$27 = __THREW__;
__THREW__ = 0;
if (!($27 & 1)) {
__THREW__ = 0;
invoke_vi(98, $0 + 640 | 0);
$30 = __THREW__;
__THREW__ = 0;
if (!($30 & 1)) {
__THREW__ = 0;
invoke_vi(98, $0 + 652 | 0);
$33 = __THREW__;
__THREW__ = 0;
if (!($33 & 1)) {
__THREW__ = 0;
invoke_vi(98, $0 + 664 | 0);
$36 = __THREW__;
__THREW__ = 0;
if (!($36 & 1)) {
__THREW__ = 0;
invoke_vi(98, $0 + 676 | 0);
$39 = __THREW__;
__THREW__ = 0;
if (!($39 & 1)) {
_memcpy($6 | 0, $7 | 0, 524) | 0;
$41 = $0 + 528 | 0;
$42 = $1 + 528 | 0;
HEAP32[$41 >> 2] = HEAP32[$42 >> 2];
HEAP32[$41 + 4 >> 2] = HEAP32[$42 + 4 >> 2];
HEAP32[$41 + 8 >> 2] = HEAP32[$42 + 8 >> 2];
HEAP32[$41 + 12 >> 2] = HEAP32[$42 + 12 >> 2];
if (($0 | 0) != ($1 | 0)) {
HEAP32[$8 >> 2] = HEAP32[$1 + 544 >> 2];
HEAP32[$9 >> 2] = HEAP32[$1 + 548 >> 2];
HEAP32[$10 >> 2] = HEAP32[$1 + 552 >> 2];
}
_memcpy($0 + 556 | 0, $1 + 556 | 0, 148) | 0;
$53 = HEAP32[$1 + 696 >> 2] | 0;
__THREW__ = 0;
$57 = invoke_ii(HEAP32[(HEAP32[$53 >> 2] | 0) + 8 >> 2] | 0, $53 | 0) | 0;
$58 = __THREW__;
__THREW__ = 0;
if (!($58 & 1)) {
HEAP32[$0 + 696 >> 2] = $57;
$62 = HEAP32[$1 + 700 >> 2] | 0;
__THREW__ = 0;
$66 = invoke_ii(HEAP32[(HEAP32[$62 >> 2] | 0) + 8 >> 2] | 0, $62 | 0) | 0;
$67 = __THREW__;
__THREW__ = 0;
if (!($67 & 1)) {
HEAP32[$0 + 700 >> 2] = $66;
return;
}
}
}
}
}
}
}
}
}
}
}
$70 = ___cxa_find_matching_catch_2() | 0;
HEAP32[$0 >> 2] = 1984;
HEAP32[$0 + 452 >> 2] = 0;
HEAP32[$0 + 340 >> 2] = 0;
HEAP32[$0 + 228 >> 2] = 0;
HEAP32[$0 + 116 >> 2] = 0;
___resumeException($70 | 0);
}
function __ZNK15TorsoDecollider12ForceOutsideERK6VectorRS0_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$05373112 = 0, $$3 = 0, $$lcssa106 = 0, $$pre = 0, $$pre86 = f0, $13 = f0, $15 = 0, $17 = 0, $18 = f0, $22 = f0, $28 = 0.0, $30 = 0, $31 = 0, $36 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $46 = 0, $5 = 0, $52 = 0, $54 = f0, $7 = f0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$vararg_buffer4 = sp + 24 | 0;
$vararg_buffer2 = sp + 16 | 0;
$vararg_buffer = sp;
$4 = HEAP32[$0 + 8 >> 2] | 0;
$5 = HEAP32[$4 >> 2] | 0;
$7 = Math_fround(HEAPF32[$5 + 28 >> 2]);
$13 = Math_fround(Math_fround($7 - Math_fround(HEAPF32[(HEAP32[$4 + 4 >> 2] | 0) + 28 >> 2])) / Math_fround(3.0));
$15 = HEAP16[$0 + 4 >> 1] | 0;
$17 = $1 + 4 | 0;
$18 = Math_fround(HEAPF32[$17 >> 2]);
L1 : do if ($15 << 16 >> 16 > 0) {
L3 : do if ($18 == $7) $$lcssa106 = $5; else {
$$05373112 = 0;
$22 = $7;
$30 = 0;
while (1) {
if ($18 > Math_fround($13 + $22)) break;
$45 = $$05373112 + 1 << 16 >> 16;
$46 = $45 << 16 >> 16;
if ($45 << 16 >> 16 >= $15 << 16 >> 16) break L1;
$$pre = HEAP32[$4 + ($46 << 2) >> 2] | 0;
$$pre86 = Math_fround(HEAPF32[$$pre + 28 >> 2]);
if ($18 == $$pre86) {
$$lcssa106 = $$pre;
break L3;
} else {
$$05373112 = $45;
$22 = $$pre86;
$30 = $46;
}
}
if (!($$05373112 << 16 >> 16)) {
HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
if (!0) {
$$3 = 0;
STACKTOP = sp;
return $$3 | 0;
}
$28 = +Math_fround(HEAPF32[$17 >> 2]);
HEAPF64[$vararg_buffer >> 3] = $28;
HEAPF64[$vararg_buffer + 8 >> 3] = +$22;
__Z7eprintfPKcz(9999, $vararg_buffer);
$$3 = 0;
STACKTOP = sp;
return $$3 | 0;
}
$31 = __Znwj(136) | 0;
__THREW__ = 0;
invoke_viiif(6, $31 | 0, HEAP32[$4 + ($30 + -1 << 2) >> 2] | 0, HEAP32[$4 + ($30 << 2) >> 2] | 0, +$18);
$36 = __THREW__;
__THREW__ = 0;
if ($36 & 1) {
$43 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($31);
___resumeException($43 | 0);
}
$38 = __ZNK10TorsoCurve12ForceOutsideERK6VectorRS0_($31, $1, $2) | 0;
if (!(0 == 0 | $38 ^ 1)) {
__Z7eprintfPKcz(10052, $vararg_buffer2);
__ZNK6Vector5printEP8_IO_FILEi($1, HEAP32[16082] | 0, 3);
__Z5eputsPKc(42891);
__ZNK6Vector5printEP8_IO_FILEi($2, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__ZNK10TorsoCurve5printEP8_IO_FILEs($31, HEAP32[16082] | 0, 3);
}
__ZdlPv($31);
$$3 = $38;
STACKTOP = sp;
return $$3 | 0;
} while (0);
$$3 = __ZNK10TorsoCurve12ForceOutsideERK6VectorRS0_($$lcssa106, $1, $2) | 0;
STACKTOP = sp;
return $$3 | 0;
} while (0);
$52 = HEAP32[$4 + (($15 << 16 >> 16) + -1 << 2) >> 2] | 0;
$54 = Math_fround(HEAPF32[$52 + 28 >> 2]);
if ($18 > Math_fround($54 - $13)) {
$$3 = __ZNK10TorsoCurve12ForceOutsideERK6VectorRS0_($52, $1, $2) | 0;
STACKTOP = sp;
return $$3 | 0;
}
if (0) {
HEAPF64[$vararg_buffer4 >> 3] = +$18;
HEAPF64[$vararg_buffer4 + 8 >> 3] = +$54;
__Z7eprintfPKcz(10072, $vararg_buffer4);
};
HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
$$3 = 0;
STACKTOP = sp;
return $$3 | 0;
}
function __ZN11HanimAvatar15SetFaceSitePairE6SiteIDssRK6Vector($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$sroa$011$0$insert$insert = 0, $$sroa$09$0$insert$insert = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $24 = 0, $25 = f0, $28 = 0, $30 = f0, $33 = 0, $34 = 0, $35 = 0, $42 = f0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $tmpcast8$i$i$i$byval_copy = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$tmpcast8$i$i$i$byval_copy = sp + 32 | 0;
$5 = sp + 28 | 0;
$6 = sp + 24 | 0;
$7 = sp + 12 | 0;
$8 = sp;
$10 = HEAP32[$1 >> 2] & -3841;
$$sroa$011$0$insert$insert = $10 | 512;
$11 = $0 + 72 | 0;
$14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 8 >> 2] | 0;
$15 = $0 + 488 | 0;
$16 = HEAP32[$15 >> 2] | 0;
$17 = $2 << 16 >> 16;
if ($2 << 16 >> 16 < 0) label = 3; else if ((HEAP32[$16 + 12 >> 2] | 0) > ($17 | 0)) __ZN6VectorC2ERKS_($7, (HEAP32[$16 >> 2] | 0) + ($17 * 12 | 0) | 0); else label = 3;
if ((label | 0) == 3) __ZN6VectorC2Ev($7);
$24 = $0 + 380 | 0;
$25 = Math_fround(HEAPF32[$24 >> 2]);
HEAP32[$5 >> 2] = $$sroa$011$0$insert$insert;
HEAP8[$tmpcast8$i$i$i$byval_copy >> 0] = HEAP8[$5 >> 0] | 0;
HEAP8[$tmpcast8$i$i$i$byval_copy + 1 >> 0] = HEAP8[$5 + 1 >> 0] | 0;
HEAP8[$tmpcast8$i$i$i$byval_copy + 2 >> 0] = HEAP8[$5 + 2 >> 0] | 0;
HEAP8[$tmpcast8$i$i$i$byval_copy + 3 >> 0] = HEAP8[$5 + 3 >> 0] | 0;
__ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast8$i$i$i$byval_copy, $14, $7, $25) | 0;
HEAP32[$6 >> 2] = $$sroa$011$0$insert$insert;
HEAP8[$tmpcast8$i$i$i$byval_copy >> 0] = HEAP8[$6 >> 0] | 0;
HEAP8[$tmpcast8$i$i$i$byval_copy + 1 >> 0] = HEAP8[$6 + 1 >> 0] | 0;
HEAP8[$tmpcast8$i$i$i$byval_copy + 2 >> 0] = HEAP8[$6 + 2 >> 0] | 0;
HEAP8[$tmpcast8$i$i$i$byval_copy + 3 >> 0] = HEAP8[$6 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $tmpcast8$i$i$i$byval_copy, $4, $25);
__ZN6VectorC2ERKS_($8, $4);
$28 = $8 + (HEAP16[36079] << 2) | 0;
$30 = Math_fround(-Math_fround(HEAPF32[$28 >> 2]));
HEAPF32[$28 >> 2] = $30;
$$sroa$09$0$insert$insert = $10 | 256;
$33 = HEAP32[(HEAP32[$11 >> 2] | 0) + 8 >> 2] | 0;
$34 = HEAP32[$15 >> 2] | 0;
$35 = $3 << 16 >> 16;
if ($3 << 16 >> 16 < 0) label = 7; else if ((HEAP32[$34 + 12 >> 2] | 0) > ($35 | 0)) __ZN6VectorC2ERKS_($7, (HEAP32[$34 >> 2] | 0) + ($35 * 12 | 0) | 0); else label = 7;
if ((label | 0) == 7) __ZN6VectorC2Ev($7);
$42 = Math_fround(HEAPF32[$24 >> 2]);
HEAP32[$5 >> 2] = $$sroa$09$0$insert$insert;
HEAP8[$tmpcast8$i$i$i$byval_copy >> 0] = HEAP8[$5 >> 0] | 0;
HEAP8[$tmpcast8$i$i$i$byval_copy + 1 >> 0] = HEAP8[$5 + 1 >> 0] | 0;
HEAP8[$tmpcast8$i$i$i$byval_copy + 2 >> 0] = HEAP8[$5 + 2 >> 0] | 0;
HEAP8[$tmpcast8$i$i$i$byval_copy + 3 >> 0] = HEAP8[$5 + 3 >> 0] | 0;
__ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast8$i$i$i$byval_copy, $33, $7, $42) | 0;
HEAP32[$6 >> 2] = $$sroa$09$0$insert$insert;
HEAP8[$tmpcast8$i$i$i$byval_copy >> 0] = HEAP8[$6 >> 0] | 0;
HEAP8[$tmpcast8$i$i$i$byval_copy + 1 >> 0] = HEAP8[$6 + 1 >> 0] | 0;
HEAP8[$tmpcast8$i$i$i$byval_copy + 2 >> 0] = HEAP8[$6 + 2 >> 0] | 0;
HEAP8[$tmpcast8$i$i$i$byval_copy + 3 >> 0] = HEAP8[$6 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $tmpcast8$i$i$i$byval_copy, $8, $42);
STACKTOP = sp;
return;
}
function __ZN18FingerPlayMovement17GetCurrentPostureER19TwoHConcretePosturefb($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
var $$0$i = f0, $10 = f0, $11 = 0, $12 = 0, $13 = f0, $19 = f0, $20 = f0, $21 = f0, $25 = 0, $27 = 0, $29 = 0, $31 = f0, $33 = f0, $36 = f0, $37 = f0, $38 = f0, $4 = 0, $41 = f0, $42 = f0, $43 = f0, $44 = f0, $49 = f0, $5 = f0, $52 = 0, $54 = 0, $6 = 0, $60 = f0, $64 = f0, $70 = 0, $73 = 0, $79 = f0, $8 = f0, $83 = f0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$4 = $0 + 40 | 0;
$5 = Math_fround(HEAPF32[$4 >> 2]);
$6 = $0 + 44 | 0;
$8 = Math_fround($5 - Math_fround(HEAPF32[$6 >> 2]));
if (!($8 <= Math_fround(0.0))) {
$10 = Math_fround($2 / $8);
$11 = $10 < Math_fround(0.0);
$12 = $10 > Math_fround(1.0);
$13 = $12 ? Math_fround(1.0) : $10;
$19 = $11 ? Math_fround(0.0) : $13;
} else $19 = Math_fround(1.0);
$20 = Math_fround(__ZNK10Trajectory16lookupByFractionEf(HEAP32[66492 + (HEAP32[$0 + 12 >> 2] << 2) >> 2] | 0, $19));
$21 = Math_fround(Math_fround(1.0) - $20);
if (0) {
$25 = HEAP32[$0 + 4 >> 2] | 0;
$27 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[16658] | 0, $25) | 0;
HEAP32[$vararg_buffer >> 2] = $25;
HEAP32[$vararg_buffer + 4 >> 2] = $27;
HEAPF64[$vararg_buffer + 8 >> 3] = +$2;
__Z7eprintfPKcz(35945, $vararg_buffer);
}
$29 = $0 + 8 | 0;
__ZNK25TwoHConcretePostureChange11interpolateER19TwoHConcretePosturef12SET_OF_HANDSb($0 + 60 | 0, $1, $3 ? $20 : $21, HEAP32[$29 >> 2] | 0, $3);
$31 = Math_fround(HEAPF32[$4 >> 2]);
$33 = Math_fround($31 - Math_fround(HEAPF32[$6 >> 2]));
if ($2 <= Math_fround(0.0) | $33 <= $2) {
STACKTOP = sp;
return;
}
$36 = Math_fround($33 - $2);
$37 = Math_fround(($3 ? $2 : $36) / $33);
$38 = Math_fround(HEAPF32[589]);
$41 = Math_fround($38 * Math_fround(HEAPF32[$0 + 544 >> 2]));
$42 = Math_fround($37 * $41);
$43 = Math_fround(HEAPF32[16338]);
$44 = Math_fround(HEAPF32[16339]);
do if (!($42 <= Math_fround(0.0))) {
if ($42 < $43) {
$$0$i = Math_fround($42 / $43);
break;
}
if ($42 > $41) $$0$i = Math_fround(0.0); else {
$49 = Math_fround($41 - $42);
if ($49 < $44) $$0$i = Math_fround($49 / $44); else $$0$i = Math_fround(1.0);
}
} else $$0$i = Math_fround(0.0); while (0);
$52 = HEAP32[$29 >> 2] | 0;
switch ($52 | 0) {
case 3:
case 5:
{
$54 = HEAP32[$0 + 532 >> 2] | 0;
if (!$54) $70 = $52; else {
HEAP32[$1 + 92 >> 2] = $54;
HEAPF32[$1 + 96 >> 2] = $42;
$60 = Math_fround($$0$i * Math_fround(HEAPF32[$0 + 536 >> 2]));
HEAPF32[$1 + 100 >> 2] = $60;
$64 = Math_fround($$0$i * Math_fround(HEAPF32[$0 + 540 >> 2]));
HEAPF32[$1 + 104 >> 2] = $64;
HEAP16[$1 + 110 >> 1] = HEAP16[$0 + 550 >> 1] | 0;
$70 = HEAP32[$29 >> 2] | 0;
}
break;
}
default:
$70 = $52;
}
if (($70 | 1 | 0) != 5) {
STACKTOP = sp;
return;
}
$73 = HEAP32[$0 + 528 >> 2] | 0;
if (!$73) {
STACKTOP = sp;
return;
}
HEAP32[$1 + 204 >> 2] = $73;
HEAPF32[$1 + 208 >> 2] = $42;
$79 = Math_fround($$0$i * Math_fround(HEAPF32[$0 + 536 >> 2]));
HEAPF32[$1 + 212 >> 2] = $79;
$83 = Math_fround($$0$i * Math_fround(HEAPF32[$0 + 540 >> 2]));
HEAPF32[$1 + 216 >> 2] = $83;
HEAP16[$1 + 220 >> 1] = HEAP16[$0 + 548 >> 1] | 0;
STACKTOP = sp;
return;
}
function __ZL16CompleteHandsiteR6SiteIDRK14SiGMLHandshape($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$not = 0, $$not43 = 0, $$off15 = 0, $$sink = 0, $$sink66 = 0, $$sink67 = 0, $11 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $25 = 0, $27 = 0, $3 = 0, $30 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $45 = 0, $48 = 0, $6 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$2 = HEAPU16[$0 >> 1] | 0 | (HEAPU8[$0 + 2 >> 0] | 0) << 16;
$3 = $2 & 255;
$4 = $3 & 16777215;
$6 = $2 & 1015808;
if (!(($6 & 16777215 | 0) != 0 | ($4 + -1 | 0) >>> 0 < 11)) {
STACKTOP = sp;
return;
}
$8 = ($3 & 16777215 | 0) == 0;
$9 = ($6 & 16777215 | 0) == 0;
$11 = ($2 & 28672 | 0) == 0;
if (!($11 | ($8 | $9))) {
STACKTOP = sp;
return;
}
$$not = $8 ^ 1;
$$not43 = $11 ^ 1;
if (!($$not | $9 ^ 1 | $$not43)) {
STACKTOP = sp;
return;
}
L10 : do if (($3 & 16777215 | 0) == 10) switch (($2 & 16777215) >>> 12 & 7) {
case 3:
{
$15 = $2 & 15761407 | 65536;
HEAP16[$0 >> 1] = $15;
HEAP8[$0 + 2 >> 0] = $15 >>> 16;
STACKTOP = sp;
return;
}
case 4:
{
$17 = $2 & 15761407 | 524288;
HEAP16[$0 >> 1] = $17;
HEAP8[$0 + 2 >> 0] = $17 >>> 16;
STACKTOP = sp;
return;
}
default:
break L10;
} while (0);
if (($4 + -7 | 0) >>> 0 < 5) {
if ($9) {
$19 = __ZNK14SiGMLHandshape13DefaultDigitsEv($1) | 0;
$25 = ($19 & 31) << 15 | (HEAPU16[$0 >> 1] | 0 | (HEAPU8[$0 + 2 >> 0] | 0) << 16) & 15761407;
HEAP16[$0 >> 1] = $25;
HEAP8[$0 + 2 >> 0] = $25 >>> 16;
$27 = $25;
} else $27 = $2;
if (($27 & 255 | 0) == 7 | $$not43) {
STACKTOP = sp;
return;
}
$30 = $27 & 16748543 | 8192;
HEAP16[$0 >> 1] = $30;
HEAP8[$0 + 2 >> 0] = $30 >>> 16;
STACKTOP = sp;
return;
}
if ($9) {
STACKTOP = sp;
return;
}
switch (($2 & 255) << 24 >> 24) {
case 4:
{
$$sink = $2;
$$sink66 = $2 & 16748288;
$$sink67 = 12297;
label = 21;
break;
}
case 5:
{
$$sink = $2;
$$sink66 = $2 & 16748288;
$$sink67 = 16393;
label = 21;
break;
}
case 1:
{
$$sink = $2;
$$sink66 = $2 & 16748288;
$$sink67 = 4105;
label = 21;
break;
}
case 3:
{
$$sink = $2;
$$sink66 = $2 & 16748288;
$$sink67 = 8201;
label = 21;
break;
}
default:
if (!1) $$off15 = ($2 & 16777215) >>> 15 & 65535; else {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(29120, $vararg_buffer);
__ZNK6SiteID5printEP8_IO_FILE($0, HEAP32[16082] | 0);
__Z5eputcc(10);
$37 = HEAPU16[$0 >> 1] | 0 | (HEAPU8[$0 + 2 >> 0] | 0) << 16;
$$sink = $37;
$$sink66 = $37 & 16776960;
$$sink67 = 9;
label = 21;
}
}
if ((label | 0) == 21) {
$39 = $$sink66 | $$sink67;
HEAP16[$0 >> 1] = $39;
HEAP8[$0 + 2 >> 0] = $39 >>> 16;
$$off15 = ($$sink & 16777215) >>> 15 & 65535;
}
if ($9 | $$not) {
STACKTOP = sp;
return;
}
$41 = __ZNK14SiGMLHandshape20DefaultDigitLocationEs($1, $$off15 & 31) | 0;
$43 = $41 & 255;
$45 = (HEAPU16[$0 >> 1] | 0 | (HEAPU8[$0 + 2 >> 0] | 0) << 16) & 16776960 | $43;
HEAP16[$0 >> 1] = $45;
HEAP8[$0 + 2 >> 0] = $45 >>> 16;
if (($43 & 16777215 | 0) == 7 | $$not43) {
STACKTOP = sp;
return;
}
$48 = $45 & 16748543 | 8192;
HEAP16[$0 >> 1] = $48;
HEAP8[$0 + 2 >> 0] = $48 >>> 16;
STACKTOP = sp;
return;
}
function __ZNK11HanimAvatar15siteStdDistanceERK10SiteIDPair($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = f0, $$1$in$i = 0, $$1$in$i17 = 0, $$2$i = f0, $$2$i19 = f0, $11 = f0, $14 = f0, $16 = 0, $2 = 0, $22 = 0.0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $34 = f0, $37 = f0, $39 = 0, $4 = 0, $45 = 0.0, $5 = 0, $6 = 0, $9 = 0, $tmpcast$i14$byval_copy = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$tmpcast$i14$byval_copy = sp + 28 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$2 = sp + 24 | 0;
$3 = sp + 20 | 0;
$4 = sp + 16 | 0;
$5 = HEAP32[$1 >> 2] | 0;
HEAP32[$2 >> 2] = 0;
HEAP32[$3 >> 2] = 0;
HEAP32[$4 >> 2] = $5;
HEAP8[$tmpcast$i14$byval_copy >> 0] = HEAP8[$4 >> 0] | 0;
HEAP8[$tmpcast$i14$byval_copy + 1 >> 0] = HEAP8[$4 + 1 >> 0] | 0;
HEAP8[$tmpcast$i14$byval_copy + 2 >> 0] = HEAP8[$4 + 2 >> 0] | 0;
HEAP8[$tmpcast$i14$byval_copy + 3 >> 0] = HEAP8[$4 + 3 >> 0] | 0;
__ZNK11HanimAvatar12locateSiteIDEb6SiteIDP6VectorRP5JointRP4Site($0, 0, $tmpcast$i14$byval_copy, 0, $2, $3);
$6 = HEAP32[$3 >> 2] | 0;
do if (!$6) label = 5; else {
$9 = HEAP32[$6 + 24 >> 2] | 0;
if ($9 | 0) {
$11 = Math_fround(__ZNK6Vector6lengthEv($9));
if (!($11 == Math_fround(0.0))) {
$$2$i = $11;
break;
}
}
$14 = Math_fround(HEAPF32[$6 + 20 >> 2]);
if ($14 != Math_fround(0.0)) $$2$i = $14; else label = 5;
} while (0);
if ((label | 0) == 5) {
$16 = $5 & 255;
if (($16 + -1 | 0) >>> 0 < 11) $$1$in$i = 64864; else if (($5 & 252 | 0) == 12) $$1$in$i = 64868; else if (($16 + -25 | 0) >>> 0 < 19) $$1$in$i = 64872; else {
$22 = +Math_fround(HEAPF32[16219]);
HEAPF64[$vararg_buffer >> 3] = $22;
__Z7eprintfPKcz(19460, $vararg_buffer);
$$1$in$i = 64876;
}
$$2$i = Math_fround(HEAPF32[$$1$in$i >> 2]);
}
if (!((HEAP32[16607] ^ HEAP32[$1 + 4 >> 2]) & 16777215)) {
$$0 = $$2$i;
STACKTOP = sp;
return Math_fround($$0);
}
$28 = HEAP32[$1 >> 2] | 0;
HEAP32[$2 >> 2] = 0;
HEAP32[$3 >> 2] = 0;
HEAP32[$4 >> 2] = $28;
HEAP8[$tmpcast$i14$byval_copy >> 0] = HEAP8[$4 >> 0] | 0;
HEAP8[$tmpcast$i14$byval_copy + 1 >> 0] = HEAP8[$4 + 1 >> 0] | 0;
HEAP8[$tmpcast$i14$byval_copy + 2 >> 0] = HEAP8[$4 + 2 >> 0] | 0;
HEAP8[$tmpcast$i14$byval_copy + 3 >> 0] = HEAP8[$4 + 3 >> 0] | 0;
__ZNK11HanimAvatar12locateSiteIDEb6SiteIDP6VectorRP5JointRP4Site($0, 0, $tmpcast$i14$byval_copy, 0, $2, $3);
$29 = HEAP32[$3 >> 2] | 0;
do if (!$29) label = 15; else {
$32 = HEAP32[$29 + 24 >> 2] | 0;
if ($32 | 0) {
$34 = Math_fround(__ZNK6Vector6lengthEv($32));
if (!($34 == Math_fround(0.0))) {
$$2$i19 = $34;
break;
}
}
$37 = Math_fround(HEAPF32[$29 + 20 >> 2]);
if ($37 != Math_fround(0.0)) $$2$i19 = $37; else label = 15;
} while (0);
if ((label | 0) == 15) {
$39 = $28 & 255;
if (($39 + -1 | 0) >>> 0 < 11) $$1$in$i17 = 64864; else if (($28 & 252 | 0) == 12) $$1$in$i17 = 64868; else if (($39 + -25 | 0) >>> 0 < 19) $$1$in$i17 = 64872; else {
$45 = +Math_fround(HEAPF32[16219]);
HEAPF64[$vararg_buffer1 >> 3] = $45;
__Z7eprintfPKcz(19460, $vararg_buffer1);
$$1$in$i17 = 64876;
}
$$2$i19 = Math_fround(HEAPF32[$$1$in$i17 >> 2]);
}
$$0 = Math_fround(Math_fround($$2$i + $$2$i19) * Math_fround(.5));
STACKTOP = sp;
return Math_fround($$0);
}
function _animgen_lite_doSignCASARP($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
var $12 = f0, $18 = 0, $20 = 0, $22 = 0, $23 = 0, $28 = 0, $29 = 0, $35 = 0, $38 = f0, $39 = 0, $41 = f0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $53 = 0, $6 = 0, $62 = 0, $7 = 0, $9 = f0, $vararg_buffer = 0, $vararg_buffer3 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer3 = sp + 8 | 0;
$vararg_buffer = sp;
$6 = sp + 12 | 0;
$7 = HEAP32[17859] | 0;
$9 = Math_fround(HEAPF32[$7 + 60 >> 2]);
$12 = Math_fround($9 - Math_fround(HEAPF32[$7 + 56 >> 2]));
HEAP32[17850] = 0;
do if (!(HEAP8[72311] | 0)) {
HEAP32[17850] = 7;
if ($1 | 0) FUNCTION_TABLE_iiii[$1 & 31]($5, 7, 0) | 0;
} else {
if (!$0) {
HEAP32[17850] = 6;
if (!$1) break;
FUNCTION_TABLE_iiii[$1 & 31]($5, 6, 0) | 0;
break;
}
$18 = __Znwj(16) | 0;
HEAP32[$18 + 4 >> 2] = 10;
$20 = $18 + 12 | 0;
HEAP32[$20 >> 2] = 0;
HEAP32[$18 >> 2] = 0;
HEAP32[$18 + 8 >> 2] = 0;
$22 = HEAP32[17866] | 0;
$23 = HEAP32[17865] | 0;
HEAP32[$6 >> 2] = 0;
HEAP32[$6 + 4 >> 2] = $22;
HEAP32[$6 + 8 >> 2] = 0;
HEAP32[$6 + 12 >> 2] = $18;
HEAP32[$6 + 16 >> 2] = $23;
__THREW__ = 0;
$28 = invoke_iii(37, $0 | 0, $6 | 0) | 0;
$29 = __THREW__;
__THREW__ = 0;
if ($29 & 1) {
$49 = ___cxa_find_matching_catch_2() | 0;
$50 = tempRet0;
___resumeException($49 | 0);
}
if (!$28) if (HEAP32[$20 >> 2] | 0) {
HEAP32[17850] = 0;
do if (!$1) $53 = 0; else {
__THREW__ = 0;
$38 = Math_fround(+invoke_fi(3, $18 | 0));
$39 = __THREW__;
__THREW__ = 0;
if ($39 & 1) {
$49 = ___cxa_find_matching_catch_2() | 0;
$50 = tempRet0;
___resumeException($49 | 0);
}
$41 = Math_fround($38 - $12);
$45 = ~~Math_fround($41 / Math_fround(HEAPF32[866])) + 1 | 0;
__THREW__ = 0;
$46 = invoke_iiii($1 | 0, $5 | 0, 0, $45 | 0) | 0;
$47 = __THREW__;
__THREW__ = 0;
if ($47 & 1) {
$49 = ___cxa_find_matching_catch_2() | 0;
$50 = tempRet0;
___resumeException($49 | 0);
}
if ($46) {
$53 = (HEAP32[17850] | 0) == 2;
break;
}
HEAP32[17850] = 2;
STACKTOP = sp;
return;
} while (0);
if ((HEAP32[$20 >> 2] | 0) == 0 | $53) {
STACKTOP = sp;
return;
}
__ZN20HanimAnimationRecord10animateARPEP13DynamicArrayPI7GestureEPFvPvPKciiEPFbS4_P7SSFrameEPFvS4_P10PostMortemES4_(HEAP32[17859] | 0, $18, $2, $3, $4, $5);
HEAP32[17856] = HEAP32[(HEAP32[17859] | 0) + 60 >> 2];
HEAP32[17857] = HEAP32[17850];
if ($4 | 0) FUNCTION_TABLE_vii[$4 & 255]($5, 71404);
if (1) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer3 >> 2] = HEAP32[$20 >> 2];
__Z7eprintfPKcz(58246, $vararg_buffer3);
}
$62 = HEAP32[16082] | 0;
if (!$62) {
STACKTOP = sp;
return;
}
_fflush($62) | 0;
STACKTOP = sp;
return;
}
HEAP32[17850] = 5;
if ($1 | 0) {
__THREW__ = 0;
invoke_iiii($1 | 0, $5 | 0, 5, 0) | 0;
$35 = __THREW__;
__THREW__ = 0;
if ($35 & 1) {
$49 = ___cxa_find_matching_catch_2() | 0;
$50 = tempRet0;
___resumeException($49 | 0);
}
}
STACKTOP = sp;
return;
} while (0);
__Z7eprintfPKcz(58215, $vararg_buffer);
STACKTOP = sp;
return;
}
function _little2_sameName($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0 = 0, $$0$pn = 0, $$022 = 0, $$022$pn = 0, $$025 = 0, $$1 = 0, $$123 = 0, $$2 = 0, $$224 = 0, $15 = 0, $18 = 0, $22 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0;
$3 = $0 + 72 | 0;
$$0 = $2;
$$022 = $1;
L1 : while (1) {
$4 = $$022 + 1 | 0;
$5 = HEAP8[$4 >> 0] | 0;
switch ($5 << 24 >> 24) {
case -33:
case -34:
case -35:
case -36:
{
label = 15;
break L1;
break;
}
case 0:
{
$7 = HEAP8[$$022 >> 0] | 0;
switch (HEAP8[$3 + ($7 & 255) >> 0] | 0) {
case 7:
{
label = 6;
break;
}
case 6:
{
$$1 = $$0;
$$123 = $$022;
$18 = $7;
label = 8;
break;
}
case 5:
{
$$2 = $$0;
$$224 = $$022;
$22 = $7;
label = 10;
break;
}
case 27:
case 26:
case 25:
case 24:
case 22:
case 29:
{
$30 = $7;
label = 12;
break;
}
default:
{
label = 15;
break L1;
}
}
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 6;
break;
}
case -1:
{
$6 = HEAP8[$$022 >> 0] | 0;
if (($6 & 255) > 253) {
label = 15;
break L1;
} else {
$30 = $6;
label = 12;
}
break;
}
default:
{
$30 = HEAP8[$$022 >> 0] | 0;
label = 12;
}
}
if ((label | 0) == 6) {
label = 0;
if ((HEAP8[$$022 >> 0] | 0) != (HEAP8[$$0 >> 0] | 0)) {
$$025 = 0;
label = 19;
break;
}
$$1 = $$0 + 1 | 0;
$$123 = $4;
$18 = $5;
label = 8;
} else if ((label | 0) == 12) {
label = 0;
if ((HEAP8[$$0 >> 0] | 0) != $30 << 24 >> 24) {
$$025 = 0;
label = 19;
break;
}
if ((HEAP8[$$0 + 1 >> 0] | 0) == $5 << 24 >> 24) {
$$0$pn = $$0;
$$022$pn = $$022;
} else {
$$025 = 0;
label = 19;
break;
}
}
if ((label | 0) == 8) {
label = 0;
$15 = $$123 + 1 | 0;
if ($18 << 24 >> 24 != (HEAP8[$$1 >> 0] | 0)) {
$$025 = 0;
label = 19;
break;
}
$$2 = $$1 + 1 | 0;
$$224 = $15;
$22 = HEAP8[$15 >> 0] | 0;
label = 10;
}
if ((label | 0) == 10) {
label = 0;
if ($22 << 24 >> 24 != (HEAP8[$$2 >> 0] | 0)) {
$$025 = 0;
label = 19;
break;
}
if ((HEAP8[$$224 + 1 >> 0] | 0) == (HEAP8[$$2 + 1 >> 0] | 0)) {
$$0$pn = $$2;
$$022$pn = $$224;
} else {
$$025 = 0;
label = 19;
break;
}
}
$$0 = $$0$pn + 2 | 0;
$$022 = $$022$pn + 2 | 0;
}
if ((label | 0) == 15) {
L21 : do switch (HEAP8[$$0 + 1 >> 0] | 0) {
case 0:
{
switch (HEAP8[$3 + (HEAPU8[$$0 >> 0] | 0) >> 0] | 0) {
case 27:
case 26:
case 25:
case 24:
case 22:
case 29:
case 7:
case 6:
case 5:
{
$$025 = 0;
break;
}
default:
break L21;
}
return $$025 | 0;
}
case -1:
{
if ((HEAPU8[$$0 >> 0] | 0) <= 253) {
$$025 = 0;
return $$025 | 0;
}
break;
}
case -36:
case -35:
case -34:
case -33:
break;
default:
{
$$025 = 0;
return $$025 | 0;
}
} while (0);
$$025 = 1;
return $$025 | 0;
} else if ((label | 0) == 19) return $$025 | 0;
return 0;
}
function __ZN11OneHGesture18propagateHandStuffER12OneHandStuff($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0$off0 = 0, $$pre$phiZ2D = 0, $10 = 0, $14 = 0, $2 = 0, $27 = 0, $28 = f0, $3 = 0, $31 = 0, $34 = 0, $36 = 0, $4 = 0, $48 = 0, $5 = f0, $57 = 0, $61 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$2 = sp + 8 | 0;
$3 = sp;
$4 = $0 + 20 | 0;
$5 = Math_fround(HEAPF32[$4 >> 2]);
if ($5 == Math_fround(0.0)) {
$7 = $0 + 24 | 0;
if (Math_fround(HEAPF32[$7 >> 2]) == Math_fround(0.0)) {
$10 = $0 + 28 | 0;
if (Math_fround(HEAPF32[$10 >> 2]) != Math_fround(0.0)) {
$14 = $1;
label = 5;
} else if (($4 | 0) == ($1 | 0)) $$0$off0 = 0; else {
HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
HEAP32[$7 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$10 >> 2] = HEAP32[$1 + 8 >> 2];
$$0$off0 = 0;
}
} else label = 3;
} else label = 3;
if ((label | 0) == 3) {
$14 = $1;
label = 5;
}
if ((label | 0) == 5) if (($14 | 0) == ($4 | 0)) $$0$off0 = 1; else {
HEAPF32[$1 >> 2] = $5;
HEAP32[$1 + 4 >> 2] = HEAP32[$0 + 24 >> 2];
HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 28 >> 2];
$$0$off0 = 1;
}
$27 = $0 + 32 | 0;
$28 = Math_fround(HEAPF32[$27 >> 2]);
if ($28 == Math_fround(0.0)) {
$31 = $0 + 36 | 0;
$34 = $1 + 12 | 0;
if (Math_fround(HEAPF32[$31 >> 2]) != Math_fround(0.0)) {
$36 = $34;
label = 12;
} else {
if (($27 | 0) != ($34 | 0)) {
HEAP32[$27 >> 2] = HEAP32[$34 >> 2];
HEAP32[$31 >> 2] = HEAP32[$1 + 16 >> 2];
}
if ($$0$off0) {
$57 = $34;
label = 17;
}
}
} else {
$36 = $1 + 12 | 0;
label = 12;
}
if ((label | 0) == 12) if (($36 | 0) == ($27 | 0)) {
$57 = $27;
label = 17;
} else {
HEAPF32[$1 + 12 >> 2] = $28;
HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 36 >> 2];
$57 = $36;
label = 17;
}
if ((label | 0) == 17) {
$48 = (HEAP8[$1 + 40 >> 0] | 0) != 0;
HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[$3 >> 2] = HEAP32[$57 >> 2];
HEAP32[$3 + 4 >> 2] = HEAP32[$1 + 16 >> 2];
__ZN5SiGML15handOrientationER10Quaternionb10Direction310Direction2($1 + 20 | 0, $48, $2, $3) | 0;
}
$61 = $0 + 56 | 0;
if (__ZNK9Handshape7definedEv(HEAP32[$61 >> 2] | 0) | 0) {
$$pre$phiZ2D = $1 + 36 | 0;
$67 = HEAP32[$61 >> 2] | 0;
HEAP32[$$pre$phiZ2D >> 2] = $67;
$68 = HEAP32[$61 >> 2] | 0;
__ZN9Handshape18CalcJointBendCodesEv($68);
$69 = HEAP32[$61 >> 2] | 0;
$70 = $0 + 72 | 0;
$71 = HEAP32[$70 >> 2] | 0;
$72 = HEAP32[$71 >> 2] | 0;
__ZN9Handshape18CalcJointRotationsEPK7GesturePK11HanimAvatar($69, $71, $72);
STACKTOP = sp;
return;
} else {
$65 = $1 + 36 | 0;
__ZN9Handshape16setHandshapeFromEPKS_(HEAP32[$61 >> 2] | 0, HEAP32[$65 >> 2] | 0);
$$pre$phiZ2D = $65;
$67 = HEAP32[$61 >> 2] | 0;
HEAP32[$$pre$phiZ2D >> 2] = $67;
$68 = HEAP32[$61 >> 2] | 0;
__ZN9Handshape18CalcJointBendCodesEv($68);
$69 = HEAP32[$61 >> 2] | 0;
$70 = $0 + 72 | 0;
$71 = HEAP32[$70 >> 2] | 0;
$72 = HEAP32[$71 >> 2] | 0;
__ZN9Handshape18CalcJointRotationsEPK7GesturePK11HanimAvatar($69, $71, $72);
STACKTOP = sp;
return;
}
}
function _poolGrow($0) {
$0 = $0 | 0;
var $$0 = 0, $$2 = 0, $$phi$trans$insert = 0, $$pre$phi105Z2D = 0, $$pre$phi107Z2D = 0, $1 = 0, $17 = 0, $2 = 0, $23 = 0, $25 = 0, $27 = 0, $31 = 0, $32 = 0, $4 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $5 = 0, $50 = 0, $56 = 0, $59 = 0, $60 = 0, $67 = 0, $69 = 0, $70 = 0, $77 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $86 = 0, $88 = 0, $9 = 0, $92 = 0, $93 = 0;
$1 = $0 + 4 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if ($2 | 0) {
$4 = $0 + 16 | 0;
$5 = HEAP32[$4 >> 2] | 0;
if (!$5) {
HEAP32[$0 >> 2] = $2;
HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
HEAP32[$2 >> 2] = 0;
$8 = HEAP32[$0 >> 2] | 0;
$9 = $8 + 8 | 0;
HEAP32[$4 >> 2] = $9;
HEAP32[$0 + 8 >> 2] = (HEAP32[$8 + 4 >> 2] | 0) + ($8 + 8);
HEAP32[$0 + 12 >> 2] = $9;
$$2 = 1;
return $$2 | 0;
}
$17 = $0 + 8 | 0;
if (((HEAP32[$17 >> 2] | 0) - $5 | 0) < (HEAP32[$2 + 4 >> 2] | 0)) {
$23 = HEAP32[$2 >> 2] | 0;
HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
$25 = HEAP32[$1 >> 2] | 0;
HEAP32[$0 >> 2] = $25;
HEAP32[$1 >> 2] = $23;
$27 = HEAP32[$4 >> 2] | 0;
_memcpy($25 + 8 | 0, $27 | 0, (HEAP32[$17 >> 2] | 0) - $27 | 0) | 0;
$31 = HEAP32[$0 >> 2] | 0;
$32 = $0 + 12 | 0;
HEAP32[$32 >> 2] = (HEAP32[$32 >> 2] | 0) - (HEAP32[$4 >> 2] | 0) + ($31 + 8);
HEAP32[$4 >> 2] = $31 + 8;
HEAP32[$17 >> 2] = (HEAP32[$31 + 4 >> 2] | 0) + ($31 + 8);
$$2 = 1;
return $$2 | 0;
}
}
$41 = HEAP32[$0 >> 2] | 0;
$$phi$trans$insert = $0 + 16 | 0;
do if (!$41) {
$$pre$phi105Z2D = $$phi$trans$insert;
$70 = HEAP32[$$phi$trans$insert >> 2] | 0;
} else {
$43 = HEAP32[$$phi$trans$insert >> 2] | 0;
$46 = $43;
if (($43 | 0) != ($41 + 8 | 0)) {
$$pre$phi105Z2D = $$phi$trans$insert;
$70 = $46;
break;
}
$47 = $0 + 8 | 0;
$50 = (HEAP32[$47 >> 2] | 0) - $46 << 1;
$56 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 + 20 >> 2] | 0) + 4 >> 2] & 63]($41, $50 + 8 | 0) | 0;
HEAP32[$0 >> 2] = $56;
if (!$56) {
$$2 = 0;
return $$2 | 0;
}
HEAP32[$56 + 4 >> 2] = $50;
$59 = HEAP32[$0 >> 2] | 0;
$60 = $0 + 12 | 0;
HEAP32[$60 >> 2] = (HEAP32[$60 >> 2] | 0) - (HEAP32[$$phi$trans$insert >> 2] | 0) + ($59 + 8);
HEAP32[$$phi$trans$insert >> 2] = $59 + 8;
HEAP32[$47 >> 2] = $59 + 8 + $50;
$$2 = 1;
return $$2 | 0;
} while (0);
$67 = $0 + 8 | 0;
$69 = (HEAP32[$67 >> 2] | 0) - $70 | 0;
$$0 = ($69 | 0) < 1024 ? 1024 : $69 << 1;
$77 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$0 + 20 >> 2] >> 2] & 63]($$0 + 8 | 0) | 0;
if (!$77) {
$$2 = 0;
return $$2 | 0;
}
HEAP32[$77 + 4 >> 2] = $$0;
HEAP32[$77 >> 2] = HEAP32[$0 >> 2];
HEAP32[$0 >> 2] = $77;
$81 = $0 + 12 | 0;
$82 = HEAP32[$81 >> 2] | 0;
$83 = HEAP32[$$phi$trans$insert >> 2] | 0;
$85 = $82;
$86 = $83;
if (($82 | 0) == ($83 | 0)) {
$$pre$phi107Z2D = $77 + 8 | 0;
$92 = $85;
$93 = $86;
} else {
$88 = $77 + 8 | 0;
_memcpy($88 | 0, $83 | 0, $85 - $86 | 0) | 0;
$$pre$phi107Z2D = $88;
$92 = HEAP32[$81 >> 2] | 0;
$93 = HEAP32[$$pre$phi105Z2D >> 2] | 0;
}
HEAP32[$81 >> 2] = $77 + 8 + ($92 - $93);
HEAP32[$$phi$trans$insert >> 2] = $$pre$phi107Z2D;
HEAP32[$67 >> 2] = $77 + 8 + $$0;
$$2 = 1;
return $$2 | 0;
}
function __ZN19SHMScalarController11microUpdateEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $$015$i = f0, $$016$i = f0, $$sink = f0, $$sink3 = f0, $16 = f0, $18 = f0, $20 = f0, $21 = 0, $22 = f0, $23 = 0, $24 = f0, $33 = f0, $34 = 0, $35 = f0, $37 = f0, $39 = f0, $4 = 0, $41 = f0, $43 = 0, $5 = f0, $50 = f0, $51 = f0, $55 = f0, $56 = f0, $58 = 0, $59 = f0, $6 = 0, $60 = f0, $64 = f0, $68 = f0, $69 = 0, $7 = f0, $71 = f0, $73 = f0, $76 = f0, $78 = f0, $79 = f0, $8 = f0, $81 = f0, $83 = f0, $9 = 0, $phitmp$i = f0, label = 0;
HEAP32[16164] = (HEAP32[16164] | 0) + 1;
$4 = $0 + 76 | 0;
$5 = Math_fround(HEAPF32[$4 >> 2]);
$6 = $0 + 80 | 0;
$7 = Math_fround(HEAPF32[$6 >> 2]);
$8 = Math_fround($5 - $7);
$9 = $0 + 84 | 0;
HEAPF32[$9 >> 2] = $8;
if ((HEAP32[$0 + 60 >> 2] | 0) == 3) {
$16 = Math_fround(HEAPF32[$0 + 16 >> 2]);
$18 = Math_fround(HEAPF32[$0 + 24 >> 2]);
$20 = Math_fround(HEAPF32[$0 + 8 >> 2]);
$21 = $8 < Math_fround(0.0);
$22 = Math_fround(-$8);
$$015$i = $21 ? $22 : $8;
$23 = $20 < Math_fround(0.0);
$24 = Math_fround(-$20);
$$016$i = $23 ? $24 : $20;
$phitmp$i = Math_fround(Math_fround($$015$i / $$016$i) * Math_fround(3.14159274));
$33 = Math_fround(Math_fround(Math_fround(Math_fround($18 + Math_fround(-1.0)) * Math_fround(.5)) * Math_fround(Math_fround(+Math_cos(+($$015$i > $$016$i ? Math_fround(3.14159274) : $phitmp$i))) + Math_fround(1.0))) + Math_fround(1.0));
$34 = $33 < Math_fround(1.0);
$35 = Math_fround($16 * ($34 ? Math_fround(1.0) : $33));
$37 = Math_fround(HEAPF32[$0 + 20 >> 2]);
HEAPF32[$0 + 44 >> 2] = $35;
$39 = Math_fround(Math_fround($35 - $37) * Math_fround(.25));
HEAPF32[$0 + 36 >> 2] = $39;
}
$41 = Math_fround(HEAPF32[$0 + 28 >> 2]);
if ($41 > Math_fround(0.0)) {
$43 = $0 + 32 | 0;
if (!(HEAP8[$43 >> 0] | 0)) if ($8 < $41 & $8 > Math_fround(-$41)) {
$50 = Math_fround(HEAPF32[$0 + 72 >> 2]);
HEAPF32[$4 >> 2] = $50;
$51 = Math_fround($50 - $7);
HEAPF32[$9 >> 2] = $51;
HEAPF32[$0 + 92 >> 2] = Math_fround(0.0);
HEAP8[$43 >> 0] = 1;
$56 = $51;
} else $56 = $8; else $56 = $8;
} else $56 = $8;
$55 = Math_fround($56 * Math_fround(HEAPF32[$0 + 36 >> 2]));
HEAPF32[$0 + 88 >> 2] = $55;
$58 = $0 + 92 | 0;
$59 = Math_fround(HEAPF32[$58 >> 2]);
$60 = Math_fround($55 - $59);
HEAPF32[$0 + 96 >> 2] = $60;
$64 = Math_fround($60 * Math_fround(HEAPF32[$0 + 44 >> 2]));
HEAPF32[$0 + 100 >> 2] = $64;
$68 = Math_fround($64 / Math_fround(HEAPF32[$0 + 52 >> 2]));
$69 = $0 + 104 | 0;
HEAPF32[$69 >> 2] = $68;
$71 = Math_fround(HEAPF32[$0 + 48 >> 2]);
if ($68 > $71) {
$$sink = $71;
label = 9;
} else {
$73 = Math_fround(-$71);
if ($68 < $73) {
$$sink = $73;
label = 9;
} else $78 = $68;
}
if ((label | 0) == 9) {
HEAPF32[$69 >> 2] = $$sink;
$78 = $$sink;
}
$76 = Math_fround($7 + Math_fround($59 * $1));
HEAPF32[$6 >> 2] = $76;
$79 = Math_fround($59 + Math_fround($78 * $1));
HEAPF32[$58 >> 2] = $79;
$81 = Math_fround(HEAPF32[$0 + 40 >> 2]);
if ($79 > $81) $$sink3 = $81; else {
$83 = Math_fround(-$81);
if ($79 < $83) $$sink3 = $83; else return;
}
HEAPF32[$58 >> 2] = $$sink3;
return;
}
function _big2_sameName($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0 = 0, $$0$pn = 0, $$022 = 0, $$022$pn = 0, $$025 = 0, $$1 = 0, $$123 = 0, $$2 = 0, $$224 = 0, $12 = 0, $16 = 0, $19 = 0, $23 = 0, $3 = 0, $4 = 0, label = 0;
$3 = $0 + 72 | 0;
$$0 = $2;
$$022 = $1;
L1 : while (1) {
$4 = HEAP8[$$022 >> 0] | 0;
switch ($4 << 24 >> 24) {
case -33:
case -34:
case -35:
case -36:
{
label = 14;
break L1;
break;
}
case 0:
{
switch (HEAP8[$3 + (HEAPU8[$$022 + 1 >> 0] | 0) >> 0] | 0) {
case 7:
{
label = 5;
break;
}
case 6:
{
$$1 = $$0;
$$123 = $$022;
$19 = 0;
label = 7;
break;
}
case 5:
{
$$2 = $$0;
$$224 = $$022;
$23 = 0;
label = 9;
break;
}
case 27:
case 26:
case 25:
case 24:
case 22:
case 29:
{
label = 11;
break;
}
default:
{
label = 14;
break L1;
}
}
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 5;
break;
}
case -1:
{
if ((HEAPU8[$$022 + 1 >> 0] | 0) > 253) {
label = 14;
break L1;
} else label = 11;
break;
}
default:
label = 11;
}
if ((label | 0) == 5) {
label = 0;
$12 = $$022 + 1 | 0;
if ($4 << 24 >> 24 != (HEAP8[$$0 >> 0] | 0)) {
$$025 = 0;
label = 18;
break;
}
$$1 = $$0 + 1 | 0;
$$123 = $12;
$19 = HEAP8[$12 >> 0] | 0;
label = 7;
} else if ((label | 0) == 11) {
label = 0;
if ((HEAP8[$$0 >> 0] | 0) != $4 << 24 >> 24) {
$$025 = 0;
label = 18;
break;
}
if ((HEAP8[$$0 + 1 >> 0] | 0) == (HEAP8[$$022 + 1 >> 0] | 0)) {
$$0$pn = $$0;
$$022$pn = $$022;
} else {
$$025 = 0;
label = 18;
break;
}
}
if ((label | 0) == 7) {
label = 0;
$16 = $$123 + 1 | 0;
if ($19 << 24 >> 24 != (HEAP8[$$1 >> 0] | 0)) {
$$025 = 0;
label = 18;
break;
}
$$2 = $$1 + 1 | 0;
$$224 = $16;
$23 = HEAP8[$16 >> 0] | 0;
label = 9;
}
if ((label | 0) == 9) {
label = 0;
if ($23 << 24 >> 24 != (HEAP8[$$2 >> 0] | 0)) {
$$025 = 0;
label = 18;
break;
}
if ((HEAP8[$$224 + 1 >> 0] | 0) == (HEAP8[$$2 + 1 >> 0] | 0)) {
$$0$pn = $$2;
$$022$pn = $$224;
} else {
$$025 = 0;
label = 18;
break;
}
}
$$0 = $$0$pn + 2 | 0;
$$022 = $$022$pn + 2 | 0;
}
if ((label | 0) == 14) {
L20 : do switch (HEAP8[$$0 >> 0] | 0) {
case 0:
{
switch (HEAP8[$3 + (HEAPU8[$$0 + 1 >> 0] | 0) >> 0] | 0) {
case 27:
case 26:
case 25:
case 24:
case 22:
case 29:
case 7:
case 6:
case 5:
{
$$025 = 0;
break;
}
default:
break L20;
}
return $$025 | 0;
}
case -1:
{
if ((HEAPU8[$$0 + 1 >> 0] | 0) <= 253) {
$$025 = 0;
return $$025 | 0;
}
break;
}
case -36:
case -35:
case -34:
case -33:
break;
default:
{
$$025 = 0;
return $$025 | 0;
}
} while (0);
$$025 = 1;
return $$025 | 0;
} else if ((label | 0) == 18) return $$025 | 0;
return 0;
}
function _scanexp($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0, $$04860 = 0, $$049 = 0, $$1$be = 0, $$159 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $100 = 0, $101 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, $22 = 0, $3 = 0, $38 = 0, $4 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $80 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
$2 = $0 + 4 | 0;
$3 = HEAP32[$2 >> 2] | 0;
$4 = $0 + 100 | 0;
if ($3 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
HEAP32[$2 >> 2] = $3 + 1;
$11 = HEAPU8[$3 >> 0] | 0;
} else $11 = ___shgetc($0) | 0;
switch ($11 | 0) {
case 43:
case 45:
{
$13 = ($11 | 0) == 45 & 1;
$14 = HEAP32[$2 >> 2] | 0;
if ($14 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
HEAP32[$2 >> 2] = $14 + 1;
$22 = HEAPU8[$14 >> 0] | 0;
} else $22 = ___shgetc($0) | 0;
if (($1 | 0) != 0 & ($22 + -48 | 0) >>> 0 > 9) if (!(HEAP32[$4 >> 2] | 0)) {
$$0 = $13;
$$049 = $22;
} else {
HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1;
$$0 = $13;
$$049 = $22;
} else {
$$0 = $13;
$$049 = $22;
}
break;
}
default:
{
$$0 = 0;
$$049 = $11;
}
}
if (($$049 + -48 | 0) >>> 0 > 9) if (!(HEAP32[$4 >> 2] | 0)) {
$100 = -2147483648;
$101 = 0;
} else {
HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1;
$100 = -2147483648;
$101 = 0;
} else {
$$04860 = 0;
$$159 = $$049;
while (1) {
$$04860 = $$159 + -48 + ($$04860 * 10 | 0) | 0;
$38 = HEAP32[$2 >> 2] | 0;
if ($38 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
HEAP32[$2 >> 2] = $38 + 1;
$$1$be = HEAPU8[$38 >> 0] | 0;
} else $$1$be = ___shgetc($0) | 0;
if (!(($$1$be + -48 | 0) >>> 0 < 10 & ($$04860 | 0) < 214748364)) break; else $$159 = $$1$be;
}
$50 = (($$04860 | 0) < 0) << 31 >> 31;
if (($$1$be + -48 | 0) >>> 0 < 10) {
$$254 = $$1$be;
$55 = $$04860;
$56 = $50;
while (1) {
$57 = ___muldi3($55 | 0, $56 | 0, 10, 0) | 0;
$58 = tempRet0;
$61 = _i64Add($$254 | 0, (($$254 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
$63 = _i64Add($61 | 0, tempRet0 | 0, $57 | 0, $58 | 0) | 0;
$64 = tempRet0;
$65 = HEAP32[$2 >> 2] | 0;
if ($65 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
HEAP32[$2 >> 2] = $65 + 1;
$$2$be = HEAPU8[$65 >> 0] | 0;
} else $$2$be = ___shgetc($0) | 0;
if (($$2$be + -48 | 0) >>> 0 < 10 & (($64 | 0) < 21474836 | ($64 | 0) == 21474836 & $63 >>> 0 < 2061584302)) {
$$254 = $$2$be;
$55 = $63;
$56 = $64;
} else {
$$2$lcssa = $$2$be;
$94 = $63;
$95 = $64;
break;
}
}
} else {
$$2$lcssa = $$1$be;
$94 = $$04860;
$95 = $50;
}
if (($$2$lcssa + -48 | 0) >>> 0 < 10) do {
$80 = HEAP32[$2 >> 2] | 0;
if ($80 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
HEAP32[$2 >> 2] = $80 + 1;
$$3$be = HEAPU8[$80 >> 0] | 0;
} else $$3$be = ___shgetc($0) | 0;
} while (($$3$be + -48 | 0) >>> 0 < 10);
if (HEAP32[$4 >> 2] | 0) HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1;
$93 = ($$0 | 0) != 0;
$96 = _i64Subtract(0, 0, $94 | 0, $95 | 0) | 0;
$100 = $93 ? tempRet0 : $95;
$101 = $93 ? $96 : $94;
}
tempRet0 = $100;
return $101 | 0;
}
function __ZN9HandshapeC2EbP7Gesture($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $14 = 0, $40 = 0, $41 = 0, $52 = 0, $55 = 0, $60 = 0, $scevgep$i = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
HEAP32[$0 >> 2] = 0;
HEAP8[$0 + 4 >> 0] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAPF32[$0 + 12 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 16 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 20 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 24 >> 2] = Math_fround(-100.0);
HEAP32[$0 + 28 >> 2] = 0;
HEAPF32[$0 + 32 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 36 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 40 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 44 >> 2] = Math_fround(-100.0);
$14 = $0 + 48 | 0;
HEAP32[$14 >> 2] = 0;
HEAP32[$14 + 4 >> 2] = 0;
HEAP32[$14 + 8 >> 2] = 0;
HEAPF32[$0 + 80 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 84 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 88 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 92 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 96 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 100 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 104 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 108 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 112 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 116 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 120 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 124 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 128 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 132 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 136 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 140 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 144 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 148 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 152 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 156 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 160 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 164 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 168 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 172 >> 2] = Math_fround(-100.0);
HEAPF32[$0 + 176 >> 2] = Math_fround(-100.0);
$40 = $0 + 180 | 0;
$41 = $0 + 204 | 0;
HEAP32[$40 >> 2] = -1;
HEAP32[$40 + 4 >> 2] = -1;
HEAP32[$40 + 8 >> 2] = -1;
HEAP32[$40 + 12 >> 2] = -1;
HEAP32[$40 + 16 >> 2] = -1;
HEAP32[$40 + 20 >> 2] = -1;
$scevgep$i = $0 + 60 | 0;
HEAP32[$scevgep$i >> 2] = 0;
HEAP32[$scevgep$i + 4 >> 2] = 0;
HEAP32[$scevgep$i + 8 >> 2] = 0;
HEAP32[$scevgep$i + 12 >> 2] = 0;
HEAP32[$scevgep$i + 16 >> 2] = 0;
HEAP32[$41 >> 2] = 0;
HEAP32[$41 + 4 >> 2] = 0;
HEAP32[$41 + 8 >> 2] = 0;
HEAP8[$41 + 12 >> 0] = 0;
HEAP32[$0 + 220 >> 2] = 0;
HEAPF32[$0 + 224 >> 2] = Math_fround(.5);
HEAPF32[$0 + 228 >> 2] = Math_fround(0.0);
$52 = ($1 & 1 | 0) == ((HEAPU8[$2 + 13 >> 0] | 0) >>> 6 & 1 | 0);
HEAP8[$0 + 232 >> 0] = $52 & 1;
HEAP8[$0 + 233 >> 0] = 0;
$55 = $0 + 236 | 0;
HEAP32[$55 >> 2] = 0;
if ($2 | 0) if (HEAP32[$2 + 4 >> 2] | 0) {
$60 = __Znwj(64) | 0;
__ZN18HandJointRotationsC2EbPK7Gesture($60, $52, $2);
HEAP32[$55 >> 2] = $60;
STACKTOP = sp;
return;
}
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer >> 2] = $1 ? 68 : 78;
HEAP32[$vararg_buffer + 4 >> 2] = $2;
__Z7eprintfPKcz(33579, $vararg_buffer);
STACKTOP = sp;
return;
}
function __ZN12ExpatWrapperD2Ev($0) {
$0 = $0 | 0;
var $$0 = 0, $$02 = 0, $$09$i = 0, $$pre = 0, $1 = 0, $11 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $30 = 0, $31 = 0, $33 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $45 = 0, $46 = 0, $48 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0;
HEAP32[$0 >> 2] = 3444;
$1 = $0 + 20 | 0;
$2 = HEAP32[$1 >> 2] | 0;
do if (!$2) label = 5; else {
__THREW__ = 0;
invoke_vi(151, $2 | 0);
$4 = __THREW__;
__THREW__ = 0;
if ($4 & 1) {
$6 = ___cxa_find_matching_catch_2() | 0;
$7 = tempRet0;
__ZdlPv($2);
$$0 = $7;
$$02 = $6;
break;
} else {
__ZdlPv($2);
HEAP32[$1 >> 2] = 0;
label = 5;
break;
}
} while (0);
if ((label | 0) == 5) {
$8 = $0 + 28 | 0;
$9 = HEAP32[$8 >> 2] | 0;
L8 : do if (!$9) label = 20; else {
$11 = HEAP32[$9 >> 2] | 0;
do if (!$11) $31 = $9; else {
$13 = $9 + 12 | 0;
$14 = HEAP32[$13 >> 2] | 0;
if (($14 | 0) > 0) {
$$09$i = 0;
$17 = $11;
$50 = $14;
while (1) {
$18 = HEAP32[$17 + ($$09$i << 2) >> 2] | 0;
if (!$18) $28 = $50; else {
__THREW__ = 0;
invoke_vi(151, $18 | 0);
$20 = __THREW__;
__THREW__ = 0;
if ($20 & 1) {
label = 11;
break;
}
__ZdlPv($18);
HEAP32[(HEAP32[$9 >> 2] | 0) + ($$09$i << 2) >> 2] = 0;
$28 = HEAP32[$13 >> 2] | 0;
}
$26 = $$09$i + 1 | 0;
if (($26 | 0) >= ($28 | 0)) {
label = 14;
break;
}
$$09$i = $26;
$17 = HEAP32[$9 >> 2] | 0;
$50 = $28;
}
if ((label | 0) == 11) {
$24 = ___cxa_find_matching_catch_2() | 0;
$25 = tempRet0;
__ZdlPv($18);
$eh$lpad$body$index2Z2D = $25;
$eh$lpad$body$indexZ2D = $24;
break L8;
} else if ((label | 0) == 14) {
$$pre = HEAP32[$8 >> 2] | 0;
if (!$$pre) {
label = 20;
break L8;
} else {
$31 = $$pre;
break;
}
}
} else $31 = $9;
} while (0);
$30 = HEAP32[$31 >> 2] | 0;
if ($30 | 0) _free($30);
__ZdlPv($31);
HEAP32[$8 >> 2] = 0;
label = 20;
} while (0);
do if ((label | 0) == 20) {
$36 = HEAP32[$0 + 24 >> 2] | 0;
if ($36 | 0) {
__THREW__ = 0;
invoke_vi(152, $36 | 0);
$38 = __THREW__;
__THREW__ = 0;
if ($38 & 1) {
$33 = ___cxa_find_matching_catch_2() | 0;
$eh$lpad$body$index2Z2D = tempRet0;
$eh$lpad$body$indexZ2D = $33;
break;
}
}
HEAP32[$0 >> 2] = 3420;
$40 = $0 + 4 | 0;
$41 = HEAP32[$40 >> 2] | 0;
if (!$41) return;
$43 = HEAP32[$41 >> 2] | 0;
if ($43 | 0) _free($43);
__ZdlPv($41);
HEAP32[$40 >> 2] = 0;
return;
} while (0);
$$0 = $eh$lpad$body$index2Z2D;
$$02 = $eh$lpad$body$indexZ2D;
}
HEAP32[$0 >> 2] = 3420;
$45 = $0 + 4 | 0;
$46 = HEAP32[$45 >> 2] | 0;
if (!$46) ___resumeException($$02 | 0);
$48 = HEAP32[$46 >> 2] | 0;
if ($48 | 0) _free($48);
__ZdlPv($46);
HEAP32[$45 >> 2] = 0;
___resumeException($$02 | 0);
}
function __ZN10Controller11microUpdateEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $$015$i = f0, $$016$i = f0, $$sink = f0, $$sink3 = f0, $15 = f0, $17 = f0, $19 = f0, $20 = 0, $21 = f0, $22 = 0, $23 = f0, $32 = f0, $33 = 0, $34 = f0, $36 = f0, $38 = f0, $4 = 0, $40 = f0, $42 = 0, $49 = f0, $5 = f0, $50 = f0, $54 = f0, $55 = f0, $57 = 0, $58 = f0, $59 = f0, $6 = 0, $63 = f0, $67 = f0, $68 = 0, $7 = f0, $70 = f0, $72 = f0, $75 = f0, $77 = f0, $78 = f0, $8 = f0, $80 = f0, $82 = f0, $9 = 0, $phitmp$i = f0, label = 0;
HEAP32[16164] = (HEAP32[16164] | 0) + 1;
$4 = $0 + 64 | 0;
$5 = Math_fround(HEAPF32[$4 >> 2]);
$6 = $0 + 68 | 0;
$7 = Math_fround(HEAPF32[$6 >> 2]);
$8 = Math_fround($5 - $7);
$9 = $0 + 72 | 0;
HEAPF32[$9 >> 2] = $8;
if ((HEAP32[$0 + 44 >> 2] | 0) == 3) {
$15 = Math_fround(HEAPF32[$0 >> 2]);
$17 = Math_fround(HEAPF32[$0 + 8 >> 2]);
$19 = Math_fround(HEAPF32[$0 + 96 >> 2]);
$20 = $8 < Math_fround(0.0);
$21 = Math_fround(-$8);
$$015$i = $20 ? $21 : $8;
$22 = $19 < Math_fround(0.0);
$23 = Math_fround(-$19);
$$016$i = $22 ? $23 : $19;
$phitmp$i = Math_fround(Math_fround($$015$i / $$016$i) * Math_fround(3.14159274));
$32 = Math_fround(Math_fround(Math_fround(Math_fround($17 + Math_fround(-1.0)) * Math_fround(.5)) * Math_fround(Math_fround(+Math_cos(+($$015$i > $$016$i ? Math_fround(3.14159274) : $phitmp$i))) + Math_fround(1.0))) + Math_fround(1.0));
$33 = $32 < Math_fround(1.0);
$34 = Math_fround($15 * ($33 ? Math_fround(1.0) : $32));
$36 = Math_fround(HEAPF32[$0 + 4 >> 2]);
HEAPF32[$0 + 28 >> 2] = $34;
$38 = Math_fround(Math_fround($34 - $36) * Math_fround(.25));
HEAPF32[$0 + 20 >> 2] = $38;
}
$40 = Math_fround(HEAPF32[$0 + 12 >> 2]);
if ($40 > Math_fround(0.0)) {
$42 = $0 + 16 | 0;
if (!(HEAP8[$42 >> 0] | 0)) if ($8 < $40 & $8 > Math_fround(-$40)) {
$49 = Math_fround(HEAPF32[$0 + 60 >> 2]);
HEAPF32[$4 >> 2] = $49;
$50 = Math_fround($49 - $7);
HEAPF32[$9 >> 2] = $50;
HEAPF32[$0 + 80 >> 2] = Math_fround(0.0);
HEAP8[$42 >> 0] = 1;
$55 = $50;
} else $55 = $8; else $55 = $8;
} else $55 = $8;
$54 = Math_fround($55 * Math_fround(HEAPF32[$0 + 20 >> 2]));
HEAPF32[$0 + 76 >> 2] = $54;
$57 = $0 + 80 | 0;
$58 = Math_fround(HEAPF32[$57 >> 2]);
$59 = Math_fround($54 - $58);
HEAPF32[$0 + 84 >> 2] = $59;
$63 = Math_fround($59 * Math_fround(HEAPF32[$0 + 28 >> 2]));
HEAPF32[$0 + 88 >> 2] = $63;
$67 = Math_fround($63 / Math_fround(HEAPF32[$0 + 36 >> 2]));
$68 = $0 + 92 | 0;
HEAPF32[$68 >> 2] = $67;
$70 = Math_fround(HEAPF32[$0 + 32 >> 2]);
if ($67 > $70) {
$$sink = $70;
label = 9;
} else {
$72 = Math_fround(-$70);
if ($67 < $72) {
$$sink = $72;
label = 9;
} else $77 = $67;
}
if ((label | 0) == 9) {
HEAPF32[$68 >> 2] = $$sink;
$77 = $$sink;
}
$75 = Math_fround($7 + Math_fround($58 * $1));
HEAPF32[$6 >> 2] = $75;
$78 = Math_fround($58 + Math_fround($77 * $1));
HEAPF32[$57 >> 2] = $78;
$80 = Math_fround(HEAPF32[$0 + 24 >> 2]);
if ($78 > $80) $$sink3 = $80; else {
$82 = Math_fround(-$80);
if ($78 < $82) $$sink3 = $82; else return;
}
HEAPF32[$57 >> 2] = $$sink3;
return;
}
function _big2_charRefNumber($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$040 = 0, $$040$ph = 0, $$042$ph = 0, $$141$ph = 0, $$1415355 = 0, $$143 = 0, $$244$ph = 0, $$2445256 = 0, $$345 = 0, $$4 = 0, $12 = 0, $14 = 0, $2 = 0, $36 = 0, $37 = 0, label = 0;
$2 = $1 + 4 | 0;
L1 : do if (!(HEAP8[$2 >> 0] | 0)) if ((HEAP8[$1 + 5 >> 0] | 0) == 120) {
$$040$ph = $1 + 6 | 0;
$$042$ph = 0;
while (1) {
$$040 = $$040$ph;
L6 : while (1) {
if (!(HEAP8[$$040 >> 0] | 0)) {
$12 = HEAP8[$$040 + 1 >> 0] | 0;
if ($12 << 24 >> 24 == 59) {
$$345 = $$042$ph;
label = 18;
break L1;
}
$14 = $12 << 24 >> 24;
switch ($14 | 0) {
case 57:
case 56:
case 55:
case 54:
case 53:
case 52:
case 51:
case 50:
case 49:
case 48:
{
label = 8;
break L6;
break;
}
case 70:
case 69:
case 68:
case 67:
case 66:
case 65:
{
label = 9;
break L6;
break;
}
case 102:
case 101:
case 100:
case 99:
case 98:
case 97:
{
label = 10;
break L6;
break;
}
default:
{}
}
}
$$040 = $$040 + 2 | 0;
}
if ((label | 0) == 8) {
label = 0;
$$143 = $14 + -48 | $$042$ph << 4;
} else if ((label | 0) == 9) {
label = 0;
$$143 = ($$042$ph << 4) + -55 + $14 | 0;
} else if ((label | 0) == 10) {
label = 0;
$$143 = ($$042$ph << 4) + -87 + $14 | 0;
}
if (($$143 | 0) < 1114112) {
$$040$ph = $$040 + 2 | 0;
$$042$ph = $$143;
} else {
$$4 = -1;
break;
}
}
return $$4 | 0;
} else {
$$141$ph = $2;
$$244$ph = 0;
label = 13;
} else {
$$1415355 = $2;
$$2445256 = 0;
$37 = -1;
label = 16;
} while (0);
L18 : while (1) if ((label | 0) == 13) {
label = 0;
if (HEAP8[$$141$ph >> 0] | 0) {
$$1415355 = $$141$ph;
$$2445256 = $$244$ph;
$37 = -1;
label = 16;
continue;
}
if ((HEAP8[$$141$ph + 1 >> 0] | 0) == 59) {
$$345 = $$244$ph;
label = 18;
continue;
}
$$1415355 = $$141$ph;
$$2445256 = $$244$ph;
$37 = HEAP8[$$141$ph + 1 >> 0] | 0;
label = 16;
continue;
} else if ((label | 0) == 16) {
label = 0;
$36 = ($$2445256 * 10 | 0) + -48 + $37 | 0;
if (($36 | 0) >= 1114112) {
$$4 = -1;
label = 22;
break;
}
$$141$ph = $$1415355 + 2 | 0;
$$244$ph = $36;
label = 13;
continue;
} else if ((label | 0) == 18) {
label = 0;
switch ($$345 >> 8 | 0) {
case 0:
{
label = 19;
break L18;
break;
}
case 255:
{
label = 20;
break L18;
break;
}
case 223:
case 222:
case 221:
case 220:
case 219:
case 218:
case 217:
case 216:
{
$$4 = -1;
label = 22;
break L18;
break;
}
default:
break L18;
}
}
if ((label | 0) == 19) {
if (!(HEAP8[3704 + $$345 >> 0] | 0)) {
$$4 = -1;
return $$4 | 0;
}
} else if ((label | 0) == 20) {
if (($$345 | 1 | 0) == 65535) {
$$4 = -1;
return $$4 | 0;
}
} else if ((label | 0) == 22) return $$4 | 0;
$$4 = $$345;
return $$4 | 0;
}
function __ZN16CircularMovement17GetCurrentPostureER19TwoHConcretePosturefb($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
var $$0 = f0, $11 = f0, $13 = f0, $14 = 0, $15 = 0, $16 = f0, $22 = f0, $23 = f0, $24 = f0, $28 = 0, $30 = 0, $32 = 0, $34 = f0, $36 = f0, $39 = f0, $4 = 0, $40 = f0, $41 = 0, $47 = f0, $5 = 0, $55 = 0, $58 = f0, $6 = 0, $62 = f0, $67 = f0, $7 = 0, $8 = f0, $9 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$vararg_buffer = sp;
$4 = sp + 40 | 0;
$5 = sp + 28 | 0;
$6 = sp + 16 | 0;
$7 = $0 + 40 | 0;
$8 = Math_fround(HEAPF32[$7 >> 2]);
$9 = $0 + 44 | 0;
$11 = Math_fround($8 - Math_fround(HEAPF32[$9 >> 2]));
if (!($11 <= Math_fround(0.0))) {
$13 = Math_fround($2 / $11);
$14 = $13 < Math_fround(0.0);
$15 = $13 > Math_fround(1.0);
$16 = $15 ? Math_fround(1.0) : $13;
$22 = $14 ? Math_fround(0.0) : $16;
} else $22 = Math_fround(1.0);
$23 = Math_fround(__ZNK10Trajectory16lookupByFractionEf(HEAP32[66492 + (HEAP32[$0 + 12 >> 2] << 2) >> 2] | 0, $22));
$24 = Math_fround(Math_fround(1.0) - $23);
if (0) {
$28 = HEAP32[$0 + 4 >> 2] | 0;
$30 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[16658] | 0, $28) | 0;
HEAP32[$vararg_buffer >> 2] = $28;
HEAP32[$vararg_buffer + 4 >> 2] = $30;
HEAPF64[$vararg_buffer + 8 >> 3] = +$2;
__Z7eprintfPKcz(35945, $vararg_buffer);
}
$32 = $0 + 8 | 0;
__ZNK25TwoHConcretePostureChange11interpolateER19TwoHConcretePosturef12SET_OF_HANDSb($0 + 60 | 0, $1, $3 ? $23 : $24, HEAP32[$32 >> 2] | 0, $3);
$34 = Math_fround(HEAPF32[$7 >> 2]);
$36 = Math_fround($34 - Math_fround(HEAPF32[$9 >> 2]));
if ($2 <= Math_fround(0.0) | $36 <= $2) {
STACKTOP = sp;
return;
}
$39 = Math_fround($36 - $2);
$40 = Math_fround(($3 ? $2 : $39) / $36);
$41 = HEAP32[$32 >> 2] | 0;
switch ($41 | 0) {
case 3:
case 5:
{
$47 = Math_fround(Math_fround(HEAPF32[$0 + 676 >> 2]) + Math_fround($40 * Math_fround(HEAPF32[$0 + 680 >> 2])));
__ZN6VectorC2Ev($6);
__ZN6VectorC2ERKS_($4, $0 + 628 | 0);
__ZN6Vector8setScaleEf($4, Math_fround(+Math_sin(+$47)));
__ZN6VectorC2ERKS_($5, $0 + 640 | 0);
__ZN6Vector8setScaleEf($5, Math_fround(+Math_cos(+$47)));
__ZN6Vector6setAddERKS_S1_($6, $4, $5);
__ZN6Vector11setSubtractERKS_($6, $0 + 652 | 0);
__ZN6Vector6setAddERKS_($1 + 4 | 0, $6);
$55 = HEAP32[$32 >> 2] | 0;
break;
}
default:
$55 = $41;
}
if (($55 | 1 | 0) != 5) {
STACKTOP = sp;
return;
}
$58 = Math_fround(HEAPF32[$0 + 744 >> 2]);
$62 = Math_fround($58 + Math_fround($40 * Math_fround(HEAPF32[$0 + 748 >> 2])));
$67 = Math_fround($62 + Math_fround(HEAPF32[588]));
$$0 = (HEAP8[$0 + 33 >> 0] | 0) == 0 ? $62 : $67;
__ZN6VectorC2Ev($6);
__ZN6VectorC2ERKS_($4, $0 + 696 | 0);
__ZN6Vector8setScaleEf($4, Math_fround(+Math_sin(+$$0)));
__ZN6VectorC2ERKS_($5, $0 + 708 | 0);
__ZN6Vector8setScaleEf($5, Math_fround(+Math_cos(+$$0)));
__ZN6Vector6setAddERKS_S1_($6, $4, $5);
__ZN6Vector11setSubtractERKS_($6, $0 + 720 | 0);
__ZN6Vector6setAddERKS_($1 + 116 | 0, $6);
STACKTOP = sp;
return;
}
function __ZN11HanimAvatar18SetFacePointTripleEsssRK6VectorS2_($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
var $10 = 0, $12 = f0, $13 = 0, $14 = f0, $15 = 0, $17 = f0, $18 = 0, $19 = 0, $20 = 0, $29 = 0, $31 = 0, $36 = 0, $38 = 0.0, $43 = f0, $45 = 0.0, $50 = f0, $51 = f0, $53 = f0, $54 = 0, $55 = 0, $6 = 0, $64 = 0, $66 = 0, $7 = f0, $71 = 0, $72 = f0, $74 = f0, $75 = 0, $76 = 0, $8 = 0, $85 = 0, $87 = 0, $9 = f0, $92 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$6 = sp;
$7 = Math_fround(HEAPF32[$4 >> 2]);
$8 = $4 + 4 | 0;
$9 = Math_fround(HEAPF32[$8 >> 2]);
$10 = $5 + 4 | 0;
$12 = Math_fround($9 + Math_fround(HEAPF32[$10 >> 2]));
$13 = $4 + 8 | 0;
$14 = Math_fround(HEAPF32[$13 >> 2]);
$15 = $5 + 8 | 0;
$17 = Math_fround($14 + Math_fround(HEAPF32[$15 >> 2]));
$18 = $0 + 488 | 0;
$19 = HEAP32[$18 >> 2] | 0;
$20 = $2 << 16 >> 16;
__ZN6VectorC2Efff($6, $7, $12, $17);
if ($2 << 16 >> 16 >= 0) {
if ((HEAP32[$19 + 8 >> 2] | 0) <= ($20 | 0)) {
$29 = HEAP32[$19 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($19, ($29 | 0) > ($20 | 0) ? $29 : $20 + 1 + ($20 >>> 1) | 0);
}
$31 = $19 + 12 | 0;
if ((HEAP32[$31 >> 2] | 0) <= ($20 | 0)) HEAP32[$31 >> 2] = $20 + 1;
$36 = (HEAP32[$19 >> 2] | 0) + ($20 * 12 | 0) | 0;
HEAP32[$36 >> 2] = HEAP32[$6 >> 2];
HEAP32[$36 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
HEAP32[$36 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
}
$38 = +Math_fround(HEAPF32[$8 >> 2]);
$43 = Math_fround(+Math_fround(HEAPF32[$10 >> 2]) * .75 + $38);
$45 = +Math_fround(HEAPF32[$13 >> 2]);
$50 = Math_fround(+Math_fround(HEAPF32[$15 >> 2]) * .75 + $45);
$51 = Math_fround(HEAPF32[$4 >> 2]);
$53 = Math_fround($51 + Math_fround(HEAPF32[$5 >> 2]));
$54 = HEAP32[$18 >> 2] | 0;
$55 = $1 << 16 >> 16;
__ZN6VectorC2Efff($6, $53, $43, $50);
if ($1 << 16 >> 16 >= 0) {
if ((HEAP32[$54 + 8 >> 2] | 0) <= ($55 | 0)) {
$64 = HEAP32[$54 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($54, ($64 | 0) > ($55 | 0) ? $64 : $55 + 1 + ($55 >>> 1) | 0);
}
$66 = $54 + 12 | 0;
if ((HEAP32[$66 >> 2] | 0) <= ($55 | 0)) HEAP32[$66 >> 2] = $55 + 1;
$71 = (HEAP32[$54 >> 2] | 0) + ($55 * 12 | 0) | 0;
HEAP32[$71 >> 2] = HEAP32[$6 >> 2];
HEAP32[$71 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
HEAP32[$71 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
}
$72 = Math_fround(HEAPF32[$4 >> 2]);
$74 = Math_fround($72 - Math_fround(HEAPF32[$5 >> 2]));
$75 = HEAP32[$18 >> 2] | 0;
$76 = $3 << 16 >> 16;
__ZN6VectorC2Efff($6, $74, $43, $50);
if ($3 << 16 >> 16 < 0) {
STACKTOP = sp;
return;
}
if ((HEAP32[$75 + 8 >> 2] | 0) <= ($76 | 0)) {
$85 = HEAP32[$75 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($75, ($85 | 0) > ($76 | 0) ? $85 : $76 + 1 + ($76 >>> 1) | 0);
}
$87 = $75 + 12 | 0;
if ((HEAP32[$87 >> 2] | 0) <= ($76 | 0)) HEAP32[$87 >> 2] = $76 + 1;
$92 = (HEAP32[$75 >> 2] | 0) + ($76 * 12 | 0) | 0;
HEAP32[$92 >> 2] = HEAP32[$6 >> 2];
HEAP32[$92 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
HEAP32[$92 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
STACKTOP = sp;
return;
}
function __ZL17InstallParPostureR6VectorS0_R19OneHConcretePostureRK18PostureChangeFlagsRKS1_RKS_($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
var $105 = f0, $11 = 0, $113 = f0, $15 = 0, $22 = 0, $37 = 0, $46 = 0, $6 = 0, $67 = 0, $69 = 0, $70 = f0, $72 = f0, $73 = f0, $74 = 0, $75 = f0, $77 = f0, $79 = f0, $80 = 0, $81 = f0, $83 = f0, $85 = f0, $86 = 0, $87 = f0, $89 = f0, $91 = f0, $98 = f0;
$6 = HEAPU8[$3 >> 0] | HEAPU8[$3 + 1 >> 0] << 8;
if (!($6 & 1)) $11 = $6; else {
__ZN6Vector6setAddERKS_($0, $4 + 4 | 0);
__ZN6Vector11setSubtractERKS_($0, $5);
$11 = HEAPU8[$3 >> 0] | HEAPU8[$3 + 1 >> 0] << 8;
}
if (!($11 & 2)) $15 = $11; else {
__ZN6Vector7setFromERKS_($1, $4 + 4 | 0);
$15 = HEAPU8[$3 >> 0] | HEAPU8[$3 + 1 >> 0] << 8;
}
if (!($15 & 8)) $22 = $15; else {
__ZN6Vector7setFromERKS_($2 + 16 | 0, $4 + 16 | 0);
__ZN6Vector7setFromERKS_($2 + 28 | 0, $4 + 28 | 0);
$22 = HEAPU8[$3 >> 0] | HEAPU8[$3 + 1 >> 0] << 8;
}
if (!($22 & 48)) $37 = $22; else {
HEAP32[$2 + 40 >> 2] = HEAP32[$4 + 40 >> 2];
HEAP32[$2 + 44 >> 2] = HEAP32[$4 + 44 >> 2];
HEAP32[$2 + 48 >> 2] = HEAP32[$4 + 48 >> 2];
HEAP32[$2 + 52 >> 2] = HEAP32[$4 + 52 >> 2];
$37 = HEAPU8[$3 >> 0] | HEAPU8[$3 + 1 >> 0] << 8;
}
if (!($37 & 64)) $46 = $37; else {
HEAP32[$2 + 56 >> 2] = HEAP32[$4 + 56 >> 2];
HEAP32[$2 + 60 >> 2] = HEAP32[$4 + 60 >> 2];
$46 = HEAPU8[$3 >> 0] | HEAPU8[$3 + 1 >> 0] << 8;
}
if (!($46 & 128)) $67 = $46; else {
HEAP32[$2 + 92 >> 2] = HEAP32[$4 + 92 >> 2];
HEAP32[$2 + 96 >> 2] = HEAP32[$4 + 96 >> 2];
HEAP32[$2 + 100 >> 2] = HEAP32[$4 + 100 >> 2];
HEAP32[$2 + 104 >> 2] = HEAP32[$4 + 104 >> 2];
HEAP16[$2 + 108 >> 1] = HEAP16[$4 + 108 >> 1] | 0;
HEAP16[$2 + 110 >> 1] = HEAP16[$4 + 110 >> 1] | 0;
$67 = HEAPU8[$3 >> 0] | HEAPU8[$3 + 1 >> 0] << 8;
}
if (!($67 & 256)) return;
$69 = $2 + 80 | 0;
$70 = Math_fround(HEAPF32[$69 >> 2]);
$72 = Math_fround(HEAPF32[$4 + 84 >> 2]);
$73 = Math_fround($70 * $72);
$74 = $2 + 84 | 0;
$75 = Math_fround(HEAPF32[$74 >> 2]);
$77 = Math_fround(HEAPF32[$4 + 80 >> 2]);
$79 = Math_fround($73 - Math_fround($75 * $77));
$80 = $2 + 76 | 0;
$81 = Math_fround(HEAPF32[$80 >> 2]);
$83 = Math_fround(HEAPF32[$4 + 88 >> 2]);
$85 = Math_fround($79 + Math_fround($81 * $83));
$86 = $2 + 88 | 0;
$87 = Math_fround(HEAPF32[$86 >> 2]);
$89 = Math_fround(HEAPF32[$4 + 76 >> 2]);
$91 = Math_fround($85 + Math_fround($87 * $89));
$98 = Math_fround(Math_fround($77 * $87) + Math_fround(Math_fround($70 * $83) + Math_fround(Math_fround($75 * $89) - Math_fround($72 * $81))));
$105 = Math_fround(Math_fround($72 * $87) + Math_fround(Math_fround($75 * $83) + Math_fround(Math_fround($77 * $81) - Math_fround($70 * $89))));
$113 = Math_fround(Math_fround($83 * $87) + Math_fround(Math_fround(Math_fround(-Math_fround($81 * $89)) - Math_fround($70 * $77)) - Math_fround($72 * $75)));
HEAPF32[$80 >> 2] = $91;
HEAPF32[$69 >> 2] = $98;
HEAPF32[$74 >> 2] = $105;
HEAPF32[$86 >> 2] = $113;
return;
}
function __ZNK16DirectedMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0, $54 = 0, $6 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$3 = sp + 28 | 0;
$4 = sp + 16 | 0;
$5 = sp + 8 | 0;
$6 = sp;
__ZNK13BasicMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($0, $1, $2);
HEAP32[$3 >> 2] = HEAP32[$0 + 528 >> 2];
HEAP32[$3 + 4 >> 2] = HEAP32[$0 + 532 >> 2];
HEAP32[$3 + 8 >> 2] = HEAP32[$0 + 536 >> 2];
__ZL20printDirection3SiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKc10Direction3($1, $2, 49714, $3);
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, $2, 51093, HEAP32[$0 + 540 >> 2] | 0, HEAP32[17762] | 0);
HEAP32[$4 >> 2] = HEAP32[$0 + 544 >> 2];
HEAP32[$4 + 4 >> 2] = HEAP32[$0 + 548 >> 2];
HEAP32[$4 + 8 >> 2] = HEAP32[$0 + 552 >> 2];
__ZL20printDirection3SiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKc10Direction3($1, $2, 51229, $4);
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, $2, 51263, HEAP32[$0 + 556 >> 2] | 0, HEAP32[17762] | 0);
HEAP32[$5 >> 2] = HEAP32[$0 + 560 >> 2];
HEAP32[$5 + 4 >> 2] = HEAP32[$0 + 564 >> 2];
__ZL20printDirection2SiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKc10Direction2($1, $2, 51246, $5);
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, $2, 51252, HEAP32[$0 + 568 >> 2] | 0, HEAP32[17762] | 0);
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, $2, 51205, HEAP32[$0 + 572 >> 2] | 0, HEAP32[17760] | 0);
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, $2, 51167, HEAP32[$0 + 576 >> 2] | 0, HEAP32[17762] | 0);
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, $2, 51189, HEAP32[$0 + 580 >> 2] | 0, HEAP32[17759] | 0);
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, $2, 51129, HEAP32[$0 + 584 >> 2] | 0, HEAP32[17762] | 0);
HEAP32[$6 >> 2] = HEAP32[$0 + 588 >> 2];
HEAP32[$6 + 4 >> 2] = HEAP32[$0 + 592 >> 2];
__ZL20printDirection2SiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKc10Direction2($1, $2, 51098, $6);
$54 = $0 + 596 | 0;
if (!(HEAP16[$54 >> 1] | 0)) {
STACKTOP = sp;
return;
}
if (!$2) __Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, (HEAP16[36078] | 0) + 1 | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2 ? 36814 : 36829, $2 ? 14 : 13) | 0;
__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEs($1, HEAP16[$54 >> 1] | 0) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2 ? 34935 : 34937, $2 ? 1 : 2) | 0;
STACKTOP = sp;
return;
}
function _initScan($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $12 = 0, $16 = 0, $19 = 0, $28 = 0, $43 = 0, $65 = 0, $7 = 0, $8 = 0, $trunc = 0;
if (($2 | 0) == ($3 | 0)) {
$$0 = -4;
return $$0 | 0;
}
$7 = HEAP32[$0 + 72 >> 2] | 0;
$8 = $2 + 1 | 0;
L4 : do if (($8 | 0) == ($3 | 0)) {
if (($1 | 0) != 1) {
$$0 = -1;
return $$0 | 0;
}
$12 = HEAP8[$0 + 69 >> 0] | 0;
if ((($12 << 24 >> 24) + -3 | 0) >>> 0 < 3) {
$$0 = -1;
return $$0 | 0;
}
switch (HEAP8[$2 >> 0] | 0) {
case -17:
case -1:
case -2:
break;
case 60:
case 0:
{
$$0 = -1;
return $$0 | 0;
}
default:
break L4;
}
if ($12 << 24 >> 24) {
$$0 = -1;
return $$0 | 0;
}
} else {
$16 = HEAP8[$2 >> 0] | 0;
$19 = HEAP8[$8 >> 0] | 0;
$trunc = (($16 & 255) << 8 | $19 & 255) & 65535;
L17 : do if ($trunc << 16 >> 16 < -2) {
if ($trunc << 16 >> 16 >= -257) {
switch ($trunc << 16 >> 16) {
case -257:
break;
default:
break L17;
}
if (($1 | 0) == 1 & (HEAP8[$0 + 69 >> 0] | 0) == 0) break L4;
HEAP32[$4 >> 2] = $2 + 2;
HEAP32[$7 >> 2] = 6004;
$$0 = 14;
return $$0 | 0;
}
switch ($trunc << 16 >> 16) {
case -4165:
break;
default:
break L17;
}
if (($1 | 0) == 1) switch (HEAP8[$0 + 69 >> 0] | 0) {
case 0:
case 3:
case 4:
case 5:
{
break L4;
break;
}
default:
{}
}
$43 = $2 + 2 | 0;
if (($43 | 0) == ($3 | 0)) {
$$0 = -1;
return $$0 | 0;
}
if ((HEAP8[$43 >> 0] | 0) != -65) break L4;
HEAP32[$4 >> 2] = $2 + 3;
HEAP32[$7 >> 2] = 5640;
$$0 = 14;
return $$0 | 0;
} else {
if ($trunc << 16 >> 16 < 15360) {
switch ($trunc << 16 >> 16) {
case -2:
break;
default:
break L17;
}
if (($1 | 0) == 1 & (HEAP8[$0 + 69 >> 0] | 0) == 0) break L4;
HEAP32[$4 >> 2] = $2 + 2;
HEAP32[$7 >> 2] = 6368;
$$0 = 14;
return $$0 | 0;
}
switch ($trunc << 16 >> 16) {
case 15360:
break;
default:
break L17;
}
$28 = HEAP8[$0 + 69 >> 0] | 0;
if ($28 << 24 >> 24 == 4) {
if (($1 | 0) == 1) break L4;
} else if (($1 | 0) == 1 & $28 << 24 >> 24 == 3) break L4;
HEAP32[$7 >> 2] = 6368;
$$0 = FUNCTION_TABLE_iiiii[HEAP32[6368 + ($1 << 2) >> 2] & 63](6368, $2, $3, $4) | 0;
return $$0 | 0;
} while (0);
if ($16 << 24 >> 24) {
if (($1 | 0) == 1 | $19 << 24 >> 24 != 0) break;
HEAP32[$7 >> 2] = 6368;
$$0 = FUNCTION_TABLE_iiiii[HEAP32[6368 + ($1 << 2) >> 2] & 63](6368, $2, $3, $4) | 0;
return $$0 | 0;
}
if (($1 | 0) == 1) if ((HEAP8[$0 + 69 >> 0] | 0) == 5) break;
HEAP32[$7 >> 2] = 6004;
$$0 = FUNCTION_TABLE_iiiii[HEAP32[6004 + ($1 << 2) >> 2] & 63](6004, $2, $3, $4) | 0;
return $$0 | 0;
} while (0);
$65 = HEAP32[6732 + (HEAP8[$0 + 69 >> 0] << 2) >> 2] | 0;
HEAP32[$7 >> 2] = $65;
$$0 = FUNCTION_TABLE_iiiii[HEAP32[$65 + ($1 << 2) >> 2] & 63]($65, $2, $3, $4) | 0;
return $$0 | 0;
}
function __ZN10Quaternion17setPostConjugate2ERKS_S1_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $10 = 0, $11 = 0, $12 = 0, $14 = f0, $16 = f0, $18 = f0, $20 = f0, $21 = f0, $23 = f0, $25 = f0, $27 = f0, $29 = f0, $3 = 0, $30 = f0, $31 = f0, $33 = f0, $4 = 0, $40 = f0, $47 = f0, $5 = 0, $55 = f0, $56 = f0, $57 = f0, $58 = f0, $6 = 0, $60 = f0, $61 = f0, $63 = f0, $64 = f0, $66 = f0, $7 = 0, $73 = f0, $8 = 0, $80 = f0, $88 = f0, $9 = 0;
$3 = HEAP32[$2 >> 2] | 0;
HEAP32[$0 >> 2] = $3;
$4 = $2 + 4 | 0;
$5 = HEAP32[$4 >> 2] | 0;
$6 = $0 + 4 | 0;
HEAP32[$6 >> 2] = $5;
$7 = $2 + 8 | 0;
$8 = HEAP32[$7 >> 2] | 0;
$9 = $0 + 8 | 0;
HEAP32[$9 >> 2] = $8;
$10 = $2 + 12 | 0;
$11 = HEAP32[$10 >> 2] | 0;
$12 = $0 + 12 | 0;
HEAP32[$12 >> 2] = $11;
$14 = Math_fround(-(HEAP32[tempDoublePtr >> 2] = $3, Math_fround(HEAPF32[tempDoublePtr >> 2])));
HEAPF32[$0 >> 2] = $14;
$16 = Math_fround(-(HEAP32[tempDoublePtr >> 2] = $5, Math_fround(HEAPF32[tempDoublePtr >> 2])));
HEAPF32[$6 >> 2] = $16;
$18 = Math_fround(-(HEAP32[tempDoublePtr >> 2] = $8, Math_fround(HEAPF32[tempDoublePtr >> 2])));
HEAPF32[$9 >> 2] = $18;
$20 = Math_fround(HEAPF32[$1 + 8 >> 2]);
$21 = Math_fround($20 * $16);
$23 = Math_fround(HEAPF32[$1 + 4 >> 2]);
$25 = Math_fround($21 - Math_fround($23 * $18));
$27 = Math_fround(HEAPF32[$1 + 12 >> 2]);
$29 = Math_fround($25 + Math_fround($27 * $14));
$30 = (HEAP32[tempDoublePtr >> 2] = $11, Math_fround(HEAPF32[tempDoublePtr >> 2]));
$31 = Math_fround(HEAPF32[$1 >> 2]);
$33 = Math_fround($29 + Math_fround($31 * $30));
$40 = Math_fround(Math_fround($23 * $30) + Math_fround(Math_fround($27 * $16) + Math_fround(Math_fround($31 * $18) - Math_fround($20 * $14))));
$47 = Math_fround(Math_fround($20 * $30) + Math_fround(Math_fround($27 * $18) + Math_fround(Math_fround($23 * $14) - Math_fround($31 * $16))));
$55 = Math_fround(Math_fround($27 * $30) + Math_fround(Math_fround(Math_fround(-Math_fround($31 * $14)) - Math_fround($23 * $16)) - Math_fround($20 * $18)));
HEAPF32[$0 >> 2] = $33;
HEAPF32[$6 >> 2] = $40;
HEAPF32[$9 >> 2] = $47;
HEAPF32[$12 >> 2] = $55;
$56 = Math_fround(HEAPF32[$7 >> 2]);
$57 = Math_fround($40 * $56);
$58 = Math_fround(HEAPF32[$4 >> 2]);
$60 = Math_fround($57 - Math_fround($47 * $58));
$61 = Math_fround(HEAPF32[$10 >> 2]);
$63 = Math_fround($60 + Math_fround($33 * $61));
$64 = Math_fround(HEAPF32[$2 >> 2]);
$66 = Math_fround($63 + Math_fround($55 * $64));
$73 = Math_fround(Math_fround($55 * $58) + Math_fround(Math_fround($40 * $61) + Math_fround(Math_fround($47 * $64) - Math_fround($56 * $33))));
$80 = Math_fround(Math_fround($55 * $56) + Math_fround(Math_fround($47 * $61) + Math_fround(Math_fround($58 * $33) - Math_fround($40 * $64))));
$88 = Math_fround(Math_fround($55 * $61) + Math_fround(Math_fround(Math_fround(-Math_fround($33 * $64)) - Math_fround($40 * $58)) - Math_fround($47 * $56)));
HEAPF32[$0 >> 2] = $66;
HEAPF32[$6 >> 2] = $73;
HEAPF32[$9 >> 2] = $80;
HEAPF32[$12 >> 2] = $88;
return;
}
function __ZN7XMLCell5printEP8_IO_FILEi($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$038 = 0, $10 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $4 = 0, $41 = 0, $48 = 0, $5 = 0, $50 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer7 = sp + 24 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$4 = $0 + 8 | 0;
$5 = HEAP32[$4 >> 2] | 0;
if (!$5) $15 = 0; else $15 = HEAP32[$5 + 12 >> 2] | 0;
$9 = $0 + 4 | 0;
$10 = HEAP32[$9 >> 2] | 0;
if (!$10) $17 = 0; else $17 = HEAP32[$10 + 24 >> 2] | 0;
$14 = ($15 | 0) > 0;
do if ($14) {
$18 = HEAP32[$0 >> 2] | 0;
if (!$17) {
$24 = $18;
$58 = 1;
$59 = $0;
label = 11;
} else {
$27 = $18;
$60 = 1;
$61 = $0;
label = 12;
}
} else {
$21 = (HEAP32[$0 + 12 >> 2] | 0) != 0;
$22 = ($17 | 0) == 0;
$23 = HEAP32[$0 >> 2] | 0;
if (!($22 & ($21 ^ 1))) if ($22) {
$24 = $23;
$58 = $21;
$59 = $0;
label = 11;
break;
} else {
$27 = $23;
$60 = $21;
$61 = $0;
label = 12;
break;
}
HEAP32[$vararg_buffer >> 2] = $23;
_fprintf($1, 54145, $vararg_buffer) | 0;
STACKTOP = sp;
return;
} while (0);
do if ((label | 0) == 11) {
HEAP32[$vararg_buffer1 >> 2] = $24;
_fprintf($1, 54151, $vararg_buffer1) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$57 = $59;
$62 = $58;
} else if ((label | 0) == 12) {
HEAP32[$vararg_buffer4 >> 2] = $27;
_fprintf($1, 54156, $vararg_buffer4) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK7HashAnyIPKcS1_E5printEP8_IO_FILE(HEAP32[$9 >> 2] | 0, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
if ($60) {
_fputc(62, $1) | 0;
$57 = $61;
$62 = 1;
break;
} else {
_fwrite(54160, 2, 1, $1) | 0;
$57 = $61;
$62 = 0;
break;
}
} while (0);
if ($14) {
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
$$038 = 0;
do {
_fputc(10, $1) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$41 = HEAP32[$4 >> 2] | 0;
if ((HEAP32[$41 + 12 >> 2] | 0) > ($$038 | 0)) $48 = HEAP32[(HEAP32[$41 >> 2] | 0) + ($$038 << 2) >> 2] | 0; else $48 = 0;
__ZN7XMLCell5printEP8_IO_FILEi($48, $1, 0);
$$038 = $$038 + 1 | 0;
} while (($$038 | 0) != ($15 | 0));
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
}
$50 = $0 + 12 | 0;
if (HEAP32[$50 >> 2] | 0) {
_fputc(10, $1) | 0;
_fputs(HEAP32[$50 >> 2] | 0, $1) | 0;
}
if (!$62) {
STACKTOP = sp;
return;
}
_fputc(10, $1) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
HEAP32[$vararg_buffer7 >> 2] = HEAP32[$57 >> 2];
_fprintf($1, 54163, $vararg_buffer7) | 0;
STACKTOP = sp;
return;
}
function _big2_scanComment($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$038$be = 0, $$03844 = 0, $10 = 0, $12 = 0, $13 = 0, $34 = 0, $42 = 0, label = 0;
if (($1 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
if (!(HEAP8[$1 >> 0] | 0)) if ((HEAP8[$1 + 1 >> 0] | 0) == 45) {
$10 = $1 + 2 | 0;
if (($10 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
$12 = $0 + 72 | 0;
$13 = $2;
$$03844 = $10;
L10 : while (1) {
L12 : do switch (HEAP8[$$03844 >> 0] | 0) {
case -33:
case -34:
case -35:
case -36:
{
label = 16;
break L10;
break;
}
case 0:
{
switch (HEAP8[$12 + (HEAPU8[$$03844 + 1 >> 0] | 0) >> 0] | 0) {
case 8:
case 1:
case 0:
{
label = 16;
break L10;
break;
}
case 7:
{
label = 14;
break L12;
break;
}
case 5:
{
if (($13 - $$03844 | 0) < 2) {
$$0 = -2;
label = 27;
break L10;
}
$$038$be = $$03844 + 2 | 0;
break L12;
break;
}
case 6:
{
if (($13 - $$03844 | 0) < 3) {
$$0 = -2;
label = 27;
break L10;
}
$$038$be = $$03844 + 3 | 0;
break L12;
break;
}
case 27:
{
$34 = $$03844 + 2 | 0;
if (($34 | 0) == ($2 | 0)) {
$$0 = -1;
label = 27;
break L10;
}
if (HEAP8[$34 >> 0] | 0) {
$$038$be = $34;
break L12;
}
if ((HEAP8[$$03844 + 3 >> 0] | 0) == 45) {
label = 21;
break L10;
} else {
$$038$be = $34;
break L12;
}
break;
}
default:
{
label = 26;
break L12;
}
}
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 14;
break;
}
case -1:
{
if ((HEAPU8[$$03844 + 1 >> 0] | 0) > 253) {
label = 16;
break L10;
} else label = 26;
break;
}
default:
label = 26;
} while (0);
if ((label | 0) == 14) {
label = 0;
if (($13 - $$03844 | 0) < 4) {
$$0 = -2;
label = 27;
break;
}
$$038$be = $$03844 + 4 | 0;
} else if ((label | 0) == 26) {
label = 0;
$$038$be = $$03844 + 2 | 0;
}
if (($$038$be | 0) == ($2 | 0)) {
$$0 = -1;
label = 27;
break;
} else $$03844 = $$038$be;
}
if ((label | 0) == 16) {
HEAP32[$3 >> 2] = $$03844;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 21) {
$42 = $$03844 + 4 | 0;
if (($42 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
if (!(HEAP8[$42 >> 0] | 0)) if ((HEAP8[$$03844 + 5 >> 0] | 0) == 62) {
HEAP32[$3 >> 2] = $$03844 + 6;
$$0 = 13;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $42;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 27) return $$0 | 0;
}
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
function __ZN19TwoHConcretePostureC2ERKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $21 = 0, $22 = 0, $35 = 0, $36 = 0, $42 = 0, $46 = 0, $50 = 0, $64 = 0, $65 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0;
HEAP8[$0 >> 0] = HEAP8[$1 >> 0] | 0;
__ZN6VectorC2ERKS_($0 + 4 | 0, $1 + 4 | 0);
__ZN6VectorC2ERKS_($0 + 16 | 0, $1 + 16 | 0);
__ZN6VectorC2ERKS_($0 + 28 | 0, $1 + 28 | 0);
HEAP32[$0 + 40 >> 2] = HEAP32[$1 + 40 >> 2];
HEAP32[$0 + 44 >> 2] = HEAP32[$1 + 44 >> 2];
HEAP32[$0 + 48 >> 2] = HEAP32[$1 + 48 >> 2];
HEAP32[$0 + 52 >> 2] = HEAP32[$1 + 52 >> 2];
$21 = $0 + 56 | 0;
$22 = $1 + 56 | 0;
HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
HEAP32[$21 + 4 >> 2] = HEAP32[$22 + 4 >> 2];
HEAP32[$21 + 8 >> 2] = HEAP32[$22 + 8 >> 2];
HEAP32[$21 + 12 >> 2] = HEAP32[$22 + 12 >> 2];
HEAP32[$21 + 16 >> 2] = HEAP32[$22 + 16 >> 2];
HEAP32[$0 + 76 >> 2] = HEAP32[$1 + 76 >> 2];
HEAP32[$0 + 80 >> 2] = HEAP32[$1 + 80 >> 2];
HEAP32[$0 + 84 >> 2] = HEAP32[$1 + 84 >> 2];
HEAP32[$0 + 88 >> 2] = HEAP32[$1 + 88 >> 2];
$35 = $0 + 92 | 0;
$36 = $1 + 92 | 0;
HEAP32[$35 >> 2] = HEAP32[$36 >> 2];
HEAP32[$35 + 4 >> 2] = HEAP32[$36 + 4 >> 2];
HEAP32[$35 + 8 >> 2] = HEAP32[$36 + 8 >> 2];
HEAP32[$35 + 12 >> 2] = HEAP32[$36 + 12 >> 2];
HEAP32[$35 + 16 >> 2] = HEAP32[$36 + 16 >> 2];
HEAP8[$0 + 112 >> 0] = HEAP8[$1 + 112 >> 0] | 0;
__THREW__ = 0;
invoke_vii(120, $0 + 116 | 0, $1 + 116 | 0);
$42 = __THREW__;
__THREW__ = 0;
if ($42 & 1) {
$80 = ___cxa_find_matching_catch_2() | 0;
$81 = tempRet0;
HEAP32[$21 >> 2] = 0;
___resumeException($80 | 0);
}
__THREW__ = 0;
invoke_vii(120, $0 + 128 | 0, $1 + 128 | 0);
$46 = __THREW__;
__THREW__ = 0;
if ($46 & 1) {
$80 = ___cxa_find_matching_catch_2() | 0;
$81 = tempRet0;
HEAP32[$21 >> 2] = 0;
___resumeException($80 | 0);
}
__THREW__ = 0;
invoke_vii(120, $0 + 140 | 0, $1 + 140 | 0);
$50 = __THREW__;
__THREW__ = 0;
if ($50 & 1) {
$80 = ___cxa_find_matching_catch_2() | 0;
$81 = tempRet0;
HEAP32[$21 >> 2] = 0;
___resumeException($80 | 0);
} else {
HEAP32[$0 + 152 >> 2] = HEAP32[$1 + 152 >> 2];
HEAP32[$0 + 156 >> 2] = HEAP32[$1 + 156 >> 2];
HEAP32[$0 + 160 >> 2] = HEAP32[$1 + 160 >> 2];
HEAP32[$0 + 164 >> 2] = HEAP32[$1 + 164 >> 2];
$64 = $0 + 168 | 0;
$65 = $1 + 168 | 0;
HEAP32[$64 >> 2] = HEAP32[$65 >> 2];
HEAP32[$64 + 4 >> 2] = HEAP32[$65 + 4 >> 2];
HEAP32[$64 + 8 >> 2] = HEAP32[$65 + 8 >> 2];
HEAP32[$64 + 12 >> 2] = HEAP32[$65 + 12 >> 2];
HEAP32[$64 + 16 >> 2] = HEAP32[$65 + 16 >> 2];
HEAP32[$0 + 188 >> 2] = HEAP32[$1 + 188 >> 2];
HEAP32[$0 + 192 >> 2] = HEAP32[$1 + 192 >> 2];
HEAP32[$0 + 196 >> 2] = HEAP32[$1 + 196 >> 2];
HEAP32[$0 + 200 >> 2] = HEAP32[$1 + 200 >> 2];
$78 = $0 + 204 | 0;
$79 = $1 + 204 | 0;
HEAP32[$78 >> 2] = HEAP32[$79 >> 2];
HEAP32[$78 + 4 >> 2] = HEAP32[$79 + 4 >> 2];
HEAP32[$78 + 8 >> 2] = HEAP32[$79 + 8 >> 2];
HEAP32[$78 + 12 >> 2] = HEAP32[$79 + 12 >> 2];
HEAP32[$78 + 16 >> 2] = HEAP32[$79 + 16 >> 2];
return;
}
}
function _little2_scanComment($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$038$be = 0, $$03844 = 0, $10 = 0, $12 = 0, $13 = 0, $33 = 0, $41 = 0, label = 0;
if (($1 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
if (!(HEAP8[$1 + 1 >> 0] | 0)) if ((HEAP8[$1 >> 0] | 0) == 45) {
$10 = $1 + 2 | 0;
if (($10 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
$12 = $0 + 72 | 0;
$13 = $2;
$$03844 = $10;
L10 : while (1) {
L12 : do switch (HEAP8[$$03844 + 1 >> 0] | 0) {
case -33:
case -34:
case -35:
case -36:
{
label = 16;
break L10;
break;
}
case 0:
{
switch (HEAP8[$12 + (HEAPU8[$$03844 >> 0] | 0) >> 0] | 0) {
case 8:
case 1:
case 0:
{
label = 16;
break L10;
break;
}
case 7:
{
label = 14;
break L12;
break;
}
case 5:
{
if (($13 - $$03844 | 0) < 2) {
$$0 = -2;
label = 27;
break L10;
}
$$038$be = $$03844 + 2 | 0;
break L12;
break;
}
case 6:
{
if (($13 - $$03844 | 0) < 3) {
$$0 = -2;
label = 27;
break L10;
}
$$038$be = $$03844 + 3 | 0;
break L12;
break;
}
case 27:
{
$33 = $$03844 + 2 | 0;
if (($33 | 0) == ($2 | 0)) {
$$0 = -1;
label = 27;
break L10;
}
if (HEAP8[$$03844 + 3 >> 0] | 0) {
$$038$be = $33;
break L12;
}
if ((HEAP8[$33 >> 0] | 0) == 45) {
label = 21;
break L10;
} else {
$$038$be = $33;
break L12;
}
break;
}
default:
{
label = 26;
break L12;
}
}
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 14;
break;
}
case -1:
{
if ((HEAPU8[$$03844 >> 0] | 0) > 253) {
label = 16;
break L10;
} else label = 26;
break;
}
default:
label = 26;
} while (0);
if ((label | 0) == 14) {
label = 0;
if (($13 - $$03844 | 0) < 4) {
$$0 = -2;
label = 27;
break;
}
$$038$be = $$03844 + 4 | 0;
} else if ((label | 0) == 26) {
label = 0;
$$038$be = $$03844 + 2 | 0;
}
if (($$038$be | 0) == ($2 | 0)) {
$$0 = -1;
label = 27;
break;
} else $$03844 = $$038$be;
}
if ((label | 0) == 16) {
HEAP32[$3 >> 2] = $$03844;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 21) {
$41 = $$03844 + 4 | 0;
if (($41 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
if (!(HEAP8[$$03844 + 5 >> 0] | 0)) if ((HEAP8[$41 >> 0] | 0) == 62) {
HEAP32[$3 >> 2] = $$03844 + 6;
$$0 = 13;
return $$0 | 0;
}
HEAP32[$3 >> 2] = $41;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 27) return $$0 | 0;
}
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
function __ZN18HandJointRotations7setFromEPK7Gesture9SideIndex($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $5 = 0, $6 = 0;
$5 = HEAP32[(HEAP32[$1 >> 2] | 0) + 72 >> 2] | 0;
$6 = $1 + 4 | 0;
__Z17CopyJointRotationP13JointRotationPKS_(HEAP32[$0 >> 2] | 0, HEAP32[(HEAP32[$6 >> 2] | 0) + (HEAP32[(HEAP32[$5 + 52 + ($2 * 60 | 0) >> 2] | 0) + 4 >> 2] << 2) >> 2] | 0);
__Z17CopyJointRotationP13JointRotationPKS_(HEAP32[$0 + 4 >> 2] | 0, HEAP32[(HEAP32[$6 >> 2] | 0) + (HEAP32[(HEAP32[$5 + 52 + ($2 * 60 | 0) + 4 >> 2] | 0) + 4 >> 2] << 2) >> 2] | 0);
__Z17CopyJointRotationP13JointRotationPKS_(HEAP32[$0 + 8 >> 2] | 0, HEAP32[(HEAP32[$6 >> 2] | 0) + (HEAP32[(HEAP32[$5 + 52 + ($2 * 60 | 0) + 8 >> 2] | 0) + 4 >> 2] << 2) >> 2] | 0);
__Z17CopyJointRotationP13JointRotationPKS_(HEAP32[$0 + 12 >> 2] | 0, HEAP32[(HEAP32[$6 >> 2] | 0) + (HEAP32[(HEAP32[$5 + 52 + ($2 * 60 | 0) + 12 >> 2] | 0) + 4 >> 2] << 2) >> 2] | 0);
__Z17CopyJointRotationP13JointRotationPKS_(HEAP32[$0 + 16 >> 2] | 0, HEAP32[(HEAP32[$6 >> 2] | 0) + (HEAP32[(HEAP32[$5 + 52 + ($2 * 60 | 0) + 16 >> 2] | 0) + 4 >> 2] << 2) >> 2] | 0);
__Z17CopyJointRotationP13JointRotationPKS_(HEAP32[$0 + 20 >> 2] | 0, HEAP32[(HEAP32[$6 >> 2] | 0) + (HEAP32[(HEAP32[$5 + 52 + ($2 * 60 | 0) + 20 >> 2] | 0) + 4 >> 2] << 2) >> 2] | 0);
__Z17CopyJointRotationP13JointRotationPKS_(HEAP32[$0 + 24 >> 2] | 0, HEAP32[(HEAP32[$6 >> 2] | 0) + (HEAP32[(HEAP32[$5 + 52 + ($2 * 60 | 0) + 24 >> 2] | 0) + 4 >> 2] << 2) >> 2] | 0);
__Z17CopyJointRotationP13JointRotationPKS_(HEAP32[$0 + 28 >> 2] | 0, HEAP32[(HEAP32[$6 >> 2] | 0) + (HEAP32[(HEAP32[$5 + 52 + ($2 * 60 | 0) + 28 >> 2] | 0) + 4 >> 2] << 2) >> 2] | 0);
__Z17CopyJointRotationP13JointRotationPKS_(HEAP32[$0 + 32 >> 2] | 0, HEAP32[(HEAP32[$6 >> 2] | 0) + (HEAP32[(HEAP32[$5 + 52 + ($2 * 60 | 0) + 32 >> 2] | 0) + 4 >> 2] << 2) >> 2] | 0);
__Z17CopyJointRotationP13JointRotationPKS_(HEAP32[$0 + 36 >> 2] | 0, HEAP32[(HEAP32[$6 >> 2] | 0) + (HEAP32[(HEAP32[$5 + 52 + ($2 * 60 | 0) + 36 >> 2] | 0) + 4 >> 2] << 2) >> 2] | 0);
__Z17CopyJointRotationP13JointRotationPKS_(HEAP32[$0 + 40 >> 2] | 0, HEAP32[(HEAP32[$6 >> 2] | 0) + (HEAP32[(HEAP32[$5 + 52 + ($2 * 60 | 0) + 40 >> 2] | 0) + 4 >> 2] << 2) >> 2] | 0);
__Z17CopyJointRotationP13JointRotationPKS_(HEAP32[$0 + 44 >> 2] | 0, HEAP32[(HEAP32[$6 >> 2] | 0) + (HEAP32[(HEAP32[$5 + 52 + ($2 * 60 | 0) + 44 >> 2] | 0) + 4 >> 2] << 2) >> 2] | 0);
__Z17CopyJointRotationP13JointRotationPKS_(HEAP32[$0 + 48 >> 2] | 0, HEAP32[(HEAP32[$6 >> 2] | 0) + (HEAP32[(HEAP32[$5 + 52 + ($2 * 60 | 0) + 48 >> 2] | 0) + 4 >> 2] << 2) >> 2] | 0);
__Z17CopyJointRotationP13JointRotationPKS_(HEAP32[$0 + 52 >> 2] | 0, HEAP32[(HEAP32[$6 >> 2] | 0) + (HEAP32[(HEAP32[$5 + 52 + ($2 * 60 | 0) + 52 >> 2] | 0) + 4 >> 2] << 2) >> 2] | 0);
__Z17CopyJointRotationP13JointRotationPKS_(HEAP32[$0 + 56 >> 2] | 0, HEAP32[(HEAP32[$6 >> 2] | 0) + (HEAP32[(HEAP32[$5 + 52 + ($2 * 60 | 0) + 56 >> 2] | 0) + 4 >> 2] << 2) >> 2] | 0);
return;
}
function __ZN9Handshape16setHandshapeFromEPKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $21 = 0, $3 = 0, $4 = 0, $47 = 0, $48 = 0, $6 = 0, $9 = 0, $scevgep$i = 0;
if (!$1) return;
_memcpy($0 | 0, $1 | 0, 217) | 0;
$3 = $0 + 220 | 0;
$4 = HEAP32[$3 >> 2] | 0;
if ($4 | 0) {
__ZdlPv($4);
HEAP32[$3 >> 2] = 0;
}
$6 = $1 + 220 | 0;
if (HEAP32[$6 >> 2] | 0) {
$9 = __Znwj(220) | 0;
HEAP32[$9 >> 2] = 0;
HEAP8[$9 + 4 >> 0] = 0;
HEAP32[$9 + 8 >> 2] = 0;
HEAPF32[$9 + 12 >> 2] = Math_fround(-100.0);
HEAPF32[$9 + 16 >> 2] = Math_fround(-100.0);
HEAPF32[$9 + 20 >> 2] = Math_fround(-100.0);
HEAPF32[$9 + 24 >> 2] = Math_fround(-100.0);
HEAP32[$9 + 28 >> 2] = 0;
HEAPF32[$9 + 32 >> 2] = Math_fround(-100.0);
HEAPF32[$9 + 36 >> 2] = Math_fround(-100.0);
HEAPF32[$9 + 40 >> 2] = Math_fround(-100.0);
HEAPF32[$9 + 44 >> 2] = Math_fround(-100.0);
$21 = $9 + 48 | 0;
HEAP32[$21 >> 2] = 0;
HEAP32[$21 + 4 >> 2] = 0;
HEAP32[$21 + 8 >> 2] = 0;
HEAPF32[$9 + 80 >> 2] = Math_fround(-100.0);
HEAPF32[$9 + 84 >> 2] = Math_fround(-100.0);
HEAPF32[$9 + 88 >> 2] = Math_fround(-100.0);
HEAPF32[$9 + 92 >> 2] = Math_fround(-100.0);
HEAPF32[$9 + 96 >> 2] = Math_fround(-100.0);
HEAPF32[$9 + 100 >> 2] = Math_fround(-100.0);
HEAPF32[$9 + 104 >> 2] = Math_fround(-100.0);
HEAPF32[$9 + 108 >> 2] = Math_fround(-100.0);
HEAPF32[$9 + 112 >> 2] = Math_fround(-100.0);
HEAPF32[$9 + 116 >> 2] = Math_fround(-100.0);
HEAPF32[$9 + 120 >> 2] = Math_fround(-100.0);
HEAPF32[$9 + 124 >> 2] = Math_fround(-100.0);
HEAPF32[$9 + 128 >> 2] = Math_fround(-100.0);
HEAPF32[$9 + 132 >> 2] = Math_fround(-100.0);
HEAPF32[$9 + 136 >> 2] = Math_fround(-100.0);
HEAPF32[$9 + 140 >> 2] = Math_fround(-100.0);
HEAPF32[$9 + 144 >> 2] = Math_fround(-100.0);
HEAPF32[$9 + 148 >> 2] = Math_fround(-100.0);
HEAPF32[$9 + 152 >> 2] = Math_fround(-100.0);
HEAPF32[$9 + 156 >> 2] = Math_fround(-100.0);
HEAPF32[$9 + 160 >> 2] = Math_fround(-100.0);
HEAPF32[$9 + 164 >> 2] = Math_fround(-100.0);
HEAPF32[$9 + 168 >> 2] = Math_fround(-100.0);
HEAPF32[$9 + 172 >> 2] = Math_fround(-100.0);
HEAPF32[$9 + 176 >> 2] = Math_fround(-100.0);
$47 = $9 + 180 | 0;
$48 = $9 + 204 | 0;
HEAP32[$47 >> 2] = -1;
HEAP32[$47 + 4 >> 2] = -1;
HEAP32[$47 + 8 >> 2] = -1;
HEAP32[$47 + 12 >> 2] = -1;
HEAP32[$47 + 16 >> 2] = -1;
HEAP32[$47 + 20 >> 2] = -1;
$scevgep$i = $9 + 60 | 0;
HEAP32[$scevgep$i >> 2] = 0;
HEAP32[$scevgep$i + 4 >> 2] = 0;
HEAP32[$scevgep$i + 8 >> 2] = 0;
HEAP32[$scevgep$i + 12 >> 2] = 0;
HEAP32[$scevgep$i + 16 >> 2] = 0;
HEAP32[$48 >> 2] = 0;
HEAP32[$48 + 4 >> 2] = 0;
HEAP32[$48 + 8 >> 2] = 0;
HEAP8[$48 + 12 >> 0] = 0;
HEAP32[$3 >> 2] = $9;
_memcpy($9 | 0, HEAP32[$6 >> 2] | 0, 217) | 0;
HEAP32[$0 + 224 >> 2] = HEAP32[$1 + 224 >> 2];
}
HEAP8[$0 + 233 >> 0] = HEAP8[$1 + 233 >> 0] | 0;
__ZN18HandJointRotations7setFromEPKS_(HEAP32[$0 + 236 >> 2] | 0, HEAP32[$1 + 236 >> 2] | 0);
return;
}
function __ZNK19OneHConcretePosture5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $18 = 0, $3 = 0, $33 = 0, $57 = 0.0, $62 = 0.0, $67 = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$vararg_buffer9 = sp + 40 | 0;
$vararg_buffer5 = sp + 24 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$3 = $0 + 4 | 0;
if (Math_fround(HEAPF32[$3 >> 2]) != Math_fround(0.0)) label = 5; else if (Math_fround(HEAPF32[$0 + 8 >> 2]) != Math_fround(0.0)) label = 5; else if (Math_fround(HEAPF32[$0 + 12 >> 2]) != Math_fround(0.0)) label = 5;
if ((label | 0) == 5) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(35535, 14, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($3, $1, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$18 = $0 + 16 | 0;
if (Math_fround(HEAPF32[$18 >> 2]) != Math_fround(0.0)) label = 9; else if (Math_fround(HEAPF32[$0 + 20 >> 2]) != Math_fround(0.0)) label = 9; else if (Math_fround(HEAPF32[$0 + 24 >> 2]) != Math_fround(0.0)) label = 9;
if ((label | 0) == 9) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(35550, 16, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($18, $1, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$33 = $0 + 40 | 0;
if (Math_fround(HEAPF32[$33 >> 2]) != Math_fround(0.0)) label = 13; else if (Math_fround(HEAPF32[$0 + 44 >> 2]) != Math_fround(0.0)) label = 13; else if (Math_fround(HEAPF32[$0 + 48 >> 2]) != Math_fround(0.0)) label = 13;
if ((label | 0) == 13) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(35567, 12, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK10Quaternion5printEP8_IO_FILEi($33, $1, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 56 >> 2];
_fprintf($1, 35580, $vararg_buffer) | 0;
__ZNK27OneHConcretePostureModifier5printEP8_IO_FILE($0 + 76 | 0, $1);
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$57 = +Math_fround(HEAPF32[$0 + 64 >> 2]);
HEAP32[$vararg_buffer1 >> 2] = 3;
HEAPF64[$vararg_buffer1 + 8 >> 3] = $57;
_fprintf($1, 35594, $vararg_buffer1) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$62 = +Math_fround(HEAPF32[$0 + 68 >> 2]);
HEAP32[$vararg_buffer5 >> 2] = 3;
HEAPF64[$vararg_buffer5 + 8 >> 3] = $62;
_fprintf($1, 35618, $vararg_buffer5) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$67 = +Math_fround(HEAPF32[$0 + 72 >> 2]);
HEAP32[$vararg_buffer9 >> 2] = 3;
HEAPF64[$vararg_buffer9 + 8 >> 3] = $67;
_fprintf($1, 35642, $vararg_buffer9) | 0;
STACKTOP = sp;
return;
}
function __ZNK23FingerBaseJointRotation5printEP8_IO_FILEs($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $10 = 0.0, $13 = 0.0, $16 = 0.0, $19 = 0.0, $24 = 0.0, $27 = 0.0, $30 = 0.0, $33 = 0.0, $38 = 0.0, $41 = 0.0, $44 = 0.0, $49 = 0.0, $52 = 0.0, $55 = 0.0, $58 = 0.0, $7 = 0, $vararg_buffer = 0, $vararg_buffer19 = 0, $vararg_buffer27 = 0, $vararg_buffer9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 240 | 0;
$vararg_buffer27 = sp + 176 | 0;
$vararg_buffer19 = sp + 128 | 0;
$vararg_buffer9 = sp + 64 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$7 = $2 << 16 >> 16;
$10 = +Math_fround(HEAPF32[$0 + 8 >> 2]);
$13 = +Math_fround(HEAPF32[$0 + 12 >> 2]);
$16 = +Math_fround(HEAPF32[$0 + 16 >> 2]);
$19 = +Math_fround(HEAPF32[$0 + 44 >> 2]);
HEAP32[$vararg_buffer >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2];
HEAP32[$vararg_buffer + 4 >> 2] = $7;
HEAPF64[$vararg_buffer + 8 >> 3] = $10;
HEAP32[$vararg_buffer + 16 >> 2] = $7;
HEAPF64[$vararg_buffer + 24 >> 3] = $13;
HEAP32[$vararg_buffer + 32 >> 2] = $7;
HEAPF64[$vararg_buffer + 40 >> 3] = $16;
HEAP32[$vararg_buffer + 48 >> 2] = $7;
HEAPF64[$vararg_buffer + 56 >> 3] = $19;
_fprintf($1, 14050, $vararg_buffer) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$24 = +Math_fround(HEAPF32[$0 + 20 >> 2]);
$27 = +Math_fround(HEAPF32[$0 + 24 >> 2]);
$30 = +Math_fround(HEAPF32[$0 + 28 >> 2]);
$33 = +Math_fround(HEAPF32[$0 + 48 >> 2]);
HEAP32[$vararg_buffer9 >> 2] = $7;
HEAPF64[$vararg_buffer9 + 8 >> 3] = $24;
HEAP32[$vararg_buffer9 + 16 >> 2] = $7;
HEAPF64[$vararg_buffer9 + 24 >> 3] = $27;
HEAP32[$vararg_buffer9 + 32 >> 2] = $7;
HEAPF64[$vararg_buffer9 + 40 >> 3] = $30;
HEAP32[$vararg_buffer9 + 48 >> 2] = $7;
HEAPF64[$vararg_buffer9 + 56 >> 3] = $33;
_fprintf($1, 14096, $vararg_buffer9) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$38 = +Math_fround(HEAPF32[$0 + 32 >> 2]);
$41 = +Math_fround(HEAPF32[$0 + 36 >> 2]);
$44 = +Math_fround(HEAPF32[$0 + 40 >> 2]);
HEAP32[$vararg_buffer19 >> 2] = $7;
HEAPF64[$vararg_buffer19 + 8 >> 3] = $38;
HEAP32[$vararg_buffer19 + 16 >> 2] = $7;
HEAPF64[$vararg_buffer19 + 24 >> 3] = $41;
HEAP32[$vararg_buffer19 + 32 >> 2] = $7;
HEAPF64[$vararg_buffer19 + 40 >> 3] = $44;
_fprintf($1, 14130, $vararg_buffer19) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$49 = +Math_fround(HEAPF32[$0 + 52 >> 2]);
$52 = +Math_fround(HEAPF32[$0 + 56 >> 2]);
$55 = +Math_fround(HEAPF32[$0 + 64 >> 2]);
$58 = +Math_fround(HEAPF32[$0 + 68 >> 2]);
HEAP32[$vararg_buffer27 >> 2] = $7;
HEAPF64[$vararg_buffer27 + 8 >> 3] = $49;
HEAP32[$vararg_buffer27 + 16 >> 2] = $7;
HEAPF64[$vararg_buffer27 + 24 >> 3] = $52;
HEAP32[$vararg_buffer27 + 32 >> 2] = $7;
HEAPF64[$vararg_buffer27 + 40 >> 3] = $55;
HEAP32[$vararg_buffer27 + 48 >> 2] = $7;
HEAPF64[$vararg_buffer27 + 56 >> 3] = $58;
_fprintf($1, 14159, $vararg_buffer27) | 0;
STACKTOP = sp;
return;
}
function _big2_scanLit($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$035$be = 0, $$035$ph$be = 0, $$035$ph63 = 0, $$03562 = 0, $$2 = 0, $15 = 0, $25 = 0, $6 = 0, $7 = 0, label = 0;
if (($2 | 0) == ($3 | 0)) {
$$2 = -1;
return $$2 | 0;
}
$6 = $1 + 72 | 0;
$7 = $3;
$$035$ph63 = $2;
L4 : while (1) {
$$03562 = $$035$ph63;
L6 : while (1) {
L8 : do switch (HEAP8[$$03562 >> 0] | 0) {
case -33:
case -34:
case -35:
case -36:
{
label = 9;
break L4;
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 17;
break L6;
break;
}
case 0:
{
$15 = HEAP8[$6 + (HEAPU8[$$03562 + 1 >> 0] | 0) >> 0] | 0;
switch ($15 << 24 >> 24) {
case 8:
case 1:
case 0:
{
label = 9;
break L4;
break;
}
case 7:
{
label = 17;
break L6;
break;
}
case 5:
{
label = 7;
break L6;
break;
}
case 6:
{
label = 8;
break L6;
break;
}
case 13:
case 12:
break;
default:
{
label = 16;
break L8;
}
}
$25 = $$03562 + 2 | 0;
if (($15 & 255 | 0) == ($0 | 0)) {
label = 12;
break L4;
} else $$035$be = $25;
break;
}
case -1:
{
if ((HEAPU8[$$03562 + 1 >> 0] | 0) > 253) {
label = 9;
break L4;
} else label = 16;
break;
}
default:
label = 16;
} while (0);
if ((label | 0) == 16) {
label = 0;
$$035$be = $$03562 + 2 | 0;
}
if (($$035$be | 0) == ($3 | 0)) {
$$2 = -1;
label = 19;
break L4;
} else $$03562 = $$035$be;
}
if ((label | 0) == 7) {
label = 0;
if (($7 - $$03562 | 0) < 2) {
$$2 = -2;
label = 19;
break;
} else $$035$ph$be = $$03562 + 2 | 0;
} else if ((label | 0) == 8) {
label = 0;
if (($7 - $$03562 | 0) < 3) {
$$2 = -2;
label = 19;
break;
} else $$035$ph$be = $$03562 + 3 | 0;
} else if ((label | 0) == 17) {
label = 0;
if (($7 - $$03562 | 0) < 4) {
$$2 = -2;
label = 19;
break;
} else $$035$ph$be = $$03562 + 4 | 0;
}
if (($$035$ph$be | 0) == ($3 | 0)) {
$$2 = -1;
label = 19;
break;
} else $$035$ph63 = $$035$ph$be;
}
if ((label | 0) == 9) {
HEAP32[$4 >> 2] = $$03562;
$$2 = 0;
return $$2 | 0;
} else if ((label | 0) == 12) {
if (($25 | 0) == ($3 | 0)) {
$$2 = -27;
return $$2 | 0;
}
HEAP32[$4 >> 2] = $25;
L32 : do if (!(HEAP8[$25 >> 0] | 0)) {
switch (HEAP8[$6 + (HEAPU8[$$03562 + 3 >> 0] | 0) >> 0] | 0) {
case 20:
case 30:
case 11:
case 10:
case 9:
case 21:
{
$$2 = 27;
break;
}
default:
break L32;
}
return $$2 | 0;
} while (0);
$$2 = 0;
return $$2 | 0;
} else if ((label | 0) == 19) return $$2 | 0;
return 0;
}
function _little2_scanLit($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$035$be = 0, $$035$ph$be = 0, $$035$ph63 = 0, $$03562 = 0, $$2 = 0, $14 = 0, $24 = 0, $6 = 0, $7 = 0, label = 0;
if (($2 | 0) == ($3 | 0)) {
$$2 = -1;
return $$2 | 0;
}
$6 = $1 + 72 | 0;
$7 = $3;
$$035$ph63 = $2;
L4 : while (1) {
$$03562 = $$035$ph63;
L6 : while (1) {
L8 : do switch (HEAP8[$$03562 + 1 >> 0] | 0) {
case -33:
case -34:
case -35:
case -36:
{
label = 9;
break L4;
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 17;
break L6;
break;
}
case 0:
{
$14 = HEAP8[$6 + (HEAPU8[$$03562 >> 0] | 0) >> 0] | 0;
switch ($14 << 24 >> 24) {
case 8:
case 1:
case 0:
{
label = 9;
break L4;
break;
}
case 7:
{
label = 17;
break L6;
break;
}
case 5:
{
label = 7;
break L6;
break;
}
case 6:
{
label = 8;
break L6;
break;
}
case 13:
case 12:
break;
default:
{
label = 16;
break L8;
}
}
$24 = $$03562 + 2 | 0;
if (($14 & 255 | 0) == ($0 | 0)) {
label = 12;
break L4;
} else $$035$be = $24;
break;
}
case -1:
{
if ((HEAPU8[$$03562 >> 0] | 0) > 253) {
label = 9;
break L4;
} else label = 16;
break;
}
default:
label = 16;
} while (0);
if ((label | 0) == 16) {
label = 0;
$$035$be = $$03562 + 2 | 0;
}
if (($$035$be | 0) == ($3 | 0)) {
$$2 = -1;
label = 19;
break L4;
} else $$03562 = $$035$be;
}
if ((label | 0) == 7) {
label = 0;
if (($7 - $$03562 | 0) < 2) {
$$2 = -2;
label = 19;
break;
} else $$035$ph$be = $$03562 + 2 | 0;
} else if ((label | 0) == 8) {
label = 0;
if (($7 - $$03562 | 0) < 3) {
$$2 = -2;
label = 19;
break;
} else $$035$ph$be = $$03562 + 3 | 0;
} else if ((label | 0) == 17) {
label = 0;
if (($7 - $$03562 | 0) < 4) {
$$2 = -2;
label = 19;
break;
} else $$035$ph$be = $$03562 + 4 | 0;
}
if (($$035$ph$be | 0) == ($3 | 0)) {
$$2 = -1;
label = 19;
break;
} else $$035$ph63 = $$035$ph$be;
}
if ((label | 0) == 9) {
HEAP32[$4 >> 2] = $$03562;
$$2 = 0;
return $$2 | 0;
} else if ((label | 0) == 12) {
if (($24 | 0) == ($3 | 0)) {
$$2 = -27;
return $$2 | 0;
}
HEAP32[$4 >> 2] = $24;
L32 : do if (!(HEAP8[$$03562 + 3 >> 0] | 0)) {
switch (HEAP8[$6 + (HEAPU8[$24 >> 0] | 0) >> 0] | 0) {
case 20:
case 30:
case 11:
case 10:
case 9:
case 21:
{
$$2 = 27;
break;
}
default:
break L32;
}
return $$2 | 0;
} while (0);
$$2 = 0;
return $$2 | 0;
} else if ((label | 0) == 19) return $$2 | 0;
return 0;
}
function __ZN10Quaternion16setQuatFrom2VecsERK6VectorS2_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $26 = f0, $28 = f0, $3 = 0, $33 = f0, $4 = 0, $43 = 0, $45 = 0, $5 = 0, $54 = f0, $59 = f0, $6 = f0, $61 = f0, $64 = f0, $67 = f0, $7 = f0, $9 = f0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$3 = sp + 24 | 0;
$4 = sp + 12 | 0;
$5 = sp;
__ZN6VectorC2Ev($3);
__ZN6Vector15setCrossProductERKS_S1_($3, $1, $2);
$6 = Math_fround(__ZNK6Vector8lengthsqEv($3));
$7 = Math_fround(__ZNK6Vector10dotProductERKS_($1, $2));
$9 = Math_fround($6 + Math_fround($7 * $7));
if (+$9 < 1.0e-06) {
HEAPF32[$0 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 4 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 12 >> 2] = Math_fround(1.0);
STACKTOP = sp;
return;
}
if (!(+$6 < 1.0e-06)) {
$54 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($7 / Math_fround(Math_sqrt(Math_fround($9)))) + Math_fround(1.0)) * Math_fround(.5))));
$59 = Math_fround(Math_fround(Math_fround(Math_sqrt(Math_fround($6 / $9))) / Math_fround($54 * Math_fround(2.0))) / Math_fround(Math_sqrt(Math_fround($6))));
$61 = Math_fround(Math_fround(HEAPF32[$3 >> 2]) * $59);
$64 = Math_fround($59 * Math_fround(HEAPF32[$3 + 4 >> 2]));
$67 = Math_fround($59 * Math_fround(HEAPF32[$3 + 8 >> 2]));
HEAPF32[$0 >> 2] = $61;
HEAPF32[$0 + 4 >> 2] = $64;
HEAPF32[$0 + 8 >> 2] = $67;
HEAPF32[$0 + 12 >> 2] = $54;
__ZNK10Quaternion14checkValidQuatEv($0);
STACKTOP = sp;
return;
}
if ($7 > Math_fround(0.0)) {
HEAPF32[$0 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 4 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 12 >> 2] = Math_fround(1.0);
STACKTOP = sp;
return;
}
if (Math_fround(HEAPF32[$1 >> 2]) == Math_fround(0.0)) {
HEAPF32[$0 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 4 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 12 >> 2] = Math_fround(0.0);
STACKTOP = sp;
return;
}
__ZN6VectorC2Ev($4);
$26 = Math_fround(HEAPF32[$1 >> 2]);
$28 = Math_fround(HEAPF32[$1 + 8 >> 2]);
if ($26 > Math_fround(0.0) & $26 < $28) label = 10; else if ($26 < Math_fround(0.0) & $26 > $28) label = 10; else __ZN6Vector7setFromEfff($4, Math_fround(-Math_fround(HEAPF32[$1 + 4 >> 2])), $26, Math_fround(0.0));
if ((label | 0) == 10) {
$33 = Math_fround(-$28);
__ZN6Vector7setFromEfff($4, Math_fround(0.0), $33, Math_fround(HEAPF32[$1 + 4 >> 2]));
}
__ZN6VectorC2Ev($5);
__ZN6Vector15setCrossProductERKS_S1_($5, $1, $4);
__ZN6Vector8setScaleEf($5, Math_fround(Math_fround(1.0) / Math_fround(__ZNK6Vector8lengthsqEv($1))));
$43 = HEAP32[$5 + 4 >> 2] | 0;
$45 = HEAP32[$5 + 8 >> 2] | 0;
HEAP32[$0 >> 2] = HEAP32[$5 >> 2];
HEAP32[$0 + 4 >> 2] = $43;
HEAP32[$0 + 8 >> 2] = $45;
HEAPF32[$0 + 12 >> 2] = Math_fround(0.0);
__ZNK10Quaternion14checkValidQuatEv($0);
STACKTOP = sp;
return;
}
function __ZN7Getopts10printValueEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$012$i$i$i = 0, $$01215$i$i$i = 0, $$01216$i$i$i = 0, $$017 = 0, $$08$i = 0, $$sink$i$i$i = 0, $11 = 0, $13 = 0, $15 = 0, $18 = 0, $19 = 0, $3 = 0, $31 = 0, $33 = 0, $4 = 0, $40 = 0, $42 = 0, $45 = 0, $48 = 0, $49 = 0, $55 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$3 = $0 + 4 | 0;
$4 = HEAP32[$3 >> 2] | 0;
if (!$4) {
STACKTOP = sp;
return;
}
if ((HEAP32[$4 + 12 >> 2] | 0) <= 0) {
STACKTOP = sp;
return;
}
$9 = $0 + 8 | 0;
$$017 = 0;
$11 = $4;
do {
$13 = HEAP32[(HEAP32[$11 >> 2] | 0) + ($$017 << 2) >> 2] | 0;
if ($13 | 0) {
$15 = HEAP32[$0 >> 2] | 0;
$18 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($13, HEAP32[$15 + 4 >> 2] | 0) | 0;
$19 = HEAP32[$15 >> 2] | 0;
L14 : do if ((HEAP16[$19 + ($18 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i = HEAP32[$19 + ($18 << 3) >> 2] | 0;
if (!$$01215$i$i$i) label = 11; else {
$$01216$i$i$i = $$01215$i$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($13, HEAP32[$$01216$i$i$i >> 2] | 0) | 0) break;
$$012$i$i$i = HEAP32[$$01216$i$i$i + 8 >> 2] | 0;
if (!$$012$i$i$i) {
label = 11;
break L14;
} else $$01216$i$i$i = $$012$i$i$i;
}
$$sink$i$i$i = $$01216$i$i$i + 4 | 0;
}
} else label = 11; while (0);
if ((label | 0) == 11) {
label = 0;
$$sink$i$i$i = $15 + 20 | 0;
}
$31 = HEAP32[$$sink$i$i$i >> 2] | 0;
if (($31 | 0) != -1) {
$33 = HEAP32[$9 >> 2] | 0;
if (($31 | 0) >= 0) if ((HEAP32[$33 + 12 >> 2] | 0) > ($31 | 0)) {
$40 = HEAP32[(HEAP32[$33 >> 2] | 0) + ($31 << 2) >> 2] | 0;
if ($40 | 0) {
$42 = $40 + 16 | 0;
if ((HEAP32[$42 >> 2] | 0) > 0) {
HEAP32[$vararg_buffer >> 2] = $13;
_fprintf($1, 9994, $vararg_buffer) | 0;
$45 = HEAP32[$42 >> 2] | 0;
if (($45 | 0) > 0) {
if (($45 | 0) != 1) {
HEAP32[$vararg_buffer1 >> 2] = $45;
_fprintf($1, 9470, $vararg_buffer1) | 0;
}
$48 = $40 + 12 | 0;
$49 = HEAP32[$48 >> 2] | 0;
if ($49 | 0) if ((HEAP32[$49 + 12 >> 2] | 0) > 0) {
$$08$i = 0;
$55 = $49;
do {
HEAP32[$vararg_buffer4 >> 2] = HEAP32[(HEAP32[$55 >> 2] | 0) + ($$08$i << 2) >> 2];
_fprintf($1, 9481, $vararg_buffer4) | 0;
$$08$i = $$08$i + 1 | 0;
$55 = HEAP32[$48 >> 2] | 0;
} while (($$08$i | 0) < (HEAP32[$55 + 12 >> 2] | 0));
}
_fputc(10, $1) | 0;
}
}
}
}
}
}
$$017 = $$017 + 1 | 0;
$11 = HEAP32[$3 >> 2] | 0;
} while (($$017 | 0) < (HEAP32[$11 + 12 >> 2] | 0));
STACKTOP = sp;
return;
}
function _little2_toUtf8($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$058$lcssa = 0, $$05860 = 0, $$2$ph = 0, $10 = 0, $11 = 0, $13 = 0, $16 = 0, $20 = 0, $30 = 0, $32 = 0, $42 = 0, $47 = 0, $5 = 0, $52 = 0, $54 = 0, $60 = 0, $63 = 0, $7 = 0, $75 = 0, $77 = 0, $8 = 0, $86 = 0, $91 = 0, $92 = 0, $97 = 0, label = 0;
$5 = HEAP32[$1 >> 2] | 0;
if (($5 | 0) == ($2 | 0)) {
$$058$lcssa = $2;
HEAP32[$1 >> 2] = $$058$lcssa;
return;
}
$7 = $4;
$$05860 = $5;
L4 : while (1) {
$8 = HEAP8[$$05860 >> 0] | 0;
$10 = HEAP8[$$05860 + 1 >> 0] | 0;
$11 = $10 & 255;
switch ($10 << 24 >> 24) {
case 0:
{
if ($8 << 24 >> 24 > -1) {
$13 = HEAP32[$3 >> 2] | 0;
if (($13 | 0) == ($4 | 0)) {
$$058$lcssa = $$05860;
label = 14;
break L4;
}
HEAP32[$3 >> 2] = $13 + 1;
HEAP8[$13 >> 0] = $8;
$$2$ph = $$05860;
} else label = 7;
break;
}
case 7:
case 6:
case 5:
case 4:
case 3:
case 2:
case 1:
{
label = 7;
break;
}
case -37:
case -38:
case -39:
case -40:
{
$54 = HEAP32[$3 >> 2] | 0;
if (($7 - $54 | 0) < 4) {
$$058$lcssa = $$05860;
label = 14;
break L4;
}
$60 = $8 & 255;
$63 = ($11 << 2 & 12 | $60 >>> 6) + 1 | 0;
HEAP32[$3 >> 2] = $54 + 1;
HEAP8[$54 >> 0] = $63 >>> 2 | 240;
$75 = HEAP32[$3 >> 2] | 0;
HEAP32[$3 >> 2] = $75 + 1;
HEAP8[$75 >> 0] = $60 >>> 2 & 15 | $63 << 4 & 48 | 128;
$77 = $$05860 + 2 | 0;
$86 = HEAPU8[$77 >> 0] | 0;
$91 = ($60 << 4 & 48 | $86 >>> 6 | HEAP8[$$05860 + 3 >> 0] << 2 & 12 | 128) & 255;
$92 = HEAP32[$3 >> 2] | 0;
HEAP32[$3 >> 2] = $92 + 1;
HEAP8[$92 >> 0] = $91;
$97 = HEAP32[$3 >> 2] | 0;
HEAP32[$3 >> 2] = $97 + 1;
HEAP8[$97 >> 0] = $86 & 63 | 128;
$$2$ph = $77;
break;
}
default:
{
$32 = HEAP32[$3 >> 2] | 0;
if (($7 - $32 | 0) < 3) {
$$058$lcssa = $$05860;
label = 14;
break L4;
}
HEAP32[$3 >> 2] = $32 + 1;
HEAP8[$32 >> 0] = $11 >>> 4 | 224;
$42 = $8 & 255;
$47 = HEAP32[$3 >> 2] | 0;
HEAP32[$3 >> 2] = $47 + 1;
HEAP8[$47 >> 0] = $42 >>> 6 | $11 << 2 & 60 | 128;
$52 = HEAP32[$3 >> 2] | 0;
HEAP32[$3 >> 2] = $52 + 1;
HEAP8[$52 >> 0] = $42 & 63 | 128;
$$2$ph = $$05860;
}
}
if ((label | 0) == 7) {
label = 0;
$16 = HEAP32[$3 >> 2] | 0;
if (($7 - $16 | 0) < 2) {
$$058$lcssa = $$05860;
label = 14;
break;
}
$20 = $8 & 255;
HEAP32[$3 >> 2] = $16 + 1;
HEAP8[$16 >> 0] = $20 >>> 6 | $11 << 2 | 192;
$30 = HEAP32[$3 >> 2] | 0;
HEAP32[$3 >> 2] = $30 + 1;
HEAP8[$30 >> 0] = $20 & 63 | 128;
$$2$ph = $$05860;
}
$$05860 = $$2$ph + 2 | 0;
if (($$05860 | 0) == ($2 | 0)) {
$$058$lcssa = $2;
label = 14;
break;
}
}
if ((label | 0) == 14) {
HEAP32[$1 >> 2] = $$058$lcssa;
return;
}
}
function ___stpncpy($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0$lcssa = 0, $$037$lcssa = 0, $$03753 = 0, $$038$lcssa = 0, $$03866 = 0, $$039$lcssa = 0, $$03965 = 0, $$041$lcssa = 0, $$04164 = 0, $$054 = 0, $$1$lcssa = 0, $$140$ph = 0, $$14046 = 0, $$142$ph = 0, $$14245 = 0, $$152 = 0, $$2$ph = 0, $$243 = 0, $$247 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $19 = 0, $22 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $37 = 0, label = 0;
$3 = $1;
L1 : do if (!(($3 ^ $0) & 3)) {
$10 = ($2 | 0) != 0;
if ($10 & ($3 & 3 | 0) != 0) {
$$03866 = $2;
$$03965 = $1;
$$04164 = $0;
while (1) {
$11 = HEAP8[$$03965 >> 0] | 0;
HEAP8[$$04164 >> 0] = $11;
if (!($11 << 24 >> 24)) {
$$243 = $$04164;
$$3 = $$03866;
break L1;
}
$13 = $$03866 + -1 | 0;
$14 = $$03965 + 1 | 0;
$15 = $$04164 + 1 | 0;
$19 = ($13 | 0) != 0;
if ($19 & ($14 & 3 | 0) != 0) {
$$03866 = $13;
$$03965 = $14;
$$04164 = $15;
} else {
$$038$lcssa = $13;
$$039$lcssa = $14;
$$041$lcssa = $15;
$$lcssa = $19;
break;
}
}
} else {
$$038$lcssa = $2;
$$039$lcssa = $1;
$$041$lcssa = $0;
$$lcssa = $10;
}
if ($$lcssa) if (!(HEAP8[$$039$lcssa >> 0] | 0)) {
$$243 = $$041$lcssa;
$$3 = $$038$lcssa;
} else {
L10 : do if ($$038$lcssa >>> 0 > 3) {
$$03753 = $$041$lcssa;
$$054 = $$039$lcssa;
$$152 = $$038$lcssa;
while (1) {
$22 = HEAP32[$$054 >> 2] | 0;
if (($22 & -2139062144 ^ -2139062144) & $22 + -16843009 | 0) {
$$0$lcssa = $$054;
$$037$lcssa = $$03753;
$$1$lcssa = $$152;
break L10;
}
HEAP32[$$03753 >> 2] = $22;
$28 = $$152 + -4 | 0;
$29 = $$054 + 4 | 0;
$30 = $$03753 + 4 | 0;
if ($28 >>> 0 > 3) {
$$03753 = $30;
$$054 = $29;
$$152 = $28;
} else {
$$0$lcssa = $29;
$$037$lcssa = $30;
$$1$lcssa = $28;
break;
}
}
} else {
$$0$lcssa = $$039$lcssa;
$$037$lcssa = $$041$lcssa;
$$1$lcssa = $$038$lcssa;
} while (0);
$$140$ph = $$0$lcssa;
$$142$ph = $$037$lcssa;
$$2$ph = $$1$lcssa;
label = 11;
} else {
$$243 = $$041$lcssa;
$$3 = 0;
}
} else {
$$140$ph = $1;
$$142$ph = $0;
$$2$ph = $2;
label = 11;
} while (0);
L15 : do if ((label | 0) == 11) if (!$$2$ph) {
$$243 = $$142$ph;
$$3 = 0;
} else {
$$14046 = $$140$ph;
$$14245 = $$142$ph;
$$247 = $$2$ph;
while (1) {
$33 = HEAP8[$$14046 >> 0] | 0;
HEAP8[$$14245 >> 0] = $33;
if (!($33 << 24 >> 24)) {
$$243 = $$14245;
$$3 = $$247;
break L15;
}
$$247 = $$247 + -1 | 0;
$37 = $$14245 + 1 | 0;
if (!$$247) {
$$243 = $37;
$$3 = 0;
break;
} else {
$$14046 = $$14046 + 1 | 0;
$$14245 = $37;
}
}
} while (0);
_memset($$243 | 0, 0, $$3 | 0) | 0;
return $$243 | 0;
}
function __ZL19OneHPostureDistanceRK19OneHConcretePostureS1_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = f0, $$1 = f0, $$146 = f0, $$4 = f0, $11 = f0, $16 = f0, $19 = f0, $2 = 0, $21 = f0, $24 = f0, $27 = f0, $30 = f0, $31 = f0, $33 = f0, $35 = f0, $37 = f0, $39 = f0, $41 = f0, $43 = f0, $50 = f0, $57 = f0, $64 = f0, $65 = f0, $67 = f0, $70 = f0, $74 = f0, $75 = f0, $76 = f0, $78 = f0, $83 = f0, $85 = f0, $86 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
if ((HEAP32[$0 + 56 >> 2] | 0) != (HEAP32[$1 + 56 >> 2] | 0)) {
$$4 = Math_fround(1.0);
STACKTOP = sp;
return Math_fround($$4);
}
$11 = Math_fround(Math_fround(__ZNK6Vector8distanceERKS_($0 + 4 | 0, $1 + 4 | 0)) / Math_fround(.0500000007));
if ($11 >= Math_fround(1.0)) {
$$4 = Math_fround(1.0);
STACKTOP = sp;
return Math_fround($$4);
}
$16 = Math_fround(Math_fround(__ZNK6Vector8distanceERKS_($0 + 16 | 0, $1 + 16 | 0)) / Math_fround(.0500000007));
if ($16 >= Math_fround(1.0)) {
$$4 = Math_fround(1.0);
STACKTOP = sp;
return Math_fround($$4);
}
$19 = Math_fround(HEAPF32[$0 + 40 >> 2]);
$21 = Math_fround(HEAPF32[$0 + 44 >> 2]);
$24 = Math_fround(HEAPF32[$0 + 48 >> 2]);
$27 = Math_fround(HEAPF32[$0 + 52 >> 2]);
$30 = Math_fround(HEAPF32[$1 + 48 >> 2]);
$31 = Math_fround($30 * $21);
$33 = Math_fround(HEAPF32[$1 + 44 >> 2]);
$35 = Math_fround(Math_fround($33 * $24) - $31);
$37 = Math_fround(HEAPF32[$1 + 52 >> 2]);
$39 = Math_fround($35 + Math_fround($37 * $19));
$41 = Math_fround(HEAPF32[$1 + 40 >> 2]);
$43 = Math_fround($39 - Math_fround($41 * $27));
$50 = Math_fround(Math_fround(Math_fround($37 * $21) + Math_fround(Math_fround($30 * $19) - Math_fround($41 * $24))) - Math_fround($33 * $27));
$57 = Math_fround(Math_fround(Math_fround($37 * $24) + Math_fround(Math_fround($41 * $21) - Math_fround($33 * $19))) - Math_fround($30 * $27));
$64 = Math_fround(Math_fround($37 * $27) + Math_fround(Math_fround($30 * $24) + Math_fround(Math_fround($33 * $21) + Math_fround($41 * $19))));
HEAPF32[$2 >> 2] = $43;
HEAPF32[$2 + 4 >> 2] = $50;
HEAPF32[$2 + 8 >> 2] = $57;
HEAPF32[$2 + 12 >> 2] = $64;
$65 = Math_fround(__ZNK10Quaternion8getAngleEv($2));
$67 = Math_fround($65 / Math_fround(HEAPF32[710]));
if (!($67 >= Math_fround(1.0))) {
$70 = Math_fround(HEAPF32[$1 + 64 >> 2]);
$74 = Math_fround(Math_abs(Math_fround($70 - Math_fround(HEAPF32[$0 + 64 >> 2]))));
$75 = Math_fround(HEAPF32[711]);
$76 = Math_fround($74 / $75);
$78 = Math_fround(HEAPF32[$1 + 68 >> 2]);
$83 = Math_fround(Math_fround(Math_abs(Math_fround($78 - Math_fround(HEAPF32[$0 + 68 >> 2])))) / $75);
$85 = $76 > $83 ? $76 : $83;
$86 = !($85 >= Math_fround(1.0));
$$0 = $11 < $16 ? $16 : $11;
$$1 = $$0 < $67 ? $67 : $$0;
if ($86) $$146 = $$1 < $85 ? $85 : $$1; else $$146 = Math_fround(1.0);
} else $$146 = Math_fround(1.0);
$$4 = $$146;
STACKTOP = sp;
return Math_fround($$4);
}
function _big2_toUtf8($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$058$lcssa = 0, $$05860 = 0, $$2$ph = 0, $10 = 0, $11 = 0, $13 = 0, $16 = 0, $20 = 0, $30 = 0, $32 = 0, $42 = 0, $47 = 0, $5 = 0, $52 = 0, $54 = 0, $60 = 0, $63 = 0, $7 = 0, $75 = 0, $77 = 0, $86 = 0, $9 = 0, $91 = 0, $92 = 0, $97 = 0, label = 0;
$5 = HEAP32[$1 >> 2] | 0;
if (($5 | 0) == ($2 | 0)) {
$$058$lcssa = $2;
HEAP32[$1 >> 2] = $$058$lcssa;
return;
}
$7 = $4;
$$05860 = $5;
L4 : while (1) {
$9 = HEAP8[$$05860 + 1 >> 0] | 0;
$10 = HEAP8[$$05860 >> 0] | 0;
$11 = $10 & 255;
switch ($10 << 24 >> 24) {
case 0:
{
if ($9 << 24 >> 24 > -1) {
$13 = HEAP32[$3 >> 2] | 0;
if (($13 | 0) == ($4 | 0)) {
$$058$lcssa = $$05860;
label = 14;
break L4;
}
HEAP32[$3 >> 2] = $13 + 1;
HEAP8[$13 >> 0] = $9;
$$2$ph = $$05860;
} else label = 7;
break;
}
case 7:
case 6:
case 5:
case 4:
case 3:
case 2:
case 1:
{
label = 7;
break;
}
case -37:
case -38:
case -39:
case -40:
{
$54 = HEAP32[$3 >> 2] | 0;
if (($7 - $54 | 0) < 4) {
$$058$lcssa = $$05860;
label = 14;
break L4;
}
$60 = $9 & 255;
$63 = ($11 << 2 & 12 | $60 >>> 6) + 1 | 0;
HEAP32[$3 >> 2] = $54 + 1;
HEAP8[$54 >> 0] = $63 >>> 2 | 240;
$75 = HEAP32[$3 >> 2] | 0;
HEAP32[$3 >> 2] = $75 + 1;
HEAP8[$75 >> 0] = $60 >>> 2 & 15 | $63 << 4 & 48 | 128;
$77 = $$05860 + 2 | 0;
$86 = HEAPU8[$$05860 + 3 >> 0] | 0;
$91 = ($60 << 4 & 48 | $86 >>> 6 | HEAP8[$77 >> 0] << 2 & 12 | 128) & 255;
$92 = HEAP32[$3 >> 2] | 0;
HEAP32[$3 >> 2] = $92 + 1;
HEAP8[$92 >> 0] = $91;
$97 = HEAP32[$3 >> 2] | 0;
HEAP32[$3 >> 2] = $97 + 1;
HEAP8[$97 >> 0] = $86 & 63 | 128;
$$2$ph = $77;
break;
}
default:
{
$32 = HEAP32[$3 >> 2] | 0;
if (($7 - $32 | 0) < 3) {
$$058$lcssa = $$05860;
label = 14;
break L4;
}
HEAP32[$3 >> 2] = $32 + 1;
HEAP8[$32 >> 0] = $11 >>> 4 | 224;
$42 = $9 & 255;
$47 = HEAP32[$3 >> 2] | 0;
HEAP32[$3 >> 2] = $47 + 1;
HEAP8[$47 >> 0] = $42 >>> 6 | $11 << 2 & 60 | 128;
$52 = HEAP32[$3 >> 2] | 0;
HEAP32[$3 >> 2] = $52 + 1;
HEAP8[$52 >> 0] = $42 & 63 | 128;
$$2$ph = $$05860;
}
}
if ((label | 0) == 7) {
label = 0;
$16 = HEAP32[$3 >> 2] | 0;
if (($7 - $16 | 0) < 2) {
$$058$lcssa = $$05860;
label = 14;
break;
}
$20 = $9 & 255;
HEAP32[$3 >> 2] = $16 + 1;
HEAP8[$16 >> 0] = $20 >>> 6 | $11 << 2 | 192;
$30 = HEAP32[$3 >> 2] | 0;
HEAP32[$3 >> 2] = $30 + 1;
HEAP8[$30 >> 0] = $20 & 63 | 128;
$$2$ph = $$05860;
}
$$05860 = $$2$ph + 2 | 0;
if (($$05860 | 0) == ($2 | 0)) {
$$058$lcssa = $2;
label = 14;
break;
}
}
if ((label | 0) == 14) {
HEAP32[$1 >> 2] = $$058$lcssa;
return;
}
}
function __ZNK15OneHDirMoveSpec5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $17 = 0, $23 = 0.0, $24 = 0, $39 = 0, $54 = 0, $60 = 0.0, $61 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer2 = sp + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
if (Math_fround(HEAPF32[$0 >> 2]) != Math_fround(0.0)) label = 5; else if (Math_fround(HEAPF32[$0 + 4 >> 2]) != Math_fround(0.0)) label = 5; else if (Math_fround(HEAPF32[$0 + 8 >> 2]) != Math_fround(0.0)) label = 5;
if ((label | 0) == 5) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(37118, 9, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($0, $1, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$17 = $0 + 12 | 0;
if (Math_fround(HEAPF32[$17 >> 2]) != Math_fround(0.0)) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$23 = +Math_fround(HEAPF32[$17 >> 2]);
HEAP32[$vararg_buffer >> 2] = 3;
HEAPF64[$vararg_buffer + 8 >> 3] = $23;
_fprintf($1, 37128, $vararg_buffer) | 0;
}
$24 = $0 + 16 | 0;
if (Math_fround(HEAPF32[$24 >> 2]) != Math_fround(0.0)) label = 11; else if (Math_fround(HEAPF32[$0 + 20 >> 2]) != Math_fround(0.0)) label = 11; else if (Math_fround(HEAPF32[$0 + 24 >> 2]) != Math_fround(0.0)) label = 11;
if ((label | 0) == 11) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(37144, 15, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($24, $1, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$39 = $0 + 28 | 0;
if (Math_fround(HEAPF32[$39 >> 2]) != Math_fround(0.0)) label = 15; else if (Math_fround(HEAPF32[$0 + 32 >> 2]) != Math_fround(0.0)) label = 15; else if (Math_fround(HEAPF32[$0 + 36 >> 2]) != Math_fround(0.0)) label = 15;
if ((label | 0) == 15) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(37160, 14, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($39, $1, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$54 = $0 + 40 | 0;
if (Math_fround(HEAPF32[$54 >> 2]) != Math_fround(0.0)) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$60 = +Math_fround(HEAPF32[$54 >> 2]);
HEAP32[$vararg_buffer2 >> 2] = 3;
HEAPF64[$vararg_buffer2 + 8 >> 3] = $60;
_fprintf($1, 37175, $vararg_buffer2) | 0;
}
$61 = $0 + 44 | 0;
if (!(HEAP32[$61 >> 2] | 0)) {
STACKTOP = sp;
return;
}
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(37197, 16, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK10ZigzagInfo5printEP8_IO_FILE($61, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
STACKTOP = sp;
return;
}
function __Z20ExtendTrailingMorphsP18AbstractTimedMorph($0) {
$0 = $0 | 0;
var $$036$lcssa = 0, $$03641 = 0, $$03740 = 0, $$042 = 0, $$1 = 0, $$pre = 0, $$pre45 = 0, $1 = 0, $14 = 0, $17 = 0, $27 = 0, $32 = 0, $35 = 0, $41 = 0, $46 = 0, $51 = 0, $63 = 0, $65 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer3 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$1 = HEAP32[16662] | 0;
if (!$1) {
if (!0) {
STACKTOP = sp;
return;
}
__Z7eprintfPKcz(46331, $vararg_buffer);
STACKTOP = sp;
return;
}
$$pre = HEAP32[$1 + 12 >> 2] << 16;
$$pre45 = $$pre >> 16;
if (!0) label = 5; else {
HEAP32[$vararg_buffer1 >> 2] = $$pre45;
__Z7eprintfPKcz(46375, $vararg_buffer1);
if (($$pre | 0) > 0) {
$$042 = 0;
$14 = 0;
do {
$9 = HEAP32[16662] | 0;
if ($$042 << 16 >> 16 >= 0) if ((HEAP32[$9 + 12 >> 2] | 0) > ($14 | 0)) {
$17 = HEAP32[(HEAP32[$9 >> 2] | 0) + ($14 << 2) >> 2] | 0;
if ($17 | 0) {
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$17 >> 2] | 0) + 40 >> 2] & 255]($17, HEAP32[16082] | 0);
__Z5eputcc(10);
}
}
$$042 = $$042 + 1 << 16 >> 16;
$14 = $$042 << 16 >> 16;
} while (($$pre45 | 0) > ($14 | 0));
label = 5;
} else $$036$lcssa = 0;
}
if ((label | 0) == 5) if (($$pre | 0) > 0) {
$$03641 = 0;
$$03740 = 0;
$32 = 0;
while (1) {
$27 = HEAP32[16662] | 0;
do if ($$03740 << 16 >> 16 < 0) $$1 = $$03641; else if ((HEAP32[$27 + 12 >> 2] | 0) > ($32 | 0)) {
$35 = HEAP32[(HEAP32[$27 >> 2] | 0) + ($32 << 2) >> 2] | 0;
if (!$35) $$1 = $$03641; else {
if (!(__Z19ExtendTrailingMorphP16AtomicTimedMorphP18AbstractTimedMorph($35, $0) | 0)) {
$$1 = $$03641 + 1 << 16 >> 16;
break;
}
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$35 >> 2] | 0) + 4 >> 2] & 255]($35);
$41 = HEAP32[16662] | 0;
if ((HEAP32[$41 + 8 >> 2] | 0) <= ($32 | 0)) {
$46 = HEAP32[$41 + 4 >> 2] | 0;
__ZN13DynamicArrayPI18AbstractTimedMorphE6resizeEi($41, ($46 | 0) > ($32 | 0) ? $46 : $32 + 1 + ($32 >>> 1) | 0);
}
$51 = $41 + 12 | 0;
if ((HEAP32[$51 >> 2] | 0) <= ($32 | 0)) HEAP32[$51 >> 2] = $32 + 1;
HEAP32[(HEAP32[$41 >> 2] | 0) + ($32 << 2) >> 2] = 0;
$$1 = $$03641;
}
} else $$1 = $$03641; while (0);
$$03740 = $$03740 + 1 << 16 >> 16;
$32 = $$03740 << 16 >> 16;
if (($$pre45 | 0) <= ($32 | 0)) {
$$036$lcssa = $$1;
break;
} else $$03641 = $$1;
}
} else $$036$lcssa = 0;
if (0) {
HEAP32[$vararg_buffer3 >> 2] = $$036$lcssa << 16 >> 16;
__Z7eprintfPKcz(46432, $vararg_buffer3);
}
$63 = HEAP32[16662] | 0;
if (!($$036$lcssa << 16 >> 16 == 0 & ($63 | 0) != 0)) {
STACKTOP = sp;
return;
}
$65 = HEAP32[$63 >> 2] | 0;
if ($65 | 0) _free($65);
__ZdlPv($63);
HEAP32[16662] = 0;
STACKTOP = sp;
return;
}
function __ZN7ASDdata11readFeatureEP7XMLCellsf($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = Math_fround($3);
var $10 = 0, $14 = 0, $17 = f0, $19 = f0, $22 = 0, $25 = 0, $26 = 0, $28 = 0, $34 = 0, $38 = 0, $4 = 0, $44 = 0, $49 = 0, $5 = 0, $53 = 0, $57 = 0, $6 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 80 | 0;
$vararg_buffer9 = sp + 56 | 0;
$vararg_buffer4 = sp + 40 | 0;
$vararg_buffer1 = sp + 32 | 0;
$vararg_buffer = sp + 24 | 0;
$4 = sp + 16 | 0;
$5 = sp + 8 | 0;
$6 = sp;
$7 = sp + 68 | 0;
if (!$1) {
STACKTOP = sp;
return;
}
$9 = __ZN7XMLCell13attrib_stringEPKc($1, 53439) | 0;
$10 = __ZN7XMLCell13attrib_stringEPKc($1, 16614) | 0;
if (!$9) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer >> 2] = $2 << 16 >> 16;
__Z7eprintfPKcz(17014, $vararg_buffer);
STACKTOP = sp;
return;
}
if (!$10) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer1 >> 2] = $9;
__Z7eprintfPKcz(17059, $vararg_buffer1);
STACKTOP = sp;
return;
}
__ZN6VectorC2Ev($7);
HEAPF64[$4 >> 3] = 0.0;
HEAPF64[$5 >> 3] = 0.0;
HEAPF64[$6 >> 3] = 0.0;
HEAP32[$vararg_buffer4 >> 2] = $4;
HEAP32[$vararg_buffer4 + 4 >> 2] = $5;
HEAP32[$vararg_buffer4 + 8 >> 2] = $6;
$14 = _sscanf($10, 54499, $vararg_buffer4) | 0;
if (($14 | 0) != 3) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer9 >> 2] = 16316;
HEAP32[$vararg_buffer9 + 4 >> 2] = $9;
HEAP32[$vararg_buffer9 + 8 >> 2] = $14;
__Z7eprintfPKcz(16741, $vararg_buffer9);
}
$17 = Math_fround(+HEAPF64[$4 >> 3]);
$19 = Math_fround(+HEAPF64[$5 >> 3]);
__ZN6Vector7setFromEfff($7, $17, $19, Math_fround(+HEAPF64[$6 >> 3]));
__ZN6Vector8setScaleEf($7, $3);
$22 = $0 + 28 | 0;
__ZN28InvertibleDynamicStringArray10addElementEPKc(HEAP32[$22 >> 2] | 0, $9) | 0;
$25 = __ZNK28InvertibleDynamicStringArray6lengthEv(HEAP32[$22 >> 2] | 0) | 0;
$26 = $25 + -1 | 0;
$28 = HEAP32[$0 + 32 >> 2] | 0;
if (($25 | 0) >= 1) {
if ((HEAP32[$28 + 8 >> 2] | 0) < ($25 | 0)) {
$34 = HEAP32[$28 + 4 >> 2] | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($28, ($34 | 0) >= ($25 | 0) ? $34 : ($26 >>> 1) + $25 | 0);
}
$38 = $28 + 12 | 0;
if ((HEAP32[$38 >> 2] | 0) < ($25 | 0)) HEAP32[$38 >> 2] = $25;
HEAP16[(HEAP32[$28 >> 2] | 0) + ($26 << 1) >> 1] = $2;
$44 = HEAP32[$0 + 36 >> 2] | 0;
if ((HEAP32[$44 + 8 >> 2] | 0) < ($25 | 0)) {
$49 = HEAP32[$44 + 4 >> 2] | 0;
__ZN13DynamicArray1I6VectorE6resizeEi($44, ($49 | 0) >= ($25 | 0) ? $49 : ($26 >>> 1) + $25 | 0);
}
$53 = $44 + 12 | 0;
if ((HEAP32[$53 >> 2] | 0) < ($25 | 0)) HEAP32[$53 >> 2] = $25;
$57 = (HEAP32[$44 >> 2] | 0) + ($26 * 12 | 0) | 0;
HEAP32[$57 >> 2] = HEAP32[$7 >> 2];
HEAP32[$57 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
HEAP32[$57 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
}
STACKTOP = sp;
return;
}
function __ZNK22ThumbBaseJointRotation5printEP8_IO_FILEs($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $11 = 0.0, $14 = 0.0, $17 = 0.0, $20 = 0.0, $23 = 0.0, $28 = 0.0, $31 = 0.0, $34 = 0.0, $37 = 0.0, $40 = 0.0, $45 = 0.0, $48 = 0.0, $51 = 0.0, $54 = 0.0, $57 = 0.0, $8 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer24 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 256 | 0;
$vararg_buffer24 = sp + 168 | 0;
$vararg_buffer12 = sp + 88 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$8 = $2 << 16 >> 16;
$11 = +Math_fround(HEAPF32[$0 + 8 >> 2]);
$14 = +Math_fround(HEAPF32[$0 + 12 >> 2]);
$17 = +Math_fround(HEAPF32[$0 + 16 >> 2]);
$20 = +Math_fround(HEAPF32[$0 + 44 >> 2]);
$23 = +Math_fround(HEAPF32[$0 + 56 >> 2]);
HEAP32[$vararg_buffer >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2];
HEAP32[$vararg_buffer + 4 >> 2] = $0;
HEAP32[$vararg_buffer + 8 >> 2] = $8;
HEAPF64[$vararg_buffer + 16 >> 3] = $11;
HEAP32[$vararg_buffer + 24 >> 2] = $8;
HEAPF64[$vararg_buffer + 32 >> 3] = $14;
HEAP32[$vararg_buffer + 40 >> 2] = $8;
HEAPF64[$vararg_buffer + 48 >> 3] = $17;
HEAP32[$vararg_buffer + 56 >> 2] = $8;
HEAPF64[$vararg_buffer + 64 >> 3] = $20;
HEAP32[$vararg_buffer + 72 >> 2] = $8;
HEAPF64[$vararg_buffer + 80 >> 3] = $23;
_fprintf($1, 14462, $vararg_buffer) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$28 = +Math_fround(HEAPF32[$0 + 20 >> 2]);
$31 = +Math_fround(HEAPF32[$0 + 24 >> 2]);
$34 = +Math_fround(HEAPF32[$0 + 28 >> 2]);
$37 = +Math_fround(HEAPF32[$0 + 48 >> 2]);
$40 = +Math_fround(HEAPF32[$0 + 60 >> 2]);
HEAP32[$vararg_buffer12 >> 2] = $8;
HEAPF64[$vararg_buffer12 + 8 >> 3] = $28;
HEAP32[$vararg_buffer12 + 16 >> 2] = $8;
HEAPF64[$vararg_buffer12 + 24 >> 3] = $31;
HEAP32[$vararg_buffer12 + 32 >> 2] = $8;
HEAPF64[$vararg_buffer12 + 40 >> 3] = $34;
HEAP32[$vararg_buffer12 + 48 >> 2] = $8;
HEAPF64[$vararg_buffer12 + 56 >> 3] = $37;
HEAP32[$vararg_buffer12 + 64 >> 2] = $8;
HEAPF64[$vararg_buffer12 + 72 >> 3] = $40;
_fprintf($1, 14508, $vararg_buffer12) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$45 = +Math_fround(HEAPF32[$0 + 32 >> 2]);
$48 = +Math_fround(HEAPF32[$0 + 36 >> 2]);
$51 = +Math_fround(HEAPF32[$0 + 40 >> 2]);
$54 = +Math_fround(HEAPF32[$0 + 52 >> 2]);
$57 = +Math_fround(HEAPF32[$0 + 64 >> 2]);
HEAP32[$vararg_buffer24 >> 2] = $8;
HEAPF64[$vararg_buffer24 + 8 >> 3] = $45;
HEAP32[$vararg_buffer24 + 16 >> 2] = $8;
HEAPF64[$vararg_buffer24 + 24 >> 3] = $48;
HEAP32[$vararg_buffer24 + 32 >> 2] = $8;
HEAPF64[$vararg_buffer24 + 40 >> 3] = $51;
HEAP32[$vararg_buffer24 + 48 >> 2] = $8;
HEAPF64[$vararg_buffer24 + 56 >> 3] = $54;
HEAP32[$vararg_buffer24 + 64 >> 2] = $8;
HEAPF64[$vararg_buffer24 + 72 >> 3] = $57;
_fprintf($1, 14508, $vararg_buffer24) | 0;
STACKTOP = sp;
return;
}
function __ZNK15AtomicNonmanual10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$ = 0, $$1 = 0, $13 = 0, $15 = 0, $2 = 0, $20 = 0, $28 = 0, $3 = 0, $32 = 0, $34 = 0, $37 = 0, $4 = 0, $40 = 0, $42 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
$3 = HEAP32[17823] | 0;
$4 = HEAP32[$0 >> 2] | 0;
if (($4 | 0) < 0) $13 = 0; else if ((HEAP32[$3 + 12 >> 2] | 0) > ($4 | 0)) $13 = HEAP32[(HEAP32[$3 >> 2] | 0) + ($4 << 2) >> 2] | 0; else $13 = 0;
$$ = ($13 | 0) == 0 ? 36577 : $13;
$15 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17826] | 0, $4) | 0;
$$1 = ($15 | 0) == 0 ? 36577 : $15;
$20 = HEAP32[(HEAP32[17821] | 0) + (HEAP32[$0 >> 2] << 2) >> 2] | 0;
if (!$20) $37 = 36583; else $37 = __ZNK28InvertibleDynamicStringArray14valueFromIndexEi($20, HEAP16[$0 + 4 >> 1] | 0) | 0;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
HEAP8[$2 >> 0] = 60;
$28 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2, 1) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($28, $$, _strlen($$) | 0) | 0, 36571, 2) | 0;
$32 = (HEAP16[36078] | 0) + 1 << 16 >> 16;
HEAP16[36078] = $32;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, $32 << 16 >> 16);
HEAP8[$2 >> 0] = 60;
$34 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2, 1) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($34, $$1, _strlen($$1) | 0) | 0;
if ($37 | 0) {
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36591, 11) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $37, _strlen($37) | 0) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 34935, 1) | 0;
}
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36603, 3) | 0;
$40 = (HEAP16[36078] | 0) + -1 << 16 >> 16;
HEAP16[36078] = $40;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, $40 << 16 >> 16);
$42 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36574, 2) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($42, $$, _strlen($$) | 0) | 0, 36571, 2) | 0;
STACKTOP = sp;
return;
}
function __ZN18HandJointRotationsD2Ev($0) {
$0 = $0 | 0;
var $10 = 0, $15 = 0, $16 = 0, $21 = 0, $22 = 0, $27 = 0, $28 = 0, $33 = 0, $34 = 0, $39 = 0, $4 = 0, $40 = 0, $45 = 0, $46 = 0, $51 = 0, $52 = 0, $57 = 0, $58 = 0, $63 = 0, $64 = 0, $69 = 0, $70 = 0, $75 = 0, $76 = 0, $81 = 0, $82 = 0, $87 = 0, $88 = 0, $9 = 0;
if (!(HEAP8[$0 + 60 >> 0] | 0)) return;
$4 = HEAP32[$0 >> 2] | 0;
if ($4 | 0) {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] & 255]($4);
HEAP32[$0 >> 2] = 0;
}
$9 = $0 + 4 | 0;
$10 = HEAP32[$9 >> 2] | 0;
if ($10 | 0) {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$10 >> 2] | 0) + 4 >> 2] & 255]($10);
HEAP32[$9 >> 2] = 0;
}
$15 = $0 + 8 | 0;
$16 = HEAP32[$15 >> 2] | 0;
if ($16 | 0) {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$16 >> 2] | 0) + 4 >> 2] & 255]($16);
HEAP32[$15 >> 2] = 0;
}
$21 = $0 + 12 | 0;
$22 = HEAP32[$21 >> 2] | 0;
if ($22 | 0) {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$22 >> 2] | 0) + 4 >> 2] & 255]($22);
HEAP32[$21 >> 2] = 0;
}
$27 = $0 + 16 | 0;
$28 = HEAP32[$27 >> 2] | 0;
if ($28 | 0) {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$28 >> 2] | 0) + 4 >> 2] & 255]($28);
HEAP32[$27 >> 2] = 0;
}
$33 = $0 + 20 | 0;
$34 = HEAP32[$33 >> 2] | 0;
if ($34 | 0) {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$34 >> 2] | 0) + 4 >> 2] & 255]($34);
HEAP32[$33 >> 2] = 0;
}
$39 = $0 + 24 | 0;
$40 = HEAP32[$39 >> 2] | 0;
if ($40 | 0) {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$40 >> 2] | 0) + 4 >> 2] & 255]($40);
HEAP32[$39 >> 2] = 0;
}
$45 = $0 + 28 | 0;
$46 = HEAP32[$45 >> 2] | 0;
if ($46 | 0) {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$46 >> 2] | 0) + 4 >> 2] & 255]($46);
HEAP32[$45 >> 2] = 0;
}
$51 = $0 + 32 | 0;
$52 = HEAP32[$51 >> 2] | 0;
if ($52 | 0) {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$52 >> 2] | 0) + 4 >> 2] & 255]($52);
HEAP32[$51 >> 2] = 0;
}
$57 = $0 + 36 | 0;
$58 = HEAP32[$57 >> 2] | 0;
if ($58 | 0) {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$58 >> 2] | 0) + 4 >> 2] & 255]($58);
HEAP32[$57 >> 2] = 0;
}
$63 = $0 + 40 | 0;
$64 = HEAP32[$63 >> 2] | 0;
if ($64 | 0) {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$64 >> 2] | 0) + 4 >> 2] & 255]($64);
HEAP32[$63 >> 2] = 0;
}
$69 = $0 + 44 | 0;
$70 = HEAP32[$69 >> 2] | 0;
if ($70 | 0) {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$70 >> 2] | 0) + 4 >> 2] & 255]($70);
HEAP32[$69 >> 2] = 0;
}
$75 = $0 + 48 | 0;
$76 = HEAP32[$75 >> 2] | 0;
if ($76 | 0) {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$76 >> 2] | 0) + 4 >> 2] & 255]($76);
HEAP32[$75 >> 2] = 0;
}
$81 = $0 + 52 | 0;
$82 = HEAP32[$81 >> 2] | 0;
if ($82 | 0) {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$82 >> 2] | 0) + 4 >> 2] & 255]($82);
HEAP32[$81 >> 2] = 0;
}
$87 = $0 + 56 | 0;
$88 = HEAP32[$87 >> 2] | 0;
if (!$88) return;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$88 >> 2] | 0) + 4 >> 2] & 255]($88);
HEAP32[$87 >> 2] = 0;
return;
}
function _pop_arg($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
L1 : do if ($1 >>> 0 <= 20) do switch ($1 | 0) {
case 9:
{
$9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$10 = HEAP32[$9 >> 2] | 0;
HEAP32[$2 >> 2] = $9 + 4;
HEAP32[$0 >> 2] = $10;
break L1;
break;
}
case 10:
{
$16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$17 = HEAP32[$16 >> 2] | 0;
HEAP32[$2 >> 2] = $16 + 4;
$20 = $0;
HEAP32[$20 >> 2] = $17;
HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31;
break L1;
break;
}
case 11:
{
$29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$30 = HEAP32[$29 >> 2] | 0;
HEAP32[$2 >> 2] = $29 + 4;
$31 = $0;
HEAP32[$31 >> 2] = $30;
HEAP32[$31 + 4 >> 2] = 0;
break L1;
break;
}
case 12:
{
$40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
$41 = $40;
$43 = HEAP32[$41 >> 2] | 0;
$46 = HEAP32[$41 + 4 >> 2] | 0;
HEAP32[$2 >> 2] = $40 + 8;
$47 = $0;
HEAP32[$47 >> 2] = $43;
HEAP32[$47 + 4 >> 2] = $46;
break L1;
break;
}
case 13:
{
$56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$57 = HEAP32[$56 >> 2] | 0;
HEAP32[$2 >> 2] = $56 + 4;
$59 = ($57 & 65535) << 16 >> 16;
$62 = $0;
HEAP32[$62 >> 2] = $59;
HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31;
break L1;
break;
}
case 14:
{
$71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$72 = HEAP32[$71 >> 2] | 0;
HEAP32[$2 >> 2] = $71 + 4;
$73 = $0;
HEAP32[$73 >> 2] = $72 & 65535;
HEAP32[$73 + 4 >> 2] = 0;
break L1;
break;
}
case 15:
{
$82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$83 = HEAP32[$82 >> 2] | 0;
HEAP32[$2 >> 2] = $82 + 4;
$85 = ($83 & 255) << 24 >> 24;
$88 = $0;
HEAP32[$88 >> 2] = $85;
HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31;
break L1;
break;
}
case 16:
{
$97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$98 = HEAP32[$97 >> 2] | 0;
HEAP32[$2 >> 2] = $97 + 4;
$99 = $0;
HEAP32[$99 >> 2] = $98 & 255;
HEAP32[$99 + 4 >> 2] = 0;
break L1;
break;
}
case 17:
{
$108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
$109 = +HEAPF64[$108 >> 3];
HEAP32[$2 >> 2] = $108 + 8;
HEAPF64[$0 >> 3] = $109;
break L1;
break;
}
case 18:
{
$115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
$116 = +HEAPF64[$115 >> 3];
HEAP32[$2 >> 2] = $115 + 8;
HEAPF64[$0 >> 3] = $116;
break L1;
break;
}
default:
break L1;
} while (0); while (0);
return;
}
function __ZN13BasicMovement20propagateChangeFlagsE18PostureChangeFlagsS0_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$phi$trans$insert = 0, $$phi$trans$insert10 = 0, $$pre$phi15Z2D = 0, $$pre$phi17Z2D = 0, $$pre$phi19Z2D = 0, $$pre$phiZ2D = 0, $$pre13 = 0, $$pre16 = 0, $15 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $33 = 0, $34 = 0, $38 = 0, $39 = 0, $40 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$vararg_buffer = sp;
if (0) {
HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 4 >> 2];
__Z7eprintfPKcz(36157, $vararg_buffer);
__Z7eprintfPKcz(36177, sp + 8 | 0);
__ZNK18PostureChangeFlags5printEP8_IO_FILE($1, HEAP32[16082] | 0);
__Z5eputcc(10);
__Z7eprintfPKcz(36184, sp + 16 | 0);
__ZNK18PostureChangeFlags5printEP8_IO_FILE($2, HEAP32[16082] | 0);
__Z5eputcc(10);
__Z7eprintfPKcz(36191, sp + 24 | 0);
__ZNK18PostureChangeFlags5printEP8_IO_FILE($0 + 508 | 0, HEAP32[16082] | 0);
__Z5eputcc(10);
__Z7eprintfPKcz(36199, sp + 32 | 0);
__ZNK18PostureChangeFlags5printEP8_IO_FILE($0 + 510 | 0, HEAP32[16082] | 0);
__Z5eputcc(10);
}
if (!((HEAPU8[$1 >> 0] | HEAPU8[$1 + 1 >> 0] << 8) & 512)) {
$15 = $0 + 508 | 0;
$16 = HEAPU8[$15 >> 0] | HEAPU8[$15 + 1 >> 0] << 8;
$$pre13 = $0 + 508 | 0;
$$pre$phi15Z2D = $$pre13;
$$pre$phiZ2D = $$pre13;
$20 = $16;
$22 = (($16 & 15) != 0 & 1) << 9 & 65535;
} else {
$$phi$trans$insert = $0 + 508 | 0;
$$pre$phi15Z2D = $$phi$trans$insert;
$$pre$phiZ2D = $$phi$trans$insert;
$20 = HEAP16[$$phi$trans$insert >> 1] | 0;
$22 = 512;
}
$21 = $20 & -513 | $22;
HEAP16[$$pre$phi15Z2D >> 1] = $21;
HEAP16[$$pre$phi15Z2D >> 1] = (((HEAPU8[$1 >> 0] | HEAPU8[$1 + 1 >> 0] << 8) & 1024) == 0 ? (($20 & 48) != 0 & 1) << 10 & 65535 : 1024) | $21 & -1025;
if (!((HEAPU8[$2 >> 0] | HEAPU8[$2 + 1 >> 0] << 8) & 512)) {
$33 = $0 + 510 | 0;
$34 = HEAPU8[$33 >> 0] | HEAPU8[$33 + 1 >> 0] << 8;
$$pre16 = $0 + 510 | 0;
$$pre$phi17Z2D = $$pre16;
$$pre$phi19Z2D = $$pre16;
$38 = $34;
$40 = (($34 & 15) != 0 & 1) << 9 & 65535;
} else {
$$phi$trans$insert10 = $0 + 510 | 0;
$$pre$phi17Z2D = $$phi$trans$insert10;
$$pre$phi19Z2D = $$phi$trans$insert10;
$38 = HEAP16[$$phi$trans$insert10 >> 1] | 0;
$40 = 512;
}
$39 = $38 & -513 | $40;
HEAP16[$$pre$phi19Z2D >> 1] = $39;
HEAP16[$$pre$phi19Z2D >> 1] = (((HEAPU8[$2 >> 0] | HEAPU8[$2 + 1 >> 0] << 8) & 1024) == 0 ? (($38 & 48) != 0 & 1) << 10 & 65535 : 1024) | $39 & -1025;
if (!0) {
STACKTOP = sp;
return;
}
__Z7eprintfPKcz(36207, sp + 40 | 0);
__ZNK18PostureChangeFlags5printEP8_IO_FILE($$pre$phiZ2D, HEAP32[16082] | 0);
__Z5eputcc(10);
__Z7eprintfPKcz(36215, sp + 48 | 0);
__ZNK18PostureChangeFlags5printEP8_IO_FILE($$pre$phi17Z2D, HEAP32[16082] | 0);
__Z5eputcc(10);
STACKTOP = sp;
return;
}
function __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
var $$0 = 0, $$016$i$i = 0, $$043 = 0, $$pre$phi49Z2D = 0, $$pre$phi51Z2D = 0, $$sroa$0$0$copyload42 = 0, $$sroa$0$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $27 = 0, $28 = 0, $33 = 0, $42 = 0, $43 = 0, $46 = 0, $54 = 0, $6 = 0, $61 = 0, $7 = 0, $9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$6 = sp;
$7 = HEAP32[$0 >> 2] | 0;
if (!$7) {
$$sroa$0$2 = 0;
STACKTOP = sp;
return $$sroa$0$2 | 0;
}
$9 = $3;
$10 = $1;
$11 = $9 - $10 | 0;
$12 = $4 + 12 | 0;
$13 = HEAP32[$12 >> 2] | 0;
$$0 = ($13 | 0) > ($11 | 0) ? $13 - $11 | 0 : 0;
$16 = $2;
$17 = $16 - $10 | 0;
if (($17 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] & 31]($7, $1, $17) | 0) != ($17 | 0)) {
HEAP32[$0 >> 2] = 0;
$$sroa$0$2 = 0;
STACKTOP = sp;
return $$sroa$0$2 | 0;
}
if (($$0 | 0) > 0) {
HEAP32[$6 >> 2] = 0;
HEAP32[$6 + 4 >> 2] = 0;
HEAP32[$6 + 8 >> 2] = 0;
if ($$0 >>> 0 < 11) {
$33 = $6 + 11 | 0;
HEAP8[$33 >> 0] = $$0;
$$016$i$i = $6;
$$pre$phi49Z2D = $33;
$$pre$phi51Z2D = $6;
} else {
$27 = $$0 + 16 & -16;
$28 = __Znwj($27) | 0;
HEAP32[$6 >> 2] = $28;
HEAP32[$6 + 8 >> 2] = $27 | -2147483648;
HEAP32[$6 + 4 >> 2] = $$0;
$$016$i$i = $28;
$$pre$phi49Z2D = $6 + 11 | 0;
$$pre$phi51Z2D = $6;
}
_memset($$016$i$i | 0, $5 | 0, $$0 | 0) | 0;
HEAP8[$$016$i$i + $$0 >> 0] = 0;
__THREW__ = 0;
$42 = invoke_iiii(HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] | 0, $7 | 0, ((HEAP8[$$pre$phi49Z2D >> 0] | 0) < 0 ? HEAP32[$$pre$phi51Z2D >> 2] | 0 : $6) | 0, $$0 | 0) | 0;
$43 = __THREW__;
__THREW__ = 0;
if ($43 & 1) {
$46 = ___cxa_find_matching_catch_2() | 0;
if ((HEAP8[$$pre$phi49Z2D >> 0] | 0) >= 0) ___resumeException($46 | 0);
__ZdlPv(HEAP32[$$pre$phi51Z2D >> 2] | 0);
___resumeException($46 | 0);
}
if (($42 | 0) == ($$0 | 0)) {
$$043 = 1;
$61 = $7;
} else {
HEAP32[$0 >> 2] = 0;
$$043 = 0;
$61 = 0;
}
if ((HEAP8[$$pre$phi49Z2D >> 0] | 0) < 0) __ZdlPv(HEAP32[$$pre$phi51Z2D >> 2] | 0);
if ($$043) $$sroa$0$0$copyload42 = $61; else {
$$sroa$0$2 = 0;
STACKTOP = sp;
return $$sroa$0$2 | 0;
}
} else $$sroa$0$0$copyload42 = $7;
$54 = $9 - $16 | 0;
if (($54 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$$sroa$0$0$copyload42 >> 2] | 0) + 48 >> 2] & 31]($$sroa$0$0$copyload42, $2, $54) | 0) != ($54 | 0)) {
HEAP32[$0 >> 2] = 0;
$$sroa$0$2 = 0;
STACKTOP = sp;
return $$sroa$0$2 | 0;
}
HEAP32[$12 >> 2] = 0;
$$sroa$0$2 = $$sroa$0$0$copyload42;
STACKTOP = sp;
return $$sroa$0$2 | 0;
}
function __ZN28InvertibleDynamicStringArrayC2Esb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0 = 0, $$04 = 0, $11 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $23 = 0, $30 = 0, $32 = 0, $33 = 0, $35 = 0, $4 = 0, $46 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
HEAP32[$0 >> 2] = 0;
$4 = $0 + 4 | 0;
HEAP32[$4 >> 2] = 0;
HEAP8[$0 + 8 >> 0] = $2 & 1;
$6 = $0 + 12 | 0;
HEAP32[$6 >> 2] = $1 << 16 >> 16;
$8 = __Znwj(16) | 0;
HEAP32[$8 + 4 >> 2] = 10;
HEAP32[$8 + 12 >> 2] = 0;
$11 = $8 + 8 | 0;
HEAP32[$11 >> 2] = 100;
$12 = _malloc(400) | 0;
HEAP32[$8 >> 2] = $12;
if (!$12) {
__THREW__ = 0;
HEAP32[$vararg_buffer >> 2] = 100;
invoke_vii(115, 57303, $vararg_buffer | 0);
$14 = __THREW__;
__THREW__ = 0;
if (!($14 & 1)) {
HEAP32[$11 >> 2] = 0;
$16 = ___cxa_allocate_exception(4) | 0;
HEAP32[$16 >> 2] = 1;
__THREW__ = 0;
invoke_viii(75, $16 | 0, 32, 0);
__THREW__ = 0;
}
$52 = ___cxa_find_matching_catch_2() | 0;
$53 = tempRet0;
__ZdlPv($8);
$$0 = $53;
$$04 = $52;
___resumeException($$04 | 0);
}
HEAP32[$12 >> 2] = 0;
HEAP32[$12 + 4 >> 2] = 0;
HEAP32[$12 + 8 >> 2] = 0;
$21 = 3;
do {
HEAP32[(HEAP32[$8 >> 2] | 0) + ($21 << 2) >> 2] = 0;
$21 = $21 + 1 | 0;
} while (($21 | 0) != 100);
HEAP32[$4 >> 2] = $8;
$23 = __Znwj(28) | 0;
HEAP32[$23 + 20 >> 2] = HEAP32[$6 >> 2];
HEAP32[$23 + 24 >> 2] = 0;
HEAP32[$23 + 8 >> 2] = 0;
HEAP32[$23 + 16 >> 2] = 0;
HEAP32[$23 + 12 >> 2] = 100;
$30 = _malloc(800) | 0;
HEAP32[$23 >> 2] = $30;
$32 = $23 + 4 | 0;
if (!$30) {
HEAP32[$32 >> 2] = 0;
__THREW__ = 0;
HEAP32[$vararg_buffer1 >> 2] = 100;
HEAP32[$vararg_buffer1 + 4 >> 2] = 8;
invoke_vii(115, 57708, $vararg_buffer1 | 0);
$33 = __THREW__;
__THREW__ = 0;
if (!($33 & 1)) {
$35 = ___cxa_allocate_exception(4) | 0;
HEAP32[$35 >> 2] = 1;
__THREW__ = 0;
invoke_viii(75, $35 | 0, 32, 0);
__THREW__ = 0;
}
$54 = ___cxa_find_matching_catch_2() | 0;
$55 = tempRet0;
__ZdlPv($23);
$$0 = $55;
$$04 = $54;
___resumeException($$04 | 0);
} else {
HEAP32[$32 >> 2] = 100;
HEAP32[$30 >> 2] = 0;
HEAP16[$30 + 4 >> 1] = 0;
HEAP32[$30 + 8 >> 2] = 0;
HEAP16[$30 + 12 >> 1] = 0;
HEAP32[$30 + 16 >> 2] = 0;
HEAP16[(HEAP32[$23 >> 2] | 0) + 20 >> 1] = 0;
if ((HEAP32[$32 >> 2] | 0) > 3) $46 = 3; else {
HEAP32[$0 >> 2] = $23;
STACKTOP = sp;
return;
}
do {
HEAP32[(HEAP32[$23 >> 2] | 0) + ($46 << 3) >> 2] = 0;
HEAP16[(HEAP32[$23 >> 2] | 0) + ($46 << 3) + 4 >> 1] = 0;
$46 = $46 + 1 | 0;
} while (($46 | 0) < (HEAP32[$32 >> 2] | 0));
HEAP32[$0 >> 2] = $23;
STACKTOP = sp;
return;
}
}
function __ZNK12ThumbBending5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $20 = f0, $24 = f0, $28 = f0, $3 = f0, $32 = f0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 128 | 0;
$vararg_buffer29 = sp + 104 | 0;
$vararg_buffer26 = sp + 96 | 0;
$vararg_buffer22 = sp + 80 | 0;
$vararg_buffer19 = sp + 72 | 0;
$vararg_buffer15 = sp + 56 | 0;
$vararg_buffer12 = sp + 48 | 0;
$vararg_buffer8 = sp + 32 | 0;
$vararg_buffer5 = sp + 24 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$3 = Math_fround(HEAPF32[$0 >> 2]);
if (!($3 != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$0 + 4 >> 2]) != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$0 + 8 >> 2]) != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$0 + 12 >> 2]) != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$0 + 16 >> 2]) != Math_fround(-100.0))) {
_fwrite(49556, 15, 1, $1) | 0;
STACKTOP = sp;
return;
}
if ($3 == Math_fround(-100.0)) {
HEAP32[$vararg_buffer >> 2] = 49572;
_fprintf($1, 49576, $vararg_buffer) | 0;
} else {
HEAP32[$vararg_buffer1 >> 2] = 49572;
HEAPF64[$vararg_buffer1 + 8 >> 3] = +$3;
_fprintf($1, 49585, $vararg_buffer1) | 0;
}
_fputc(44, $1) | 0;
$20 = Math_fround(HEAPF32[$0 + 4 >> 2]);
if ($20 == Math_fround(-100.0)) {
HEAP32[$vararg_buffer5 >> 2] = 49593;
_fprintf($1, 49576, $vararg_buffer5) | 0;
} else {
HEAP32[$vararg_buffer8 >> 2] = 49593;
HEAPF64[$vararg_buffer8 + 8 >> 3] = +$20;
_fprintf($1, 49585, $vararg_buffer8) | 0;
}
_fputc(44, $1) | 0;
$24 = Math_fround(HEAPF32[$0 + 8 >> 2]);
if ($24 == Math_fround(-100.0)) {
HEAP32[$vararg_buffer12 >> 2] = 49597;
_fprintf($1, 49576, $vararg_buffer12) | 0;
} else {
HEAP32[$vararg_buffer15 >> 2] = 49597;
HEAPF64[$vararg_buffer15 + 8 >> 3] = +$24;
_fprintf($1, 49585, $vararg_buffer15) | 0;
}
_fputc(44, $1) | 0;
$28 = Math_fround(HEAPF32[$0 + 12 >> 2]);
if ($28 == Math_fround(-100.0)) {
HEAP32[$vararg_buffer19 >> 2] = 49601;
_fprintf($1, 49576, $vararg_buffer19) | 0;
} else {
HEAP32[$vararg_buffer22 >> 2] = 49601;
HEAPF64[$vararg_buffer22 + 8 >> 3] = +$28;
_fprintf($1, 49585, $vararg_buffer22) | 0;
}
_fputc(44, $1) | 0;
$32 = Math_fround(HEAPF32[$0 + 16 >> 2]);
if ($32 == Math_fround(-100.0)) {
HEAP32[$vararg_buffer26 >> 2] = 49604;
_fprintf($1, 49576, $vararg_buffer26) | 0;
STACKTOP = sp;
return;
} else {
HEAP32[$vararg_buffer29 >> 2] = 49604;
HEAPF64[$vararg_buffer29 + 8 >> 3] = +$32;
_fprintf($1, 49585, $vararg_buffer29) | 0;
STACKTOP = sp;
return;
}
}
function _normal_charRefNumber($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$03547 = 0, $$03746 = 0, $$13649 = 0, $$138 = 0, $$13856 = 0, $$23948 = 0, $$340 = 0, $$34057 = 0, $$34058 = 0, $$4 = 0, $12 = 0, $2 = 0, $24 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, label = 0;
$2 = $1 + 2 | 0;
$3 = HEAP8[$2 >> 0] | 0;
L1 : do switch ($3 << 24 >> 24) {
case 120:
{
$4 = $1 + 3 | 0;
$5 = HEAP8[$4 >> 0] | 0;
if ($5 << 24 >> 24 == 59) {
$$34057 = 0;
label = 13;
} else {
$$03547 = $4;
$$03746 = 0;
$12 = $5 << 24 >> 24;
while (1) {
switch ($12 | 0) {
case 57:
case 56:
case 55:
case 54:
case 53:
case 52:
case 51:
case 50:
case 49:
case 48:
{
$$138 = $12 + -48 | $$03746 << 4;
label = 9;
break;
}
case 70:
case 69:
case 68:
case 67:
case 66:
case 65:
{
$$138 = ($$03746 << 4) + -55 + $12 | 0;
label = 9;
break;
}
case 102:
case 101:
case 100:
case 99:
case 98:
case 97:
{
$$138 = ($$03746 << 4) + -87 + $12 | 0;
label = 9;
break;
}
default:
$$13856 = $$03746;
}
if ((label | 0) == 9) {
label = 0;
if (($$138 | 0) < 1114112) $$13856 = $$138; else {
$$4 = -1;
break;
}
}
$$03547 = $$03547 + 1 | 0;
$9 = HEAP8[$$03547 >> 0] | 0;
if ($9 << 24 >> 24 == 59) {
$$340 = $$13856;
label = 12;
break L1;
} else {
$$03746 = $$13856;
$12 = $9 << 24 >> 24;
}
}
return $$4 | 0;
}
break;
}
case 59:
{
$$34057 = 0;
label = 13;
break;
}
default:
{
$$13649 = $2;
$$23948 = 0;
$24 = $3;
while (1) {
$27 = ($24 << 24 >> 24) + -48 + ($$23948 * 10 | 0) | 0;
if (($27 | 0) >= 1114112) {
$$4 = -1;
break;
}
$$13649 = $$13649 + 1 | 0;
$24 = HEAP8[$$13649 >> 0] | 0;
if ($24 << 24 >> 24 == 59) {
$$340 = $27;
label = 12;
break L1;
} else $$23948 = $27;
}
return $$4 | 0;
}
} while (0);
L18 : do if ((label | 0) == 12) {
switch ($$340 >> 8 | 0) {
case 0:
{
$$34057 = $$340;
label = 13;
break L18;
break;
}
case 255:
break;
case 223:
case 222:
case 221:
case 220:
case 219:
case 218:
case 217:
case 216:
{
$$4 = -1;
return $$4 | 0;
}
default:
{
$$34058 = $$340;
break L18;
}
}
if (($$340 | 1 | 0) == 65535) {
$$4 = -1;
return $$4 | 0;
} else $$34058 = $$340;
} while (0);
if ((label | 0) == 13) if (!(HEAP8[3704 + $$34057 >> 0] | 0)) {
$$4 = -1;
return $$4 | 0;
} else $$34058 = $$34057;
$$4 = $$34058;
return $$4 | 0;
}
function __ZNK7Gesture11CopyGestureEv($0) {
$0 = $0 | 0;
var $1 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $25 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, dest = 0, sp = 0, src = 0, stop = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer5 = sp + 16 | 0;
$vararg_buffer2 = sp + 8 | 0;
$vararg_buffer = sp;
$1 = __Znwj(52) | 0;
HEAP32[$1 >> 2] = 0;
$2 = $1 + 4 | 0;
HEAP32[$2 >> 2] = 0;
$3 = $1 + 8 | 0;
HEAP32[$3 >> 2] = 0;
HEAP8[$1 + 12 >> 0] = 1;
HEAP8[$1 + 13 >> 0] = 64;
HEAP8[$1 + 14 >> 0] = 0;
dest = $1 + 16 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
if (0) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer >> 2] = $0;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
__Z7eprintfPKcz(28888, $vararg_buffer);
}
dest = $1;
src = $0;
stop = dest + 52 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
if (HEAP32[$2 >> 2] | 0) HEAP32[$2 >> 2] = 0;
$11 = HEAP32[$3 >> 2] | 0;
if ($11 | 0) {
$13 = __Z10copyStringPKc($11) | 0;
HEAP32[$3 >> 2] = $13;
}
$14 = $1 + 20 | 0;
$15 = HEAP32[$14 >> 2] | 0;
if ($15 | 0) {
$17 = __ZNK11OneHGesture15CopyOneHGestureEP7Gesture($15, $1) | 0;
HEAP32[$14 >> 2] = $17;
}
$18 = $1 + 24 | 0;
$19 = HEAP32[$18 >> 2] | 0;
if ($19 | 0) {
$21 = __ZNK11OneHGesture15CopyOneHGestureEP7Gesture($19, $1) | 0;
HEAP32[$18 >> 2] = $21;
}
$25 = (HEAP8[$0 + 13 >> 0] & 64) == 0;
HEAP32[$1 + 28 >> 2] = HEAP32[($25 ? $18 : $14) >> 2];
HEAP32[$1 + 32 >> 2] = HEAP32[($25 ? $14 : $18) >> 2];
$29 = $1 + 36 | 0;
$30 = HEAP32[$29 >> 2] | 0;
if ($30 | 0) {
if (0) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer2 >> 2] = $30;
__Z7eprintfPKcz(25404, $vararg_buffer2);
}
HEAP32[$29 >> 2] = 0;
}
$33 = $1 + 40 | 0;
$34 = HEAP32[$33 >> 2] | 0;
if ($34 | 0) {
if (0) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer5 >> 2] = $34;
__Z7eprintfPKcz(28298, $vararg_buffer5);
}
HEAP32[$33 >> 2] = 0;
}
$37 = $1 + 44 | 0;
$38 = HEAP32[$37 >> 2] | 0;
if (!$38) {
$44 = $1 + 48 | 0;
$45 = HEAP32[$44 >> 2] | 0;
$46 = __Z26CopyNonmanualMovementArrayPP17NonmanualMovement($45) | 0;
HEAP32[$44 >> 2] = $46;
STACKTOP = sp;
return $1 | 0;
}
$43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$38 >> 2] | 0) + 8 >> 2] & 63]($38) | 0;
HEAP32[$37 >> 2] = $43;
$44 = $1 + 48 | 0;
$45 = HEAP32[$44 >> 2] | 0;
$46 = __Z26CopyNonmanualMovementArrayPP17NonmanualMovement($45) | 0;
HEAP32[$44 >> 2] = $46;
STACKTOP = sp;
return $1 | 0;
}
function __ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vector($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$011$i$i = 0, $$01115$i$i = 0, $$01116$i$i = 0, $$sink$i$i = 0, $11 = 0, $23 = 0, $26 = f0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $tmpcast$i$i$byval_copy = 0, $tmpcast13$i$i$byval_copy = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$tmpcast13$i$i$byval_copy = sp + 16 | 0;
$tmpcast$i$i$byval_copy = sp + 12 | 0;
$3 = sp + 8 | 0;
$4 = sp + 4 | 0;
$5 = sp;
$6 = HEAP32[$1 >> 2] | 0;
HEAP32[$5 >> 2] = $6;
$8 = HEAP32[$0 + 176 >> 2] | 0;
HEAP8[$tmpcast13$i$i$byval_copy >> 0] = HEAP8[$5 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy + 1 >> 0] = HEAP8[$5 + 1 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy + 2 >> 0] = HEAP8[$5 + 2 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy + 3 >> 0] = HEAP8[$5 + 3 >> 0] | 0;
$9 = __ZN6KeyOpsIK6SiteIDE12hashFunctionES0_i($tmpcast13$i$i$byval_copy, $8) | 0;
$11 = HEAP32[$0 + 172 >> 2] | 0;
L1 : do if ((HEAP16[$11 + ($9 << 3) + 4 >> 1] | 0) > 0) {
$$01115$i$i = HEAP32[$11 + ($9 << 3) >> 2] | 0;
if (!$$01115$i$i) label = 6; else {
$$01116$i$i = $$01115$i$i;
while (1) {
HEAP32[$3 >> 2] = $6;
HEAP32[$4 >> 2] = HEAP32[$$01116$i$i >> 2];
HEAP32[$tmpcast$i$i$byval_copy >> 2] = HEAP32[$3 >> 2];
HEAP8[$tmpcast13$i$i$byval_copy >> 0] = HEAP8[$4 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy + 1 >> 0] = HEAP8[$4 + 1 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy + 2 >> 0] = HEAP8[$4 + 2 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy + 3 >> 0] = HEAP8[$4 + 3 >> 0] | 0;
if (__ZN6KeyOpsIK6SiteIDE5eqkeyES0_S0_($tmpcast$i$i$byval_copy, $tmpcast13$i$i$byval_copy) | 0) break;
$$011$i$i = HEAP32[$$01116$i$i + 8 >> 2] | 0;
if (!$$011$i$i) {
label = 6;
break L1;
} else $$01116$i$i = $$011$i$i;
}
$$sink$i$i = $$01116$i$i + 4 | 0;
}
} else label = 6; while (0);
if ((label | 0) == 6) $$sink$i$i = $0 + 192 | 0;
$23 = HEAP32[$$sink$i$i >> 2] | 0;
if (!$23) {
STACKTOP = sp;
return;
}
$26 = Math_fround(HEAPF32[$23 + 20 >> 2]);
if (!($26 > Math_fround(0.0))) {
STACKTOP = sp;
return;
}
$28 = $23 + 24 | 0;
$29 = HEAP32[$28 >> 2] | 0;
do if (!$29) {
$31 = __Znwj(12) | 0;
__THREW__ = 0;
invoke_vii(120, $31 | 0, $2 | 0);
$32 = __THREW__;
__THREW__ = 0;
if ($32 & 1) {
$34 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($31);
___resumeException($34 | 0);
} else {
HEAP32[$28 >> 2] = $31;
$36 = $31;
break;
}
} else {
__ZN6Vector7setFromERKS_($29, $2);
$36 = HEAP32[$28 >> 2] | 0;
} while (0);
__ZN6Vector9setLengthEf($36, $26) | 0;
STACKTOP = sp;
return;
}
function __ZN21InvertibleStringArray12vSetAsArrayAEsPi($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0 = 0, $$034 = 0, $$lcssa = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $26 = 0, $3 = 0, $33 = 0, $34 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $44 = 0, $47 = 0, $5 = 0, $50 = 0, $52 = 0, $61 = 0, $62 = 0, $65 = 0, $7 = 0, $72 = 0, $73 = 0, $77 = 0, $78 = 0, $9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp;
$4 = $0 + 4 | 0;
$5 = HEAP32[$4 >> 2] | 0;
if ($5 | 0) {
_free($5);
HEAP32[$4 >> 2] = 0;
}
$7 = HEAP32[$0 >> 2] | 0;
do if ($7 | 0) {
__THREW__ = 0;
invoke_vi(93, $7 | 0);
$9 = __THREW__;
__THREW__ = 0;
if (!($9 & 1)) {
__ZdlPv($7);
HEAP32[$0 >> 2] = 0;
break;
}
$11 = ___cxa_find_matching_catch_2() | 0;
$12 = tempRet0;
__ZdlPv($7);
$$0 = $11;
$$034 = $12;
___resumeException($$0 | 0);
} while (0);
HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
$13 = $0 + 8 | 0;
HEAP32[$13 >> 2] = 0;
$14 = $1 << 16 >> 16;
$15 = $0 + 12 | 0;
if ((HEAP32[$15 >> 2] | 0) != ($14 | 0)) {
$26 = $14;
do {
HEAP32[$2 >> 2] = ((HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1)) + 4;
if ((HEAP32[$13 >> 2] | 0) <= ($26 | 0)) HEAP32[$13 >> 2] = $26 + 1;
$33 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$34 = HEAP32[$33 >> 2] | 0;
HEAP32[$2 >> 2] = $33 + 4;
$26 = $34 << 16 >> 16;
} while ((HEAP32[$15 >> 2] | 0) != ($26 | 0));
}
$38 = HEAP32[$13 >> 2] | 0;
if (($38 | 0) < 1) {
STACKTOP = sp;
return;
}
$41 = _malloc($38 << 2) | 0;
HEAP32[$4 >> 2] = $41;
HEAP32[$41 >> 2] = 0;
$42 = HEAP32[$13 >> 2] | 0;
if (($42 | 0) > 1) {
$50 = 1;
do {
HEAP32[(HEAP32[$4 >> 2] | 0) + ($50 << 2) >> 2] = 0;
$50 = $50 + 1 | 0;
$52 = HEAP32[$13 >> 2] | 0;
} while (($50 | 0) < ($52 | 0));
$$lcssa = $52;
} else $$lcssa = $42;
$44 = __Znwj(28) | 0;
__THREW__ = 0;
invoke_viii(74, $44 | 0, HEAP32[$15 >> 2] | 0, $$lcssa << 1 | 0);
$47 = __THREW__;
__THREW__ = 0;
if ($47 & 1) {
$77 = ___cxa_find_matching_catch_2() | 0;
$78 = tempRet0;
__ZdlPv($44);
$$0 = $77;
$$034 = $78;
___resumeException($$0 | 0);
}
HEAP32[$0 >> 2] = $44;
HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
if ((HEAP32[$15 >> 2] | 0) != ($14 | 0)) {
$65 = $14;
do {
$61 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$62 = HEAP32[$61 >> 2] | 0;
HEAP32[$2 >> 2] = $61 + 4;
HEAP32[(HEAP32[$4 >> 2] | 0) + ($65 << 2) >> 2] = $62;
__ZN7HashAnyIPKciE7addItemES1_i(HEAP32[$0 >> 2] | 0, $62, $65);
$72 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$73 = HEAP32[$72 >> 2] | 0;
HEAP32[$2 >> 2] = $72 + 4;
$65 = $73 << 16 >> 16;
} while ((HEAP32[$15 >> 2] | 0) != ($65 | 0));
}
STACKTOP = sp;
return;
}
function __ZN25TwoHConcretePostureChange11setCopyRestERKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var dest = 0, src = 0, stop = 0;
__ZN6Vector7setFromERKS_($0 + 4 | 0, $1 + 4 | 0);
__ZN6Vector7setFromERKS_($0 + 16 | 0, $1 + 16 | 0);
__ZN6Vector7setFromERKS_($0 + 28 | 0, $1 + 28 | 0);
HEAP32[$0 + 64 >> 2] = HEAP32[$1 + 64 >> 2];
HEAP32[$0 + 68 >> 2] = HEAP32[$1 + 68 >> 2];
dest = $0 + 76 | 0;
src = $1 + 76 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[$0 + 40 >> 2] = HEAP32[$1 + 40 >> 2];
HEAP32[$0 + 44 >> 2] = HEAP32[$1 + 44 >> 2];
HEAP32[$0 + 48 >> 2] = HEAP32[$1 + 48 >> 2];
HEAP32[$0 + 52 >> 2] = HEAP32[$1 + 52 >> 2];
__ZN6Vector7setFromERKS_($0 + 116 | 0, $1 + 116 | 0);
__ZN6Vector7setFromERKS_($0 + 128 | 0, $1 + 128 | 0);
__ZN6Vector7setFromERKS_($0 + 140 | 0, $1 + 140 | 0);
HEAP32[$0 + 176 >> 2] = HEAP32[$1 + 176 >> 2];
HEAP32[$0 + 180 >> 2] = HEAP32[$1 + 180 >> 2];
dest = $0 + 188 | 0;
src = $1 + 188 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[$0 + 152 >> 2] = HEAP32[$1 + 152 >> 2];
HEAP32[$0 + 156 >> 2] = HEAP32[$1 + 156 >> 2];
HEAP32[$0 + 160 >> 2] = HEAP32[$1 + 160 >> 2];
HEAP32[$0 + 164 >> 2] = HEAP32[$1 + 164 >> 2];
__ZN6Vector7setFromERKS_($0 + 228 | 0, $1 + 228 | 0);
__ZN6Vector7setFromERKS_($0 + 240 | 0, $1 + 240 | 0);
__ZN6Vector7setFromERKS_($0 + 252 | 0, $1 + 252 | 0);
HEAP32[$0 + 288 >> 2] = HEAP32[$1 + 288 >> 2];
HEAP32[$0 + 292 >> 2] = HEAP32[$1 + 292 >> 2];
dest = $0 + 300 | 0;
src = $1 + 300 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[$0 + 264 >> 2] = HEAP32[$1 + 264 >> 2];
HEAP32[$0 + 268 >> 2] = HEAP32[$1 + 268 >> 2];
HEAP32[$0 + 272 >> 2] = HEAP32[$1 + 272 >> 2];
HEAP32[$0 + 276 >> 2] = HEAP32[$1 + 276 >> 2];
__ZN6Vector7setFromERKS_($0 + 340 | 0, $1 + 340 | 0);
__ZN6Vector7setFromERKS_($0 + 352 | 0, $1 + 352 | 0);
__ZN6Vector7setFromERKS_($0 + 364 | 0, $1 + 364 | 0);
HEAP32[$0 + 400 >> 2] = HEAP32[$1 + 400 >> 2];
HEAP32[$0 + 404 >> 2] = HEAP32[$1 + 404 >> 2];
dest = $0 + 412 | 0;
src = $1 + 412 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[$0 + 376 >> 2] = HEAP32[$1 + 376 >> 2];
HEAP32[$0 + 380 >> 2] = HEAP32[$1 + 380 >> 2];
HEAP32[$0 + 384 >> 2] = HEAP32[$1 + 384 >> 2];
HEAP32[$0 + 388 >> 2] = HEAP32[$1 + 388 >> 2];
return;
}
function __ZN7GetoptsD2Ev($0) {
$0 = $0 | 0;
var $$06$i = 0, $$09$i = 0, $$pre = 0, $$pre9 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $31 = 0, $32 = 0, $35 = 0, $36 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $45 = 0, $47 = 0, $49 = 0, $51 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, label = 0;
$1 = $0 + 8 | 0;
$2 = HEAP32[$1 >> 2] | 0;
L1 : do if ($2 | 0) {
$4 = HEAP32[$2 >> 2] | 0;
do if (!$4) $24 = $2; else {
$6 = $2 + 12 | 0;
$7 = HEAP32[$6 >> 2] | 0;
if (($7 | 0) > 0) {
$$09$i = 0;
$10 = $4;
$53 = $7;
while (1) {
$11 = HEAP32[$10 + ($$09$i << 2) >> 2] | 0;
if (!$11) $21 = $53; else {
__THREW__ = 0;
invoke_vi(96, $11 | 0);
$13 = __THREW__;
__THREW__ = 0;
if ($13 & 1) {
label = 7;
break;
}
__ZdlPv($11);
HEAP32[(HEAP32[$2 >> 2] | 0) + ($$09$i << 2) >> 2] = 0;
$21 = HEAP32[$6 >> 2] | 0;
}
$19 = $$09$i + 1 | 0;
if (($19 | 0) >= ($21 | 0)) {
label = 10;
break;
}
$$09$i = $19;
$10 = HEAP32[$2 >> 2] | 0;
$53 = $21;
}
if ((label | 0) == 7) {
$17 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($11);
___resumeException($17 | 0);
} else if ((label | 0) == 10) {
$$pre = HEAP32[$1 >> 2] | 0;
if (!$$pre) break L1; else {
$24 = $$pre;
break;
}
}
} else $24 = $2;
} while (0);
$23 = HEAP32[$24 >> 2] | 0;
if ($23 | 0) _free($23);
__ZdlPv($24);
HEAP32[$1 >> 2] = 0;
} while (0);
$26 = $0 + 4 | 0;
$27 = HEAP32[$26 >> 2] | 0;
do if ($27 | 0) {
$29 = HEAP32[$27 >> 2] | 0;
if (!$29) $45 = $27; else {
$31 = $27 + 12 | 0;
$32 = HEAP32[$31 >> 2] | 0;
if (($32 | 0) > 0) {
$$06$i = 0;
$35 = $29;
$54 = $32;
while (1) {
$36 = HEAP32[$35 + ($$06$i << 2) >> 2] | 0;
if (!$36) $42 = $54; else {
_free($36);
HEAP32[(HEAP32[$27 >> 2] | 0) + ($$06$i << 2) >> 2] = 0;
$42 = HEAP32[$31 >> 2] | 0;
}
$40 = $$06$i + 1 | 0;
if (($40 | 0) >= ($42 | 0)) break;
$$06$i = $40;
$35 = HEAP32[$27 >> 2] | 0;
$54 = $42;
}
$$pre9 = HEAP32[$26 >> 2] | 0;
if (!$$pre9) break; else $45 = $$pre9;
} else $45 = $27;
}
$44 = HEAP32[$45 >> 2] | 0;
if ($44 | 0) _free($44);
__ZdlPv($45);
HEAP32[$26 >> 2] = 0;
} while (0);
$47 = HEAP32[$0 >> 2] | 0;
if (!$47) return;
__THREW__ = 0;
invoke_vi(93, $47 | 0);
$49 = __THREW__;
__THREW__ = 0;
if ($49 & 1) {
$51 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($47);
___resumeException($51 | 0);
}
__ZdlPv($47);
HEAP32[$0 >> 2] = 0;
return;
}
function __ZL17calcLeadFractionsPff18PostureChangeFlags19PostureChangeTimingb($0, $1, $2, $$02, $$13, $3) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = $2 | 0;
$$02 = Math_fround($$02);
$$13 = Math_fround($$13);
$3 = $3 | 0;
var $13 = 0, $14 = 0, $24 = 0, $25 = f0, $35 = 0, $36 = f0, $37 = 0, $38 = f0, $39 = f0, $4 = 0, $40 = f0, $49 = 0.0, $5 = f0, $51 = 0.0, $53 = 0.0, $55 = 0.0, $6 = f0, $7 = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 80 | 0;
$vararg_buffer5 = sp + 32 | 0;
$vararg_buffer1 = sp + 16 | 0;
$4 = sp;
HEAPF32[$4 >> 2] = $$02;
HEAPF32[$4 + 4 >> 2] = $$13;
$5 = Math_fround(Math_fround(1.0) - $1);
$6 = $3 ? $1 : $5;
HEAPF32[$0 >> 2] = $6;
$7 = HEAPU8[$2 >> 0] | HEAPU8[$2 + 1 >> 0] << 8;
$13 = ($7 & 64) != 0;
$14 = $7 & 1536;
if ($14 << 16 >> 16 != 1536 | $$13 == Math_fround(0.0)) $25 = $6; else $25 = Math_fround(Math_fround($6 * Math_fround($$13 + Math_fround(1.0))) / Math_fround(Math_fround(1.0) - Math_fround(Math_fround(Math_fround(1.0) - Math_fround($6 * Math_fround(2.0))) * $$13)));
$24 = $0 + 4 | 0;
HEAPF32[$24 >> 2] = $25;
if ($$02 == Math_fround(0.0) | $13 & $14 << 16 >> 16 != 0 ^ 1) $36 = $6; else $36 = Math_fround(Math_fround($6 * Math_fround($$02 + Math_fround(1.0))) / Math_fround(Math_fround(1.0) - Math_fround(Math_fround(Math_fround(1.0) - Math_fround($6 * Math_fround(2.0))) * $$02)));
$35 = $0 + 8 | 0;
HEAPF32[$35 >> 2] = $36;
$37 = $0 + 12 | 0;
HEAPF32[$37 >> 2] = $6;
if (!$3) {
$38 = Math_fround(Math_fround(1.0) - $6);
HEAPF32[$0 >> 2] = $38;
$39 = Math_fround(Math_fround(1.0) - $25);
HEAPF32[$24 >> 2] = $39;
$40 = Math_fround(Math_fround(1.0) - $36);
HEAPF32[$35 >> 2] = $40;
HEAPF32[$37 >> 2] = $38;
}
if (!0) {
STACKTOP = sp;
return;
}
__Z7eprintfPKcz(36054, sp + 8 | 0);
__ZNK18PostureChangeFlags5printEP8_IO_FILE($2, HEAP32[16082] | 0);
__Z5eputcc(10);
HEAP32[$vararg_buffer1 >> 2] = $7 & 512 ? 84 : 70;
HEAP32[$vararg_buffer1 + 4 >> 2] = $7 & 1024 ? 84 : 70;
HEAP32[$vararg_buffer1 + 8 >> 2] = $13 ? 84 : 70;
__Z7eprintfPKcz(36073, $vararg_buffer1);
$49 = +Math_fround(HEAPF32[$0 >> 2]);
$51 = +Math_fround(HEAPF32[$24 >> 2]);
$53 = +Math_fround(HEAPF32[$35 >> 2]);
$55 = +Math_fround(HEAPF32[$37 >> 2]);
HEAP32[$vararg_buffer5 >> 2] = $3 ? 84 : 70;
HEAPF64[$vararg_buffer5 + 8 >> 3] = +$1;
HEAPF64[$vararg_buffer5 + 16 >> 3] = $49;
HEAPF64[$vararg_buffer5 + 24 >> 3] = $51;
HEAPF64[$vararg_buffer5 + 32 >> 3] = $53;
HEAPF64[$vararg_buffer5 + 40 >> 3] = $55;
__Z7eprintfPKcz(36096, $vararg_buffer5);
__ZNK19PostureChangeTiming5printEP8_IO_FILE($4, HEAP32[16082] | 0);
__Z5eputcc(10);
STACKTOP = sp;
return;
}
function __ZNK7Gesture21printSplitOrientationERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEbbbb($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
var $12 = 0, $25 = 0, $6 = 0, $brmerge = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$6 = sp;
$brmerge = $2 | $3;
if (!($brmerge | $4 | $5)) {
STACKTOP = sp;
return;
}
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
HEAP8[$6 >> 0] = 60;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $6, 1) | 0, 51336, 16) | 0, 36571, 2) | 0;
$12 = (HEAP16[36078] | 0) + 1 << 16 >> 16;
HEAP16[36078] = $12;
if ($brmerge) __ZNK19OneHAbstractPosture21printOrientationSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEbb(HEAP32[$0 + 20 >> 2] | 0, $1, $2, $3); else {
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, $12 << 16 >> 16);
HEAP8[$6 >> 0] = 60;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $6, 1) | 0, 51325, 10) | 0, 36603, 3) | 0;
}
if ($4 | $5) __ZNK19OneHAbstractPosture21printOrientationSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEbb(HEAP32[$0 + 24 >> 2] | 0, $1, $4, $5); else {
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
HEAP8[$6 >> 0] = 60;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $6, 1) | 0, 51325, 10) | 0, 36603, 3) | 0;
}
$25 = (HEAP16[36078] | 0) + -1 << 16 >> 16;
HEAP16[36078] = $25;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, $25 << 16 >> 16);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36574, 2) | 0, 51336, 16) | 0, 36571, 2) | 0;
STACKTOP = sp;
return;
}
function __ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = Math_fround($3);
var $$011$i$i = 0, $$01115$i$i = 0, $$01116$i$i = 0, $$sink$i$i = 0, $10 = 0, $12 = 0, $24 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $tmpcast$i$i$byval_copy = 0, $tmpcast13$i$i$byval_copy = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$tmpcast13$i$i$byval_copy = sp + 16 | 0;
$tmpcast$i$i$byval_copy = sp + 12 | 0;
$4 = sp + 8 | 0;
$5 = sp + 4 | 0;
$6 = sp;
$7 = HEAP32[$1 >> 2] | 0;
HEAP32[$6 >> 2] = $7;
$9 = HEAP32[$0 + 176 >> 2] | 0;
HEAP8[$tmpcast13$i$i$byval_copy >> 0] = HEAP8[$6 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy + 1 >> 0] = HEAP8[$6 + 1 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy + 2 >> 0] = HEAP8[$6 + 2 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy + 3 >> 0] = HEAP8[$6 + 3 >> 0] | 0;
$10 = __ZN6KeyOpsIK6SiteIDE12hashFunctionES0_i($tmpcast13$i$i$byval_copy, $9) | 0;
$12 = HEAP32[$0 + 172 >> 2] | 0;
L1 : do if ((HEAP16[$12 + ($10 << 3) + 4 >> 1] | 0) > 0) {
$$01115$i$i = HEAP32[$12 + ($10 << 3) >> 2] | 0;
if (!$$01115$i$i) label = 6; else {
$$01116$i$i = $$01115$i$i;
while (1) {
HEAP32[$4 >> 2] = $7;
HEAP32[$5 >> 2] = HEAP32[$$01116$i$i >> 2];
HEAP32[$tmpcast$i$i$byval_copy >> 2] = HEAP32[$4 >> 2];
HEAP8[$tmpcast13$i$i$byval_copy >> 0] = HEAP8[$5 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy + 1 >> 0] = HEAP8[$5 + 1 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy + 2 >> 0] = HEAP8[$5 + 2 >> 0] | 0;
HEAP8[$tmpcast13$i$i$byval_copy + 3 >> 0] = HEAP8[$5 + 3 >> 0] | 0;
if (__ZN6KeyOpsIK6SiteIDE5eqkeyES0_S0_($tmpcast$i$i$byval_copy, $tmpcast13$i$i$byval_copy) | 0) break;
$$011$i$i = HEAP32[$$01116$i$i + 8 >> 2] | 0;
if (!$$011$i$i) {
label = 6;
break L1;
} else $$01116$i$i = $$011$i$i;
}
$$sink$i$i = $$01116$i$i + 4 | 0;
}
} else label = 6; while (0);
if ((label | 0) == 6) $$sink$i$i = $0 + 192 | 0;
$24 = HEAP32[$$sink$i$i >> 2] | 0;
if (!($3 > Math_fround(0.0) & ($24 | 0) != 0)) {
STACKTOP = sp;
return;
}
$27 = $24 + 24 | 0;
$28 = HEAP32[$27 >> 2] | 0;
do if (!$28) {
$30 = __Znwj(12) | 0;
__THREW__ = 0;
invoke_vii(120, $30 | 0, $2 | 0);
$31 = __THREW__;
__THREW__ = 0;
if ($31 & 1) {
$33 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($30);
___resumeException($33 | 0);
} else {
HEAP32[$27 >> 2] = $30;
$35 = $30;
break;
}
} else {
__ZN6Vector7setFromERKS_($28, $2);
$35 = HEAP32[$27 >> 2] | 0;
} while (0);
__ZN6Vector9setLengthEf($35, $3) | 0;
STACKTOP = sp;
return;
}
function __ZN11ParMovementC2E12SET_OF_HANDS($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$06$i$i = 0, $$pr6$i = 0, $$pre$i$i = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $23 = 0, $29 = 0, $3 = 0, $31 = 0, $33 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $7 = 0, label = 0;
__ZN13BasicMovementC2E12MovementType12SET_OF_HANDS($0, 5, $1);
HEAP32[$0 + 532 >> 2] = 10;
$3 = $0 + 540 | 0;
HEAP32[$3 >> 2] = 0;
$4 = $0 + 528 | 0;
HEAP32[$4 >> 2] = 0;
$5 = $0 + 536 | 0;
HEAP32[$5 >> 2] = 0;
HEAP32[$0 >> 2] = 2856;
__THREW__ = 0;
invoke_vi(98, $0 + 544 | 0);
$7 = __THREW__;
__THREW__ = 0;
if (!($7 & 1)) {
HEAP32[$0 + 4 >> 2] = 5;
return;
}
$10 = ___cxa_find_matching_catch_2() | 0;
HEAP32[$0 >> 2] = 2972;
$12 = HEAP32[$4 >> 2] | 0;
L4 : do if ($12 | 0) {
$14 = HEAP32[$3 >> 2] | 0;
do if (($14 | 0) > 0) {
$$06$i$i = 0;
$17 = $12;
$43 = $14;
while (1) {
$18 = HEAP32[$17 + ($$06$i$i << 2) >> 2] | 0;
if (!$18) {
$$pre$i$i = $17;
$29 = $43;
} else {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$18 >> 2] | 0) + 4 >> 2] | 0, $18 | 0);
$23 = __THREW__;
__THREW__ = 0;
if ($23 & 1) break;
HEAP32[(HEAP32[$4 >> 2] | 0) + ($$06$i$i << 2) >> 2] = 0;
$$pre$i$i = HEAP32[$4 >> 2] | 0;
$29 = HEAP32[$3 >> 2] | 0;
}
$$06$i$i = $$06$i$i + 1 | 0;
if (($$06$i$i | 0) >= ($29 | 0)) {
label = 9;
break;
} else {
$17 = $$pre$i$i;
$43 = $29;
}
}
if ((label | 0) == 9) if (!$$pre$i$i) break L4; else {
$$pr6$i = $$pre$i$i;
break;
}
$31 = ___cxa_find_matching_catch_3(0) | 0;
$33 = HEAP32[$4 >> 2] | 0;
if (!$33) {
HEAP32[$3 >> 2] = 0;
HEAP32[$5 >> 2] = 0;
HEAP32[$0 >> 2] = 1984;
$39 = $0 + 452 | 0;
HEAP32[$39 >> 2] = 0;
$40 = $0 + 340 | 0;
HEAP32[$40 >> 2] = 0;
$41 = $0 + 228 | 0;
HEAP32[$41 >> 2] = 0;
$42 = $0 + 116 | 0;
HEAP32[$42 >> 2] = 0;
___clang_call_terminate($31);
}
_free($33);
HEAP32[$4 >> 2] = 0;
HEAP32[$3 >> 2] = 0;
HEAP32[$5 >> 2] = 0;
HEAP32[$0 >> 2] = 1984;
$39 = $0 + 452 | 0;
HEAP32[$39 >> 2] = 0;
$40 = $0 + 340 | 0;
HEAP32[$40 >> 2] = 0;
$41 = $0 + 228 | 0;
HEAP32[$41 >> 2] = 0;
$42 = $0 + 116 | 0;
HEAP32[$42 >> 2] = 0;
___clang_call_terminate($31);
} else $$pr6$i = $12; while (0);
_free($$pr6$i);
HEAP32[$4 >> 2] = 0;
} while (0);
HEAP32[$3 >> 2] = 0;
HEAP32[$5 >> 2] = 0;
HEAP32[$0 >> 2] = 1984;
HEAP32[$0 + 452 >> 2] = 0;
HEAP32[$0 + 340 >> 2] = 0;
HEAP32[$0 + 228 >> 2] = 0;
HEAP32[$0 + 116 >> 2] = 0;
___resumeException($10 | 0);
}
function __ZNK27OneHConcretePostureModifier5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $17 = 0, $23 = 0, $29 = 0.0, $30 = 0, $36 = 0.0, $37 = 0, $43 = 0.0, $44 = 0, $50 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$vararg_buffer9 = sp + 40 | 0;
$vararg_buffer5 = sp + 24 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
if (Math_fround(HEAPF32[$0 >> 2]) != Math_fround(0.0)) label = 5; else if (Math_fround(HEAPF32[$0 + 4 >> 2]) != Math_fround(0.0)) label = 5; else if (Math_fround(HEAPF32[$0 + 8 >> 2]) != Math_fround(0.0)) label = 5;
if ((label | 0) == 5) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(35669, 13, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK10Quaternion5printEP8_IO_FILEi($0, $1, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$17 = $0 + 16 | 0;
if (HEAP32[$17 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(35683, 19, 1, $1) | 0;
HEAP32[$vararg_buffer >> 2] = HEAP32[$17 >> 2];
_fprintf($1, 35092, $vararg_buffer) | 0;
}
$23 = $0 + 20 | 0;
if (Math_fround(HEAPF32[$23 >> 2]) != Math_fround(0.0)) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$29 = +Math_fround(HEAPF32[$23 >> 2]);
HEAP32[$vararg_buffer1 >> 2] = 3;
HEAPF64[$vararg_buffer1 + 8 >> 3] = $29;
_fprintf($1, 35703, $vararg_buffer1) | 0;
}
$30 = $0 + 24 | 0;
if (Math_fround(HEAPF32[$30 >> 2]) != Math_fround(0.0)) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$36 = +Math_fround(HEAPF32[$30 >> 2]);
HEAP32[$vararg_buffer5 >> 2] = 3;
HEAPF64[$vararg_buffer5 + 8 >> 3] = $36;
_fprintf($1, 35725, $vararg_buffer5) | 0;
}
$37 = $0 + 28 | 0;
if (Math_fround(HEAPF32[$37 >> 2]) != Math_fround(0.0)) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$43 = +Math_fround(HEAPF32[$37 >> 2]);
HEAP32[$vararg_buffer9 >> 2] = 3;
HEAPF64[$vararg_buffer9 + 8 >> 3] = $43;
_fprintf($1, 35752, $vararg_buffer9) | 0;
}
$44 = $0 + 32 | 0;
if (HEAP16[$44 >> 1] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(35779, 15, 1, $1) | 0;
__Z11printDigitsP8_IO_FILEs($1, HEAP16[$44 >> 1] | 0);
_fputc(10, $1) | 0;
}
$50 = $0 + 34 | 0;
if (!(HEAP16[$50 >> 1] | 0)) {
STACKTOP = sp;
return;
}
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(35795, 16, 1, $1) | 0;
__Z11printDigitsP8_IO_FILEs($1, HEAP16[$50 >> 1] | 0);
_fputc(10, $1) | 0;
STACKTOP = sp;
return;
}
function __ZN21InvertibleStringArray12vSetAsArrayHEPKcPi($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0 = 0, $$036 = 0, $$03841 = 0, $$lcssa = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $20 = 0, $21 = 0, $23 = 0, $3 = 0, $31 = 0, $32 = 0, $34 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $44 = 0, $47 = 0, $49 = 0, $5 = 0, $56 = 0, $57 = 0, $59 = 0, $67 = 0, $7 = 0, $70 = 0, $71 = 0, $9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp;
$4 = $0 + 4 | 0;
$5 = HEAP32[$4 >> 2] | 0;
if ($5 | 0) {
_free($5);
HEAP32[$4 >> 2] = 0;
}
$7 = HEAP32[$0 >> 2] | 0;
do if ($7 | 0) {
__THREW__ = 0;
invoke_vi(93, $7 | 0);
$9 = __THREW__;
__THREW__ = 0;
if (!($9 & 1)) {
__ZdlPv($7);
HEAP32[$0 >> 2] = 0;
break;
}
$11 = ___cxa_find_matching_catch_2() | 0;
$12 = tempRet0;
__ZdlPv($7);
$$0 = $11;
$$036 = $12;
___resumeException($$0 | 0);
} while (0);
HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
$13 = $0 + 8 | 0;
HEAP32[$13 >> 2] = 0;
$14 = ($1 | 0) == 0;
if (!$14) do {
$20 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$21 = HEAP32[$20 >> 2] | 0;
HEAP32[$2 >> 2] = $20 + 4;
$23 = $21 << 16 >> 16;
if ((HEAP32[$13 >> 2] | 0) <= ($23 | 0)) HEAP32[$13 >> 2] = $23 + 1;
$31 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$32 = HEAP32[$31 >> 2] | 0;
HEAP32[$2 >> 2] = $31 + 4;
} while (($32 | 0) != 0);
$34 = HEAP32[$13 >> 2] | 0;
if (($34 | 0) < 1) {
STACKTOP = sp;
return;
}
$37 = _malloc($34 << 2) | 0;
HEAP32[$4 >> 2] = $37;
HEAP32[$37 >> 2] = 0;
$38 = HEAP32[$13 >> 2] | 0;
if (($38 | 0) > 1) {
$47 = 1;
do {
HEAP32[(HEAP32[$4 >> 2] | 0) + ($47 << 2) >> 2] = 0;
$47 = $47 + 1 | 0;
$49 = HEAP32[$13 >> 2] | 0;
} while (($47 | 0) < ($49 | 0));
$$lcssa = $49;
} else $$lcssa = $38;
$40 = __Znwj(28) | 0;
__THREW__ = 0;
invoke_viii(74, $40 | 0, HEAP32[$0 + 12 >> 2] | 0, $$lcssa << 1 | 0);
$44 = __THREW__;
__THREW__ = 0;
if ($44 & 1) {
$70 = ___cxa_find_matching_catch_2() | 0;
$71 = tempRet0;
__ZdlPv($40);
$$0 = $70;
$$036 = $71;
___resumeException($$0 | 0);
}
HEAP32[$0 >> 2] = $40;
HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
if (!$14) {
$$03841 = $1;
do {
$56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$57 = HEAP32[$56 >> 2] | 0;
HEAP32[$2 >> 2] = $56 + 4;
$59 = $57 << 16 >> 16;
HEAP32[(HEAP32[$4 >> 2] | 0) + ($59 << 2) >> 2] = $$03841;
__ZN7HashAnyIPKciE7addItemES1_i(HEAP32[$0 >> 2] | 0, $$03841, $59);
$67 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$$03841 = HEAP32[$67 >> 2] | 0;
HEAP32[$2 >> 2] = $67 + 4;
} while (($$03841 | 0) != 0);
}
STACKTOP = sp;
return;
}
function __ZNK10Quaternion12rotateVectorERK6VectorRS0_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $10 = f0, $11 = f0, $12 = f0, $13 = f0, $14 = 0, $16 = 0, $18 = 0, $22 = f0, $23 = f0, $24 = f0, $26 = f0, $27 = f0, $3 = 0, $31 = f0, $38 = f0, $4 = f0, $45 = f0, $5 = 0, $53 = f0, $54 = f0, $55 = f0, $56 = f0, $58 = f0, $59 = f0, $6 = f0, $61 = f0, $62 = f0, $7 = 0, $8 = f0, $9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp;
$4 = Math_fround(HEAPF32[$0 >> 2]);
$5 = $0 + 4 | 0;
$6 = Math_fround(HEAPF32[$5 >> 2]);
$7 = $0 + 8 | 0;
$8 = Math_fround(HEAPF32[$7 >> 2]);
$9 = $0 + 12 | 0;
$10 = Math_fround(HEAPF32[$9 >> 2]);
$11 = Math_fround(-$4);
$12 = Math_fround(-$6);
$13 = Math_fround(-$8);
$14 = HEAP32[$1 >> 2] | 0;
$16 = HEAP32[$1 + 4 >> 2] | 0;
$18 = HEAP32[$1 + 8 >> 2] | 0;
HEAP32[$3 >> 2] = $14;
HEAP32[$3 + 4 >> 2] = $16;
HEAP32[$3 + 8 >> 2] = $18;
HEAPF32[$3 + 12 >> 2] = Math_fround(0.0);
__ZNK10Quaternion14checkValidQuatEv($3);
__ZNK10Quaternion14checkValidQuatEv($3);
$22 = (HEAP32[tempDoublePtr >> 2] = $16, Math_fround(HEAPF32[tempDoublePtr >> 2]));
$23 = Math_fround($22 * $13);
$24 = (HEAP32[tempDoublePtr >> 2] = $18, Math_fround(HEAPF32[tempDoublePtr >> 2]));
$26 = Math_fround($23 - Math_fround($24 * $12));
$27 = (HEAP32[tempDoublePtr >> 2] = $14, Math_fround(HEAPF32[tempDoublePtr >> 2]));
$31 = Math_fround(Math_fround($26 + Math_fround($10 * $27)) + Math_fround($4 * Math_fround(-0.0)));
$38 = Math_fround(Math_fround($6 * Math_fround(-0.0)) + Math_fround(Math_fround($10 * $22) + Math_fround(Math_fround($24 * $11) - Math_fround($27 * $13))));
$45 = Math_fround(Math_fround($8 * Math_fround(-0.0)) + Math_fround(Math_fround($10 * $24) + Math_fround(Math_fround($27 * $12) - Math_fround($22 * $11))));
$53 = Math_fround(Math_fround($10 * Math_fround(0.0)) + Math_fround(Math_fround(Math_fround(-Math_fround($27 * $11)) - Math_fround($22 * $12)) - Math_fround($24 * $13)));
$54 = Math_fround(HEAPF32[$5 >> 2]);
$55 = Math_fround($45 * $54);
$56 = Math_fround(HEAPF32[$7 >> 2]);
$58 = Math_fround($55 - Math_fround($38 * $56));
$59 = Math_fround(HEAPF32[$0 >> 2]);
$61 = Math_fround($58 + Math_fround($53 * $59));
$62 = Math_fround(HEAPF32[$9 >> 2]);
__ZN6Vector7setFromEfff($2, Math_fround($61 + Math_fround($62 * $31)), Math_fround(Math_fround($38 * $62) + Math_fround(Math_fround($53 * $54) + Math_fround(Math_fround($56 * $31) - Math_fround($45 * $59)))), Math_fround(Math_fround($45 * $62) + Math_fround(Math_fround($53 * $56) + Math_fround(Math_fround($38 * $59) - Math_fround($54 * $31)))));
STACKTOP = sp;
return;
}
function _normal_scanComment($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$042$be = 0, $$04248 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $39 = 0, $44 = 0, $7 = 0, $9 = 0, label = 0;
if (($1 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
if ((HEAP8[$1 >> 0] | 0) != 45) {
HEAP32[$3 >> 2] = $1;
$$0 = 0;
return $$0 | 0;
}
$7 = $1 + 1 | 0;
if (($7 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
$9 = $0 + 72 | 0;
$10 = $2;
$11 = $0 + 352 | 0;
$12 = $0 + 356 | 0;
$13 = $0 + 360 | 0;
$$04248 = $7;
L11 : while (1) {
switch (HEAP8[$9 + (HEAPU8[$$04248 >> 0] | 0) >> 0] | 0) {
case 8:
case 1:
case 0:
{
label = 19;
break L11;
break;
}
case 5:
{
if (($10 - $$04248 | 0) < 2) {
$$0 = -2;
label = 28;
break L11;
}
if (FUNCTION_TABLE_iii[HEAP32[$11 >> 2] & 63]($0, $$04248) | 0) {
label = 9;
break L11;
}
$$042$be = $$04248 + 2 | 0;
break;
}
case 6:
{
if (($10 - $$04248 | 0) < 3) {
$$0 = -2;
label = 28;
break L11;
}
if (FUNCTION_TABLE_iii[HEAP32[$12 >> 2] & 63]($0, $$04248) | 0) {
label = 13;
break L11;
}
$$042$be = $$04248 + 3 | 0;
break;
}
case 7:
{
if (($10 - $$04248 | 0) < 4) {
$$0 = -2;
label = 28;
break L11;
}
if (FUNCTION_TABLE_iii[HEAP32[$13 >> 2] & 63]($0, $$04248) | 0) {
label = 17;
break L11;
}
$$042$be = $$04248 + 4 | 0;
break;
}
case 27:
{
$39 = $$04248 + 1 | 0;
if (($39 | 0) == ($2 | 0)) {
$$0 = -1;
label = 28;
break L11;
}
if ((HEAP8[$39 >> 0] | 0) == 45) {
label = 23;
break L11;
} else $$042$be = $39;
break;
}
default:
$$042$be = $$04248 + 1 | 0;
}
if (($$042$be | 0) == ($2 | 0)) {
$$0 = -1;
label = 28;
break;
} else $$04248 = $$042$be;
}
if ((label | 0) == 9) {
HEAP32[$3 >> 2] = $$04248;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 13) {
HEAP32[$3 >> 2] = $$04248;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 17) {
HEAP32[$3 >> 2] = $$04248;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 19) {
HEAP32[$3 >> 2] = $$04248;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 23) {
$44 = $$04248 + 2 | 0;
if (($44 | 0) == ($2 | 0)) {
$$0 = -1;
return $$0 | 0;
}
if ((HEAP8[$44 >> 0] | 0) == 62) {
HEAP32[$3 >> 2] = $$04248 + 3;
$$0 = 13;
return $$0 | 0;
} else {
HEAP32[$3 >> 2] = $44;
$$0 = 0;
return $$0 | 0;
}
} else if ((label | 0) == 28) return $$0 | 0;
return 0;
}
function __ZNK13WristMovement5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $10 = 0, $16 = 0, $22 = 0.0, $23 = 0, $29 = 0.0, $30 = 0, $36 = 0.0, $37 = 0, $4 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer15 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 80 | 0;
$vararg_buffer15 = sp + 56 | 0;
$vararg_buffer11 = sp + 40 | 0;
$vararg_buffer7 = sp + 24 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
HEAP32[$vararg_buffer >> 2] = $0;
_fprintf($1, 38597, $vararg_buffer) | 0;
__ZNK13BasicMovement5printEP8_IO_FILE($0, $1);
$4 = $0 + 528 | 0;
if (HEAP32[$4 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(38616, 11, 1, $1) | 0;
HEAP32[$vararg_buffer1 >> 2] = HEAP32[$4 >> 2];
_fprintf($1, 35092, $vararg_buffer1) | 0;
}
$10 = $0 + 532 | 0;
if (HEAP32[$10 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(36882, 9, 1, $1) | 0;
HEAP32[$vararg_buffer4 >> 2] = HEAP32[$10 >> 2];
_fprintf($1, 35092, $vararg_buffer4) | 0;
}
$16 = $0 + 536 | 0;
if (Math_fround(HEAPF32[$16 >> 2]) != Math_fround(0.0)) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$22 = +Math_fround(HEAPF32[$16 >> 2]);
HEAP32[$vararg_buffer7 >> 2] = 3;
HEAPF64[$vararg_buffer7 + 8 >> 3] = $22;
_fprintf($1, 38628, $vararg_buffer7) | 0;
}
$23 = $0 + 540 | 0;
if (Math_fround(HEAPF32[$23 >> 2]) != Math_fround(0.0)) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$29 = +Math_fround(HEAPF32[$23 >> 2]);
HEAP32[$vararg_buffer11 >> 2] = 3;
HEAPF64[$vararg_buffer11 + 8 >> 3] = $29;
_fprintf($1, 38649, $vararg_buffer11) | 0;
}
$30 = $0 + 544 | 0;
if (Math_fround(HEAPF32[$30 >> 2]) != Math_fround(0.0)) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$36 = +Math_fround(HEAPF32[$30 >> 2]);
HEAP32[$vararg_buffer15 >> 2] = 3;
HEAPF64[$vararg_buffer15 + 8 >> 3] = $36;
_fprintf($1, 38670, $vararg_buffer15) | 0;
}
$37 = $0 + 548 | 0;
if (!(Math_fround(HEAPF32[$37 >> 2]) != Math_fround(0.0))) if (!(Math_fround(HEAPF32[$0 + 552 >> 2]) != Math_fround(0.0))) if (!(Math_fround(HEAPF32[$0 + 556 >> 2]) != Math_fround(0.0))) {
STACKTOP = sp;
return;
}
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(37118, 9, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($37, $1, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
STACKTOP = sp;
return;
}
function _little2_charRefNumber($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$040 = 0, $$040$ph = 0, $$042$ph = 0, $$141 = 0, $$143 = 0, $$244 = 0, $$345 = 0, $$4 = 0, $12 = 0, $14 = 0, $2 = 0, $30 = 0, $36 = 0, label = 0;
$2 = $1 + 4 | 0;
L1 : do if (!(HEAP8[$1 + 5 >> 0] | 0)) if ((HEAP8[$2 >> 0] | 0) == 120) {
$$040$ph = $1 + 6 | 0;
$$042$ph = 0;
while (1) {
$$040 = $$040$ph;
L6 : while (1) {
if (!(HEAP8[$$040 + 1 >> 0] | 0)) {
$12 = HEAP8[$$040 >> 0] | 0;
if ($12 << 24 >> 24 == 59) {
$$345 = $$042$ph;
break L1;
}
$14 = $12 << 24 >> 24;
switch ($14 | 0) {
case 57:
case 56:
case 55:
case 54:
case 53:
case 52:
case 51:
case 50:
case 49:
case 48:
{
label = 8;
break L6;
break;
}
case 70:
case 69:
case 68:
case 67:
case 66:
case 65:
{
label = 9;
break L6;
break;
}
case 102:
case 101:
case 100:
case 99:
case 98:
case 97:
{
label = 10;
break L6;
break;
}
default:
{}
}
}
$$040 = $$040 + 2 | 0;
}
if ((label | 0) == 8) {
label = 0;
$$143 = $14 + -48 | $$042$ph << 4;
} else if ((label | 0) == 9) {
label = 0;
$$143 = ($$042$ph << 4) + -55 + $14 | 0;
} else if ((label | 0) == 10) {
label = 0;
$$143 = ($$042$ph << 4) + -87 + $14 | 0;
}
if (($$143 | 0) < 1114112) {
$$040$ph = $$040 + 2 | 0;
$$042$ph = $$143;
} else {
$$4 = -1;
break;
}
}
return $$4 | 0;
} else {
$$141 = $2;
$$244 = 0;
label = 13;
} else {
$$141 = $2;
$$244 = 0;
label = 13;
} while (0);
L18 : do if ((label | 0) == 13) {
while (1) {
label = 0;
if (!(HEAP8[$$141 + 1 >> 0] | 0)) {
$30 = HEAP8[$$141 >> 0] | 0;
if ($30 << 24 >> 24 == 59) {
$$345 = $$244;
break L18;
}
$36 = $30 << 24 >> 24;
} else $36 = -1;
$$244 = ($$244 * 10 | 0) + -48 + $36 | 0;
if (($$244 | 0) >= 1114112) {
$$4 = -1;
break;
} else {
$$141 = $$141 + 2 | 0;
label = 13;
}
}
return $$4 | 0;
} while (0);
switch ($$345 >> 8 | 0) {
case 0:
{
if (!(HEAP8[3704 + $$345 >> 0] | 0)) {
$$4 = -1;
return $$4 | 0;
}
break;
}
case 255:
{
if (($$345 | 1 | 0) == 65535) {
$$4 = -1;
return $$4 | 0;
}
break;
}
case 223:
case 222:
case 221:
case 220:
case 219:
case 218:
case 217:
case 216:
{
$$4 = -1;
return $$4 | 0;
}
default:
{}
}
$$4 = $$345;
return $$4 | 0;
}
function __ZN16CompoundMovementC2EPKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$01719 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $20 = 0, $25 = 0, $26 = 0, $30 = 0, $35 = 0, $42 = 0, $44 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $8 = 0, $9 = 0, label = 0;
HEAP32[$0 >> 2] = 1984;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 16 >> 2] = 0;
HEAP8[$0 + 20 >> 0] = 0;
__ZN25TwoHConcretePostureChangeC2Ev($0 + 60 | 0);
HEAP32[$0 >> 2] = 2972;
$8 = $0 + 528 | 0;
$9 = $0 + 532 | 0;
HEAP32[$9 >> 2] = 10;
$10 = $0 + 540 | 0;
HEAP32[$10 >> 2] = 0;
HEAP32[$8 >> 2] = 0;
$11 = $0 + 536 | 0;
HEAP32[$11 >> 2] = 0;
_memcpy($0 + 4 | 0, $1 + 4 | 0, 524) | 0;
$12 = $1 + 528 | 0;
HEAP32[$8 >> 2] = HEAP32[$12 >> 2];
HEAP32[$8 + 4 >> 2] = HEAP32[$12 + 4 >> 2];
HEAP32[$8 + 8 >> 2] = HEAP32[$12 + 8 >> 2];
HEAP32[$8 + 12 >> 2] = HEAP32[$12 + 12 >> 2];
$13 = $1 + 540 | 0;
$14 = HEAP32[$13 >> 2] | 0;
if (($14 | 0) <= 0) return;
$$01719 = 0;
$17 = $14;
while (1) {
if (($17 | 0) > ($$01719 | 0)) {
$20 = HEAP32[(HEAP32[$12 >> 2] | 0) + ($$01719 << 2) >> 2] | 0;
if (!$20) $48 = $17; else {
__THREW__ = 0;
$25 = invoke_ii(HEAP32[(HEAP32[$20 >> 2] | 0) + 8 >> 2] | 0, $20 | 0) | 0;
$26 = __THREW__;
__THREW__ = 0;
if ($26 & 1) break;
if ((HEAP32[$11 >> 2] | 0) <= ($$01719 | 0)) {
$30 = HEAP32[$9 >> 2] | 0;
__THREW__ = 0;
invoke_vii(167, $8 | 0, (($30 | 0) > ($$01719 | 0) ? $30 : $$01719 + 1 + ($$01719 >>> 1) | 0) | 0);
$35 = __THREW__;
__THREW__ = 0;
if ($35 & 1) break;
}
if ((HEAP32[$10 >> 2] | 0) <= ($$01719 | 0)) HEAP32[$10 >> 2] = $$01719 + 1;
HEAP32[(HEAP32[$8 >> 2] | 0) + ($$01719 << 2) >> 2] = $25;
$48 = HEAP32[$13 >> 2] | 0;
}
} else $48 = $17;
$$01719 = $$01719 + 1 | 0;
if (($$01719 | 0) >= ($48 | 0)) {
label = 3;
break;
} else $17 = $48;
}
if ((label | 0) == 3) return;
$42 = ___cxa_find_matching_catch_2() | 0;
$44 = HEAP32[$8 >> 2] | 0;
if (!$44) {
HEAP32[$10 >> 2] = 0;
HEAP32[$11 >> 2] = 0;
HEAP32[$0 >> 2] = 1984;
$49 = $0 + 452 | 0;
HEAP32[$49 >> 2] = 0;
$50 = $0 + 340 | 0;
HEAP32[$50 >> 2] = 0;
$51 = $0 + 228 | 0;
HEAP32[$51 >> 2] = 0;
$52 = $0 + 116 | 0;
HEAP32[$52 >> 2] = 0;
___resumeException($42 | 0);
}
_free($44);
HEAP32[$8 >> 2] = 0;
HEAP32[$10 >> 2] = 0;
HEAP32[$11 >> 2] = 0;
HEAP32[$0 >> 2] = 1984;
$49 = $0 + 452 | 0;
HEAP32[$49 >> 2] = 0;
$50 = $0 + 340 | 0;
HEAP32[$50 >> 2] = 0;
$51 = $0 + 228 | 0;
HEAP32[$51 >> 2] = 0;
$52 = $0 + 116 | 0;
HEAP32[$52 >> 2] = 0;
___resumeException($42 | 0);
}
function __ZNK11OneHGesture5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $16 = 0, $19 = 0, $27 = 0, $42 = 0, $5 = 0, $61 = 0, $7 = 0, label = 0;
if (!$1) return;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$5 = $0 + 4 | 0;
$7 = HEAP32[16607] | 0;
if (!(($7 ^ HEAP32[$5 >> 2]) & 16777215)) $19 = $7; else {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(49379, 23, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK10SiteIDPair5printEP8_IO_FILE($5, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
$19 = HEAP32[16607] | 0;
}
$16 = $0 + 16 | 0;
if (($19 ^ HEAP32[$16 >> 2]) & 16777215 | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(49403, 21, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6SiteID5printEP8_IO_FILE($16, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$27 = $0 + 20 | 0;
if (Math_fround(HEAPF32[$27 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 24 >> 2]) == Math_fround(0.0)) {
if (!(Math_fround(HEAPF32[$0 + 28 >> 2]) == Math_fround(0.0))) label = 9;
} else label = 9; else label = 9;
if ((label | 0) == 9) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(49425, 21, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK10Direction35printEP8_IO_FILE($27, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$42 = $0 + 32 | 0;
if (Math_fround(HEAPF32[$42 >> 2]) == Math_fround(0.0)) {
if (!(Math_fround(HEAPF32[$0 + 36 >> 2]) == Math_fround(0.0))) label = 12;
} else label = 12;
if ((label | 0) == 12) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(49447, 19, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK10Direction25printEP8_IO_FILE($42, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(49467, 30, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK17ElbowDisplacement5printEP8_IO_FILE($0 + 60 | 0, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
$61 = $0 + 56 | 0;
if (!(HEAP32[$61 >> 2] | 0)) return;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(49498, 22, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK9Handshape5printEP8_IO_FILE(HEAP32[$61 >> 2] | 0, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
return;
}
function __ZNK10Quaternion12rotateVectorER6Vector($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $10 = f0, $11 = f0, $12 = f0, $13 = 0, $15 = 0, $17 = 0, $2 = 0, $21 = f0, $22 = f0, $23 = f0, $25 = f0, $26 = f0, $3 = f0, $30 = f0, $37 = f0, $4 = 0, $44 = f0, $5 = f0, $52 = f0, $53 = f0, $54 = f0, $55 = f0, $57 = f0, $58 = f0, $6 = 0, $60 = f0, $61 = f0, $7 = f0, $8 = 0, $9 = f0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
$3 = Math_fround(HEAPF32[$0 >> 2]);
$4 = $0 + 4 | 0;
$5 = Math_fround(HEAPF32[$4 >> 2]);
$6 = $0 + 8 | 0;
$7 = Math_fround(HEAPF32[$6 >> 2]);
$8 = $0 + 12 | 0;
$9 = Math_fround(HEAPF32[$8 >> 2]);
$10 = Math_fround(-$3);
$11 = Math_fround(-$5);
$12 = Math_fround(-$7);
$13 = HEAP32[$1 >> 2] | 0;
$15 = HEAP32[$1 + 4 >> 2] | 0;
$17 = HEAP32[$1 + 8 >> 2] | 0;
HEAP32[$2 >> 2] = $13;
HEAP32[$2 + 4 >> 2] = $15;
HEAP32[$2 + 8 >> 2] = $17;
HEAPF32[$2 + 12 >> 2] = Math_fround(0.0);
__ZNK10Quaternion14checkValidQuatEv($2);
__ZNK10Quaternion14checkValidQuatEv($2);
$21 = (HEAP32[tempDoublePtr >> 2] = $15, Math_fround(HEAPF32[tempDoublePtr >> 2]));
$22 = Math_fround($21 * $12);
$23 = (HEAP32[tempDoublePtr >> 2] = $17, Math_fround(HEAPF32[tempDoublePtr >> 2]));
$25 = Math_fround($22 - Math_fround($23 * $11));
$26 = (HEAP32[tempDoublePtr >> 2] = $13, Math_fround(HEAPF32[tempDoublePtr >> 2]));
$30 = Math_fround(Math_fround($25 + Math_fround($9 * $26)) + Math_fround($3 * Math_fround(-0.0)));
$37 = Math_fround(Math_fround($5 * Math_fround(-0.0)) + Math_fround(Math_fround($9 * $21) + Math_fround(Math_fround($23 * $10) - Math_fround($26 * $12))));
$44 = Math_fround(Math_fround($7 * Math_fround(-0.0)) + Math_fround(Math_fround($9 * $23) + Math_fround(Math_fround($26 * $11) - Math_fround($21 * $10))));
$52 = Math_fround(Math_fround($9 * Math_fround(0.0)) + Math_fround(Math_fround(Math_fround(-Math_fround($26 * $10)) - Math_fround($21 * $11)) - Math_fround($23 * $12)));
$53 = Math_fround(HEAPF32[$4 >> 2]);
$54 = Math_fround($44 * $53);
$55 = Math_fround(HEAPF32[$6 >> 2]);
$57 = Math_fround($54 - Math_fround($37 * $55));
$58 = Math_fround(HEAPF32[$0 >> 2]);
$60 = Math_fround($57 + Math_fround($52 * $58));
$61 = Math_fround(HEAPF32[$8 >> 2]);
__ZN6Vector7setFromEfff($1, Math_fround($60 + Math_fround($61 * $30)), Math_fround(Math_fround($37 * $61) + Math_fround(Math_fround($52 * $53) + Math_fround(Math_fround($55 * $30) - Math_fround($44 * $58)))), Math_fround(Math_fround($44 * $61) + Math_fround(Math_fround($52 * $55) + Math_fround(Math_fround($37 * $58) - Math_fround($53 * $30)))));
STACKTOP = sp;
return;
}
function _little2_attributeValueTok($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$05061 = 0, $$sink = 0, $18 = 0, $27 = 0, $30 = 0, $5 = 0, label = 0;
if (($1 | 0) == ($2 | 0)) {
$$0 = -4;
return $$0 | 0;
}
$5 = $0 + 72 | 0;
$$05061 = $1;
L4 : while (1) {
L6 : do switch (HEAP8[$$05061 + 1 >> 0] | 0) {
case 0:
{
switch (HEAP8[$5 + (HEAPU8[$$05061 >> 0] | 0) >> 0] | 0) {
case 3:
{
label = 7;
break L4;
break;
}
case 2:
{
label = 10;
break L4;
break;
}
case 10:
{
label = 11;
break L4;
break;
}
case 9:
{
label = 14;
break L4;
break;
}
case 21:
{
label = 20;
break L4;
break;
}
case 6:
{
$$sink = 3;
break L6;
break;
}
case 7:
{
label = 6;
break L6;
break;
}
case 5:
break;
default:
{
label = 23;
break L6;
}
}
$$sink = 2;
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 6;
break;
}
default:
label = 23;
} while (0);
if ((label | 0) == 6) {
label = 0;
$$sink = 4;
} else if ((label | 0) == 23) {
label = 0;
$$sink = 2;
}
$30 = $$05061 + $$sink | 0;
if (($30 | 0) == ($2 | 0)) {
label = 25;
break;
} else $$05061 = $30;
}
if ((label | 0) == 7) if (($$05061 | 0) == ($1 | 0)) {
$$0 = _little2_scanRef($0, $1 + 2 | 0, $2, $3) | 0;
return $$0 | 0;
} else {
HEAP32[$3 >> 2] = $$05061;
$$0 = 6;
return $$0 | 0;
} else if ((label | 0) == 10) {
HEAP32[$3 >> 2] = $$05061;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 11) if (($$05061 | 0) == ($1 | 0)) {
HEAP32[$3 >> 2] = $1 + 2;
$$0 = 7;
return $$0 | 0;
} else {
HEAP32[$3 >> 2] = $$05061;
$$0 = 6;
return $$0 | 0;
} else if ((label | 0) == 14) {
if (($$05061 | 0) != ($1 | 0)) {
HEAP32[$3 >> 2] = $$05061;
$$0 = 6;
return $$0 | 0;
}
$18 = $1 + 2 | 0;
if (($18 | 0) == ($2 | 0)) {
$$0 = -3;
return $$0 | 0;
}
if (!(HEAP8[$1 + 3 >> 0] | 0)) $27 = (HEAP8[$5 + (HEAPU8[$18 >> 0] | 0) >> 0] | 0) == 10 ? $1 + 4 | 0 : $18; else $27 = $18;
HEAP32[$3 >> 2] = $27;
$$0 = 7;
return $$0 | 0;
} else if ((label | 0) == 20) if (($$05061 | 0) == ($1 | 0)) {
HEAP32[$3 >> 2] = $1 + 2;
$$0 = 39;
return $$0 | 0;
} else {
HEAP32[$3 >> 2] = $$05061;
$$0 = 6;
return $$0 | 0;
} else if ((label | 0) == 25) {
HEAP32[$3 >> 2] = $2;
$$0 = 6;
return $$0 | 0;
}
return 0;
}
function __ZN12ExpatWrapper9ParseFileEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$020 = 0, $$09$i = 0, $$2 = 0, $$224 = 0, $$pre = 0, $10 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $37 = 0, $39 = 0, $41 = 0, $43 = 0, $44 = 0, $46 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 8208 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$2 = sp + 16 | 0;
$3 = __Znwj(16) | 0;
HEAP32[$3 + 4 >> 2] = 10;
HEAP32[$3 + 12 >> 2] = 0;
HEAP32[$3 >> 2] = 0;
HEAP32[$3 + 8 >> 2] = 0;
$7 = $0 + 28 | 0;
HEAP32[$7 >> 2] = $3;
$8 = $0 + 24 | 0;
$$020 = 0;
while (1) {
if ($$020 | 0) {
$$224 = 0;
break;
}
$10 = _fread($2, 1, 8192, $1) | 0;
if (_ferror($1) | 0) {
label = 4;
break;
}
$$020 = _feof($1) | 0;
if (!(_XML_Parse(HEAP32[$8 >> 2] | 0, $2, $10, $$020) | 0)) {
label = 6;
break;
}
}
if ((label | 0) == 4) {
__Z7eprintfPKcz(53969, $vararg_buffer);
$$2 = 2;
STACKTOP = sp;
return $$2 | 0;
} else if ((label | 0) == 6) {
$18 = _XML_GetCurrentLineNumber(HEAP32[$8 >> 2] | 0) | 0;
$21 = _XML_ErrorString(_XML_GetErrorCode(HEAP32[$8 >> 2] | 0) | 0) | 0;
HEAP32[$vararg_buffer1 >> 2] = $18;
HEAP32[$vararg_buffer1 + 4 >> 2] = $21;
__Z7eprintfPKcz(53940, $vararg_buffer1);
$$224 = 3;
}
_fclose($1) | 0;
$22 = HEAP32[$7 >> 2] | 0;
if (!$22) {
$$2 = $$224;
STACKTOP = sp;
return $$2 | 0;
}
$24 = HEAP32[$22 >> 2] | 0;
if (!$24) $44 = $22; else {
$26 = $22 + 12 | 0;
$27 = HEAP32[$26 >> 2] | 0;
if (($27 | 0) > 0) {
$$09$i = 0;
$30 = $24;
$46 = $27;
while (1) {
$31 = HEAP32[$30 + ($$09$i << 2) >> 2] | 0;
if (!$31) $41 = $46; else {
__THREW__ = 0;
invoke_vi(151, $31 | 0);
$33 = __THREW__;
__THREW__ = 0;
if ($33 & 1) {
label = 13;
break;
}
__ZdlPv($31);
HEAP32[(HEAP32[$22 >> 2] | 0) + ($$09$i << 2) >> 2] = 0;
$41 = HEAP32[$26 >> 2] | 0;
}
$39 = $$09$i + 1 | 0;
if (($39 | 0) >= ($41 | 0)) break;
$$09$i = $39;
$30 = HEAP32[$22 >> 2] | 0;
$46 = $41;
}
if ((label | 0) == 13) {
$37 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($31);
___resumeException($37 | 0);
}
$$pre = HEAP32[$7 >> 2] | 0;
if (!$$pre) {
$$2 = $$224;
STACKTOP = sp;
return $$2 | 0;
} else $44 = $$pre;
} else $44 = $22;
}
$43 = HEAP32[$44 >> 2] | 0;
if ($43 | 0) _free($43);
__ZdlPv($44);
HEAP32[$7 >> 2] = 0;
$$2 = $$224;
STACKTOP = sp;
return $$2 | 0;
}
function _big2_attributeValueTok($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$05061 = 0, $$sink = 0, $18 = 0, $27 = 0, $30 = 0, $5 = 0, label = 0;
if (($1 | 0) == ($2 | 0)) {
$$0 = -4;
return $$0 | 0;
}
$5 = $0 + 72 | 0;
$$05061 = $1;
L4 : while (1) {
L6 : do switch (HEAP8[$$05061 >> 0] | 0) {
case 0:
{
switch (HEAP8[$5 + (HEAPU8[$$05061 + 1 >> 0] | 0) >> 0] | 0) {
case 3:
{
label = 7;
break L4;
break;
}
case 2:
{
label = 10;
break L4;
break;
}
case 10:
{
label = 11;
break L4;
break;
}
case 9:
{
label = 14;
break L4;
break;
}
case 21:
{
label = 20;
break L4;
break;
}
case 6:
{
$$sink = 3;
break L6;
break;
}
case 7:
{
label = 6;
break L6;
break;
}
case 5:
break;
default:
{
label = 23;
break L6;
}
}
$$sink = 2;
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 6;
break;
}
default:
label = 23;
} while (0);
if ((label | 0) == 6) {
label = 0;
$$sink = 4;
} else if ((label | 0) == 23) {
label = 0;
$$sink = 2;
}
$30 = $$05061 + $$sink | 0;
if (($30 | 0) == ($2 | 0)) {
label = 25;
break;
} else $$05061 = $30;
}
if ((label | 0) == 7) if (($$05061 | 0) == ($1 | 0)) {
$$0 = _big2_scanRef($0, $1 + 2 | 0, $2, $3) | 0;
return $$0 | 0;
} else {
HEAP32[$3 >> 2] = $$05061;
$$0 = 6;
return $$0 | 0;
} else if ((label | 0) == 10) {
HEAP32[$3 >> 2] = $$05061;
$$0 = 0;
return $$0 | 0;
} else if ((label | 0) == 11) if (($$05061 | 0) == ($1 | 0)) {
HEAP32[$3 >> 2] = $1 + 2;
$$0 = 7;
return $$0 | 0;
} else {
HEAP32[$3 >> 2] = $$05061;
$$0 = 6;
return $$0 | 0;
} else if ((label | 0) == 14) {
if (($$05061 | 0) != ($1 | 0)) {
HEAP32[$3 >> 2] = $$05061;
$$0 = 6;
return $$0 | 0;
}
$18 = $1 + 2 | 0;
if (($18 | 0) == ($2 | 0)) {
$$0 = -3;
return $$0 | 0;
}
if (!(HEAP8[$18 >> 0] | 0)) $27 = (HEAP8[$5 + (HEAPU8[$1 + 3 >> 0] | 0) >> 0] | 0) == 10 ? $1 + 4 | 0 : $18; else $27 = $18;
HEAP32[$3 >> 2] = $27;
$$0 = 7;
return $$0 | 0;
} else if ((label | 0) == 20) if (($$05061 | 0) == ($1 | 0)) {
HEAP32[$3 >> 2] = $1 + 2;
$$0 = 39;
return $$0 | 0;
} else {
HEAP32[$3 >> 2] = $$05061;
$$0 = 6;
return $$0 | 0;
} else if ((label | 0) == 25) {
HEAP32[$3 >> 2] = $2;
$$0 = 6;
return $$0 | 0;
}
return 0;
}
function __ZNK14SiGMLHandshape7definedEv($0) {
$0 = $0 | 0;
var $78 = 0;
if (HEAP32[$0 >> 2] | 0) {
$78 = 1;
return $78 | 0;
}
if (Math_fround(HEAPF32[$0 + 12 >> 2]) != Math_fround(-100.0)) {
$78 = 1;
return $78 | 0;
}
if (Math_fround(HEAPF32[$0 + 16 >> 2]) != Math_fround(-100.0)) {
$78 = 1;
return $78 | 0;
}
if (Math_fround(HEAPF32[$0 + 20 >> 2]) != Math_fround(-100.0)) {
$78 = 1;
return $78 | 0;
}
if (Math_fround(HEAPF32[$0 + 24 >> 2]) != Math_fround(-100.0)) {
$78 = 1;
return $78 | 0;
}
if (Math_fround(HEAPF32[$0 + 160 >> 2]) != Math_fround(-100.0)) {
$78 = 1;
return $78 | 0;
}
if (Math_fround(HEAPF32[$0 + 164 >> 2]) != Math_fround(-100.0)) {
$78 = 1;
return $78 | 0;
}
if (Math_fround(HEAPF32[$0 + 168 >> 2]) != Math_fround(-100.0)) {
$78 = 1;
return $78 | 0;
}
if (Math_fround(HEAPF32[$0 + 172 >> 2]) != Math_fround(-100.0)) {
$78 = 1;
return $78 | 0;
}
if (Math_fround(HEAPF32[$0 + 176 >> 2]) != Math_fround(-100.0)) {
$78 = 1;
return $78 | 0;
}
if (Math_fround(HEAPF32[$0 + 96 >> 2]) != Math_fround(-100.0)) {
$78 = 1;
return $78 | 0;
}
if (Math_fround(HEAPF32[$0 + 100 >> 2]) != Math_fround(-100.0)) {
$78 = 1;
return $78 | 0;
}
if (Math_fround(HEAPF32[$0 + 104 >> 2]) != Math_fround(-100.0)) {
$78 = 1;
return $78 | 0;
}
if (Math_fround(HEAPF32[$0 + 108 >> 2]) != Math_fround(-100.0)) {
$78 = 1;
return $78 | 0;
}
if (Math_fround(HEAPF32[$0 + 112 >> 2]) != Math_fround(-100.0)) {
$78 = 1;
return $78 | 0;
}
if (Math_fround(HEAPF32[$0 + 116 >> 2]) != Math_fround(-100.0)) {
$78 = 1;
return $78 | 0;
}
if (Math_fround(HEAPF32[$0 + 120 >> 2]) != Math_fround(-100.0)) {
$78 = 1;
return $78 | 0;
}
if (Math_fround(HEAPF32[$0 + 124 >> 2]) != Math_fround(-100.0)) {
$78 = 1;
return $78 | 0;
}
if (Math_fround(HEAPF32[$0 + 128 >> 2]) != Math_fround(-100.0)) {
$78 = 1;
return $78 | 0;
}
if (Math_fround(HEAPF32[$0 + 132 >> 2]) != Math_fround(-100.0)) {
$78 = 1;
return $78 | 0;
}
if (Math_fround(HEAPF32[$0 + 136 >> 2]) != Math_fround(-100.0)) {
$78 = 1;
return $78 | 0;
}
if (Math_fround(HEAPF32[$0 + 140 >> 2]) != Math_fround(-100.0)) {
$78 = 1;
return $78 | 0;
}
if (Math_fround(HEAPF32[$0 + 144 >> 2]) != Math_fround(-100.0)) {
$78 = 1;
return $78 | 0;
}
if (Math_fround(HEAPF32[$0 + 148 >> 2]) != Math_fround(-100.0)) {
$78 = 1;
return $78 | 0;
}
if (Math_fround(HEAPF32[$0 + 152 >> 2]) != Math_fround(-100.0)) {
$78 = 1;
return $78 | 0;
}
$78 = Math_fround(HEAPF32[$0 + 156 >> 2]) != Math_fround(-100.0);
return $78 | 0;
}
function __ZN11HanimAvatar23initialiseStaticArmDataEv($0) {
$0 = $0 | 0;
var $1 = 0, $10 = 0, $13 = 0, $14 = f0, $15 = 0, $16 = f0, $18 = f0, $19 = f0, $2 = 0, $21 = 0, $23 = f0, $3 = 0, $31 = f0, $35 = f0, $38 = 0, $4 = 0, $41 = 0, $44 = 0, $47 = 0, $48 = f0, $49 = 0, $50 = f0, $52 = f0, $53 = f0, $56 = f0, $64 = f0, $68 = f0, $7 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$1 = sp + 12 | 0;
$2 = sp;
HEAP8[$0 >> 0] = 0;
$3 = $0 + 72 | 0;
$4 = HEAP32[$3 >> 2] | 0;
$7 = (HEAP32[$4 + 24 >> 2] | 0) + 68 | 0;
$10 = (HEAP32[$4 + 28 >> 2] | 0) + 68 | 0;
$13 = (HEAP32[$4 + 32 >> 2] | 0) + 68 | 0;
__ZN6VectorC2EPKS_($1, $10);
__ZN6Vector11setSubtractERKS_($1, $7);
$14 = Math_fround(__ZNK6Vector6lengthEv($1));
$15 = $0 + 4 | 0;
HEAPF32[$15 >> 2] = $14;
__ZN6VectorC2EPKS_($2, $13);
__ZN6Vector7setFromERKS_($1, $2);
__ZN6Vector11setSubtractERKS_($1, $10);
$16 = Math_fround(__ZNK6Vector6lengthEv($1));
HEAPF32[$0 + 8 >> 2] = $16;
$18 = Math_fround(HEAPF32[$15 >> 2]);
$19 = Math_fround($18 / $16);
HEAPF32[$0 + 12 >> 2] = $19;
$21 = $0 + 228 | 0;
$23 = Math_fround(HEAPF32[HEAP32[$21 >> 2] >> 2]);
HEAPF32[$0 + 16 >> 2] = $23;
$31 = Math_fround(Math_fround(Math_fround($23 * $23) * Math_fround(.5)) / Math_fround(Math_fround($19 + Math_fround(1.0)) * Math_fround(Math_fround(Math_fround(1.0) / $19) + Math_fround(1.0))));
HEAPF32[$0 + 20 >> 2] = $31;
$35 = Math_fround(Math_fround($16 + $18) * Math_fround(Math_fround(1.0) - $31));
HEAPF32[$0 + 24 >> 2] = $35;
HEAP8[$0 + 28 >> 0] = 1;
$38 = HEAP32[$3 >> 2] | 0;
$41 = (HEAP32[$38 + 40 >> 2] | 0) + 68 | 0;
$44 = (HEAP32[$38 + 44 >> 2] | 0) + 68 | 0;
$47 = (HEAP32[$38 + 48 >> 2] | 0) + 68 | 0;
__ZN6VectorC2EPKS_($1, $44);
__ZN6Vector11setSubtractERKS_($1, $41);
$48 = Math_fround(__ZNK6Vector6lengthEv($1));
$49 = $0 + 32 | 0;
HEAPF32[$49 >> 2] = $48;
__ZN6VectorC2EPKS_($2, $47);
__ZN6Vector7setFromERKS_($1, $2);
__ZN6Vector11setSubtractERKS_($1, $44);
$50 = Math_fround(__ZNK6Vector6lengthEv($1));
HEAPF32[$0 + 36 >> 2] = $50;
$52 = Math_fround(HEAPF32[$49 >> 2]);
$53 = Math_fround($52 / $50);
HEAPF32[$0 + 40 >> 2] = $53;
$56 = Math_fround(HEAPF32[HEAP32[$21 >> 2] >> 2]);
HEAPF32[$0 + 44 >> 2] = $56;
$64 = Math_fround(Math_fround(Math_fround($56 * $56) * Math_fround(.5)) / Math_fround(Math_fround($53 + Math_fround(1.0)) * Math_fround(Math_fround(Math_fround(1.0) / $53) + Math_fround(1.0))));
HEAPF32[$0 + 48 >> 2] = $64;
$68 = Math_fround(Math_fround($50 + $52) * Math_fround(Math_fround(1.0) - $64));
HEAPF32[$0 + 52 >> 2] = $68;
STACKTOP = sp;
return;
}
function __Z26CopyNonmanualMovementArrayPP17NonmanualMovement($0) {
$0 = $0 | 0;
var $$sink1$7 = 0, $11 = 0, $15 = 0, $19 = 0, $2 = 0, $23 = 0, $27 = 0, $3 = 0, $31 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 80 | 0;
$vararg_buffer22 = sp + 64 | 0;
$vararg_buffer19 = sp + 56 | 0;
$vararg_buffer16 = sp + 48 | 0;
$vararg_buffer13 = sp + 40 | 0;
$vararg_buffer10 = sp + 32 | 0;
$vararg_buffer7 = sp + 24 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
if (0) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer >> 2] = $0;
__Z7eprintfPKcz(45669, $vararg_buffer);
}
$2 = __Znaj(32) | 0;
$3 = HEAP32[$0 >> 2] | 0;
if (!(($3 | 0) == 0 | 0 == 0)) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer1 >> 2] = $3;
__Z7eprintfPKcz(45703, $vararg_buffer1);
}
HEAP32[$2 >> 2] = 0;
$7 = HEAP32[$0 + 4 >> 2] | 0;
if (!(($7 | 0) == 0 | 0 == 0)) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer4 >> 2] = $7;
__Z7eprintfPKcz(45703, $vararg_buffer4);
}
HEAP32[$2 + 4 >> 2] = 0;
$11 = HEAP32[$0 + 8 >> 2] | 0;
if (!(($11 | 0) == 0 | 0 == 0)) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer7 >> 2] = $11;
__Z7eprintfPKcz(45703, $vararg_buffer7);
}
HEAP32[$2 + 8 >> 2] = 0;
$15 = HEAP32[$0 + 12 >> 2] | 0;
if (!(($15 | 0) == 0 | 0 == 0)) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer10 >> 2] = $15;
__Z7eprintfPKcz(45703, $vararg_buffer10);
}
HEAP32[$2 + 12 >> 2] = 0;
$19 = HEAP32[$0 + 16 >> 2] | 0;
if (!(($19 | 0) == 0 | 0 == 0)) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer13 >> 2] = $19;
__Z7eprintfPKcz(45703, $vararg_buffer13);
}
HEAP32[$2 + 16 >> 2] = 0;
$23 = HEAP32[$0 + 20 >> 2] | 0;
if (!(($23 | 0) == 0 | 0 == 0)) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer16 >> 2] = $23;
__Z7eprintfPKcz(45703, $vararg_buffer16);
}
HEAP32[$2 + 20 >> 2] = 0;
$27 = HEAP32[$0 + 24 >> 2] | 0;
if (!(($27 | 0) == 0 | 0 == 0)) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer19 >> 2] = $27;
__Z7eprintfPKcz(45703, $vararg_buffer19);
}
HEAP32[$2 + 24 >> 2] = 0;
$31 = HEAP32[$0 + 28 >> 2] | 0;
if (($31 | 0) == 0 | 0 == 0) {
$$sink1$7 = $2 + 28 | 0;
HEAP32[$$sink1$7 >> 2] = 0;
STACKTOP = sp;
return $2 | 0;
}
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer22 >> 2] = $31;
__Z7eprintfPKcz(45703, $vararg_buffer22);
$$sink1$7 = $2 + 28 | 0;
HEAP32[$$sink1$7 >> 2] = 0;
STACKTOP = sp;
return $2 | 0;
}
function __ZNK18FingerPlayMovement5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $10 = 0, $16 = 0, $22 = 0.0, $23 = 0, $29 = 0.0, $30 = 0, $36 = 0.0, $37 = 0, $4 = 0, $43 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer15 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 80 | 0;
$vararg_buffer15 = sp + 56 | 0;
$vararg_buffer11 = sp + 40 | 0;
$vararg_buffer7 = sp + 24 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
HEAP32[$vararg_buffer >> 2] = $0;
_fprintf($1, 38780, $vararg_buffer) | 0;
__ZNK13BasicMovement5printEP8_IO_FILE($0, $1);
$4 = $0 + 528 | 0;
if (HEAP32[$4 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(38804, 23, 1, $1) | 0;
HEAP32[$vararg_buffer1 >> 2] = HEAP32[$4 >> 2];
_fprintf($1, 35092, $vararg_buffer1) | 0;
}
$10 = $0 + 532 | 0;
if (HEAP32[$10 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(38828, 24, 1, $1) | 0;
HEAP32[$vararg_buffer4 >> 2] = HEAP32[$10 >> 2];
_fprintf($1, 35092, $vararg_buffer4) | 0;
}
$16 = $0 + 536 | 0;
if (Math_fround(HEAPF32[$16 >> 2]) != Math_fround(0.0)) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$22 = +Math_fround(HEAPF32[$16 >> 2]);
HEAP32[$vararg_buffer7 >> 2] = 3;
HEAPF64[$vararg_buffer7 + 8 >> 3] = $22;
_fprintf($1, 38628, $vararg_buffer7) | 0;
}
$23 = $0 + 540 | 0;
if (Math_fround(HEAPF32[$23 >> 2]) != Math_fround(0.0)) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$29 = +Math_fround(HEAPF32[$23 >> 2]);
HEAP32[$vararg_buffer11 >> 2] = 3;
HEAPF64[$vararg_buffer11 + 8 >> 3] = $29;
_fprintf($1, 38649, $vararg_buffer11) | 0;
}
$30 = $0 + 544 | 0;
if (Math_fround(HEAPF32[$30 >> 2]) != Math_fround(0.0)) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$36 = +Math_fround(HEAPF32[$30 >> 2]);
HEAP32[$vararg_buffer15 >> 2] = 3;
HEAPF64[$vararg_buffer15 + 8 >> 3] = $36;
_fprintf($1, 38670, $vararg_buffer15) | 0;
}
$37 = $0 + 548 | 0;
if (HEAP16[$37 >> 1] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(35779, 15, 1, $1) | 0;
__Z11printDigitsP8_IO_FILEs($1, HEAP16[$37 >> 1] | 0);
_fputc(10, $1) | 0;
}
$43 = $0 + 550 | 0;
if (!(HEAP16[$43 >> 1] | 0)) {
STACKTOP = sp;
return;
}
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(35795, 16, 1, $1) | 0;
__Z11printDigitsP8_IO_FILEs($1, HEAP16[$43 >> 1] | 0);
_fputc(10, $1) | 0;
STACKTOP = sp;
return;
}
function __ZNK10Quaternion15invRotateVectorERK6VectorRS0_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $10 = f0, $11 = f0, $12 = f0, $13 = f0, $14 = 0, $16 = 0, $18 = 0, $22 = f0, $23 = f0, $24 = f0, $25 = f0, $26 = f0, $28 = f0, $29 = f0, $3 = 0, $30 = f0, $32 = f0, $33 = f0, $35 = f0, $4 = f0, $42 = f0, $49 = f0, $5 = 0, $57 = f0, $6 = f0, $7 = 0, $8 = f0, $9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp;
$4 = Math_fround(HEAPF32[$0 >> 2]);
$5 = $0 + 4 | 0;
$6 = Math_fround(HEAPF32[$5 >> 2]);
$7 = $0 + 8 | 0;
$8 = Math_fround(HEAPF32[$7 >> 2]);
$9 = $0 + 12 | 0;
$10 = Math_fround(HEAPF32[$9 >> 2]);
$11 = Math_fround(-$4);
$12 = Math_fround(-$6);
$13 = Math_fround(-$8);
$14 = HEAP32[$1 >> 2] | 0;
$16 = HEAP32[$1 + 4 >> 2] | 0;
$18 = HEAP32[$1 + 8 >> 2] | 0;
HEAP32[$3 >> 2] = $14;
HEAP32[$3 + 4 >> 2] = $16;
HEAP32[$3 + 8 >> 2] = $18;
HEAPF32[$3 + 12 >> 2] = Math_fround(0.0);
__ZNK10Quaternion14checkValidQuatEv($3);
__ZNK10Quaternion14checkValidQuatEv($3);
$22 = (HEAP32[tempDoublePtr >> 2] = $16, Math_fround(HEAPF32[tempDoublePtr >> 2]));
$23 = Math_fround(HEAPF32[$7 >> 2]);
$24 = Math_fround($23 * $22);
$25 = (HEAP32[tempDoublePtr >> 2] = $18, Math_fround(HEAPF32[tempDoublePtr >> 2]));
$26 = Math_fround(HEAPF32[$5 >> 2]);
$28 = Math_fround($24 - Math_fround($26 * $25));
$29 = (HEAP32[tempDoublePtr >> 2] = $14, Math_fround(HEAPF32[tempDoublePtr >> 2]));
$30 = Math_fround(HEAPF32[$9 >> 2]);
$32 = Math_fround($28 + Math_fround($30 * $29));
$33 = Math_fround(HEAPF32[$0 >> 2]);
$35 = Math_fround($32 + Math_fround($33 * Math_fround(0.0)));
$42 = Math_fround(Math_fround($26 * Math_fround(0.0)) + Math_fround(Math_fround($30 * $22) + Math_fround(Math_fround($33 * $25) - Math_fround($23 * $29))));
$49 = Math_fround(Math_fround($23 * Math_fround(0.0)) + Math_fround(Math_fround($30 * $25) + Math_fround(Math_fround($26 * $29) - Math_fround($33 * $22))));
$57 = Math_fround(Math_fround($30 * Math_fround(0.0)) + Math_fround(Math_fround(Math_fround(-Math_fround($33 * $29)) - Math_fround($26 * $22)) - Math_fround($23 * $25)));
__ZN6Vector7setFromEfff($2, Math_fround(Math_fround($10 * $35) + Math_fround(Math_fround($57 * $11) + Math_fround(Math_fround($49 * $12) - Math_fround($42 * $13)))), Math_fround(Math_fround($10 * $42) + Math_fround(Math_fround($57 * $12) + Math_fround(Math_fround($35 * $13) - Math_fround($49 * $11)))), Math_fround(Math_fround($10 * $49) + Math_fround(Math_fround($57 * $13) + Math_fround(Math_fround($42 * $11) - Math_fround($35 * $12)))));
STACKTOP = sp;
return;
}
function __ZN19OneHConcretePosture14setInterpolateERKS_S1_PKfb($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $10 = 0, $11 = f0, $23 = 0, $24 = 0, $25 = 0, $29 = f0, $31 = 0, $32 = f0, $33 = 0, $35 = f0, $38 = f0, $41 = f0, $46 = f0, $5 = f0, $55 = 0.0, $57 = 0.0, $59 = 0.0, $6 = 0, $61 = 0.0, $63 = 0.0, $65 = 0.0, $7 = f0, $8 = 0, $9 = f0, $vararg_buffer = 0, dest = 0, sp = 0, src = 0, stop = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$vararg_buffer = sp;
$5 = Math_fround(HEAPF32[$3 >> 2]);
$6 = $3 + 4 | 0;
$7 = Math_fround(HEAPF32[$6 >> 2]);
$8 = $3 + 8 | 0;
$9 = Math_fround(HEAPF32[$8 >> 2]);
$10 = $3 + 12 | 0;
$11 = Math_fround(HEAPF32[$10 >> 2]);
__ZN6Vector11setMidPointERKS_S1_f($0 + 4 | 0, $1 + 4 | 0, $2 + 4 | 0, $5);
__ZN6Vector11setMidPointERKS_S1_f($0 + 16 | 0, $1 + 16 | 0, $2 + 16 | 0, $5);
__ZN6Vector11setMidPointERKS_S1_f($0 + 28 | 0, $1 + 28 | 0, $2 + 28 | 0, $5);
$23 = $0 + 40 | 0;
$24 = $1 + 40 | 0;
$25 = $2 + 40 | 0;
if (!(HEAP8[$0 >> 0] | 0)) __ZN10Quaternion9setSlerp1ERKS_S1_S1_f($23, $24, $25, 2112, $7); else __ZN10Quaternion9setSlerp1ERKS_S1_S1_f($23, $24, $25, 2096, $7);
HEAP32[$0 + 56 >> 2] = HEAP32[$2 + 56 >> 2];
$29 = $4 ? $9 : Math_fround(1.0);
HEAPF32[$0 + 60 >> 2] = $29;
$31 = $1 + 64 | 0;
$32 = Math_fround(HEAPF32[$31 >> 2]);
$33 = $2 + 64 | 0;
$35 = Math_fround(Math_fround(1.0) - $11);
$38 = Math_fround(Math_fround($35 * $32) + Math_fround($11 * Math_fround(HEAPF32[$33 >> 2])));
HEAPF32[$0 + 64 >> 2] = $38;
$41 = Math_fround(HEAPF32[$1 + 68 >> 2]);
$46 = Math_fround(Math_fround($35 * $41) + Math_fround($11 * Math_fround(HEAPF32[$2 + 68 >> 2])));
HEAPF32[$0 + 68 >> 2] = $46;
HEAP32[$0 + 72 >> 2] = HEAP32[$2 + 72 >> 2];
dest = $0 + 76 | 0;
src = $2 + 76 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
if (!0) {
STACKTOP = sp;
return;
}
$55 = +Math_fround(HEAPF32[$3 >> 2]);
$57 = +Math_fround(HEAPF32[$6 >> 2]);
$59 = +Math_fround(HEAPF32[$8 >> 2]);
$61 = +Math_fround(HEAPF32[$10 >> 2]);
$63 = +Math_fround(HEAPF32[$31 >> 2]);
$65 = +Math_fround(HEAPF32[$33 >> 2]);
HEAPF64[$vararg_buffer >> 3] = $55;
HEAPF64[$vararg_buffer + 8 >> 3] = $57;
HEAPF64[$vararg_buffer + 16 >> 3] = $59;
HEAPF64[$vararg_buffer + 24 >> 3] = $61;
HEAPF64[$vararg_buffer + 32 >> 3] = $63;
HEAPF64[$vararg_buffer + 40 >> 3] = $65;
HEAPF64[$vararg_buffer + 48 >> 3] = +$38;
__Z7eprintfPKcz(35965, $vararg_buffer);
STACKTOP = sp;
return;
}
function __ZNK10Quaternion15invRotateVectorER6Vector($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $10 = f0, $11 = f0, $12 = f0, $13 = 0, $15 = 0, $17 = 0, $2 = 0, $21 = f0, $22 = f0, $23 = f0, $24 = f0, $25 = f0, $27 = f0, $28 = f0, $29 = f0, $3 = f0, $31 = f0, $32 = f0, $34 = f0, $4 = 0, $41 = f0, $48 = f0, $5 = f0, $56 = f0, $6 = 0, $7 = f0, $8 = 0, $9 = f0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
$3 = Math_fround(HEAPF32[$0 >> 2]);
$4 = $0 + 4 | 0;
$5 = Math_fround(HEAPF32[$4 >> 2]);
$6 = $0 + 8 | 0;
$7 = Math_fround(HEAPF32[$6 >> 2]);
$8 = $0 + 12 | 0;
$9 = Math_fround(HEAPF32[$8 >> 2]);
$10 = Math_fround(-$3);
$11 = Math_fround(-$5);
$12 = Math_fround(-$7);
$13 = HEAP32[$1 >> 2] | 0;
$15 = HEAP32[$1 + 4 >> 2] | 0;
$17 = HEAP32[$1 + 8 >> 2] | 0;
HEAP32[$2 >> 2] = $13;
HEAP32[$2 + 4 >> 2] = $15;
HEAP32[$2 + 8 >> 2] = $17;
HEAPF32[$2 + 12 >> 2] = Math_fround(0.0);
__ZNK10Quaternion14checkValidQuatEv($2);
__ZNK10Quaternion14checkValidQuatEv($2);
$21 = (HEAP32[tempDoublePtr >> 2] = $15, Math_fround(HEAPF32[tempDoublePtr >> 2]));
$22 = Math_fround(HEAPF32[$6 >> 2]);
$23 = Math_fround($22 * $21);
$24 = (HEAP32[tempDoublePtr >> 2] = $17, Math_fround(HEAPF32[tempDoublePtr >> 2]));
$25 = Math_fround(HEAPF32[$4 >> 2]);
$27 = Math_fround($23 - Math_fround($25 * $24));
$28 = (HEAP32[tempDoublePtr >> 2] = $13, Math_fround(HEAPF32[tempDoublePtr >> 2]));
$29 = Math_fround(HEAPF32[$8 >> 2]);
$31 = Math_fround($27 + Math_fround($29 * $28));
$32 = Math_fround(HEAPF32[$0 >> 2]);
$34 = Math_fround($31 + Math_fround($32 * Math_fround(0.0)));
$41 = Math_fround(Math_fround($25 * Math_fround(0.0)) + Math_fround(Math_fround($29 * $21) + Math_fround(Math_fround($32 * $24) - Math_fround($22 * $28))));
$48 = Math_fround(Math_fround($22 * Math_fround(0.0)) + Math_fround(Math_fround($29 * $24) + Math_fround(Math_fround($25 * $28) - Math_fround($32 * $21))));
$56 = Math_fround(Math_fround($29 * Math_fround(0.0)) + Math_fround(Math_fround(Math_fround(-Math_fround($32 * $28)) - Math_fround($25 * $21)) - Math_fround($22 * $24)));
__ZN6Vector7setFromEfff($1, Math_fround(Math_fround($9 * $34) + Math_fround(Math_fround($56 * $10) + Math_fround(Math_fround($48 * $11) - Math_fround($41 * $12)))), Math_fround(Math_fround($9 * $41) + Math_fround(Math_fround($56 * $11) + Math_fround(Math_fround($34 * $12) - Math_fround($48 * $10)))), Math_fround(Math_fround($9 * $48) + Math_fround(Math_fround($56 * $12) + Math_fround(Math_fround($41 * $10) - Math_fround($34 * $11)))));
STACKTOP = sp;
return;
}
function __ZNK7Gesture19printSplitAbsTargetERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEbb($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $10 = 0, $23 = 0, $4 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$4 = sp;
if (!($2 | $3)) {
STACKTOP = sp;
return;
}
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
HEAP8[$4 >> 0] = 60;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $4, 1) | 0, 51336, 16) | 0, 36571, 2) | 0;
$10 = (HEAP16[36078] | 0) + 1 << 16 >> 16;
HEAP16[36078] = $10;
if ($2) __ZNK19OneHAbstractPosture18printLocationSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE(HEAP32[$0 + 20 >> 2] | 0, $1); else {
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, $10 << 16 >> 16);
HEAP8[$4 >> 0] = 60;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $4, 1) | 0, 51325, 10) | 0, 36603, 3) | 0;
}
if ($3) __ZNK19OneHAbstractPosture18printLocationSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE(HEAP32[$0 + 24 >> 2] | 0, $1); else {
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
HEAP8[$4 >> 0] = 60;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $4, 1) | 0, 51325, 10) | 0, 36603, 3) | 0;
}
$23 = (HEAP16[36078] | 0) + -1 << 16 >> 16;
HEAP16[36078] = $23;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, $23 << 16 >> 16);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36574, 2) | 0, 51336, 16) | 0, 36571, 2) | 0;
STACKTOP = sp;
return;
}
function __ZNK7Gesture19printSplitHandshapeERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEbb($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $10 = 0, $23 = 0, $4 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$4 = sp;
if (!($2 | $3)) {
STACKTOP = sp;
return;
}
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
HEAP8[$4 >> 0] = 60;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $4, 1) | 0, 51336, 16) | 0, 36571, 2) | 0;
$10 = (HEAP16[36078] | 0) + 1 << 16 >> 16;
HEAP16[36078] = $10;
if ($2) __ZNK19OneHAbstractPosture15printShapeSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE(HEAP32[$0 + 20 >> 2] | 0, $1); else {
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, $10 << 16 >> 16);
HEAP8[$4 >> 0] = 60;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $4, 1) | 0, 51325, 10) | 0, 36603, 3) | 0;
}
if ($3) __ZNK19OneHAbstractPosture15printShapeSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE(HEAP32[$0 + 24 >> 2] | 0, $1); else {
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
HEAP8[$4 >> 0] = 60;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $4, 1) | 0, 51325, 10) | 0, 36603, 3) | 0;
}
$23 = (HEAP16[36078] | 0) + -1 << 16 >> 16;
HEAP16[36078] = $23;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, $23 << 16 >> 16);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36574, 2) | 0, 51336, 16) | 0, 36571, 2) | 0;
STACKTOP = sp;
return;
}
function __ZNK13SplitMovement10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $10 = 0, $12 = 0, $2 = 0, $21 = 0, $31 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
HEAP8[$2 >> 0] = 60;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2, 1) | 0, 51438, 12) | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$0 >> 2] | 0) + 84 >> 2] & 127]($0, $1, 1);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36571, 2) | 0;
$10 = (HEAP16[36078] | 0) + 1 << 16 >> 16;
HEAP16[36078] = $10;
$12 = HEAP32[$0 + 528 >> 2] | 0;
if (!$12) {
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, $10 << 16 >> 16);
HEAP8[$2 >> 0] = 60;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2, 1) | 0, 51604, 8) | 0, 36603, 3) | 0;
} else FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 80 >> 2] & 255]($12, $1);
$21 = HEAP32[$0 + 532 >> 2] | 0;
if (!$21) {
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
HEAP8[$2 >> 0] = 60;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2, 1) | 0, 51604, 8) | 0, 36603, 3) | 0;
} else FUNCTION_TABLE_vii[HEAP32[(HEAP32[$21 >> 2] | 0) + 80 >> 2] & 255]($21, $1);
$31 = (HEAP16[36078] | 0) + -1 << 16 >> 16;
HEAP16[36078] = $31;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, $31 << 16 >> 16);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36574, 2) | 0, 51438, 12) | 0, 36571, 2) | 0;
STACKTOP = sp;
return;
}
function __ZN13DynamicArray1I15AtomicNonmanualE6resizeEi($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$020 = 0, $$024$i = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
$3 = HEAP32[$0 >> 2] | 0;
if ($3 | 0) {
_free($3);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
STACKTOP = sp;
return;
}
$7 = $0 + 8 | 0;
$8 = HEAP32[$7 >> 2] | 0;
if (($8 | 0) == ($1 | 0)) {
STACKTOP = sp;
return;
}
$11 = _malloc($1 * 28 | 0) | 0;
if (!$11) if (($8 | 0) < ($1 | 0)) {
HEAP32[$vararg_buffer >> 2] = $8;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
__Z7eprintfPKcz(47403, $vararg_buffer);
$14 = ___cxa_allocate_exception(4) | 0;
HEAP32[$14 >> 2] = 1;
___cxa_throw($14 | 0, 32, 0);
} else {
STACKTOP = sp;
return;
}
$15 = $0 + 12 | 0;
$16 = HEAP32[$15 >> 2] | 0;
if (($16 | 0) > ($1 | 0)) {
HEAP32[$15 >> 2] = $1;
$19 = $1;
} else $19 = $16;
$20 = HEAP32[$0 >> 2] | 0;
if (($19 | 0) > 0) {
$$020 = 0;
do {
$22 = $20 + ($$020 * 28 | 0) | 0;
$23 = $11 + ($$020 * 28 | 0) | 0;
HEAP32[$23 >> 2] = HEAP32[$22 >> 2];
HEAP32[$23 + 4 >> 2] = HEAP32[$22 + 4 >> 2];
HEAP32[$23 + 8 >> 2] = HEAP32[$22 + 8 >> 2];
HEAP32[$23 + 12 >> 2] = HEAP32[$22 + 12 >> 2];
HEAP32[$23 + 16 >> 2] = HEAP32[$22 + 16 >> 2];
HEAP32[$23 + 20 >> 2] = HEAP32[$22 + 20 >> 2];
HEAP32[$23 + 24 >> 2] = HEAP32[$22 + 24 >> 2];
$$020 = $$020 + 1 | 0;
} while (($$020 | 0) < ($19 | 0));
label = 14;
} else if (!$20) $27 = $19; else label = 14;
if ((label | 0) == 14) {
_free($20);
HEAP32[$0 >> 2] = 0;
$27 = HEAP32[$15 >> 2] | 0;
}
HEAP32[$0 >> 2] = $11;
$26 = $1 - $27 | 0;
L27 : do if (($26 | 0) > 0) {
$$024$i = 0;
$30 = $11;
while (1) {
$29 = $$024$i + $27 | 0;
HEAP32[$30 + ($29 * 28 | 0) >> 2] = 0;
HEAP16[$30 + ($29 * 28 | 0) + 4 >> 1] = -1;
HEAP32[$30 + ($29 * 28 | 0) + 8 >> 2] = 0;
HEAPF32[$30 + ($29 * 28 | 0) + 12 >> 2] = Math_fround(-1.0);
HEAPF32[$30 + ($29 * 28 | 0) + 16 >> 2] = Math_fround(1.0);
HEAPF32[$30 + ($29 * 28 | 0) + 20 >> 2] = Math_fround(1.0);
HEAPF32[$30 + ($29 * 28 | 0) + 24 >> 2] = Math_fround(1.0);
$31 = $$024$i + 1 | 0;
if (($31 | 0) == ($26 | 0)) break L27;
$$024$i = $31;
$30 = HEAP32[$0 >> 2] | 0;
}
} while (0);
HEAP32[$7 >> 2] = $1;
STACKTOP = sp;
return;
}
function __ZN11ParMovementC2EPKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$06$i$i = 0, $$pr6$i = 0, $$pre$i = 0, $$pre$i$i = 0, $10 = 0, $13 = 0, $14 = 0, $19 = 0, $25 = 0, $27 = 0, $29 = 0, $3 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $5 = 0, $7 = 0, $8 = 0, label = 0;
__ZN16CompoundMovementC2EPKS_($0, $1);
HEAP32[$0 >> 2] = 2856;
__THREW__ = 0;
invoke_vi(98, $0 + 544 | 0);
$3 = __THREW__;
__THREW__ = 0;
if (!($3 & 1)) return;
$5 = ___cxa_find_matching_catch_2() | 0;
HEAP32[$0 >> 2] = 2972;
$7 = $0 + 528 | 0;
$8 = HEAP32[$7 >> 2] | 0;
$$pre$i = $0 + 540 | 0;
L4 : do if ($8 | 0) {
$10 = HEAP32[$$pre$i >> 2] | 0;
do if (($10 | 0) > 0) {
$$06$i$i = 0;
$13 = $8;
$41 = $10;
while (1) {
$14 = HEAP32[$13 + ($$06$i$i << 2) >> 2] | 0;
if (!$14) {
$$pre$i$i = $13;
$25 = $41;
} else {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$14 >> 2] | 0) + 4 >> 2] | 0, $14 | 0);
$19 = __THREW__;
__THREW__ = 0;
if ($19 & 1) break;
HEAP32[(HEAP32[$7 >> 2] | 0) + ($$06$i$i << 2) >> 2] = 0;
$$pre$i$i = HEAP32[$7 >> 2] | 0;
$25 = HEAP32[$$pre$i >> 2] | 0;
}
$$06$i$i = $$06$i$i + 1 | 0;
if (($$06$i$i | 0) >= ($25 | 0)) {
label = 9;
break;
} else {
$13 = $$pre$i$i;
$41 = $25;
}
}
if ((label | 0) == 9) if (!$$pre$i$i) break L4; else {
$$pr6$i = $$pre$i$i;
break;
}
$27 = ___cxa_find_matching_catch_3(0) | 0;
$29 = HEAP32[$7 >> 2] | 0;
if (!$29) {
HEAP32[$$pre$i >> 2] = 0;
$36 = $0 + 536 | 0;
HEAP32[$36 >> 2] = 0;
HEAP32[$0 >> 2] = 1984;
$37 = $0 + 452 | 0;
HEAP32[$37 >> 2] = 0;
$38 = $0 + 340 | 0;
HEAP32[$38 >> 2] = 0;
$39 = $0 + 228 | 0;
HEAP32[$39 >> 2] = 0;
$40 = $0 + 116 | 0;
HEAP32[$40 >> 2] = 0;
___clang_call_terminate($27);
}
_free($29);
HEAP32[$7 >> 2] = 0;
HEAP32[$$pre$i >> 2] = 0;
$36 = $0 + 536 | 0;
HEAP32[$36 >> 2] = 0;
HEAP32[$0 >> 2] = 1984;
$37 = $0 + 452 | 0;
HEAP32[$37 >> 2] = 0;
$38 = $0 + 340 | 0;
HEAP32[$38 >> 2] = 0;
$39 = $0 + 228 | 0;
HEAP32[$39 >> 2] = 0;
$40 = $0 + 116 | 0;
HEAP32[$40 >> 2] = 0;
___clang_call_terminate($27);
} else $$pr6$i = $8; while (0);
_free($$pr6$i);
HEAP32[$7 >> 2] = 0;
} while (0);
HEAP32[$$pre$i >> 2] = 0;
HEAP32[$0 + 536 >> 2] = 0;
HEAP32[$0 >> 2] = 1984;
HEAP32[$0 + 452 >> 2] = 0;
HEAP32[$0 + 340 >> 2] = 0;
HEAP32[$0 + 228 >> 2] = 0;
HEAP32[$0 + 116 >> 2] = 0;
___resumeException($5 | 0);
}
function __ZN18SiGMLConstellation13SetUnusedHandEP19OneHAbstractPostureb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$pre$phi11Z2D = 0, $$pre$phi7Z2D = 0, $$pre$phi9Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
$6 = ((HEAP32[16607] ^ HEAP32[$0 >> 2]) & 16777215 | 0) != 0;
if ($2) {
if ($6) {
$7 = $0 + 28 | 0;
HEAP32[$7 >> 2] = HEAP32[$0 >> 2];
HEAP32[$7 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
HEAP32[$7 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
$8 = $0 + 44 | 0;
$9 = $0 + 12 | 0;
HEAP16[$8 >> 1] = HEAP16[$9 >> 1] | 0;
HEAP8[$8 + 2 >> 0] = HEAP8[$9 + 2 >> 0] | 0;
$$pre$phi7Z2D = $9;
$$pre$phiZ2D = $0;
} else {
$$pre$phi7Z2D = $0 + 12 | 0;
$$pre$phiZ2D = $0;
}
$10 = $0 + 16 | 0;
$11 = $1 + 4 | 0;
HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
HEAP32[$10 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
HEAP32[$10 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
$12 = $0 + 40 | 0;
$13 = $1 + 16 | 0;
HEAP16[$12 >> 1] = HEAP16[$13 >> 1] | 0;
HEAP8[$12 + 2 >> 0] = HEAP8[$13 + 2 >> 0] | 0;
HEAP16[$$pre$phiZ2D >> 1] = HEAP16[33214] | 0;
HEAP8[$$pre$phiZ2D + 2 >> 0] = HEAP8[66430] | 0;
$14 = $0 + 4 | 0;
HEAP16[$14 >> 1] = HEAP16[33214] | 0;
HEAP8[$14 + 2 >> 0] = HEAP8[66430] | 0;
HEAP16[$$pre$phi7Z2D >> 1] = HEAP16[33214] | 0;
HEAP8[$$pre$phi7Z2D + 2 >> 0] = HEAP8[66430] | 0;
return;
} else {
if ($6) {
$15 = $0 + 16 | 0;
HEAP32[$15 >> 2] = HEAP32[$0 >> 2];
HEAP32[$15 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
HEAP32[$15 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
$16 = $0 + 40 | 0;
$17 = $0 + 12 | 0;
HEAP16[$16 >> 1] = HEAP16[$17 >> 1] | 0;
HEAP8[$16 + 2 >> 0] = HEAP8[$17 + 2 >> 0] | 0;
$$pre$phi11Z2D = $17;
$$pre$phi9Z2D = $0;
} else {
$$pre$phi11Z2D = $0 + 12 | 0;
$$pre$phi9Z2D = $0;
}
$18 = $0 + 28 | 0;
$19 = $1 + 4 | 0;
HEAP32[$18 >> 2] = HEAP32[$19 >> 2];
HEAP32[$18 + 4 >> 2] = HEAP32[$19 + 4 >> 2];
HEAP32[$18 + 8 >> 2] = HEAP32[$19 + 8 >> 2];
$20 = $0 + 44 | 0;
$21 = $1 + 16 | 0;
HEAP16[$20 >> 1] = HEAP16[$21 >> 1] | 0;
HEAP8[$20 + 2 >> 0] = HEAP8[$21 + 2 >> 0] | 0;
HEAP16[$$pre$phi9Z2D >> 1] = HEAP16[33214] | 0;
HEAP8[$$pre$phi9Z2D + 2 >> 0] = HEAP8[66430] | 0;
$22 = $0 + 4 | 0;
HEAP16[$22 >> 1] = HEAP16[33214] | 0;
HEAP8[$22 + 2 >> 0] = HEAP8[66430] | 0;
HEAP16[$$pre$phi11Z2D >> 1] = HEAP16[33214] | 0;
HEAP8[$$pre$phi11Z2D + 2 >> 0] = HEAP8[66430] | 0;
return;
}
}
function __ZL13BreakSymmetryR6SiteIDPK11HanimAvatarb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$byval_copy3 = 0, $$sroa$9$0$copyload = 0, $15 = 0, $18 = 0, $27 = 0, $29 = 0, $3 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer1 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$$byval_copy3 = sp + 24 | 0;
$vararg_buffer1 = sp + 8 | 0;
$3 = sp + 20 | 0;
$4 = sp + 16 | 0;
$5 = sp + 12 | 0;
$6 = HEAPU16[$0 >> 1] | 0 | (HEAPU8[$0 + 2 >> 0] | 0) << 16;
if (($6 & 3840 | 0) != 0 | ($6 & 255 | 0) == 0) {
STACKTOP = sp;
return;
}
HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
HEAP8[$$byval_copy3 >> 0] = HEAP8[$3 >> 0] | 0;
HEAP8[$$byval_copy3 + 1 >> 0] = HEAP8[$3 + 1 >> 0] | 0;
HEAP8[$$byval_copy3 + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0;
HEAP8[$$byval_copy3 + 3 >> 0] = HEAP8[$3 + 3 >> 0] | 0;
if (__ZNK11HanimAvatar12locateSiteIDEb6SiteID($1, 1, $$byval_copy3) | 0) {
STACKTOP = sp;
return;
}
$$sroa$9$0$copyload = HEAP8[$0 + 3 >> 0] | 0;
$15 = (HEAPU16[$0 >> 1] | 0 | (HEAPU8[$0 + 2 >> 0] | 0) << 16) & 9437183 | 1048576;
HEAP16[$4 >> 1] = $15;
HEAP8[$4 + 2 >> 0] = $15 >>> 16;
HEAP8[$4 + 3 >> 0] = $$sroa$9$0$copyload;
HEAP8[$$byval_copy3 >> 0] = HEAP8[$4 >> 0] | 0;
HEAP8[$$byval_copy3 + 1 >> 0] = HEAP8[$4 + 1 >> 0] | 0;
HEAP8[$$byval_copy3 + 2 >> 0] = HEAP8[$4 + 2 >> 0] | 0;
HEAP8[$$byval_copy3 + 3 >> 0] = HEAP8[$4 + 3 >> 0] | 0;
if (__ZNK11HanimAvatar12locateSiteIDEb6SiteID($1, 1, $$byval_copy3) | 0) {
STACKTOP = sp;
return;
}
$18 = HEAPU16[$0 >> 1] | 0 | (HEAPU8[$0 + 2 >> 0] | 0) << 16;
$27 = (($18 & 252 | 0) == 12 | (($18 & 1015808 | 0) != 0 | (($18 & 255) + -1 | 0) >>> 0 < 11)) ^ $2 ? 256 : 512;
$29 = $27 | $15 & 10481919;
HEAP16[$5 >> 1] = $29;
HEAP8[$5 + 2 >> 0] = $29 >>> 16;
HEAP8[$5 + 3 >> 0] = $$sroa$9$0$copyload;
HEAP8[$$byval_copy3 >> 0] = HEAP8[$5 >> 0] | 0;
HEAP8[$$byval_copy3 + 1 >> 0] = HEAP8[$5 + 1 >> 0] | 0;
HEAP8[$$byval_copy3 + 2 >> 0] = HEAP8[$5 + 2 >> 0] | 0;
HEAP8[$$byval_copy3 + 3 >> 0] = HEAP8[$5 + 3 >> 0] | 0;
if (!(__ZNK11HanimAvatar12locateSiteIDEb6SiteID($1, 1, $$byval_copy3) | 0)) {
STACKTOP = sp;
return;
}
if (1) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(30083, sp);
__ZNK6SiteID5printEP8_IO_FILE($0, HEAP32[16082] | 0);
HEAP32[$vararg_buffer1 >> 2] = $2 ? 35820 : 35826;
__Z7eprintfPKcz(30102, $vararg_buffer1);
}
$37 = (HEAPU16[$0 >> 1] | 0 | (HEAPU8[$0 + 2 >> 0] | 0) << 16) & 16773375 | $27;
HEAP16[$0 >> 1] = $37;
HEAP8[$0 + 2 >> 0] = $37 >>> 16;
STACKTOP = sp;
return;
}
function __ZN18SiGMLConstellation21AnalyseSingleLocationEP7XMLCellb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $10 = 0, $11 = 0, $12 = f0, $15 = 0, $22 = 0, $23 = 0, $3 = 0, $34 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $tmpcast20$i$byval_copy = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$tmpcast20$i$byval_copy = sp + 14 | 0;
$vararg_buffer = sp;
$3 = sp + 4 | 0;
$4 = sp + 12 | 0;
$5 = sp + 10 | 0;
$6 = sp + 8 | 0;
$7 = $0 + 12 | 0;
$8 = HEAP16[36081] | 0;
$10 = HEAP32[$1 + 4 >> 2] | 0;
HEAP16[$4 >> 1] = $8;
HEAP8[$tmpcast20$i$byval_copy >> 0] = HEAP8[$4 >> 0] | 0;
HEAP8[$tmpcast20$i$byval_copy + 1 >> 0] = HEAP8[$4 + 1 >> 0] | 0;
__Z17SiteIDFromAttribsPK7HashAnyIPKcS1_E9Mirroringbbb($3, $10, $tmpcast20$i$byval_copy, 0, 0, $2);
HEAP16[$0 >> 1] = HEAP16[$3 >> 1] | 0;
HEAP8[$0 + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0;
HEAP16[$5 >> 1] = $8;
HEAP8[$tmpcast20$i$byval_copy >> 0] = HEAP8[$5 >> 0] | 0;
HEAP8[$tmpcast20$i$byval_copy + 1 >> 0] = HEAP8[$5 + 1 >> 0] | 0;
__Z17SiteIDFromAttribsPK7HashAnyIPKcS1_E9Mirroringbbb($3, $10, $tmpcast20$i$byval_copy, 1, 0, $2);
$11 = $0 + 4 | 0;
HEAP16[$11 >> 1] = HEAP16[$3 >> 1] | 0;
HEAP8[$11 + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0;
$12 = Math_fround(__Z23HashAttribs_attrib_REALPK7HashAnyIPKcS1_ES1_f($10, 25448, Math_fround(.5)));
HEAPF32[$0 + 8 >> 2] = $12;
$15 = HEAP32[$1 + 8 >> 2] | 0;
if ((HEAP32[$15 + 12 >> 2] | 0) <= 0) {
STACKTOP = sp;
return;
}
$22 = HEAP32[(HEAP32[HEAP32[$15 >> 2] >> 2] | 0) + 4 >> 2] | 0;
HEAP16[$6 >> 1] = $8;
HEAP8[$tmpcast20$i$byval_copy >> 0] = HEAP8[$6 >> 0] | 0;
HEAP8[$tmpcast20$i$byval_copy + 1 >> 0] = HEAP8[$6 + 1 >> 0] | 0;
__Z17SiteIDFromAttribsPK7HashAnyIPKcS1_E9Mirroringbbb($3, $22, $tmpcast20$i$byval_copy, 0, 1, $2);
HEAP16[$7 >> 1] = HEAP16[$3 >> 1] | 0;
HEAP8[$7 + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0;
$23 = HEAP32[$7 >> 2] | 0;
if (!((HEAP32[16607] ^ $23) & 16777215)) {
STACKTOP = sp;
return;
}
if (($23 & 6291456) >>> 0 < 2097152 | 1 == 0) $36 = $23; else {
__Z7LogTimev() | 0;
$34 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17197] | 0, ((HEAPU16[$7 >> 1] | 0 | (HEAPU8[$7 + 2 >> 0] | 0) << 16) & 16777215) >>> 20 & 7) | 0;
HEAP32[$vararg_buffer >> 2] = $34;
__Z7eprintfPKcz(25463, $vararg_buffer);
$36 = HEAPU16[$7 >> 1] | 0 | (HEAPU8[$7 + 2 >> 0] | 0) << 16;
}
$37 = $36 & 9437183 | 1048576;
HEAP16[$7 >> 1] = $37;
HEAP8[$7 + 2 >> 0] = $37 >>> 16;
STACKTOP = sp;
return;
}
function __ZN11SeqMovement17GetCurrentPostureER19TwoHConcretePosturefb($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
var $$ = f0, $$04250 = 0, $$043$lcssa = f0, $$04349 = f0, $$044$lcssa = 0, $12 = f0, $14 = f0, $15 = 0, $16 = 0, $17 = f0, $23 = f0, $24 = f0, $25 = f0, $29 = 0, $31 = 0, $36 = 0, $37 = 0, $38 = f0, $40 = f0, $44 = 0, $46 = f0, $47 = f0, $5 = 0, $52 = f0, $53 = f0, $54 = f0, $9 = f0, $or$cond = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$5 = HEAP32[$0 + 540 >> 2] | 0;
$or$cond = $2 <= Math_fround(0.0) | ($5 | 0) == 0;
$9 = Math_fround(HEAPF32[$0 + 40 >> 2]);
$12 = Math_fround($9 - Math_fround(HEAPF32[$0 + 44 >> 2]));
if (!$or$cond) {
$36 = HEAP32[$0 + 528 >> 2] | 0;
$37 = HEAP32[$36 >> 2] | 0;
$38 = Math_fround($12 - $2);
$$ = $3 ? $2 : $38;
$40 = Math_fround(HEAPF32[$37 + 40 >> 2]);
if (!($40 <= $$) | ($5 | 0) < 2) {
$$043$lcssa = $40;
$$044$lcssa = $37;
$52 = $40;
} else {
$$04250 = 1;
$$04349 = $40;
while (1) {
$44 = HEAP32[$36 + ($$04250 << 2) >> 2] | 0;
$46 = Math_fround(HEAPF32[$44 + 40 >> 2]);
$47 = Math_fround($$04349 + $46);
$$04250 = $$04250 + 1 | 0;
if (!($47 <= $$) | ($$04250 | 0) >= ($5 | 0)) {
$$043$lcssa = $47;
$$044$lcssa = $44;
$52 = $46;
break;
} else $$04349 = $47;
}
}
$53 = Math_fround($$ - Math_fround($$043$lcssa - $52));
$54 = Math_fround($52 - $53);
FUNCTION_TABLE_viifi[HEAP32[(HEAP32[$$044$lcssa >> 2] | 0) + 60 >> 2] & 15]($$044$lcssa, $1, $3 ? $53 : $54, $3);
STACKTOP = sp;
return;
}
if (!($12 <= Math_fround(0.0))) {
$14 = Math_fround($2 / $12);
$15 = $14 < Math_fround(0.0);
$16 = $14 > Math_fround(1.0);
$17 = $16 ? Math_fround(1.0) : $14;
$23 = $15 ? Math_fround(0.0) : $17;
} else $23 = Math_fround(1.0);
$24 = Math_fround(__ZNK10Trajectory16lookupByFractionEf(HEAP32[66492 + (HEAP32[$0 + 12 >> 2] << 2) >> 2] | 0, $23));
$25 = Math_fround(Math_fround(1.0) - $24);
if (0) {
$29 = HEAP32[$0 + 4 >> 2] | 0;
$31 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[16658] | 0, $29) | 0;
HEAP32[$vararg_buffer >> 2] = $29;
HEAP32[$vararg_buffer + 4 >> 2] = $31;
HEAPF64[$vararg_buffer + 8 >> 3] = +$2;
__Z7eprintfPKcz(35945, $vararg_buffer);
}
__ZNK25TwoHConcretePostureChange11interpolateER19TwoHConcretePosturef12SET_OF_HANDSb($0 + 60 | 0, $1, $3 ? $24 : $25, HEAP32[$0 + 8 >> 2] | 0, $3);
STACKTOP = sp;
return;
}
function _memchr($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $7 = 0, $8 = 0, label = 0;
$3 = $1 & 255;
$7 = ($2 | 0) != 0;
L1 : do if ($7 & ($0 & 3 | 0) != 0) {
$8 = $1 & 255;
$$03555 = $0;
$$03654 = $2;
while (1) {
if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
$$035$lcssa65 = $$03555;
$$036$lcssa64 = $$03654;
label = 6;
break L1;
}
$11 = $$03555 + 1 | 0;
$12 = $$03654 + -1 | 0;
$16 = ($12 | 0) != 0;
if ($16 & ($11 & 3 | 0) != 0) {
$$03555 = $11;
$$03654 = $12;
} else {
$$035$lcssa = $11;
$$036$lcssa = $12;
$$lcssa = $16;
label = 5;
break;
}
}
} else {
$$035$lcssa = $0;
$$036$lcssa = $2;
$$lcssa = $7;
label = 5;
} while (0);
if ((label | 0) == 5) if ($$lcssa) {
$$035$lcssa65 = $$035$lcssa;
$$036$lcssa64 = $$036$lcssa;
label = 6;
} else {
$$2 = $$035$lcssa;
$$3 = 0;
}
L8 : do if ((label | 0) == 6) {
$18 = $1 & 255;
if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) {
$$2 = $$035$lcssa65;
$$3 = $$036$lcssa64;
} else {
$20 = Math_imul($3, 16843009) | 0;
L11 : do if ($$036$lcssa64 >>> 0 > 3) {
$$046 = $$035$lcssa65;
$$13745 = $$036$lcssa64;
while (1) {
$23 = HEAP32[$$046 >> 2] ^ $20;
if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) break;
$29 = $$046 + 4 | 0;
$30 = $$13745 + -4 | 0;
if ($30 >>> 0 > 3) {
$$046 = $29;
$$13745 = $30;
} else {
$$0$lcssa = $29;
$$137$lcssa = $30;
label = 11;
break L11;
}
}
$$140 = $$046;
$$23839 = $$13745;
} else {
$$0$lcssa = $$035$lcssa65;
$$137$lcssa = $$036$lcssa64;
label = 11;
} while (0);
if ((label | 0) == 11) if (!$$137$lcssa) {
$$2 = $$0$lcssa;
$$3 = 0;
break;
} else {
$$140 = $$0$lcssa;
$$23839 = $$137$lcssa;
}
while (1) {
if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
$$2 = $$140;
$$3 = $$23839;
break L8;
}
$35 = $$140 + 1 | 0;
$$23839 = $$23839 + -1 | 0;
if (!$$23839) {
$$2 = $35;
$$3 = 0;
break;
} else $$140 = $35;
}
}
} while (0);
return ($$3 | 0 ? $$2 : 0) | 0;
}
function __ZN10Quaternion9setSlerp1ERKS_S1_S1_f($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = Math_fround($4);
var $$ = f0, $$$045 = f0, $$045 = f0, $$046 = f0, $11 = f0, $13 = f0, $15 = f0, $17 = f0, $19 = f0, $21 = f0, $23 = f0, $25 = f0, $26 = f0, $28 = f0, $30 = f0, $32 = f0, $33 = f0, $34 = f0, $35 = f0, $5 = f0, $54 = 0, $55 = f0, $59 = f0, $6 = f0, $60 = f0, $7 = f0, $72 = f0, $75 = f0, $78 = f0, $81 = f0, $84 = f0, $9 = f0;
$5 = Math_fround(HEAPF32[$1 >> 2]);
$6 = Math_fround(HEAPF32[$2 >> 2]);
$7 = Math_fround($5 * $6);
$9 = Math_fround(HEAPF32[$1 + 4 >> 2]);
$11 = Math_fround(HEAPF32[$2 + 4 >> 2]);
$13 = Math_fround($7 + Math_fround($9 * $11));
$15 = Math_fround(HEAPF32[$1 + 8 >> 2]);
$17 = Math_fround(HEAPF32[$2 + 8 >> 2]);
$19 = Math_fround($13 + Math_fround($15 * $17));
$21 = Math_fround(HEAPF32[$1 + 12 >> 2]);
$23 = Math_fround(HEAPF32[$2 + 12 >> 2]);
$25 = Math_fround($19 + Math_fround($21 * $23));
$26 = Math_fround(HEAPF32[$3 >> 2]);
$28 = Math_fround(HEAPF32[$3 + 4 >> 2]);
$30 = Math_fround(HEAPF32[$3 + 8 >> 2]);
$32 = Math_fround(HEAPF32[$3 + 12 >> 2]);
$33 = Math_fround(-$26);
$34 = Math_fround(-$28);
$35 = Math_fround(-$30);
$54 = Math_fround(Math_fround($32 * $21) + Math_fround(Math_fround(Math_fround(-Math_fround($5 * $33)) - Math_fround($9 * $34)) - Math_fround($15 * $35))) >= Math_fround(0.0) ^ Math_fround(Math_fround($32 * $23) + Math_fround(Math_fround(Math_fround(-Math_fround($6 * $33)) - Math_fround($11 * $34)) - Math_fround($17 * $35))) >= Math_fround(0.0);
$55 = Math_fround(-$25);
$$ = $54 ? $55 : $25;
if (Math_fround(Math_fround(1.0) - $$) < Math_fround(.0000999999974)) {
$$045 = $4;
$$046 = Math_fround(Math_fround(1.0) - $4);
} else {
$59 = Math_fround(+Math_acos(+$$));
$60 = Math_fround(+Math_sin(+$59));
$$045 = Math_fround(Math_fround(+Math_sin(+Math_fround($59 * $4))) / $60);
$$046 = Math_fround(+Math_sin(+((1.0 - +$4) * +$59)) / +$60);
}
$72 = Math_fround(-$$045);
$$$045 = $54 ? $72 : $$045;
$75 = Math_fround(Math_fround($$046 * $5) + Math_fround($$$045 * $6));
$78 = Math_fround(Math_fround($$046 * $9) + Math_fround($$$045 * $11));
$81 = Math_fround(Math_fround($$046 * $15) + Math_fround($$$045 * $17));
$84 = Math_fround(Math_fround($$046 * $21) + Math_fround($$$045 * $23));
HEAPF32[$0 >> 2] = $75;
HEAPF32[$0 + 4 >> 2] = $78;
HEAPF32[$0 + 8 >> 2] = $81;
HEAPF32[$0 + 12 >> 2] = $84;
__ZNK10Quaternion14checkValidQuatEv($0);
return;
}
function __ZL18DistributeRotationRK6VectorffR13DynamicArray1IP13JointRotationEPK11HanimAvatar($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = Math_fround($2);
$3 = $3 | 0;
var $$04 = f0, $$0613 = 0, $13 = 0, $16 = f0, $17 = f0, $18 = f0, $20 = f0, $21 = 0, $23 = f0, $26 = f0, $34 = 0.0, $39 = 0, $4 = 0, $45 = 0, $46 = 0, $5 = 0, $53 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer7 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 96 | 0;
$vararg_buffer7 = sp + 56 | 0;
$vararg_buffer = sp;
$4 = sp + 72 | 0;
$5 = $3 + 12 | 0;
$7 = HEAP32[$5 >> 2] << 16 >> 16;
switch ($7 | 0) {
case 1:
{
__ZN10QuaternionC2ERK6Vectorfb($4, $0, $1, 1);
if ((HEAP32[$5 >> 2] | 0) > 0) $13 = HEAP32[HEAP32[$3 >> 2] >> 2] | 0; else $13 = 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$13 >> 2] | 0) + 20 >> 2] & 255]($13, $4);
STACKTOP = sp;
return;
}
case 0:
{
STACKTOP = sp;
return;
}
default:
{
$16 = Math_fround($7 | 0);
$17 = Math_fround($1 / $16);
$18 = Math_fround($2 / $16);
$20 = Math_fround(Math_fround($17 - $18) * Math_fround(6.0));
$21 = $7 + -1 | 0;
$23 = Math_fround($20 / Math_fround($21 | 0));
$26 = Math_fround(Math_fround($18 * Math_fround(3.0)) - Math_fround($17 * Math_fround(2.0)));
if (0) {
$34 = +Math_fround(Math_fround(Math_fround($7 + 1 | 0) * $2) * Math_fround(.5));
HEAPF64[$vararg_buffer >> 3] = +$1;
HEAPF64[$vararg_buffer + 8 >> 3] = +$17;
HEAPF64[$vararg_buffer + 16 >> 3] = $34;
HEAPF64[$vararg_buffer + 24 >> 3] = +$18;
HEAPF64[$vararg_buffer + 32 >> 3] = +$20;
HEAPF64[$vararg_buffer + 40 >> 3] = +$23;
HEAPF64[$vararg_buffer + 48 >> 3] = +$26;
__Z7eprintfPKcz(12518, $vararg_buffer);
}
$39 = $21 & 65535;
if ($39 << 16 >> 16 > -1) {
$$04 = $26;
$$0613 = $39;
$45 = $21 << 16 >> 16;
while (1) {
__ZN10QuaternionC2ERK6Vectorfb($4, $0, $$04, 1);
$46 = HEAP32[(HEAP32[$3 >> 2] | 0) + ($45 << 2) >> 2] | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$46 >> 2] | 0) + 20 >> 2] & 255]($46, $4);
if (0) {
HEAP32[$vararg_buffer7 >> 2] = $45;
HEAPF64[$vararg_buffer7 + 8 >> 3] = +$$04;
__Z7eprintfPKcz(12576, $vararg_buffer7);
}
$$04 = Math_fround($23 + $$04);
$53 = $$0613 + -1 << 16 >> 16;
if ($53 << 16 >> 16 <= -1) break; else {
$$0613 = $53;
$45 = $53 << 16 >> 16;
}
}
}
if (!0) {
STACKTOP = sp;
return;
}
__Z5eputcc(10);
STACKTOP = sp;
return;
}
}
}
function _little2_entityValueTok($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$05565 = 0, $$sink = 0, $17 = 0, $23 = 0, $32 = 0, $33 = 0, $5 = 0, label = 0;
if (($1 | 0) == ($2 | 0)) {
$$0 = -4;
return $$0 | 0;
}
$5 = $0 + 72 | 0;
$$05565 = $1;
L4 : while (1) {
L6 : do switch (HEAP8[$$05565 + 1 >> 0] | 0) {
case 0:
{
switch (HEAP8[$5 + (HEAPU8[$$05565 >> 0] | 0) >> 0] | 0) {
case 3:
{
label = 7;
break L4;
break;
}
case 30:
{
label = 10;
break L4;
break;
}
case 10:
{
label = 13;
break L4;
break;
}
case 9:
{
label = 16;
break L4;
break;
}
case 6:
{
$$sink = 3;
break L6;
break;
}
case 7:
{
label = 6;
break L6;
break;
}
case 5:
break;
default:
{
label = 22;
break L6;
}
}
$$sink = 2;
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 6;
break;
}
default:
label = 22;
} while (0);
if ((label | 0) == 6) {
label = 0;
$$sink = 4;
} else if ((label | 0) == 22) {
label = 0;
$$sink = 2;
}
$33 = $$05565 + $$sink | 0;
if (($33 | 0) == ($2 | 0)) {
label = 24;
break;
} else $$05565 = $33;
}
if ((label | 0) == 7) if (($$05565 | 0) == ($1 | 0)) {
$$0 = _little2_scanRef($0, $1 + 2 | 0, $2, $3) | 0;
return $$0 | 0;
} else {
HEAP32[$3 >> 2] = $$05565;
$$0 = 6;
return $$0 | 0;
} else if ((label | 0) == 10) if (($$05565 | 0) == ($1 | 0)) {
$17 = _little2_scanPercent($0, $1 + 2 | 0, $2, $3) | 0;
$$0 = ($17 | 0) == 22 ? 0 : $17;
return $$0 | 0;
} else {
HEAP32[$3 >> 2] = $$05565;
$$0 = 6;
return $$0 | 0;
} else if ((label | 0) == 13) if (($$05565 | 0) == ($1 | 0)) {
HEAP32[$3 >> 2] = $1 + 2;
$$0 = 7;
return $$0 | 0;
} else {
HEAP32[$3 >> 2] = $$05565;
$$0 = 6;
return $$0 | 0;
} else if ((label | 0) == 16) {
if (($$05565 | 0) != ($1 | 0)) {
HEAP32[$3 >> 2] = $$05565;
$$0 = 6;
return $$0 | 0;
}
$23 = $1 + 2 | 0;
if (($23 | 0) == ($2 | 0)) {
$$0 = -3;
return $$0 | 0;
}
if (!(HEAP8[$1 + 3 >> 0] | 0)) $32 = (HEAP8[$5 + (HEAPU8[$23 >> 0] | 0) >> 0] | 0) == 10 ? $1 + 4 | 0 : $23; else $32 = $23;
HEAP32[$3 >> 2] = $32;
$$0 = 7;
return $$0 | 0;
} else if ((label | 0) == 24) {
HEAP32[$3 >> 2] = $2;
$$0 = 6;
return $$0 | 0;
}
return 0;
}
function _big2_entityValueTok($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$05565 = 0, $$sink = 0, $17 = 0, $23 = 0, $32 = 0, $33 = 0, $5 = 0, label = 0;
if (($1 | 0) == ($2 | 0)) {
$$0 = -4;
return $$0 | 0;
}
$5 = $0 + 72 | 0;
$$05565 = $1;
L4 : while (1) {
L6 : do switch (HEAP8[$$05565 >> 0] | 0) {
case 0:
{
switch (HEAP8[$5 + (HEAPU8[$$05565 + 1 >> 0] | 0) >> 0] | 0) {
case 3:
{
label = 7;
break L4;
break;
}
case 30:
{
label = 10;
break L4;
break;
}
case 10:
{
label = 13;
break L4;
break;
}
case 9:
{
label = 16;
break L4;
break;
}
case 6:
{
$$sink = 3;
break L6;
break;
}
case 7:
{
label = 6;
break L6;
break;
}
case 5:
break;
default:
{
label = 22;
break L6;
}
}
$$sink = 2;
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 6;
break;
}
default:
label = 22;
} while (0);
if ((label | 0) == 6) {
label = 0;
$$sink = 4;
} else if ((label | 0) == 22) {
label = 0;
$$sink = 2;
}
$33 = $$05565 + $$sink | 0;
if (($33 | 0) == ($2 | 0)) {
label = 24;
break;
} else $$05565 = $33;
}
if ((label | 0) == 7) if (($$05565 | 0) == ($1 | 0)) {
$$0 = _big2_scanRef($0, $1 + 2 | 0, $2, $3) | 0;
return $$0 | 0;
} else {
HEAP32[$3 >> 2] = $$05565;
$$0 = 6;
return $$0 | 0;
} else if ((label | 0) == 10) if (($$05565 | 0) == ($1 | 0)) {
$17 = _big2_scanPercent($0, $1 + 2 | 0, $2, $3) | 0;
$$0 = ($17 | 0) == 22 ? 0 : $17;
return $$0 | 0;
} else {
HEAP32[$3 >> 2] = $$05565;
$$0 = 6;
return $$0 | 0;
} else if ((label | 0) == 13) if (($$05565 | 0) == ($1 | 0)) {
HEAP32[$3 >> 2] = $1 + 2;
$$0 = 7;
return $$0 | 0;
} else {
HEAP32[$3 >> 2] = $$05565;
$$0 = 6;
return $$0 | 0;
} else if ((label | 0) == 16) {
if (($$05565 | 0) != ($1 | 0)) {
HEAP32[$3 >> 2] = $$05565;
$$0 = 6;
return $$0 | 0;
}
$23 = $1 + 2 | 0;
if (($23 | 0) == ($2 | 0)) {
$$0 = -3;
return $$0 | 0;
}
if (!(HEAP8[$23 >> 0] | 0)) $32 = (HEAP8[$5 + (HEAPU8[$1 + 3 >> 0] | 0) >> 0] | 0) == 10 ? $1 + 4 | 0 : $23; else $32 = $23;
HEAP32[$3 >> 2] = $32;
$$0 = 7;
return $$0 | 0;
} else if ((label | 0) == 24) {
HEAP32[$3 >> 2] = $2;
$$0 = 6;
return $$0 | 0;
}
return 0;
}
function __ZNK23FingerBaseJointRotation13printAxesVRMLEP8_IO_FILEfss($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
$4 = $4 | 0;
var $11 = 0.0, $6 = 0, $8 = 0, $9 = 0.0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer37 = 0, $vararg_buffer9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 176 | 0;
$vararg_buffer37 = sp + 160 | 0;
$vararg_buffer26 = sp + 112 | 0;
$vararg_buffer23 = sp + 104 | 0;
$vararg_buffer12 = sp + 56 | 0;
$vararg_buffer9 = sp + 48 | 0;
$vararg_buffer = sp;
$6 = __Z12indentStringi($3 << 16 >> 16) | 0;
$8 = $4 << 16 >> 16;
if ($1 | 0) {
$9 = +$2;
$11 = +Math_fround($2 / Math_fround(5.0));
HEAP32[$vararg_buffer >> 2] = $6;
HEAP32[$vararg_buffer + 4 >> 2] = $6;
HEAP32[$vararg_buffer + 8 >> 2] = $8;
HEAPF64[$vararg_buffer + 16 >> 3] = $9;
HEAP32[$vararg_buffer + 24 >> 2] = $6;
HEAP32[$vararg_buffer + 28 >> 2] = $8;
HEAPF64[$vararg_buffer + 32 >> 3] = $11;
HEAP32[$vararg_buffer + 40 >> 2] = $6;
HEAP32[$vararg_buffer + 44 >> 2] = $6;
_fprintf($1, 13245, $vararg_buffer) | 0;
__ZNK6Vector5printEP8_IO_FILEi($0 + 8 | 0, $1, $8);
HEAP32[$vararg_buffer9 >> 2] = $6;
_fprintf($1, 13343, $vararg_buffer9) | 0;
HEAP32[$vararg_buffer12 >> 2] = $6;
HEAP32[$vararg_buffer12 + 4 >> 2] = $6;
HEAP32[$vararg_buffer12 + 8 >> 2] = $8;
HEAPF64[$vararg_buffer12 + 16 >> 3] = $9;
HEAP32[$vararg_buffer12 + 24 >> 2] = $6;
HEAP32[$vararg_buffer12 + 28 >> 2] = $8;
HEAPF64[$vararg_buffer12 + 32 >> 3] = $11;
HEAP32[$vararg_buffer12 + 40 >> 2] = $6;
HEAP32[$vararg_buffer12 + 44 >> 2] = $6;
_fprintf($1, 13245, $vararg_buffer12) | 0;
__ZNK6Vector5printEP8_IO_FILEi($0 + 20 | 0, $1, $8);
HEAP32[$vararg_buffer23 >> 2] = $6;
_fprintf($1, 13343, $vararg_buffer23) | 0;
HEAP32[$vararg_buffer26 >> 2] = $6;
HEAP32[$vararg_buffer26 + 4 >> 2] = $6;
HEAP32[$vararg_buffer26 + 8 >> 2] = $8;
HEAPF64[$vararg_buffer26 + 16 >> 3] = $9;
HEAP32[$vararg_buffer26 + 24 >> 2] = $6;
HEAP32[$vararg_buffer26 + 28 >> 2] = $8;
HEAPF64[$vararg_buffer26 + 32 >> 3] = $11;
HEAP32[$vararg_buffer26 + 40 >> 2] = $6;
HEAP32[$vararg_buffer26 + 44 >> 2] = $6;
_fprintf($1, 13245, $vararg_buffer26) | 0;
__ZNK6Vector5printEP8_IO_FILEi($0 + 32 | 0, $1, $8);
HEAP32[$vararg_buffer37 >> 2] = $6;
_fprintf($1, 13343, $vararg_buffer37) | 0;
}
if (!$6) {
STACKTOP = sp;
return;
}
_free($6);
STACKTOP = sp;
return;
}
function __ZNK22ThumbBaseJointRotation13printAxesVRMLEP8_IO_FILEfss($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
$4 = $4 | 0;
var $11 = 0.0, $6 = 0, $8 = 0, $9 = 0.0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer37 = 0, $vararg_buffer9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 176 | 0;
$vararg_buffer37 = sp + 160 | 0;
$vararg_buffer26 = sp + 112 | 0;
$vararg_buffer23 = sp + 104 | 0;
$vararg_buffer12 = sp + 56 | 0;
$vararg_buffer9 = sp + 48 | 0;
$vararg_buffer = sp;
$6 = __Z12indentStringi($3 << 16 >> 16) | 0;
$8 = $4 << 16 >> 16;
if ($1 | 0) {
$9 = +$2;
$11 = +Math_fround($2 / Math_fround(5.0));
HEAP32[$vararg_buffer >> 2] = $6;
HEAP32[$vararg_buffer + 4 >> 2] = $6;
HEAP32[$vararg_buffer + 8 >> 2] = $8;
HEAPF64[$vararg_buffer + 16 >> 3] = $9;
HEAP32[$vararg_buffer + 24 >> 2] = $6;
HEAP32[$vararg_buffer + 28 >> 2] = $8;
HEAPF64[$vararg_buffer + 32 >> 3] = $11;
HEAP32[$vararg_buffer + 40 >> 2] = $6;
HEAP32[$vararg_buffer + 44 >> 2] = $6;
_fprintf($1, 13245, $vararg_buffer) | 0;
__ZNK6Vector5printEP8_IO_FILEi($0 + 8 | 0, $1, $8);
HEAP32[$vararg_buffer9 >> 2] = $6;
_fprintf($1, 13343, $vararg_buffer9) | 0;
HEAP32[$vararg_buffer12 >> 2] = $6;
HEAP32[$vararg_buffer12 + 4 >> 2] = $6;
HEAP32[$vararg_buffer12 + 8 >> 2] = $8;
HEAPF64[$vararg_buffer12 + 16 >> 3] = $9;
HEAP32[$vararg_buffer12 + 24 >> 2] = $6;
HEAP32[$vararg_buffer12 + 28 >> 2] = $8;
HEAPF64[$vararg_buffer12 + 32 >> 3] = $11;
HEAP32[$vararg_buffer12 + 40 >> 2] = $6;
HEAP32[$vararg_buffer12 + 44 >> 2] = $6;
_fprintf($1, 13245, $vararg_buffer12) | 0;
__ZNK6Vector5printEP8_IO_FILEi($0 + 20 | 0, $1, $8);
HEAP32[$vararg_buffer23 >> 2] = $6;
_fprintf($1, 13343, $vararg_buffer23) | 0;
HEAP32[$vararg_buffer26 >> 2] = $6;
HEAP32[$vararg_buffer26 + 4 >> 2] = $6;
HEAP32[$vararg_buffer26 + 8 >> 2] = $8;
HEAPF64[$vararg_buffer26 + 16 >> 3] = $9;
HEAP32[$vararg_buffer26 + 24 >> 2] = $6;
HEAP32[$vararg_buffer26 + 28 >> 2] = $8;
HEAPF64[$vararg_buffer26 + 32 >> 3] = $11;
HEAP32[$vararg_buffer26 + 40 >> 2] = $6;
HEAP32[$vararg_buffer26 + 44 >> 2] = $6;
_fprintf($1, 13245, $vararg_buffer26) | 0;
__ZNK6Vector5printEP8_IO_FILEi($0 + 32 | 0, $1, $8);
HEAP32[$vararg_buffer37 >> 2] = $6;
_fprintf($1, 13343, $vararg_buffer37) | 0;
}
if (!$6) {
STACKTOP = sp;
return;
}
_free($6);
STACKTOP = sp;
return;
}
function __ZL17handle_gloss_signPvP7XMLCell($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$012$i$i = 0, $$01215$i$i = 0, $$01216$i$i = 0, $$sink$i$i = 0, $10 = 0, $11 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $31 = 0, $32 = 0, $36 = 0, $38 = 0, $4 = 0, $44 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$4 = __Z16convertGlossToIDP7HashAnyIPKcS1_E(HEAP32[$1 + 4 >> 2] | 0) | 0;
$6 = HEAP32[$0 + 4 >> 2] | 0;
if (!$6) {
HEAP32[$0 >> 2] = 0;
$26 = $0;
label = 10;
} else {
$10 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($4, HEAP32[$6 + 4 >> 2] | 0) | 0;
$11 = HEAP32[$6 >> 2] | 0;
L4 : do if ((HEAP16[$11 + ($10 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i = HEAP32[$11 + ($10 << 3) >> 2] | 0;
if (!$$01215$i$i) label = 8; else {
$$01216$i$i = $$01215$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($4, HEAP32[$$01216$i$i >> 2] | 0) | 0) break;
$$012$i$i = HEAP32[$$01216$i$i + 8 >> 2] | 0;
if (!$$012$i$i) {
label = 8;
break L4;
} else $$01216$i$i = $$012$i$i;
}
$$sink$i$i = $$01216$i$i + 4 | 0;
}
} else label = 8; while (0);
if ((label | 0) == 8) $$sink$i$i = $6 + 20 | 0;
$23 = HEAP32[$$sink$i$i >> 2] | 0;
HEAP32[$0 >> 2] = $23;
if (!$23) {
$26 = $0;
label = 10;
} else {
$27 = $23;
$29 = $0;
}
}
if ((label | 0) == 10) {
$25 = __Z17FindGestureByNamePKcR10ParserData($4, $0) | 0;
HEAP32[$26 >> 2] = $25;
$27 = $25;
$29 = $26;
}
__Z12SpliceMorphsP7Gesture($27);
__ZL12ProcessSpeedP7XMLCellP7Gesture($1, HEAP32[$29 >> 2] | 0);
do if (0) {
$31 = HEAP32[$29 >> 2] | 0;
HEAP32[$vararg_buffer >> 2] = $4;
HEAP32[$vararg_buffer + 4 >> 2] = $31;
__Z7eprintfPKcz(31003, $vararg_buffer);
$32 = HEAP32[$29 >> 2] | 0;
if (!$32) {
__Z5eputsPKc(61277);
break;
} else {
__ZNK7Gesture5printEP8_IO_FILE($32, HEAP32[16082] | 0);
break;
}
} while (0);
if ($4 | 0) _free($4);
$36 = HEAP32[$29 >> 2] | 0;
$38 = HEAP32[$0 + 12 >> 2] | 0;
if (!(($36 | 0) != 0 & ($38 | 0) != 0)) {
STACKTOP = sp;
return;
}
if (HEAP8[$36 + 12 >> 0] | 0) {
__Z14AppendPlayItemP13DynamicArrayPI7GestureEPS0_($38, $36);
STACKTOP = sp;
return;
}
__Z11FailedSiGMLv();
$44 = HEAP32[16637] | 0;
if (!$44) {
STACKTOP = sp;
return;
}
if (!(HEAP8[$44 + 12 >> 0] | 0)) {
STACKTOP = sp;
return;
}
__Z14AppendPlayItemP13DynamicArrayPI7GestureEPS0_($38, $44);
STACKTOP = sp;
return;
}
function __ZN10Quaternion15decomposeQuatMYERS_Rff($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = Math_fround($3);
var $$0 = f0, $$035 = f0, $11 = f0, $17 = f0, $19 = f0, $25 = f0, $29 = 0, $30 = f0, $31 = f0, $32 = f0, $33 = f0, $34 = f0, $35 = f0, $36 = f0, $37 = f0, $38 = f0, $40 = f0, $41 = f0, $42 = f0, $47 = f0, $5 = 0, $52 = f0, $57 = f0, $6 = f0, $7 = 0, $8 = f0;
if ($3 == Math_fround(0.0)) {
HEAPF32[$2 >> 2] = Math_fround(0.0);
return;
}
$5 = $0 + 4 | 0;
$6 = Math_fround(HEAPF32[$5 >> 2]);
$7 = $0 + 12 | 0;
$8 = Math_fround(HEAPF32[$7 >> 2]);
$11 = Math_fround(Math_fround($6 * $6) + Math_fround($8 * $8));
if (!($11 <= Math_fround(0.0))) {
$17 = Math_fround(Math_fround(+Math_atan2(+$6, +$8)) * $3);
HEAPF32[$2 >> 2] = $17;
if ($3 == Math_fround(1.0)) {
$19 = Math_fround(Math_sqrt(Math_fround($11)));
$$0 = Math_fround($6 / $19);
$$035 = Math_fround($8 / $19);
} else {
$$0 = Math_fround(+Math_sin(+$17));
$$035 = Math_fround(+Math_cos(+$17));
}
$25 = Math_fround(__Z11trimAnglePIf(Math_fround($17 * Math_fround(2.0))));
HEAPF32[$2 >> 2] = $25;
HEAPF32[$1 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 4 >> 2] = $$0;
HEAPF32[$1 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 12 >> 2] = $$035;
$29 = $0 + 8 | 0;
$30 = Math_fround(HEAPF32[$29 >> 2]);
$31 = Math_fround($$0 * $30);
$32 = Math_fround(HEAPF32[$5 >> 2]);
$33 = Math_fround($32 * Math_fround(0.0));
$34 = Math_fround($33 - $31);
$35 = Math_fround(HEAPF32[$7 >> 2]);
$36 = Math_fround($35 * Math_fround(0.0));
$37 = Math_fround($34 - $36);
$38 = Math_fround(HEAPF32[$0 >> 2]);
$40 = Math_fround($37 + Math_fround($$035 * $38));
$41 = Math_fround($38 * Math_fround(0.0));
$42 = Math_fround($30 * Math_fround(0.0));
$47 = Math_fround(Math_fround($$035 * $32) + Math_fround(Math_fround($42 - $41) - Math_fround($$0 * $35)));
$52 = Math_fround(Math_fround($$035 * $30) + Math_fround(Math_fround(Math_fround($$0 * $38) - $33) - $36));
$57 = Math_fround(Math_fround($$035 * $35) + Math_fround($42 + Math_fround(Math_fround($$0 * $32) + $41)));
HEAPF32[$0 >> 2] = $40;
HEAPF32[$5 >> 2] = $47;
HEAPF32[$29 >> 2] = $52;
HEAPF32[$7 >> 2] = $57;
} else {
HEAPF32[$2 >> 2] = Math_fround(0.0);
HEAPF32[$1 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 4 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 12 >> 2] = Math_fround(1.0);
}
__ZNK10Quaternion14checkValidQuatEv($0);
return;
}
function __ZNK4Site5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $11 = 0, $12 = 0, $27 = 0, $42 = 0, $48 = 0.0, $49 = 0, $6 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer3 = sp + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
_fwrite(15505, 5, 1, $1) | 0;
__ZNK6SiteID5printEP8_IO_FILE($0 + 12 | 0, $1);
$6 = HEAP32[$0 + 4 >> 2] | 0;
$8 = HEAP32[$0 + 16 >> 2] | 0;
if (!$8) $11 = 0; else $11 = HEAP32[$8 >> 2] | 0;
HEAP32[$vararg_buffer >> 2] = HEAP32[$0 >> 2];
HEAP32[$vararg_buffer + 4 >> 2] = $6;
HEAP32[$vararg_buffer + 8 >> 2] = $11;
_fprintf($1, 15511, $vararg_buffer) | 0;
$12 = $0 + 28 | 0;
if (Math_fround(HEAPF32[$12 >> 2]) != Math_fround(0.0)) label = 7; else if (Math_fround(HEAPF32[$0 + 32 >> 2]) != Math_fround(0.0)) label = 7; else if (Math_fround(HEAPF32[$0 + 36 >> 2]) != Math_fround(0.0)) label = 7;
if ((label | 0) == 7) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(15531, 18, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($12, $1, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$27 = $0 + 40 | 0;
if (Math_fround(HEAPF32[$27 >> 2]) != Math_fround(0.0)) label = 11; else if (Math_fround(HEAPF32[$0 + 44 >> 2]) != Math_fround(0.0)) label = 11; else if (Math_fround(HEAPF32[$0 + 48 >> 2]) != Math_fround(0.0)) label = 11;
if ((label | 0) == 11) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(15550, 19, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($27, $1, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$42 = $0 + 20 | 0;
if (Math_fround(HEAPF32[$42 >> 2]) != Math_fround(0.0)) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$48 = +Math_fround(HEAPF32[$42 >> 2]);
HEAP32[$vararg_buffer3 >> 2] = 3;
HEAPF64[$vararg_buffer3 + 8 >> 3] = $48;
_fprintf($1, 15570, $vararg_buffer3) | 0;
}
$49 = $0 + 24 | 0;
if (!(HEAP32[$49 >> 2] | 0)) {
STACKTOP = sp;
return;
}
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(15585, 11, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi(HEAP32[$49 >> 2] | 0, $1, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
STACKTOP = sp;
return;
}
function _unknown_toUtf8($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0$i = 0, $$034 = 0, $$034$ph = 0, $$1 = 0, $$1$ph = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $5 = 0, $6 = 0, $68 = 0, $8 = 0, $81 = 0, $82 = 0, $9 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$5 = sp;
$6 = HEAP32[$1 >> 2] | 0;
if (($6 | 0) == ($2 | 0)) {
STACKTOP = sp;
return;
}
$8 = $0 + 884 | 0;
$9 = $0 + 364 | 0;
$10 = $0 + 368 | 0;
$11 = $4;
$12 = $0 + 72 | 0;
$13 = $5 + 1 | 0;
$14 = $5 + 2 | 0;
$15 = $5 + 3 | 0;
$19 = $6;
while (1) {
$20 = HEAPU8[$19 >> 0] | 0;
$22 = $8 + ($20 << 2) + 1 | 0;
$23 = HEAP8[$8 + ($20 << 2) >> 0] | 0;
$24 = $23 << 24 >> 24;
if (!($23 << 24 >> 24)) {
$28 = FUNCTION_TABLE_iii[HEAP32[$9 >> 2] & 63](HEAP32[$10 >> 2] | 0, $19) | 0;
do if (($28 | 0) < 0) $$0$i = 0; else {
if (($28 | 0) < 128) {
HEAP8[$5 >> 0] = $28;
$$0$i = 1;
break;
}
if (($28 | 0) < 2048) {
HEAP8[$5 >> 0] = $28 >>> 6 | 192;
HEAP8[$13 >> 0] = $28 & 63 | 128;
$$0$i = 2;
break;
}
if (($28 | 0) < 65536) {
HEAP8[$5 >> 0] = $28 >>> 12 | 224;
HEAP8[$13 >> 0] = $28 >>> 6 & 63 | 128;
HEAP8[$14 >> 0] = $28 & 63 | 128;
$$0$i = 3;
break;
}
if (($28 | 0) < 1114112) {
HEAP8[$5 >> 0] = $28 >>> 18 | 240;
HEAP8[$13 >> 0] = $28 >>> 12 & 63 | 128;
HEAP8[$14 >> 0] = $28 >>> 6 & 63 | 128;
HEAP8[$15 >> 0] = $28 & 63 | 128;
$$0$i = 4;
} else $$0$i = 0;
} while (0);
if (($$0$i | 0) > ($11 - (HEAP32[$3 >> 2] | 0) | 0)) {
label = 20;
break;
}
$68 = HEAP32[$1 >> 2] | 0;
$$034$ph = $$0$i;
$$1$ph = $5;
$$sink = $68 + ((HEAPU8[$12 + (HEAPU8[$68 >> 0] | 0) >> 0] | 0) + -3) | 0;
} else {
if (($11 - (HEAP32[$3 >> 2] | 0) | 0) < ($24 | 0)) {
label = 20;
break;
}
$$034$ph = $24;
$$1$ph = $22;
$$sink = $19 + 1 | 0;
}
HEAP32[$1 >> 2] = $$sink;
$$034 = $$034$ph;
$$1 = $$1$ph;
while (1) {
$81 = HEAP8[$$1 >> 0] | 0;
$82 = HEAP32[$3 >> 2] | 0;
HEAP32[$3 >> 2] = $82 + 1;
HEAP8[$82 >> 0] = $81;
$$034 = $$034 + -1 | 0;
if (!$$034) break; else $$1 = $$1 + 1 | 0;
}
$19 = HEAP32[$1 >> 2] | 0;
if (($19 | 0) == ($2 | 0)) {
label = 20;
break;
}
}
if ((label | 0) == 20) {
STACKTOP = sp;
return;
}
}
function __ZN20HanimAnimationRecordC2Ev($0) {
$0 = $0 | 0;
var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $39 = 0, $41 = 0, $43 = 0, $45 = 0, $6 = 0, $7 = 0, dest = 0, stop = 0;
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 20 >> 2] = 0;
HEAP8[$0 + 24 >> 0] = 1;
$2 = $0 + 28 | 0;
HEAP32[$0 + 84 >> 2] = 0;
HEAP32[$0 + 88 >> 2] = 0;
HEAP8[$0 + 92 >> 0] = 0;
$6 = $0 + 96 | 0;
$7 = $0 + 116 | 0;
dest = $2;
stop = dest + 52 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP8[$2 + 52 >> 0] = 0;
HEAP32[$6 >> 2] = 0;
HEAP32[$6 + 4 >> 2] = 0;
HEAP32[$6 + 8 >> 2] = 0;
HEAP32[$6 + 12 >> 2] = 0;
HEAP32[$6 + 16 >> 2] = 0;
HEAP32[$7 >> 2] = -1;
HEAP32[$0 + 312 >> 2] = 10;
$10 = $0 + 320 | 0;
HEAP32[$10 >> 2] = 0;
$11 = $0 + 308 | 0;
HEAP32[$11 >> 2] = 0;
$12 = $0 + 316 | 0;
HEAP32[$12 >> 2] = 0;
HEAP32[$0 + 328 >> 2] = 10;
$14 = $0 + 336 | 0;
HEAP32[$14 >> 2] = 0;
$15 = $0 + 324 | 0;
HEAP32[$15 >> 2] = 0;
$16 = $0 + 332 | 0;
HEAP32[$16 >> 2] = 0;
HEAP32[$0 + 304 >> 2] = 0;
_memset($0 + 120 | 0, 0, 176) | 0;
HEAP32[$0 + 340 >> 2] = 0;
$19 = $0 + 344 | 0;
__THREW__ = 0;
$21 = invoke_ii(23, HEAP32[17820] | 0) | 0;
$22 = __THREW__;
__THREW__ = 0;
if (!($22 & 1)) {
$24 = $21 << 2;
$25 = _malloc($24) | 0;
if (($21 | 0) > 0) _memset($25 | 0, 0, $24 | 0) | 0;
HEAP32[$19 >> 2] = $25;
__THREW__ = 0;
$28 = invoke_ii(23, HEAP32[17820] | 0) | 0;
$29 = __THREW__;
__THREW__ = 0;
if (!($29 & 1)) {
$31 = $28 << 2;
$32 = _malloc($31) | 0;
if (($28 | 0) > 0) _memset($32 | 0, 0, $31 | 0) | 0;
HEAP32[$0 + 348 >> 2] = $32;
HEAP8[$0 + 81 >> 0] = 1;
HEAP8[$0 + 82 >> 0] = 2;
HEAP8[$0 + 83 >> 0] = 0;
__THREW__ = 0;
invoke_vi(104, HEAP32[$19 >> 2] | 0);
$39 = __THREW__;
__THREW__ = 0;
if (!($39 & 1)) return;
}
}
$41 = ___cxa_find_matching_catch_2() | 0;
$43 = HEAP32[$15 >> 2] | 0;
if ($43 | 0) {
_free($43);
HEAP32[$15 >> 2] = 0;
}
HEAP32[$14 >> 2] = 0;
HEAP32[$16 >> 2] = 0;
$45 = HEAP32[$11 >> 2] | 0;
if (!$45) {
HEAP32[$10 >> 2] = 0;
HEAP32[$12 >> 2] = 0;
___resumeException($41 | 0);
}
_free($45);
HEAP32[$11 >> 2] = 0;
HEAP32[$10 >> 2] = 0;
HEAP32[$12 >> 2] = 0;
___resumeException($41 | 0);
}
function __ZN11OneHGesture35transferHandsiteNormalToGlobalFrameER6Vector6SiteID($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0 = 0, $10 = 0, $3 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $tmpcast$byval_copy = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 80 | 0;
$tmpcast$byval_copy = sp + 56 | 0;
$vararg_buffer = sp;
$3 = sp + 52 | 0;
$4 = sp + 48 | 0;
$5 = sp + 44 | 0;
$6 = sp + 32 | 0;
$7 = sp + 24 | 0;
HEAP32[$3 >> 2] = 0;
HEAP32[$4 >> 2] = 0;
$8 = $0 + 72 | 0;
$10 = HEAP32[HEAP32[$8 >> 2] >> 2] | 0;
HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$5 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$5 + 1 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 2 >> 0] = HEAP8[$5 + 2 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 3 >> 0] = HEAP8[$5 + 3 >> 0] | 0;
__ZNK11HanimAvatar12locateSiteIDEb6SiteIDP6VectorRP5JointRP4Site($10, 0, $tmpcast$byval_copy, 0, $4, $3);
if (!(__ZN18HandJointRotations25transferSiteNormalToWristER6VectorP4Site(HEAP32[(HEAP32[$0 + 56 >> 2] | 0) + 236 >> 2] | 0, $1, HEAP32[$3 >> 2] | 0) | 0)) {
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
if (0) {
HEAP32[$vararg_buffer >> 2] = (HEAP8[$0 >> 0] | 0) == ((HEAPU8[(HEAP32[$8 >> 2] | 0) + 13 >> 0] | 0) >>> 6 & 1) ? 82 : 76;
__Z7eprintfPKcz(49311, $vararg_buffer);
__ZNK6Vector5printEP8_IO_FILEi($1, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
HEAPF32[$tmpcast$byval_copy >> 2] = Math_fround(0.0);
HEAPF32[$tmpcast$byval_copy + 4 >> 2] = Math_fround(0.0);
HEAPF32[$tmpcast$byval_copy + 8 >> 2] = Math_fround(0.0);
HEAPF32[$tmpcast$byval_copy + 12 >> 2] = Math_fround(1.0);
$37 = (HEAP8[$0 >> 0] | 0) == ((HEAPU8[(HEAP32[$8 >> 2] | 0) + 13 >> 0] | 0) >>> 6 & 1);
HEAP32[$6 >> 2] = HEAP32[$0 + 20 >> 2];
HEAP32[$6 + 4 >> 2] = HEAP32[$0 + 24 >> 2];
HEAP32[$6 + 8 >> 2] = HEAP32[$0 + 28 >> 2];
HEAP32[$7 >> 2] = HEAP32[$0 + 32 >> 2];
HEAP32[$7 + 4 >> 2] = HEAP32[$0 + 36 >> 2];
__ZN5SiGML15handOrientationER10Quaternionb10Direction310Direction2($tmpcast$byval_copy, $37, $6, $7) | 0;
__ZNK10Quaternion12rotateVectorER6Vector($tmpcast$byval_copy, $1);
if (0) {
__Z7eprintfPKcz(49337, sp + 8 | 0);
__ZN10Quaternion5printEP8_IO_FILEi($tmpcast$byval_copy, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z7eprintfPKcz(49358, sp + 16 | 0);
__ZNK6Vector5printEP8_IO_FILEi($1, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
$$0 = 1;
STACKTOP = sp;
return $$0 | 0;
}
function __ZNSt3__212_GLOBAL__N_113do_strerror_rEi($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0$i$i = 0, $$0$i$i12 = 0, $10 = 0, $11 = 0, $17 = 0, $18 = 0, $2 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 1040 | 0;
$vararg_buffer = sp;
$2 = sp + 1032 | 0;
$3 = sp + 8 | 0;
$4 = ___errno_location() | 0;
$5 = HEAP32[$4 >> 2] | 0;
$6 = _strerror_r($1, $3, 1024) | 0;
switch ($6 | 0) {
case 0:
{
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
$23 = __ZNSt3__211char_traitsIcE6lengthEPKc($3) | 0;
if ($23 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
if ($23 >>> 0 < 11) {
HEAP8[$0 + 11 >> 0] = $23;
$$0$i$i12 = $0;
} else {
$29 = $23 + 16 & -16;
$30 = __Znwj($29) | 0;
HEAP32[$0 >> 2] = $30;
HEAP32[$0 + 8 >> 2] = $29 | -2147483648;
HEAP32[$0 + 4 >> 2] = $23;
$$0$i$i12 = $30;
}
__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i12, $3, $23) | 0;
HEAP8[$2 >> 0] = 0;
__ZNSt3__211char_traitsIcE6assignERcRKc($$0$i$i12 + $23 | 0, $2);
break;
}
case -1:
{
$7 = ___errno_location() | 0;
$10 = HEAP32[$7 >> 2] | 0;
label = 3;
break;
}
default:
{
$10 = $6;
label = 3;
}
}
L11 : do if ((label | 0) == 3) {
$9 = ___errno_location() | 0;
HEAP32[$9 >> 2] = $5;
switch ($10 | 0) {
case 22:
{
HEAP32[$vararg_buffer >> 2] = $1;
_snprintf($3, 1024, 63379, $vararg_buffer) | 0;
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
$11 = __ZNSt3__211char_traitsIcE6lengthEPKc($3) | 0;
if ($11 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
if ($11 >>> 0 < 11) {
HEAP8[$0 + 11 >> 0] = $11;
$$0$i$i = $0;
} else {
$17 = $11 + 16 & -16;
$18 = __Znwj($17) | 0;
HEAP32[$0 >> 2] = $18;
HEAP32[$0 + 8 >> 2] = $17 | -2147483648;
HEAP32[$0 + 4 >> 2] = $11;
$$0$i$i = $18;
}
__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i, $3, $11) | 0;
HEAP8[$vararg_buffer >> 0] = 0;
__ZNSt3__211char_traitsIcE6assignERcRKc($$0$i$i + $11 | 0, $vararg_buffer);
break L11;
break;
}
case 34:
{
_abort();
break;
}
default:
___assert_fail(63396, 63416, 99, 63492);
}
} while (0);
STACKTOP = sp;
return;
}
function __ZN10Direction313setFromStringEPKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$010 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = f0, $24 = 0, $25 = f0, $26 = 0, $28 = f0, $29 = 0, $3 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $8 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer = sp;
$2 = sp + 20 | 0;
$3 = sp + 16 | 0;
$4 = sp + 12 | 0;
if (!$1) {
HEAPF32[$0 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 4 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 8 >> 2] = Math_fround(0.0);
STACKTOP = sp;
return;
}
HEAP32[$2 >> 2] = 0;
HEAP32[$3 >> 2] = 0;
HEAP32[$4 >> 2] = 0;
$8 = HEAP8[$1 >> 0] | 0;
L5 : do if (($8 + -97 & 255) < 26) {
$$010 = $1;
$11 = $8;
$13 = 0;
$16 = 0;
$19 = 0;
while (1) {
switch ($11 << 24 >> 24 | 0) {
case 108:
{
$12 = $13 + 1 | 0;
HEAP32[$2 >> 2] = $12;
$31 = $12;
$32 = $16;
$33 = $19;
break;
}
case 114:
{
$14 = $13 + -1 | 0;
HEAP32[$2 >> 2] = $14;
$31 = $14;
$32 = $16;
$33 = $19;
break;
}
case 117:
{
$15 = $16 + 1 | 0;
HEAP32[$3 >> 2] = $15;
$31 = $13;
$32 = $15;
$33 = $19;
break;
}
case 100:
{
$17 = $16 + -1 | 0;
HEAP32[$3 >> 2] = $17;
$31 = $13;
$32 = $17;
$33 = $19;
break;
}
case 111:
{
$18 = $19 + 1 | 0;
HEAP32[$4 >> 2] = $18;
$31 = $13;
$32 = $16;
$33 = $18;
break;
}
case 105:
{
$20 = $19 + -1 | 0;
HEAP32[$4 >> 2] = $20;
$31 = $13;
$32 = $16;
$33 = $20;
break;
}
default:
{
$31 = $13;
$32 = $16;
$33 = $19;
}
}
$$010 = $$010 + 1 | 0;
$11 = HEAP8[$$010 >> 0] | 0;
if (!($11 << 24 >> 24)) {
$24 = $31;
$26 = $32;
$29 = $33;
break L5;
} else {
$13 = $31;
$16 = $32;
$19 = $33;
}
}
} else {
HEAP32[$vararg_buffer >> 2] = $2;
HEAP32[$vararg_buffer + 4 >> 2] = $3;
HEAP32[$vararg_buffer + 8 >> 2] = $4;
_sscanf($1, 53521, $vararg_buffer) | 0;
$24 = HEAP32[$2 >> 2] | 0;
$26 = HEAP32[$3 >> 2] | 0;
$29 = HEAP32[$4 >> 2] | 0;
} while (0);
$23 = Math_fround($24 | 0);
HEAPF32[$0 >> 2] = $23;
$25 = Math_fround($26 | 0);
HEAPF32[$0 + 4 >> 2] = $25;
$28 = Math_fround($29 | 0);
HEAPF32[$0 + 8 >> 2] = $28;
STACKTOP = sp;
return;
}
function __ZN17VectorController27newTimeEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $$015$i = f0, $$016$i = f0, $$pre$phi8Z2D = 0, $10 = 0, $14 = 0, $15 = 0, $17 = f0, $19 = f0, $2 = 0, $20 = f0, $22 = f0, $23 = 0, $24 = f0, $25 = 0, $26 = f0, $3 = 0, $35 = f0, $36 = 0, $37 = f0, $39 = f0, $4 = 0, $41 = f0, $42 = 0, $43 = f0, $44 = 0, $45 = 0, $46 = 0, $47 = f0, $5 = f0, $7 = f0, $8 = 0, $phitmp$i = f0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$2 = sp + 12 | 0;
$3 = sp;
$4 = $0 + 144 | 0;
$5 = Math_fround(HEAPF32[$4 >> 2]);
if ($5 > $1) {
STACKTOP = sp;
return;
}
$7 = Math_fround($1 - $5);
$8 = $0 + 52 | 0;
$10 = $0 + 28 | 0;
__ZN6Vector11setSubtractERKS_S1_($8, $0 + 16 | 0, $10);
$14 = $0 + 132 | 0;
if ((HEAP32[$0 + 112 >> 2] | 0) == 3) {
$15 = $0 + 136 | 0;
$17 = Math_fround(HEAPF32[$0 + 116 >> 2]);
$19 = Math_fround(HEAPF32[$0 + 124 >> 2]);
$20 = Math_fround(__ZNK6Vector6lengthEv($8));
$22 = Math_fround(HEAPF32[$0 + 8 >> 2]);
$23 = $20 < Math_fround(0.0);
$24 = Math_fround(-$20);
$$015$i = $23 ? $24 : $20;
$25 = $22 < Math_fround(0.0);
$26 = Math_fround(-$22);
$$016$i = $25 ? $26 : $22;
$phitmp$i = Math_fround(Math_fround($$015$i / $$016$i) * Math_fround(3.14159274));
$35 = Math_fround(Math_fround(Math_fround(Math_fround($19 + Math_fround(-1.0)) * Math_fround(.5)) * Math_fround(Math_fround(+Math_cos(+($$015$i > $$016$i ? Math_fround(3.14159274) : $phitmp$i))) + Math_fround(1.0))) + Math_fround(1.0));
$36 = $35 < Math_fround(1.0);
$37 = Math_fround($17 * ($36 ? Math_fround(1.0) : $35));
$39 = Math_fround(HEAPF32[$0 + 120 >> 2]);
HEAPF32[$15 >> 2] = $37;
$41 = Math_fround(Math_fround($37 - $39) * Math_fround(.25));
HEAPF32[$14 >> 2] = $41;
$$pre$phi8Z2D = $15;
$43 = $41;
} else {
$$pre$phi8Z2D = $0 + 136 | 0;
$43 = Math_fround(HEAPF32[$14 >> 2]);
}
$42 = $0 + 64 | 0;
__ZN6Vector8setScaleERKS_f($42, $8, $43);
$44 = $0 + 88 | 0;
$45 = $0 + 76 | 0;
__ZN6Vector11setSubtractERKS_S1_($44, $42, $45);
$46 = $0 + 100 | 0;
$47 = Math_fround(HEAPF32[$$pre$phi8Z2D >> 2]);
__ZN6Vector8setScaleERKS_f($46, $44, Math_fround($47 / Math_fround(HEAPF32[$0 + 140 >> 2])));
__ZN6VectorC2ERKS_($2, $45);
__ZN6Vector8setScaleEf($2, $7);
__ZN6Vector6setAddERKS_($10, $2);
__ZN6VectorC2ERKS_($3, $46);
__ZN6Vector8setScaleEf($3, $7);
__ZN6Vector6setAddERKS_($45, $3);
HEAPF32[$4 >> 2] = $1;
STACKTOP = sp;
return;
}
function _normal_scanLit($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$041$be = 0, $$04154 = 0, $$2 = 0, $10 = 0, $14 = 0, $38 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
if (($2 | 0) == ($3 | 0)) {
$$2 = -1;
return $$2 | 0;
}
$6 = $1 + 72 | 0;
$7 = $3;
$8 = $1 + 352 | 0;
$9 = $1 + 356 | 0;
$10 = $1 + 360 | 0;
$$04154 = $2;
L4 : while (1) {
$14 = HEAP8[$6 + (HEAPU8[$$04154 >> 0] | 0) >> 0] | 0;
switch ($14 << 24 >> 24) {
case 8:
case 1:
case 0:
{
label = 17;
break L4;
break;
}
case 5:
{
if (($7 - $$04154 | 0) < 2) {
$$2 = -2;
label = 23;
break L4;
}
if (FUNCTION_TABLE_iii[HEAP32[$8 >> 2] & 63]($1, $$04154) | 0) {
label = 6;
break L4;
}
$$041$be = $$04154 + 2 | 0;
break;
}
case 6:
{
if (($7 - $$04154 | 0) < 3) {
$$2 = -2;
label = 23;
break L4;
}
if (FUNCTION_TABLE_iii[HEAP32[$9 >> 2] & 63]($1, $$04154) | 0) {
label = 11;
break L4;
}
$$041$be = $$04154 + 3 | 0;
break;
}
case 7:
{
if (($7 - $$04154 | 0) < 4) {
$$2 = -2;
label = 23;
break L4;
}
if (FUNCTION_TABLE_iii[HEAP32[$10 >> 2] & 63]($1, $$04154) | 0) {
label = 15;
break L4;
}
$$041$be = $$04154 + 4 | 0;
break;
}
case 13:
case 12:
{
$38 = $$04154 + 1 | 0;
if (($14 & 255 | 0) == ($0 | 0)) {
label = 19;
break L4;
} else $$041$be = $38;
break;
}
default:
$$041$be = $$04154 + 1 | 0;
}
if (($$041$be | 0) == ($3 | 0)) {
$$2 = -1;
label = 23;
break;
} else $$04154 = $$041$be;
}
if ((label | 0) == 6) {
HEAP32[$4 >> 2] = $$04154;
$$2 = 0;
return $$2 | 0;
} else if ((label | 0) == 11) {
HEAP32[$4 >> 2] = $$04154;
$$2 = 0;
return $$2 | 0;
} else if ((label | 0) == 15) {
HEAP32[$4 >> 2] = $$04154;
$$2 = 0;
return $$2 | 0;
} else if ((label | 0) == 17) {
HEAP32[$4 >> 2] = $$04154;
$$2 = 0;
return $$2 | 0;
} else if ((label | 0) == 19) {
if (($38 | 0) == ($3 | 0)) {
$$2 = -27;
return $$2 | 0;
}
HEAP32[$4 >> 2] = $38;
switch (HEAP8[$6 + (HEAPU8[$38 >> 0] | 0) >> 0] | 0) {
case 20:
case 30:
case 11:
case 10:
case 9:
case 21:
{
$$2 = 27;
return $$2 | 0;
}
default:
{}
}
$$2 = 0;
return $$2 | 0;
} else if ((label | 0) == 23) return $$2 | 0;
return 0;
}
function __ZN7Getopts12argsFromFileEPKcP13DynamicArrayPIcE($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$02832 = 0, $$130 = 0, $10 = 0, $23 = 0, $24 = 0, $26 = 0, $3 = 0, $6 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$vararg_buffer17 = sp + 56 | 0;
$vararg_buffer14 = sp + 48 | 0;
$vararg_buffer11 = sp + 40 | 0;
$vararg_buffer9 = sp + 32 | 0;
$vararg_buffer7 = sp + 24 | 0;
$vararg_buffer5 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$3 = HEAP32[1832] | 0;
HEAP32[$vararg_buffer >> 2] = $1;
_fprintf($3, 9811, $vararg_buffer) | 0;
if (0) {
$6 = HEAP32[$2 + 12 >> 2] | 0;
HEAP32[$vararg_buffer1 >> 2] = $1;
HEAP32[$vararg_buffer1 + 4 >> 2] = $6;
__Z7eprintfPKcz(9837, $vararg_buffer1);
}
$8 = 0 != 0;
if (__ZN7Getopts12argsFromFileEPKcb($0, $1, 1) | 0) {
if (!$8) {
$$130 = 1;
STACKTOP = sp;
return $$130 | 0;
}
__Z7eprintfPKcz(9863, $vararg_buffer5);
$$130 = 1;
STACKTOP = sp;
return $$130 | 0;
}
if ($8) __Z7eprintfPKcz(9889, $vararg_buffer7);
if (!$2) {
if (!0) {
$$130 = 0;
STACKTOP = sp;
return $$130 | 0;
}
__Z7eprintfPKcz(9908, $vararg_buffer9);
$$130 = 0;
STACKTOP = sp;
return $$130 | 0;
}
$10 = $2 + 12 | 0;
if ((HEAP32[$10 >> 2] | 0) <= 0) {
$$130 = 0;
STACKTOP = sp;
return $$130 | 0;
}
$$02832 = 0;
while (1) {
if (0) {
HEAP32[$vararg_buffer11 >> 2] = $$02832;
__Z7eprintfPKcz(9928, $vararg_buffer11);
}
if ((HEAP32[$10 >> 2] | 0) > ($$02832 | 0)) $23 = HEAP32[(HEAP32[$2 >> 2] | 0) + ($$02832 << 2) >> 2] | 0; else $23 = 0;
$24 = __Z16makeFullFilenamePKcS0_($23, $1) | 0;
if (0) {
HEAP32[$vararg_buffer14 >> 2] = $24;
__Z7eprintfPKcz(9950, $vararg_buffer14);
}
$26 = __ZN7Getopts12argsFromFileEPKcb($0, $24, 1) | 0;
if (0) {
HEAP32[$vararg_buffer17 >> 2] = $24;
HEAP32[$vararg_buffer17 + 4 >> 2] = $26 ? 72308 : 9966;
__Z7eprintfPKcz(9971, $vararg_buffer17);
}
if ($24 | 0) _free($24);
$$02832 = $$02832 + 1 | 0;
if ($26) {
$$130 = 1;
label = 25;
break;
}
if (($$02832 | 0) >= (HEAP32[$10 >> 2] | 0)) {
$$130 = 0;
label = 25;
break;
}
}
if ((label | 0) == 25) {
STACKTOP = sp;
return $$130 | 0;
}
return 0;
}
function __Z19ExtendTrailingMorphP16AtomicTimedMorphP18AbstractTimedMorph($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$04551 = 0, $$046$off050 = 0, $$2 = 0, $21 = 0, $23 = 0, $28 = 0, $32 = 0, $33 = 0, $35 = 0, $40 = 0, $44 = 0, $7 = 0, $sext = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (($0 | 0) == 0 | ($1 | 0) == 0) {
$$2 = 0;
STACKTOP = sp;
return $$2 | 0;
}
switch (HEAP32[$1 + 20 >> 2] | 0) {
case 1:
{
$7 = HEAP32[$0 + 24 >> 2] | 0;
if (($7 | 0) != (HEAP32[$1 + 24 >> 2] | 0)) {
$$2 = 0;
STACKTOP = sp;
return $$2 | 0;
}
HEAPF32[$1 + 4 >> 2] = Math_fround(0.0);
HEAP32[$1 + 32 >> 2] = HEAP32[$0 + 28 >> 2];
if (!0) {
$$2 = 1;
STACKTOP = sp;
return $$2 | 0;
}
HEAP32[$vararg_buffer >> 2] = $7;
__Z7eprintfPKcz(46291, $vararg_buffer);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 40 >> 2] & 255]($1, HEAP32[16082] | 0);
__Z5eputcc(10);
$$2 = 1;
STACKTOP = sp;
return $$2 | 0;
}
case 3:
{
$21 = HEAP32[$1 + 24 >> 2] | 0;
$23 = HEAP32[$21 + 12 >> 2] | 0;
if (!$23) {
$$2 = 0;
STACKTOP = sp;
return $$2 | 0;
}
if (($23 | 0) > 0) $28 = HEAP32[HEAP32[$21 >> 2] >> 2] | 0; else $28 = 0;
if (!(__Z19ExtendTrailingMorphP16AtomicTimedMorphP18AbstractTimedMorph($0, $28) | 0)) {
$$2 = 0;
STACKTOP = sp;
return $$2 | 0;
}
HEAPF32[$1 + 4 >> 2] = Math_fround(0.0);
$$2 = 1;
STACKTOP = sp;
return $$2 | 0;
}
case 2:
{
$32 = HEAP32[$1 + 24 >> 2] | 0;
$33 = $32 + 12 | 0;
$sext = HEAP32[$33 >> 2] << 16;
$35 = $sext >> 16;
if (($sext | 0) <= 0) {
$$2 = 0;
STACKTOP = sp;
return $$2 | 0;
}
$$04551 = 0;
$$046$off050 = 0;
$40 = 0;
do {
if ($$04551 << 16 >> 16 < 0) $44 = 0; else if ((HEAP32[$33 >> 2] | 0) > ($40 | 0)) $44 = HEAP32[(HEAP32[$32 >> 2] | 0) + ($40 << 2) >> 2] | 0; else $44 = 0;
$$046$off050 = $$046$off050 | (__Z19ExtendTrailingMorphP16AtomicTimedMorphP18AbstractTimedMorph($0, $44) | 0);
$$04551 = $$04551 + 1 << 16 >> 16;
$40 = $$04551 << 16 >> 16;
} while (($35 | 0) > ($40 | 0));
if (!$$046$off050) {
$$2 = 0;
STACKTOP = sp;
return $$2 | 0;
}
HEAPF32[$1 + 4 >> 2] = Math_fround(0.0);
$$2 = 1;
STACKTOP = sp;
return $$2 | 0;
}
default:
{
$$2 = 0;
STACKTOP = sp;
return $$2 | 0;
}
}
return 0;
}
function __ZN10XMLWrapper11SetElementsEP7HashAnyIPKciE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$pre$phiZ2D = 0, $$sink19$i = 0, $$sroa$011$018 = 0, $$sroa$011$1 = 0, $$sroa$011$2 = 0, $$sroa$011$3 = 0, $$sroa$6$017 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $32 = 0, $37 = 0, $39 = 0, $45 = 0, $5 = 0, label = 0;
$2 = $0 + 4 | 0;
if (!(HEAP32[$2 >> 2] | 0)) {
$5 = __Znwj(16) | 0;
HEAP32[$5 + 4 >> 2] = 10;
HEAP32[$5 + 12 >> 2] = 0;
HEAP32[$5 >> 2] = 0;
HEAP32[$5 + 8 >> 2] = 0;
HEAP32[$2 >> 2] = $5;
}
if (!$1) return;
$10 = $1 + 4 | 0;
$11 = HEAP32[$10 >> 2] | 0;
if (($11 | 0) <= -1) return;
$$sroa$011$018 = -1;
$$sroa$6$017 = 0;
$18 = $11;
L10 : while (1) {
$$sroa$011$1 = $$sroa$011$018;
$14 = $$sroa$6$017;
$16 = $$sroa$011$018;
while (1) {
if (!$14) {
$15 = $16 + 1 | 0;
if (($15 | 0) < ($18 | 0)) {
$$sink19$i = (HEAP32[$1 >> 2] | 0) + ($15 << 3) | 0;
$$sroa$011$2 = $15;
$45 = $15;
label = 11;
} else {
$$sroa$011$3 = $15;
$25 = $15;
}
} else {
$$sink19$i = $14 + 8 | 0;
$$sroa$011$2 = $$sroa$011$1;
$45 = $16;
label = 11;
}
if ((label | 0) == 11) {
label = 0;
$22 = HEAP32[$$sink19$i >> 2] | 0;
if (!$22) {
$$sroa$011$3 = $$sroa$011$2;
$25 = $45;
} else break;
}
if (($25 | 0) < ($18 | 0)) {
$$sroa$011$1 = $$sroa$011$3;
$14 = 0;
$16 = $25;
} else {
label = 20;
break L10;
}
}
$26 = HEAP32[$22 >> 2] | 0;
$27 = HEAP32[$2 >> 2] | 0;
$28 = $27 + 12 | 0;
$29 = HEAP32[$28 >> 2] | 0;
if (($29 | 0) < 0) $32 = $18; else {
if ((HEAP32[$27 + 8 >> 2] | 0) > ($29 | 0)) {
$$pre$phiZ2D = $29 + 1 | 0;
label = 18;
} else {
$37 = HEAP32[$27 + 4 >> 2] | 0;
$39 = $29 + 1 | 0;
__ZN13DynamicArrayPIKcE6resizeEi($27, ($37 | 0) > ($29 | 0) ? $37 : $39 + ($29 >>> 1) | 0);
if ((HEAP32[$28 >> 2] | 0) <= ($29 | 0)) {
$$pre$phiZ2D = $39;
label = 18;
}
}
if ((label | 0) == 18) {
label = 0;
HEAP32[$28 >> 2] = $$pre$phiZ2D;
}
HEAP32[(HEAP32[$27 >> 2] | 0) + ($29 << 2) >> 2] = $26;
$32 = HEAP32[$10 >> 2] | 0;
}
if (($$sroa$011$2 | 0) < ($32 | 0)) {
$$sroa$011$018 = $$sroa$011$2;
$$sroa$6$017 = $22;
$18 = $32;
} else {
label = 20;
break;
}
}
if ((label | 0) == 20) return;
}
function __ZN19TwoHAbstractPostureC2EPK7Gesture($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $19 = 0, $20 = 0, $22 = 0, $23 = 0, $3 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $46 = 0;
$3 = HEAP32[$1 + 20 >> 2] | 0;
HEAP32[$0 >> 2] = HEAP32[$3 >> 2];
HEAP32[$0 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
HEAP32[$0 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
HEAP32[$0 + 16 >> 2] = HEAP32[$3 + 16 >> 2];
HEAP32[$0 + 20 >> 2] = HEAP32[$3 + 20 >> 2];
HEAP32[$0 + 24 >> 2] = HEAP32[$3 + 24 >> 2];
HEAP32[$0 + 28 >> 2] = HEAP32[$3 + 28 >> 2];
HEAP32[$0 + 32 >> 2] = HEAP32[$3 + 32 >> 2];
HEAP32[$0 + 36 >> 2] = HEAP32[$3 + 36 >> 2];
$19 = $0 + 40 | 0;
$20 = $3 + 40 | 0;
HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
HEAP32[$19 + 4 >> 2] = HEAP32[$20 + 4 >> 2];
HEAP32[$19 + 8 >> 2] = HEAP32[$20 + 8 >> 2];
HEAP32[$19 + 12 >> 2] = HEAP32[$20 + 12 >> 2];
HEAP32[$19 + 16 >> 2] = HEAP32[$20 + 16 >> 2];
HEAP32[$19 + 20 >> 2] = HEAP32[$20 + 20 >> 2];
HEAP32[$19 + 24 >> 2] = HEAP32[$20 + 24 >> 2];
HEAP32[$19 + 28 >> 2] = HEAP32[$20 + 28 >> 2];
$22 = HEAP32[$1 + 24 >> 2] | 0;
$23 = $0 + 72 | 0;
HEAP32[$23 >> 2] = HEAP32[$22 >> 2];
HEAP32[$23 + 4 >> 2] = HEAP32[$22 + 4 >> 2];
HEAP32[$23 + 8 >> 2] = HEAP32[$22 + 8 >> 2];
HEAP32[$23 + 12 >> 2] = HEAP32[$22 + 12 >> 2];
HEAP32[$23 + 16 >> 2] = HEAP32[$22 + 16 >> 2];
HEAP32[$0 + 92 >> 2] = HEAP32[$22 + 20 >> 2];
HEAP32[$0 + 96 >> 2] = HEAP32[$22 + 24 >> 2];
HEAP32[$0 + 100 >> 2] = HEAP32[$22 + 28 >> 2];
HEAP32[$0 + 104 >> 2] = HEAP32[$22 + 32 >> 2];
HEAP32[$0 + 108 >> 2] = HEAP32[$22 + 36 >> 2];
$39 = $0 + 112 | 0;
$40 = $22 + 40 | 0;
HEAP32[$39 >> 2] = HEAP32[$40 >> 2];
HEAP32[$39 + 4 >> 2] = HEAP32[$40 + 4 >> 2];
HEAP32[$39 + 8 >> 2] = HEAP32[$40 + 8 >> 2];
HEAP32[$39 + 12 >> 2] = HEAP32[$40 + 12 >> 2];
HEAP32[$39 + 16 >> 2] = HEAP32[$40 + 16 >> 2];
HEAP32[$39 + 20 >> 2] = HEAP32[$40 + 20 >> 2];
HEAP32[$39 + 24 >> 2] = HEAP32[$40 + 24 >> 2];
HEAP32[$39 + 28 >> 2] = HEAP32[$40 + 28 >> 2];
$41 = $0 + 144 | 0;
$42 = $0 + 164 | 0;
HEAP16[$42 >> 1] = 0;
HEAP8[$42 + 2 >> 0] = 0;
HEAP32[$41 >> 2] = 0;
HEAP32[$41 + 4 >> 2] = 0;
HEAP32[$41 + 8 >> 2] = 0;
HEAP32[$41 + 12 >> 2] = 0;
HEAP16[$41 + 16 >> 1] = 0;
HEAP8[$41 + 18 >> 0] = 0;
HEAP8[$0 + 52 >> 0] = 0;
HEAP8[$0 + 124 >> 0] = 0;
$46 = HEAP32[$1 + 40 >> 2] | 0;
if (!$46) return;
HEAP32[$41 >> 2] = HEAP32[$46 + 44 >> 2];
return;
}
function __ZN13DynamicArray1I10QuaternionE6resizeEi($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$020 = 0, $$pre23 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
$3 = HEAP32[$0 >> 2] | 0;
if ($3 | 0) {
_free($3);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
STACKTOP = sp;
return;
}
$7 = $0 + 8 | 0;
$8 = HEAP32[$7 >> 2] | 0;
if (($8 | 0) == ($1 | 0)) {
STACKTOP = sp;
return;
}
$11 = _malloc($1 << 4) | 0;
if (!$11) if (($8 | 0) < ($1 | 0)) {
HEAP32[$vararg_buffer >> 2] = $8;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
__Z7eprintfPKcz(47403, $vararg_buffer);
$14 = ___cxa_allocate_exception(4) | 0;
HEAP32[$14 >> 2] = 1;
___cxa_throw($14 | 0, 32, 0);
} else {
STACKTOP = sp;
return;
}
$15 = $0 + 12 | 0;
$16 = HEAP32[$15 >> 2] | 0;
if (($16 | 0) > ($1 | 0)) {
HEAP32[$15 >> 2] = $1;
$19 = $1;
} else $19 = $16;
$20 = HEAP32[$0 >> 2] | 0;
if (($19 | 0) > 0) {
$$020 = 0;
do {
$22 = $20 + ($$020 << 4) | 0;
$23 = $11 + ($$020 << 4) | 0;
HEAP32[$23 >> 2] = HEAP32[$22 >> 2];
HEAP32[$23 + 4 >> 2] = HEAP32[$22 + 4 >> 2];
HEAP32[$23 + 8 >> 2] = HEAP32[$22 + 8 >> 2];
HEAP32[$23 + 12 >> 2] = HEAP32[$22 + 12 >> 2];
$$020 = $$020 + 1 | 0;
} while (($$020 | 0) < ($19 | 0));
label = 14;
} else if (!$20) $27 = $19; else label = 14;
if ((label | 0) == 14) {
_free($20);
HEAP32[$0 >> 2] = 0;
$27 = HEAP32[$15 >> 2] | 0;
}
HEAP32[$0 >> 2] = $11;
$26 = $1 - $27 | 0;
if (($26 | 0) > 0) {
HEAPF32[$11 + ($27 << 4) >> 2] = Math_fround(0.0);
HEAPF32[$11 + ($27 << 4) + 4 >> 2] = Math_fround(0.0);
HEAPF32[$11 + ($27 << 4) + 8 >> 2] = Math_fround(0.0);
HEAPF32[$11 + ($27 << 4) + 12 >> 2] = Math_fround(1.0);
if (($26 | 0) != 1) {
$30 = 1;
do {
$$pre23 = HEAP32[$0 >> 2] | 0;
$29 = $30 + $27 | 0;
HEAPF32[$$pre23 + ($29 << 4) >> 2] = Math_fround(0.0);
HEAPF32[$$pre23 + ($29 << 4) + 4 >> 2] = Math_fround(0.0);
HEAPF32[$$pre23 + ($29 << 4) + 8 >> 2] = Math_fround(0.0);
HEAPF32[$$pre23 + ($29 << 4) + 12 >> 2] = Math_fround(1.0);
$30 = $30 + 1 | 0;
} while (($30 | 0) != ($26 | 0));
}
}
HEAP32[$7 >> 2] = $1;
STACKTOP = sp;
return;
}
function __ZN20ArmHandConstellation10updateFromERKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $15 = 0, $18 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $43 = 0, $45 = 0, $46 = 0, $50 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
if (HEAP8[$1 + 60 >> 0] | 0) HEAP8[$0 + 60 >> 0] = 1;
if (HEAP8[$1 + 61 >> 0] | 0) HEAP8[$0 + 61 >> 0] = 1;
if (HEAP8[$1 + 62 >> 0] | 0) HEAP8[$0 + 62 >> 0] = 1;
$15 = HEAP32[$1 + 44 >> 2] | 0;
if ($15 | 0) HEAP32[$0 + 44 >> 2] = $15;
$18 = $1 + 12 | 0;
$20 = HEAP32[16607] | 0;
if (!(($20 ^ HEAP32[$18 >> 2]) & 16777215)) $28 = $20; else {
$23 = $0 + 12 | 0;
HEAP32[$23 >> 2] = HEAP32[$18 >> 2];
HEAP32[$23 + 4 >> 2] = HEAP32[$18 + 4 >> 2];
HEAP32[$23 + 8 >> 2] = HEAP32[$18 + 8 >> 2];
HEAP16[$0 >> 1] = 0;
HEAP8[$0 + 2 >> 0] = 0;
$24 = $0 + 4 | 0;
HEAP16[$24 >> 1] = 0;
HEAP8[$24 + 2 >> 0] = 0;
$28 = HEAP32[16607] | 0;
}
$25 = $1 + 24 | 0;
if (!(($28 ^ HEAP32[$25 >> 2]) & 16777215)) $34 = $28; else {
$30 = $0 + 24 | 0;
HEAP32[$30 >> 2] = HEAP32[$25 >> 2];
HEAP32[$30 + 4 >> 2] = HEAP32[$25 + 4 >> 2];
HEAP32[$30 + 8 >> 2] = HEAP32[$25 + 8 >> 2];
HEAP16[$0 >> 1] = 0;
HEAP8[$0 + 2 >> 0] = 0;
$31 = $0 + 4 | 0;
HEAP16[$31 >> 1] = 0;
HEAP8[$31 + 2 >> 0] = 0;
$34 = HEAP32[16607] | 0;
}
if (!(($34 ^ HEAP32[$1 >> 2]) & 16777215)) $43 = $34; else {
HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
$36 = $0 + 12 | 0;
HEAP16[$36 >> 1] = 0;
HEAP8[$36 + 2 >> 0] = 0;
$37 = $0 + 16 | 0;
HEAP16[$37 >> 1] = 0;
HEAP8[$37 + 2 >> 0] = 0;
$38 = $0 + 24 | 0;
HEAP16[$38 >> 1] = 0;
HEAP8[$38 + 2 >> 0] = 0;
$39 = $0 + 28 | 0;
HEAP16[$39 >> 1] = 0;
HEAP8[$39 + 2 >> 0] = 0;
$43 = HEAP32[16607] | 0;
}
$40 = $1 + 36 | 0;
if (($43 ^ HEAP32[$40 >> 2]) & 16777215 | 0) {
$45 = $0 + 36 | 0;
HEAP16[$45 >> 1] = HEAP16[$40 >> 1] | 0;
HEAP8[$45 + 2 >> 0] = HEAP8[$40 + 2 >> 0] | 0;
}
$46 = $1 + 40 | 0;
if (($43 ^ HEAP32[$46 >> 2]) & 16777215 | 0) {
$50 = $0 + 40 | 0;
HEAP16[$50 >> 1] = HEAP16[$46 >> 1] | 0;
HEAP8[$50 + 2 >> 0] = HEAP8[$46 + 2 >> 0] | 0;
}
if (!0) {
STACKTOP = sp;
return;
}
__Z7eprintfPKcz(28340, sp);
__ZNK20ArmHandConstellation5printEP8_IO_FILE($0, HEAP32[16082] | 0);
STACKTOP = sp;
return;
}
function __Z20GetArmControllerInfoP7XMLCell($0) {
$0 = $0 | 0;
var $$012$i$i = 0, $$01215$i$i = 0, $$01216$i$i = 0, $$041 = 0, $$sink$i$i = 0, $1 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $33 = 0, $34 = f0, $37 = f0, $4 = 0, $40 = f0, $43 = f0, $7 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$1 = __ZN7XMLCell7elementEPKc($0, 12187) | 0;
if (!$1) {
STACKTOP = sp;
return;
}
$4 = HEAP32[$1 + 8 >> 2] | 0;
if (!$4) {
STACKTOP = sp;
return;
}
$7 = HEAP32[$4 + 12 >> 2] | 0;
if (($7 | 0) <= 0) {
STACKTOP = sp;
return;
}
$9 = $4 + 12 | 0;
$$041 = 0;
do {
if ((HEAP32[$9 >> 2] | 0) > ($$041 | 0)) $17 = HEAP32[(HEAP32[$4 >> 2] | 0) + ($$041 << 2) >> 2] | 0; else $17 = 0;
$15 = HEAP32[16162] | 0;
$16 = HEAP32[$17 >> 2] | 0;
$20 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($16, HEAP32[$15 + 4 >> 2] | 0) | 0;
$21 = HEAP32[$15 >> 2] | 0;
L15 : do if ((HEAP16[$21 + ($20 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i = HEAP32[$21 + ($20 << 3) >> 2] | 0;
if (!$$01215$i$i) label = 13; else {
$$01216$i$i = $$01215$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($16, HEAP32[$$01216$i$i >> 2] | 0) | 0) break;
$$012$i$i = HEAP32[$$01216$i$i + 8 >> 2] | 0;
if (!$$012$i$i) {
label = 13;
break L15;
} else $$01216$i$i = $$012$i$i;
}
$$sink$i$i = $$01216$i$i + 4 | 0;
}
} else label = 13; while (0);
if ((label | 0) == 13) {
label = 0;
$$sink$i$i = $15 + 20 | 0;
}
$33 = HEAP32[$$sink$i$i >> 2] | 0;
if (!$33) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer >> 2] = HEAP32[$17 >> 2];
__Z7eprintfPKcz(25322, $vararg_buffer);
} else {
$34 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($17, 25271, Math_fround(0.0)));
HEAPF32[(HEAP32[16161] | 0) + ($33 << 4) >> 2] = $34;
$37 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($17, 25284, Math_fround(0.0)));
HEAPF32[(HEAP32[16161] | 0) + ($33 << 4) + 4 >> 2] = $37;
$40 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($17, 25296, Math_fround(0.0)));
HEAPF32[(HEAP32[16161] | 0) + ($33 << 4) + 8 >> 2] = $40;
$43 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($17, 25304, Math_fround(0.0)));
HEAPF32[(HEAP32[16161] | 0) + ($33 << 4) + 12 >> 2] = $43;
}
$$041 = $$041 + 1 | 0;
} while (($$041 | 0) != ($7 | 0));
STACKTOP = sp;
return;
}
function __ZNK6Vector9angleWithERKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$ = f0, $$21 = f0, $$22 = f0, $11 = f0, $13 = f0, $15 = f0, $17 = f0, $18 = 0, $2 = f0, $21 = f0, $24 = f0, $27 = f0, $28 = 0, $29 = 0, $3 = f0, $32 = 0, $34 = 0, $36 = 0, $41 = 0, $5 = f0, $53 = f0, $7 = f0, $9 = f0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$2 = Math_fround(HEAPF32[$0 >> 2]);
$3 = Math_fround(HEAPF32[$1 >> 2]);
$5 = Math_fround(Math_fround($2 * $3) + Math_fround(0.0));
$7 = Math_fround(HEAPF32[$0 + 4 >> 2]);
$9 = Math_fround(HEAPF32[$1 + 4 >> 2]);
$11 = Math_fround($5 + Math_fround($7 * $9));
$13 = Math_fround(HEAPF32[$0 + 8 >> 2]);
$15 = Math_fround(HEAPF32[$1 + 8 >> 2]);
$17 = Math_fround($11 + Math_fround($13 * $15));
$18 = ($0 | 0) == 0;
$$ = $18 ? Math_fround(0.0) : $13;
$$21 = $18 ? Math_fround(0.0) : $7;
$$22 = $18 ? Math_fround(0.0) : $2;
$21 = Math_fround(Math_fround($$21 * $15) - Math_fround($$ * $9));
$24 = Math_fround(Math_fround($$ * $3) - Math_fround($$22 * $15));
$27 = Math_fround(Math_fround($$22 * $9) - Math_fround($$21 * $3));
$28 = (HEAPF32[tempDoublePtr >> 2] = $24, HEAP32[tempDoublePtr >> 2] | 0);
$29 = (HEAPF32[tempDoublePtr >> 2] = $27, HEAP32[tempDoublePtr >> 2] | 0);
do if (0) {
$32 = (HEAPF32[tempDoublePtr >> 2] = $21, HEAP32[tempDoublePtr >> 2] | 0) & 2147483647;
if ($32 >>> 0 <= 2139095040) {
$34 = $28 & 2147483647;
if ($34 >>> 0 <= 2139095040) {
$36 = $29 & 2147483647;
if (!(($32 | 0) == 2139095040 | $36 >>> 0 > 2139095040)) if (!(($34 | 0) == 2139095040 | ($36 | 0) == 2139095040)) break;
}
}
__Z7eprintfPKcz(11903, $vararg_buffer);
$41 = HEAP32[16082] | 0;
if ($41 | 0) {
HEAP32[$vararg_buffer1 >> 2] = 4;
HEAPF64[$vararg_buffer1 + 8 >> 3] = +$21;
HEAP32[$vararg_buffer1 + 16 >> 2] = 4;
HEAPF64[$vararg_buffer1 + 24 >> 3] = +$24;
HEAP32[$vararg_buffer1 + 32 >> 2] = 4;
HEAPF64[$vararg_buffer1 + 40 >> 3] = +$27;
_fprintf($41, 11888, $vararg_buffer1) | 0;
}
__Z5eputcc(10);
} while (0);
$53 = Math_fround(+Math_atan2(+Math_fround(Math_sqrt(Math_fround(Math_fround($27 * $27) + Math_fround(Math_fround(Math_fround($21 * $21) + Math_fround(0.0)) + Math_fround($24 * $24))))), +$17));
STACKTOP = sp;
return Math_fround($53);
}
function __ZN9Transform13setComposeInvERK6VectorRK10Quaternion($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $11 = f0, $12 = 0, $15 = 0, $16 = f0, $17 = f0, $18 = f0, $19 = 0, $20 = 0, $21 = f0, $22 = f0, $23 = f0, $24 = 0, $25 = f0, $26 = f0, $28 = f0, $29 = f0, $3 = 0, $30 = f0, $32 = f0, $33 = 0, $34 = f0, $36 = f0, $38 = f0, $4 = 0, $45 = f0, $5 = 0, $52 = f0, $6 = f0, $60 = f0, $8 = f0, $9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$3 = sp + 28 | 0;
$4 = sp;
__ZN6VectorC2ERKS_($4, $1);
$5 = $4 + 12 | 0;
$6 = Math_fround(HEAPF32[$2 >> 2]);
$8 = Math_fround(HEAPF32[$2 + 4 >> 2]);
$9 = $4 + 16 | 0;
$11 = Math_fround(HEAPF32[$2 + 8 >> 2]);
$12 = $4 + 20 | 0;
$15 = $4 + 24 | 0;
HEAP32[$15 >> 2] = HEAP32[$2 + 12 >> 2];
$16 = Math_fround(-$6);
HEAPF32[$5 >> 2] = $16;
$17 = Math_fround(-$8);
HEAPF32[$9 >> 2] = $17;
$18 = Math_fround(-$11);
HEAPF32[$12 >> 2] = $18;
__ZN6VectorC2Ev($3);
__ZNK10Quaternion12rotateVectorERK6VectorRS0_($5, $4, $3);
__ZN6Vector10setInverseEv($3);
__ZN6Vector7setFromERKS_($4, $3);
__ZN6VectorC2Ev($3);
$19 = $0 + 12 | 0;
__ZNK10Quaternion12rotateVectorERK6VectorRS0_($19, $4, $3);
__ZN6Vector6setAddERKS_($0, $3);
$20 = $0 + 16 | 0;
$21 = Math_fround(HEAPF32[$20 >> 2]);
$22 = Math_fround(HEAPF32[$12 >> 2]);
$23 = Math_fround($21 * $22);
$24 = $0 + 20 | 0;
$25 = Math_fround(HEAPF32[$24 >> 2]);
$26 = Math_fround(HEAPF32[$9 >> 2]);
$28 = Math_fround($23 - Math_fround($25 * $26));
$29 = Math_fround(HEAPF32[$19 >> 2]);
$30 = Math_fround(HEAPF32[$15 >> 2]);
$32 = Math_fround($28 + Math_fround($29 * $30));
$33 = $0 + 24 | 0;
$34 = Math_fround(HEAPF32[$33 >> 2]);
$36 = Math_fround(HEAPF32[$4 + 12 >> 2]);
$38 = Math_fround($32 + Math_fround($34 * $36));
$45 = Math_fround(Math_fround($26 * $34) + Math_fround(Math_fround($21 * $30) + Math_fround(Math_fround($25 * $36) - Math_fround($22 * $29))));
$52 = Math_fround(Math_fround($22 * $34) + Math_fround(Math_fround($25 * $30) + Math_fround(Math_fround($26 * $29) - Math_fround($21 * $36))));
$60 = Math_fround(Math_fround($30 * $34) + Math_fround(Math_fround(Math_fround(-Math_fround($29 * $36)) - Math_fround($21 * $26)) - Math_fround($22 * $25)));
HEAPF32[$19 >> 2] = $38;
HEAPF32[$20 >> 2] = $45;
HEAPF32[$24 >> 2] = $52;
HEAPF32[$33 >> 2] = $60;
STACKTOP = sp;
return;
}
function __ZL18ProcessSeqXMLMorphP7XMLCellb($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$03840 = 0, $$1 = 0, $$pre$phi$iZ2D = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $22 = 0, $26 = 0, $28 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $45 = 0, $47 = 0, $6 = 0, $7 = 0, label = 0;
if (!$0) {
$$1 = 0;
return $$1 | 0;
}
$4 = HEAP32[$0 + 8 >> 2] | 0;
if (!$4) {
$$1 = 0;
return $$1 | 0;
}
$6 = $4 + 12 | 0;
$7 = HEAP32[$6 >> 2] | 0;
if (($7 | 0) < 1) {
$$1 = 0;
return $$1 | 0;
}
if (($7 | 0) == 1) {
$$1 = __Z21ProcessSingleXMLMorphP7XMLCellb(HEAP32[HEAP32[$4 >> 2] >> 2] | 0, $1) | 0;
return $$1 | 0;
}
$13 = __Znwj(28) | 0;
$14 = $13 + 4 | 0;
HEAP32[$14 >> 2] = 0;
HEAP32[$14 + 4 >> 2] = 0;
HEAP32[$14 + 8 >> 2] = 0;
HEAP32[$14 + 12 >> 2] = 0;
HEAP32[$13 + 20 >> 2] = 3;
HEAP32[$13 >> 2] = 3324;
__THREW__ = 0;
$16 = invoke_ii(20, 16) | 0;
$17 = __THREW__;
__THREW__ = 0;
if ($17 & 1) {
$28 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($13);
___resumeException($28 | 0);
}
HEAP32[$16 + 4 >> 2] = 10;
HEAP32[$16 + 12 >> 2] = 0;
HEAP32[$16 >> 2] = 0;
HEAP32[$16 + 8 >> 2] = 0;
$22 = $13 + 24 | 0;
HEAP32[$22 >> 2] = $16;
if ((HEAP32[$6 >> 2] | 0) > 0) {
$$03840 = 0;
$33 = 0;
do {
if ($$03840 << 16 >> 16 < 0) $35 = 0; else $35 = HEAP32[(HEAP32[$4 >> 2] | 0) + ($33 << 2) >> 2] | 0;
$36 = __Z21ProcessSingleXMLMorphP7XMLCellb($35, $1) | 0;
$37 = HEAP32[$22 >> 2] | 0;
$38 = $37 + 12 | 0;
$39 = HEAP32[$38 >> 2] | 0;
if (($39 | 0) >= 0) {
if ((HEAP32[$37 + 8 >> 2] | 0) > ($39 | 0)) {
$$pre$phi$iZ2D = $39 + 1 | 0;
label = 18;
} else {
$45 = HEAP32[$37 + 4 >> 2] | 0;
$47 = $39 + 1 | 0;
__ZN13DynamicArrayPI18AbstractTimedMorphE6resizeEi($37, ($45 | 0) > ($39 | 0) ? $45 : $47 + ($39 >>> 1) | 0);
if ((HEAP32[$38 >> 2] | 0) <= ($39 | 0)) {
$$pre$phi$iZ2D = $47;
label = 18;
}
}
if ((label | 0) == 18) {
label = 0;
HEAP32[$38 >> 2] = $$pre$phi$iZ2D;
}
HEAP32[(HEAP32[$37 >> 2] | 0) + ($39 << 2) >> 2] = $36;
}
$$03840 = $$03840 + 1 << 16 >> 16;
$33 = $$03840 << 16 >> 16;
} while ((HEAP32[$6 >> 2] | 0) > ($33 | 0));
$26 = HEAP32[$13 >> 2] | 0;
} else $26 = 3324;
FUNCTION_TABLE_vii[HEAP32[$26 + 52 >> 2] & 255]($13, $0);
$$1 = $13;
return $$1 | 0;
}
function __ZN7Gesture16installHandStuffERK12TwoHandStuff($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $13 = 0, $16 = 0, $19 = 0, $28 = 0, $3 = 0, $31 = 0, $34 = 0, $39 = 0, $45 = 0, $48 = 0, $54 = 0, $57 = 0, $6 = 0, $60 = 0, $63 = 0, $70 = 0, $73 = 0, $76 = 0, $81 = 0;
$3 = HEAP32[$0 + 28 >> 2] | 0;
if ($3 | 0) {
$6 = HEAP8[$0 + 13 >> 0] | 0;
if ((1 << (($6 & 255) >>> 6 & 1 ^ 3) & 255 & $6) << 24 >> 24) {
$13 = $3 + 20 | 0;
if (Math_fround(HEAPF32[$13 >> 2]) == Math_fround(0.0)) {
$16 = $3 + 24 | 0;
if (Math_fround(HEAPF32[$16 >> 2]) == Math_fround(0.0)) {
$19 = $3 + 28 | 0;
if (!(($13 | 0) == ($1 | 0) ? 1 : Math_fround(HEAPF32[$19 >> 2]) != Math_fround(0.0))) {
HEAP32[$13 >> 2] = HEAP32[$1 >> 2];
HEAP32[$16 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$19 >> 2] = HEAP32[$1 + 8 >> 2];
}
}
}
$28 = $3 + 32 | 0;
if (Math_fround(HEAPF32[$28 >> 2]) == Math_fround(0.0)) {
$31 = $3 + 36 | 0;
if (!(Math_fround(HEAPF32[$31 >> 2]) != Math_fround(0.0))) {
$34 = $1 + 12 | 0;
if (($28 | 0) != ($34 | 0)) {
HEAP32[$28 >> 2] = HEAP32[$34 >> 2];
HEAP32[$31 >> 2] = HEAP32[$1 + 16 >> 2];
}
}
}
$39 = $3 + 56 | 0;
if (!(HEAP32[$39 >> 2] | 0)) HEAP32[$39 >> 2] = HEAP32[$1 + 36 >> 2];
}
}
$45 = HEAP32[$0 + 32 >> 2] | 0;
if (!$45) return;
$48 = HEAP8[$0 + 13 >> 0] | 0;
if (!((1 << (($48 & 255) >>> 6 | 2) & 255 & $48) << 24 >> 24)) return;
$54 = $45 + 20 | 0;
if (Math_fround(HEAPF32[$54 >> 2]) == Math_fround(0.0)) {
$57 = $45 + 24 | 0;
if (Math_fround(HEAPF32[$57 >> 2]) == Math_fround(0.0)) {
$60 = $45 + 28 | 0;
if (!(Math_fround(HEAPF32[$60 >> 2]) != Math_fround(0.0))) {
$63 = $1 + 44 | 0;
if (($54 | 0) != ($63 | 0)) {
HEAP32[$54 >> 2] = HEAP32[$63 >> 2];
HEAP32[$57 >> 2] = HEAP32[$1 + 48 >> 2];
HEAP32[$60 >> 2] = HEAP32[$1 + 52 >> 2];
}
}
}
}
$70 = $45 + 32 | 0;
if (Math_fround(HEAPF32[$70 >> 2]) == Math_fround(0.0)) {
$73 = $45 + 36 | 0;
if (!(Math_fround(HEAPF32[$73 >> 2]) != Math_fround(0.0))) {
$76 = $1 + 56 | 0;
if (($70 | 0) != ($76 | 0)) {
HEAP32[$70 >> 2] = HEAP32[$76 >> 2];
HEAP32[$73 >> 2] = HEAP32[$1 + 60 >> 2];
}
}
}
$81 = $45 + 56 | 0;
if (HEAP32[$81 >> 2] | 0) return;
HEAP32[$81 >> 2] = HEAP32[$1 + 80 >> 2];
return;
}
function __ZN17NonmanualMovementD2Ev($0) {
$0 = $0 | 0;
var $$02757 = 0, $$02858 = 0, $$09$i = 0, $$lcssa63 = 0, $$pre = 0, $$sroa$637$0$copyload = 0, $1 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $40 = 0, $44 = 0, $46 = 0, $48 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $57 = 0, $8 = 0;
HEAP32[$0 >> 2] = 2136;
$1 = $0 + 4 | 0;
$2 = HEAP32[$1 >> 2] | 0;
do if ($2 | 0) {
$5 = HEAP32[$2 + 12 >> 2] | 0;
if (($5 | 0) > 0) {
$$02858 = 0;
$8 = $2;
do {
if ((HEAP32[$8 + 12 >> 2] | 0) > ($$02858 | 0)) $15 = HEAP32[(HEAP32[$8 >> 2] | 0) + ($$02858 << 2) >> 2] | 0; else $15 = 0;
$14 = $15 + 12 | 0;
$16 = HEAP32[$14 >> 2] | 0;
if (($16 | 0) > 0) {
$$02757 = 0;
do {
if ((HEAP32[$14 >> 2] | 0) > ($$02757 | 0)) {
$$sroa$637$0$copyload = HEAP32[(HEAP32[$15 >> 2] | 0) + ($$02757 * 28 | 0) + 8 >> 2] | 0;
if ($$sroa$637$0$copyload | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$$sroa$637$0$copyload >> 2] | 0) + 4 >> 2] & 255]($$sroa$637$0$copyload);
}
$$02757 = $$02757 + 1 | 0;
} while (($$02757 | 0) < ($16 | 0));
}
$$02858 = $$02858 + 1 | 0;
$8 = HEAP32[$1 >> 2] | 0;
} while (($$02858 | 0) < ($5 | 0));
if (!$8) break; else $$lcssa63 = $8;
} else $$lcssa63 = $2;
$31 = HEAP32[$$lcssa63 >> 2] | 0;
if (!$31) $49 = $$lcssa63; else {
$33 = $$lcssa63 + 12 | 0;
$34 = HEAP32[$33 >> 2] | 0;
if (($34 | 0) > 0) {
$$09$i = 0;
$37 = $31;
$57 = $34;
while (1) {
$38 = HEAP32[$37 + ($$09$i << 2) >> 2] | 0;
if (!$38) $46 = $57; else {
$40 = HEAP32[$38 >> 2] | 0;
if ($40 | 0) _free($40);
__ZdlPv($38);
HEAP32[(HEAP32[$$lcssa63 >> 2] | 0) + ($$09$i << 2) >> 2] = 0;
$46 = HEAP32[$33 >> 2] | 0;
}
$44 = $$09$i + 1 | 0;
if (($44 | 0) >= ($46 | 0)) break;
$$09$i = $44;
$37 = HEAP32[$$lcssa63 >> 2] | 0;
$57 = $46;
}
$$pre = HEAP32[$1 >> 2] | 0;
if (!$$pre) break; else $49 = $$pre;
} else $49 = $$lcssa63;
}
$48 = HEAP32[$49 >> 2] | 0;
if ($48 | 0) _free($48);
__ZdlPv($49);
HEAP32[$1 >> 2] = 0;
} while (0);
$51 = $0 + 20 | 0;
$52 = HEAP32[$51 >> 2] | 0;
if (!$52) return;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$52 >> 2] | 0) + 4 >> 2] & 255]($52);
HEAP32[$51 >> 2] = 0;
return;
}
function __ZN20HanimAnimationRecord10animateARPEP13DynamicArrayPI7GestureEPFvPvPKciiEPFbS4_P7SSFrameEPFvS4_P10PostMortemES4_($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
var $14 = f0, $20 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $35 = 0, $37 = 0, $39 = 0, $45 = 0, $49 = 0, $53 = 0, $55 = 0, $57 = 0, $58 = 0, $6 = 0, $62 = 0, $63 = 0, $9 = 0;
HEAP32[$0 >> 2] = $1;
$6 = $0 + 64 | 0;
HEAP32[$6 >> 2] = $2;
HEAP32[$0 + 68 >> 2] = $3;
HEAP32[$0 + 72 >> 2] = $4;
$9 = $0 + 76 | 0;
HEAP32[$9 >> 2] = $5;
if (!$1) return;
if (!(HEAP32[$1 + 12 >> 2] | 0)) return;
$14 = Math_fround(__Z9totalTimePK13DynamicArrayPI7GestureE($1));
HEAPF32[$0 + 112 >> 2] = $14;
if ($14 == Math_fround(0.0)) return;
$20 = ~~Math_fround($14 / Math_fround(HEAPF32[$0 + 8 >> 2]));
HEAP32[$0 + 116 >> 2] = $20 + 1;
if (($20 | 0) < 1) return;
__ZL18MakeARPFrameBufferP11HanimAvatarb(HEAP32[$0 + 4 >> 2] | 0, (HEAP8[$0 + 24 >> 0] | 0) != 0);
__ZN20HanimAnimationRecord14printARPHeaderEv($0);
$29 = $0 + 52 | 0;
HEAP32[$29 >> 2] = 0;
$30 = HEAP32[$0 >> 2] | 0;
$32 = HEAP32[$30 + 12 >> 2] | 0;
$33 = $32 + -1 | 0;
L13 : do if (($32 | 0) > 0) {
$35 = $0 + 108 | 0;
$37 = 0;
$39 = $30;
while (1) {
if (($37 | 0) < 0) $49 = 0; else if ((HEAP32[$39 + 12 >> 2] | 0) > ($37 | 0)) $49 = HEAP32[(HEAP32[$39 >> 2] | 0) + ($37 << 2) >> 2] | 0; else $49 = 0;
$45 = HEAP32[$6 >> 2] | 0;
if (!$45) $53 = $37; else {
FUNCTION_TABLE_viiii[$45 & 15](HEAP32[$9 >> 2] | 0, HEAP32[$49 + 8 >> 2] | 0, $37, HEAP32[$35 >> 2] | 0);
$53 = HEAP32[$29 >> 2] | 0;
}
__ZN20HanimAnimationRecord21generate1ARPAnimationEP7Gestureb($0, $49, ($53 | 0) == ($33 | 0));
$55 = (HEAP32[$29 >> 2] | 0) + 1 | 0;
HEAP32[$29 >> 2] = $55;
if (($55 | 0) >= ($32 | 0)) break L13;
$37 = $55;
$39 = HEAP32[$0 >> 2] | 0;
}
} while (0);
$57 = $0 + 96 | 0;
$58 = HEAP32[$57 >> 2] | 0;
if ($58 | 0) {
if ((HEAP32[$0 + 20 >> 2] | 0) == 3) {
_fwrite(12391, 10, 1, $58) | 0;
_fwrite(12402, 7, 1, $58) | 0;
$62 = HEAP32[$57 >> 2] | 0;
} else $62 = $58;
_fclose($62) | 0;
HEAP32[$57 >> 2] = 0;
}
$63 = HEAP32[16165] | 0;
if (!$63) return;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$63 >> 2] | 0) + 4 >> 2] & 255]($63);
HEAP32[16165] = 0;
return;
}
function __ZN12ThumbBending7BetweenERKS_f($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
var $$sink = f0, $$sink12 = f0, $$sink3 = f0, $$sink6 = f0, $$sink9 = f0, $11 = 0, $12 = f0, $13 = 0, $15 = f0, $21 = 0, $22 = f0, $23 = 0, $25 = f0, $3 = f0, $31 = 0, $32 = f0, $33 = 0, $35 = f0, $4 = 0, $41 = 0, $42 = f0, $43 = 0, $45 = f0, $5 = f0, label = 0;
$3 = Math_fround(HEAPF32[$0 >> 2]);
$4 = $3 == Math_fround(-100.0);
$5 = Math_fround(HEAPF32[$1 >> 2]);
if ($4) {
$$sink = $5;
label = 4;
} else if (!($5 == Math_fround(-100.0))) {
$$sink = Math_fround(Math_fround(Math_fround(Math_fround(1.0) - $2) * $3) + Math_fround($5 * $2));
label = 4;
}
if ((label | 0) == 4) HEAPF32[$0 >> 2] = $$sink;
$11 = $0 + 4 | 0;
$12 = Math_fround(HEAPF32[$11 >> 2]);
$13 = $12 == Math_fround(-100.0);
$15 = Math_fround(HEAPF32[$1 + 4 >> 2]);
if ($13) {
$$sink3 = $15;
label = 8;
} else if (!($15 == Math_fround(-100.0))) {
$$sink3 = Math_fround(Math_fround(Math_fround(Math_fround(1.0) - $2) * $12) + Math_fround($15 * $2));
label = 8;
}
if ((label | 0) == 8) HEAPF32[$11 >> 2] = $$sink3;
$21 = $0 + 8 | 0;
$22 = Math_fround(HEAPF32[$21 >> 2]);
$23 = $22 == Math_fround(-100.0);
$25 = Math_fround(HEAPF32[$1 + 8 >> 2]);
if ($23) {
$$sink6 = $25;
label = 12;
} else if (!($25 == Math_fround(-100.0))) {
$$sink6 = Math_fround(Math_fround(Math_fround(Math_fround(1.0) - $2) * $22) + Math_fround($25 * $2));
label = 12;
}
if ((label | 0) == 12) HEAPF32[$21 >> 2] = $$sink6;
$31 = $0 + 12 | 0;
$32 = Math_fround(HEAPF32[$31 >> 2]);
$33 = $32 == Math_fround(-100.0);
$35 = Math_fround(HEAPF32[$1 + 12 >> 2]);
if ($33) {
$$sink9 = $35;
label = 16;
} else if (!($35 == Math_fround(-100.0))) {
$$sink9 = Math_fround(Math_fround(Math_fround(Math_fround(1.0) - $2) * $32) + Math_fround($35 * $2));
label = 16;
}
if ((label | 0) == 16) HEAPF32[$31 >> 2] = $$sink9;
$41 = $0 + 16 | 0;
$42 = Math_fround(HEAPF32[$41 >> 2]);
$43 = $42 == Math_fround(-100.0);
$45 = Math_fround(HEAPF32[$1 + 16 >> 2]);
do if ($43) $$sink12 = $45; else if ($45 == Math_fround(-100.0)) return; else {
$$sink12 = Math_fround(Math_fround(Math_fround(Math_fround(1.0) - $2) * $42) + Math_fround($45 * $2));
break;
} while (0);
HEAPF32[$41 >> 2] = $$sink12;
return;
}
function __ZL12ProcessSpeedP7XMLCellP7Gesture($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $10 = f0, $12 = 0, $2 = 0, $20 = 0.0, $22 = f0, $25 = 0, $26 = f0, $3 = 0, $33 = f0, $35 = 0.0, $37 = f0, $4 = 0, $40 = 0, $46 = f0, $48 = 0.0, $6 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$2 = sp + 32 | 0;
$3 = sp + 28 | 0;
$4 = sp + 24 | 0;
if (!$1) {
STACKTOP = sp;
return;
}
$6 = $1 + 44 | 0;
if (!(HEAP32[$6 >> 2] | 0)) {
STACKTOP = sp;
return;
}
HEAPF32[$2 >> 2] = Math_fround(-1.0);
do if (__ZN7XMLCell11attrib_REALERfPKc($0, $2, 51282) | 0) {
$10 = Math_fround(HEAPF32[$2 >> 2]);
if (!($10 > Math_fround(0.0))) {
__Z7LogTimev() | 0;
$20 = +Math_fround(HEAPF32[$2 >> 2]);
HEAPF64[$vararg_buffer >> 3] = $20;
__Z7eprintfPKcz(31030, $vararg_buffer);
break;
}
$12 = HEAP32[$6 >> 2] | 0;
if (Math_fround(HEAPF32[$12 + 40 >> 2]) != $10) FUNCTION_TABLE_vifi[HEAP32[(HEAP32[$12 >> 2] | 0) + 64 >> 2] & 7]($12, $10, 1);
} while (0);
do if (__ZN7XMLCell11attrib_REALERfPKc($0, $3, 51301) | 0) {
$22 = Math_fround(HEAPF32[$3 >> 2]);
if (!($22 > Math_fround(0.0))) {
__Z7LogTimev() | 0;
$35 = +Math_fround(HEAPF32[$3 >> 2]);
HEAPF64[$vararg_buffer1 >> 3] = $35;
__Z7eprintfPKcz(31060, $vararg_buffer1);
break;
}
if ($22 != Math_fround(1.0)) {
$25 = HEAP32[$6 >> 2] | 0;
$26 = Math_fround(Math_fround(1.0) / $22);
if ($26 != Math_fround(1.0)) {
$33 = Math_fround($26 * Math_fround(HEAPF32[$25 + 40 >> 2]));
FUNCTION_TABLE_vifi[HEAP32[(HEAP32[$25 >> 2] | 0) + 64 >> 2] & 7]($25, $33, 1);
}
}
} while (0);
do if (__ZN7XMLCell11attrib_REALERfPKc($0, $4, 51291) | 0) {
$37 = Math_fround(HEAPF32[$4 >> 2]);
if (!($37 > Math_fround(0.0))) {
__Z7LogTimev() | 0;
$48 = +Math_fround(HEAPF32[$4 >> 2]);
HEAPF64[$vararg_buffer4 >> 3] = $48;
__Z7eprintfPKcz(31087, $vararg_buffer4);
break;
}
if ($37 != Math_fround(1.0)) {
$40 = HEAP32[$6 >> 2] | 0;
$46 = Math_fround($37 * Math_fround(HEAPF32[$40 + 40 >> 2]));
FUNCTION_TABLE_vifi[HEAP32[(HEAP32[$40 >> 2] | 0) + 64 >> 2] & 7]($40, $46, 1);
}
} while (0);
STACKTOP = sp;
return;
}
function __GLOBAL__sub_I_SkelTopology_cpp() {
HEAPF32[16541] = Math_fround(1.57079637);
HEAPF32[16542] = Math_fround(3.14159274);
HEAPF32[16543] = Math_fround(1.41421354);
HEAPF32[16544] = Math_fround(0.0);
HEAPF32[16545] = Math_fround(0.0);
HEAPF32[16546] = Math_fround(0.0);
HEAPF32[16169] = Math_fround(1.0);
HEAPF32[16170] = Math_fround(1.0);
HEAPF32[16171] = Math_fround(1.0);
HEAPF32[16172] = Math_fround(1.0);
HEAPF32[16173] = Math_fround(1.0);
HEAPF32[16174] = Math_fround(.75);
HEAPF32[16175] = Math_fround(.5);
HEAPF32[16176] = Math_fround(2.0);
HEAPF32[16177] = Math_fround(.5);
HEAPF32[16178] = Math_fround(1.0);
HEAPF32[16179] = Math_fround(0.0);
HEAPF32[16180] = Math_fround(0.0);
HEAPF32[16181] = Math_fround(1.0);
HEAPF32[16182] = Math_fround(1.0);
HEAPF32[16183] = Math_fround(1.0);
HEAPF32[16184] = Math_fround(1.0);
HEAPF32[16185] = Math_fround(1.0);
HEAPF32[16186] = Math_fround(1.0);
HEAPF32[16187] = Math_fround(1.0);
HEAPF32[16188] = Math_fround(1.0);
HEAPF32[16189] = Math_fround(1.0);
HEAPF32[16190] = Math_fround(1.0);
HEAPF32[16191] = Math_fround(1.0);
HEAPF32[16192] = Math_fround(1.0);
HEAPF32[16193] = Math_fround(1.0);
HEAPF32[16194] = Math_fround(1.0);
HEAPF32[16195] = Math_fround(1.0);
HEAPF32[16196] = Math_fround(1.0);
HEAPF32[16197] = Math_fround(1.0);
HEAPF32[16198] = Math_fround(1.0);
HEAPF32[16199] = Math_fround(1.0);
HEAPF32[16200] = Math_fround(1.0);
HEAPF32[16201] = Math_fround(1.0);
HEAPF32[16202] = Math_fround(0.0);
HEAPF32[16203] = Math_fround(1.0);
HEAPF32[16204] = Math_fround(1.0);
HEAPF32[16205] = Math_fround(1.0);
__ZN14AvatarGeometryC2Ev(64824);
__ZN15GestureGeometryC2Ev(64864);
HEAPF32[16340] = Math_fround(1.08083904);
HEAPF32[16341] = Math_fround(.43662715);
HEAPF32[16342] = Math_fround(.145628378);
HEAPF32[16343] = Math_fround(.145628378);
HEAPF32[16344] = Math_fround(.217111319);
HEAPF32[16345] = Math_fround(0.0);
HEAPF32[16346] = Math_fround(-.416438609);
HEAPF32[16347] = Math_fround(-.286938757);
HEAPF32[16348] = Math_fround(-.484477937);
HEAPF32[16349] = Math_fround(-.909753143);
__ZN18SphereInterpolatorC2Ev(65420);
__ZN18SphereInterpolatorC2Ev(65760);
__ZN6VectorC2Efff(66188, Math_fround(0.0), Math_fround(-.0450000018), Math_fround(-.0700000003));
return;
}
function __ZNK11ParMovement5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$024 = 0, $$lcssa = 0, $19 = 0, $20 = 0, $23 = 0, $25 = 0, $27 = 0, $30 = 0, $31 = 0, $37 = 0, $4 = 0, $45 = 0, $sext = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
HEAP32[$vararg_buffer >> 2] = $0;
_fprintf($1, 42645, $vararg_buffer) | 0;
__ZNK13BasicMovement5printEP8_IO_FILE($0, $1);
$4 = $0 + 544 | 0;
if (Math_fround(HEAPF32[$4 >> 2]) != Math_fround(0.0)) label = 5; else if (Math_fround(HEAPF32[$0 + 548 >> 2]) != Math_fround(0.0)) label = 5; else if (Math_fround(HEAPF32[$0 + 552 >> 2]) != Math_fround(0.0)) label = 5;
if ((label | 0) == 5) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(42662, 19, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($4, $1, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$19 = $0 + 540 | 0;
$20 = HEAP32[$19 >> 2] | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$sext = $20 << 16;
$23 = $sext >> 16;
HEAP32[$vararg_buffer1 >> 2] = $23;
_fprintf($1, 42682, $vararg_buffer1) | 0;
$25 = (HEAP16[36078] | 0) + 1 << 16 >> 16;
HEAP16[36078] = $25;
if (($sext | 0) > 0) {
$27 = $0 + 528 | 0;
$$024 = 0;
$30 = $25;
$31 = 0;
while (1) {
__Z11printIndentP8_IO_FILEi($1, $30 << 16 >> 16);
HEAP32[$vararg_buffer4 >> 2] = $31;
_fprintf($1, 42708, $vararg_buffer4) | 0;
if ($$024 << 16 >> 16 < 0) label = 12; else if ((HEAP32[$19 >> 2] | 0) > ($31 | 0)) {
$37 = HEAP32[(HEAP32[$27 >> 2] | 0) + ($31 << 2) >> 2] | 0;
if (!$37) label = 12; else FUNCTION_TABLE_vii[HEAP32[(HEAP32[$37 >> 2] | 0) + 72 >> 2] & 255]($37, $1);
} else label = 12;
if ((label | 0) == 12) {
label = 0;
_fwrite(61277, 6, 1, $1) | 0;
}
$$024 = $$024 + 1 << 16 >> 16;
$31 = $$024 << 16 >> 16;
$45 = HEAP16[36078] | 0;
if (($23 | 0) <= ($31 | 0)) {
$$lcssa = $45;
break;
} else $30 = $45;
}
} else $$lcssa = $25;
HEAP16[36078] = $$lcssa + -1 << 16 >> 16;
STACKTOP = sp;
return;
}
function __ZN7XMLCell15attrib_REALVEC3ER6VectorPKcRKS0_($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$012$i$i$i$i = 0, $$01215$i$i$i$i = 0, $$01216$i$i$i$i = 0, $$sink$i$i$i$i = 0, $13 = 0, $14 = 0, $26 = 0, $29 = 0.0, $32 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $4 = 0, $40 = f0, $42 = f0, $5 = 0, $6 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$vararg_buffer3 = sp + 40 | 0;
$vararg_buffer = sp + 24 | 0;
$4 = sp + 16 | 0;
$5 = sp + 8 | 0;
$6 = sp;
$8 = HEAP32[$0 + 4 >> 2] | 0;
if (!(($2 | 0) == 0 | ($8 | 0) == 0)) {
$13 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($2, HEAP32[$8 + 4 >> 2] | 0) | 0;
$14 = HEAP32[$8 >> 2] | 0;
L3 : do if ((HEAP16[$14 + ($13 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i$i = HEAP32[$14 + ($13 << 3) >> 2] | 0;
if (!$$01215$i$i$i$i) label = 7; else {
$$01216$i$i$i$i = $$01215$i$i$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($2, HEAP32[$$01216$i$i$i$i >> 2] | 0) | 0) break;
$$012$i$i$i$i = HEAP32[$$01216$i$i$i$i + 8 >> 2] | 0;
if (!$$012$i$i$i$i) {
label = 7;
break L3;
} else $$01216$i$i$i$i = $$012$i$i$i$i;
}
$$sink$i$i$i$i = $$01216$i$i$i$i + 4 | 0;
}
} else label = 7; while (0);
if ((label | 0) == 7) $$sink$i$i$i$i = $8 + 20 | 0;
$26 = HEAP32[$$sink$i$i$i$i >> 2] | 0;
if ($26 | 0) {
$29 = +Math_fround(HEAPF32[$3 >> 2]);
HEAPF64[$4 >> 3] = $29;
$32 = +Math_fround(HEAPF32[$3 + 4 >> 2]);
HEAPF64[$5 >> 3] = $32;
$35 = +Math_fround(HEAPF32[$3 + 8 >> 2]);
HEAPF64[$6 >> 3] = $35;
HEAP32[$vararg_buffer >> 2] = $4;
HEAP32[$vararg_buffer + 4 >> 2] = $5;
HEAP32[$vararg_buffer + 8 >> 2] = $6;
$36 = _sscanf($26, 54499, $vararg_buffer) | 0;
$37 = ($36 | 0) == 3;
if (!($37 | 1 == 0)) {
HEAP32[$vararg_buffer3 >> 2] = $36;
HEAP32[$vararg_buffer3 + 4 >> 2] = $2;
__Z7eprintfPKcz(54511, $vararg_buffer3);
}
$40 = Math_fround(+HEAPF64[$4 >> 3]);
$42 = Math_fround(+HEAPF64[$5 >> 3]);
__ZN6Vector7setFromEfff($1, $40, $42, Math_fround(+HEAPF64[$6 >> 3]));
$$0 = $37;
STACKTOP = sp;
return $$0 | 0;
}
}
__ZN6Vector7setFromERKS_($1, $3);
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
function __ZN5SiGML21convertCurveDirectionER6VectorRKS0_10Direction2($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $10 = f0, $12 = f0, $15 = f0, $17 = f0, $20 = f0, $21 = 0, $23 = f0, $24 = f0, $25 = f0, $28 = f0, $3 = 0, $32 = f0, $34 = f0, $37 = f0, $4 = 0, $41 = f0, $44 = 0, $5 = 0, $6 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$3 = sp + 36 | 0;
$4 = sp + 24 | 0;
$5 = sp + 12 | 0;
$6 = sp;
if (!(Math_fround(HEAPF32[$1 + 8 >> 2]) == Math_fround(0.0))) {
$37 = Math_fround(__ZNK6Vector8lengthsqEv($1));
__ZN6VectorC2ERKS_($3, $1);
__ZN6Vector7setUnitEv($3) | 0;
__ZN6VectorC2ERKS_($4, $1);
__ZN6Vector8setScaleEf($4, Math_fround(Math_fround(HEAPF32[$1 + 4 >> 2]) / $37));
__ZN6VectorC2ERKS_($5, 64540);
__ZN6Vector11setSubtractERKS_($5, $4);
__ZN6Vector7setUnitEv($5) | 0;
__ZN6VectorC2Ev($6);
__ZN6Vector15setCrossProductERKS_S1_($6, $3, $5);
$41 = Math_fround(HEAPF32[$2 >> 2]);
$44 = Math_fround(HEAPF32[$3 + 8 >> 2]) > Math_fround(0.0);
__ZN6Vector8setScaleEf($6, Math_fround(-Math_fround($41 * ($44 ? Math_fround(1.0) : Math_fround(-1.0)))));
__ZN6Vector8setScaleEf($5, Math_fround(HEAPF32[$2 + 4 >> 2]));
__ZN6Vector7setFromERKS_($0, $6);
__ZN6Vector6setAddERKS_($0, $5);
__ZN6Vector7setUnitEv($0) | 0;
STACKTOP = sp;
return;
}
$10 = Math_fround(HEAPF32[$1 >> 2]);
if ($10 == Math_fround(0.0)) {
$12 = Math_fround(HEAPF32[$2 >> 2]);
__ZN6Vector7setFromEfff($0, $12, Math_fround(0.0), Math_fround(HEAPF32[$2 + 4 >> 2]));
__ZN6Vector7setUnitEv($0) | 0;
STACKTOP = sp;
return;
}
$15 = Math_fround($10 * $10);
$17 = Math_fround(HEAPF32[$1 + 4 >> 2]);
$20 = Math_fround(Math_sqrt(Math_fround($15 + Math_fround($17 * $17))));
$21 = $10 < Math_fround(0.0);
$23 = Math_fround(HEAPF32[$2 + 4 >> 2]);
$24 = Math_fround($17 * $23);
if ($21) {
$25 = Math_fround($24 / $20);
$28 = Math_fround(Math_fround(-Math_fround($10 * $23)) / $20);
__ZN6Vector7setFromEfff($0, $25, $28, Math_fround(-Math_fround(HEAPF32[$2 >> 2])));
} else {
$32 = Math_fround(Math_fround(-$24) / $20);
$34 = Math_fround(Math_fround($10 * $23) / $20);
__ZN6Vector7setFromEfff($0, $32, $34, Math_fround(-Math_fround(HEAPF32[$2 >> 2])));
}
__ZN6Vector7setUnitEv($0) | 0;
STACKTOP = sp;
return;
}
function __ZNK19OneHAbstractPosture18printLocationSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$$i = 0, $11 = 0, $2 = 0, $20 = 0, $22 = 0, $3 = 0;
$2 = $0 + 4 | 0;
$3 = HEAPU16[$2 >> 1] | HEAPU8[$2 + 2 >> 0] << 16;
$$$i = ($3 & 1015808 | 0) != 0 | (($3 & 255) + -1 | 0) >>> 0 < 11;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
$11 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36843, 1) | 0;
if ($$$i) __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($11, 51362, 13) | 0, 49554, 1) | 0; else __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($11, 51376, 16) | 0, 49554, 1) | 0;
__ZNK10SiteIDPair17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE($2, $1);
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36571, 2) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6SiteID10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE($0 + 16 | 0, $1);
$20 = (HEAP16[36078] | 0) + -1 << 16 >> 16;
HEAP16[36078] = $20;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, $20 << 16 >> 16);
$22 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36574, 2) | 0;
if ($$$i) {
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($22, 51362, 13) | 0, 36571, 2) | 0;
return;
} else {
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($22, 51376, 16) | 0, 36571, 2) | 0;
return;
}
}
function _mbrtowc($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$ = 0, $$0 = 0, $$03952 = 0, $$04051 = 0, $$04350 = 0, $$1 = 0, $$141 = 0, $$144 = 0, $$2 = 0, $$47 = 0, $12 = 0, $18 = 0, $22 = 0, $26 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $4 = 0, $44 = 0, $54 = 0, $6 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$4 = sp;
$$ = ($3 | 0) == 0 ? 72032 : $3;
$6 = HEAP32[$$ >> 2] | 0;
L1 : do if (!$1) if (!$6) $$0 = 0; else label = 17; else {
$$47 = ($0 | 0) == 0 ? $4 : $0;
if (!$2) $$0 = -2; else {
if (!$6) {
$12 = HEAP8[$1 >> 0] | 0;
if ($12 << 24 >> 24 > -1) {
HEAP32[$$47 >> 2] = $12 & 255;
$$0 = $12 << 24 >> 24 != 0 & 1;
break;
}
$18 = (___pthread_self_417() | 0) + 188 | 0;
$22 = HEAP8[$1 >> 0] | 0;
if (!(HEAP32[HEAP32[$18 >> 2] >> 2] | 0)) {
HEAP32[$$47 >> 2] = $22 << 24 >> 24 & 57343;
$$0 = 1;
break;
}
$26 = ($22 & 255) + -194 | 0;
if ($26 >>> 0 > 50) {
label = 17;
break;
}
$30 = HEAP32[7124 + ($26 << 2) >> 2] | 0;
$31 = $2 + -1 | 0;
if (!$31) $$2 = $30; else {
$$03952 = $1 + 1 | 0;
$$04051 = $30;
$$04350 = $31;
label = 11;
}
} else {
$$03952 = $1;
$$04051 = $6;
$$04350 = $2;
label = 11;
}
L14 : do if ((label | 0) == 11) {
$33 = HEAP8[$$03952 >> 0] | 0;
$35 = ($33 & 255) >>> 3;
if (($35 + -16 | $35 + ($$04051 >> 26)) >>> 0 > 7) {
label = 17;
break L1;
} else {
$$1 = $$03952;
$$141 = $$04051;
$$144 = $$04350;
$44 = $33;
}
while (1) {
$$1 = $$1 + 1 | 0;
$$141 = ($44 & 255) + -128 | $$141 << 6;
$$144 = $$144 + -1 | 0;
if (($$141 | 0) >= 0) break;
if (!$$144) {
$$2 = $$141;
break L14;
}
$44 = HEAP8[$$1 >> 0] | 0;
if (($44 & -64) << 24 >> 24 != -128) {
label = 17;
break L1;
}
}
HEAP32[$$ >> 2] = 0;
HEAP32[$$47 >> 2] = $$141;
$$0 = $2 - $$144 | 0;
break L1;
} while (0);
HEAP32[$$ >> 2] = $$2;
$$0 = -2;
}
} while (0);
if ((label | 0) == 17) {
HEAP32[$$ >> 2] = 0;
$54 = ___errno_location() | 0;
HEAP32[$54 >> 2] = 84;
$$0 = -1;
}
STACKTOP = sp;
return $$0 | 0;
}
function __ZN11HanimAvatar18computeObjectSizesEv($0) {
$0 = $0 | 0;
var $$0161$i = 0, $$0161$i25 = 0, $$02$i = f0, $$02$i24 = f0, $$028 = 0, $$1$i = f0, $$1$i26 = f0, $$2$i = f0, $$2$i27 = f0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $25 = f0, $31 = 0, $33 = 0, $40 = f0, $48 = f0, $49 = 0, $50 = f0, $53 = 0, $8 = 0;
$1 = $0 + 104 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if (!$2) return;
if ((HEAP32[$2 + 12 >> 2] | 0) > 0) {
$$028 = 0;
$8 = $2;
} else return;
while (1) {
$10 = HEAP32[(HEAP32[$8 >> 2] | 0) + ($$028 << 2) >> 2] | 0;
$11 = $10 + 28 | 0;
if (Math_fround(HEAPF32[$11 >> 2]) == Math_fround(0.0)) {
$14 = $10 + 68 | 0;
$16 = HEAP32[$10 + 12 >> 2] | 0;
if (!$16) $$2$i = Math_fround(0.0); else {
$18 = $16 + 12 | 0;
if ((HEAP32[$18 >> 2] | 0) > 0) {
$$0161$i = 0;
$$02$i = Math_fround(0.0);
while (1) {
$25 = Math_fround(__ZNK6Vector10distanceSqERKS_($14, (HEAP32[(HEAP32[$16 >> 2] | 0) + ($$0161$i << 2) >> 2] | 0) + 68 | 0));
$$1$i = $$02$i > $25 ? $25 : $$02$i;
$$0161$i = $$0161$i + 1 | 0;
if (($$0161$i | 0) >= (HEAP32[$18 >> 2] | 0)) {
$$2$i = $$1$i;
break;
} else $$02$i = $$1$i;
}
} else $$2$i = Math_fround(0.0);
}
$31 = HEAP32[$10 + 16 >> 2] | 0;
if (!$31) $$2$i27 = Math_fround(0.0); else {
$33 = $31 + 12 | 0;
if ((HEAP32[$33 >> 2] | 0) > 0) {
$$0161$i25 = 0;
$$02$i24 = Math_fround(0.0);
while (1) {
$40 = Math_fround(__ZNK6Vector10distanceSqERKS_($14, (HEAP32[(HEAP32[$31 >> 2] | 0) + ($$0161$i25 << 2) >> 2] | 0) + 40 | 0));
$$1$i26 = $$02$i24 > $40 ? $40 : $$02$i24;
$$0161$i25 = $$0161$i25 + 1 | 0;
if (($$0161$i25 | 0) >= (HEAP32[$33 >> 2] | 0)) {
$$2$i27 = $$1$i26;
break;
} else $$02$i24 = $$1$i26;
}
} else $$2$i27 = Math_fround(0.0);
}
$48 = Math_fround(Math_fround(Math_sqrt(Math_fround($$2$i < $$2$i27 ? $$2$i : $$2$i27))) * Math_fround(.300000012));
$49 = $48 == Math_fround(0.0);
$50 = $49 ? Math_fround(.0199999996) : $48;
HEAPF32[$11 >> 2] = $50;
$53 = HEAP32[$1 >> 2] | 0;
} else $53 = $8;
$$028 = $$028 + 1 | 0;
if (($$028 | 0) >= (HEAP32[$53 + 12 >> 2] | 0)) break; else $8 = $53;
}
return;
}
function _parserInit($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0$i = 0, $13 = 0, $15 = 0, $19 = 0, $20 = 0, $23 = 0, $29 = 0, $31 = 0, $33 = 0, $38 = 0, $40 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, dest = 0, stop = 0;
HEAP32[$0 + 264 >> 2] = 27;
_XmlPrologStateInit($0 + 252 | 0);
L1 : do if (!$1) $23 = 0; else {
$5 = $0 + 400 | 0;
$6 = $0 + 412 | 0;
$7 = $0 + 408 | 0;
$$0$i = $1;
while (1) {
$8 = HEAP32[$6 >> 2] | 0;
if (($8 | 0) == (HEAP32[$7 >> 2] | 0)) {
if (!((_poolGrow($5) | 0) << 24 >> 24)) {
$23 = 0;
break L1;
}
$15 = HEAP32[$6 >> 2] | 0;
} else $15 = $8;
$13 = HEAP8[$$0$i >> 0] | 0;
HEAP32[$6 >> 2] = $15 + 1;
HEAP8[$15 >> 0] = $13;
if (!(HEAP8[$$0$i >> 0] | 0)) break; else $$0$i = $$0$i + 1 | 0;
}
$19 = $0 + 416 | 0;
$20 = HEAP32[$19 >> 2] | 0;
HEAP32[$19 >> 2] = HEAP32[$6 >> 2];
$23 = $20;
} while (0);
HEAP32[$0 + 228 >> 2] = $23;
HEAP32[$0 + 344 >> 2] = 0;
_XmlInitEncoding($0 + 148 | 0, $0 + 144 | 0, 0) | 0;
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
$29 = $0 + 116 | 0;
dest = $0 + 52 | 0;
stop = dest + 64 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[$29 >> 2] = $0;
HEAP32[$0 + 120 >> 2] = 0;
$31 = $0 + 128 | 0;
HEAP32[$31 >> 2] = 0;
HEAP32[$31 + 4 >> 2] = 0;
HEAP32[$31 + 8 >> 2] = 0;
HEAP32[$31 + 12 >> 2] = 0;
$33 = HEAP32[$0 + 8 >> 2] | 0;
HEAP32[$0 + 24 >> 2] = $33;
HEAP32[$0 + 28 >> 2] = $33;
HEAP32[$0 + 36 >> 2] = 0;
HEAP32[$0 + 40 >> 2] = 0;
$38 = $0 + 300 | 0;
$40 = $0 + 392 | 0;
HEAP32[$40 >> 2] = 0;
HEAP32[$40 + 4 >> 2] = 0;
$44 = $0 + 268 | 0;
$45 = $0 + 292 | 0;
HEAP32[$44 >> 2] = 0;
HEAP32[$44 + 4 >> 2] = 0;
HEAP32[$44 + 8 >> 2] = 0;
HEAP32[$44 + 12 >> 2] = 0;
HEAP32[$44 + 16 >> 2] = 0;
dest = $38;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP16[$38 + 36 >> 1] = 0;
HEAP8[$45 >> 0] = 1;
HEAP32[$0 + 296 >> 2] = 0;
HEAP32[$0 + 348 >> 2] = 0;
HEAP32[$0 + 356 >> 2] = 0;
HEAP32[$0 + 368 >> 2] = 0;
HEAP32[$0 + 236 >> 2] = 0;
HEAP32[$0 + 248 >> 2] = 0;
HEAP32[$0 + 240 >> 2] = 0;
HEAP32[$0 + 460 >> 2] = 0;
HEAP32[$0 + 464 >> 2] = 0;
return;
}
function __ZN18HandJointRotationsC2EbPK7Gesture($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $6 = 0, $7 = 0, $8 = 0;
HEAP8[$0 + 60 >> 0] = 0;
$6 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0;
$7 = $1 & 1;
$8 = $2 + 4 | 0;
HEAP32[$0 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + (HEAP32[(HEAP32[$6 + 52 + ($7 * 60 | 0) >> 2] | 0) + 4 >> 2] << 2) >> 2];
HEAP32[$0 + 4 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + (HEAP32[(HEAP32[$6 + 52 + ($7 * 60 | 0) + 4 >> 2] | 0) + 4 >> 2] << 2) >> 2];
HEAP32[$0 + 8 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + (HEAP32[(HEAP32[$6 + 52 + ($7 * 60 | 0) + 8 >> 2] | 0) + 4 >> 2] << 2) >> 2];
HEAP32[$0 + 12 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + (HEAP32[(HEAP32[$6 + 52 + ($7 * 60 | 0) + 12 >> 2] | 0) + 4 >> 2] << 2) >> 2];
HEAP32[$0 + 16 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + (HEAP32[(HEAP32[$6 + 52 + ($7 * 60 | 0) + 16 >> 2] | 0) + 4 >> 2] << 2) >> 2];
HEAP32[$0 + 20 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + (HEAP32[(HEAP32[$6 + 52 + ($7 * 60 | 0) + 20 >> 2] | 0) + 4 >> 2] << 2) >> 2];
HEAP32[$0 + 24 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + (HEAP32[(HEAP32[$6 + 52 + ($7 * 60 | 0) + 24 >> 2] | 0) + 4 >> 2] << 2) >> 2];
HEAP32[$0 + 28 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + (HEAP32[(HEAP32[$6 + 52 + ($7 * 60 | 0) + 28 >> 2] | 0) + 4 >> 2] << 2) >> 2];
HEAP32[$0 + 32 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + (HEAP32[(HEAP32[$6 + 52 + ($7 * 60 | 0) + 32 >> 2] | 0) + 4 >> 2] << 2) >> 2];
HEAP32[$0 + 36 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + (HEAP32[(HEAP32[$6 + 52 + ($7 * 60 | 0) + 36 >> 2] | 0) + 4 >> 2] << 2) >> 2];
HEAP32[$0 + 40 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + (HEAP32[(HEAP32[$6 + 52 + ($7 * 60 | 0) + 40 >> 2] | 0) + 4 >> 2] << 2) >> 2];
HEAP32[$0 + 44 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + (HEAP32[(HEAP32[$6 + 52 + ($7 * 60 | 0) + 44 >> 2] | 0) + 4 >> 2] << 2) >> 2];
HEAP32[$0 + 48 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + (HEAP32[(HEAP32[$6 + 52 + ($7 * 60 | 0) + 48 >> 2] | 0) + 4 >> 2] << 2) >> 2];
HEAP32[$0 + 52 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + (HEAP32[(HEAP32[$6 + 52 + ($7 * 60 | 0) + 52 >> 2] | 0) + 4 >> 2] << 2) >> 2];
HEAP32[$0 + 56 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + (HEAP32[(HEAP32[$6 + 52 + ($7 * 60 | 0) + 56 >> 2] | 0) + 4 >> 2] << 2) >> 2];
return;
}
function ___fdopen($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0, $16 = 0, $17 = 0, $2 = 0, $22 = 0, $27 = 0, $29 = 0, $3 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, dest = 0, sp = 0, stop = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$vararg_buffer12 = sp + 40 | 0;
$vararg_buffer7 = sp + 24 | 0;
$vararg_buffer3 = sp + 16 | 0;
$vararg_buffer = sp;
$2 = sp + 56 | 0;
$3 = HEAP8[$1 >> 0] | 0;
if (!(_memchr(63238, $3 << 24 >> 24, 4) | 0)) {
$6 = ___errno_location() | 0;
HEAP32[$6 >> 2] = 22;
$$0 = 0;
} else {
$7 = _malloc(1156) | 0;
if (!$7) $$0 = 0; else {
dest = $7;
stop = dest + 124 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
if (!(_strchr($1, 43) | 0)) HEAP32[$7 >> 2] = $3 << 24 >> 24 == 114 ? 8 : 4;
if (!(_strchr($1, 101) | 0)) $16 = $3; else {
HEAP32[$vararg_buffer >> 2] = $0;
HEAP32[$vararg_buffer + 4 >> 2] = 2;
HEAP32[$vararg_buffer + 8 >> 2] = 1;
___syscall221(221, $vararg_buffer | 0) | 0;
$16 = HEAP8[$1 >> 0] | 0;
}
if ($16 << 24 >> 24 == 97) {
HEAP32[$vararg_buffer3 >> 2] = $0;
HEAP32[$vararg_buffer3 + 4 >> 2] = 3;
$17 = ___syscall221(221, $vararg_buffer3 | 0) | 0;
if (!($17 & 1024)) {
HEAP32[$vararg_buffer7 >> 2] = $0;
HEAP32[$vararg_buffer7 + 4 >> 2] = 4;
HEAP32[$vararg_buffer7 + 8 >> 2] = $17 | 1024;
___syscall221(221, $vararg_buffer7 | 0) | 0;
}
$22 = HEAP32[$7 >> 2] | 128;
HEAP32[$7 >> 2] = $22;
$29 = $22;
} else $29 = HEAP32[$7 >> 2] | 0;
HEAP32[$7 + 60 >> 2] = $0;
HEAP32[$7 + 44 >> 2] = $7 + 132;
HEAP32[$7 + 48 >> 2] = 1024;
$27 = $7 + 75 | 0;
HEAP8[$27 >> 0] = -1;
if (!($29 & 8)) {
HEAP32[$vararg_buffer12 >> 2] = $0;
HEAP32[$vararg_buffer12 + 4 >> 2] = 21523;
HEAP32[$vararg_buffer12 + 8 >> 2] = $2;
if (!(___syscall54(54, $vararg_buffer12 | 0) | 0)) HEAP8[$27 >> 0] = 10;
}
HEAP32[$7 + 32 >> 2] = 24;
HEAP32[$7 + 36 >> 2] = 9;
HEAP32[$7 + 40 >> 2] = 10;
HEAP32[$7 + 12 >> 2] = 14;
if (!(HEAP32[17992] | 0)) HEAP32[$7 + 76 >> 2] = -1;
___ofl_add($7) | 0;
$$0 = $7;
}
}
STACKTOP = sp;
return $$0 | 0;
}
function __ZN7XMLCellC2EPc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $11 = 0, $12 = 0, $14 = 0, $25 = 0, $3 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $9 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 12 >> 2] = 0;
$3 = __Znwj(28) | 0;
HEAP32[$3 + 20 >> 2] = 0;
HEAP32[$3 + 24 >> 2] = 0;
HEAP32[$3 + 8 >> 2] = 0;
HEAP32[$3 + 16 >> 2] = 0;
HEAP32[$3 + 12 >> 2] = 19;
$9 = _malloc(152) | 0;
HEAP32[$3 >> 2] = $9;
$11 = $3 + 4 | 0;
if (!$9) {
HEAP32[$11 >> 2] = 0;
__THREW__ = 0;
HEAP32[$vararg_buffer >> 2] = 19;
HEAP32[$vararg_buffer + 4 >> 2] = 8;
invoke_vii(115, 57708, $vararg_buffer | 0);
$12 = __THREW__;
__THREW__ = 0;
if ($12 & 1) {
$37 = ___cxa_find_matching_catch_2() | 0;
$38 = tempRet0;
__ZdlPv($3);
___resumeException($37 | 0);
}
$14 = ___cxa_allocate_exception(4) | 0;
HEAP32[$14 >> 2] = 1;
__THREW__ = 0;
invoke_viii(75, $14 | 0, 32, 0);
__THREW__ = 0;
$37 = ___cxa_find_matching_catch_2() | 0;
$38 = tempRet0;
__ZdlPv($3);
___resumeException($37 | 0);
} else {
HEAP32[$11 >> 2] = 19;
HEAP32[$9 >> 2] = 0;
HEAP16[$9 + 4 >> 1] = 0;
HEAP32[$9 + 8 >> 2] = 0;
HEAP16[$9 + 12 >> 1] = 0;
HEAP32[$9 + 16 >> 2] = 0;
HEAP16[(HEAP32[$3 >> 2] | 0) + 20 >> 1] = 0;
if ((HEAP32[$11 >> 2] | 0) > 3) $25 = 3; else {
$31 = $0 + 4 | 0;
HEAP32[$31 >> 2] = $3;
$32 = __Znwj(16) | 0;
$33 = $32 + 4 | 0;
HEAP32[$33 >> 2] = 10;
$34 = $32 + 12 | 0;
HEAP32[$34 >> 2] = 0;
HEAP32[$32 >> 2] = 0;
$35 = $32 + 8 | 0;
HEAP32[$35 >> 2] = 0;
$36 = $0 + 8 | 0;
HEAP32[$36 >> 2] = $32;
STACKTOP = sp;
return;
}
do {
HEAP32[(HEAP32[$3 >> 2] | 0) + ($25 << 3) >> 2] = 0;
HEAP16[(HEAP32[$3 >> 2] | 0) + ($25 << 3) + 4 >> 1] = 0;
$25 = $25 + 1 | 0;
} while (($25 | 0) < (HEAP32[$11 >> 2] | 0));
$31 = $0 + 4 | 0;
HEAP32[$31 >> 2] = $3;
$32 = __Znwj(16) | 0;
$33 = $32 + 4 | 0;
HEAP32[$33 >> 2] = 10;
$34 = $32 + 12 | 0;
HEAP32[$34 >> 2] = 0;
HEAP32[$32 >> 2] = 0;
$35 = $32 + 8 | 0;
HEAP32[$35 >> 2] = 0;
$36 = $0 + 8 | 0;
HEAP32[$36 >> 2] = $32;
STACKTOP = sp;
return;
}
}
function ___stdio_write($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $27 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$vararg_buffer3 = sp + 16 | 0;
$vararg_buffer = sp;
$3 = sp + 32 | 0;
$4 = $0 + 28 | 0;
$5 = HEAP32[$4 >> 2] | 0;
HEAP32[$3 >> 2] = $5;
$7 = $0 + 20 | 0;
$9 = (HEAP32[$7 >> 2] | 0) - $5 | 0;
HEAP32[$3 + 4 >> 2] = $9;
HEAP32[$3 + 8 >> 2] = $1;
HEAP32[$3 + 12 >> 2] = $2;
$12 = $9 + $2 | 0;
$13 = $0 + 60 | 0;
HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2];
HEAP32[$vararg_buffer + 4 >> 2] = $3;
HEAP32[$vararg_buffer + 8 >> 2] = 2;
$17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0;
L1 : do if (($12 | 0) == ($17 | 0)) label = 3; else {
$$04756 = 2;
$$04855 = $12;
$$04954 = $3;
$27 = $17;
while (1) {
if (($27 | 0) < 0) break;
$$04855 = $$04855 - $27 | 0;
$37 = HEAP32[$$04954 + 4 >> 2] | 0;
$38 = $27 >>> 0 > $37 >>> 0;
$$150 = $38 ? $$04954 + 8 | 0 : $$04954;
$$1 = $$04756 + ($38 << 31 >> 31) | 0;
$$0 = $27 - ($38 ? $37 : 0) | 0;
HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0;
$44 = $$150 + 4 | 0;
HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0;
HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2];
HEAP32[$vararg_buffer3 + 4 >> 2] = $$150;
HEAP32[$vararg_buffer3 + 8 >> 2] = $$1;
$27 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0;
if (($$04855 | 0) == ($27 | 0)) {
label = 3;
break L1;
} else {
$$04756 = $$1;
$$04954 = $$150;
}
}
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$4 >> 2] = 0;
HEAP32[$7 >> 2] = 0;
HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32;
if (($$04756 | 0) == 2) $$051 = 0; else $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0;
} while (0);
if ((label | 0) == 3) {
$20 = HEAP32[$0 + 44 >> 2] | 0;
HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0);
$25 = $20;
HEAP32[$4 >> 2] = $25;
HEAP32[$7 >> 2] = $25;
$$051 = $2;
}
STACKTOP = sp;
return $$051 | 0;
}
function __ZNK6SiteID5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$01516$i = 0, $$017$i = 0, $19 = 0, $28 = 0, $38 = 0, $4 = 0, $47 = 0, $55 = 0, $8 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$4 = (HEAPU16[$0 >> 1] | 0 | (HEAPU8[$0 + 2 >> 0] | 0) << 16) & 255;
do if (!($4 & 16777215)) _fwrite(24651, 13, 1, $1) | 0; else {
$8 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17192] | 0, $4 & 16777215) | 0;
if (!$8) {
HEAP32[$vararg_buffer >> 2] = (HEAPU16[$0 >> 1] | 0 | (HEAPU8[$0 + 2 >> 0] | 0) << 16) & 255;
_fprintf($1, 24665, $vararg_buffer) | 0;
break;
} else {
_fputs($8, $1) | 0;
break;
}
} while (0);
do if ((HEAPU16[$0 >> 1] | 0 | (HEAPU8[$0 + 2 >> 0] | 0) << 16) & 1015808 | 0) {
_fputc(45, $1) | 0;
$19 = ((HEAPU16[$0 >> 1] | 0 | (HEAPU8[$0 + 2 >> 0] | 0) << 16) & 16777215) >>> 15 & 31;
if (!($19 << 16 >> 16)) {
_fwrite(24677, 6, 1, $1) | 0;
break;
}
$$01516$i = 0;
$$017$i = $19 & 65535;
while (1) {
if ($$017$i & 1 | 0) _fputc($$01516$i + 49 | 0, $1) | 0;
$$017$i = $$017$i >>> 1;
if (!$$017$i) break; else $$01516$i = $$01516$i + 1 | 0;
}
} while (0);
$28 = HEAPU16[$0 >> 1] | 0 | (HEAPU8[$0 + 2 >> 0] | 0) << 16;
if (!($28 & 28672)) $38 = $28; else {
_fputc(45, $1) | 0;
_fputs(HEAP32[1836 + ((((HEAPU16[$0 >> 1] | 0 | (HEAPU8[$0 + 2 >> 0] | 0) << 16) & 16777215) >>> 12 & 7) << 2) >> 2] | 0, $1) | 0;
$38 = HEAPU16[$0 >> 1] | 0 | (HEAPU8[$0 + 2 >> 0] | 0) << 16;
}
if (!($38 & 3840)) $47 = $38; else {
_fputc(45, $1) | 0;
_fputs(HEAP32[1856 + ((((HEAPU16[$0 >> 1] | 0 | (HEAPU8[$0 + 2 >> 0] | 0) << 16) & 16777215) >>> 8 & 15) << 2) >> 2] | 0, $1) | 0;
$47 = HEAPU16[$0 >> 1] | 0 | (HEAPU8[$0 + 2 >> 0] | 0) << 16;
}
if (!($47 & 7340032)) $55 = $47; else {
_fputc(45, $1) | 0;
_fputs(HEAP32[1876 + ((((HEAPU16[$0 >> 1] | 0 | (HEAPU8[$0 + 2 >> 0] | 0) << 16) & 16777215) >>> 20 & 7) << 2) >> 2] | 0, $1) | 0;
$55 = HEAPU16[$0 >> 1] | 0 | (HEAPU8[$0 + 2 >> 0] | 0) << 16;
}
if (($55 << 8 >> 8 | 0) >= 0) {
STACKTOP = sp;
return;
}
_fwrite(24684, 7, 1, $1) | 0;
STACKTOP = sp;
return;
}
function __ZNK13FingerBending5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $17 = f0, $21 = f0, $25 = f0, $3 = f0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 96 | 0;
$vararg_buffer22 = sp + 80 | 0;
$vararg_buffer19 = sp + 72 | 0;
$vararg_buffer15 = sp + 56 | 0;
$vararg_buffer12 = sp + 48 | 0;
$vararg_buffer8 = sp + 32 | 0;
$vararg_buffer5 = sp + 24 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$3 = Math_fround(HEAPF32[$0 >> 2]);
if (!($3 != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$0 + 4 >> 2]) != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$0 + 8 >> 2]) != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$0 + 12 >> 2]) != Math_fround(-100.0))) {
_fwrite(49556, 15, 1, $1) | 0;
STACKTOP = sp;
return;
}
if ($3 == Math_fround(-100.0)) {
HEAP32[$vararg_buffer >> 2] = 49607;
_fprintf($1, 49576, $vararg_buffer) | 0;
} else {
HEAP32[$vararg_buffer1 >> 2] = 49607;
HEAPF64[$vararg_buffer1 + 8 >> 3] = +$3;
_fprintf($1, 49585, $vararg_buffer1) | 0;
}
$17 = Math_fround(HEAPF32[$0 + 4 >> 2]);
if ($17 == Math_fround(-100.0)) {
HEAP32[$vararg_buffer5 >> 2] = 49610;
_fprintf($1, 49576, $vararg_buffer5) | 0;
} else {
HEAP32[$vararg_buffer8 >> 2] = 49610;
HEAPF64[$vararg_buffer8 + 8 >> 3] = +$17;
_fprintf($1, 49585, $vararg_buffer8) | 0;
}
$21 = Math_fround(HEAPF32[$0 + 8 >> 2]);
if ($21 == Math_fround(-100.0)) {
HEAP32[$vararg_buffer12 >> 2] = 49614;
_fprintf($1, 49576, $vararg_buffer12) | 0;
} else {
HEAP32[$vararg_buffer15 >> 2] = 49614;
HEAPF64[$vararg_buffer15 + 8 >> 3] = +$21;
_fprintf($1, 49585, $vararg_buffer15) | 0;
}
$25 = Math_fround(HEAPF32[$0 + 12 >> 2]);
if ($25 == Math_fround(-100.0)) {
HEAP32[$vararg_buffer19 >> 2] = 49618;
_fprintf($1, 49576, $vararg_buffer19) | 0;
STACKTOP = sp;
return;
} else {
HEAP32[$vararg_buffer22 >> 2] = 49618;
HEAPF64[$vararg_buffer22 + 8 >> 3] = +$25;
_fprintf($1, 49585, $vararg_buffer22) | 0;
STACKTOP = sp;
return;
}
}
function _big2_updatePosition($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$031 = 0, $$1 = 0, $$2 = 0, $21 = 0, $33 = 0, $5 = 0, $6 = 0, label = 0;
if (($1 | 0) == ($2 | 0)) return;
$5 = $3 + 4 | 0;
$6 = $0 + 72 | 0;
$$031 = $1;
while (1) {
L6 : do switch (HEAP8[$$031 >> 0] | 0) {
case 0:
{
switch (HEAP8[$6 + (HEAPU8[$$031 + 1 >> 0] | 0) >> 0] | 0) {
case 7:
{
label = 7;
break L6;
break;
}
case 5:
{
$$2 = $$031 + 2 | 0;
break L6;
break;
}
case 6:
{
$$2 = $$031 + 3 | 0;
break L6;
break;
}
case 10:
{
HEAP32[$5 >> 2] = -1;
HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
$$2 = $$031 + 2 | 0;
break L6;
break;
}
case 9:
{
HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
$21 = $$031 + 2 | 0;
if (($21 | 0) == ($2 | 0)) $$1 = $2; else {
switch (HEAP8[$21 >> 0] | 0) {
case 0:
{
$33 = HEAPU8[$6 + (HEAPU8[$$031 + 3 >> 0] | 0) >> 0] | 0;
break;
}
case -37:
case -38:
case -39:
case -40:
{
$33 = 7;
break;
}
case -33:
case -34:
case -35:
case -36:
{
$33 = 8;
break;
}
case -1:
{
if ((HEAPU8[$$031 + 3 >> 0] | 0) > 253) $33 = 0; else label = 14;
break;
}
default:
label = 14;
}
if ((label | 0) == 14) {
label = 0;
$33 = 29;
}
$$1 = ($33 | 0) == 10 ? $$031 + 4 | 0 : $21;
}
HEAP32[$5 >> 2] = -1;
$$2 = $$1;
break L6;
break;
}
default:
{
label = 17;
break L6;
}
}
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 7;
break;
}
default:
label = 17;
} while (0);
if ((label | 0) == 7) {
label = 0;
$$2 = $$031 + 4 | 0;
} else if ((label | 0) == 17) {
label = 0;
$$2 = $$031 + 2 | 0;
}
HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1;
if (($$2 | 0) == ($2 | 0)) break; else $$031 = $$2;
}
return;
}
function _little2_updatePosition($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$031 = 0, $$1 = 0, $$2 = 0, $21 = 0, $32 = 0, $5 = 0, $6 = 0, label = 0;
if (($1 | 0) == ($2 | 0)) return;
$5 = $3 + 4 | 0;
$6 = $0 + 72 | 0;
$$031 = $1;
while (1) {
L6 : do switch (HEAP8[$$031 + 1 >> 0] | 0) {
case 0:
{
switch (HEAP8[$6 + (HEAPU8[$$031 >> 0] | 0) >> 0] | 0) {
case 7:
{
label = 7;
break L6;
break;
}
case 5:
{
$$2 = $$031 + 2 | 0;
break L6;
break;
}
case 6:
{
$$2 = $$031 + 3 | 0;
break L6;
break;
}
case 10:
{
HEAP32[$5 >> 2] = -1;
HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
$$2 = $$031 + 2 | 0;
break L6;
break;
}
case 9:
{
HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
$21 = $$031 + 2 | 0;
if (($21 | 0) == ($2 | 0)) $$1 = $2; else {
switch (HEAP8[$$031 + 3 >> 0] | 0) {
case 0:
{
$32 = HEAPU8[$6 + (HEAPU8[$21 >> 0] | 0) >> 0] | 0;
break;
}
case -37:
case -38:
case -39:
case -40:
{
$32 = 7;
break;
}
case -33:
case -34:
case -35:
case -36:
{
$32 = 8;
break;
}
case -1:
{
if ((HEAPU8[$21 >> 0] | 0) > 253) $32 = 0; else label = 14;
break;
}
default:
label = 14;
}
if ((label | 0) == 14) {
label = 0;
$32 = 29;
}
$$1 = ($32 | 0) == 10 ? $$031 + 4 | 0 : $21;
}
HEAP32[$5 >> 2] = -1;
$$2 = $$1;
break L6;
break;
}
default:
{
label = 17;
break L6;
}
}
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 7;
break;
}
default:
label = 17;
} while (0);
if ((label | 0) == 7) {
label = 0;
$$2 = $$031 + 4 | 0;
} else if ((label | 0) == 17) {
label = 0;
$$2 = $$031 + 2 | 0;
}
HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1;
if (($$2 | 0) == ($2 | 0)) break; else $$031 = $$2;
}
return;
}
function __ZN18SphereInterpolator7setFromEffffff($0, $1, $2, $3, $4, $5, $6) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = Math_fround($2);
$3 = Math_fround($3);
$4 = Math_fround($4);
$5 = Math_fround($5);
$6 = Math_fround($6);
var $10 = 0, $11 = 0, $12 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, sp = 0, src = 0, stop = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 144 | 0;
$7 = sp + 60 | 0;
$8 = sp + 48 | 0;
$9 = sp + 36 | 0;
$10 = sp + 24 | 0;
$11 = sp + 12 | 0;
$12 = sp;
__ZN6VectorC2Efff($8, Math_fround(0.0), Math_fround(-Math_fround(+Math_cos(+$1))), Math_fround(-Math_fround(+Math_sin(+$1))));
__ZN6VectorC2Efff($9, Math_fround(0.0), Math_fround(-Math_fround(+Math_cos(+$2))), Math_fround(+Math_sin(+$2)));
__ZN6VectorC2Efff($10, Math_fround(+Math_sin(+$3)), Math_fround(0.0), Math_fround(+Math_cos(+$3)));
__ZN6VectorC2Efff($11, Math_fround(+Math_sin(+$4)), Math_fround(0.0), Math_fround(-Math_fround(+Math_cos(+$4))));
__ZN6VectorC2Efff($12, Math_fround(+Math_sin(+$5)), Math_fround(-Math_fround(+Math_cos(+$5))), Math_fround(0.0));
__ZN18OctantInterpolatorC2ERK6VectorS2_S2_S2_S2_S2_($7, 64552, 64528, 64540, $12, $8, $10);
dest = $0 + 252 | 0;
src = $7;
stop = dest + 84 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
__ZN18OctantInterpolatorC2ERK6VectorS2_S2_S2_S2_S2_($7, 64552, 64576, 64528, $12, $11, $8);
dest = $0 + 168 | 0;
src = $7;
stop = dest + 84 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
__ZN18OctantInterpolatorC2ERK6VectorS2_S2_S2_S2_S2_($7, 64552, 64540, 64564, $12, $10, $9);
dest = $0 + 84 | 0;
src = $7;
stop = dest + 84 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
__ZN18OctantInterpolatorC2ERK6VectorS2_S2_S2_S2_S2_($7, 64552, 64564, 64576, $12, $9, $11);
dest = $0;
src = $7;
stop = dest + 84 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAPF32[$0 + 336 >> 2] = $6;
STACKTOP = sp;
return;
}
function __ZN28InvertibleDynamicStringArray10addElementEPKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0, $$012$i$i = 0, $$01215$i$i = 0, $$01216$i$i = 0, $$07$lcssa$i$i$i = 0, $$078$i$i$i = 0, $$09$i$i$i = 0, $$sink$i$i = 0, $13 = 0, $16 = 0, $17 = 0, $2 = 0, $30 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $50 = 0, $52 = 0, $8 = 0, label = 0;
$2 = HEAP32[$0 >> 2] | 0;
$4 = HEAP32[$2 + 4 >> 2] | 0;
$5 = HEAP8[$1 >> 0] | 0;
if (!($5 << 24 >> 24)) $$07$lcssa$i$i$i = 0; else {
$$078$i$i$i = 0;
$$09$i$i$i = $1;
$8 = $5;
while (1) {
$$09$i$i$i = $$09$i$i$i + 1 | 0;
$13 = ($$078$i$i$i << 8 | $$078$i$i$i >>> 24) + ($8 & 255) | 0;
$8 = HEAP8[$$09$i$i$i >> 0] | 0;
if (!($8 << 24 >> 24)) {
$$07$lcssa$i$i$i = $13;
break;
} else $$078$i$i$i = $13;
}
}
$16 = ($$07$lcssa$i$i$i >>> 0) % ($4 >>> 0) | 0;
$17 = HEAP32[$2 >> 2] | 0;
L5 : do if ((HEAP16[$17 + ($16 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i = HEAP32[$17 + ($16 << 3) >> 2] | 0;
if (!$$01215$i$i) label = 8; else {
$$01216$i$i = $$01215$i$i;
while (1) {
if (!(_strcmp($1, HEAP32[$$01216$i$i >> 2] | 0) | 0)) break;
$$012$i$i = HEAP32[$$01216$i$i + 8 >> 2] | 0;
if (!$$012$i$i) {
label = 8;
break L5;
} else $$01216$i$i = $$012$i$i;
}
$$sink$i$i = $$01216$i$i + 4 | 0;
}
} else label = 8; while (0);
if ((label | 0) == 8) $$sink$i$i = $2 + 20 | 0;
$30 = HEAP32[$$sink$i$i >> 2] | 0;
if (($30 | 0) != (HEAP32[$0 + 12 >> 2] | 0)) {
$$0 = $30;
return $$0 | 0;
}
$34 = $0 + 4 | 0;
$37 = HEAP32[(HEAP32[$34 >> 2] | 0) + 12 >> 2] | 0;
$39 = __Z10copyStringPKc($1) | 0;
$40 = HEAP32[$34 >> 2] | 0;
$41 = $37 << 16 >> 16;
if (($37 & 65535) << 16 >> 16 >= 0) {
if ((HEAP32[$40 + 8 >> 2] | 0) <= ($41 | 0)) {
$50 = HEAP32[$40 + 4 >> 2] | 0;
__ZN13DynamicArrayPIKcE6resizeEi($40, ($50 | 0) > ($41 | 0) ? $50 : $41 + 1 + ($41 >>> 1) | 0);
}
$52 = $40 + 12 | 0;
if ((HEAP32[$52 >> 2] | 0) <= ($41 | 0)) HEAP32[$52 >> 2] = $41 + 1;
HEAP32[(HEAP32[$40 >> 2] | 0) + ($41 << 2) >> 2] = $39;
}
__ZN7HashAnyIPKciE7addItemES1_i(HEAP32[$0 >> 2] | 0, $39, $41);
$$0 = $37;
return $$0 | 0;
}
function __ZNK25TwoHConcretePostureChange19printFinalUndefinedEP8_IO_FILE12SET_OF_HANDS($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $4 = 0, $40 = 0, label = 0;
if (!$1) return;
L4 : do switch ($2 | 0) {
case 3:
case 5:
{
$4 = $0 + 224 | 0;
if (Math_fround(HEAPF32[$0 + 228 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 232 >> 2]) == Math_fround(0.0)) {
if (!(Math_fround(HEAPF32[$0 + 236 >> 2]) == Math_fround(0.0))) label = 6;
} else label = 6; else label = 6;
do if ((label | 0) == 6) {
if (Math_fround(HEAPF32[$0 + 240 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 244 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 248 >> 2]) == Math_fround(0.0)) break;
if (Math_fround(HEAPF32[$0 + 264 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 268 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 272 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 276 >> 2]) == Math_fround(1.0)) break;
if (HEAP32[$0 + 280 >> 2] | 0) break L4;
} while (0);
_fwrite(38280, 16, 1, $1) | 0;
__ZNK19OneHConcretePosture14printUndefinedEP8_IO_FILE($4, $1);
_fputc(10, $1) | 0;
break;
}
default:
{}
} while (0);
if (($2 | 1 | 0) != 5) return;
$40 = $0 + 336 | 0;
if (Math_fround(HEAPF32[$0 + 340 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 344 >> 2]) == Math_fround(0.0)) {
if (!(Math_fround(HEAPF32[$0 + 348 >> 2]) == Math_fround(0.0))) label = 19;
} else label = 19; else label = 19;
do if ((label | 0) == 19) {
if (Math_fround(HEAPF32[$0 + 352 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 356 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 360 >> 2]) == Math_fround(0.0)) break;
if (Math_fround(HEAPF32[$0 + 376 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 380 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 384 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 388 >> 2]) == Math_fround(1.0)) break;
if (HEAP32[$0 + 392 >> 2] | 0) return;
} while (0);
_fwrite(38297, 15, 1, $1) | 0;
__ZNK19OneHConcretePosture14printUndefinedEP8_IO_FILE($40, $1);
_fputc(10, $1) | 0;
return;
}
function __ZN11SeqMovement11setDurationEfb($0, $1, $2) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = $2 | 0;
var $$043 = 0, $$043$us = 0, $10 = f0, $11 = 0, $13 = f0, $18 = 0, $19 = 0, $25 = f0, $3 = 0, $33 = 0, $35 = f0, $39 = 0, $40 = f0, $42 = f0, $46 = 0, $48 = f0, $49 = f0, $51 = f0, $52 = 0, $54 = f0, $58 = f0, $59 = 0, $6 = 0, $61 = f0, $8 = 0, $sext = 0;
$3 = $0 + 528 | 0;
$sext = HEAP32[$0 + 540 >> 2] << 16;
$6 = $sext >> 16;
if (!$6) return;
if ($2) {
$8 = $0 + 40 | 0;
$10 = Math_fround($1 / Math_fround(HEAPF32[$8 >> 2]));
$11 = $0 + 44 | 0;
$13 = Math_fround(Math_fround(HEAPF32[$11 >> 2]) * $10);
HEAPF32[$11 >> 2] = $13;
if (($sext | 0) > 0) if ($10 != Math_fround(1.0)) {
$$043$us = 0;
$18 = 0;
do {
$19 = HEAP32[(HEAP32[$3 >> 2] | 0) + ($18 << 2) >> 2] | 0;
$25 = Math_fround($10 * Math_fround(HEAPF32[$19 + 40 >> 2]));
FUNCTION_TABLE_vifi[HEAP32[(HEAP32[$19 >> 2] | 0) + 64 >> 2] & 7]($19, $25, 1);
$$043$us = $$043$us + 1 << 16 >> 16;
$18 = $$043$us << 16 >> 16;
} while (($6 | 0) > ($18 | 0));
} else {
$$043 = 0;
do $$043 = $$043 + 1 << 16 >> 16; while (($6 | 0) > ($$043 << 16 >> 16 | 0));
}
HEAPF32[$8 >> 2] = $1;
return;
}
if (($sext | 0) <= 0) return;
$33 = $0 + 40 | 0;
$35 = Math_fround($1 - Math_fround(HEAPF32[$33 >> 2]));
$39 = HEAP32[(HEAP32[$3 >> 2] | 0) + ($6 + -1 << 2) >> 2] | 0;
$40 = Math_fround(-$35);
$42 = Math_fround(HEAPF32[$39 + 44 >> 2]);
$46 = HEAP32[(HEAP32[$39 >> 2] | 0) + 64 >> 2] | 0;
$48 = Math_fround(HEAPF32[$39 + 40 >> 2]);
if ($42 < $40) {
$49 = Math_fround($48 - $42);
FUNCTION_TABLE_vifi[$46 & 7]($39, $49, 0);
$51 = Math_fround(Math_fround(HEAPF32[$33 >> 2]) - $42);
HEAPF32[$33 >> 2] = $51;
$52 = $0 + 44 | 0;
$54 = Math_fround(Math_fround(HEAPF32[$52 >> 2]) - $42);
HEAPF32[$52 >> 2] = $54;
FUNCTION_TABLE_vifi[HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] & 7]($0, $1, 1);
return;
} else {
$58 = Math_fround($35 + $48);
FUNCTION_TABLE_vifi[$46 & 7]($39, $58, 0);
$59 = $0 + 44 | 0;
$61 = Math_fround($35 + Math_fround(HEAPF32[$59 >> 2]));
HEAPF32[$59 >> 2] = $61;
HEAPF32[$33 >> 2] = $1;
return;
}
}
function __ZN12ExpatWrapper11ParseStringEPKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$09$i = 0, $$pre = 0, $11 = 0, $13 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $28 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$2 = __Znwj(16) | 0;
HEAP32[$2 + 4 >> 2] = 10;
HEAP32[$2 + 12 >> 2] = 0;
HEAP32[$2 >> 2] = 0;
HEAP32[$2 + 8 >> 2] = 0;
$6 = $0 + 28 | 0;
HEAP32[$6 >> 2] = $2;
$7 = $0 + 24 | 0;
$8 = HEAP32[$7 >> 2] | 0;
$11 = (_XML_Parse($8, $1, _strlen($1) | 0, 1) | 0) != 0;
if (!$11) {
$13 = _XML_GetCurrentLineNumber(HEAP32[$7 >> 2] | 0) | 0;
$16 = _XML_ErrorString(_XML_GetErrorCode(HEAP32[$7 >> 2] | 0) | 0) | 0;
HEAP32[$vararg_buffer >> 2] = $13;
HEAP32[$vararg_buffer + 4 >> 2] = $16;
__Z7eprintfPKcz(53940, $vararg_buffer);
}
$17 = HEAP32[$6 >> 2] | 0;
if (!$17) {
$41 = $11 ? 0 : 3;
STACKTOP = sp;
return $41 | 0;
}
$19 = HEAP32[$17 >> 2] | 0;
if (!$19) $39 = $17; else {
$21 = $17 + 12 | 0;
$22 = HEAP32[$21 >> 2] | 0;
if (($22 | 0) > 0) {
$$09$i = 0;
$25 = $19;
$42 = $22;
while (1) {
$26 = HEAP32[$25 + ($$09$i << 2) >> 2] | 0;
if (!$26) $36 = $42; else {
__THREW__ = 0;
invoke_vi(151, $26 | 0);
$28 = __THREW__;
__THREW__ = 0;
if ($28 & 1) {
label = 9;
break;
}
__ZdlPv($26);
HEAP32[(HEAP32[$17 >> 2] | 0) + ($$09$i << 2) >> 2] = 0;
$36 = HEAP32[$21 >> 2] | 0;
}
$34 = $$09$i + 1 | 0;
if (($34 | 0) >= ($36 | 0)) break;
$$09$i = $34;
$25 = HEAP32[$17 >> 2] | 0;
$42 = $36;
}
if ((label | 0) == 9) {
$32 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($26);
___resumeException($32 | 0);
}
$$pre = HEAP32[$6 >> 2] | 0;
if (!$$pre) {
$41 = $11 ? 0 : 3;
STACKTOP = sp;
return $41 | 0;
} else $39 = $$pre;
} else $39 = $17;
}
$38 = HEAP32[$39 >> 2] | 0;
if ($38 | 0) _free($38);
__ZdlPv($39);
HEAP32[$6 >> 2] = 0;
$41 = $11 ? 0 : 3;
STACKTOP = sp;
return $41 | 0;
}
function _memcpy(dest, src, num) {
dest = dest | 0;
src = src | 0;
num = num | 0;
var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
if ((num | 0) >= 8192) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
ret = dest | 0;
dest_end = dest + num | 0;
if ((dest & 3) == (src & 3)) {
while (dest & 3) {
if (!num) return ret | 0;
HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
dest = dest + 1 | 0;
src = src + 1 | 0;
num = num - 1 | 0;
}
aligned_dest_end = dest_end & -4 | 0;
block_aligned_dest_end = aligned_dest_end - 64 | 0;
while ((dest | 0) <= (block_aligned_dest_end | 0)) {
HEAP32[dest >> 2] = HEAP32[src >> 2];
HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2];
HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2];
HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2];
HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2];
HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2];
HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2];
HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2];
HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2];
HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2];
HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2];
HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2];
HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2];
HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2];
HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2];
HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2];
dest = dest + 64 | 0;
src = src + 64 | 0;
}
while ((dest | 0) < (aligned_dest_end | 0)) {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
}
} else {
aligned_dest_end = dest_end - 4 | 0;
while ((dest | 0) < (aligned_dest_end | 0)) {
HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0;
HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0;
HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0;
dest = dest + 4 | 0;
src = src + 4 | 0;
}
}
while ((dest | 0) < (dest_end | 0)) {
HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
dest = dest + 1 | 0;
src = src + 1 | 0;
}
return ret | 0;
}
function __Z16makeFullFilenamePKcS0_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$030 = 0, $$1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $32 = 0, $4 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
if (!$1) {
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
L4 : do if ($0 | 0) {
$4 = HEAP8[$1 >> 0] | 0;
L6 : do switch ($4 << 24 >> 24) {
case 47:
{
break L4;
break;
}
case 0:
break;
default:
if ($4 << 24 >> 24 >= 65) {
switch ($4 << 24 >> 24) {
case 91:
case 92:
case 93:
case 94:
case 95:
case 96:
case 123:
case 124:
case 125:
case 126:
case 127:
{
break L6;
break;
}
default:
{}
}
if ((HEAP8[$1 + 1 >> 0] | 0) == 58) break L4;
}
} while (0);
$14 = _strlen($0) | 0;
if (!$14) {
$17 = (_strlen($1) | 0) + 1 | 0;
$18 = _malloc($17) | 0;
if (!$18) {
HEAP32[$vararg_buffer1 >> 2] = $17;
__Z7eprintfPKcz(9153, $vararg_buffer1);
$20 = ___cxa_allocate_exception(4) | 0;
HEAP32[$20 >> 2] = 1;
___cxa_throw($20 | 0, 32, 0);
}
_strncpy($18, $1, $17) | 0;
$$1 = $18;
STACKTOP = sp;
return $$1 | 0;
} else {
$23 = HEAP8[$0 + ($14 + -1) >> 0] | 0;
$29 = $14 + 1 | 0;
$32 = _malloc($29 + (_strlen($1) | 0) + ($23 << 24 >> 24 != 47 & $23 << 24 >> 24 != 92 & 1) | 0) | 0;
_strcpy($32, $0) | 0;
switch ($23 << 24 >> 24) {
case 47:
case 92:
{
$$030 = $14;
break;
}
default:
{
HEAP8[$32 + $14 >> 0] = 47;
$$030 = $29;
}
}
_strcpy($32 + $$030 | 0, $1) | 0;
$$1 = $32;
STACKTOP = sp;
return $$1 | 0;
}
} while (0);
$10 = (_strlen($1) | 0) + 1 | 0;
$11 = _malloc($10) | 0;
if (!$11) {
HEAP32[$vararg_buffer >> 2] = $10;
__Z7eprintfPKcz(9153, $vararg_buffer);
$13 = ___cxa_allocate_exception(4) | 0;
HEAP32[$13 >> 2] = 1;
___cxa_throw($13 | 0, 32, 0);
}
_strncpy($11, $1, $10) | 0;
$$1 = $11;
STACKTOP = sp;
return $$1 | 0;
}
function __ZL25handle_nested_sign_manualPKcPK11HanimAvatarP13DynamicArrayPI7GestureEP7XMLCell($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$03337 = 0, $$pre$phiZ2D = 0, $23 = 0, $26 = 0, $29 = 0, $32 = 0, $33 = 0, $39 = 0, $41 = 0, $6 = 0, $8 = 0, $phitmp = 0, $phitmp34 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$3) {
STACKTOP = sp;
return;
}
$6 = HEAP32[$3 + 8 >> 2] | 0;
if (!$6) {
STACKTOP = sp;
return;
}
$8 = $6 + 12 | 0;
$phitmp = HEAP32[$8 >> 2] << 16;
$phitmp34 = $phitmp >> 16;
if (!$phitmp34) {
STACKTOP = sp;
return;
}
if (_strcmp(HEAP32[HEAP32[HEAP32[$6 >> 2] >> 2] >> 2] | 0, 51313) | 0) {
$29 = $2 + 12 | 0;
$32 = __Z18handle_sign_manualPKcPK11HanimAvatarP7XMLCell(__Z20copyStringWithSuffixPKci($0, HEAP32[$29 >> 2] | 0) | 0, $1, $3) | 0;
$33 = HEAP32[$29 >> 2] | 0;
if (($33 | 0) < 0) {
STACKTOP = sp;
return;
}
if ((HEAP32[$2 + 8 >> 2] | 0) > ($33 | 0)) {
$$pre$phiZ2D = $33 + 1 | 0;
label = 16;
} else {
$39 = HEAP32[$2 + 4 >> 2] | 0;
$41 = $33 + 1 | 0;
__ZN13DynamicArrayPI7GestureE6resizeEi($2, ($39 | 0) > ($33 | 0) ? $39 : $41 + ($33 >>> 1) | 0);
if ((HEAP32[$29 >> 2] | 0) <= ($33 | 0)) {
$$pre$phiZ2D = $41;
label = 16;
}
}
if ((label | 0) == 16) HEAP32[$29 >> 2] = $$pre$phiZ2D;
HEAP32[(HEAP32[$2 >> 2] | 0) + ($33 << 2) >> 2] = $32;
STACKTOP = sp;
return;
}
if (($phitmp | 0) > 0) $$03337 = 0; else {
STACKTOP = sp;
return;
}
do {
if ((HEAP32[$8 >> 2] | 0) > ($$03337 | 0)) $23 = HEAP32[(HEAP32[$6 >> 2] | 0) + ($$03337 << 2) >> 2] | 0; else $23 = 0;
if (!(_strcmp(HEAP32[$23 >> 2] | 0, 51313) | 0)) __ZL25handle_nested_sign_manualPKcPK11HanimAvatarP13DynamicArrayPI7GestureEP7XMLCell($0, $1, $2, $23); else {
__Z7LogTimev() | 0;
$26 = HEAP32[$23 >> 2] | 0;
HEAP32[$vararg_buffer >> 2] = $0;
HEAP32[$vararg_buffer + 4 >> 2] = $26;
__Z7eprintfPKcz(32232, $vararg_buffer);
}
$$03337 = $$03337 + 1 | 0;
} while (($$03337 | 0) < ($phitmp34 | 0));
STACKTOP = sp;
return;
}
function __ZNSt3__26vectorIP7SSPRSetNS_9allocatorIS2_EEE8__appendEjRKS2_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0$i = 0, $$0$i18 = 0, $$in = 0, $$sroa$15$0 = 0, $$sroa$speculated$$i = 0, $12 = 0, $17 = 0, $19 = 0, $20 = 0, $22 = 0, $25 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $47 = 0, $5 = 0, $50 = 0, $53 = 0, $6 = 0;
$3 = $0 + 8 | 0;
$4 = HEAP32[$3 >> 2] | 0;
$5 = $0 + 4 | 0;
$6 = HEAP32[$5 >> 2] | 0;
if ($4 - $6 >> 2 >>> 0 >= $1 >>> 0) {
$$0$i = $1;
$12 = $6;
do {
HEAP32[$12 >> 2] = HEAP32[$2 >> 2];
$12 = (HEAP32[$5 >> 2] | 0) + 4 | 0;
HEAP32[$5 >> 2] = $12;
$$0$i = $$0$i + -1 | 0;
} while (($$0$i | 0) != 0);
return;
}
$17 = HEAP32[$0 >> 2] | 0;
$19 = $6 - $17 >> 2;
$20 = $19 + $1 | 0;
if ($20 >>> 0 > 1073741823) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
$22 = $4 - $17 | 0;
$25 = $22 >> 1;
$$sroa$speculated$$i = $22 >> 2 >>> 0 < 536870911 ? ($25 >>> 0 < $20 >>> 0 ? $20 : $25) : 1073741823;
do if (!$$sroa$speculated$$i) $37 = 0; else {
if ($$sroa$speculated$$i >>> 0 <= 1073741823) {
$37 = __Znwj($$sroa$speculated$$i << 2) | 0;
break;
}
$29 = ___cxa_allocate_exception(8) | 0;
__THREW__ = 0;
invoke_vii(111, $29 | 0, 9067);
$30 = __THREW__;
__THREW__ = 0;
if ($30 & 1) {
$32 = ___cxa_find_matching_catch_2() | 0;
___cxa_free_exception($29 | 0);
___resumeException($32 | 0);
} else {
HEAP32[$29 >> 2] = 8224;
___cxa_throw($29 | 0, 696, 80);
}
} while (0);
$36 = $37 + ($19 << 2) | 0;
$39 = $37 + ($$sroa$speculated$$i << 2) | 0;
$$0$i18 = $1;
$$in = $36;
$$sroa$15$0 = $36;
do {
HEAP32[$$in >> 2] = HEAP32[$2 >> 2];
$$in = $$sroa$15$0 + 4 | 0;
$$sroa$15$0 = $$in;
$$0$i18 = $$0$i18 + -1 | 0;
} while (($$0$i18 | 0) != 0);
$47 = HEAP32[$0 >> 2] | 0;
$50 = (HEAP32[$5 >> 2] | 0) - $47 | 0;
$53 = $36 + (0 - ($50 >> 2) << 2) | 0;
if (($50 | 0) > 0) _memcpy($53 | 0, $47 | 0, $50 | 0) | 0;
HEAP32[$0 >> 2] = $53;
HEAP32[$5 >> 2] = $$sroa$15$0;
HEAP32[$3 >> 2] = $39;
if (!$47) return;
__ZdlPv($47);
return;
}
function __ZNSt3__26vectorIP7SSMorphNS_9allocatorIS2_EEE8__appendEjRKS2_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0$i = 0, $$0$i18 = 0, $$in = 0, $$sroa$15$0 = 0, $$sroa$speculated$$i = 0, $12 = 0, $17 = 0, $19 = 0, $20 = 0, $22 = 0, $25 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $47 = 0, $5 = 0, $50 = 0, $53 = 0, $6 = 0;
$3 = $0 + 8 | 0;
$4 = HEAP32[$3 >> 2] | 0;
$5 = $0 + 4 | 0;
$6 = HEAP32[$5 >> 2] | 0;
if ($4 - $6 >> 2 >>> 0 >= $1 >>> 0) {
$$0$i = $1;
$12 = $6;
do {
HEAP32[$12 >> 2] = HEAP32[$2 >> 2];
$12 = (HEAP32[$5 >> 2] | 0) + 4 | 0;
HEAP32[$5 >> 2] = $12;
$$0$i = $$0$i + -1 | 0;
} while (($$0$i | 0) != 0);
return;
}
$17 = HEAP32[$0 >> 2] | 0;
$19 = $6 - $17 >> 2;
$20 = $19 + $1 | 0;
if ($20 >>> 0 > 1073741823) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
$22 = $4 - $17 | 0;
$25 = $22 >> 1;
$$sroa$speculated$$i = $22 >> 2 >>> 0 < 536870911 ? ($25 >>> 0 < $20 >>> 0 ? $20 : $25) : 1073741823;
do if (!$$sroa$speculated$$i) $37 = 0; else {
if ($$sroa$speculated$$i >>> 0 <= 1073741823) {
$37 = __Znwj($$sroa$speculated$$i << 2) | 0;
break;
}
$29 = ___cxa_allocate_exception(8) | 0;
__THREW__ = 0;
invoke_vii(111, $29 | 0, 9067);
$30 = __THREW__;
__THREW__ = 0;
if ($30 & 1) {
$32 = ___cxa_find_matching_catch_2() | 0;
___cxa_free_exception($29 | 0);
___resumeException($32 | 0);
} else {
HEAP32[$29 >> 2] = 8224;
___cxa_throw($29 | 0, 696, 80);
}
} while (0);
$36 = $37 + ($19 << 2) | 0;
$39 = $37 + ($$sroa$speculated$$i << 2) | 0;
$$0$i18 = $1;
$$in = $36;
$$sroa$15$0 = $36;
do {
HEAP32[$$in >> 2] = HEAP32[$2 >> 2];
$$in = $$sroa$15$0 + 4 | 0;
$$sroa$15$0 = $$in;
$$0$i18 = $$0$i18 + -1 | 0;
} while (($$0$i18 | 0) != 0);
$47 = HEAP32[$0 >> 2] | 0;
$50 = (HEAP32[$5 >> 2] | 0) - $47 | 0;
$53 = $36 + (0 - ($50 >> 2) << 2) | 0;
if (($50 | 0) > 0) _memcpy($53 | 0, $47 | 0, $50 | 0) | 0;
HEAP32[$0 >> 2] = $53;
HEAP32[$5 >> 2] = $$sroa$15$0;
HEAP32[$3 >> 2] = $39;
if (!$47) return;
__ZdlPv($47);
return;
}
function _setElementTypePrefix($$0$65$val, $0) {
$$0$65$val = $$0$65$val | 0;
$0 = $0 | 0;
var $$0347 = 0, $$036 = 0, $$3 = 0, $$lcssa = 0, $11 = 0, $13 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $27 = 0, $29 = 0, $3 = 0, $32 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, label = 0;
$2 = $$0$65$val + 80 | 0;
$3 = $$0$65$val + 92 | 0;
$4 = $$0$65$val + 88 | 0;
$5 = $$0$65$val + 60 | 0;
$6 = $$0$65$val + 96 | 0;
$7 = $0 + 4 | 0;
$$036 = HEAP32[$0 >> 2] | 0;
L1 : while (1) {
switch (HEAP8[$$036 >> 0] | 0) {
case 0:
{
$$3 = 1;
label = 17;
break L1;
break;
}
case 58:
{
$9 = HEAP32[$0 >> 2] | 0;
$11 = HEAP32[$3 >> 2] | 0;
$13 = ($11 | 0) == (HEAP32[$4 >> 2] | 0);
if (($9 | 0) == ($$036 | 0)) {
$$lcssa = $13;
$36 = $11;
} else {
$$0347 = $9;
$37 = $11;
$38 = $13;
while (1) {
if ($38) {
if (!((_poolGrow($2) | 0) << 24 >> 24)) {
$$3 = 0;
label = 17;
break L1;
}
$18 = HEAP32[$3 >> 2] | 0;
} else $18 = $37;
$16 = HEAP8[$$0347 >> 0] | 0;
HEAP32[$3 >> 2] = $18 + 1;
HEAP8[$18 >> 0] = $16;
$$0347 = $$0347 + 1 | 0;
$21 = HEAP32[$3 >> 2] | 0;
$23 = ($21 | 0) == (HEAP32[$4 >> 2] | 0);
if (($$0347 | 0) == ($$036 | 0)) {
$$lcssa = $23;
$36 = $21;
break;
} else {
$37 = $21;
$38 = $23;
}
}
}
if ($$lcssa) {
if (!((_poolGrow($2) | 0) << 24 >> 24)) {
$$3 = 0;
label = 17;
break L1;
}
$27 = HEAP32[$3 >> 2] | 0;
} else $27 = $36;
HEAP32[$3 >> 2] = $27 + 1;
HEAP8[$27 >> 0] = 0;
$29 = _lookup($5, HEAP32[$6 >> 2] | 0, 8) | 0;
if (!$29) {
$$3 = 0;
label = 17;
break L1;
}
$32 = HEAP32[$6 >> 2] | 0;
if ((HEAP32[$29 >> 2] | 0) == ($32 | 0)) HEAP32[$6 >> 2] = HEAP32[$3 >> 2]; else HEAP32[$3 >> 2] = $32;
HEAP32[$7 >> 2] = $29;
break;
}
default:
{}
}
$$036 = $$036 + 1 | 0;
}
if ((label | 0) == 17) return $$3 | 0;
return 0;
}
function _normal_sameName($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0 = 0, $$016 = 0, $$019 = 0, $$1 = 0, $$117 = 0, $$2 = 0, $$218 = 0, $12 = 0, $15 = 0, $19 = 0, $3 = 0, $31 = 0, $4 = 0, $8 = 0, label = 0;
$3 = $0 + 72 | 0;
$$0 = $2;
$$016 = $1;
L1 : while (1) {
$4 = HEAP8[$$016 >> 0] | 0;
switch (HEAP8[$3 + ($4 & 255) >> 0] | 0) {
case 7:
{
label = 3;
break;
}
case 6:
{
$$1 = $$0;
$$117 = $$016;
$15 = $4;
label = 5;
break;
}
case 5:
{
$$2 = $$0;
$$218 = $$016;
$19 = $4;
break;
}
case 27:
case 26:
case 25:
case 24:
case 22:
case 29:
{
if ((HEAP8[$$0 >> 0] | 0) == $4 << 24 >> 24) {
$$0 = $$0 + 1 | 0;
$$016 = $$016 + 1 | 0;
continue L1;
} else {
$$019 = 0;
label = 13;
break L1;
}
break;
}
default:
{
label = 10;
break L1;
}
}
if ((label | 0) == 3) {
label = 0;
$8 = $$016 + 1 | 0;
if ($4 << 24 >> 24 != (HEAP8[$$0 >> 0] | 0)) {
$$019 = 0;
label = 13;
break;
}
$$1 = $$0 + 1 | 0;
$$117 = $8;
$15 = HEAP8[$8 >> 0] | 0;
label = 5;
}
if ((label | 0) == 5) {
label = 0;
$12 = $$117 + 1 | 0;
if ($15 << 24 >> 24 != (HEAP8[$$1 >> 0] | 0)) {
$$019 = 0;
label = 13;
break;
}
$$2 = $$1 + 1 | 0;
$$218 = $12;
$19 = HEAP8[$12 >> 0] | 0;
}
if ($19 << 24 >> 24 != (HEAP8[$$2 >> 0] | 0)) {
$$019 = 0;
label = 13;
break;
}
if ((HEAP8[$$218 + 1 >> 0] | 0) == (HEAP8[$$2 + 1 >> 0] | 0)) {
$$0 = $$2 + 2 | 0;
$$016 = $$218 + 2 | 0;
} else {
$$019 = 0;
label = 13;
break;
}
}
if ((label | 0) == 10) {
$31 = HEAP8[$$0 >> 0] | 0;
if ($4 << 24 >> 24 == $31 << 24 >> 24) {
$$019 = 1;
return $$019 | 0;
}
switch (HEAP8[$3 + ($31 & 255) >> 0] | 0) {
case 27:
case 26:
case 25:
case 24:
case 22:
case 29:
case 7:
case 6:
case 5:
{
$$019 = 0;
return $$019 | 0;
}
default:
{}
}
$$019 = 1;
return $$019 | 0;
} else if ((label | 0) == 13) return $$019 | 0;
return 0;
}
function __ZN7ASDdataD2Ev($0) {
$0 = $0 | 0;
var $$0 = 0, $$02 = 0, $1 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $44 = 0, $5 = 0, $7 = 0, $8 = 0;
$1 = $0 + 8 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if ($2 | 0) {
_free($2);
HEAP32[$1 >> 2] = 0;
}
$4 = $0 + 4 | 0;
$5 = HEAP32[$4 >> 2] | 0;
if ($5 | 0) {
_free($5);
HEAP32[$4 >> 2] = 0;
}
$7 = $0 + 12 | 0;
$8 = HEAP32[$7 >> 2] | 0;
do if ($8 | 0) {
__THREW__ = 0;
invoke_vi(111, $8 | 0);
$10 = __THREW__;
__THREW__ = 0;
if (!($10 & 1)) {
__ZdlPv($8);
HEAP32[$7 >> 2] = 0;
break;
}
$12 = ___cxa_find_matching_catch_2() | 0;
$13 = tempRet0;
__ZdlPv($8);
$$0 = $13;
$$02 = $12;
___resumeException($$02 | 0);
} while (0);
$14 = $0 + 16 | 0;
$15 = HEAP32[$14 >> 2] | 0;
if ($15 | 0) {
$17 = HEAP32[$15 >> 2] | 0;
if ($17 | 0) _free($17);
__ZdlPv($15);
HEAP32[$14 >> 2] = 0;
}
$19 = $0 + 20 | 0;
$20 = HEAP32[$19 >> 2] | 0;
if ($20 | 0) {
$22 = HEAP32[$20 >> 2] | 0;
if ($22 | 0) _free($22);
__ZdlPv($20);
HEAP32[$19 >> 2] = 0;
}
$24 = $0 + 24 | 0;
$25 = HEAP32[$24 >> 2] | 0;
if ($25 | 0) {
$27 = HEAP32[$25 >> 2] | 0;
if ($27 | 0) _free($27);
__ZdlPv($25);
HEAP32[$24 >> 2] = 0;
}
$29 = $0 + 28 | 0;
$30 = HEAP32[$29 >> 2] | 0;
do if ($30 | 0) {
__THREW__ = 0;
invoke_vi(111, $30 | 0);
$32 = __THREW__;
__THREW__ = 0;
if (!($32 & 1)) {
__ZdlPv($30);
HEAP32[$29 >> 2] = 0;
break;
}
$34 = ___cxa_find_matching_catch_2() | 0;
$35 = tempRet0;
__ZdlPv($30);
$$0 = $35;
$$02 = $34;
___resumeException($$02 | 0);
} while (0);
$36 = $0 + 32 | 0;
$37 = HEAP32[$36 >> 2] | 0;
if ($37 | 0) {
$39 = HEAP32[$37 >> 2] | 0;
if ($39 | 0) _free($39);
__ZdlPv($37);
HEAP32[$36 >> 2] = 0;
}
$41 = $0 + 36 | 0;
$42 = HEAP32[$41 >> 2] | 0;
if (!$42) return;
$44 = HEAP32[$42 >> 2] | 0;
if ($44 | 0) _free($44);
__ZdlPv($42);
HEAP32[$41 >> 2] = 0;
return;
}
function __Z18InitialPostureTimePK13BasicMovement($0) {
$0 = $0 | 0;
var $$04352 = f0, $$04551 = 0, $$1 = f0, $$144 = f0, $$tr53 = 0, $13 = 0, $19 = 0, $20 = f0, $24 = 0, $29 = f0, $32 = f0, $5 = 0, $7 = 0, $or$cond3 = 0, label = 0;
if (!$0) {
$$1 = Math_fround(0.0);
return Math_fround($$1);
} else $$tr53 = $0;
L3 : while (1) {
switch (HEAP32[$$tr53 + 4 >> 2] | 0) {
case 5:
{
label = 3;
break L3;
break;
}
case 7:
{
label = 10;
break L3;
break;
}
case 6:
break;
default:
{
label = 12;
break L3;
}
}
if ((HEAP32[$$tr53 + 540 >> 2] | 0) <= 0) {
$$1 = Math_fround(0.0);
label = 13;
break;
}
$13 = HEAP32[HEAP32[$$tr53 + 528 >> 2] >> 2] | 0;
if (!$13) {
$$1 = Math_fround(0.0);
label = 13;
break;
} else $$tr53 = $13;
}
if ((label | 0) == 3) {
$5 = HEAP32[$$tr53 + 540 >> 2] | 0;
if (($5 | 0) <= 0) {
$$1 = Math_fround(0.0);
return Math_fround($$1);
}
$7 = $$tr53 + 528 | 0;
$$04352 = Math_fround(0.0);
$$04551 = 0;
while (1) {
if (($5 | 0) > ($$04551 | 0)) $19 = HEAP32[(HEAP32[$7 >> 2] | 0) + ($$04551 << 2) >> 2] | 0; else $19 = 0;
$20 = Math_fround(__Z18InitialPostureTimePK13BasicMovement($19));
$24 = $$04352 == Math_fround(0.0) | $$04352 > $20 & $20 > Math_fround(0.0);
$$144 = $24 ? $20 : $$04352;
$$04551 = $$04551 + 1 | 0;
if (($$04551 | 0) >= ($5 | 0)) {
$$1 = $$144;
break;
} else $$04352 = $$144;
}
return Math_fround($$1);
} else if ((label | 0) == 10) {
$29 = Math_fround(__Z18InitialPostureTimePK13BasicMovement(HEAP32[$$tr53 + 528 >> 2] | 0));
$32 = Math_fround(__Z18InitialPostureTimePK13BasicMovement(HEAP32[$$tr53 + 532 >> 2] | 0));
if ($29 == Math_fround(0.0)) {
$$1 = $32;
return Math_fround($$1);
}
$or$cond3 = $29 > $32 & $32 > Math_fround(0.0);
$$1 = $or$cond3 ? $32 : $29;
return Math_fround($$1);
} else if ((label | 0) == 12) {
$$1 = Math_fround(HEAPF32[$$tr53 + 40 >> 2]);
return Math_fround($$1);
} else if ((label | 0) == 13) return Math_fround($$1);
return Math_fround(0.0);
}
function __ZN7HashAnyIPKciE7addItemES1_i($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$07$lcssa$i$i = 0, $$078$i$i = 0, $$09$i$i = 0, $$sink$i = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $24 = 0, $28 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $8 = 0;
$4 = HEAP32[$0 + 4 >> 2] | 0;
$5 = HEAP8[$1 >> 0] | 0;
if (!($5 << 24 >> 24)) $$07$lcssa$i$i = 0; else {
$$078$i$i = 0;
$$09$i$i = $1;
$8 = $5;
while (1) {
$$09$i$i = $$09$i$i + 1 | 0;
$13 = ($$078$i$i << 8 | $$078$i$i >>> 24) + ($8 & 255) | 0;
$8 = HEAP8[$$09$i$i >> 0] | 0;
if (!($8 << 24 >> 24)) {
$$07$lcssa$i$i = $13;
break;
} else $$078$i$i = $13;
}
}
$16 = ($$07$lcssa$i$i >>> 0) % ($4 >>> 0) | 0;
$17 = HEAP32[$0 >> 2] | 0;
$18 = $17 + ($16 << 3) | 0;
$19 = $17 + ($16 << 3) + 4 | 0;
switch (HEAP16[$19 >> 1] | 0) {
case 0:
{
$21 = __Znwj(12) | 0;
HEAP32[$21 >> 2] = $1;
HEAP32[$21 + 4 >> 2] = $2;
HEAP32[$21 + 8 >> 2] = 0;
HEAP32[$18 >> 2] = $21;
$24 = $0 + 12 | 0;
HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + -1;
$$sink$i = $0 + 16 | 0;
$38 = HEAP32[$$sink$i >> 2] | 0;
$39 = $38 + 1 | 0;
HEAP32[$$sink$i >> 2] = $39;
$40 = HEAP16[$19 >> 1] | 0;
$41 = $40 + 1 << 16 >> 16;
HEAP16[$19 >> 1] = $41;
$42 = $0 + 24 | 0;
$43 = HEAP32[$42 >> 2] | 0;
$44 = $43 + 1 | 0;
HEAP32[$42 >> 2] = $44;
return;
}
case 1:
{
$28 = $0 + 16 | 0;
HEAP32[$28 >> 2] = (HEAP32[$28 >> 2] | 0) + -1;
break;
}
default:
{}
}
$31 = HEAP32[$18 >> 2] | 0;
$33 = __Znwj(12) | 0;
$34 = $31 + 8 | 0;
$35 = HEAP32[$34 >> 2] | 0;
HEAP32[$33 >> 2] = $1;
HEAP32[$33 + 4 >> 2] = $2;
HEAP32[$33 + 8 >> 2] = $35;
HEAP32[$34 >> 2] = $33;
$$sink$i = $0 + 8 | 0;
$38 = HEAP32[$$sink$i >> 2] | 0;
$39 = $38 + 1 | 0;
HEAP32[$$sink$i >> 2] = $39;
$40 = HEAP16[$19 >> 1] | 0;
$41 = $40 + 1 << 16 >> 16;
HEAP16[$19 >> 1] = $41;
$42 = $0 + 24 | 0;
$43 = HEAP32[$42 >> 2] | 0;
$44 = $43 + 1 | 0;
HEAP32[$42 >> 2] = $44;
return;
}
function __ZN14RepeatMovementC2E12SET_OF_HANDS($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $10 = 0, $13 = 0, $16 = 0, $19 = 0, $22 = 0, $25 = 0, $28 = 0, $3 = 0, $31 = 0, $37 = 0, $7 = 0, dest = 0, stop = 0;
__ZN13BasicMovementC2E12MovementType12SET_OF_HANDS($0, 8, $1);
HEAP32[$0 >> 2] = 2656;
$3 = $0 + 568 | 0;
dest = $0 + 528 | 0;
stop = dest + 40 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP16[$3 >> 1] = 1;
HEAP8[$0 + 570 >> 0] = 0;
HEAP8[$0 + 571 >> 0] = 1;
HEAP8[$0 + 572 >> 0] = 0;
__THREW__ = 0;
invoke_vi(143, $3 | 0);
$7 = __THREW__;
__THREW__ = 0;
if (!($7 & 1)) {
__THREW__ = 0;
invoke_vi(98, $0 + 592 | 0);
$10 = __THREW__;
__THREW__ = 0;
if (!($10 & 1)) {
__THREW__ = 0;
invoke_vi(98, $0 + 604 | 0);
$13 = __THREW__;
__THREW__ = 0;
if (!($13 & 1)) {
__THREW__ = 0;
invoke_vi(98, $0 + 616 | 0);
$16 = __THREW__;
__THREW__ = 0;
if (!($16 & 1)) {
__THREW__ = 0;
invoke_vi(98, $0 + 628 | 0);
$19 = __THREW__;
__THREW__ = 0;
if (!($19 & 1)) {
__THREW__ = 0;
invoke_vi(98, $0 + 640 | 0);
$22 = __THREW__;
__THREW__ = 0;
if (!($22 & 1)) {
__THREW__ = 0;
invoke_vi(98, $0 + 652 | 0);
$25 = __THREW__;
__THREW__ = 0;
if (!($25 & 1)) {
__THREW__ = 0;
invoke_vi(98, $0 + 664 | 0);
$28 = __THREW__;
__THREW__ = 0;
if (!($28 & 1)) {
__THREW__ = 0;
invoke_vi(98, $0 + 676 | 0);
$31 = __THREW__;
__THREW__ = 0;
if (!($31 & 1)) {
HEAPF32[$0 + 688 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 692 >> 2] = Math_fround(1.0);
HEAP32[$0 + 696 >> 2] = 0;
HEAP32[$0 + 700 >> 2] = 0;
return;
}
}
}
}
}
}
}
}
}
$37 = ___cxa_find_matching_catch_2() | 0;
HEAP32[$0 >> 2] = 1984;
HEAP32[$0 + 452 >> 2] = 0;
HEAP32[$0 + 340 >> 2] = 0;
HEAP32[$0 + 228 >> 2] = 0;
HEAP32[$0 + 116 >> 2] = 0;
___resumeException($37 | 0);
}
function __ZN12FaceAnimator7newTimeEffPfb($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = Math_fround($2);
$3 = $3 | 0;
$4 = $4 | 0;
var $$05$i = 0, $10 = 0, $16 = 0, $17 = 0, $19 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0;
if (!$3) return;
if ((__ZNK28InvertibleDynamicStringArray6lengthEv(HEAP32[17820] | 0) | 0) > 0) {
$$05$i = 0;
$10 = 0;
do {
HEAPF32[$3 + ($10 << 2) >> 2] = Math_fround(0.0);
$$05$i = $$05$i + 1 << 16 >> 16;
$10 = $$05$i << 16 >> 16;
} while ((__ZNK28InvertibleDynamicStringArray6lengthEv(HEAP32[17820] | 0) | 0) > ($10 | 0));
}
$16 = $0 + 8 | 0;
$17 = HEAP32[$16 >> 2] | 0;
if (!$17) return;
$19 = HEAP32[$17 >> 2] | 0;
if (!$19) $22 = $17; else {
__ZN17NonmanualMovement21getCurrentFacePostureEffPfb($19, $1, $2, $3, $4);
$22 = HEAP32[$16 >> 2] | 0;
}
$23 = HEAP32[$22 + 4 >> 2] | 0;
if (!$23) $26 = $22; else {
__ZN17NonmanualMovement21getCurrentFacePostureEffPfb($23, $1, $2, $3, $4);
$26 = HEAP32[$16 >> 2] | 0;
}
$27 = HEAP32[$26 + 8 >> 2] | 0;
if (!$27) $30 = $26; else {
__ZN17NonmanualMovement21getCurrentFacePostureEffPfb($27, $1, $2, $3, $4);
$30 = HEAP32[$16 >> 2] | 0;
}
$31 = HEAP32[$30 + 12 >> 2] | 0;
if (!$31) $34 = $30; else {
__ZN17NonmanualMovement21getCurrentFacePostureEffPfb($31, $1, $2, $3, $4);
$34 = HEAP32[$16 >> 2] | 0;
}
$35 = HEAP32[$34 + 16 >> 2] | 0;
if (!$35) $38 = $34; else {
__ZN17NonmanualMovement21getCurrentFacePostureEffPfb($35, $1, $2, $3, $4);
$38 = HEAP32[$16 >> 2] | 0;
}
$39 = HEAP32[$38 + 20 >> 2] | 0;
if (!$39) $42 = $38; else {
__ZN17NonmanualMovement21getCurrentFacePostureEffPfb($39, $1, $2, $3, $4);
$42 = HEAP32[$16 >> 2] | 0;
}
$43 = HEAP32[$42 + 24 >> 2] | 0;
if (!$43) $46 = $42; else {
__ZN17NonmanualMovement21getCurrentFacePostureEffPfb($43, $1, $2, $3, $4);
$46 = HEAP32[$16 >> 2] | 0;
}
$47 = HEAP32[$46 + 28 >> 2] | 0;
if (!$47) return;
__ZN17NonmanualMovement21getCurrentFacePostureEffPfb($47, $1, $2, $3, $4);
return;
}
function __ZN18AbstractTimedMorph7rescaleEfff($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = Math_fround($2);
$3 = Math_fround($3);
var $$1 = f0, $12 = f0, $15 = f0, $18 = f0, $22 = f0, $34 = 0.0, $4 = 0, $49 = f0, $5 = f0, $51 = f0, $6 = 0, $8 = f0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$vararg_buffer7 = sp + 40 | 0;
$vararg_buffer4 = sp + 32 | 0;
$vararg_buffer = sp;
$4 = $3 <= Math_fround(0.0);
$5 = $4 ? Math_fround(1.0) : $3;
$6 = $2 <= Math_fround(0.0);
$8 = Math_fround($5 / ($6 ? Math_fround(1.0) : $2));
if ($1 != Math_fround(-1.0) & $1 > Math_fround(0.0)) {
$12 = Math_fround(HEAPF32[$0 + 12 >> 2]);
$15 = Math_fround($12 + Math_fround(HEAPF32[$0 + 16 >> 2]));
$18 = Math_fround($15 - Math_fround(HEAPF32[$0 + 4 >> 2]));
$22 = Math_fround(Math_fround($18 - Math_fround(HEAPF32[$0 + 8 >> 2])) * Math_fround(.5));
if ($22 > Math_fround(0.0)) $$1 = Math_fround($8 * Math_fround($1 / $22)); else $$1 = $8;
} else $$1 = $8;
if (!($$1 != Math_fround(1.0))) {
STACKTOP = sp;
return;
}
if (0) {
HEAPF64[$vararg_buffer >> 3] = +$1;
HEAPF64[$vararg_buffer + 8 >> 3] = +$2;
HEAPF64[$vararg_buffer + 16 >> 3] = +$3;
HEAPF64[$vararg_buffer + 24 >> 3] = +$$1;
__Z7eprintfPKcz(34416, $vararg_buffer);
$34 = +Math_fround(HEAPF32[$0 + 4 >> 2]);
HEAPF64[$vararg_buffer4 >> 3] = $34;
__Z7eprintfPKcz(34468, $vararg_buffer4);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 40 >> 2] & 255]($0, HEAP32[16082] | 0);
__Z5eputcc(10);
}
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 63]($0, $$1);
if (0) {
HEAPF64[$vararg_buffer7 >> 3] = +$$1;
__Z7eprintfPKcz(34506, $vararg_buffer7);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 40 >> 2] & 255]($0, HEAP32[16082] | 0);
__Z5eputcc(10);
}
$49 = Math_fround(HEAPF32[$0 + 4 >> 2]);
if (!($49 != Math_fround(0.0))) {
STACKTOP = sp;
return;
}
$51 = Math_fround(-$49);
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 63]($0, $51);
STACKTOP = sp;
return;
}
function __ZN18HandJointRotations25transferSiteNormalToWristER6VectorP4Site($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0$ph$ph = 0, $$011$i = 0, $$0810$i = 0, $$1 = 0, $10 = 0, $12 = 0, $14 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $7 = 0, $9 = 0, $indvars$iv = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$3 = sp + 16 | 0;
$4 = sp;
if ($2 | 0) {
$7 = HEAP32[$2 + 24 >> 2] | 0;
if ($7 | 0) {
__ZN6Vector7setFromERKS_($1, $7);
$9 = $2 + 12 | 0;
$10 = HEAPU16[$9 >> 1] | 0 | (HEAPU8[$9 + 2 >> 0] | 0) << 16;
$12 = ($10 & 16777215) >>> 15 & 31;
if (!($12 & 16777215)) {
$$1 = 1;
STACKTOP = sp;
return $$1 | 0;
}
$14 = $12 & 16777215;
if (!($14 & 1)) {
$$011$i = 0;
$$0810$i = $14;
do {
$$0810$i = $$0810$i >> 1;
$$011$i = $$011$i + 1 << 16 >> 16;
} while (!($$0810$i & 1 | 0));
if ($$011$i << 16 >> 16 == -1) {
$$1 = 1;
STACKTOP = sp;
return $$1 | 0;
} else $27 = $$011$i << 16 >> 16;
} else $27 = 0;
switch (($10 & 255) << 24 >> 24) {
case 7:
{
$$0$ph$ph = 2;
break;
}
case 9:
{
$$0$ph$ph = 1;
break;
}
case 10:
{
$$0$ph$ph = 0;
break;
}
default:
{
$$1 = 1;
STACKTOP = sp;
return $$1 | 0;
}
}
$23 = $3 + 4 | 0;
$24 = $3 + 8 | 0;
$25 = $3 + 12 | 0;
$indvars$iv = $$0$ph$ph;
while (1) {
__ZN6VectorC2ERKS_($4, $1);
$28 = HEAP32[$0 + ($27 * 12 | 0) + ($indvars$iv << 2) >> 2] | 0;
HEAPF32[$3 >> 2] = Math_fround(0.0);
HEAPF32[$23 >> 2] = Math_fround(0.0);
HEAPF32[$24 >> 2] = Math_fround(0.0);
HEAPF32[$25 >> 2] = Math_fround(1.0);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$28 >> 2] | 0) + 8 >> 2] & 255]($28, $3);
__ZNK10Quaternion12rotateVectorERK6VectorRS0_($3, $4, $1);
if (($indvars$iv | 0) > 0) $indvars$iv = $indvars$iv + -1 | 0; else {
$$1 = 1;
break;
}
}
STACKTOP = sp;
return $$1 | 0;
}
}
__ZN6Vector7setZeroEv($1);
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
function __ZN5SiGML15convertBodySideEPKc9Mirroringb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0$i = 0, $$012$i$i$i = 0, $$01215$i$i$i = 0, $$01216$i$i$i = 0, $$sink$i$i$i = 0, $21 = 0, $28 = 0, $3 = 0, $4 = 0, $8 = 0, $9 = 0, $tmpcast$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$tmpcast$byval_copy = sp + 6 | 0;
$vararg_buffer = sp;
$3 = sp + 4 | 0;
$4 = HEAP32[17193] | 0;
if (!$0) {
$28 = 0;
STACKTOP = sp;
return $28 | 0;
}
$8 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($0, HEAP32[$4 + 4 >> 2] | 0) | 0;
$9 = HEAP32[$4 >> 2] | 0;
L4 : do if ((HEAP16[$9 + ($8 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i = HEAP32[$9 + ($8 << 3) >> 2] | 0;
if (!$$01215$i$i$i) label = 7; else {
$$01216$i$i$i = $$01215$i$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($0, HEAP32[$$01216$i$i$i >> 2] | 0) | 0) break;
$$012$i$i$i = HEAP32[$$01216$i$i$i + 8 >> 2] | 0;
if (!$$012$i$i$i) {
label = 7;
break L4;
} else $$01216$i$i$i = $$012$i$i$i;
}
$$sink$i$i$i = $$01216$i$i$i + 4 | 0;
}
} else label = 7; while (0);
if ((label | 0) == 7) $$sink$i$i$i = $4 + 20 | 0;
$21 = HEAP32[$$sink$i$i$i >> 2] | 0;
switch ($21 | 0) {
case -1:
{
HEAP32[$vararg_buffer >> 2] = $0;
__Z7eprintfPKcz(53557, $vararg_buffer);
$28 = 0;
STACKTOP = sp;
return $28 | 0;
}
case 0:
{
$28 = 0;
STACKTOP = sp;
return $28 | 0;
}
default:
{
switch ($21 | 0) {
case 1:
{
$$0$i = $2 ? 1 : 2;
break;
}
case 2:
{
$$0$i = $2 ? 2 : 1;
break;
}
case 3:
{
$$0$i = $2 ? 3 : 4;
break;
}
case 4:
{
$$0$i = $2 ? 4 : 3;
break;
}
default:
$$0$i = 0;
}
HEAP16[$3 >> 1] = HEAP16[$1 >> 1] | 0;
HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$3 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$3 + 1 >> 0] | 0;
$28 = __Z14MirrorBodySide16AbsoluteBodySide9Mirroring($$0$i, $tmpcast$byval_copy) | 0;
STACKTOP = sp;
return $28 | 0;
}
}
return 0;
}
function __ZN11TokenStream11requireCharEv($0) {
$0 = $0 | 0;
var $$$i = 0, $$021$i = 0, $$023$i = 0, $$pre$i = 0, $$sink = 0, $1 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $33 = 0, $35 = 0, $37 = 0, $4 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $5 = 0, $54 = 0, $55 = 0, $57 = 0, $6 = 0, $8 = 0, $9 = 0;
$1 = $0 + 24 | 0;
$2 = HEAP32[$1 >> 2] | 0;
$3 = $0 + 16 | 0;
$4 = HEAP32[$3 >> 2] | 0;
$5 = $4 + 12 | 0;
$6 = HEAP32[$5 >> 2] | 0;
if (($2 | 0) < ($6 | 0)) return;
$8 = $0 + 28 | 0;
$9 = HEAP32[$8 >> 2] | 0;
if (($9 | 0) > -1) {
if (($6 | 0) > 0 & ($6 | 0) > ($9 | 0)) {
$13 = $9 + $6 | 0;
if (($13 | 0) < 1) {
$27 = $2;
$28 = $9;
} else {
$15 = ($9 | 0) > 0;
$$$i = $15 ? $9 : 0;
$$021$i = ($13 | 0) > ($6 | 0) ? $6 : $13;
$17 = $$021$i - $$$i | 0;
if ($15 & ($$021$i | 0) > ($$$i | 0)) {
$$023$i = $$$i;
do {
$19 = HEAP32[$4 >> 2] | 0;
HEAP8[$19 + ($$023$i - $$$i) >> 0] = HEAP8[$19 + $$023$i >> 0] | 0;
$$023$i = $$023$i + 1 | 0;
} while (($$023$i | 0) < ($$021$i | 0));
}
HEAP32[$5 >> 2] = $17;
$27 = HEAP32[$1 >> 2] | 0;
$28 = HEAP32[$8 >> 2] | 0;
}
} else {
$27 = $2;
$28 = $9;
}
HEAP32[$1 >> 2] = $27 - $28;
$$sink = $8;
} else {
HEAP32[$5 >> 2] = 0;
$$sink = $1;
}
HEAP32[$$sink >> 2] = 0;
$29 = HEAP32[$3 >> 2] | 0;
$33 = HEAP32[$29 + 8 >> 2] | 0;
if ((HEAP32[$29 + 12 >> 2] | 0) >= ($33 | 0)) {
$35 = $33 + 999 | 0;
$37 = HEAP32[$29 + 4 >> 2] | 0;
if (($37 | 0) > ($35 | 0)) $42 = $37; else $42 = $33 + 1e3 + (($35 | 0) / 2 | 0) | 0;
__ZN12DynamicArrayIcLc0EE6resizeEi($29, $42);
}
$44 = HEAP32[$0 + 4 >> 2] | 0;
if (!$44) return;
$46 = HEAP32[$3 >> 2] | 0;
$48 = HEAP32[$46 + 12 >> 2] | 0;
$$pre$i = HEAP32[$46 + 8 >> 2] | 0;
if (($48 | 0) > -1 & ($$pre$i | 0) > ($48 | 0)) $54 = (HEAP32[$46 >> 2] | 0) + $48 | 0; else $54 = 0;
$55 = _fread($54, 1, $$pre$i - $48 | 0, $44) | 0;
$57 = (HEAP32[$3 >> 2] | 0) + 12 | 0;
HEAP32[$57 >> 2] = (HEAP32[$57 >> 2] | 0) + $55;
return;
}
function __ZL18checkComponentTypeP7XMLCelli13SiGML_Element($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0 = 0, $$pre$i = 0, $13 = 0, $19 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer7 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$vararg_buffer7 = sp + 24 | 0;
$vararg_buffer2 = sp + 8 | 0;
$vararg_buffer = sp;
if ($0 | 0) {
$4 = $0 + 8 | 0;
$5 = HEAP32[$4 >> 2] | 0;
if ($5 | 0) {
$$pre$i = HEAP32[$5 + 12 >> 2] | 0;
if (($1 | 0) > -1 & ($$pre$i | 0) > ($1 | 0)) {
$13 = HEAP32[(HEAP32[$5 >> 2] | 0) + ($1 << 2) >> 2] | 0;
if ($13 | 0) {
$19 = __ZNK21InvertibleStringArray14indexFromValueEPKc(HEAP32[17757] | 0, HEAP32[$13 >> 2] | 0) | 0;
if (!$19) {
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
if (($19 | 0) != ($2 | 0)) {
$22 = HEAP32[$0 >> 2] | 0;
$24 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, $2) | 0;
$26 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17757] | 0, $19) | 0;
HEAP32[$vararg_buffer7 >> 2] = $1;
HEAP32[$vararg_buffer7 + 4 >> 2] = $22;
HEAP32[$vararg_buffer7 + 8 >> 2] = $24;
HEAP32[$vararg_buffer7 + 12 >> 2] = $26;
__Z7eprintfPKcz(30249, $vararg_buffer7);
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
$27 = HEAP32[$4 >> 2] | 0;
if ((HEAP32[$27 + 12 >> 2] | 0) <= ($1 | 0)) {
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
$$0 = HEAP32[(HEAP32[$27 >> 2] | 0) + ($1 << 2) >> 2] | 0;
STACKTOP = sp;
return $$0 | 0;
}
}
HEAP32[$vararg_buffer2 >> 2] = HEAP32[$0 >> 2];
HEAP32[$vararg_buffer2 + 4 >> 2] = $1 + 1;
HEAP32[$vararg_buffer2 + 8 >> 2] = $$pre$i;
__Z7eprintfPKcz(30189, $vararg_buffer2);
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
}
HEAP32[$vararg_buffer >> 2] = HEAP32[$0 >> 2];
HEAP32[$vararg_buffer + 4 >> 2] = $1 + 1;
__Z7eprintfPKcz(30127, $vararg_buffer);
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
function __Z19AddMovementsFromXMLPK7GestureP11SeqMovementP13DynamicArrayPI7XMLCellEibb9Mirroring8Location($0, $1, $2, $3, $4, $5, $6, $7) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
$6 = $6 | 0;
$7 = $7 | 0;
var $$019 = 0, $$pre$phi$iZ2D = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $30 = 0, $34 = 0, $36 = 0, $8 = 0, $9 = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$tmpcast$byval_copy = sp + 6 | 0;
$8 = sp;
$9 = sp + 4 | 0;
if (!$1) {
STACKTOP = sp;
return;
}
$11 = $2 + 12 | 0;
$13 = (HEAP32[$11 >> 2] | 0) - $3 | 0;
if (($13 | 0) <= 0) {
STACKTOP = sp;
return;
}
$15 = HEAP16[$6 >> 1] | 0;
$16 = $1 + 528 | 0;
$17 = $1 + 540 | 0;
$18 = $1 + 536 | 0;
$19 = $1 + 532 | 0;
$$019 = 0;
do {
$20 = $$019 + $3 | 0;
if (($20 | 0) < 0) $27 = 0; else if ((HEAP32[$11 >> 2] | 0) > ($20 | 0)) $27 = HEAP32[(HEAP32[$2 >> 2] | 0) + ($20 << 2) >> 2] | 0; else $27 = 0;
HEAP32[$8 >> 2] = 0;
HEAP16[$9 >> 1] = $15;
HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$9 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$9 + 1 >> 0] | 0;
__Z21SingleMovementFromXMLPK7GestureRP13BasicMovementP7XMLCellbb9Mirroring8Location($0, $8, $27, $4, $5, $tmpcast$byval_copy, $7);
$28 = HEAP32[$8 >> 2] | 0;
if ($28 | 0) {
$30 = HEAP32[$17 >> 2] | 0;
if (($30 | 0) >= 0) {
if ((HEAP32[$18 >> 2] | 0) > ($30 | 0)) {
$$pre$phi$iZ2D = $30 + 1 | 0;
label = 12;
} else {
$34 = HEAP32[$19 >> 2] | 0;
$36 = $30 + 1 | 0;
__ZN13DynamicArrayPI13BasicMovementE6resizeEi($16, ($34 | 0) > ($30 | 0) ? $34 : $36 + ($30 >>> 1) | 0);
if ((HEAP32[$17 >> 2] | 0) <= ($30 | 0)) {
$$pre$phi$iZ2D = $36;
label = 12;
}
}
if ((label | 0) == 12) {
label = 0;
HEAP32[$17 >> 2] = $$pre$phi$iZ2D;
}
HEAP32[(HEAP32[$16 >> 2] | 0) + ($30 << 2) >> 2] = $28;
}
}
$$019 = $$019 + 1 | 0;
} while (($$019 | 0) != ($13 | 0));
STACKTOP = sp;
return;
}
function __ZN20QuaternionController5resetEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $22 = 0, $27 = 0, $31 = 0, $35 = 0, $39 = 0, $43 = 0, $8 = 0, $9 = 0;
$2 = $0 + 452 | 0;
$8 = $0 + 32 | 0;
HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
HEAP32[$8 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
HEAP32[$8 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
HEAP32[$8 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
$9 = HEAP32[$0 + 476 >> 2] | 0;
HEAP32[$0 + 28 >> 2] = $9;
$10 = HEAP32[$0 + 468 >> 2] | 0;
HEAP32[$0 + 52 >> 2] = $10;
$12 = HEAP32[$0 + 472 >> 2] | 0;
HEAP32[$0 + 60 >> 2] = $12;
$14 = HEAP32[$0 + 448 >> 2] | 0;
HEAP32[$0 + 76 >> 2] = $14;
$17 = $0 + 140 | 0;
HEAP32[$17 >> 2] = HEAP32[$2 >> 2];
HEAP32[$17 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
HEAP32[$17 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
HEAP32[$17 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
HEAP32[$0 + 136 >> 2] = $9;
HEAP32[$0 + 160 >> 2] = $10;
HEAP32[$0 + 168 >> 2] = $12;
HEAP32[$0 + 184 >> 2] = $14;
$22 = $0 + 248 | 0;
HEAP32[$22 >> 2] = HEAP32[$2 >> 2];
HEAP32[$22 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
HEAP32[$22 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
HEAP32[$22 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
HEAP32[$0 + 244 >> 2] = $9;
HEAP32[$0 + 268 >> 2] = $10;
HEAP32[$0 + 276 >> 2] = $12;
HEAP32[$0 + 292 >> 2] = $14;
$27 = $0 + 356 | 0;
HEAP32[$27 >> 2] = HEAP32[$2 >> 2];
HEAP32[$27 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
HEAP32[$27 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
HEAP32[$27 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
HEAP32[$0 + 352 >> 2] = $9;
HEAP32[$0 + 376 >> 2] = $10;
HEAP32[$0 + 384 >> 2] = $12;
HEAP32[$0 + 400 >> 2] = $14;
$31 = $0 + 16 | 0;
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$31 >> 2] | 0) + 8 >> 2] & 63]($31, $1);
$35 = $0 + 124 | 0;
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$35 >> 2] | 0) + 8 >> 2] & 63]($35, $1);
$39 = $0 + 232 | 0;
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$39 >> 2] | 0) + 8 >> 2] & 63]($39, $1);
$43 = $0 + 340 | 0;
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$43 >> 2] | 0) + 8 >> 2] & 63]($43, $1);
HEAPF32[$0 + 480 >> 2] = $1;
HEAPF32[$0 + 4 >> 2] = $1;
return;
}
function _normal_attributeValueTok($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$04555 = 0, $$sink = 0, $16 = 0, $26 = 0, $5 = 0, label = 0;
do if (($1 | 0) == ($2 | 0)) $$0 = -4; else {
$5 = $0 + 72 | 0;
$$04555 = $1;
L3 : while (1) {
switch (HEAP8[$5 + (HEAPU8[$$04555 >> 0] | 0) >> 0] | 0) {
case 3:
{
label = 6;
break L3;
break;
}
case 2:
{
label = 9;
break L3;
break;
}
case 10:
{
label = 10;
break L3;
break;
}
case 9:
{
label = 13;
break L3;
break;
}
case 21:
{
label = 17;
break L3;
break;
}
case 5:
{
$$sink = 2;
break;
}
case 6:
{
$$sink = 3;
break;
}
case 7:
{
$$sink = 4;
break;
}
default:
$$sink = 1;
}
$26 = $$04555 + $$sink | 0;
if (($26 | 0) == ($2 | 0)) {
label = 22;
break;
} else $$04555 = $26;
}
if ((label | 0) == 6) if (($$04555 | 0) == ($1 | 0)) {
$$0 = _normal_scanRef($0, $1 + 1 | 0, $2, $3) | 0;
break;
} else {
HEAP32[$3 >> 2] = $$04555;
$$0 = 6;
break;
} else if ((label | 0) == 9) {
HEAP32[$3 >> 2] = $$04555;
$$0 = 0;
break;
} else if ((label | 0) == 10) if (($$04555 | 0) == ($1 | 0)) {
HEAP32[$3 >> 2] = $1 + 1;
$$0 = 7;
break;
} else {
HEAP32[$3 >> 2] = $$04555;
$$0 = 6;
break;
} else if ((label | 0) == 13) {
if (($$04555 | 0) != ($1 | 0)) {
HEAP32[$3 >> 2] = $$04555;
$$0 = 6;
break;
}
$16 = $1 + 1 | 0;
if (($16 | 0) == ($2 | 0)) {
$$0 = -3;
break;
}
HEAP32[$3 >> 2] = (HEAP8[$5 + (HEAPU8[$16 >> 0] | 0) >> 0] | 0) == 10 ? $1 + 2 | 0 : $16;
$$0 = 7;
break;
} else if ((label | 0) == 17) if (($$04555 | 0) == ($1 | 0)) {
HEAP32[$3 >> 2] = $1 + 1;
$$0 = 39;
break;
} else {
HEAP32[$3 >> 2] = $$04555;
$$0 = 6;
break;
} else if ((label | 0) == 22) {
HEAP32[$3 >> 2] = $2;
$$0 = 6;
break;
}
} while (0);
return $$0 | 0;
}
function __ZN12FaceAnimatorC2EPK11HanimAvatar($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$lcssa = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $35 = 0, $36 = 0, $5 = 0, $6 = 0, $9 = 0;
HEAPF32[$0 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 4 >> 2] = Math_fround(0.0);
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 44 >> 2] = $1;
$5 = __Znwj(108) | 0;
__THREW__ = 0;
invoke_vi(100, $5 | 0);
$6 = __THREW__;
__THREW__ = 0;
if ($6 & 1) $$lcssa = $5; else {
HEAP32[$0 + 12 >> 2] = $5;
$9 = __Znwj(108) | 0;
__THREW__ = 0;
invoke_vi(100, $9 | 0);
$10 = __THREW__;
__THREW__ = 0;
if ($10 & 1) $$lcssa = $9; else {
HEAP32[$0 + 16 >> 2] = $9;
$15 = __Znwj(108) | 0;
__THREW__ = 0;
invoke_vi(100, $15 | 0);
$16 = __THREW__;
__THREW__ = 0;
if ($16 & 1) $$lcssa = $15; else {
HEAP32[$0 + 20 >> 2] = $15;
$19 = __Znwj(108) | 0;
__THREW__ = 0;
invoke_vi(100, $19 | 0);
$20 = __THREW__;
__THREW__ = 0;
if ($20 & 1) $$lcssa = $19; else {
HEAP32[$0 + 24 >> 2] = $19;
$23 = __Znwj(108) | 0;
__THREW__ = 0;
invoke_vi(100, $23 | 0);
$24 = __THREW__;
__THREW__ = 0;
if ($24 & 1) $$lcssa = $23; else {
HEAP32[$0 + 28 >> 2] = $23;
$27 = __Znwj(108) | 0;
__THREW__ = 0;
invoke_vi(100, $27 | 0);
$28 = __THREW__;
__THREW__ = 0;
if ($28 & 1) $$lcssa = $27; else {
HEAP32[$0 + 32 >> 2] = $27;
$31 = __Znwj(108) | 0;
__THREW__ = 0;
invoke_vi(100, $31 | 0);
$32 = __THREW__;
__THREW__ = 0;
if ($32 & 1) $$lcssa = $31; else {
HEAP32[$0 + 36 >> 2] = $31;
$35 = __Znwj(108) | 0;
__THREW__ = 0;
invoke_vi(100, $35 | 0);
$36 = __THREW__;
__THREW__ = 0;
if ($36 & 1) $$lcssa = $35; else {
HEAP32[$0 + 40 >> 2] = $35;
return;
}
}
}
}
}
}
}
}
$12 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($$lcssa);
___resumeException($12 | 0);
}
function __ZN12ThumbBending15SetThumbBendingEPKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$sink$i = f0, $$sink12$i = f0, $$sink13$i = f0, $$sink14$i = f0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $25 = f0, $27 = f0, $29 = f0, $31 = f0, $6 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer5 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 80 | 0;
$vararg_buffer5 = sp + 64 | 0;
$vararg_buffer = sp + 40 | 0;
$2 = sp;
if (!$1) {
STACKTOP = sp;
return;
}
if (Math_fround(HEAPF32[$0 >> 2]) != Math_fround(-100.0)) {
STACKTOP = sp;
return;
}
$6 = $0 + 4 | 0;
if (Math_fround(HEAPF32[$6 >> 2]) != Math_fround(-100.0)) {
STACKTOP = sp;
return;
}
$9 = $0 + 8 | 0;
if (Math_fround(HEAPF32[$9 >> 2]) != Math_fround(-100.0)) {
STACKTOP = sp;
return;
}
$12 = $0 + 12 | 0;
if (Math_fround(HEAPF32[$12 >> 2]) != Math_fround(-100.0)) {
STACKTOP = sp;
return;
}
$15 = $0 + 16 | 0;
if (Math_fround(HEAPF32[$15 >> 2]) != Math_fround(-100.0)) {
STACKTOP = sp;
return;
}
$18 = $2 + 8 | 0;
$19 = $2 + 16 | 0;
$20 = $2 + 24 | 0;
$21 = $2 + 32 | 0;
HEAP32[$vararg_buffer >> 2] = $2;
HEAP32[$vararg_buffer + 4 >> 2] = $18;
HEAP32[$vararg_buffer + 8 >> 2] = $19;
HEAP32[$vararg_buffer + 12 >> 2] = $20;
HEAP32[$vararg_buffer + 16 >> 2] = $21;
if ((_sscanf($1, 49841, $vararg_buffer) | 0) == 5) {
$25 = Math_fround(+HEAPF64[$2 >> 3]);
HEAPF32[$0 >> 2] = $25;
$27 = Math_fround(+HEAPF64[$18 >> 3]);
$29 = Math_fround(+HEAPF64[$19 >> 3]);
$31 = Math_fround(+HEAPF64[$20 >> 3]);
$$sink$i = Math_fround(+HEAPF64[$21 >> 3]);
$$sink12$i = $31;
$$sink13$i = $29;
$$sink14$i = $27;
} else {
HEAP32[$vararg_buffer5 >> 2] = $1;
__Z7eprintfPKcz(49861, $vararg_buffer5);
HEAPF32[$0 >> 2] = Math_fround(0.0);
$$sink$i = Math_fround(0.0);
$$sink12$i = Math_fround(0.0);
$$sink13$i = Math_fround(0.0);
$$sink14$i = Math_fround(0.0);
}
HEAPF32[$6 >> 2] = $$sink14$i;
HEAPF32[$9 >> 2] = $$sink13$i;
HEAPF32[$12 >> 2] = $$sink12$i;
HEAPF32[$15 >> 2] = $$sink$i;
STACKTOP = sp;
return;
}
function _nextScaffoldPart($0) {
$0 = $0 | 0;
var $$051$in = 0, $$1 = 0, $$phi$trans$insert = 0, $$pre53 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $22 = 0, $28 = 0, $3 = 0, $31 = 0, $33 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $44 = 0, $45 = 0, $49 = 0, $storemerge = 0;
$2 = HEAP32[$0 + 340 >> 2] | 0;
$3 = $2 + 164 | 0;
do if (!(HEAP32[$3 >> 2] | 0)) {
$11 = FUNCTION_TABLE_ii[HEAP32[$0 + 12 >> 2] & 63](HEAP32[$0 + 452 >> 2] << 2) | 0;
HEAP32[$3 >> 2] = $11;
if (!$11) {
$$1 = -1;
return $$1 | 0;
} else {
HEAP32[$11 >> 2] = 0;
break;
}
} while (0);
$13 = $2 + 156 | 0;
$14 = HEAP32[$13 >> 2] | 0;
$15 = $2 + 152 | 0;
$16 = HEAP32[$15 >> 2] | 0;
$$phi$trans$insert = $2 + 144 | 0;
$$pre53 = HEAP32[$$phi$trans$insert >> 2] | 0;
if ($14 >>> 0 < $16 >>> 0) {
$31 = $14;
$40 = $$pre53;
} else {
do if (!$$pre53) {
$28 = FUNCTION_TABLE_ii[HEAP32[$0 + 12 >> 2] & 63](896) | 0;
if (!$28) {
$$1 = -1;
return $$1 | 0;
} else {
$$051$in = $28;
$storemerge = 32;
}
} else {
$22 = FUNCTION_TABLE_iii[HEAP32[$0 + 16 >> 2] & 63]($$pre53, $16 * 56 | 0) | 0;
if (!$22) {
$$1 = -1;
return $$1 | 0;
} else {
$$051$in = $22;
$storemerge = HEAP32[$15 >> 2] << 1;
break;
}
} while (0);
HEAP32[$15 >> 2] = $storemerge;
HEAP32[$$phi$trans$insert >> 2] = $$051$in;
$31 = HEAP32[$13 >> 2] | 0;
$40 = $$051$in;
}
HEAP32[$13 >> 2] = $31 + 1;
$33 = HEAP32[$2 + 160 >> 2] | 0;
if ($33 | 0) {
$38 = HEAP32[(HEAP32[$3 >> 2] | 0) + ($33 + -1 << 2) >> 2] | 0;
$39 = $40 + ($38 * 28 | 0) + 16 | 0;
$41 = HEAP32[$39 >> 2] | 0;
if ($41 | 0) HEAP32[$40 + ($41 * 28 | 0) + 24 >> 2] = $31;
$44 = $40 + ($38 * 28 | 0) + 20 | 0;
$45 = HEAP32[$44 >> 2] | 0;
if (!$45) HEAP32[$40 + ($38 * 28 | 0) + 12 >> 2] = $31;
HEAP32[$39 >> 2] = $31;
HEAP32[$44 >> 2] = $45 + 1;
}
$49 = $40 + ($31 * 28 | 0) + 12 | 0;
HEAP32[$49 >> 2] = 0;
HEAP32[$49 + 4 >> 2] = 0;
HEAP32[$49 + 8 >> 2] = 0;
HEAP32[$49 + 12 >> 2] = 0;
$$1 = $31;
return $$1 | 0;
}
function __ZN18HandJointRotations19transferSiteToWristER6VectorP4Site($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0$ph$ph = 0, $$011$i = 0, $$0810$i = 0, $$09$i = 0, $10 = 0, $14 = 0, $18 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $indvars$iv = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$3 = sp + 16 | 0;
$4 = sp;
$5 = $2 + 12 | 0;
$8 = ((HEAPU16[$5 >> 1] | 0 | (HEAPU8[$5 + 2 >> 0] | 0) << 16) & 16777215) >>> 15 & 31;
if (!($8 & 16777215)) $$09$i = -1; else {
$10 = $8 & 16777215;
if (!($10 & 1)) {
$$011$i = 0;
$$0810$i = $10;
while (1) {
$$0810$i = $$0810$i >> 1;
$14 = $$011$i + 1 << 16 >> 16;
if ($$0810$i & 1 | 0) {
$$09$i = $14;
break;
} else $$011$i = $14;
}
} else $$09$i = 0;
}
__ZN6VectorC2EPKS_($3, __ZN4Site24getGlobalBoneTranslationEv($2) | 0);
__ZN6Vector7setFromERKS_($1, $3);
$18 = $$09$i << 16 >> 16;
if ($$09$i << 16 >> 16 == -1) {
STACKTOP = sp;
return;
}
switch (((HEAPU16[$5 >> 1] | 0 | (HEAPU8[$5 + 2 >> 0] | 0) << 16) & 255) << 24 >> 24) {
case 7:
{
$$0$ph$ph = 2;
break;
}
case 9:
{
$$0$ph$ph = 1;
break;
}
case 10:
{
$$0$ph$ph = 0;
break;
}
default:
{
STACKTOP = sp;
return;
}
}
$21 = $3 + 4 | 0;
$22 = $3 + 8 | 0;
$23 = $3 + 12 | 0;
$indvars$iv = $$0$ph$ph;
while (1) {
__ZN6VectorC2ERKS_($4, $1);
$24 = $0 + ($18 * 12 | 0) + ($indvars$iv << 2) | 0;
$25 = HEAP32[$24 >> 2] | 0;
HEAPF32[$3 >> 2] = Math_fround(0.0);
HEAPF32[$21 >> 2] = Math_fround(0.0);
HEAPF32[$22 >> 2] = Math_fround(0.0);
HEAPF32[$23 >> 2] = Math_fround(1.0);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$25 >> 2] | 0) + 8 >> 2] & 255]($25, $3);
__ZNK10Quaternion12rotateVectorERK6VectorRS0_($3, $4, $1);
__ZN6VectorC2EPKS_($3, __ZN5Joint24getGlobalBoneTranslationEv(HEAP32[(HEAP32[$24 >> 2] | 0) + 4 >> 2] | 0) | 0);
__ZN6Vector6setAddERKS_($1, $3);
if (($indvars$iv | 0) > 0) $indvars$iv = $indvars$iv + -1 | 0; else break;
}
STACKTOP = sp;
return;
}
function __ZN13DynamicArray1I6VectorE6resizeEi($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$020 = 0, $$06$i = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $32 = 0, $4 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer = sp;
$2 = sp + 8 | 0;
if (!$1) {
$4 = HEAP32[$0 >> 2] | 0;
if ($4 | 0) {
_free($4);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
STACKTOP = sp;
return;
}
$8 = $0 + 8 | 0;
$9 = HEAP32[$8 >> 2] | 0;
if (($9 | 0) == ($1 | 0)) {
STACKTOP = sp;
return;
}
$12 = _malloc($1 * 12 | 0) | 0;
if (!$12) if (($9 | 0) < ($1 | 0)) {
HEAP32[$vararg_buffer >> 2] = $9;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
__Z7eprintfPKcz(47403, $vararg_buffer);
$15 = ___cxa_allocate_exception(4) | 0;
HEAP32[$15 >> 2] = 1;
___cxa_throw($15 | 0, 32, 0);
} else {
STACKTOP = sp;
return;
}
$16 = $0 + 12 | 0;
$17 = HEAP32[$16 >> 2] | 0;
if (($17 | 0) > ($1 | 0)) {
HEAP32[$16 >> 2] = $1;
$20 = $1;
} else $20 = $17;
$21 = HEAP32[$0 >> 2] | 0;
if (($20 | 0) > 0) {
$$020 = 0;
do {
$23 = $21 + ($$020 * 12 | 0) | 0;
$24 = $12 + ($$020 * 12 | 0) | 0;
HEAP32[$24 >> 2] = HEAP32[$23 >> 2];
HEAP32[$24 + 4 >> 2] = HEAP32[$23 + 4 >> 2];
HEAP32[$24 + 8 >> 2] = HEAP32[$23 + 8 >> 2];
$$020 = $$020 + 1 | 0;
} while (($$020 | 0) < ($20 | 0));
label = 14;
} else if (!$21) $28 = $20; else label = 14;
if ((label | 0) == 14) {
_free($21);
HEAP32[$0 >> 2] = 0;
$28 = HEAP32[$16 >> 2] | 0;
}
HEAP32[$0 >> 2] = $12;
$27 = $1 - $28 | 0;
if (($27 | 0) > 0) {
$$06$i = 0;
do {
__ZN6VectorC2Ev($2);
$32 = (HEAP32[$0 >> 2] | 0) + (($$06$i + $28 | 0) * 12 | 0) | 0;
HEAP32[$32 >> 2] = HEAP32[$2 >> 2];
HEAP32[$32 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
HEAP32[$32 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
$$06$i = $$06$i + 1 | 0;
} while (($$06$i | 0) != ($27 | 0));
}
HEAP32[$8 >> 2] = $1;
STACKTOP = sp;
return;
}
function __ZL8ANMtoATM15AtomicNonmanual($0) {
$0 = $0 | 0;
var $$1 = 0, $$115 = 0, $$117 = 0, $13 = 0, $15 = 0, $18 = 0, $24 = 0, $26 = 0, $27 = 0, $3 = 0, $34 = 0, $45 = f0, $47 = f0, $49 = f0, $54 = f0, $9 = 0, label = 0;
L1 : do switch (HEAP32[$0 >> 2] | 0) {
case 11:
{
$3 = HEAP32[$0 + 8 >> 2] | 0;
if ($3 | 0) {
$$1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] & 63]($3) | 0;
label = 13;
break L1;
}
$9 = __Znwj(52) | 0;
__THREW__ = 0;
invoke_viifffi(1, $9 | 0, HEAP16[$0 + 4 >> 1] | 0, 1.0, 0.0, 0.0, 47473);
$13 = __THREW__;
__THREW__ = 0;
if ($13 & 1) {
$15 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($9);
___resumeException($15 | 0);
} else {
$$117 = $9;
break L1;
}
break;
}
case 9:
{
$18 = HEAP32[$0 + 8 >> 2] | 0;
if (!$18) {
$$115 = 0;
return $$115 | 0;
} else {
$$1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$18 >> 2] | 0) + 8 >> 2] & 63]($18) | 0;
label = 13;
break L1;
}
break;
}
default:
{
$24 = HEAP32[16660] | 0;
$26 = HEAP16[$0 + 4 >> 1] | 0;
$27 = $26 << 16 >> 16;
if ($26 << 16 >> 16 < 0) {
$$115 = 0;
return $$115 | 0;
}
if ((HEAP32[$24 + 12 >> 2] | 0) <= ($27 | 0)) {
$$115 = 0;
return $$115 | 0;
}
$34 = HEAP32[(HEAP32[$24 >> 2] | 0) + ($27 << 2) >> 2] | 0;
if (!$34) {
$$115 = 0;
return $$115 | 0;
} else {
$$1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 8 >> 2] & 63]($34) | 0;
label = 13;
break L1;
}
}
} while (0);
if ((label | 0) == 13) if (!$$1) {
$$115 = 0;
return $$115 | 0;
} else $$117 = $$1;
$45 = Math_fround(HEAPF32[$0 + 12 >> 2]);
$47 = Math_fround(HEAPF32[$0 + 16 >> 2]);
$49 = Math_fround(HEAPF32[$0 + 20 >> 2]);
FUNCTION_TABLE_vifff[HEAP32[(HEAP32[$$117 >> 2] | 0) + 48 >> 2] & 3]($$117, $45, $47, $49);
$54 = Math_fround(HEAPF32[$0 + 24 >> 2]);
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$$117 >> 2] | 0) + 24 >> 2] & 63]($$117, $54);
$$115 = $$117;
return $$115 | 0;
}
function __ZNK10Quaternion17invRotateRotationERS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $11 = f0, $13 = f0, $15 = f0, $16 = f0, $17 = f0, $18 = f0, $2 = f0, $25 = f0, $3 = 0, $32 = f0, $39 = f0, $4 = f0, $47 = f0, $5 = 0, $54 = f0, $6 = f0, $61 = f0, $68 = f0, $7 = 0, $76 = f0, $8 = f0, $9 = f0;
$2 = Math_fround(HEAPF32[$1 >> 2]);
$3 = $1 + 4 | 0;
$4 = Math_fround(HEAPF32[$3 >> 2]);
$5 = $1 + 8 | 0;
$6 = Math_fround(HEAPF32[$5 >> 2]);
$7 = $1 + 12 | 0;
$8 = Math_fround(HEAPF32[$7 >> 2]);
$9 = Math_fround(HEAPF32[$0 >> 2]);
$11 = Math_fround(HEAPF32[$0 + 4 >> 2]);
$13 = Math_fround(HEAPF32[$0 + 8 >> 2]);
$15 = Math_fround(HEAPF32[$0 + 12 >> 2]);
$16 = Math_fround(-$9);
$17 = Math_fround(-$11);
$18 = Math_fround(-$13);
$25 = Math_fround(Math_fround($2 * $15) + Math_fround(Math_fround($8 * $16) + Math_fround(Math_fround($6 * $17) - Math_fround($4 * $18))));
$32 = Math_fround(Math_fround($4 * $15) + Math_fround(Math_fround($8 * $17) + Math_fround(Math_fround($2 * $18) - Math_fround($6 * $16))));
$39 = Math_fround(Math_fround($6 * $15) + Math_fround(Math_fround($8 * $18) + Math_fround(Math_fround($4 * $16) - Math_fround($2 * $17))));
$47 = Math_fround(Math_fround($8 * $15) + Math_fround(Math_fround(Math_fround(-Math_fround($2 * $16)) - Math_fround($4 * $17)) - Math_fround($6 * $18)));
$54 = Math_fround(Math_fround($47 * $9) + Math_fround(Math_fround($25 * $15) + Math_fround(Math_fround($32 * $13) - Math_fround($39 * $11))));
$61 = Math_fround(Math_fround($47 * $11) + Math_fround(Math_fround($32 * $15) + Math_fround(Math_fround($39 * $9) - Math_fround($25 * $13))));
$68 = Math_fround(Math_fround($47 * $13) + Math_fround(Math_fround($39 * $15) + Math_fround(Math_fround($25 * $11) - Math_fround($32 * $9))));
$76 = Math_fround(Math_fround($47 * $15) + Math_fround(Math_fround(Math_fround(-Math_fround($25 * $9)) - Math_fround($32 * $11)) - Math_fround($39 * $13)));
HEAPF32[$1 >> 2] = $54;
HEAPF32[$3 >> 2] = $61;
HEAPF32[$5 >> 2] = $68;
HEAPF32[$7 >> 2] = $76;
return;
}
function __ZN13BasicMovement23setBaseMotionAttributesERK16MotionAttributes($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$byval_copy = 0, $11 = 0, $2 = 0, $30 = f0, $31 = 0, $39 = 0.0, $46 = 0, $47 = 0, $48 = 0, $vararg_buffer = 0, dest = 0, sp = 0, src = 0, stop = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$$byval_copy = sp + 16 | 0;
$vararg_buffer = sp;
$2 = $0 + 12 | 0;
dest = $$byval_copy;
src = $1 + 8 | 0;
stop = dest + 12 | 0;
do {
HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
dest = dest + 1 | 0;
src = src + 1 | 0;
} while ((dest | 0) < (stop | 0));
__ZN11MannerFlags14addMannerFlagsES_($2, $$byval_copy);
if (!(HEAP32[$2 >> 2] | 0)) HEAP32[$2 >> 2] = HEAP32[(HEAP32[17188] | 0) + (HEAP32[$0 + 4 >> 2] << 2) >> 2];
$11 = $0 + 16 | 0;
if (!(HEAP32[$11 >> 2] | 0)) HEAP32[$11 >> 2] = 2;
HEAP8[$0 + 28 >> 0] = HEAP8[$1 + 20 >> 0] | 0;
HEAP8[$0 + 29 >> 0] = HEAP8[$1 + 21 >> 0] | 0;
HEAP8[$0 + 30 >> 0] = HEAP8[$1 + 22 >> 0] | 0;
HEAP8[$0 + 31 >> 0] = HEAP8[$1 + 23 >> 0] | 0;
HEAP8[$0 + 32 >> 0] = HEAP8[$1 + 24 >> 0] | 0;
$30 = Math_fround(HEAPF32[$1 + 208 >> 2]);
$31 = $0 + 52 | 0;
HEAPF32[$31 >> 2] = $30;
if (!0) {
$46 = $1 + 212 | 0;
$47 = HEAP32[$46 >> 2] | 0;
$48 = $0 + 56 | 0;
HEAP32[$48 >> 2] = $47;
STACKTOP = sp;
return;
}
if ((HEAP32[$0 + 4 >> 2] | 0) != 6) {
$46 = $1 + 212 | 0;
$47 = HEAP32[$46 >> 2] | 0;
$48 = $0 + 56 | 0;
HEAP32[$48 >> 2] = $47;
STACKTOP = sp;
return;
}
$39 = +Math_fround(HEAPF32[$0 + 40 >> 2]);
HEAPF64[$vararg_buffer >> 3] = +$30;
HEAPF64[$vararg_buffer + 8 >> 3] = $39;
__Z7eprintfPKcz(46588, $vararg_buffer);
if (!(Math_fround(HEAPF32[$31 >> 2]) > Math_fround(0.0))) {
$46 = $1 + 212 | 0;
$47 = HEAP32[$46 >> 2] | 0;
$48 = $0 + 56 | 0;
HEAP32[$48 >> 2] = $47;
STACKTOP = sp;
return;
}
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 72 >> 2] & 255]($0, HEAP32[16082] | 0);
$46 = $1 + 212 | 0;
$47 = HEAP32[$46 >> 2] | 0;
$48 = $0 + 56 | 0;
HEAP32[$48 >> 2] = $47;
STACKTOP = sp;
return;
}
function __Z20copyStringWithSuffixPKcS0_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0, $$0$i45 = 0, $$013$i = 0, $$1$i = 0, $13 = 0, $20 = 0, $24 = 0, $27 = 0, $28 = 0, $30 = 0, $33 = 0, $37 = 0, $38 = 0, $5 = 0, $6 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
if (!$0) {
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
if (!$1) {
$5 = (_strlen($0) | 0) + 1 | 0;
$6 = _malloc($5) | 0;
if (!$6) {
HEAP32[$vararg_buffer >> 2] = $5;
__Z7eprintfPKcz(9153, $vararg_buffer);
$8 = ___cxa_allocate_exception(4) | 0;
HEAP32[$8 >> 2] = 1;
___cxa_throw($8 | 0, 32, 0);
}
_strncpy($6, $0, $5) | 0;
$$0 = $6;
STACKTOP = sp;
return $$0 | 0;
} else {
$$0$i45 = 0;
$$013$i = $0;
}
L10 : while (1) {
switch (HEAP8[$$013$i >> 0] | 0) {
case 0:
{
break L10;
break;
}
case 46:
{
$$1$i = $$013$i + 1 | 0;
break;
}
case 58:
case 92:
case 47:
{
$$1$i = 0;
break;
}
default:
$$1$i = $$0$i45;
}
$$0$i45 = $$1$i;
$$013$i = $$013$i + 1 | 0;
}
$13 = ($$0$i45 | 0) == 0 ? $$013$i : $$0$i45;
if (!(HEAP8[$13 >> 0] | 0)) {
$33 = $13 - $0 | 0;
$37 = _malloc($33 + 2 + (_strlen($1) | 0) | 0) | 0;
_strncpy($37, $0, $33) | 0;
$38 = $37 + $33 | 0;
HEAP8[$38 >> 0] = 46;
_strcpy($38 + 1 | 0, $1) | 0;
$$0 = $37;
STACKTOP = sp;
return $$0 | 0;
}
if (!(_strcmp($13, $1) | 0)) {
$20 = $13 - $0 | 0;
$24 = _malloc($20 + 1 + (_strlen($1) | 0) | 0) | 0;
_strncpy($24, $0, $20) | 0;
_strcpy($24 + $20 | 0, $1) | 0;
$$0 = $24;
STACKTOP = sp;
return $$0 | 0;
}
$27 = (_strlen($0) | 0) + 1 | 0;
$28 = _malloc($27) | 0;
if (!$28) {
HEAP32[$vararg_buffer1 >> 2] = $27;
__Z7eprintfPKcz(9153, $vararg_buffer1);
$30 = ___cxa_allocate_exception(4) | 0;
HEAP32[$30 >> 2] = 1;
___cxa_throw($30 | 0, 32, 0);
}
_strncpy($28, $0, $27) | 0;
$$0 = $28;
STACKTOP = sp;
return $$0 | 0;
}
function __ZN7HashAnyI13SiGML_ElementPFvPvP7XMLCellEE14addManyToHashXES0_z($0, $1, $varargs) {
$0 = $0 | 0;
$1 = $1 | 0;
$varargs = $varargs | 0;
var $$09 = 0, $$sink$i$i = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
HEAP32[$2 >> 2] = $varargs;
if (!$1) {
STACKTOP = sp;
return;
}
$4 = $0 + 4 | 0;
$5 = $0 + 8 | 0;
$6 = $0 + 24 | 0;
$7 = $0 + 12 | 0;
$8 = $0 + 16 | 0;
$$09 = $1;
while (1) {
$14 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$15 = HEAP32[$14 >> 2] | 0;
HEAP32[$2 >> 2] = $14 + 4;
if (!$15) {
label = 9;
break;
}
$18 = ($$09 >>> 0) % ((HEAP32[$4 >> 2] | 0) >>> 0) | 0;
$19 = HEAP32[$0 >> 2] | 0;
$20 = $19 + ($18 << 3) | 0;
$21 = $19 + ($18 << 3) + 4 | 0;
switch (HEAP16[$21 >> 1] | 0) {
case 0:
{
$23 = __Znwj(12) | 0;
HEAP32[$23 >> 2] = $$09;
HEAP32[$23 + 4 >> 2] = $15;
HEAP32[$23 + 8 >> 2] = 0;
HEAP32[$20 >> 2] = $23;
HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
$$sink$i$i = $8;
break;
}
case 1:
{
HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1;
label = 7;
break;
}
default:
label = 7;
}
if ((label | 0) == 7) {
label = 0;
$30 = HEAP32[$20 >> 2] | 0;
$32 = __Znwj(12) | 0;
$33 = $30 + 8 | 0;
$34 = HEAP32[$33 >> 2] | 0;
HEAP32[$32 >> 2] = $$09;
HEAP32[$32 + 4 >> 2] = $15;
HEAP32[$32 + 8 >> 2] = $34;
HEAP32[$33 >> 2] = $32;
$$sink$i$i = $5;
}
HEAP32[$$sink$i$i >> 2] = (HEAP32[$$sink$i$i >> 2] | 0) + 1;
HEAP16[$21 >> 1] = (HEAP16[$21 >> 1] | 0) + 1 << 16 >> 16;
HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
$47 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$$09 = HEAP32[$47 >> 2] | 0;
HEAP32[$2 >> 2] = $47 + 4;
if (!$$09) {
label = 9;
break;
}
}
if ((label | 0) == 9) {
STACKTOP = sp;
return;
}
}
function __Z20CreateMovementTablesv() {
var $0 = 0, $1 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 128 | 0;
$vararg_buffer = sp;
$0 = sp + 104 | 0;
__ZN6VectorC2Ev($0);
HEAP32[16640] = HEAP32[$0 >> 2];
HEAP32[16641] = HEAP32[$0 + 4 >> 2];
HEAP32[16642] = HEAP32[$0 + 8 >> 2];
HEAP32[16643] = HEAP32[16138];
HEAP32[16644] = HEAP32[16139];
HEAP32[16645] = HEAP32[16140];
HEAP32[16646] = HEAP32[16132];
HEAP32[16647] = HEAP32[16133];
HEAP32[16648] = HEAP32[16134];
HEAP32[16649] = HEAP32[16135];
HEAP32[16650] = HEAP32[16136];
HEAP32[16651] = HEAP32[16137];
HEAP32[16652] = HEAP32[16132];
HEAP32[16653] = HEAP32[16133];
HEAP32[16654] = HEAP32[16134];
HEAP32[16655] = HEAP32[16132];
HEAP32[16656] = HEAP32[16133];
HEAP32[16657] = HEAP32[16134];
HEAP32[$vararg_buffer >> 2] = 0;
HEAP32[$vararg_buffer + 4 >> 2] = 45489;
HEAP32[$vararg_buffer + 8 >> 2] = 1;
HEAP32[$vararg_buffer + 12 >> 2] = 45506;
HEAP32[$vararg_buffer + 16 >> 2] = 2;
HEAP32[$vararg_buffer + 20 >> 2] = 45523;
HEAP32[$vararg_buffer + 24 >> 2] = 3;
HEAP32[$vararg_buffer + 28 >> 2] = 45537;
HEAP32[$vararg_buffer + 32 >> 2] = 4;
HEAP32[$vararg_buffer + 36 >> 2] = 45556;
HEAP32[$vararg_buffer + 40 >> 2] = 5;
HEAP32[$vararg_buffer + 44 >> 2] = 45568;
HEAP32[$vararg_buffer + 48 >> 2] = 6;
HEAP32[$vararg_buffer + 52 >> 2] = 45580;
HEAP32[$vararg_buffer + 56 >> 2] = 7;
HEAP32[$vararg_buffer + 60 >> 2] = 45594;
HEAP32[$vararg_buffer + 64 >> 2] = 8;
HEAP32[$vararg_buffer + 68 >> 2] = 45609;
HEAP32[$vararg_buffer + 72 >> 2] = 9;
HEAP32[$vararg_buffer + 76 >> 2] = 45627;
HEAP32[$vararg_buffer + 80 >> 2] = 10;
HEAP32[$vararg_buffer + 84 >> 2] = 45638;
HEAP32[$vararg_buffer + 88 >> 2] = 11;
HEAP32[$vararg_buffer + 92 >> 2] = 45656;
HEAP32[$vararg_buffer + 96 >> 2] = 12;
HEAP32[$vararg_buffer + 100 >> 2] = 0;
$1 = __ZN21InvertibleStringArray19NewInvertibleArrayHEPKcz(45475, $vararg_buffer) | 0;
HEAP32[16658] = $1;
STACKTOP = sp;
return;
}
function __ZNK11SeqMovement18printTopLevelSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$018 = 0, $10 = 0, $2 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $6 = 0, $sext = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
$3 = $0 + 528 | 0;
$sext = HEAP32[$0 + 540 >> 2] << 16;
$6 = $sext >> 16;
if (($6 | 0) == 2) {
$10 = HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 80 >> 2] & 255]($10, $1);
STACKTOP = sp;
return;
}
if (($sext | 0) <= 131072) {
STACKTOP = sp;
return;
}
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
HEAP8[$2 >> 0] = 60;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2, 1) | 0, 51462, 10) | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$0 >> 2] | 0) + 84 >> 2] & 127]($0, $1, 1);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36571, 2) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
$$018 = 1;
$29 = 1;
do {
$30 = HEAP32[(HEAP32[$3 >> 2] | 0) + ($29 << 2) >> 2] | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$30 >> 2] | 0) + 80 >> 2] & 255]($30, $1);
$$018 = $$018 + 1 << 16 >> 16;
$29 = $$018 << 16 >> 16;
} while (($6 | 0) > ($29 | 0));
$23 = (HEAP16[36078] | 0) + -1 << 16 >> 16;
HEAP16[36078] = $23;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, $23 << 16 >> 16);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36574, 2) | 0, 51462, 10) | 0, 36571, 2) | 0;
STACKTOP = sp;
return;
}
function __ZN16DirectedMovement18propagateHandStuffER12TwoHandStuffR20ArmHandConstellation($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $15 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $30 = 0, $31 = 0, $32 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $45 = 0, $46 = 0, $50 = 0, $51 = 0, $8 = 0;
$4 = HEAP32[$0 + 8 >> 2] | 0;
$8 = $0 + 508 | 0;
HEAP16[$8 >> 1] = HEAP16[$8 >> 1] & -2 | (($4 | 0) == 3 | ($4 | 0) == 5) & 1;
$15 = $0 + 510 | 0;
HEAP16[$15 >> 1] = HEAP16[$15 >> 1] & -2 | ($4 | 1 | 0) == 5;
$20 = $1 + 20 | 0;
$21 = $0 + 100 | 0;
HEAP32[$21 >> 2] = HEAP32[$20 >> 2];
HEAP32[$21 + 4 >> 2] = HEAP32[$20 + 4 >> 2];
HEAP32[$21 + 8 >> 2] = HEAP32[$20 + 8 >> 2];
HEAP32[$21 + 12 >> 2] = HEAP32[$20 + 12 >> 2];
$22 = $1 + 64 | 0;
$23 = $0 + 212 | 0;
HEAP32[$23 >> 2] = HEAP32[$22 >> 2];
HEAP32[$23 + 4 >> 2] = HEAP32[$22 + 4 >> 2];
HEAP32[$23 + 8 >> 2] = HEAP32[$22 + 8 >> 2];
HEAP32[$23 + 12 >> 2] = HEAP32[$22 + 12 >> 2];
$24 = $1 + 36 | 0;
$25 = HEAP32[$24 >> 2] | 0;
if (!$25) $30 = 0; else $30 = HEAP32[$25 + 236 >> 2] | 0;
HEAP32[$0 + 116 >> 2] = $30;
$31 = $1 + 80 | 0;
$32 = HEAP32[$31 >> 2] | 0;
if (!$32) $37 = 0; else $37 = HEAP32[$32 + 236 >> 2] | 0;
HEAP32[$0 + 228 >> 2] = $37;
$38 = $0 + 324 | 0;
HEAP32[$38 >> 2] = HEAP32[$20 >> 2];
HEAP32[$38 + 4 >> 2] = HEAP32[$20 + 4 >> 2];
HEAP32[$38 + 8 >> 2] = HEAP32[$20 + 8 >> 2];
HEAP32[$38 + 12 >> 2] = HEAP32[$20 + 12 >> 2];
$39 = $0 + 436 | 0;
HEAP32[$39 >> 2] = HEAP32[$22 >> 2];
HEAP32[$39 + 4 >> 2] = HEAP32[$22 + 4 >> 2];
HEAP32[$39 + 8 >> 2] = HEAP32[$22 + 8 >> 2];
HEAP32[$39 + 12 >> 2] = HEAP32[$22 + 12 >> 2];
$40 = HEAP32[$24 >> 2] | 0;
if (!$40) $45 = 0; else $45 = HEAP32[$40 + 236 >> 2] | 0;
HEAP32[$0 + 340 >> 2] = $45;
$46 = HEAP32[$31 >> 2] | 0;
if (!$46) {
$51 = 0;
$50 = $0 + 452 | 0;
HEAP32[$50 >> 2] = $51;
return;
}
$51 = HEAP32[$46 + 236 >> 2] | 0;
$50 = $0 + 452 | 0;
HEAP32[$50 >> 2] = $51;
return;
}
function __ZL9Expat_endPvPKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0, $$0$i = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $15 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $3 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $46 = 0, $5 = 0, $7 = 0, $storemerge$i = 0, label = 0;
$2 = $0 + 28 | 0;
$3 = HEAP32[$2 >> 2] | 0;
$4 = $3 + 12 | 0;
$5 = HEAP32[$4 >> 2] | 0;
$7 = $5 + -1 | 0;
if (($5 | 0) < 1) {
$$0$i = 0;
$24 = 0;
$storemerge$i = 0;
} else {
$10 = HEAP32[(HEAP32[$3 >> 2] | 0) + ($7 << 2) >> 2] | 0;
$$0$i = $10;
$24 = $10;
$storemerge$i = $7;
}
HEAP32[$4 >> 2] = $storemerge$i;
$11 = $0 + 8 | 0;
do if ((HEAP32[$11 >> 2] | 0) == ($$0$i | 0)) {
$15 = HEAP32[$0 + 12 >> 2] | 0;
if (!$15) $$0 = $$0$i; else {
FUNCTION_TABLE_vii[$15 & 255](HEAP32[$0 + 16 >> 2] | 0, $$0$i);
HEAP32[$11 >> 2] = 0;
if (!$$0$i) $$0 = 0; else {
__THREW__ = 0;
invoke_vi(151, $$0$i | 0);
$20 = __THREW__;
__THREW__ = 0;
if ($20 & 1) {
$22 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($24);
___resumeException($22 | 0);
} else {
__ZdlPv($$0$i);
$$0 = 0;
break;
}
}
}
} else $$0 = $$0$i; while (0);
$25 = HEAP32[$2 >> 2] | 0;
$27 = HEAP32[$25 + 12 >> 2] | 0;
if (!$27) {
HEAP32[$0 + 20 >> 2] = $$0;
return;
}
if (!$$0) return;
$36 = HEAP32[(HEAP32[(HEAP32[$25 >> 2] | 0) + ($27 + -1 << 2) >> 2] | 0) + 8 >> 2] | 0;
$37 = $36 + 12 | 0;
$38 = HEAP32[$37 >> 2] | 0;
if (($38 | 0) < 0) return;
if ((HEAP32[$36 + 8 >> 2] | 0) > ($38 | 0)) {
$$pre$phiZ2D = $38 + 1 | 0;
label = 16;
} else {
$44 = HEAP32[$36 + 4 >> 2] | 0;
$46 = $38 + 1 | 0;
__ZN13DynamicArrayPI7XMLCellE6resizeEi($36, ($44 | 0) > ($38 | 0) ? $44 : $46 + ($38 >>> 1) | 0);
if ((HEAP32[$37 >> 2] | 0) <= ($38 | 0)) {
$$pre$phiZ2D = $46;
label = 16;
}
}
if ((label | 0) == 16) HEAP32[$37 >> 2] = $$pre$phiZ2D;
HEAP32[(HEAP32[$36 >> 2] | 0) + ($38 << 2) >> 2] = $$0;
return;
}
function __ZN13BasicMovement18propagateHandStuffER12TwoHandStuffR20ArmHandConstellation($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $15 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $30 = 0, $31 = 0, $32 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $45 = 0, $46 = 0, $50 = 0, $51 = 0, $8 = 0;
$4 = HEAP32[$0 + 8 >> 2] | 0;
$8 = $0 + 508 | 0;
HEAP16[$8 >> 1] = HEAP16[$8 >> 1] & -2 | (($4 | 0) == 3 | ($4 | 0) == 5) & 1;
$15 = $0 + 510 | 0;
HEAP16[$15 >> 1] = HEAP16[$15 >> 1] & -2 | ($4 | 1 | 0) == 5;
$20 = $1 + 20 | 0;
$21 = $0 + 100 | 0;
HEAP32[$21 >> 2] = HEAP32[$20 >> 2];
HEAP32[$21 + 4 >> 2] = HEAP32[$20 + 4 >> 2];
HEAP32[$21 + 8 >> 2] = HEAP32[$20 + 8 >> 2];
HEAP32[$21 + 12 >> 2] = HEAP32[$20 + 12 >> 2];
$22 = $1 + 64 | 0;
$23 = $0 + 212 | 0;
HEAP32[$23 >> 2] = HEAP32[$22 >> 2];
HEAP32[$23 + 4 >> 2] = HEAP32[$22 + 4 >> 2];
HEAP32[$23 + 8 >> 2] = HEAP32[$22 + 8 >> 2];
HEAP32[$23 + 12 >> 2] = HEAP32[$22 + 12 >> 2];
$24 = $1 + 36 | 0;
$25 = HEAP32[$24 >> 2] | 0;
if (!$25) $30 = 0; else $30 = HEAP32[$25 + 236 >> 2] | 0;
HEAP32[$0 + 116 >> 2] = $30;
$31 = $1 + 80 | 0;
$32 = HEAP32[$31 >> 2] | 0;
if (!$32) $37 = 0; else $37 = HEAP32[$32 + 236 >> 2] | 0;
HEAP32[$0 + 228 >> 2] = $37;
$38 = $0 + 324 | 0;
HEAP32[$38 >> 2] = HEAP32[$20 >> 2];
HEAP32[$38 + 4 >> 2] = HEAP32[$20 + 4 >> 2];
HEAP32[$38 + 8 >> 2] = HEAP32[$20 + 8 >> 2];
HEAP32[$38 + 12 >> 2] = HEAP32[$20 + 12 >> 2];
$39 = $0 + 436 | 0;
HEAP32[$39 >> 2] = HEAP32[$22 >> 2];
HEAP32[$39 + 4 >> 2] = HEAP32[$22 + 4 >> 2];
HEAP32[$39 + 8 >> 2] = HEAP32[$22 + 8 >> 2];
HEAP32[$39 + 12 >> 2] = HEAP32[$22 + 12 >> 2];
$40 = HEAP32[$24 >> 2] | 0;
if (!$40) $45 = 0; else $45 = HEAP32[$40 + 236 >> 2] | 0;
HEAP32[$0 + 340 >> 2] = $45;
$46 = HEAP32[$31 >> 2] | 0;
if (!$46) {
$51 = 0;
$50 = $0 + 452 | 0;
HEAP32[$50 >> 2] = $51;
return;
}
$51 = HEAP32[$46 + 236 >> 2] | 0;
$50 = $0 + 452 | 0;
HEAP32[$50 >> 2] = $51;
return;
}
function __ZN5Joint24setGlobalGlobalDirectionERK6VectorS2_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $12 = 0.0, $15 = 0.0, $18 = 0, $22 = 0.0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 80 | 0;
$vararg_buffer9 = sp + 32 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$3 = sp + 56 | 0;
$4 = sp + 40 | 0;
HEAPF32[$3 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 4 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 12 >> 2] = Math_fround(1.0);
__ZN10Quaternion16setQuatFrom2VecsERK6VectorS2_($3, $1, $2);
if (0) {
HEAP32[$vararg_buffer >> 2] = HEAP32[$0 >> 2];
__Z7eprintfPKcz(13106, $vararg_buffer);
__ZN10Quaternion5printEP8_IO_FILEi($3, HEAP32[16082] | 0, 6);
$12 = +Math_fround(__ZNK10Quaternion8getAngleEv($3));
HEAPF64[$vararg_buffer1 >> 3] = $12;
__Z7eprintfPKcz(13094, $vararg_buffer1);
__Z5eputsPKc(13148);
__ZNK6Vector5printEP8_IO_FILEi($1, HEAP32[16082] | 0, 6);
$15 = +Math_fround(__ZNK6Vector6lengthEv($1));
HEAPF64[$vararg_buffer4 >> 3] = $15;
__Z7eprintfPKcz(13170, $vararg_buffer4);
__Z5eputsPKc(13183);
__ZNK6Vector5printEP8_IO_FILEi($2, HEAP32[16082] | 0, 6);
__Z5eputcc(10);
}
__ZN5Joint17addGlobalRotationERK10Quaternion($0, $3);
if (!0) {
STACKTOP = sp;
return;
}
__ZN6VectorC2ERKS_($4, 64528);
$18 = $0 + 68 | 0;
__ZNK9Transform18transformDirectionER6Vector($18, $4);
__Z7eprintfPKcz(13191, sp + 24 | 0);
__ZNK9Transform5printEP8_IO_FILEi($18, HEAP32[16082] | 0, 6);
__Z5eputsPKc(13237);
__ZNK6Vector5printEP8_IO_FILEi($4, HEAP32[16082] | 0, 6);
$22 = +Math_fround(__ZNK6Vector6lengthEv($4));
HEAPF64[$vararg_buffer9 >> 3] = $22;
__Z7eprintfPKcz(13170, $vararg_buffer9);
__Z5eputsPKc(13183);
__ZNK6Vector5printEP8_IO_FILEi($2, HEAP32[16082] | 0, 6);
__Z5eputcc(10);
__Z5eputcc(10);
STACKTOP = sp;
return;
}
function _utf8_toUtf16($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$041$be = 0, $$041$lcssa = 0, $$04147 = 0, $$042$be = 0, $$042$lcssa = 0, $$04246 = 0, $10 = 0, $11 = 0, $40 = 0, $5 = 0, $6 = 0, $62 = 0, $9 = 0, label = 0;
$5 = HEAP32[$3 >> 2] | 0;
$6 = HEAP32[$1 >> 2] | 0;
if (($6 | 0) == ($2 | 0) | ($5 | 0) == ($4 | 0)) {
$$041$lcssa = $5;
$$042$lcssa = $6;
HEAP32[$1 >> 2] = $$042$lcssa;
HEAP32[$3 >> 2] = $$041$lcssa;
return;
}
$9 = $0 + 72 | 0;
$$04147 = $5;
$$04246 = $6;
L4 : while (1) {
$10 = HEAP8[$$04246 >> 0] | 0;
$11 = $10 & 255;
switch (HEAP8[$9 + $11 >> 0] | 0) {
case 5:
{
HEAP16[$$04147 >> 1] = ($10 & 31) << 6 | HEAP8[$$04246 + 1 >> 0] & 63;
$$041$be = $$04147 + 2 | 0;
$$042$be = $$04246 + 2 | 0;
break;
}
case 6:
{
HEAP16[$$04147 >> 1] = (HEAP8[$$04246 + 1 >> 0] & 63) << 6 | $11 << 12 | HEAP8[$$04246 + 2 >> 0] & 63;
$$041$be = $$04147 + 2 | 0;
$$042$be = $$04246 + 3 | 0;
break;
}
case 7:
{
$40 = $$04147 + 2 | 0;
if (($40 | 0) == ($4 | 0)) {
$$041$lcssa = $$04147;
$$042$lcssa = $$04246;
label = 10;
break L4;
}
$62 = ((HEAP8[$$04246 + 1 >> 0] & 63) << 12 | ($10 & 7) << 18 | (HEAP8[$$04246 + 2 >> 0] & 63) << 6 | HEAP8[$$04246 + 3 >> 0] & 63) + -65536 | 0;
HEAP16[$$04147 >> 1] = $62 >>> 10 | 55296;
HEAP16[$40 >> 1] = $62 & 1023 | 56320;
$$041$be = $$04147 + 4 | 0;
$$042$be = $$04246 + 4 | 0;
break;
}
default:
{
HEAP16[$$04147 >> 1] = $10 << 24 >> 24;
$$041$be = $$04147 + 2 | 0;
$$042$be = $$04246 + 1 | 0;
}
}
if (($$042$be | 0) == ($2 | 0) | ($$041$be | 0) == ($4 | 0)) {
$$041$lcssa = $$041$be;
$$042$lcssa = $$042$be;
label = 10;
break;
} else {
$$04147 = $$041$be;
$$04246 = $$042$be;
}
}
if ((label | 0) == 10) {
HEAP32[$1 >> 2] = $$042$lcssa;
HEAP32[$3 >> 2] = $$041$lcssa;
return;
}
}
function __ZN14TwoArmAnimatorC2ER19TwoHConcretePosturePK11HanimAvatar($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0 = 0, $$07 = 0, $10 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $31 = 0, $5 = 0, $6 = 0, $8 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0;
HEAP32[$0 >> 2] = 0;
HEAPF32[$0 + 4 >> 2] = Math_fround(0.0);
HEAP32[$0 + 12 >> 2] = $2;
$5 = $0 + 16 | 0;
__ZN14OneArmAnimatorC2EP19OneHConcretePosturePK11HanimAvatar($5, $1, $2);
$6 = $0 + 3572 | 0;
__THREW__ = 0;
invoke_viii(78, $6 | 0, $1 + 112 | 0, $2 | 0);
$8 = __THREW__;
__THREW__ = 0;
if ($8 & 1) {
$22 = ___cxa_find_matching_catch_2() | 0;
$$0 = tempRet0;
$$07 = $22;
} else {
$10 = $0 + 7128 | 0;
__THREW__ = 0;
invoke_vii(123, $10 | 0, 1);
$11 = __THREW__;
__THREW__ = 0;
if ($11 & 1) {
$24 = ___cxa_find_matching_catch_2() | 0;
$eh$lpad$body$index2Z2D = tempRet0;
$eh$lpad$body$indexZ2D = $24;
} else {
__THREW__ = 0;
invoke_vii(123, $0 + 7240 | 0, 0);
$14 = __THREW__;
__THREW__ = 0;
if (!($14 & 1)) return;
$16 = ___cxa_find_matching_catch_2() | 0;
$17 = tempRet0;
__THREW__ = 0;
invoke_vi(101, $10 | 0);
$18 = __THREW__;
__THREW__ = 0;
if ($18 & 1) {
$20 = ___cxa_find_matching_catch_3(0) | 0;
___clang_call_terminate($20);
} else {
$eh$lpad$body$index2Z2D = $17;
$eh$lpad$body$indexZ2D = $16;
}
}
__THREW__ = 0;
invoke_vi(103, $6 | 0);
$26 = __THREW__;
__THREW__ = 0;
if ($26 & 1) {
$30 = ___cxa_find_matching_catch_3(0) | 0;
$31 = tempRet0;
___clang_call_terminate($30);
} else {
$$0 = $eh$lpad$body$index2Z2D;
$$07 = $eh$lpad$body$indexZ2D;
}
}
__THREW__ = 0;
invoke_vi(103, $5 | 0);
$28 = __THREW__;
__THREW__ = 0;
if ($28 & 1) {
$30 = ___cxa_find_matching_catch_3(0) | 0;
$31 = tempRet0;
___clang_call_terminate($30);
} else ___resumeException($$07 | 0);
}
function ___stpcpy($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $11 = 0, $12 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $31 = 0, $34 = 0, $35 = 0, $9 = 0, label = 0;
$2 = $1;
L1 : do if (!(($2 ^ $0) & 3)) {
if (!($2 & 3)) {
$$026$lcssa = $1;
$$027$lcssa = $0;
} else {
$$02642 = $1;
$$02741 = $0;
while (1) {
$9 = HEAP8[$$02642 >> 0] | 0;
HEAP8[$$02741 >> 0] = $9;
if (!($9 << 24 >> 24)) {
$$029 = $$02741;
break L1;
}
$11 = $$02642 + 1 | 0;
$12 = $$02741 + 1 | 0;
if (!($11 & 3)) {
$$026$lcssa = $11;
$$027$lcssa = $12;
break;
} else {
$$02642 = $11;
$$02741 = $12;
}
}
}
$16 = HEAP32[$$026$lcssa >> 2] | 0;
if (!(($16 & -2139062144 ^ -2139062144) & $16 + -16843009)) {
$$02536 = $$027$lcssa;
$$037 = $$026$lcssa;
$24 = $16;
while (1) {
$22 = $$037 + 4 | 0;
$23 = $$02536 + 4 | 0;
HEAP32[$$02536 >> 2] = $24;
$24 = HEAP32[$22 >> 2] | 0;
if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
$$0$lcssa = $22;
$$025$lcssa = $23;
break;
} else {
$$02536 = $23;
$$037 = $22;
}
}
} else {
$$0$lcssa = $$026$lcssa;
$$025$lcssa = $$027$lcssa;
}
$$1$ph = $$0$lcssa;
$$128$ph = $$025$lcssa;
label = 8;
} else {
$$1$ph = $1;
$$128$ph = $0;
label = 8;
} while (0);
if ((label | 0) == 8) {
$31 = HEAP8[$$1$ph >> 0] | 0;
HEAP8[$$128$ph >> 0] = $31;
if (!($31 << 24 >> 24)) $$029 = $$128$ph; else {
$$12834 = $$128$ph;
$$135 = $$1$ph;
while (1) {
$$135 = $$135 + 1 | 0;
$34 = $$12834 + 1 | 0;
$35 = HEAP8[$$135 >> 0] | 0;
HEAP8[$34 >> 0] = $35;
if (!($35 << 24 >> 24)) {
$$029 = $34;
break;
} else $$12834 = $34;
}
}
}
return $$029 | 0;
}
function _normal_entityValueTok($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$05058 = 0, $$sink = 0, $15 = 0, $21 = 0, $29 = 0, $5 = 0, label = 0;
if (($1 | 0) == ($2 | 0)) {
$$0 = -4;
return $$0 | 0;
}
$5 = $0 + 72 | 0;
$$05058 = $1;
L4 : while (1) {
switch (HEAP8[$5 + (HEAPU8[$$05058 >> 0] | 0) >> 0] | 0) {
case 3:
{
label = 6;
break L4;
break;
}
case 30:
{
label = 9;
break L4;
break;
}
case 10:
{
label = 12;
break L4;
break;
}
case 9:
{
label = 15;
break L4;
break;
}
case 5:
{
$$sink = 2;
break;
}
case 6:
{
$$sink = 3;
break;
}
case 7:
{
$$sink = 4;
break;
}
default:
$$sink = 1;
}
$29 = $$05058 + $$sink | 0;
if (($29 | 0) == ($2 | 0)) {
label = 21;
break;
} else $$05058 = $29;
}
if ((label | 0) == 6) if (($$05058 | 0) == ($1 | 0)) {
$$0 = _normal_scanRef($0, $1 + 1 | 0, $2, $3) | 0;
return $$0 | 0;
} else {
HEAP32[$3 >> 2] = $$05058;
$$0 = 6;
return $$0 | 0;
} else if ((label | 0) == 9) if (($$05058 | 0) == ($1 | 0)) {
$15 = _normal_scanPercent($0, $1 + 1 | 0, $2, $3) | 0;
$$0 = ($15 | 0) == 22 ? 0 : $15;
return $$0 | 0;
} else {
HEAP32[$3 >> 2] = $$05058;
$$0 = 6;
return $$0 | 0;
} else if ((label | 0) == 12) if (($$05058 | 0) == ($1 | 0)) {
HEAP32[$3 >> 2] = $1 + 1;
$$0 = 7;
return $$0 | 0;
} else {
HEAP32[$3 >> 2] = $$05058;
$$0 = 6;
return $$0 | 0;
} else if ((label | 0) == 15) {
if (($$05058 | 0) != ($1 | 0)) {
HEAP32[$3 >> 2] = $$05058;
$$0 = 6;
return $$0 | 0;
}
$21 = $1 + 1 | 0;
if (($21 | 0) == ($2 | 0)) {
$$0 = -3;
return $$0 | 0;
}
HEAP32[$3 >> 2] = (HEAP8[$5 + (HEAPU8[$21 >> 0] | 0) >> 0] | 0) == 10 ? $1 + 2 | 0 : $21;
$$0 = 7;
return $$0 | 0;
} else if ((label | 0) == 21) {
HEAP32[$3 >> 2] = $2;
$$0 = 6;
return $$0 | 0;
}
return 0;
}
function __ZNSt3__212system_errorC2ENS_10error_codeEPKc($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0 = 0, $$0$i$i = 0, $$03 = 0, $12 = 0, $13 = 0, $18 = 0, $20 = 0, $23 = 0, $28 = 0, $29 = 0, $3 = 0, $33 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$3 = sp + 24 | 0;
$4 = sp + 12 | 0;
$5 = sp;
HEAP32[$5 >> 2] = 0;
HEAP32[$5 + 4 >> 2] = 0;
HEAP32[$5 + 8 >> 2] = 0;
$6 = __ZNSt3__211char_traitsIcE6lengthEPKc($2) | 0;
if ($6 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($5);
if ($6 >>> 0 < 11) {
HEAP8[$5 + 11 >> 0] = $6;
$$0$i$i = $5;
} else {
$12 = $6 + 16 & -16;
$13 = __Znwj($12) | 0;
HEAP32[$5 >> 2] = $13;
HEAP32[$5 + 8 >> 2] = $12 | -2147483648;
HEAP32[$5 + 4 >> 2] = $6;
$$0$i$i = $13;
}
__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i, $2, $6) | 0;
HEAP8[$3 >> 0] = 0;
__ZNSt3__211char_traitsIcE6assignERcRKc($$0$i$i + $6 | 0, $3);
__THREW__ = 0;
invoke_viii(103, $4 | 0, $1 | 0, $5 | 0);
$18 = __THREW__;
__THREW__ = 0;
do if ($18 & 1) {
$33 = ___cxa_find_matching_catch_2() | 0;
$$0 = tempRet0;
$$03 = $33;
} else {
__THREW__ = 0;
invoke_vii(190, $0 | 0, $4 | 0);
$20 = __THREW__;
__THREW__ = 0;
if ($20 & 1) {
$35 = ___cxa_find_matching_catch_2() | 0;
$36 = tempRet0;
__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
$$0 = $36;
$$03 = $35;
break;
} else {
__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
HEAP32[$0 >> 2] = 8060;
$23 = $1;
$28 = HEAP32[$23 + 4 >> 2] | 0;
$29 = $0 + 8 | 0;
HEAP32[$29 >> 2] = HEAP32[$23 >> 2];
HEAP32[$29 + 4 >> 2] = $28;
STACKTOP = sp;
return;
}
} while (0);
__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
___resumeException($$03 | 0);
}
function __ZN16DirectedMovement22setOwnMotionAttributesERK16MotionAttributes($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$sink = 0, $15 = 0, $16 = 0, $2 = 0, $28 = 0, $29 = 0, $3 = 0, $36 = 0, $39 = 0, $50 = 0, $51 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$2 = $1 + 80 | 0;
$3 = $0 + 528 | 0;
if (($3 | 0) != ($2 | 0)) {
HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
HEAP32[$0 + 532 >> 2] = HEAP32[$1 + 84 >> 2];
HEAP32[$0 + 536 >> 2] = HEAP32[$1 + 88 >> 2];
}
HEAP32[$0 + 540 >> 2] = HEAP32[$1 + 92 >> 2];
$15 = $1 + 96 | 0;
$16 = $0 + 544 | 0;
if (($16 | 0) != ($15 | 0)) {
HEAP32[$16 >> 2] = HEAP32[$15 >> 2];
HEAP32[$0 + 548 >> 2] = HEAP32[$1 + 100 >> 2];
HEAP32[$0 + 552 >> 2] = HEAP32[$1 + 104 >> 2];
}
HEAP32[$0 + 556 >> 2] = HEAP32[$1 + 108 >> 2];
$28 = $1 + 112 | 0;
$29 = $0 + 560 | 0;
if (($29 | 0) != ($28 | 0)) {
HEAP32[$29 >> 2] = HEAP32[$28 >> 2];
HEAP32[$0 + 564 >> 2] = HEAP32[$1 + 116 >> 2];
}
$36 = HEAP32[$1 + 120 >> 2] | 0;
HEAP32[$0 + 568 >> 2] = $36;
$39 = HEAP32[$1 + 124 >> 2] | 0;
HEAP32[$0 + 572 >> 2] = $39;
HEAP32[$0 + 576 >> 2] = HEAP32[$1 + 128 >> 2];
HEAP32[$0 + 580 >> 2] = HEAP32[$1 + 132 >> 2];
HEAP32[$0 + 584 >> 2] = HEAP32[$1 + 136 >> 2];
$50 = $1 + 140 | 0;
$51 = $0 + 588 | 0;
if (($51 | 0) != ($50 | 0)) {
HEAP32[$51 >> 2] = HEAP32[$50 >> 2];
HEAP32[$0 + 592 >> 2] = HEAP32[$1 + 144 >> 2];
}
HEAP16[$0 + 596 >> 1] = HEAP16[$1 + 148 >> 1] | 0;
switch ($36 | 0) {
case 2:
case 1:
{
$$sink = 1;
label = 12;
break;
}
case 3:
{
$$sink = 2;
label = 12;
break;
}
case 4:
{
$$sink = 3;
label = 12;
break;
}
default:
{}
}
if ((label | 0) == 12) HEAP32[$0 + 24 >> 2] = $$sink;
if (!$39) {
STACKTOP = sp;
return;
}
if (1) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(37692, $vararg_buffer);
}
HEAP32[$0 + 12 >> 2] = 11;
STACKTOP = sp;
return;
}
function __ZN18HandJointRotationsC2EPKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $11 = 0, $15 = 0, $19 = 0, $2 = 0, $23 = 0, $27 = 0, $31 = 0, $35 = 0, $39 = 0, $4 = 0, $43 = 0, $47 = 0, $51 = 0, $55 = 0, $59 = 0, $7 = 0;
$2 = $0 + 60 | 0;
HEAP8[$2 >> 0] = 0;
$4 = __Z20NewCopyJointRotationPK13JointRotation(HEAP32[$1 >> 2] | 0) | 0;
HEAP32[$0 >> 2] = $4;
$7 = __Z20NewCopyJointRotationPK13JointRotation(HEAP32[$1 + 4 >> 2] | 0) | 0;
HEAP32[$0 + 4 >> 2] = $7;
$11 = __Z20NewCopyJointRotationPK13JointRotation(HEAP32[$1 + 8 >> 2] | 0) | 0;
HEAP32[$0 + 8 >> 2] = $11;
$15 = __Z20NewCopyJointRotationPK13JointRotation(HEAP32[$1 + 12 >> 2] | 0) | 0;
HEAP32[$0 + 12 >> 2] = $15;
$19 = __Z20NewCopyJointRotationPK13JointRotation(HEAP32[$1 + 16 >> 2] | 0) | 0;
HEAP32[$0 + 16 >> 2] = $19;
$23 = __Z20NewCopyJointRotationPK13JointRotation(HEAP32[$1 + 20 >> 2] | 0) | 0;
HEAP32[$0 + 20 >> 2] = $23;
$27 = __Z20NewCopyJointRotationPK13JointRotation(HEAP32[$1 + 24 >> 2] | 0) | 0;
HEAP32[$0 + 24 >> 2] = $27;
$31 = __Z20NewCopyJointRotationPK13JointRotation(HEAP32[$1 + 28 >> 2] | 0) | 0;
HEAP32[$0 + 28 >> 2] = $31;
$35 = __Z20NewCopyJointRotationPK13JointRotation(HEAP32[$1 + 32 >> 2] | 0) | 0;
HEAP32[$0 + 32 >> 2] = $35;
$39 = __Z20NewCopyJointRotationPK13JointRotation(HEAP32[$1 + 36 >> 2] | 0) | 0;
HEAP32[$0 + 36 >> 2] = $39;
$43 = __Z20NewCopyJointRotationPK13JointRotation(HEAP32[$1 + 40 >> 2] | 0) | 0;
HEAP32[$0 + 40 >> 2] = $43;
$47 = __Z20NewCopyJointRotationPK13JointRotation(HEAP32[$1 + 44 >> 2] | 0) | 0;
HEAP32[$0 + 44 >> 2] = $47;
$51 = __Z20NewCopyJointRotationPK13JointRotation(HEAP32[$1 + 48 >> 2] | 0) | 0;
HEAP32[$0 + 48 >> 2] = $51;
$55 = __Z20NewCopyJointRotationPK13JointRotation(HEAP32[$1 + 52 >> 2] | 0) | 0;
HEAP32[$0 + 52 >> 2] = $55;
$59 = __Z20NewCopyJointRotationPK13JointRotation(HEAP32[$1 + 56 >> 2] | 0) | 0;
HEAP32[$0 + 56 >> 2] = $59;
HEAP8[$2 >> 0] = 1;
return;
}
function __ZN12ThumbBending6setAddERKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$sink = f0, $$sink12 = f0, $$sink3 = f0, $$sink6 = f0, $$sink9 = f0, $11 = f0, $14 = 0, $15 = f0, $16 = 0, $18 = f0, $2 = f0, $21 = 0, $22 = f0, $23 = 0, $25 = f0, $28 = 0, $29 = f0, $3 = 0, $30 = 0, $32 = f0, $4 = f0, $7 = 0, $8 = f0, $9 = 0, label = 0;
$2 = Math_fround(HEAPF32[$0 >> 2]);
$3 = $2 == Math_fround(-100.0);
$4 = Math_fround(HEAPF32[$1 >> 2]);
if ($3) {
$$sink = $4;
label = 4;
} else if (!($4 == Math_fround(-100.0))) {
$$sink = Math_fround($2 + $4);
label = 4;
}
if ((label | 0) == 4) HEAPF32[$0 >> 2] = $$sink;
$7 = $0 + 4 | 0;
$8 = Math_fround(HEAPF32[$7 >> 2]);
$9 = $8 == Math_fround(-100.0);
$11 = Math_fround(HEAPF32[$1 + 4 >> 2]);
if ($9) {
$$sink3 = $11;
label = 8;
} else if (!($11 == Math_fround(-100.0))) {
$$sink3 = Math_fround($8 + $11);
label = 8;
}
if ((label | 0) == 8) HEAPF32[$7 >> 2] = $$sink3;
$14 = $0 + 8 | 0;
$15 = Math_fround(HEAPF32[$14 >> 2]);
$16 = $15 == Math_fround(-100.0);
$18 = Math_fround(HEAPF32[$1 + 8 >> 2]);
if ($16) {
$$sink6 = $18;
label = 12;
} else if (!($18 == Math_fround(-100.0))) {
$$sink6 = Math_fround($15 + $18);
label = 12;
}
if ((label | 0) == 12) HEAPF32[$14 >> 2] = $$sink6;
$21 = $0 + 12 | 0;
$22 = Math_fround(HEAPF32[$21 >> 2]);
$23 = $22 == Math_fround(-100.0);
$25 = Math_fround(HEAPF32[$1 + 12 >> 2]);
if ($23) {
$$sink9 = $25;
label = 16;
} else if (!($25 == Math_fround(-100.0))) {
$$sink9 = Math_fround($22 + $25);
label = 16;
}
if ((label | 0) == 16) HEAPF32[$21 >> 2] = $$sink9;
$28 = $0 + 16 | 0;
$29 = Math_fround(HEAPF32[$28 >> 2]);
$30 = $29 == Math_fround(-100.0);
$32 = Math_fround(HEAPF32[$1 + 16 >> 2]);
do if ($30) $$sink12 = $32; else if ($32 == Math_fround(-100.0)) return; else {
$$sink12 = Math_fround($29 + $32);
break;
} while (0);
HEAPF32[$28 >> 2] = $$sink12;
return;
}
function __Z21ProcessAtomicXMLMorphP7XMLCellb($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0$in$i = 0, $$035 = 0, $$036 = 0, $$1 = 0, $13 = f0, $14 = f0, $15 = f0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $6 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$2 = __ZN7XMLCell13attrib_stringEPKc($0, 53439) | 0;
if (!$2) $$035 = __ZN7XMLCell13attrib_stringEPKc($0, 49705) | 0; else $$035 = $2;
$6 = __ZNK28InvertibleDynamicStringArray14indexFromValueEPKc(HEAP32[17820] | 0, $$035) | 0;
if ($1) {
if (($6 & 65535 | 0) == 65535) {
$9 = __ZNK28InvertibleDynamicStringArray6lengthEv(HEAP32[17820] | 0) | 0;
__ZN28InvertibleDynamicStringArray10addElementEPKc(HEAP32[17820] | 0, $$035) | 0;
$$0$in$i = $9;
} else $$0$in$i = $6;
$$036 = $$0$in$i << 16 >> 16;
} else if (($6 | 0) == -1) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer >> 2] = $$035;
__Z7eprintfPKcz(46661, $vararg_buffer);
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
} else $$036 = $6;
$13 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($0, 46688, Math_fround(1.0)));
$14 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($0, 46695, Math_fround(0.0)));
$15 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($0, 46707, Math_fround(0.0)));
$16 = __ZN7XMLCell13attrib_stringEPKc($0, 46717) | 0;
if (!$16) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer1 >> 2] = $$035;
__Z7eprintfPKcz(46724, $vararg_buffer1);
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
$18 = __Znwj(52) | 0;
__THREW__ = 0;
invoke_viifffi(1, $18 | 0, $$036 | 0, +$13, +$14, +$15, $16 | 0);
$19 = __THREW__;
__THREW__ = 0;
if ($19 & 1) {
$21 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($18);
___resumeException($21 | 0);
}
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$18 >> 2] | 0) + 52 >> 2] & 255]($18, $0);
$$1 = $18;
STACKTOP = sp;
return $$1 | 0;
}
function __ZN7SSFrame15SetBoneRotationEiffff($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = Math_fround($3);
$4 = Math_fround($4);
$5 = Math_fround($5);
var $10 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $32 = 0, $40 = 0, $41 = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$6 = sp;
$7 = $0 + 4 | 0;
$8 = $0 + 8 | 0;
$10 = HEAP32[$7 >> 2] | 0;
if (((HEAP32[$8 >> 2] | 0) - $10 >> 2 | 0) > ($1 | 0)) {
$16 = HEAP32[$10 + ($1 << 2) >> 2] | 0;
if ($16 | 0) {
$52 = $16;
__ZN7SSPRSet11SetRotationEffff($52, $2, $3, $4, $5);
STACKTOP = sp;
return;
}
}
$18 = __Znwj(40) | 0;
__THREW__ = 0;
invoke_vi(89, $18 | 0);
$19 = __THREW__;
__THREW__ = 0;
if ($19 & 1) {
$50 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($18);
___resumeException($50 | 0);
}
$21 = HEAP32[$8 >> 2] | 0;
$22 = HEAP32[$7 >> 2] | 0;
$24 = $21 - $22 >> 2;
$26 = $22;
if (($24 | 0) > ($1 | 0)) $40 = $26; else {
$27 = $1 + 1 | 0;
HEAP32[$6 >> 2] = 0;
$29 = $21;
if ($27 >>> 0 > $24 >>> 0) {
__ZNSt3__26vectorIP7SSPRSetNS_9allocatorIS2_EEE8__appendEjRKS2_($7, $27 - $24 | 0, $6);
$53 = HEAP32[$7 >> 2] | 0;
} else if ($27 >>> 0 < $24 >>> 0) {
$32 = $26 + ($27 << 2) | 0;
if (($32 | 0) == ($29 | 0)) $53 = $26; else {
HEAP32[$8 >> 2] = $29 + (~(($29 + -4 - $32 | 0) >>> 2) << 2);
$53 = $26;
}
} else $53 = $26;
$40 = $53;
}
$41 = HEAP32[$40 + ($1 << 2) >> 2] | 0;
if (!$41) $49 = $40; else {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$41 >> 2] | 0) + 4 >> 2] & 255]($41);
HEAP32[(HEAP32[$7 >> 2] | 0) + ($1 << 2) >> 2] = 0;
$49 = HEAP32[$7 >> 2] | 0;
}
HEAP32[$49 + ($1 << 2) >> 2] = $18;
$52 = HEAP32[(HEAP32[$7 >> 2] | 0) + ($1 << 2) >> 2] | 0;
__ZN7SSPRSet11SetRotationEffff($52, $2, $3, $4, $5);
STACKTOP = sp;
return;
}
function __ZN10Direction216EllipseDirectionEPKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0$lcssa = 0, $$015$lcssa = 0, $$01519 = 0, $$01718 = 0, $$020 = 0, $$1 = 0, $$116 = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $14 = 0, $15 = f0, $18 = f0, $20 = f0, $21 = f0, $22 = f0, $23 = f0, $24 = f0, $3 = 0, $7 = 0, label = 0;
if (!$1) {
HEAPF32[$0 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 4 >> 2] = Math_fround(0.0);
return;
}
$3 = HEAP8[$1 >> 0] | 0;
L5 : do if (!($3 << 24 >> 24)) {
$$0$lcssa = 0;
$$015$lcssa = 0;
} else {
$$01519 = 0;
$$01718 = $1;
$$020 = 0;
$7 = $3;
while (1) {
switch ($7 << 24 >> 24 | 0) {
case 108:
case 104:
{
$$1 = $$020;
$$116 = $$01519 + 1 | 0;
break;
}
case 114:
{
$$1 = $$020;
$$116 = $$01519 + -1 | 0;
break;
}
case 117:
case 118:
{
$$1 = $$020 + 1 | 0;
$$116 = $$01519;
break;
}
default:
{
$$1 = $$020;
$$116 = $$01519;
}
}
$$01718 = $$01718 + 1 | 0;
$7 = HEAP8[$$01718 >> 0] | 0;
if (!($7 << 24 >> 24)) {
$$0$lcssa = $$1;
$$015$lcssa = $$116;
break L5;
} else {
$$01519 = $$116;
$$020 = $$1;
}
}
} while (0);
$14 = $0 + 4 | 0;
$15 = Math_fround(HEAPF32[$14 >> 2]);
if ($15 < Math_fround(0.0)) {
$$pre$phiZ2D = $0;
$21 = Math_fround(HEAPF32[$0 >> 2]);
label = 13;
} else if ($15 == Math_fround(0.0)) {
$18 = Math_fround(HEAPF32[$0 >> 2]);
if ($18 < Math_fround(0.0)) {
$$pre$phiZ2D = $0;
$21 = $18;
label = 13;
} else $$pre$phi24Z2D = $0;
} else $$pre$phi24Z2D = $0;
if ((label | 0) == 13) {
$20 = Math_fround(-$21);
HEAPF32[$$pre$phiZ2D >> 2] = $20;
$22 = Math_fround(-$15);
HEAPF32[$14 >> 2] = $22;
$$pre$phi24Z2D = $$pre$phiZ2D;
}
$23 = Math_fround($$015$lcssa | 0);
HEAPF32[$$pre$phi24Z2D >> 2] = $23;
$24 = Math_fround($$0$lcssa | 0);
HEAPF32[$14 >> 2] = $24;
return;
}
function __ZNK19TurretJointRotation12toQuaternionER10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $12 = 0, $13 = f0, $14 = f0, $15 = f0, $16 = 0, $17 = f0, $18 = f0, $2 = 0, $20 = f0, $21 = f0, $22 = f0, $24 = f0, $25 = 0, $26 = f0, $27 = f0, $29 = f0, $36 = f0, $43 = f0, $51 = f0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
__ZN10Quaternion15setFromVecAngleERK6Vectorfb($1, $0 + 8 | 0, Math_fround(HEAPF32[$0 + 32 >> 2]), 1);
HEAPF32[$2 >> 2] = Math_fround(0.0);
$6 = $2 + 4 | 0;
HEAPF32[$6 >> 2] = Math_fround(0.0);
$7 = $2 + 8 | 0;
HEAPF32[$7 >> 2] = Math_fround(0.0);
$8 = $2 + 12 | 0;
HEAPF32[$8 >> 2] = Math_fround(1.0);
__ZN10Quaternion15setFromVecAngleERK6Vectorfb($2, $0 + 20 | 0, Math_fround(HEAPF32[$0 + 36 >> 2]), 1);
$12 = $1 + 4 | 0;
$13 = Math_fround(HEAPF32[$12 >> 2]);
$14 = Math_fround(HEAPF32[$7 >> 2]);
$15 = Math_fround($13 * $14);
$16 = $1 + 8 | 0;
$17 = Math_fround(HEAPF32[$16 >> 2]);
$18 = Math_fround(HEAPF32[$6 >> 2]);
$20 = Math_fround($15 - Math_fround($17 * $18));
$21 = Math_fround(HEAPF32[$1 >> 2]);
$22 = Math_fround(HEAPF32[$8 >> 2]);
$24 = Math_fround($20 + Math_fround($21 * $22));
$25 = $1 + 12 | 0;
$26 = Math_fround(HEAPF32[$25 >> 2]);
$27 = Math_fround(HEAPF32[$2 >> 2]);
$29 = Math_fround($24 + Math_fround($26 * $27));
$36 = Math_fround(Math_fround($18 * $26) + Math_fround(Math_fround($13 * $22) + Math_fround(Math_fround($17 * $27) - Math_fround($14 * $21))));
$43 = Math_fround(Math_fround($14 * $26) + Math_fround(Math_fround($17 * $22) + Math_fround(Math_fround($18 * $21) - Math_fround($13 * $27))));
$51 = Math_fround(Math_fround($22 * $26) + Math_fround(Math_fround(Math_fround(-Math_fround($21 * $27)) - Math_fround($13 * $18)) - Math_fround($14 * $17)));
HEAPF32[$1 >> 2] = $29;
HEAPF32[$12 >> 2] = $36;
HEAPF32[$16 >> 2] = $43;
HEAPF32[$25 >> 2] = $51;
STACKTOP = sp;
return;
}
function __ZL18printDirCoordSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEfcc($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = $2 | 0;
$3 = $3 | 0;
var $$02628 = 0, $$029 = 0, $14 = 0, $18 = 0, $21 = 0, $4 = 0, $5 = f0, $8 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$4 = sp;
$5 = Math_fround(Math_floor(Math_fround($1)));
if ($1 > Math_fround(0.0)) {
if (!($5 == $1)) {
HEAP8[$4 >> 0] = $2;
__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEf(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, $4, 1) | 0, $1) | 0;
STACKTOP = sp;
return;
}
$8 = ~~$5;
if (($8 | 0) > 0) $$02628 = 0; else {
STACKTOP = sp;
return;
}
do {
HEAP8[$4 >> 0] = $2;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, $4, 1) | 0;
$$02628 = $$02628 + 1 | 0;
} while (($$02628 | 0) != ($8 | 0));
STACKTOP = sp;
return;
}
if (!($1 < Math_fround(0.0))) {
STACKTOP = sp;
return;
}
if (!($5 == $1)) {
HEAP8[$4 >> 0] = $3;
$18 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, $4, 1) | 0;
HEAP8[$4 >> 0] = 32;
$21 = __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEf(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($18, $4, 1) | 0, Math_fround(-$1)) | 0;
HEAP8[$4 >> 0] = 32;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($21, $4, 1) | 0;
STACKTOP = sp;
return;
}
$14 = ~~$5;
if (($14 | 0) < 0) $$029 = $14; else {
STACKTOP = sp;
return;
}
while (1) {
HEAP8[$4 >> 0] = $3;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, $4, 1) | 0;
if (($$029 | 0) < -1) $$029 = $$029 + 1 | 0; else break;
}
STACKTOP = sp;
return;
}
function __ZN7HashAnyIiiE9vmakeHashEiiPi($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$04548 = 0, $$1 = 0, $16 = 0, $17 = 0, $3 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $44 = 0, $45 = 0, $51 = 0, $52 = 0, $59 = 0, $60 = 0, $61 = 0, $67 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp;
HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
$4 = ($1 | 0) != 0;
if ($4) {
HEAP32[$2 >> 2] = ((HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1)) + 4;
$16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$17 = HEAP32[$16 >> 2] | 0;
HEAP32[$2 >> 2] = $16 + 4;
if (!$17) $$1 = 3; else {
$$04548 = 1;
do {
$$04548 = $$04548 + 1 | 0;
HEAP32[$2 >> 2] = ((HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1)) + 4;
$31 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$32 = HEAP32[$31 >> 2] | 0;
HEAP32[$2 >> 2] = $31 + 4;
} while (($32 | 0) != 0);
$$1 = $$04548 * 3 | 1;
}
} else $$1 = 3;
$34 = __Znwj(28) | 0;
__THREW__ = 0;
invoke_viii(96, $34 | 0, $0 | 0, $$1 | 0);
$35 = __THREW__;
__THREW__ = 0;
if ($35 & 1) {
$37 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($34);
___resumeException($37 | 0);
}
HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
if (!$4) {
STACKTOP = sp;
return $34 | 0;
}
$44 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$45 = HEAP32[$44 >> 2] | 0;
HEAP32[$2 >> 2] = $44 + 4;
__ZN7HashAnyIiiE7addItemEii($34, $1, $45);
$51 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$52 = HEAP32[$51 >> 2] | 0;
HEAP32[$2 >> 2] = $51 + 4;
if (!$52) {
STACKTOP = sp;
return $34 | 0;
} else $61 = $52;
do {
$59 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$60 = HEAP32[$59 >> 2] | 0;
HEAP32[$2 >> 2] = $59 + 4;
__ZN7HashAnyIiiE7addItemEii($34, $61, $60);
$67 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$61 = HEAP32[$67 >> 2] | 0;
HEAP32[$2 >> 2] = $67 + 4;
} while (($61 | 0) != 0);
STACKTOP = sp;
return $34 | 0;
}
function __ZN15GestureGeometryC2Ev($0) {
$0 = $0 | 0;
var $33 = 0, dest = 0, stop = 0;
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 20 >> 2] = 0;
HEAP32[$0 + 24 >> 2] = 0;
HEAP32[$0 + 28 >> 2] = 0;
HEAPF32[$0 + 32 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 36 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 272 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 276 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 328 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 332 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 336 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 340 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 352 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 356 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 360 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 364 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 376 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 380 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 384 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 388 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 400 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 404 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 408 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 412 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 424 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 428 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 432 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 436 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 448 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 452 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 456 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 460 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 472 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 476 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 480 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 484 >> 2] = Math_fround(1.0);
$33 = $0 + 40 | 0;
dest = $0 + 280 | 0;
stop = dest + 48 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
_memset($33 | 0, 0, 232) | 0;
return;
}
function __ZN25TwoHConcretePostureChange9fixWristsEv($0) {
$0 = $0 | 0;
var $1 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$1 = sp + 36 | 0;
$2 = sp + 24 | 0;
$3 = sp + 12 | 0;
$4 = $0 + 448 | 0;
$5 = HEAPU8[$4 >> 0] | HEAPU8[$4 + 1 >> 0] << 8;
if (!(($5 & 112) == 0 | ($5 & 6) != 0)) {
if (1) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(42103, $vararg_buffer);
}
__ZN6VectorC2Ev($2);
__ZN6Vector7setFromERKS_($2, $0 + 4 | 0);
__ZN6VectorC2ERKS_($1, $0 + 16 | 0);
__ZNK10Quaternion12rotateVectorER6Vector($0 + 40 | 0, $1);
__ZN6Vector11setSubtractERKS_($2, $1);
__ZN6VectorC2Ev($3);
$12 = $0 + 228 | 0;
__ZN6Vector7setFromERKS_($3, $12);
__ZN6VectorC2ERKS_($1, $0 + 240 | 0);
__ZNK10Quaternion12rotateVectorER6Vector($0 + 264 | 0, $1);
__ZN6Vector11setSubtractERKS_($3, $1);
__ZN6VectorC2Ev($1);
__ZN6Vector11setSubtractERKS_S1_($1, $2, $3);
__ZN6Vector6setAddERKS_($12, $1);
}
$13 = $0 + 450 | 0;
$14 = HEAPU8[$13 >> 0] | HEAPU8[$13 + 1 >> 0] << 8;
if (($14 & 112) == 0 | ($14 & 6) != 0) {
STACKTOP = sp;
return;
}
if (1) {
__Z7LogTimev() | 0;
__Z7eprintfPKcz(42171, $vararg_buffer1);
}
__ZN6VectorC2Ev($2);
__ZN6Vector7setFromERKS_($2, $0 + 116 | 0);
__ZN6VectorC2ERKS_($1, $0 + 128 | 0);
__ZNK10Quaternion12rotateVectorER6Vector($0 + 152 | 0, $1);
__ZN6Vector11setSubtractERKS_($2, $1);
__ZN6VectorC2Ev($3);
$21 = $0 + 340 | 0;
__ZN6Vector7setFromERKS_($3, $21);
__ZN6VectorC2ERKS_($1, $0 + 352 | 0);
__ZNK10Quaternion12rotateVectorER6Vector($0 + 376 | 0, $1);
__ZN6Vector11setSubtractERKS_($3, $1);
__ZN6VectorC2Ev($1);
__ZN6Vector11setSubtractERKS_S1_($1, $2, $3);
__ZN6Vector6setAddERKS_($21, $1);
STACKTOP = sp;
return;
}
function __ZNK7HashAnyIPKcS1_E5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$sink19$i = 0, $$sroa$012$019 = 0, $$sroa$012$1 = 0, $$sroa$012$2 = 0, $$sroa$012$3 = 0, $$sroa$6$018 = 0, $11 = 0, $15 = 0, $18 = 0, $19 = 0, $21 = 0, $24 = 0, $26 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$3 = $0 + 4 | 0;
$4 = HEAP32[$3 >> 2] | 0;
if (($4 | 0) <= -1) {
STACKTOP = sp;
return;
}
$$sroa$012$019 = -1;
$$sroa$6$018 = 0;
$11 = $4;
L7 : while (1) {
$$sroa$012$1 = $$sroa$012$019;
$7 = $$sroa$6$018;
$9 = $$sroa$012$019;
while (1) {
if (!$7) {
$8 = $9 + 1 | 0;
if (($8 | 0) < ($11 | 0)) {
$$sink19$i = (HEAP32[$0 >> 2] | 0) + ($8 << 3) | 0;
$$sroa$012$2 = $8;
$26 = $8;
label = 9;
} else {
$$sroa$012$3 = $8;
$18 = $8;
}
} else {
$$sink19$i = $7 + 8 | 0;
$$sroa$012$2 = $$sroa$012$1;
$26 = $9;
label = 9;
}
if ((label | 0) == 9) {
label = 0;
$15 = HEAP32[$$sink19$i >> 2] | 0;
if (!$15) {
$$sroa$012$3 = $$sroa$012$2;
$18 = $26;
} else break;
}
if (($18 | 0) < ($11 | 0)) {
$$sroa$012$1 = $$sroa$012$3;
$7 = 0;
$9 = $18;
} else {
label = 12;
break L7;
}
}
$19 = HEAP32[$15 >> 2] | 0;
$21 = HEAP32[$15 + 4 >> 2] | 0;
_fputc(10, $1) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
HEAP32[$vararg_buffer >> 2] = $19;
HEAP32[$vararg_buffer + 4 >> 2] = $21;
_fprintf($1, 9258, $vararg_buffer) | 0;
$24 = HEAP32[$3 >> 2] | 0;
if (($$sroa$012$2 | 0) < ($24 | 0)) {
$$sroa$012$019 = $$sroa$012$2;
$$sroa$6$018 = $15;
$11 = $24;
} else {
label = 12;
break;
}
}
if ((label | 0) == 12) {
STACKTOP = sp;
return;
}
}
function __ZN7Getopts10initialiseEv($0) {
$0 = $0 | 0;
var $1 = 0, $10 = 0, $12 = 0, $23 = 0, $29 = 0, $34 = 0, $39 = 0, $40 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$1 = __Znwj(28) | 0;
HEAP32[$1 + 20 >> 2] = -1;
HEAP32[$1 + 24 >> 2] = 0;
HEAP32[$1 + 8 >> 2] = 0;
HEAP32[$1 + 16 >> 2] = 0;
HEAP32[$1 + 12 >> 2] = 50;
$7 = _malloc(400) | 0;
HEAP32[$1 >> 2] = $7;
$9 = $1 + 4 | 0;
if ($7 | 0) {
HEAP32[$9 >> 2] = 50;
HEAP32[$7 >> 2] = 0;
HEAP16[$7 + 4 >> 1] = 0;
HEAP32[$7 + 8 >> 2] = 0;
HEAP16[$7 + 12 >> 1] = 0;
HEAP32[$7 + 16 >> 2] = 0;
HEAP16[(HEAP32[$1 >> 2] | 0) + 20 >> 1] = 0;
if ((HEAP32[$9 >> 2] | 0) > 3) {
$23 = 3;
do {
HEAP32[(HEAP32[$1 >> 2] | 0) + ($23 << 3) >> 2] = 0;
HEAP16[(HEAP32[$1 >> 2] | 0) + ($23 << 3) + 4 >> 1] = 0;
$23 = $23 + 1 | 0;
} while (($23 | 0) < (HEAP32[$9 >> 2] | 0));
}
HEAP32[$0 >> 2] = $1;
$29 = __Znwj(16) | 0;
HEAP32[$29 + 4 >> 2] = 10;
HEAP32[$29 + 12 >> 2] = 0;
HEAP32[$29 >> 2] = 0;
HEAP32[$29 + 8 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = $29;
$34 = __Znwj(16) | 0;
HEAP32[$34 + 4 >> 2] = 10;
HEAP32[$34 + 12 >> 2] = 0;
HEAP32[$34 >> 2] = 0;
HEAP32[$34 + 8 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = $34;
STACKTOP = sp;
return;
}
HEAP32[$9 >> 2] = 0;
__THREW__ = 0;
HEAP32[$vararg_buffer >> 2] = 50;
HEAP32[$vararg_buffer + 4 >> 2] = 8;
invoke_vii(115, 57708, $vararg_buffer | 0);
$10 = __THREW__;
__THREW__ = 0;
if ($10 & 1) {
$39 = ___cxa_find_matching_catch_2() | 0;
$40 = tempRet0;
__ZdlPv($1);
___resumeException($39 | 0);
}
$12 = ___cxa_allocate_exception(4) | 0;
HEAP32[$12 >> 2] = 1;
__THREW__ = 0;
invoke_viii(75, $12 | 0, 32, 0);
__THREW__ = 0;
$39 = ___cxa_find_matching_catch_2() | 0;
$40 = tempRet0;
__ZdlPv($1);
___resumeException($39 | 0);
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$037$off038 = 0, $$037$off039 = 0, $13 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $33 = 0, $44 = 0, label = 0;
do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); else {
if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
$44 = HEAP32[$0 + 8 >> 2] | 0;
FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$44 >> 2] | 0) + 24 >> 2] & 15]($44, $1, $2, $3, $4);
break;
}
if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
$13 = $1 + 20 | 0;
if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
HEAP32[$1 + 32 >> 2] = $3;
$19 = $1 + 44 | 0;
if ((HEAP32[$19 >> 2] | 0) == 4) break;
$22 = $1 + 52 | 0;
HEAP8[$22 >> 0] = 0;
$23 = $1 + 53 | 0;
HEAP8[$23 >> 0] = 0;
$25 = HEAP32[$0 + 8 >> 2] | 0;
FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$25 >> 2] | 0) + 20 >> 2] & 7]($25, $1, $2, $2, 1, $4);
if (!(HEAP8[$23 >> 0] | 0)) {
$$037$off038 = 4;
label = 11;
} else if (!(HEAP8[$22 >> 0] | 0)) {
$$037$off038 = 3;
label = 11;
} else $$037$off039 = 3;
if ((label | 0) == 11) {
HEAP32[$13 >> 2] = $2;
$33 = $1 + 40 | 0;
HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) + 1;
if ((HEAP32[$1 + 36 >> 2] | 0) == 1) if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
HEAP8[$1 + 54 >> 0] = 1;
$$037$off039 = $$037$off038;
} else $$037$off039 = $$037$off038; else $$037$off039 = $$037$off038;
}
HEAP32[$19 >> 2] = $$037$off039;
break;
}
}
if (($3 | 0) == 1) HEAP32[$1 + 32 >> 2] = 1;
} while (0);
return;
}
function __Z13HA_get_attribIfdEbPK7HashAnyIPKcS2_ERT_R12AttribStatusS2_S2_($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$012$i$i$i = 0, $$01215$i$i$i = 0, $$01216$i$i$i = 0, $$2 = 0, $$sink$i$i$i = 0, $10 = 0, $11 = 0, $23 = 0, $28 = f0, $5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer1 = sp + 16 | 0;
$vararg_buffer = sp + 8 | 0;
$5 = sp;
if (!$0) {
HEAP32[$2 >> 2] = 1;
$$2 = 0;
STACKTOP = sp;
return $$2 | 0;
}
if ($4 | 0) {
$10 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($4, HEAP32[$0 + 4 >> 2] | 0) | 0;
$11 = HEAP32[$0 >> 2] | 0;
L7 : do if ((HEAP16[$11 + ($10 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i = HEAP32[$11 + ($10 << 3) >> 2] | 0;
if (!$$01215$i$i$i) label = 9; else {
$$01216$i$i$i = $$01215$i$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($4, HEAP32[$$01216$i$i$i >> 2] | 0) | 0) break;
$$012$i$i$i = HEAP32[$$01216$i$i$i + 8 >> 2] | 0;
if (!$$012$i$i$i) {
label = 9;
break L7;
} else $$01216$i$i$i = $$012$i$i$i;
}
$$sink$i$i$i = $$01216$i$i$i + 4 | 0;
}
} else label = 9; while (0);
if ((label | 0) == 9) $$sink$i$i$i = $0 + 20 | 0;
$23 = HEAP32[$$sink$i$i$i >> 2] | 0;
if ($23 | 0) {
HEAP32[$vararg_buffer >> 2] = $5;
if ((_sscanf($23, $3, $vararg_buffer) | 0) == 1) {
$28 = Math_fround(+HEAPF64[$5 >> 3]);
HEAPF32[$1 >> 2] = $28;
HEAP32[$2 >> 2] = 0;
$$0 = 1;
} else {
HEAP32[$2 >> 2] = 2;
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer1 >> 2] = $4;
HEAP32[$vararg_buffer1 + 4 >> 2] = $23;
__Z7eprintfPKcz(54459, $vararg_buffer1);
$$0 = 0;
}
$$2 = $$0;
STACKTOP = sp;
return $$2 | 0;
}
}
HEAP32[$2 >> 2] = 1;
$$2 = 0;
STACKTOP = sp;
return $$2 | 0;
}
function __ZNK17TargettedMovement10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $26 = 0, $3 = 0, $4 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp + 4 | 0;
$3 = sp + 2 | 0;
$4 = sp;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
HEAP8[$2 >> 0] = 60;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2, 1) | 0, 51473, 10) | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$0 >> 2] | 0) + 84 >> 2] & 127]($0, $1, 1);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36571, 2) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
$14 = HEAP32[$0 + 528 >> 2] | 0;
$18 = (HEAP8[$14 + 13 >> 0] & 64) != 0;
$19 = $0 + 508 | 0;
$20 = $0 + 510 | 0;
$21 = $18 ? $19 : $20;
HEAP16[$3 >> 1] = HEAPU8[$21 >> 0] | HEAPU8[$21 + 1 >> 0] << 8;
$23 = $18 ? $20 : $19;
HEAP16[$4 >> 1] = HEAPU8[$23 >> 0] | HEAPU8[$23 + 1 >> 0] << 8;
__ZNK7Gesture17printPostureSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE18PostureChangeFlagsS6_($14, $1, $3, $4);
$26 = (HEAP16[36078] | 0) + -1 << 16 >> 16;
HEAP16[36078] = $26;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, $26 << 16 >> 16);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36574, 2) | 0, 51473, 10) | 0, 36571, 2) | 0;
STACKTOP = sp;
return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($0) {
$0 = $0 | 0;
var $$0 = 0, $1 = 0, $18 = 0, $22 = 0, $23 = 0, $29 = 0, $33 = 0, $35 = 0, $37 = 0, $43 = 0, $45 = 0, $47 = 0, $49 = 0, $9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$1 = sp;
L1 : do if (HEAP32[$0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0) {
__THREW__ = 0;
invoke_vii(112, $1 | 0, $0 | 0);
$9 = __THREW__;
__THREW__ = 0;
L3 : do if ($9 & 1) {
$35 = ___cxa_find_matching_catch_3(0) | 0;
$$0 = $35;
} else {
do if (HEAP8[$1 >> 0] | 0) {
$18 = HEAP32[$0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
__THREW__ = 0;
$22 = invoke_ii(HEAP32[(HEAP32[$18 >> 2] | 0) + 24 >> 2] | 0, $18 | 0) | 0;
$23 = __THREW__;
__THREW__ = 0;
if (!($23 & 1)) {
if (($22 | 0) != -1) break;
$29 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
__THREW__ = 0;
invoke_vii(114, $29 | 0, HEAP32[$29 + 16 >> 2] | 1 | 0);
$33 = __THREW__;
__THREW__ = 0;
if (!($33 & 1)) break;
}
$37 = ___cxa_find_matching_catch_3(0) | 0;
__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($1);
$$0 = $37;
break L3;
} while (0);
__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($1);
break L1;
} while (0);
___cxa_begin_catch($$0 | 0) | 0;
__THREW__ = 0;
invoke_vi(92, $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0);
$43 = __THREW__;
__THREW__ = 0;
if (!($43 & 1)) {
___cxa_end_catch();
break;
}
$45 = ___cxa_find_matching_catch_2() | 0;
__THREW__ = 0;
invoke_v(3);
$47 = __THREW__;
__THREW__ = 0;
if ($47 & 1) {
$49 = ___cxa_find_matching_catch_3(0) | 0;
___clang_call_terminate($49);
} else ___resumeException($45 | 0);
} while (0);
STACKTOP = sp;
return $0 | 0;
}
function __ZN13FingerBending7BetweenERKS_f($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
var $$sink = f0, $$sink3 = f0, $$sink6 = f0, $$sink9 = f0, $11 = 0, $12 = f0, $13 = 0, $15 = f0, $21 = 0, $22 = f0, $23 = 0, $25 = f0, $3 = f0, $31 = 0, $32 = f0, $33 = 0, $35 = f0, $4 = 0, $5 = f0, label = 0;
$3 = Math_fround(HEAPF32[$0 >> 2]);
$4 = $3 == Math_fround(-100.0);
$5 = Math_fround(HEAPF32[$1 >> 2]);
if ($4) {
$$sink = $5;
label = 4;
} else if (!($5 == Math_fround(-100.0))) {
$$sink = Math_fround(Math_fround(Math_fround(Math_fround(1.0) - $2) * $3) + Math_fround($5 * $2));
label = 4;
}
if ((label | 0) == 4) HEAPF32[$0 >> 2] = $$sink;
$11 = $0 + 4 | 0;
$12 = Math_fround(HEAPF32[$11 >> 2]);
$13 = $12 == Math_fround(-100.0);
$15 = Math_fround(HEAPF32[$1 + 4 >> 2]);
if ($13) {
$$sink3 = $15;
label = 8;
} else if (!($15 == Math_fround(-100.0))) {
$$sink3 = Math_fround(Math_fround(Math_fround(Math_fround(1.0) - $2) * $12) + Math_fround($15 * $2));
label = 8;
}
if ((label | 0) == 8) HEAPF32[$11 >> 2] = $$sink3;
$21 = $0 + 8 | 0;
$22 = Math_fround(HEAPF32[$21 >> 2]);
$23 = $22 == Math_fround(-100.0);
$25 = Math_fround(HEAPF32[$1 + 8 >> 2]);
if ($23) {
$$sink6 = $25;
label = 12;
} else if (!($25 == Math_fround(-100.0))) {
$$sink6 = Math_fround(Math_fround(Math_fround(Math_fround(1.0) - $2) * $22) + Math_fround($25 * $2));
label = 12;
}
if ((label | 0) == 12) HEAPF32[$21 >> 2] = $$sink6;
$31 = $0 + 12 | 0;
$32 = Math_fround(HEAPF32[$31 >> 2]);
$33 = $32 == Math_fround(-100.0);
$35 = Math_fround(HEAPF32[$1 + 12 >> 2]);
do if ($33) $$sink9 = $35; else if ($35 == Math_fround(-100.0)) return; else {
$$sink9 = Math_fround(Math_fround(Math_fround(Math_fround(1.0) - $2) * $32) + Math_fround($35 * $2));
break;
} while (0);
HEAPF32[$31 >> 2] = $$sink9;
return;
}
function __ZNK9Handshape5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $13 = 0, $23 = 0, $29 = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$vararg_buffer8 = sp + 32 | 0;
$vararg_buffer5 = sp + 24 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
HEAP32[$vararg_buffer >> 2] = $0;
__Z7eprintfPKcz(34298, $vararg_buffer);
if (__ZNK14SiGMLHandshape7definedEv($0) | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(34302, 19, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK14SiGMLHandshape5printEP8_IO_FILE($0, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$13 = $0 + 220 | 0;
if (HEAP32[$13 >> 2] | 0) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(34322, 26, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK14SiGMLHandshape5printEP8_IO_FILE(HEAP32[$13 >> 2] | 0, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
$23 = $0 + 224 | 0;
if (Math_fround(HEAPF32[$23 >> 2]) != Math_fround(.5)) {
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$29 = +Math_fround(HEAPF32[$23 >> 2]);
HEAP32[$vararg_buffer1 >> 2] = 3;
HEAPF64[$vararg_buffer1 + 8 >> 3] = $29;
_fprintf($1, 34349, $vararg_buffer1) | 0;
}
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
HEAP32[$vararg_buffer5 >> 2] = HEAP8[$0 + 233 >> 0] | 0 ? 84 : 70;
_fprintf($1, 34365, $vararg_buffer5) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
HEAP32[$vararg_buffer8 >> 2] = HEAP32[$0 + 236 >> 2];
_fprintf($1, 34387, $vararg_buffer8) | 0;
STACKTOP = sp;
return;
}
function __ZN10Quaternion8setSlerpERKS_S1_f($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = Math_fround($3);
var $$0 = f0, $$043 = f0, $$044 = f0, $$1 = f0, $10 = f0, $12 = f0, $14 = f0, $16 = f0, $18 = f0, $20 = f0, $22 = f0, $24 = f0, $25 = 0, $26 = f0, $30 = f0, $31 = f0, $4 = f0, $43 = f0, $46 = f0, $49 = f0, $5 = f0, $52 = f0, $55 = f0, $6 = f0, $8 = f0;
$4 = Math_fround(HEAPF32[$1 >> 2]);
$5 = Math_fround(HEAPF32[$2 >> 2]);
$6 = Math_fround($4 * $5);
$8 = Math_fround(HEAPF32[$1 + 4 >> 2]);
$10 = Math_fround(HEAPF32[$2 + 4 >> 2]);
$12 = Math_fround($6 + Math_fround($8 * $10));
$14 = Math_fround(HEAPF32[$1 + 8 >> 2]);
$16 = Math_fround(HEAPF32[$2 + 8 >> 2]);
$18 = Math_fround($12 + Math_fround($14 * $16));
$20 = Math_fround(HEAPF32[$1 + 12 >> 2]);
$22 = Math_fround(HEAPF32[$2 + 12 >> 2]);
$24 = Math_fround($18 + Math_fround($20 * $22));
$25 = $24 < Math_fround(0.0);
$26 = Math_fround(-$24);
$$0 = $25 ? $26 : $24;
if (Math_fround(Math_fround(1.0) - $$0) < Math_fround(.0000999999974)) {
$$043 = $3;
$$044 = Math_fround(Math_fround(1.0) - $3);
} else {
$30 = Math_fround(+Math_acos(+$$0));
$31 = Math_fround(+Math_sin(+$30));
$$043 = Math_fround(Math_fround(+Math_sin(+Math_fround($30 * $3))) / $31);
$$044 = Math_fround(+Math_sin(+((1.0 - +$3) * +$30)) / +$31);
}
$43 = Math_fround(-$$043);
$$1 = $25 ? $43 : $$043;
$46 = Math_fround(Math_fround($$044 * $4) + Math_fround($$1 * $5));
$49 = Math_fround(Math_fround($$044 * $8) + Math_fround($$1 * $10));
$52 = Math_fround(Math_fround($$044 * $14) + Math_fround($$1 * $16));
$55 = Math_fround(Math_fround($$044 * $20) + Math_fround($$1 * $22));
HEAPF32[$0 >> 2] = $46;
HEAPF32[$0 + 4 >> 2] = $49;
HEAPF32[$0 + 8 >> 2] = $52;
HEAPF32[$0 + 12 >> 2] = $55;
__ZNK10Quaternion14checkValidQuatEv($0);
return;
}
function __ZNK19TwoHConcretePosture14totallyDefinedE12SET_OF_HANDS($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $70 = 0;
switch ($1 | 0) {
case 3:
case 5:
{
if (Math_fround(HEAPF32[$0 + 4 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 8 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 12 >> 2]) == Math_fround(0.0)) {
$70 = 0;
return $70 | 0;
}
if (Math_fround(HEAPF32[$0 + 16 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 20 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 24 >> 2]) == Math_fround(0.0)) {
$70 = 0;
return $70 | 0;
}
if (Math_fround(HEAPF32[$0 + 40 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 44 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 48 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 52 >> 2]) == Math_fround(1.0)) {
$70 = 0;
return $70 | 0;
}
if (!(HEAP32[$0 + 56 >> 2] | 0)) {
$70 = 0;
return $70 | 0;
}
break;
}
default:
{}
}
if (($1 | 1 | 0) != 5) {
$70 = 1;
return $70 | 0;
}
if (Math_fround(HEAPF32[$0 + 116 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 120 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 124 >> 2]) == Math_fround(0.0)) {
$70 = 0;
return $70 | 0;
}
if (Math_fround(HEAPF32[$0 + 128 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 132 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 136 >> 2]) == Math_fround(0.0)) {
$70 = 0;
return $70 | 0;
}
if (Math_fround(HEAPF32[$0 + 152 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 156 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 160 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 164 >> 2]) == Math_fround(1.0)) {
$70 = 0;
return $70 | 0;
}
$70 = (HEAP32[$0 + 168 >> 2] | 0) != 0;
return $70 | 0;
}
function __ZNK13SeqTimedMorph7newCopyEv($0) {
$0 = $0 | 0;
var $$011 = 0, $$pre$phi$iZ2D = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $16 = 0, $19 = 0, $2 = 0, $21 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $34 = 0, $36 = 0, $4 = 0, $5 = 0, label = 0;
$1 = __Znwj(28) | 0;
$2 = $1 + 4 | 0;
HEAP32[$2 >> 2] = 0;
HEAP32[$2 + 4 >> 2] = 0;
HEAP32[$2 + 8 >> 2] = 0;
HEAP32[$2 + 12 >> 2] = 0;
HEAP32[$1 + 20 >> 2] = 3;
HEAP32[$1 >> 2] = 3324;
__THREW__ = 0;
$4 = invoke_ii(20, 16) | 0;
$5 = __THREW__;
__THREW__ = 0;
if ($5 & 1) {
$16 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($1);
___resumeException($16 | 0);
}
HEAP32[$4 + 4 >> 2] = 10;
HEAP32[$4 + 12 >> 2] = 0;
HEAP32[$4 >> 2] = 0;
HEAP32[$4 + 8 >> 2] = 0;
$10 = $1 + 24 | 0;
HEAP32[$10 >> 2] = $4;
$11 = $0 + 24 | 0;
$12 = HEAP32[$11 >> 2] | 0;
if ((HEAP32[$12 + 12 >> 2] | 0) > 0) {
$$011 = 0;
$19 = $12;
} else return $1 | 0;
do {
$21 = HEAP32[(HEAP32[$19 >> 2] | 0) + ($$011 << 2) >> 2] | 0;
$25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 8 >> 2] & 63]($21) | 0;
$26 = HEAP32[$10 >> 2] | 0;
$27 = $26 + 12 | 0;
$28 = HEAP32[$27 >> 2] | 0;
if (($28 | 0) >= 0) {
if ((HEAP32[$26 + 8 >> 2] | 0) > ($28 | 0)) {
$$pre$phi$iZ2D = $28 + 1 | 0;
label = 9;
} else {
$34 = HEAP32[$26 + 4 >> 2] | 0;
$36 = $28 + 1 | 0;
__ZN13DynamicArrayPI18AbstractTimedMorphE6resizeEi($26, ($34 | 0) > ($28 | 0) ? $34 : $36 + ($28 >>> 1) | 0);
if ((HEAP32[$27 >> 2] | 0) <= ($28 | 0)) {
$$pre$phi$iZ2D = $36;
label = 9;
}
}
if ((label | 0) == 9) {
label = 0;
HEAP32[$27 >> 2] = $$pre$phi$iZ2D;
}
HEAP32[(HEAP32[$26 >> 2] | 0) + ($28 << 2) >> 2] = $25;
}
$$011 = $$011 + 1 | 0;
$19 = HEAP32[$11 >> 2] | 0;
} while (($$011 | 0) < (HEAP32[$19 + 12 >> 2] | 0));
return $1 | 0;
}
function __ZNK13ParTimedMorph7newCopyEv($0) {
$0 = $0 | 0;
var $$011 = 0, $$pre$phi$iZ2D = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $16 = 0, $19 = 0, $2 = 0, $21 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $34 = 0, $36 = 0, $4 = 0, $5 = 0, label = 0;
$1 = __Znwj(28) | 0;
$2 = $1 + 4 | 0;
HEAP32[$2 >> 2] = 0;
HEAP32[$2 + 4 >> 2] = 0;
HEAP32[$2 + 8 >> 2] = 0;
HEAP32[$2 + 12 >> 2] = 0;
HEAP32[$1 + 20 >> 2] = 2;
HEAP32[$1 >> 2] = 3260;
__THREW__ = 0;
$4 = invoke_ii(20, 16) | 0;
$5 = __THREW__;
__THREW__ = 0;
if ($5 & 1) {
$16 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($1);
___resumeException($16 | 0);
}
HEAP32[$4 + 4 >> 2] = 10;
HEAP32[$4 + 12 >> 2] = 0;
HEAP32[$4 >> 2] = 0;
HEAP32[$4 + 8 >> 2] = 0;
$10 = $1 + 24 | 0;
HEAP32[$10 >> 2] = $4;
$11 = $0 + 24 | 0;
$12 = HEAP32[$11 >> 2] | 0;
if ((HEAP32[$12 + 12 >> 2] | 0) > 0) {
$$011 = 0;
$19 = $12;
} else return $1 | 0;
do {
$21 = HEAP32[(HEAP32[$19 >> 2] | 0) + ($$011 << 2) >> 2] | 0;
$25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 8 >> 2] & 63]($21) | 0;
$26 = HEAP32[$10 >> 2] | 0;
$27 = $26 + 12 | 0;
$28 = HEAP32[$27 >> 2] | 0;
if (($28 | 0) >= 0) {
if ((HEAP32[$26 + 8 >> 2] | 0) > ($28 | 0)) {
$$pre$phi$iZ2D = $28 + 1 | 0;
label = 9;
} else {
$34 = HEAP32[$26 + 4 >> 2] | 0;
$36 = $28 + 1 | 0;
__ZN13DynamicArrayPI18AbstractTimedMorphE6resizeEi($26, ($34 | 0) > ($28 | 0) ? $34 : $36 + ($28 >>> 1) | 0);
if ((HEAP32[$27 >> 2] | 0) <= ($28 | 0)) {
$$pre$phi$iZ2D = $36;
label = 9;
}
}
if ((label | 0) == 9) {
label = 0;
HEAP32[$27 >> 2] = $$pre$phi$iZ2D;
}
HEAP32[(HEAP32[$26 >> 2] | 0) + ($28 << 2) >> 2] = $25;
}
$$011 = $$011 + 1 | 0;
$19 = HEAP32[$11 >> 2] | 0;
} while (($$011 | 0) < (HEAP32[$19 + 12 >> 2] | 0));
return $1 | 0;
}
function __ZNK11SeqMovement10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$014 = 0, $10 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $23 = 0, $24 = 0, $sext = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
HEAP8[$2 >> 0] = 60;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2, 1) | 0, 51462, 10) | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$0 >> 2] | 0) + 84 >> 2] & 127]($0, $1, 1);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36571, 2) | 0;
$10 = (HEAP16[36078] | 0) + 1 << 16 >> 16;
HEAP16[36078] = $10;
$sext = HEAP32[$0 + 540 >> 2] << 16;
$13 = $sext >> 16;
if (($sext | 0) > 0) {
$15 = $0 + 528 | 0;
$$014 = 0;
$23 = 0;
do {
$24 = HEAP32[(HEAP32[$15 >> 2] | 0) + ($23 << 2) >> 2] | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$24 >> 2] | 0) + 80 >> 2] & 255]($24, $1);
$$014 = $$014 + 1 << 16 >> 16;
$23 = $$014 << 16 >> 16;
} while (($13 | 0) > ($23 | 0));
$17 = HEAP16[36078] | 0;
} else $17 = $10;
$16 = $17 + -1 << 16 >> 16;
HEAP16[36078] = $16;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, $16 << 16 >> 16);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36574, 2) | 0, 51462, 10) | 0, 36571, 2) | 0;
STACKTOP = sp;
return;
}
function __ZNK11ParMovement10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$014 = 0, $10 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $23 = 0, $24 = 0, $sext = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
HEAP8[$2 >> 0] = 60;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2, 1) | 0, 51451, 10) | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$0 >> 2] | 0) + 84 >> 2] & 127]($0, $1, 1);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36571, 2) | 0;
$10 = (HEAP16[36078] | 0) + 1 << 16 >> 16;
HEAP16[36078] = $10;
$sext = HEAP32[$0 + 540 >> 2] << 16;
$13 = $sext >> 16;
if (($sext | 0) > 0) {
$15 = $0 + 528 | 0;
$$014 = 0;
$23 = 0;
do {
$24 = HEAP32[(HEAP32[$15 >> 2] | 0) + ($23 << 2) >> 2] | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$24 >> 2] | 0) + 80 >> 2] & 255]($24, $1);
$$014 = $$014 + 1 << 16 >> 16;
$23 = $$014 << 16 >> 16;
} while (($13 | 0) > ($23 | 0));
$17 = HEAP16[36078] | 0;
} else $17 = $10;
$16 = $17 + -1 << 16 >> 16;
HEAP16[36078] = $16;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, $16 << 16 >> 16);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36574, 2) | 0, 51451, 10) | 0, 36571, 2) | 0;
STACKTOP = sp;
return;
}
function __Z13HA_get_attribIilEbPK7HashAnyIPKcS2_ERT_R12AttribStatusS2_S2_($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$012$i$i$i = 0, $$01215$i$i$i = 0, $$01216$i$i$i = 0, $$2 = 0, $$sink$i$i$i = 0, $10 = 0, $11 = 0, $23 = 0, $5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$5 = sp + 16 | 0;
if (!$0) {
HEAP32[$2 >> 2] = 1;
$$2 = 0;
STACKTOP = sp;
return $$2 | 0;
}
if ($4 | 0) {
$10 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($4, HEAP32[$0 + 4 >> 2] | 0) | 0;
$11 = HEAP32[$0 >> 2] | 0;
L7 : do if ((HEAP16[$11 + ($10 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i = HEAP32[$11 + ($10 << 3) >> 2] | 0;
if (!$$01215$i$i$i) label = 9; else {
$$01216$i$i$i = $$01215$i$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($4, HEAP32[$$01216$i$i$i >> 2] | 0) | 0) break;
$$012$i$i$i = HEAP32[$$01216$i$i$i + 8 >> 2] | 0;
if (!$$012$i$i$i) {
label = 9;
break L7;
} else $$01216$i$i$i = $$012$i$i$i;
}
$$sink$i$i$i = $$01216$i$i$i + 4 | 0;
}
} else label = 9; while (0);
if ((label | 0) == 9) $$sink$i$i$i = $0 + 20 | 0;
$23 = HEAP32[$$sink$i$i$i >> 2] | 0;
if ($23 | 0) {
HEAP32[$vararg_buffer >> 2] = $5;
if ((_sscanf($23, $3, $vararg_buffer) | 0) == 1) {
HEAP32[$1 >> 2] = HEAP32[$5 >> 2];
HEAP32[$2 >> 2] = 0;
$$0 = 1;
} else {
HEAP32[$2 >> 2] = 2;
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer1 >> 2] = $4;
HEAP32[$vararg_buffer1 + 4 >> 2] = $23;
__Z7eprintfPKcz(54459, $vararg_buffer1);
$$0 = 0;
}
$$2 = $$0;
STACKTOP = sp;
return $$2 | 0;
}
}
HEAP32[$2 >> 2] = 1;
$$2 = 0;
STACKTOP = sp;
return $$2 | 0;
}
function __ZN7HashAnyI13SiGML_ElementPFvP7GestureP7XMLCellEED2Ev($0) {
$0 = $0 | 0;
var $$012 = 0, $$lcssa15 = 0, $1 = 0, $11 = 0, $15 = 0, $18 = 0, $23 = 0, $27 = 0, $3 = 0, $33 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer = sp;
$1 = HEAP32[$0 >> 2] | 0;
L1 : do if ($1 | 0) {
$3 = $0 + 4 | 0;
do if ((HEAP32[$3 >> 2] | 0) > 0) {
$$012 = 0;
$8 = $1;
while (1) {
$9 = HEAP32[$8 + ($$012 << 3) >> 2] | 0;
if (!$9) $18 = $8; else {
__THREW__ = 0;
invoke_vi(139, $9 | 0);
$11 = __THREW__;
__THREW__ = 0;
if ($11 & 1) {
label = 7;
break;
}
__ZdlPv($9);
HEAP32[(HEAP32[$0 >> 2] | 0) + ($$012 << 3) >> 2] = 0;
$18 = HEAP32[$0 >> 2] | 0;
}
HEAP16[$18 + ($$012 << 3) + 4 >> 1] = 0;
$$012 = $$012 + 1 | 0;
$8 = HEAP32[$0 >> 2] | 0;
if (($$012 | 0) >= (HEAP32[$3 >> 2] | 0)) {
label = 3;
break;
}
}
if ((label | 0) == 3) if (!$8) break L1; else {
$$lcssa15 = $8;
break;
} else if ((label | 0) == 7) {
$15 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($9);
___resumeException($15 | 0);
}
} else $$lcssa15 = $1; while (0);
_free($$lcssa15);
} while (0);
$23 = HEAP32[$0 + 8 >> 2] | 0;
HEAP32[16084] = (HEAP32[16084] | 0) + $23;
$27 = HEAP32[$0 + 24 >> 2] | 0;
HEAP32[16083] = (HEAP32[16083] | 0) + $27;
if (!0) {
STACKTOP = sp;
return;
}
$33 = HEAP32[$0 + 4 >> 2] | 0;
HEAP32[$vararg_buffer >> 2] = $0;
HEAP32[$vararg_buffer + 4 >> 2] = $33;
HEAP32[$vararg_buffer + 8 >> 2] = $27;
HEAP32[$vararg_buffer + 12 >> 2] = $23;
HEAPF64[$vararg_buffer + 16 >> 3] = ($27 | 0) == 0 ? 0.0 : +($23 | 0) * 100.0 / +($27 | 0);
__Z7eprintfPKcz(58296, $vararg_buffer);
STACKTOP = sp;
return;
}
function __ZNSt3__211__call_onceERVmPvPFvS2_E($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $11 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $21 = 0, $23 = 0, $26 = 0, $28 = 0, $30 = 0, $7 = 0, $9 = 0;
_pthread_mutex_lock(72068) | 0;
while (1) {
if ((HEAP32[$0 >> 2] | 0) != 1) break;
_pthread_cond_wait(72096, 72068) | 0;
}
do if (!(HEAP32[$0 >> 2] | 0)) {
HEAP32[$0 >> 2] = 1;
__THREW__ = 0;
invoke_ii(36, 72068) | 0;
$7 = __THREW__;
__THREW__ = 0;
if (!($7 & 1)) {
__THREW__ = 0;
invoke_vi($2 | 0, $1 | 0);
$9 = __THREW__;
__THREW__ = 0;
if (!($9 & 1)) {
__THREW__ = 0;
invoke_ii(37, 72068) | 0;
$11 = __THREW__;
__THREW__ = 0;
if (!($11 & 1)) {
HEAP32[$0 >> 2] = -1;
__THREW__ = 0;
invoke_ii(36, 72068) | 0;
$13 = __THREW__;
__THREW__ = 0;
if (!($13 & 1)) {
__THREW__ = 0;
invoke_ii(38, 72096) | 0;
$15 = __THREW__;
__THREW__ = 0;
if (!($15 & 1)) break;
}
}
}
}
$17 = ___cxa_find_matching_catch_3(0) | 0;
___cxa_begin_catch($17 | 0) | 0;
__THREW__ = 0;
invoke_ii(37, 72068) | 0;
$19 = __THREW__;
__THREW__ = 0;
if (!($19 & 1)) {
HEAP32[$0 >> 2] = 0;
__THREW__ = 0;
invoke_ii(36, 72068) | 0;
$21 = __THREW__;
__THREW__ = 0;
if (!($21 & 1)) {
__THREW__ = 0;
invoke_ii(38, 72096) | 0;
$23 = __THREW__;
__THREW__ = 0;
if (!($23 & 1)) {
__THREW__ = 0;
invoke_v(15);
__THREW__ = 0;
}
}
}
$26 = ___cxa_find_matching_catch_2() | 0;
__THREW__ = 0;
invoke_v(3);
$28 = __THREW__;
__THREW__ = 0;
if ($28 & 1) {
$30 = ___cxa_find_matching_catch_3(0) | 0;
___clang_call_terminate($30);
} else ___resumeException($26 | 0);
} else _pthread_mutex_unlock(72068) | 0; while (0);
return;
}
function __ZN7HashAnyI13SiGML_ElementPFvPvP7XMLCellEED2Ev($0) {
$0 = $0 | 0;
var $$012 = 0, $$lcssa15 = 0, $1 = 0, $11 = 0, $15 = 0, $18 = 0, $23 = 0, $27 = 0, $3 = 0, $33 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer = sp;
$1 = HEAP32[$0 >> 2] | 0;
L1 : do if ($1 | 0) {
$3 = $0 + 4 | 0;
do if ((HEAP32[$3 >> 2] | 0) > 0) {
$$012 = 0;
$8 = $1;
while (1) {
$9 = HEAP32[$8 + ($$012 << 3) >> 2] | 0;
if (!$9) $18 = $8; else {
__THREW__ = 0;
invoke_vi(140, $9 | 0);
$11 = __THREW__;
__THREW__ = 0;
if ($11 & 1) {
label = 7;
break;
}
__ZdlPv($9);
HEAP32[(HEAP32[$0 >> 2] | 0) + ($$012 << 3) >> 2] = 0;
$18 = HEAP32[$0 >> 2] | 0;
}
HEAP16[$18 + ($$012 << 3) + 4 >> 1] = 0;
$$012 = $$012 + 1 | 0;
$8 = HEAP32[$0 >> 2] | 0;
if (($$012 | 0) >= (HEAP32[$3 >> 2] | 0)) {
label = 3;
break;
}
}
if ((label | 0) == 3) if (!$8) break L1; else {
$$lcssa15 = $8;
break;
} else if ((label | 0) == 7) {
$15 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($9);
___resumeException($15 | 0);
}
} else $$lcssa15 = $1; while (0);
_free($$lcssa15);
} while (0);
$23 = HEAP32[$0 + 8 >> 2] | 0;
HEAP32[16084] = (HEAP32[16084] | 0) + $23;
$27 = HEAP32[$0 + 24 >> 2] | 0;
HEAP32[16083] = (HEAP32[16083] | 0) + $27;
if (!0) {
STACKTOP = sp;
return;
}
$33 = HEAP32[$0 + 4 >> 2] | 0;
HEAP32[$vararg_buffer >> 2] = $0;
HEAP32[$vararg_buffer + 4 >> 2] = $33;
HEAP32[$vararg_buffer + 8 >> 2] = $27;
HEAP32[$vararg_buffer + 12 >> 2] = $23;
HEAPF64[$vararg_buffer + 16 >> 3] = ($27 | 0) == 0 ? 0.0 : +($23 | 0) * 100.0 / +($27 | 0);
__Z7eprintfPKcz(58296, $vararg_buffer);
STACKTOP = sp;
return;
}
function _externalEntityContentProcessor($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$152$i = 0, $10 = 0, $13 = 0, $14 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $35 = 0, $37 = 0, $39 = 0, $42 = 0, $43 = 0, $50 = 0, $51 = 0, label = 0;
$10 = _doContent($0, 1, HEAP32[$0 + 144 >> 2] | 0, $1, $2, $3, (HEAP8[$0 + 468 >> 0] | 0) == 0 & 1) | 0;
if ($10 | 0) {
$$0 = $10;
return $$0 | 0;
}
$13 = $0 + 16 | 0;
$14 = HEAP32[$0 + 348 >> 2] | 0;
if (!$14) {
$$0 = 0;
return $$0 | 0;
} else $17 = $14;
while (1) {
$19 = (HEAP32[$17 + 24 >> 2] | 0) + 1 | 0;
$20 = $17 + 36 | 0;
$21 = HEAP32[$20 >> 2] | 0;
$22 = $21 + $19 | 0;
$23 = $17 + 4 | 0;
$24 = HEAP32[$23 >> 2] | 0;
if (($24 | 0) == ($22 | 0)) {
$$0 = 0;
label = 12;
break;
}
$26 = $17 + 8 | 0;
$27 = HEAP32[$26 >> 2] | 0;
$28 = $27 + $19 | 0;
$29 = $17 + 40 | 0;
if (($28 | 0) > ((HEAP32[$29 >> 2] | 0) - $21 | 0)) {
$35 = FUNCTION_TABLE_iii[HEAP32[$13 >> 2] & 63]($21, $28) | 0;
if (!$35) {
$$0 = 1;
label = 12;
break;
}
$37 = $17 + 12 | 0;
$39 = HEAP32[$20 >> 2] | 0;
if ((HEAP32[$37 >> 2] | 0) == ($39 | 0)) HEAP32[$37 >> 2] = $35;
$42 = $17 + 16 | 0;
$43 = HEAP32[$42 >> 2] | 0;
if ($43 | 0) HEAP32[$42 >> 2] = $35 + ($43 - $39);
HEAP32[$20 >> 2] = $35;
HEAP32[$29 >> 2] = $35 + $28;
$$152$i = $35 + $19 | 0;
$50 = HEAP32[$23 >> 2] | 0;
$51 = HEAP32[$26 >> 2] | 0;
} else {
$$152$i = $22;
$50 = $24;
$51 = $27;
}
_memcpy($$152$i | 0, $50 | 0, $51 | 0) | 0;
HEAP32[$23 >> 2] = $$152$i;
$17 = HEAP32[$17 >> 2] | 0;
if (!$17) {
$$0 = 0;
label = 12;
break;
}
}
if ((label | 0) == 12) return $$0 | 0;
return 0;
}
function __ZN11HanimAvatar11SetFaceSiteE8LocationsRK6Vector($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$sroa$0$0$copyload = 0, $11 = 0, $13 = 0, $14 = 0, $22 = f0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $tmpcast8$i$i$i$byval_copy = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$tmpcast8$i$i$i$byval_copy = sp + 24 | 0;
$4 = sp + 20 | 0;
$5 = sp + 16 | 0;
$6 = sp;
$7 = sp + 12 | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($7, $1, 0, 0, 0, 1, 0);
$$sroa$0$0$copyload = HEAP32[$7 >> 2] | 0;
$11 = HEAP32[(HEAP32[$0 + 72 >> 2] | 0) + 8 >> 2] | 0;
$13 = HEAP32[$0 + 488 >> 2] | 0;
$14 = $2 << 16 >> 16;
if ($2 << 16 >> 16 < 0) label = 3; else if ((HEAP32[$13 + 12 >> 2] | 0) > ($14 | 0)) __ZN6VectorC2ERKS_($6, (HEAP32[$13 >> 2] | 0) + ($14 * 12 | 0) | 0); else label = 3;
if ((label | 0) == 3) __ZN6VectorC2Ev($6);
$22 = Math_fround(HEAPF32[$0 + 380 >> 2]);
HEAP32[$4 >> 2] = $$sroa$0$0$copyload;
HEAP8[$tmpcast8$i$i$i$byval_copy >> 0] = HEAP8[$4 >> 0] | 0;
HEAP8[$tmpcast8$i$i$i$byval_copy + 1 >> 0] = HEAP8[$4 + 1 >> 0] | 0;
HEAP8[$tmpcast8$i$i$i$byval_copy + 2 >> 0] = HEAP8[$4 + 2 >> 0] | 0;
HEAP8[$tmpcast8$i$i$i$byval_copy + 3 >> 0] = HEAP8[$4 + 3 >> 0] | 0;
__ZN11HanimAvatar10createSiteE6SiteIDP5JointRK6Vectorf($0, $tmpcast8$i$i$i$byval_copy, $11, $6, $22) | 0;
HEAP32[$5 >> 2] = $$sroa$0$0$copyload;
HEAP8[$tmpcast8$i$i$i$byval_copy >> 0] = HEAP8[$5 >> 0] | 0;
HEAP8[$tmpcast8$i$i$i$byval_copy + 1 >> 0] = HEAP8[$5 + 1 >> 0] | 0;
HEAP8[$tmpcast8$i$i$i$byval_copy + 2 >> 0] = HEAP8[$5 + 2 >> 0] | 0;
HEAP8[$tmpcast8$i$i$i$byval_copy + 3 >> 0] = HEAP8[$5 + 3 >> 0] | 0;
__ZN11HanimAvatar13setSiteNormalE6SiteIDRK6Vectorf($0, $tmpcast8$i$i$i$byval_copy, $3, $22);
STACKTOP = sp;
return;
}
function __ZNK19TurretJointRotation13printAxesVRMLEP8_IO_FILEfss($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
$4 = $4 | 0;
var $11 = 0.0, $6 = 0, $8 = 0, $9 = 0.0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer23 = 0, $vararg_buffer9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 112 | 0;
$vararg_buffer23 = sp + 104 | 0;
$vararg_buffer12 = sp + 56 | 0;
$vararg_buffer9 = sp + 48 | 0;
$vararg_buffer = sp;
$6 = __Z12indentStringi($3 << 16 >> 16) | 0;
$8 = $4 << 16 >> 16;
if ($1 | 0) {
$9 = +$2;
$11 = +Math_fround($2 / Math_fround(5.0));
HEAP32[$vararg_buffer >> 2] = $6;
HEAP32[$vararg_buffer + 4 >> 2] = $6;
HEAP32[$vararg_buffer + 8 >> 2] = $8;
HEAPF64[$vararg_buffer + 16 >> 3] = $9;
HEAP32[$vararg_buffer + 24 >> 2] = $6;
HEAP32[$vararg_buffer + 28 >> 2] = $8;
HEAPF64[$vararg_buffer + 32 >> 3] = $11;
HEAP32[$vararg_buffer + 40 >> 2] = $6;
HEAP32[$vararg_buffer + 44 >> 2] = $6;
_fprintf($1, 13245, $vararg_buffer) | 0;
__ZNK6Vector5printEP8_IO_FILEi($0 + 8 | 0, $1, $8);
HEAP32[$vararg_buffer9 >> 2] = $6;
_fprintf($1, 13343, $vararg_buffer9) | 0;
HEAP32[$vararg_buffer12 >> 2] = $6;
HEAP32[$vararg_buffer12 + 4 >> 2] = $6;
HEAP32[$vararg_buffer12 + 8 >> 2] = $8;
HEAPF64[$vararg_buffer12 + 16 >> 3] = $9;
HEAP32[$vararg_buffer12 + 24 >> 2] = $6;
HEAP32[$vararg_buffer12 + 28 >> 2] = $8;
HEAPF64[$vararg_buffer12 + 32 >> 3] = $11;
HEAP32[$vararg_buffer12 + 40 >> 2] = $6;
HEAP32[$vararg_buffer12 + 44 >> 2] = $6;
_fprintf($1, 13245, $vararg_buffer12) | 0;
__ZNK6Vector5printEP8_IO_FILEi($0 + 20 | 0, $1, $8);
HEAP32[$vararg_buffer23 >> 2] = $6;
_fprintf($1, 13343, $vararg_buffer23) | 0;
}
if (!$6) {
STACKTOP = sp;
return;
}
_free($6);
STACKTOP = sp;
return;
}
function __ZN7HashAnyIPKcP18AbstractTimedMorphED2Ev($0) {
$0 = $0 | 0;
var $$012 = 0, $$lcssa15 = 0, $1 = 0, $11 = 0, $15 = 0, $18 = 0, $23 = 0, $27 = 0, $3 = 0, $33 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer = sp;
$1 = HEAP32[$0 >> 2] | 0;
L1 : do if ($1 | 0) {
$3 = $0 + 4 | 0;
do if ((HEAP32[$3 >> 2] | 0) > 0) {
$$012 = 0;
$8 = $1;
while (1) {
$9 = HEAP32[$8 + ($$012 << 3) >> 2] | 0;
if (!$9) $18 = $8; else {
__THREW__ = 0;
invoke_vi(146, $9 | 0);
$11 = __THREW__;
__THREW__ = 0;
if ($11 & 1) {
label = 7;
break;
}
__ZdlPv($9);
HEAP32[(HEAP32[$0 >> 2] | 0) + ($$012 << 3) >> 2] = 0;
$18 = HEAP32[$0 >> 2] | 0;
}
HEAP16[$18 + ($$012 << 3) + 4 >> 1] = 0;
$$012 = $$012 + 1 | 0;
$8 = HEAP32[$0 >> 2] | 0;
if (($$012 | 0) >= (HEAP32[$3 >> 2] | 0)) {
label = 3;
break;
}
}
if ((label | 0) == 3) if (!$8) break L1; else {
$$lcssa15 = $8;
break;
} else if ((label | 0) == 7) {
$15 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($9);
___resumeException($15 | 0);
}
} else $$lcssa15 = $1; while (0);
_free($$lcssa15);
} while (0);
$23 = HEAP32[$0 + 8 >> 2] | 0;
HEAP32[16084] = (HEAP32[16084] | 0) + $23;
$27 = HEAP32[$0 + 24 >> 2] | 0;
HEAP32[16083] = (HEAP32[16083] | 0) + $27;
if (!0) {
STACKTOP = sp;
return;
}
$33 = HEAP32[$0 + 4 >> 2] | 0;
HEAP32[$vararg_buffer >> 2] = $0;
HEAP32[$vararg_buffer + 4 >> 2] = $33;
HEAP32[$vararg_buffer + 8 >> 2] = $27;
HEAP32[$vararg_buffer + 12 >> 2] = $23;
HEAPF64[$vararg_buffer + 16 >> 3] = ($27 | 0) == 0 ? 0.0 : +($23 | 0) * 100.0 / +($27 | 0);
__Z7eprintfPKcz(58296, $vararg_buffer);
STACKTOP = sp;
return;
}
function __ZN7SSFrame9MakeEmptyEv($0) {
$0 = $0 | 0;
var $$01722 = 0, $$021 = 0, $1 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $36 = 0, $37 = 0, $4 = 0, $44 = 0, $46 = 0, $47 = 0, $5 = 0, $53 = 0, $54 = 0, $6 = 0, $9 = 0;
$1 = $0 + 4 | 0;
$2 = $0 + 8 | 0;
$4 = HEAP32[$1 >> 2] | 0;
$5 = (HEAP32[$2 >> 2] | 0) - $4 | 0;
$6 = $5 >> 2;
L1 : do if (($5 | 0) > 0) {
$$01722 = 0;
$18 = $4;
while (1) {
$19 = HEAP32[$18 + ($$01722 << 2) >> 2] | 0;
if (!$19) $25 = $18; else {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$19 >> 2] | 0) + 4 >> 2] & 255]($19);
$25 = HEAP32[$1 >> 2] | 0;
}
HEAP32[$25 + ($$01722 << 2) >> 2] = 0;
$26 = $$01722 + 1 | 0;
if (($26 | 0) >= ($6 | 0)) break L1;
$$01722 = $26;
$18 = HEAP32[$1 >> 2] | 0;
}
} while (0);
$9 = $0 + 16 | 0;
$10 = $0 + 20 | 0;
$12 = HEAP32[$9 >> 2] | 0;
$13 = (HEAP32[$10 >> 2] | 0) - $12 | 0;
$14 = $13 >> 2;
L10 : do if (($13 | 0) > 0) {
$$021 = 0;
$46 = $12;
while (1) {
$47 = HEAP32[$46 + ($$021 << 2) >> 2] | 0;
if (!$47) $53 = $46; else {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$47 >> 2] | 0) + 4 >> 2] & 255]($47);
$53 = HEAP32[$9 >> 2] | 0;
}
HEAP32[$53 + ($$021 << 2) >> 2] = 0;
$54 = $$021 + 1 | 0;
if (($54 | 0) >= ($14 | 0)) break L10;
$$021 = $54;
$46 = HEAP32[$9 >> 2] | 0;
}
} while (0);
$28 = HEAP32[$1 >> 2] | 0;
$29 = HEAP32[$2 >> 2] | 0;
if (($29 | 0) != ($28 | 0)) HEAP32[$2 >> 2] = $29 + (~(($29 + -4 - $28 | 0) >>> 2) << 2);
$36 = HEAP32[$9 >> 2] | 0;
$37 = HEAP32[$10 >> 2] | 0;
if (($37 | 0) == ($36 | 0)) {
$44 = $0 + 40 | 0;
HEAP32[$44 >> 2] = 0;
return;
}
HEAP32[$10 >> 2] = $37 + (~(($37 + -4 - $36 | 0) >>> 2) << 2);
$44 = $0 + 40 | 0;
HEAP32[$44 >> 2] = 0;
return;
}
function __ZN13DynamicArray0IfE6resizeEi($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$020 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $35 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
$3 = HEAP32[$0 >> 2] | 0;
if ($3 | 0) {
_free($3);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
STACKTOP = sp;
return;
}
$7 = $0 + 8 | 0;
$8 = HEAP32[$7 >> 2] | 0;
if (($8 | 0) == ($1 | 0)) {
STACKTOP = sp;
return;
}
$11 = _malloc($1 << 2) | 0;
if (!$11) if (($8 | 0) < ($1 | 0)) {
HEAP32[$vararg_buffer >> 2] = $8;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
__Z7eprintfPKcz(44978, $vararg_buffer);
$14 = ___cxa_allocate_exception(4) | 0;
HEAP32[$14 >> 2] = 1;
___cxa_throw($14 | 0, 32, 0);
} else {
STACKTOP = sp;
return;
}
$15 = $0 + 12 | 0;
$16 = HEAP32[$15 >> 2] | 0;
if (($16 | 0) > ($1 | 0)) {
HEAP32[$15 >> 2] = $1;
$19 = $1;
} else $19 = $16;
$20 = HEAP32[$0 >> 2] | 0;
if (($19 | 0) > 0) {
$$020 = 0;
do {
HEAP32[$11 + ($$020 << 2) >> 2] = HEAP32[$20 + ($$020 << 2) >> 2];
$$020 = $$020 + 1 | 0;
} while (($$020 | 0) < ($19 | 0));
label = 14;
} else if (!$20) $28 = $19; else label = 14;
if ((label | 0) == 14) {
_free($20);
HEAP32[$0 >> 2] = 0;
$28 = HEAP32[$15 >> 2] | 0;
}
HEAP32[$0 >> 2] = $11;
$27 = $1 - $28 | 0;
if (($27 | 0) > 0) {
$30 = $0 + 16 | 0;
HEAP32[$11 + ($28 << 2) >> 2] = HEAP32[$30 >> 2];
if (($27 | 0) != 1) {
$35 = 1;
do {
HEAP32[(HEAP32[$0 >> 2] | 0) + ($35 + $28 << 2) >> 2] = HEAP32[$30 >> 2];
$35 = $35 + 1 | 0;
} while (($35 | 0) != ($27 | 0));
}
}
HEAP32[$7 >> 2] = $1;
STACKTOP = sp;
return;
}
function __ZN7HashAnyIKPKc10AvatarTypeED2Ev($0) {
$0 = $0 | 0;
var $$012 = 0, $$lcssa15 = 0, $1 = 0, $11 = 0, $15 = 0, $18 = 0, $23 = 0, $27 = 0, $3 = 0, $33 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer = sp;
$1 = HEAP32[$0 >> 2] | 0;
L1 : do if ($1 | 0) {
$3 = $0 + 4 | 0;
do if ((HEAP32[$3 >> 2] | 0) > 0) {
$$012 = 0;
$8 = $1;
while (1) {
$9 = HEAP32[$8 + ($$012 << 3) >> 2] | 0;
if (!$9) $18 = $8; else {
__THREW__ = 0;
invoke_vi(117, $9 | 0);
$11 = __THREW__;
__THREW__ = 0;
if ($11 & 1) {
label = 7;
break;
}
__ZdlPv($9);
HEAP32[(HEAP32[$0 >> 2] | 0) + ($$012 << 3) >> 2] = 0;
$18 = HEAP32[$0 >> 2] | 0;
}
HEAP16[$18 + ($$012 << 3) + 4 >> 1] = 0;
$$012 = $$012 + 1 | 0;
$8 = HEAP32[$0 >> 2] | 0;
if (($$012 | 0) >= (HEAP32[$3 >> 2] | 0)) {
label = 3;
break;
}
}
if ((label | 0) == 3) if (!$8) break L1; else {
$$lcssa15 = $8;
break;
} else if ((label | 0) == 7) {
$15 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($9);
___resumeException($15 | 0);
}
} else $$lcssa15 = $1; while (0);
_free($$lcssa15);
} while (0);
$23 = HEAP32[$0 + 8 >> 2] | 0;
HEAP32[16084] = (HEAP32[16084] | 0) + $23;
$27 = HEAP32[$0 + 24 >> 2] | 0;
HEAP32[16083] = (HEAP32[16083] | 0) + $27;
if (!0) {
STACKTOP = sp;
return;
}
$33 = HEAP32[$0 + 4 >> 2] | 0;
HEAP32[$vararg_buffer >> 2] = $0;
HEAP32[$vararg_buffer + 4 >> 2] = $33;
HEAP32[$vararg_buffer + 8 >> 2] = $27;
HEAP32[$vararg_buffer + 12 >> 2] = $23;
HEAPF64[$vararg_buffer + 16 >> 3] = ($27 | 0) == 0 ? 0.0 : +($23 | 0) * 100.0 / +($27 | 0);
__Z7eprintfPKcz(58296, $vararg_buffer);
STACKTOP = sp;
return;
}
function __ZN7HashAnyIK6SiteIDP4SiteED2Ev($0) {
$0 = $0 | 0;
var $$012 = 0, $$lcssa15 = 0, $1 = 0, $11 = 0, $15 = 0, $18 = 0, $23 = 0, $27 = 0, $3 = 0, $33 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer = sp;
$1 = HEAP32[$0 >> 2] | 0;
L1 : do if ($1 | 0) {
$3 = $0 + 4 | 0;
do if ((HEAP32[$3 >> 2] | 0) > 0) {
$$012 = 0;
$8 = $1;
while (1) {
$9 = HEAP32[$8 + ($$012 << 3) >> 2] | 0;
if (!$9) $18 = $8; else {
__THREW__ = 0;
invoke_vi(118, $9 | 0);
$11 = __THREW__;
__THREW__ = 0;
if ($11 & 1) {
label = 7;
break;
}
__ZdlPv($9);
HEAP32[(HEAP32[$0 >> 2] | 0) + ($$012 << 3) >> 2] = 0;
$18 = HEAP32[$0 >> 2] | 0;
}
HEAP16[$18 + ($$012 << 3) + 4 >> 1] = 0;
$$012 = $$012 + 1 | 0;
$8 = HEAP32[$0 >> 2] | 0;
if (($$012 | 0) >= (HEAP32[$3 >> 2] | 0)) {
label = 3;
break;
}
}
if ((label | 0) == 3) if (!$8) break L1; else {
$$lcssa15 = $8;
break;
} else if ((label | 0) == 7) {
$15 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($9);
___resumeException($15 | 0);
}
} else $$lcssa15 = $1; while (0);
_free($$lcssa15);
} while (0);
$23 = HEAP32[$0 + 8 >> 2] | 0;
HEAP32[16084] = (HEAP32[16084] | 0) + $23;
$27 = HEAP32[$0 + 24 >> 2] | 0;
HEAP32[16083] = (HEAP32[16083] | 0) + $27;
if (!0) {
STACKTOP = sp;
return;
}
$33 = HEAP32[$0 + 4 >> 2] | 0;
HEAP32[$vararg_buffer >> 2] = $0;
HEAP32[$vararg_buffer + 4 >> 2] = $33;
HEAP32[$vararg_buffer + 8 >> 2] = $27;
HEAP32[$vararg_buffer + 12 >> 2] = $23;
HEAPF64[$vararg_buffer + 16 >> 3] = ($27 | 0) == 0 ? 0.0 : +($23 | 0) * 100.0 / +($27 | 0);
__Z7eprintfPKcz(58296, $vararg_buffer);
STACKTOP = sp;
return;
}
function _contentProcessor($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$152$i = 0, $10 = 0, $13 = 0, $14 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $35 = 0, $37 = 0, $39 = 0, $42 = 0, $43 = 0, $50 = 0, $51 = 0, label = 0;
$10 = _doContent($0, 0, HEAP32[$0 + 144 >> 2] | 0, $1, $2, $3, (HEAP8[$0 + 468 >> 0] | 0) == 0 & 1) | 0;
if ($10 | 0) {
$$0 = $10;
return $$0 | 0;
}
$13 = $0 + 16 | 0;
$14 = HEAP32[$0 + 348 >> 2] | 0;
if (!$14) {
$$0 = 0;
return $$0 | 0;
} else $17 = $14;
while (1) {
$19 = (HEAP32[$17 + 24 >> 2] | 0) + 1 | 0;
$20 = $17 + 36 | 0;
$21 = HEAP32[$20 >> 2] | 0;
$22 = $21 + $19 | 0;
$23 = $17 + 4 | 0;
$24 = HEAP32[$23 >> 2] | 0;
if (($24 | 0) == ($22 | 0)) {
$$0 = 0;
label = 12;
break;
}
$26 = $17 + 8 | 0;
$27 = HEAP32[$26 >> 2] | 0;
$28 = $27 + $19 | 0;
$29 = $17 + 40 | 0;
if (($28 | 0) > ((HEAP32[$29 >> 2] | 0) - $21 | 0)) {
$35 = FUNCTION_TABLE_iii[HEAP32[$13 >> 2] & 63]($21, $28) | 0;
if (!$35) {
$$0 = 1;
label = 12;
break;
}
$37 = $17 + 12 | 0;
$39 = HEAP32[$20 >> 2] | 0;
if ((HEAP32[$37 >> 2] | 0) == ($39 | 0)) HEAP32[$37 >> 2] = $35;
$42 = $17 + 16 | 0;
$43 = HEAP32[$42 >> 2] | 0;
if ($43 | 0) HEAP32[$42 >> 2] = $35 + ($43 - $39);
HEAP32[$20 >> 2] = $35;
HEAP32[$29 >> 2] = $35 + $28;
$$152$i = $35 + $19 | 0;
$50 = HEAP32[$23 >> 2] | 0;
$51 = HEAP32[$26 >> 2] | 0;
} else {
$$152$i = $22;
$50 = $24;
$51 = $27;
}
_memcpy($$152$i | 0, $50 | 0, $51 | 0) | 0;
HEAP32[$23 >> 2] = $$152$i;
$17 = HEAP32[$17 >> 2] | 0;
if (!$17) {
$$0 = 0;
label = 12;
break;
}
}
if ((label | 0) == 12) return $$0 | 0;
return 0;
}
function __ZN7HashAnyIPKcPS_IS1_iEED2Ev($0) {
$0 = $0 | 0;
var $$012 = 0, $$lcssa15 = 0, $1 = 0, $11 = 0, $15 = 0, $18 = 0, $23 = 0, $27 = 0, $3 = 0, $33 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer = sp;
$1 = HEAP32[$0 >> 2] | 0;
L1 : do if ($1 | 0) {
$3 = $0 + 4 | 0;
do if ((HEAP32[$3 >> 2] | 0) > 0) {
$$012 = 0;
$8 = $1;
while (1) {
$9 = HEAP32[$8 + ($$012 << 3) >> 2] | 0;
if (!$9) $18 = $8; else {
__THREW__ = 0;
invoke_vi(150, $9 | 0);
$11 = __THREW__;
__THREW__ = 0;
if ($11 & 1) {
label = 7;
break;
}
__ZdlPv($9);
HEAP32[(HEAP32[$0 >> 2] | 0) + ($$012 << 3) >> 2] = 0;
$18 = HEAP32[$0 >> 2] | 0;
}
HEAP16[$18 + ($$012 << 3) + 4 >> 1] = 0;
$$012 = $$012 + 1 | 0;
$8 = HEAP32[$0 >> 2] | 0;
if (($$012 | 0) >= (HEAP32[$3 >> 2] | 0)) {
label = 3;
break;
}
}
if ((label | 0) == 3) if (!$8) break L1; else {
$$lcssa15 = $8;
break;
} else if ((label | 0) == 7) {
$15 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($9);
___resumeException($15 | 0);
}
} else $$lcssa15 = $1; while (0);
_free($$lcssa15);
} while (0);
$23 = HEAP32[$0 + 8 >> 2] | 0;
HEAP32[16084] = (HEAP32[16084] | 0) + $23;
$27 = HEAP32[$0 + 24 >> 2] | 0;
HEAP32[16083] = (HEAP32[16083] | 0) + $27;
if (!0) {
STACKTOP = sp;
return;
}
$33 = HEAP32[$0 + 4 >> 2] | 0;
HEAP32[$vararg_buffer >> 2] = $0;
HEAP32[$vararg_buffer + 4 >> 2] = $33;
HEAP32[$vararg_buffer + 8 >> 2] = $27;
HEAP32[$vararg_buffer + 12 >> 2] = $23;
HEAPF64[$vararg_buffer + 16 >> 3] = ($27 | 0) == 0 ? 0.0 : +($23 | 0) * 100.0 / +($27 | 0);
__Z7eprintfPKcz(58296, $vararg_buffer);
STACKTOP = sp;
return;
}
function __ZN7HashAnyIPKcP7GestureED2Ev($0) {
$0 = $0 | 0;
var $$012 = 0, $$lcssa15 = 0, $1 = 0, $11 = 0, $15 = 0, $18 = 0, $23 = 0, $27 = 0, $3 = 0, $33 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer = sp;
$1 = HEAP32[$0 >> 2] | 0;
L1 : do if ($1 | 0) {
$3 = $0 + 4 | 0;
do if ((HEAP32[$3 >> 2] | 0) > 0) {
$$012 = 0;
$8 = $1;
while (1) {
$9 = HEAP32[$8 + ($$012 << 3) >> 2] | 0;
if (!$9) $18 = $8; else {
__THREW__ = 0;
invoke_vi(175, $9 | 0);
$11 = __THREW__;
__THREW__ = 0;
if ($11 & 1) {
label = 7;
break;
}
__ZdlPv($9);
HEAP32[(HEAP32[$0 >> 2] | 0) + ($$012 << 3) >> 2] = 0;
$18 = HEAP32[$0 >> 2] | 0;
}
HEAP16[$18 + ($$012 << 3) + 4 >> 1] = 0;
$$012 = $$012 + 1 | 0;
$8 = HEAP32[$0 >> 2] | 0;
if (($$012 | 0) >= (HEAP32[$3 >> 2] | 0)) {
label = 3;
break;
}
}
if ((label | 0) == 3) if (!$8) break L1; else {
$$lcssa15 = $8;
break;
} else if ((label | 0) == 7) {
$15 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($9);
___resumeException($15 | 0);
}
} else $$lcssa15 = $1; while (0);
_free($$lcssa15);
} while (0);
$23 = HEAP32[$0 + 8 >> 2] | 0;
HEAP32[16084] = (HEAP32[16084] | 0) + $23;
$27 = HEAP32[$0 + 24 >> 2] | 0;
HEAP32[16083] = (HEAP32[16083] | 0) + $27;
if (!0) {
STACKTOP = sp;
return;
}
$33 = HEAP32[$0 + 4 >> 2] | 0;
HEAP32[$vararg_buffer >> 2] = $0;
HEAP32[$vararg_buffer + 4 >> 2] = $33;
HEAP32[$vararg_buffer + 8 >> 2] = $27;
HEAP32[$vararg_buffer + 12 >> 2] = $23;
HEAPF64[$vararg_buffer + 16 >> 3] = ($27 | 0) == 0 ? 0.0 : +($23 | 0) * 100.0 / +($27 | 0);
__Z7eprintfPKcz(58296, $vararg_buffer);
STACKTOP = sp;
return;
}
function __ZNK12ThumbBending10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$pre = 0, $2 = 0, $22 = 0, $24 = 0, $27 = 0, $30 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
$$pre = $0 + 4 | 0;
if (!(Math_fround(HEAPF32[$0 >> 2]) != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$$pre >> 2]) != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$0 + 8 >> 2]) != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$0 + 12 >> 2]) != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$0 + 16 >> 2]) != Math_fround(-100.0))) {
STACKTOP = sp;
return;
}
HEAP32[$1 + (HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0) + 8 >> 2] = 2;
$22 = __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEf($1, Math_fround(HEAPF32[$0 >> 2])) | 0;
HEAP8[$2 >> 0] = 32;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($22, $2, 1) | 0;
$24 = __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEf($1, Math_fround(HEAPF32[$$pre >> 2])) | 0;
HEAP8[$2 >> 0] = 32;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($24, $2, 1) | 0;
$27 = __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEf($1, Math_fround(HEAPF32[$0 + 8 >> 2])) | 0;
HEAP8[$2 >> 0] = 32;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($27, $2, 1) | 0;
$30 = __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEf($1, Math_fround(HEAPF32[$0 + 12 >> 2])) | 0;
HEAP8[$2 >> 0] = 32;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($30, $2, 1) | 0;
__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEf($1, Math_fround(HEAPF32[$0 + 16 >> 2])) | 0;
STACKTOP = sp;
return;
}
function __ZN7HashAnyIPKc6SiteIDED2Ev($0) {
$0 = $0 | 0;
var $$012 = 0, $$lcssa15 = 0, $1 = 0, $11 = 0, $15 = 0, $18 = 0, $23 = 0, $27 = 0, $3 = 0, $33 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer = sp;
$1 = HEAP32[$0 >> 2] | 0;
L1 : do if ($1 | 0) {
$3 = $0 + 4 | 0;
do if ((HEAP32[$3 >> 2] | 0) > 0) {
$$012 = 0;
$8 = $1;
while (1) {
$9 = HEAP32[$8 + ($$012 << 3) >> 2] | 0;
if (!$9) $18 = $8; else {
__THREW__ = 0;
invoke_vi(116, $9 | 0);
$11 = __THREW__;
__THREW__ = 0;
if ($11 & 1) {
label = 7;
break;
}
__ZdlPv($9);
HEAP32[(HEAP32[$0 >> 2] | 0) + ($$012 << 3) >> 2] = 0;
$18 = HEAP32[$0 >> 2] | 0;
}
HEAP16[$18 + ($$012 << 3) + 4 >> 1] = 0;
$$012 = $$012 + 1 | 0;
$8 = HEAP32[$0 >> 2] | 0;
if (($$012 | 0) >= (HEAP32[$3 >> 2] | 0)) {
label = 3;
break;
}
}
if ((label | 0) == 3) if (!$8) break L1; else {
$$lcssa15 = $8;
break;
} else if ((label | 0) == 7) {
$15 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($9);
___resumeException($15 | 0);
}
} else $$lcssa15 = $1; while (0);
_free($$lcssa15);
} while (0);
$23 = HEAP32[$0 + 8 >> 2] | 0;
HEAP32[16084] = (HEAP32[16084] | 0) + $23;
$27 = HEAP32[$0 + 24 >> 2] | 0;
HEAP32[16083] = (HEAP32[16083] | 0) + $27;
if (!0) {
STACKTOP = sp;
return;
}
$33 = HEAP32[$0 + 4 >> 2] | 0;
HEAP32[$vararg_buffer >> 2] = $0;
HEAP32[$vararg_buffer + 4 >> 2] = $33;
HEAP32[$vararg_buffer + 8 >> 2] = $27;
HEAP32[$vararg_buffer + 12 >> 2] = $23;
HEAPF64[$vararg_buffer + 16 >> 3] = ($27 | 0) == 0 ? 0.0 : +($23 | 0) * 100.0 / +($27 | 0);
__Z7eprintfPKcz(58296, $vararg_buffer);
STACKTOP = sp;
return;
}
function __ZNK10ZigzagInfo16zigzagTrajectoryER6Vectorf($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
var $$$i = f0, $$27$i = f0, $$3$i = f0, $10 = f0, $11 = 0, $12 = f0, $15 = f0, $16 = 0, $17 = 0, $19 = f0, $21 = 0, $23 = 0, $24 = 0, $26 = f0, $27 = f0, $28 = f0, $29 = f0, $30 = f0, $37 = f0, $6 = f0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer = sp;
$6 = Math_fround(Math_fround(Math_fround(1.0) - $2) * Math_fround(HEAPF32[$0 + 16 >> 2]));
$10 = Math_fround($6 + Math_fround(Math_fround(HEAPF32[$0 + 20 >> 2]) * $2));
$11 = $0 + 4 | 0;
$12 = Math_fround($2 * Math_fround(4.0));
$15 = Math_fround($12 * Math_fround(HEAPF32[$0 + 24 >> 2]));
$16 = ~~$15;
$17 = $16 << 16 >> 16;
$19 = Math_fround($15 - Math_fround($16 << 16 >> 16));
$21 = (($17 | 0) % 2 | 0 | 0) == 1;
$23 = (($17 | 0) % 4 | 0 | 0) > 1;
$24 = HEAP32[$0 >> 2] | 0;
$26 = Math_fround(Math_fround(1.0) - $19);
if (($24 | 0) == 1) {
$$$i = $21 ? $26 : $19;
$27 = Math_fround(-$$$i);
$$3$i = $23 ? $27 : $$$i;
} else {
$$27$i = $21 ? $19 : $26;
$28 = Math_fround($$27$i * $$27$i);
$29 = Math_fround($28 + Math_fround(-1.0));
$30 = Math_fround(Math_fround(1.0) - $28);
$$3$i = Math_fround(($23 ? $29 : $30) * Math_fround(.800000011));
}
if (!0) {
$37 = Math_fround($10 * $$3$i);
__ZN6Vector8setScaleERKS_f($1, $11, $37);
STACKTOP = sp;
return;
}
HEAP32[$vararg_buffer >> 2] = $24;
HEAPF64[$vararg_buffer + 8 >> 3] = +$2;
HEAP32[$vararg_buffer + 16 >> 2] = $21 ? 70 : 32;
HEAP32[$vararg_buffer + 20 >> 2] = $23 ? 78 : 32;
HEAPF64[$vararg_buffer + 24 >> 3] = +$$3$i;
__Z7eprintfPKcz(37305, $vararg_buffer);
$37 = Math_fround($10 * $$3$i);
__ZN6Vector8setScaleERKS_f($1, $11, $37);
STACKTOP = sp;
return;
}
function __ZN7HashAnyIPKcS1_ED2Ev($0) {
$0 = $0 | 0;
var $$012 = 0, $$lcssa15 = 0, $1 = 0, $11 = 0, $15 = 0, $18 = 0, $23 = 0, $27 = 0, $3 = 0, $33 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer = sp;
$1 = HEAP32[$0 >> 2] | 0;
L1 : do if ($1 | 0) {
$3 = $0 + 4 | 0;
do if ((HEAP32[$3 >> 2] | 0) > 0) {
$$012 = 0;
$8 = $1;
while (1) {
$9 = HEAP32[$8 + ($$012 << 3) >> 2] | 0;
if (!$9) $18 = $8; else {
__THREW__ = 0;
invoke_vi(115, $9 | 0);
$11 = __THREW__;
__THREW__ = 0;
if ($11 & 1) {
label = 7;
break;
}
__ZdlPv($9);
HEAP32[(HEAP32[$0 >> 2] | 0) + ($$012 << 3) >> 2] = 0;
$18 = HEAP32[$0 >> 2] | 0;
}
HEAP16[$18 + ($$012 << 3) + 4 >> 1] = 0;
$$012 = $$012 + 1 | 0;
$8 = HEAP32[$0 >> 2] | 0;
if (($$012 | 0) >= (HEAP32[$3 >> 2] | 0)) {
label = 3;
break;
}
}
if ((label | 0) == 3) if (!$8) break L1; else {
$$lcssa15 = $8;
break;
} else if ((label | 0) == 7) {
$15 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($9);
___resumeException($15 | 0);
}
} else $$lcssa15 = $1; while (0);
_free($$lcssa15);
} while (0);
$23 = HEAP32[$0 + 8 >> 2] | 0;
HEAP32[16084] = (HEAP32[16084] | 0) + $23;
$27 = HEAP32[$0 + 24 >> 2] | 0;
HEAP32[16083] = (HEAP32[16083] | 0) + $27;
if (!0) {
STACKTOP = sp;
return;
}
$33 = HEAP32[$0 + 4 >> 2] | 0;
HEAP32[$vararg_buffer >> 2] = $0;
HEAP32[$vararg_buffer + 4 >> 2] = $33;
HEAP32[$vararg_buffer + 8 >> 2] = $27;
HEAP32[$vararg_buffer + 12 >> 2] = $23;
HEAPF64[$vararg_buffer + 16 >> 3] = ($27 | 0) == 0 ? 0.0 : +($23 | 0) * 100.0 / +($27 | 0);
__Z7eprintfPKcz(58296, $vararg_buffer);
STACKTOP = sp;
return;
}
function __ZN7HashAnyIPKciED2Ev($0) {
$0 = $0 | 0;
var $$012 = 0, $$lcssa15 = 0, $1 = 0, $11 = 0, $15 = 0, $18 = 0, $23 = 0, $27 = 0, $3 = 0, $33 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer = sp;
$1 = HEAP32[$0 >> 2] | 0;
L1 : do if ($1 | 0) {
$3 = $0 + 4 | 0;
do if ((HEAP32[$3 >> 2] | 0) > 0) {
$$012 = 0;
$8 = $1;
while (1) {
$9 = HEAP32[$8 + ($$012 << 3) >> 2] | 0;
if (!$9) $18 = $8; else {
__THREW__ = 0;
invoke_vi(94, $9 | 0);
$11 = __THREW__;
__THREW__ = 0;
if ($11 & 1) {
label = 7;
break;
}
__ZdlPv($9);
HEAP32[(HEAP32[$0 >> 2] | 0) + ($$012 << 3) >> 2] = 0;
$18 = HEAP32[$0 >> 2] | 0;
}
HEAP16[$18 + ($$012 << 3) + 4 >> 1] = 0;
$$012 = $$012 + 1 | 0;
$8 = HEAP32[$0 >> 2] | 0;
if (($$012 | 0) >= (HEAP32[$3 >> 2] | 0)) {
label = 3;
break;
}
}
if ((label | 0) == 3) if (!$8) break L1; else {
$$lcssa15 = $8;
break;
} else if ((label | 0) == 7) {
$15 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($9);
___resumeException($15 | 0);
}
} else $$lcssa15 = $1; while (0);
_free($$lcssa15);
} while (0);
$23 = HEAP32[$0 + 8 >> 2] | 0;
HEAP32[16084] = (HEAP32[16084] | 0) + $23;
$27 = HEAP32[$0 + 24 >> 2] | 0;
HEAP32[16083] = (HEAP32[16083] | 0) + $27;
if (!0) {
STACKTOP = sp;
return;
}
$33 = HEAP32[$0 + 4 >> 2] | 0;
HEAP32[$vararg_buffer >> 2] = $0;
HEAP32[$vararg_buffer + 4 >> 2] = $33;
HEAP32[$vararg_buffer + 8 >> 2] = $27;
HEAP32[$vararg_buffer + 12 >> 2] = $23;
HEAPF64[$vararg_buffer + 16 >> 3] = ($27 | 0) == 0 ? 0.0 : +($23 | 0) * 100.0 / +($27 | 0);
__Z7eprintfPKcz(58296, $vararg_buffer);
STACKTOP = sp;
return;
}
function __ZN7HashAnyIiiED2Ev($0) {
$0 = $0 | 0;
var $$012 = 0, $$lcssa15 = 0, $1 = 0, $11 = 0, $15 = 0, $18 = 0, $23 = 0, $27 = 0, $3 = 0, $33 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer = sp;
$1 = HEAP32[$0 >> 2] | 0;
L1 : do if ($1 | 0) {
$3 = $0 + 4 | 0;
do if ((HEAP32[$3 >> 2] | 0) > 0) {
$$012 = 0;
$8 = $1;
while (1) {
$9 = HEAP32[$8 + ($$012 << 3) >> 2] | 0;
if (!$9) $18 = $8; else {
__THREW__ = 0;
invoke_vi(148, $9 | 0);
$11 = __THREW__;
__THREW__ = 0;
if ($11 & 1) {
label = 7;
break;
}
__ZdlPv($9);
HEAP32[(HEAP32[$0 >> 2] | 0) + ($$012 << 3) >> 2] = 0;
$18 = HEAP32[$0 >> 2] | 0;
}
HEAP16[$18 + ($$012 << 3) + 4 >> 1] = 0;
$$012 = $$012 + 1 | 0;
$8 = HEAP32[$0 >> 2] | 0;
if (($$012 | 0) >= (HEAP32[$3 >> 2] | 0)) {
label = 3;
break;
}
}
if ((label | 0) == 3) if (!$8) break L1; else {
$$lcssa15 = $8;
break;
} else if ((label | 0) == 7) {
$15 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($9);
___resumeException($15 | 0);
}
} else $$lcssa15 = $1; while (0);
_free($$lcssa15);
} while (0);
$23 = HEAP32[$0 + 8 >> 2] | 0;
HEAP32[16084] = (HEAP32[16084] | 0) + $23;
$27 = HEAP32[$0 + 24 >> 2] | 0;
HEAP32[16083] = (HEAP32[16083] | 0) + $27;
if (!0) {
STACKTOP = sp;
return;
}
$33 = HEAP32[$0 + 4 >> 2] | 0;
HEAP32[$vararg_buffer >> 2] = $0;
HEAP32[$vararg_buffer + 4 >> 2] = $33;
HEAP32[$vararg_buffer + 8 >> 2] = $27;
HEAP32[$vararg_buffer + 12 >> 2] = $23;
HEAPF64[$vararg_buffer + 16 >> 3] = ($27 | 0) == 0 ? 0.0 : +($23 | 0) * 100.0 / +($27 | 0);
__Z7eprintfPKcz(58296, $vararg_buffer);
STACKTOP = sp;
return;
}
function __ZN14TwoArmAnimatorD2Ev($0) {
$0 = $0 | 0;
var $$0 = 0, $$02 = 0, $1 = 0, $11 = 0, $14 = 0, $17 = 0, $20 = 0, $22 = 0, $25 = 0, $27 = 0, $28 = 0, $3 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0;
$1 = $0 + 7128 | 0;
__THREW__ = 0;
invoke_vi(101, $0 + 7240 | 0);
$3 = __THREW__;
__THREW__ = 0;
do if ($3 & 1) {
$7 = ___cxa_find_matching_catch_2() | 0;
$8 = tempRet0;
__THREW__ = 0;
invoke_vi(101, $1 | 0);
$9 = __THREW__;
__THREW__ = 0;
if ($9 & 1) {
$11 = ___cxa_find_matching_catch_3(0) | 0;
___clang_call_terminate($11);
} else {
$eh$lpad$body$index2Z2D = $8;
$eh$lpad$body$indexZ2D = $7;
label = 8;
}
} else {
__THREW__ = 0;
invoke_vi(101, $1 | 0);
$5 = __THREW__;
__THREW__ = 0;
if ($5 & 1) {
$17 = ___cxa_find_matching_catch_2() | 0;
$eh$lpad$body$index2Z2D = tempRet0;
$eh$lpad$body$indexZ2D = $17;
label = 8;
break;
}
__THREW__ = 0;
invoke_vi(103, $0 + 3572 | 0);
$14 = __THREW__;
__THREW__ = 0;
if ($14 & 1) {
$22 = ___cxa_find_matching_catch_2() | 0;
$$0 = tempRet0;
$$02 = $22;
break;
} else {
__ZN14OneArmAnimatorD2Ev($0 + 16 | 0);
return;
}
} while (0);
if ((label | 0) == 8) {
__THREW__ = 0;
invoke_vi(103, $0 + 3572 | 0);
$20 = __THREW__;
__THREW__ = 0;
if ($20 & 1) {
$27 = ___cxa_find_matching_catch_3(0) | 0;
$28 = tempRet0;
___clang_call_terminate($27);
} else {
$$0 = $eh$lpad$body$index2Z2D;
$$02 = $eh$lpad$body$indexZ2D;
}
}
__THREW__ = 0;
invoke_vi(103, $0 + 16 | 0);
$25 = __THREW__;
__THREW__ = 0;
if ($25 & 1) {
$27 = ___cxa_find_matching_catch_3(0) | 0;
$28 = tempRet0;
___clang_call_terminate($27);
} else ___resumeException($$02 | 0);
}
function __ZN10Direction213setFromStringEPKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$010 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = f0, $19 = 0, $2 = 0, $20 = f0, $21 = 0, $23 = 0, $24 = 0, $3 = 0, $6 = 0, $9 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$2 = sp + 12 | 0;
$3 = sp + 8 | 0;
if (!$1) {
HEAPF32[$0 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 4 >> 2] = Math_fround(0.0);
STACKTOP = sp;
return;
}
HEAP32[$2 >> 2] = 0;
HEAP32[$3 >> 2] = 0;
$6 = HEAP8[$1 >> 0] | 0;
L5 : do if (($6 + -97 & 255) < 26) {
$$010 = $1;
$11 = 0;
$14 = 0;
$9 = $6;
while (1) {
switch ($9 << 24 >> 24 | 0) {
case 108:
{
$10 = $11 + 1 | 0;
HEAP32[$2 >> 2] = $10;
$23 = $10;
$24 = $14;
break;
}
case 114:
{
$12 = $11 + -1 | 0;
HEAP32[$2 >> 2] = $12;
$23 = $12;
$24 = $14;
break;
}
case 117:
{
$13 = $14 + 1 | 0;
HEAP32[$3 >> 2] = $13;
$23 = $11;
$24 = $13;
break;
}
case 100:
{
$15 = $14 + -1 | 0;
HEAP32[$3 >> 2] = $15;
$23 = $11;
$24 = $15;
break;
}
default:
{
$23 = $11;
$24 = $14;
}
}
$$010 = $$010 + 1 | 0;
$9 = HEAP8[$$010 >> 0] | 0;
if (!($9 << 24 >> 24)) {
$19 = $23;
$21 = $24;
break L5;
} else {
$11 = $23;
$14 = $24;
}
}
} else {
HEAP32[$vararg_buffer >> 2] = $2;
HEAP32[$vararg_buffer + 4 >> 2] = $3;
_sscanf($1, 53530, $vararg_buffer) | 0;
$19 = HEAP32[$2 >> 2] | 0;
$21 = HEAP32[$3 >> 2] | 0;
} while (0);
$18 = Math_fround($19 | 0);
HEAPF32[$0 >> 2] = $18;
$20 = Math_fround($21 | 0);
HEAPF32[$0 + 4 >> 2] = $20;
STACKTOP = sp;
return;
}
function __ZN13DynamicArray1IPS_I15AtomicNonmanualEE6resizeEi($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$020 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
$3 = HEAP32[$0 >> 2] | 0;
if ($3 | 0) {
_free($3);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
STACKTOP = sp;
return;
}
$7 = $0 + 8 | 0;
$8 = HEAP32[$7 >> 2] | 0;
if (($8 | 0) == ($1 | 0)) {
STACKTOP = sp;
return;
}
$11 = _malloc($1 << 2) | 0;
if (!$11) if (($8 | 0) < ($1 | 0)) {
HEAP32[$vararg_buffer >> 2] = $8;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
__Z7eprintfPKcz(47403, $vararg_buffer);
$14 = ___cxa_allocate_exception(4) | 0;
HEAP32[$14 >> 2] = 1;
___cxa_throw($14 | 0, 32, 0);
} else {
STACKTOP = sp;
return;
}
$15 = $0 + 12 | 0;
$16 = HEAP32[$15 >> 2] | 0;
if (($16 | 0) > ($1 | 0)) {
HEAP32[$15 >> 2] = $1;
$19 = $1;
} else $19 = $16;
$20 = HEAP32[$0 >> 2] | 0;
if (($19 | 0) > 0) {
$$020 = 0;
do {
HEAP32[$11 + ($$020 << 2) >> 2] = HEAP32[$20 + ($$020 << 2) >> 2];
$$020 = $$020 + 1 | 0;
} while (($$020 | 0) < ($19 | 0));
label = 14;
} else if (!$20) $28 = $19; else label = 14;
if ((label | 0) == 14) {
_free($20);
HEAP32[$0 >> 2] = 0;
$28 = HEAP32[$15 >> 2] | 0;
}
HEAP32[$0 >> 2] = $11;
$27 = $1 - $28 | 0;
if (($27 | 0) > 0) {
HEAP32[$11 + ($28 << 2) >> 2] = 0;
if (($27 | 0) != 1) {
$32 = 1;
do {
HEAP32[(HEAP32[$0 >> 2] | 0) + ($32 + $28 << 2) >> 2] = 0;
$32 = $32 + 1 | 0;
} while (($32 | 0) != ($27 | 0));
}
}
HEAP32[$7 >> 2] = $1;
STACKTOP = sp;
return;
}
function __ZN13DynamicArray1IP18AbstractTimedMorphE6resizeEi($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$020 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
$3 = HEAP32[$0 >> 2] | 0;
if ($3 | 0) {
_free($3);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
STACKTOP = sp;
return;
}
$7 = $0 + 8 | 0;
$8 = HEAP32[$7 >> 2] | 0;
if (($8 | 0) == ($1 | 0)) {
STACKTOP = sp;
return;
}
$11 = _malloc($1 << 2) | 0;
if (!$11) if (($8 | 0) < ($1 | 0)) {
HEAP32[$vararg_buffer >> 2] = $8;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
__Z7eprintfPKcz(47403, $vararg_buffer);
$14 = ___cxa_allocate_exception(4) | 0;
HEAP32[$14 >> 2] = 1;
___cxa_throw($14 | 0, 32, 0);
} else {
STACKTOP = sp;
return;
}
$15 = $0 + 12 | 0;
$16 = HEAP32[$15 >> 2] | 0;
if (($16 | 0) > ($1 | 0)) {
HEAP32[$15 >> 2] = $1;
$19 = $1;
} else $19 = $16;
$20 = HEAP32[$0 >> 2] | 0;
if (($19 | 0) > 0) {
$$020 = 0;
do {
HEAP32[$11 + ($$020 << 2) >> 2] = HEAP32[$20 + ($$020 << 2) >> 2];
$$020 = $$020 + 1 | 0;
} while (($$020 | 0) < ($19 | 0));
label = 14;
} else if (!$20) $28 = $19; else label = 14;
if ((label | 0) == 14) {
_free($20);
HEAP32[$0 >> 2] = 0;
$28 = HEAP32[$15 >> 2] | 0;
}
HEAP32[$0 >> 2] = $11;
$27 = $1 - $28 | 0;
if (($27 | 0) > 0) {
HEAP32[$11 + ($28 << 2) >> 2] = 0;
if (($27 | 0) != 1) {
$32 = 1;
do {
HEAP32[(HEAP32[$0 >> 2] | 0) + ($32 + $28 << 2) >> 2] = 0;
$32 = $32 + 1 | 0;
} while (($32 | 0) != ($27 | 0));
}
}
HEAP32[$7 >> 2] = $1;
STACKTOP = sp;
return;
}
function __ZN13DynamicArrayPI18AbstractTimedMorphE6resizeEi($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$020 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
$3 = HEAP32[$0 >> 2] | 0;
if ($3 | 0) {
_free($3);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
STACKTOP = sp;
return;
}
$7 = $0 + 8 | 0;
$8 = HEAP32[$7 >> 2] | 0;
if (($8 | 0) == ($1 | 0)) {
STACKTOP = sp;
return;
}
$11 = _malloc($1 << 2) | 0;
if (!$11) if (($8 | 0) < ($1 | 0)) {
HEAP32[$vararg_buffer >> 2] = $8;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
__Z7eprintfPKcz(54302, $vararg_buffer);
$14 = ___cxa_allocate_exception(4) | 0;
HEAP32[$14 >> 2] = 1;
___cxa_throw($14 | 0, 32, 0);
} else {
STACKTOP = sp;
return;
}
$15 = $0 + 12 | 0;
$16 = HEAP32[$15 >> 2] | 0;
if (($16 | 0) > ($1 | 0)) {
HEAP32[$15 >> 2] = $1;
$19 = $1;
} else $19 = $16;
$20 = HEAP32[$0 >> 2] | 0;
if (($19 | 0) > 0) {
$$020 = 0;
do {
HEAP32[$11 + ($$020 << 2) >> 2] = HEAP32[$20 + ($$020 << 2) >> 2];
$$020 = $$020 + 1 | 0;
} while (($$020 | 0) < ($19 | 0));
label = 14;
} else if (!$20) $28 = $19; else label = 14;
if ((label | 0) == 14) {
_free($20);
HEAP32[$0 >> 2] = 0;
$28 = HEAP32[$15 >> 2] | 0;
}
HEAP32[$0 >> 2] = $11;
$27 = $1 - $28 | 0;
if (($27 | 0) > 0) {
HEAP32[$11 + ($28 << 2) >> 2] = 0;
if (($27 | 0) != 1) {
$32 = 1;
do {
HEAP32[(HEAP32[$0 >> 2] | 0) + ($32 + $28 << 2) >> 2] = 0;
$32 = $32 + 1 | 0;
} while (($32 | 0) != ($27 | 0));
}
}
HEAP32[$7 >> 2] = $1;
STACKTOP = sp;
return;
}
function __ZNK19OneHConcretePosture15computeWristLocEPK11HanimAvatarR6Vector($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$pre$phi7Z2D = 0, $$pre$phiZ2D = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$3 = sp + 24 | 0;
$4 = sp + 12 | 0;
$5 = $0 + 4 | 0;
__ZN6Vector7setFromERKS_($2, $5);
if (!$1) {
$$pre$phi7Z2D = $0 + 40 | 0;
$$pre$phiZ2D = $0 + 16 | 0;
__ZN6VectorC2ERKS_($3, $$pre$phiZ2D);
__ZNK10Quaternion12rotateVectorER6Vector($$pre$phi7Z2D, $3);
__ZN6Vector11setSubtractERKS_($2, $3);
STACKTOP = sp;
return;
}
__ZN6VectorC2Ev($3);
$7 = $0 + 28 | 0;
$8 = $0 + 16 | 0;
__ZN6Vector11setSubtractERKS_S1_($3, $7, $8);
$9 = $0 + 40 | 0;
__ZNK10Quaternion12rotateVectorER6Vector($9, $3);
__ZN6Vector6setAddERKS_($3, $5);
__ZN6VectorC2Ev($4);
if (0) if (HEAP8[$0 >> 0] | 0) {
__Z7eprintfPKcz(46505, $vararg_buffer);
__ZNK6Vector5printEP8_IO_FILEi($7, HEAP32[16082] | 0, 3);
__Z7eprintfPKcz(46520, $vararg_buffer1);
__ZNK6Vector5printEP8_IO_FILEi($8, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
__Z5eputsPKc(46526);
__ZNK6Vector5printEP8_IO_FILEi($3, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
__ZNK11HanimAvatar23ForceOutsideTorsoOffsetERK6VectorRS0_($1, $3, $4);
if (0) if (HEAP8[$0 >> 0] | 0) {
__Z5eputsPKc(46548);
__ZNK6Vector5printEP8_IO_FILEi($4, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
}
__ZN6Vector6setAddERKS_($2, $4);
$$pre$phi7Z2D = $9;
$$pre$phiZ2D = $8;
__ZN6VectorC2ERKS_($3, $$pre$phiZ2D);
__ZNK10Quaternion12rotateVectorER6Vector($$pre$phi7Z2D, $3);
__ZN6Vector11setSubtractERKS_($2, $3);
STACKTOP = sp;
return;
}
function __Z14ReadXMLStringsPK13DynamicArrayPIKcE($0) {
$0 = $0 | 0;
var $$0 = 0, $$0$i = 0, $$02532 = 0, $$02631 = 0, $$1 = 0, $10 = 0, $11 = 0, $13 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $28 = 0, $30 = 0, $32 = 0, $8 = 0, label = 0;
if (!$0) {
$$0 = 0;
return $$0 | 0;
}
$2 = $0 + 12 | 0;
if ((HEAP32[$2 >> 2] | 0) <= 0) {
$$0 = 0;
return $$0 | 0;
}
$$02532 = 0;
$$02631 = 0;
$8 = 0;
while (1) {
if ($$02631 << 16 >> 16 < 0) $18 = 0; else $18 = HEAP32[(HEAP32[$0 >> 2] | 0) + ($8 << 2) >> 2] | 0;
$10 = __Znwj(32) | 0;
__THREW__ = 0;
invoke_vi(153, $10 | 0);
$11 = __THREW__;
__THREW__ = 0;
if ($11 & 1) {
label = 7;
break;
}
if (!(FUNCTION_TABLE_iii[HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] & 63]($10, $18) | 0)) {
$21 = $10 + 20 | 0;
$22 = HEAP32[$21 >> 2] | 0;
HEAP32[$21 >> 2] = 0;
$$0$i = $22;
$32 = $22;
} else {
$$0$i = 0;
$32 = 0;
}
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$10 >> 2] | 0) + 4 >> 2] & 255]($10);
if (!$$0$i) $$1 = $$02532; else if (!$$02532) $$1 = $$0$i; else {
__ZN7XMLCell12mergeXMLCellEPKS_($$02532, $$0$i);
__THREW__ = 0;
invoke_vi(151, $$0$i | 0);
$28 = __THREW__;
__THREW__ = 0;
if ($28 & 1) {
label = 14;
break;
}
__ZdlPv($$0$i);
$$1 = $$02532;
}
$$02631 = $$02631 + 1 << 16 >> 16;
$8 = $$02631 << 16 >> 16;
if ((HEAP32[$2 >> 2] | 0) <= ($8 | 0)) {
$$0 = $$1;
label = 16;
break;
} else $$02532 = $$1;
}
if ((label | 0) == 7) {
$13 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($10);
___resumeException($13 | 0);
} else if ((label | 0) == 14) {
$30 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($32);
___resumeException($30 | 0);
} else if ((label | 0) == 16) return $$0 | 0;
return 0;
}
function __ZN13DynamicArray1IP13JointRotationE6resizeEi($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$020 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
$3 = HEAP32[$0 >> 2] | 0;
if ($3 | 0) {
_free($3);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
STACKTOP = sp;
return;
}
$7 = $0 + 8 | 0;
$8 = HEAP32[$7 >> 2] | 0;
if (($8 | 0) == ($1 | 0)) {
STACKTOP = sp;
return;
}
$11 = _malloc($1 << 2) | 0;
if (!$11) if (($8 | 0) < ($1 | 0)) {
HEAP32[$vararg_buffer >> 2] = $8;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
__Z7eprintfPKcz(47403, $vararg_buffer);
$14 = ___cxa_allocate_exception(4) | 0;
HEAP32[$14 >> 2] = 1;
___cxa_throw($14 | 0, 32, 0);
} else {
STACKTOP = sp;
return;
}
$15 = $0 + 12 | 0;
$16 = HEAP32[$15 >> 2] | 0;
if (($16 | 0) > ($1 | 0)) {
HEAP32[$15 >> 2] = $1;
$19 = $1;
} else $19 = $16;
$20 = HEAP32[$0 >> 2] | 0;
if (($19 | 0) > 0) {
$$020 = 0;
do {
HEAP32[$11 + ($$020 << 2) >> 2] = HEAP32[$20 + ($$020 << 2) >> 2];
$$020 = $$020 + 1 | 0;
} while (($$020 | 0) < ($19 | 0));
label = 14;
} else if (!$20) $28 = $19; else label = 14;
if ((label | 0) == 14) {
_free($20);
HEAP32[$0 >> 2] = 0;
$28 = HEAP32[$15 >> 2] | 0;
}
HEAP32[$0 >> 2] = $11;
$27 = $1 - $28 | 0;
if (($27 | 0) > 0) {
HEAP32[$11 + ($28 << 2) >> 2] = 0;
if (($27 | 0) != 1) {
$32 = 1;
do {
HEAP32[(HEAP32[$0 >> 2] | 0) + ($32 + $28 << 2) >> 2] = 0;
$32 = $32 + 1 | 0;
} while (($32 | 0) != ($27 | 0));
}
}
HEAP32[$7 >> 2] = $1;
STACKTOP = sp;
return;
}
function __ZN13DynamicArrayPI13BasicMovementE6resizeEi($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$020 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
$3 = HEAP32[$0 >> 2] | 0;
if ($3 | 0) {
_free($3);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
STACKTOP = sp;
return;
}
$7 = $0 + 8 | 0;
$8 = HEAP32[$7 >> 2] | 0;
if (($8 | 0) == ($1 | 0)) {
STACKTOP = sp;
return;
}
$11 = _malloc($1 << 2) | 0;
if (!$11) if (($8 | 0) < ($1 | 0)) {
HEAP32[$vararg_buffer >> 2] = $8;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
__Z7eprintfPKcz(54302, $vararg_buffer);
$14 = ___cxa_allocate_exception(4) | 0;
HEAP32[$14 >> 2] = 1;
___cxa_throw($14 | 0, 32, 0);
} else {
STACKTOP = sp;
return;
}
$15 = $0 + 12 | 0;
$16 = HEAP32[$15 >> 2] | 0;
if (($16 | 0) > ($1 | 0)) {
HEAP32[$15 >> 2] = $1;
$19 = $1;
} else $19 = $16;
$20 = HEAP32[$0 >> 2] | 0;
if (($19 | 0) > 0) {
$$020 = 0;
do {
HEAP32[$11 + ($$020 << 2) >> 2] = HEAP32[$20 + ($$020 << 2) >> 2];
$$020 = $$020 + 1 | 0;
} while (($$020 | 0) < ($19 | 0));
label = 14;
} else if (!$20) $28 = $19; else label = 14;
if ((label | 0) == 14) {
_free($20);
HEAP32[$0 >> 2] = 0;
$28 = HEAP32[$15 >> 2] | 0;
}
HEAP32[$0 >> 2] = $11;
$27 = $1 - $28 | 0;
if (($27 | 0) > 0) {
HEAP32[$11 + ($28 << 2) >> 2] = 0;
if (($27 | 0) != 1) {
$32 = 1;
do {
HEAP32[(HEAP32[$0 >> 2] | 0) + ($32 + $28 << 2) >> 2] = 0;
$32 = $32 + 1 | 0;
} while (($32 | 0) != ($27 | 0));
}
}
HEAP32[$7 >> 2] = $1;
STACKTOP = sp;
return;
}
function __ZN13DynamicArrayPI10OptionSpecE6resizeEi($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$020 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
$3 = HEAP32[$0 >> 2] | 0;
if ($3 | 0) {
_free($3);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
STACKTOP = sp;
return;
}
$7 = $0 + 8 | 0;
$8 = HEAP32[$7 >> 2] | 0;
if (($8 | 0) == ($1 | 0)) {
STACKTOP = sp;
return;
}
$11 = _malloc($1 << 2) | 0;
if (!$11) if (($8 | 0) < ($1 | 0)) {
HEAP32[$vararg_buffer >> 2] = $8;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
__Z7eprintfPKcz(54302, $vararg_buffer);
$14 = ___cxa_allocate_exception(4) | 0;
HEAP32[$14 >> 2] = 1;
___cxa_throw($14 | 0, 32, 0);
} else {
STACKTOP = sp;
return;
}
$15 = $0 + 12 | 0;
$16 = HEAP32[$15 >> 2] | 0;
if (($16 | 0) > ($1 | 0)) {
HEAP32[$15 >> 2] = $1;
$19 = $1;
} else $19 = $16;
$20 = HEAP32[$0 >> 2] | 0;
if (($19 | 0) > 0) {
$$020 = 0;
do {
HEAP32[$11 + ($$020 << 2) >> 2] = HEAP32[$20 + ($$020 << 2) >> 2];
$$020 = $$020 + 1 | 0;
} while (($$020 | 0) < ($19 | 0));
label = 14;
} else if (!$20) $28 = $19; else label = 14;
if ((label | 0) == 14) {
_free($20);
HEAP32[$0 >> 2] = 0;
$28 = HEAP32[$15 >> 2] | 0;
}
HEAP32[$0 >> 2] = $11;
$27 = $1 - $28 | 0;
if (($27 | 0) > 0) {
HEAP32[$11 + ($28 << 2) >> 2] = 0;
if (($27 | 0) != 1) {
$32 = 1;
do {
HEAP32[(HEAP32[$0 >> 2] | 0) + ($32 + $28 << 2) >> 2] = 0;
$32 = $32 + 1 | 0;
} while (($32 | 0) != ($27 | 0));
}
}
HEAP32[$7 >> 2] = $1;
STACKTOP = sp;
return;
}
function __ZN12DynamicArrayIsLsn1EE6resizeEi($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$020 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
$3 = HEAP32[$0 >> 2] | 0;
if ($3 | 0) {
_free($3);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
STACKTOP = sp;
return;
}
$7 = $0 + 8 | 0;
$8 = HEAP32[$7 >> 2] | 0;
if (($8 | 0) == ($1 | 0)) {
STACKTOP = sp;
return;
}
$11 = _malloc($1 << 1) | 0;
if (!$11) if (($8 | 0) < ($1 | 0)) {
HEAP32[$vararg_buffer >> 2] = $8;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
__Z7eprintfPKcz(17980, $vararg_buffer);
$14 = ___cxa_allocate_exception(4) | 0;
HEAP32[$14 >> 2] = 1;
___cxa_throw($14 | 0, 32, 0);
} else {
STACKTOP = sp;
return;
}
$15 = $0 + 12 | 0;
$16 = HEAP32[$15 >> 2] | 0;
if (($16 | 0) > ($1 | 0)) {
HEAP32[$15 >> 2] = $1;
$19 = $1;
} else $19 = $16;
$20 = HEAP32[$0 >> 2] | 0;
if (($19 | 0) > 0) {
$$020 = 0;
do {
HEAP16[$11 + ($$020 << 1) >> 1] = HEAP16[$20 + ($$020 << 1) >> 1] | 0;
$$020 = $$020 + 1 | 0;
} while (($$020 | 0) < ($19 | 0));
label = 14;
} else if (!$20) $28 = $19; else label = 14;
if ((label | 0) == 14) {
_free($20);
HEAP32[$0 >> 2] = 0;
$28 = HEAP32[$15 >> 2] | 0;
}
HEAP32[$0 >> 2] = $11;
$27 = $1 - $28 | 0;
if (($27 | 0) > 0) {
HEAP16[$11 + ($28 << 1) >> 1] = -1;
if (($27 | 0) != 1) {
$32 = 1;
do {
HEAP16[(HEAP32[$0 >> 2] | 0) + ($32 + $28 << 1) >> 1] = -1;
$32 = $32 + 1 | 0;
} while (($32 | 0) != ($27 | 0));
}
}
HEAP32[$7 >> 2] = $1;
STACKTOP = sp;
return;
}
function __ZN13DynamicArrayPI7XMLCellE6resizeEi($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$020 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
$3 = HEAP32[$0 >> 2] | 0;
if ($3 | 0) {
_free($3);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
STACKTOP = sp;
return;
}
$7 = $0 + 8 | 0;
$8 = HEAP32[$7 >> 2] | 0;
if (($8 | 0) == ($1 | 0)) {
STACKTOP = sp;
return;
}
$11 = _malloc($1 << 2) | 0;
if (!$11) if (($8 | 0) < ($1 | 0)) {
HEAP32[$vararg_buffer >> 2] = $8;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
__Z7eprintfPKcz(54302, $vararg_buffer);
$14 = ___cxa_allocate_exception(4) | 0;
HEAP32[$14 >> 2] = 1;
___cxa_throw($14 | 0, 32, 0);
} else {
STACKTOP = sp;
return;
}
$15 = $0 + 12 | 0;
$16 = HEAP32[$15 >> 2] | 0;
if (($16 | 0) > ($1 | 0)) {
HEAP32[$15 >> 2] = $1;
$19 = $1;
} else $19 = $16;
$20 = HEAP32[$0 >> 2] | 0;
if (($19 | 0) > 0) {
$$020 = 0;
do {
HEAP32[$11 + ($$020 << 2) >> 2] = HEAP32[$20 + ($$020 << 2) >> 2];
$$020 = $$020 + 1 | 0;
} while (($$020 | 0) < ($19 | 0));
label = 14;
} else if (!$20) $28 = $19; else label = 14;
if ((label | 0) == 14) {
_free($20);
HEAP32[$0 >> 2] = 0;
$28 = HEAP32[$15 >> 2] | 0;
}
HEAP32[$0 >> 2] = $11;
$27 = $1 - $28 | 0;
if (($27 | 0) > 0) {
HEAP32[$11 + ($28 << 2) >> 2] = 0;
if (($27 | 0) != 1) {
$32 = 1;
do {
HEAP32[(HEAP32[$0 >> 2] | 0) + ($32 + $28 << 2) >> 2] = 0;
$32 = $32 + 1 | 0;
} while (($32 | 0) != ($27 | 0));
}
}
HEAP32[$7 >> 2] = $1;
STACKTOP = sp;
return;
}
function __ZN13DynamicArrayPI7SegmentE6resizeEi($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$020 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
$3 = HEAP32[$0 >> 2] | 0;
if ($3 | 0) {
_free($3);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
STACKTOP = sp;
return;
}
$7 = $0 + 8 | 0;
$8 = HEAP32[$7 >> 2] | 0;
if (($8 | 0) == ($1 | 0)) {
STACKTOP = sp;
return;
}
$11 = _malloc($1 << 2) | 0;
if (!$11) if (($8 | 0) < ($1 | 0)) {
HEAP32[$vararg_buffer >> 2] = $8;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
__Z7eprintfPKcz(54302, $vararg_buffer);
$14 = ___cxa_allocate_exception(4) | 0;
HEAP32[$14 >> 2] = 1;
___cxa_throw($14 | 0, 32, 0);
} else {
STACKTOP = sp;
return;
}
$15 = $0 + 12 | 0;
$16 = HEAP32[$15 >> 2] | 0;
if (($16 | 0) > ($1 | 0)) {
HEAP32[$15 >> 2] = $1;
$19 = $1;
} else $19 = $16;
$20 = HEAP32[$0 >> 2] | 0;
if (($19 | 0) > 0) {
$$020 = 0;
do {
HEAP32[$11 + ($$020 << 2) >> 2] = HEAP32[$20 + ($$020 << 2) >> 2];
$$020 = $$020 + 1 | 0;
} while (($$020 | 0) < ($19 | 0));
label = 14;
} else if (!$20) $28 = $19; else label = 14;
if ((label | 0) == 14) {
_free($20);
HEAP32[$0 >> 2] = 0;
$28 = HEAP32[$15 >> 2] | 0;
}
HEAP32[$0 >> 2] = $11;
$27 = $1 - $28 | 0;
if (($27 | 0) > 0) {
HEAP32[$11 + ($28 << 2) >> 2] = 0;
if (($27 | 0) != 1) {
$32 = 1;
do {
HEAP32[(HEAP32[$0 >> 2] | 0) + ($32 + $28 << 2) >> 2] = 0;
$32 = $32 + 1 | 0;
} while (($32 | 0) != ($27 | 0));
}
}
HEAP32[$7 >> 2] = $1;
STACKTOP = sp;
return;
}
function __ZN13DynamicArrayPI7GestureE6resizeEi($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$020 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
$3 = HEAP32[$0 >> 2] | 0;
if ($3 | 0) {
_free($3);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
STACKTOP = sp;
return;
}
$7 = $0 + 8 | 0;
$8 = HEAP32[$7 >> 2] | 0;
if (($8 | 0) == ($1 | 0)) {
STACKTOP = sp;
return;
}
$11 = _malloc($1 << 2) | 0;
if (!$11) if (($8 | 0) < ($1 | 0)) {
HEAP32[$vararg_buffer >> 2] = $8;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
__Z7eprintfPKcz(54302, $vararg_buffer);
$14 = ___cxa_allocate_exception(4) | 0;
HEAP32[$14 >> 2] = 1;
___cxa_throw($14 | 0, 32, 0);
} else {
STACKTOP = sp;
return;
}
$15 = $0 + 12 | 0;
$16 = HEAP32[$15 >> 2] | 0;
if (($16 | 0) > ($1 | 0)) {
HEAP32[$15 >> 2] = $1;
$19 = $1;
} else $19 = $16;
$20 = HEAP32[$0 >> 2] | 0;
if (($19 | 0) > 0) {
$$020 = 0;
do {
HEAP32[$11 + ($$020 << 2) >> 2] = HEAP32[$20 + ($$020 << 2) >> 2];
$$020 = $$020 + 1 | 0;
} while (($$020 | 0) < ($19 | 0));
label = 14;
} else if (!$20) $28 = $19; else label = 14;
if ((label | 0) == 14) {
_free($20);
HEAP32[$0 >> 2] = 0;
$28 = HEAP32[$15 >> 2] | 0;
}
HEAP32[$0 >> 2] = $11;
$27 = $1 - $28 | 0;
if (($27 | 0) > 0) {
HEAP32[$11 + ($28 << 2) >> 2] = 0;
if (($27 | 0) != 1) {
$32 = 1;
do {
HEAP32[(HEAP32[$0 >> 2] | 0) + ($32 + $28 << 2) >> 2] = 0;
$32 = $32 + 1 | 0;
} while (($32 | 0) != ($27 | 0));
}
}
HEAP32[$7 >> 2] = $1;
STACKTOP = sp;
return;
}
function __ZN12DynamicArrayIiLin1EE6resizeEi($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$020 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
$3 = HEAP32[$0 >> 2] | 0;
if ($3 | 0) {
_free($3);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
STACKTOP = sp;
return;
}
$7 = $0 + 8 | 0;
$8 = HEAP32[$7 >> 2] | 0;
if (($8 | 0) == ($1 | 0)) {
STACKTOP = sp;
return;
}
$11 = _malloc($1 << 2) | 0;
if (!$11) if (($8 | 0) < ($1 | 0)) {
HEAP32[$vararg_buffer >> 2] = $8;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
__Z7eprintfPKcz(17980, $vararg_buffer);
$14 = ___cxa_allocate_exception(4) | 0;
HEAP32[$14 >> 2] = 1;
___cxa_throw($14 | 0, 32, 0);
} else {
STACKTOP = sp;
return;
}
$15 = $0 + 12 | 0;
$16 = HEAP32[$15 >> 2] | 0;
if (($16 | 0) > ($1 | 0)) {
HEAP32[$15 >> 2] = $1;
$19 = $1;
} else $19 = $16;
$20 = HEAP32[$0 >> 2] | 0;
if (($19 | 0) > 0) {
$$020 = 0;
do {
HEAP32[$11 + ($$020 << 2) >> 2] = HEAP32[$20 + ($$020 << 2) >> 2];
$$020 = $$020 + 1 | 0;
} while (($$020 | 0) < ($19 | 0));
label = 14;
} else if (!$20) $28 = $19; else label = 14;
if ((label | 0) == 14) {
_free($20);
HEAP32[$0 >> 2] = 0;
$28 = HEAP32[$15 >> 2] | 0;
}
HEAP32[$0 >> 2] = $11;
$27 = $1 - $28 | 0;
if (($27 | 0) > 0) {
HEAP32[$11 + ($28 << 2) >> 2] = -1;
if (($27 | 0) != 1) {
$32 = 1;
do {
HEAP32[(HEAP32[$0 >> 2] | 0) + ($32 + $28 << 2) >> 2] = -1;
$32 = $32 + 1 | 0;
} while (($32 | 0) != ($27 | 0));
}
}
HEAP32[$7 >> 2] = $1;
STACKTOP = sp;
return;
}
function __ZN13DynamicArrayPI5JointE6resizeEi($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$020 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
$3 = HEAP32[$0 >> 2] | 0;
if ($3 | 0) {
_free($3);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
STACKTOP = sp;
return;
}
$7 = $0 + 8 | 0;
$8 = HEAP32[$7 >> 2] | 0;
if (($8 | 0) == ($1 | 0)) {
STACKTOP = sp;
return;
}
$11 = _malloc($1 << 2) | 0;
if (!$11) if (($8 | 0) < ($1 | 0)) {
HEAP32[$vararg_buffer >> 2] = $8;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
__Z7eprintfPKcz(54302, $vararg_buffer);
$14 = ___cxa_allocate_exception(4) | 0;
HEAP32[$14 >> 2] = 1;
___cxa_throw($14 | 0, 32, 0);
} else {
STACKTOP = sp;
return;
}
$15 = $0 + 12 | 0;
$16 = HEAP32[$15 >> 2] | 0;
if (($16 | 0) > ($1 | 0)) {
HEAP32[$15 >> 2] = $1;
$19 = $1;
} else $19 = $16;
$20 = HEAP32[$0 >> 2] | 0;
if (($19 | 0) > 0) {
$$020 = 0;
do {
HEAP32[$11 + ($$020 << 2) >> 2] = HEAP32[$20 + ($$020 << 2) >> 2];
$$020 = $$020 + 1 | 0;
} while (($$020 | 0) < ($19 | 0));
label = 14;
} else if (!$20) $28 = $19; else label = 14;
if ((label | 0) == 14) {
_free($20);
HEAP32[$0 >> 2] = 0;
$28 = HEAP32[$15 >> 2] | 0;
}
HEAP32[$0 >> 2] = $11;
$27 = $1 - $28 | 0;
if (($27 | 0) > 0) {
HEAP32[$11 + ($28 << 2) >> 2] = 0;
if (($27 | 0) != 1) {
$32 = 1;
do {
HEAP32[(HEAP32[$0 >> 2] | 0) + ($32 + $28 << 2) >> 2] = 0;
$32 = $32 + 1 | 0;
} while (($32 | 0) != ($27 | 0));
}
}
HEAP32[$7 >> 2] = $1;
STACKTOP = sp;
return;
}
function __ZN13DynamicArrayPI4SiteE6resizeEi($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$020 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
$3 = HEAP32[$0 >> 2] | 0;
if ($3 | 0) {
_free($3);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
STACKTOP = sp;
return;
}
$7 = $0 + 8 | 0;
$8 = HEAP32[$7 >> 2] | 0;
if (($8 | 0) == ($1 | 0)) {
STACKTOP = sp;
return;
}
$11 = _malloc($1 << 2) | 0;
if (!$11) if (($8 | 0) < ($1 | 0)) {
HEAP32[$vararg_buffer >> 2] = $8;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
__Z7eprintfPKcz(54302, $vararg_buffer);
$14 = ___cxa_allocate_exception(4) | 0;
HEAP32[$14 >> 2] = 1;
___cxa_throw($14 | 0, 32, 0);
} else {
STACKTOP = sp;
return;
}
$15 = $0 + 12 | 0;
$16 = HEAP32[$15 >> 2] | 0;
if (($16 | 0) > ($1 | 0)) {
HEAP32[$15 >> 2] = $1;
$19 = $1;
} else $19 = $16;
$20 = HEAP32[$0 >> 2] | 0;
if (($19 | 0) > 0) {
$$020 = 0;
do {
HEAP32[$11 + ($$020 << 2) >> 2] = HEAP32[$20 + ($$020 << 2) >> 2];
$$020 = $$020 + 1 | 0;
} while (($$020 | 0) < ($19 | 0));
label = 14;
} else if (!$20) $28 = $19; else label = 14;
if ((label | 0) == 14) {
_free($20);
HEAP32[$0 >> 2] = 0;
$28 = HEAP32[$15 >> 2] | 0;
}
HEAP32[$0 >> 2] = $11;
$27 = $1 - $28 | 0;
if (($27 | 0) > 0) {
HEAP32[$11 + ($28 << 2) >> 2] = 0;
if (($27 | 0) != 1) {
$32 = 1;
do {
HEAP32[(HEAP32[$0 >> 2] | 0) + ($32 + $28 << 2) >> 2] = 0;
$32 = $32 + 1 | 0;
} while (($32 | 0) != ($27 | 0));
}
}
HEAP32[$7 >> 2] = $1;
STACKTOP = sp;
return;
}
function __ZNK25TwoHConcretePostureChange11interpolateER19TwoHConcretePosturef12SET_OF_HANDSb($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$010 = 0, $11 = f0, $12 = f0, $13 = 0, $19 = 0, $23 = 0, $26 = f0, $27 = f0, $28 = 0, $36 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$5 = sp;
$6 = sp + 18 | 0;
$7 = sp + 16 | 0;
L1 : do switch ($3 | 0) {
case 3:
case 5:
{
$8 = $0 + 448 | 0;
HEAP16[$6 >> 1] = HEAPU8[$8 >> 0] | HEAPU8[$8 + 1 >> 0] << 8;
$11 = Math_fround(HEAPF32[$0 + 452 >> 2]);
$12 = Math_fround(HEAPF32[$0 + 456 >> 2]);
__THREW__ = 0;
invoke_vififfi(1, $5 | 0, +$2, $6 | 0, +$11, +$12, $4 | 0);
$13 = __THREW__;
__THREW__ = 0;
if (!($13 & 1)) {
__ZN19OneHConcretePosture14setInterpolateERKS_S1_PKfb($1, $0, $0 + 224 | 0, $5, (HEAP16[$8 >> 1] & 64) != 0);
break L1;
}
$19 = ___cxa_find_matching_catch_2() | 0;
$$0 = tempRet0;
$$010 = $19;
___resumeException($$010 | 0);
break;
}
default:
{}
} while (0);
if (($3 | 1 | 0) != 5) {
STACKTOP = sp;
return;
}
$23 = $0 + 450 | 0;
HEAP16[$7 >> 1] = HEAPU8[$23 >> 0] | HEAPU8[$23 + 1 >> 0] << 8;
$26 = Math_fround(HEAPF32[$0 + 460 >> 2]);
$27 = Math_fround(HEAPF32[$0 + 464 >> 2]);
__THREW__ = 0;
invoke_vififfi(1, $5 | 0, +$2, $7 | 0, +$26, +$27, $4 | 0);
$28 = __THREW__;
__THREW__ = 0;
if ($28 & 1) {
$36 = ___cxa_find_matching_catch_2() | 0;
$$0 = tempRet0;
$$010 = $36;
___resumeException($$010 | 0);
} else {
__ZN19OneHConcretePosture14setInterpolateERKS_S1_PKfb($1 + 112 | 0, $0 + 112 | 0, $0 + 336 | 0, $5, (HEAP16[$23 >> 1] & 64) != 0);
STACKTOP = sp;
return;
}
}
function __ZN13DynamicArrayPIKcE6resizeEi($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$020 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
$3 = HEAP32[$0 >> 2] | 0;
if ($3 | 0) {
_free($3);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
STACKTOP = sp;
return;
}
$7 = $0 + 8 | 0;
$8 = HEAP32[$7 >> 2] | 0;
if (($8 | 0) == ($1 | 0)) {
STACKTOP = sp;
return;
}
$11 = _malloc($1 << 2) | 0;
if (!$11) if (($8 | 0) < ($1 | 0)) {
HEAP32[$vararg_buffer >> 2] = $8;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
__Z7eprintfPKcz(54302, $vararg_buffer);
$14 = ___cxa_allocate_exception(4) | 0;
HEAP32[$14 >> 2] = 1;
___cxa_throw($14 | 0, 32, 0);
} else {
STACKTOP = sp;
return;
}
$15 = $0 + 12 | 0;
$16 = HEAP32[$15 >> 2] | 0;
if (($16 | 0) > ($1 | 0)) {
HEAP32[$15 >> 2] = $1;
$19 = $1;
} else $19 = $16;
$20 = HEAP32[$0 >> 2] | 0;
if (($19 | 0) > 0) {
$$020 = 0;
do {
HEAP32[$11 + ($$020 << 2) >> 2] = HEAP32[$20 + ($$020 << 2) >> 2];
$$020 = $$020 + 1 | 0;
} while (($$020 | 0) < ($19 | 0));
label = 14;
} else if (!$20) $28 = $19; else label = 14;
if ((label | 0) == 14) {
_free($20);
HEAP32[$0 >> 2] = 0;
$28 = HEAP32[$15 >> 2] | 0;
}
HEAP32[$0 >> 2] = $11;
$27 = $1 - $28 | 0;
if (($27 | 0) > 0) {
HEAP32[$11 + ($28 << 2) >> 2] = 0;
if (($27 | 0) != 1) {
$32 = 1;
do {
HEAP32[(HEAP32[$0 >> 2] | 0) + ($32 + $28 << 2) >> 2] = 0;
$32 = $32 + 1 | 0;
} while (($32 | 0) != ($27 | 0));
}
}
HEAP32[$7 >> 2] = $1;
STACKTOP = sp;
return;
}
function __ZN13DynamicArrayPIcE6resizeEi($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$020 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
$3 = HEAP32[$0 >> 2] | 0;
if ($3 | 0) {
_free($3);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
STACKTOP = sp;
return;
}
$7 = $0 + 8 | 0;
$8 = HEAP32[$7 >> 2] | 0;
if (($8 | 0) == ($1 | 0)) {
STACKTOP = sp;
return;
}
$11 = _malloc($1 << 2) | 0;
if (!$11) if (($8 | 0) < ($1 | 0)) {
HEAP32[$vararg_buffer >> 2] = $8;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
__Z7eprintfPKcz(54302, $vararg_buffer);
$14 = ___cxa_allocate_exception(4) | 0;
HEAP32[$14 >> 2] = 1;
___cxa_throw($14 | 0, 32, 0);
} else {
STACKTOP = sp;
return;
}
$15 = $0 + 12 | 0;
$16 = HEAP32[$15 >> 2] | 0;
if (($16 | 0) > ($1 | 0)) {
HEAP32[$15 >> 2] = $1;
$19 = $1;
} else $19 = $16;
$20 = HEAP32[$0 >> 2] | 0;
if (($19 | 0) > 0) {
$$020 = 0;
do {
HEAP32[$11 + ($$020 << 2) >> 2] = HEAP32[$20 + ($$020 << 2) >> 2];
$$020 = $$020 + 1 | 0;
} while (($$020 | 0) < ($19 | 0));
label = 14;
} else if (!$20) $28 = $19; else label = 14;
if ((label | 0) == 14) {
_free($20);
HEAP32[$0 >> 2] = 0;
$28 = HEAP32[$15 >> 2] | 0;
}
HEAP32[$0 >> 2] = $11;
$27 = $1 - $28 | 0;
if (($27 | 0) > 0) {
HEAP32[$11 + ($28 << 2) >> 2] = 0;
if (($27 | 0) != 1) {
$32 = 1;
do {
HEAP32[(HEAP32[$0 >> 2] | 0) + ($32 + $28 << 2) >> 2] = 0;
$32 = $32 + 1 | 0;
} while (($32 | 0) != ($27 | 0));
}
}
HEAP32[$7 >> 2] = $1;
STACKTOP = sp;
return;
}
function __ZNK11OneHGesture15CopyOneHGestureEP7Gesture($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $6 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (0) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer >> 2] = $0;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
__Z7eprintfPKcz(48966, $vararg_buffer);
}
$3 = __Znwj(76) | 0;
__THREW__ = 0;
invoke_viii(94, $3 | 0, 1, $1 | 0);
$4 = __THREW__;
__THREW__ = 0;
if ($4 & 1) {
$28 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($3);
___resumeException($28 | 0);
}
$6 = $3 + 72 | 0;
HEAP32[$6 >> 2] = $1;
HEAP32[$3 >> 2] = HEAP32[$0 >> 2];
HEAP32[$3 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
HEAP32[$3 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
HEAP32[$3 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
HEAP32[$3 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
if (($3 | 0) != ($0 | 0)) {
HEAP32[$3 + 20 >> 2] = HEAP32[$0 + 20 >> 2];
HEAP32[$3 + 24 >> 2] = HEAP32[$0 + 24 >> 2];
HEAP32[$3 + 28 >> 2] = HEAP32[$0 + 28 >> 2];
HEAP32[$3 + 32 >> 2] = HEAP32[$0 + 32 >> 2];
HEAP32[$3 + 36 >> 2] = HEAP32[$0 + 36 >> 2];
}
$23 = $3 + 40 | 0;
$24 = $0 + 40 | 0;
HEAP32[$23 >> 2] = HEAP32[$24 >> 2];
HEAP32[$23 + 4 >> 2] = HEAP32[$24 + 4 >> 2];
HEAP32[$23 + 8 >> 2] = HEAP32[$24 + 8 >> 2];
HEAP32[$23 + 12 >> 2] = HEAP32[$24 + 12 >> 2];
HEAP32[$23 + 16 >> 2] = HEAP32[$24 + 16 >> 2];
HEAP32[$23 + 20 >> 2] = HEAP32[$24 + 20 >> 2];
HEAP32[$23 + 24 >> 2] = HEAP32[$24 + 24 >> 2];
HEAP32[$23 + 28 >> 2] = HEAP32[$24 + 28 >> 2];
HEAP32[$6 >> 2] = $1;
$25 = $3 + 56 | 0;
$27 = __ZNK9Handshape13CopyHandshapeEv(HEAP32[$25 >> 2] | 0) | 0;
HEAP32[$25 >> 2] = $27;
STACKTOP = sp;
return $3 | 0;
}
function __ZN14RepeatMovement22setOwnMotionAttributesERK16MotionAttributes($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $15 = 0, $18 = 0, $22 = 0, $23 = 0, $3 = 0, $33 = 0, $34 = 0, $45 = 0, $48 = 0, $6 = 0, $8 = 0, $9 = 0;
$3 = HEAP32[$1 + 40 >> 2] | 0;
HEAP32[$0 + 528 >> 2] = $3;
$6 = HEAP32[$1 + 44 >> 2] | 0;
HEAP32[$0 + 532 >> 2] = $6;
$8 = 66212 + ($3 * 24 | 0) | 0;
$9 = $0 + 568 | 0;
HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
HEAP32[$9 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
HEAP32[$9 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
HEAP32[$9 + 12 >> 2] = HEAP32[$8 + 12 >> 2];
HEAP32[$9 + 16 >> 2] = HEAP32[$8 + 16 >> 2];
HEAP32[$9 + 20 >> 2] = HEAP32[$8 + 20 >> 2];
do if ($6 | 0) if (($3 | 0) == ($6 | 0)) {
HEAP16[$9 >> 1] = (HEAP16[$9 >> 1] | 0) + 1 << 16 >> 16;
break;
} else break; while (0);
$15 = HEAP32[$1 + 48 >> 2] | 0;
HEAP32[$0 + 536 >> 2] = $15;
$18 = HEAP32[$1 + 52 >> 2] | 0;
HEAP32[$0 + 540 >> 2] = ($18 | 0) != 0 | ($15 | 0) == 0 ? $18 : 3;
$22 = $1 + 56 | 0;
$23 = $0 + 544 | 0;
if (($23 | 0) != ($22 | 0)) {
HEAP32[$23 >> 2] = HEAP32[$22 >> 2];
HEAP32[$0 + 548 >> 2] = HEAP32[$1 + 60 >> 2];
HEAP32[$0 + 552 >> 2] = HEAP32[$1 + 64 >> 2];
}
$33 = HEAP32[$1 + 68 >> 2] | 0;
$34 = $0 + 556 | 0;
HEAP32[$34 >> 2] = $33;
do if (!$33) {
if (Math_fround(HEAPF32[$23 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 548 >> 2]) == Math_fround(0.0)) if (!(Math_fround(HEAPF32[$0 + 552 >> 2]) != Math_fround(0.0))) break;
HEAP32[$34 >> 2] = 3;
} while (0);
$45 = HEAP32[$1 + 72 >> 2] | 0;
HEAP32[$0 + 560 >> 2] = $45;
$48 = HEAP32[$1 + 76 >> 2] | 0;
HEAP32[$0 + 564 >> 2] = ($48 | 0) != 0 | ($45 | 0) == 0 ? $48 : 3;
HEAP32[$0 + 12 >> 2] = 11;
HEAP32[$0 + 24 >> 2] = 0;
return;
}
function __ZN6Vector11setCentroidEiPKS_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$08$i = 0, $10 = 0, $12 = f0, $13 = f0, $18 = f0, $22 = f0, $26 = f0, $32 = f0, $33 = f0, $34 = f0, $35 = f0, $4 = 0, $6 = 0, $7 = 0, $9 = 0;
if (($1 | 0) < 1) {
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
__ZNK6Vector16checkValidVectorEv($0);
return;
}
$4 = HEAP32[$2 >> 2] | 0;
HEAP32[$0 >> 2] = $4;
$6 = HEAP32[$2 + 4 >> 2] | 0;
$7 = $0 + 4 | 0;
HEAP32[$7 >> 2] = $6;
$9 = HEAP32[$2 + 8 >> 2] | 0;
$10 = $0 + 8 | 0;
HEAP32[$10 >> 2] = $9;
if (($1 | 0) == 1) {
__ZNK6Vector16checkValidVectorEv($0);
return;
}
$12 = (HEAP32[tempDoublePtr >> 2] = $9, Math_fround(HEAPF32[tempDoublePtr >> 2]));
$13 = (HEAP32[tempDoublePtr >> 2] = $6, Math_fround(HEAPF32[tempDoublePtr >> 2]));
$$08$i = 1;
$18 = (HEAP32[tempDoublePtr >> 2] = $4, Math_fround(HEAPF32[tempDoublePtr >> 2]));
$22 = $13;
$26 = $12;
do {
$18 = Math_fround($18 + Math_fround(HEAPF32[$2 + ($$08$i * 12 | 0) >> 2]));
HEAPF32[$0 >> 2] = $18;
$22 = Math_fround($22 + Math_fround(HEAPF32[$2 + ($$08$i * 12 | 0) + 4 >> 2]));
HEAPF32[$7 >> 2] = $22;
$26 = Math_fround($26 + Math_fround(HEAPF32[$2 + ($$08$i * 12 | 0) + 8 >> 2]));
HEAPF32[$10 >> 2] = $26;
$$08$i = $$08$i + 1 | 0;
} while (($$08$i | 0) < ($1 | 0));
if (($1 | 0) <= 1) {
__ZNK6Vector16checkValidVectorEv($0);
return;
}
$32 = Math_fround(1.0 / +($1 | 0));
$33 = Math_fround($18 * $32);
HEAPF32[$0 >> 2] = $33;
$34 = Math_fround($22 * $32);
HEAPF32[$7 >> 2] = $34;
$35 = Math_fround($26 * $32);
HEAPF32[$10 >> 2] = $35;
__ZNK6Vector16checkValidVectorEv($0);
__ZNK6Vector16checkValidVectorEv($0);
return;
}
function ___mo_lookup($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
$4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0;
$7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0;
$10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0;
$13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0;
L1 : do if ($7 >>> 0 < $1 >>> 2 >>> 0) {
$17 = $1 - ($7 << 2) | 0;
if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) if (!(($13 | $10) & 3)) {
$23 = $10 >>> 2;
$24 = $13 >>> 2;
$$090 = 0;
$$094 = $7;
while (1) {
$25 = $$094 >>> 1;
$26 = $$090 + $25 | 0;
$27 = $26 << 1;
$28 = $27 + $23 | 0;
$31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0;
$35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0;
if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
$$4 = 0;
break L1;
}
if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
$$4 = 0;
break L1;
}
$44 = _strcmp($2, $0 + $35 | 0) | 0;
if (!$44) break;
$63 = ($44 | 0) < 0;
if (($$094 | 0) == 1) {
$$4 = 0;
break L1;
} else {
$$090 = $63 ? $$090 : $26;
$$094 = $63 ? $25 : $$094 - $25 | 0;
}
}
$46 = $27 + $24 | 0;
$49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0;
$53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0;
if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; else $$4 = 0;
} else $$4 = 0; else $$4 = 0;
} else $$4 = 0; while (0);
return $$4 | 0;
}
function __ZN12FaceAnimatorD2Ev($0) {
$0 = $0 | 0;
var $1 = 0, $13 = 0, $14 = 0, $19 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $31 = 0, $32 = 0, $37 = 0, $38 = 0, $43 = 0, $44 = 0, $49 = 0, $50 = 0, $7 = 0, $8 = 0;
$1 = $0 + 12 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if ($2 | 0) {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] & 255]($2);
HEAP32[$1 >> 2] = 0;
}
$7 = $0 + 16 | 0;
$8 = HEAP32[$7 >> 2] | 0;
if ($8 | 0) {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] & 255]($8);
HEAP32[$7 >> 2] = 0;
}
$13 = $0 + 20 | 0;
$14 = HEAP32[$13 >> 2] | 0;
if ($14 | 0) {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$14 >> 2] | 0) + 4 >> 2] & 255]($14);
HEAP32[$13 >> 2] = 0;
}
$19 = $0 + 24 | 0;
$20 = HEAP32[$19 >> 2] | 0;
if ($20 | 0) {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$20 >> 2] | 0) + 4 >> 2] & 255]($20);
HEAP32[$19 >> 2] = 0;
}
$25 = $0 + 28 | 0;
$26 = HEAP32[$25 >> 2] | 0;
if ($26 | 0) {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$26 >> 2] | 0) + 4 >> 2] & 255]($26);
HEAP32[$25 >> 2] = 0;
}
$31 = $0 + 32 | 0;
$32 = HEAP32[$31 >> 2] | 0;
if ($32 | 0) {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$32 >> 2] | 0) + 4 >> 2] & 255]($32);
HEAP32[$31 >> 2] = 0;
}
$37 = $0 + 36 | 0;
$38 = HEAP32[$37 >> 2] | 0;
if ($38 | 0) {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$38 >> 2] | 0) + 4 >> 2] & 255]($38);
HEAP32[$37 >> 2] = 0;
}
$43 = $0 + 40 | 0;
$44 = HEAP32[$43 >> 2] | 0;
if (!$44) {
$49 = $0 + 8 | 0;
HEAP32[$49 >> 2] = 0;
$50 = $0 + 44 | 0;
HEAP32[$50 >> 2] = 0;
return;
}
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$44 >> 2] | 0) + 4 >> 2] & 255]($44);
HEAP32[$43 >> 2] = 0;
$49 = $0 + 8 | 0;
HEAP32[$49 >> 2] = 0;
$50 = $0 + 44 | 0;
HEAP32[$50 >> 2] = 0;
return;
}
function __ZN12DynamicArrayIcLc0EE6resizeEi($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$020 = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $26 = 0, $27 = 0, $3 = 0, $31 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
$3 = HEAP32[$0 >> 2] | 0;
if ($3 | 0) {
_free($3);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
STACKTOP = sp;
return;
}
$7 = $0 + 8 | 0;
$8 = HEAP32[$7 >> 2] | 0;
if (($8 | 0) == ($1 | 0)) {
STACKTOP = sp;
return;
}
$10 = _malloc($1) | 0;
if (!$10) if (($8 | 0) < ($1 | 0)) {
HEAP32[$vararg_buffer >> 2] = $8;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
__Z7eprintfPKcz(17980, $vararg_buffer);
$13 = ___cxa_allocate_exception(4) | 0;
HEAP32[$13 >> 2] = 1;
___cxa_throw($13 | 0, 32, 0);
} else {
STACKTOP = sp;
return;
}
$14 = $0 + 12 | 0;
$15 = HEAP32[$14 >> 2] | 0;
if (($15 | 0) > ($1 | 0)) {
HEAP32[$14 >> 2] = $1;
$18 = $1;
} else $18 = $15;
$19 = HEAP32[$0 >> 2] | 0;
if (($18 | 0) > 0) {
$$020 = 0;
do {
HEAP8[$10 + $$020 >> 0] = HEAP8[$19 + $$020 >> 0] | 0;
$$020 = $$020 + 1 | 0;
} while (($$020 | 0) < ($18 | 0));
label = 14;
} else if (!$19) $27 = $18; else label = 14;
if ((label | 0) == 14) {
_free($19);
HEAP32[$0 >> 2] = 0;
$27 = HEAP32[$14 >> 2] | 0;
}
HEAP32[$0 >> 2] = $10;
$26 = $1 - $27 | 0;
if (($26 | 0) > 0) {
HEAP8[$10 + $27 >> 0] = 0;
if (($26 | 0) != 1) {
$31 = 1;
do {
HEAP8[(HEAP32[$0 >> 2] | 0) + ($31 + $27) >> 0] = 0;
$31 = $31 + 1 | 0;
} while (($31 | 0) != ($26 | 0));
}
}
HEAP32[$7 >> 2] = $1;
STACKTOP = sp;
return;
}
function _attlist2($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$1 = 0, $$1$ph = 0, $5 = 0, $attlist8$sink = 0, label = 0;
switch ($1 | 0) {
case 18:
{
label = 2;
break;
}
case 23:
{
$$1$ph = 33;
$attlist8$sink = 32;
break;
}
case 15:
{
$$1 = 33;
return $$1 | 0;
}
default:
label = 4;
}
if ((label | 0) == 2) {
$5 = $4 + 24 | 0;
if (!(FUNCTION_TABLE_iiiii[HEAP32[$5 >> 2] & 63]($4, $2, $3, 59870) | 0)) if (!(FUNCTION_TABLE_iiiii[HEAP32[$5 >> 2] & 63]($4, $2, $3, 59876) | 0)) if (!(FUNCTION_TABLE_iiiii[HEAP32[$5 >> 2] & 63]($4, $2, $3, 59879) | 0)) if (!(FUNCTION_TABLE_iiiii[HEAP32[$5 >> 2] & 63]($4, $2, $3, 59885) | 0)) if (!(FUNCTION_TABLE_iiiii[HEAP32[$5 >> 2] & 63]($4, $2, $3, 59821) | 0)) if (!(FUNCTION_TABLE_iiiii[HEAP32[$5 >> 2] & 63]($4, $2, $3, 59892) | 0)) if (!(FUNCTION_TABLE_iiiii[HEAP32[$5 >> 2] & 63]($4, $2, $3, 59901) | 0)) if (!(FUNCTION_TABLE_iiiii[HEAP32[$5 >> 2] & 63]($4, $2, $3, 59909) | 0)) if (!(FUNCTION_TABLE_iiiii[HEAP32[$5 >> 2] & 63]($4, $2, $3, 59844) | 0)) label = 4; else {
$$1$ph = 33;
$attlist8$sink = 34;
} else {
$$1$ph = 30;
$attlist8$sink = 33;
} else {
$$1$ph = 29;
$attlist8$sink = 33;
} else {
$$1$ph = 28;
$attlist8$sink = 33;
} else {
$$1$ph = 27;
$attlist8$sink = 33;
} else {
$$1$ph = 26;
$attlist8$sink = 33;
} else {
$$1$ph = 25;
$attlist8$sink = 33;
} else {
$$1$ph = 24;
$attlist8$sink = 33;
} else {
$$1$ph = 23;
$attlist8$sink = 33;
}
}
if ((label | 0) == 4) {
$$1$ph = -1;
$attlist8$sink = 4;
}
HEAP32[$0 >> 2] = $attlist8$sink;
$$1 = $$1$ph;
return $$1 | 0;
}
function __ZN10Trajectory19DestroyTrajectoriesEv() {
var $0 = 0, $12 = 0, $15 = 0, $17 = 0, $20 = 0, $22 = 0, $25 = 0, $27 = 0, $3 = 0, $30 = 0, $32 = 0, $35 = 0, $37 = 0, $40 = 0, $42 = 0, $45 = 0, $47 = 0, $5 = 0, $50 = 0, $8 = 0;
$0 = HEAP32[16613] | 0;
if ($0 | 0) {
$3 = HEAP32[$0 + 28 >> 2] | 0;
if ($3 | 0) _free($3);
__ZdlPv($0);
HEAP32[16613] = 0;
}
$5 = HEAP32[16614] | 0;
if ($5 | 0) {
$8 = HEAP32[$5 + 28 >> 2] | 0;
if ($8 | 0) _free($8);
__ZdlPv($5);
HEAP32[16614] = 0;
}
if (HEAP8[72309] | 0) return;
$12 = HEAP32[16615] | 0;
if ($12 | 0) {
$15 = HEAP32[$12 + 28 >> 2] | 0;
if ($15 | 0) _free($15);
__ZdlPv($12);
HEAP32[16615] = 0;
}
$17 = HEAP32[16616] | 0;
if ($17 | 0) {
$20 = HEAP32[$17 + 28 >> 2] | 0;
if ($20 | 0) _free($20);
__ZdlPv($17);
HEAP32[16616] = 0;
}
$22 = HEAP32[16617] | 0;
if ($22 | 0) {
$25 = HEAP32[$22 + 28 >> 2] | 0;
if ($25 | 0) _free($25);
__ZdlPv($22);
HEAP32[16617] = 0;
}
$27 = HEAP32[16618] | 0;
if ($27 | 0) {
$30 = HEAP32[$27 + 28 >> 2] | 0;
if ($30 | 0) _free($30);
__ZdlPv($27);
HEAP32[16618] = 0;
}
$32 = HEAP32[16619] | 0;
if ($32 | 0) {
$35 = HEAP32[$32 + 28 >> 2] | 0;
if ($35 | 0) _free($35);
__ZdlPv($32);
HEAP32[16619] = 0;
}
$37 = HEAP32[16620] | 0;
if ($37 | 0) {
$40 = HEAP32[$37 + 28 >> 2] | 0;
if ($40 | 0) _free($40);
__ZdlPv($37);
HEAP32[16620] = 0;
}
$42 = HEAP32[16621] | 0;
if ($42 | 0) {
$45 = HEAP32[$42 + 28 >> 2] | 0;
if ($45 | 0) _free($45);
__ZdlPv($42);
HEAP32[16621] = 0;
}
$47 = HEAP32[16622] | 0;
if (!$47) return;
$50 = HEAP32[$47 + 28 >> 2] | 0;
if ($50 | 0) _free($50);
__ZdlPv($47);
HEAP32[16622] = 0;
return;
}
function __ZN11HanimAvatar16CreateJointIndexEv($0) {
$0 = $0 | 0;
var $$0 = 0, $$08 = 0, $$in = 0, $13 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$2 = HEAP32[$0 + 100 >> 2] | 0;
if (!$2) {
STACKTOP = sp;
return;
}
$4 = HEAP32[$2 >> 2] | 0;
$5 = HEAP32[16526] | 0;
if (!(_strcmp($4, HEAP32[$5 >> 2] | 0) | 0)) {
$$in = $5;
label = 6;
} else {
$9 = HEAP32[16527] | 0;
if (!(_strcmp($4, HEAP32[$9 >> 2] | 0) | 0)) {
$$in = $9;
label = 6;
} else {
$13 = HEAP32[16528] | 0;
if (!(_strcmp($4, HEAP32[$13 >> 2] | 0) | 0)) {
$$in = $13;
label = 6;
} else $20 = HEAP32[$0 + 68 >> 2] | 0;
}
}
if ((label | 0) == 6) {
HEAP32[$0 + 68 >> 2] = $$in;
$20 = $$in;
}
if (!$20) {
__Z7eprintfPKcz(20512, $vararg_buffer);
$21 = ___cxa_allocate_exception(4) | 0;
HEAP32[$21 >> 2] = 14;
___cxa_throw($21 | 0, 232, 0);
}
$22 = __Znwj(268) | 0;
__THREW__ = 0;
invoke_vii(128, $22 | 0, $0 | 0);
$23 = __THREW__;
__THREW__ = 0;
if ($23 & 1) {
$30 = ___cxa_find_matching_catch_2() | 0;
$31 = tempRet0;
__ZdlPv($22);
$$0 = $31;
$$08 = $30;
___resumeException($$08 | 0);
}
HEAP32[$0 + 72 >> 2] = $22;
$26 = __Znwj(132) | 0;
__THREW__ = 0;
invoke_vii(129, $26 | 0, $22 | 0);
$27 = __THREW__;
__THREW__ = 0;
if ($27 & 1) {
$32 = ___cxa_find_matching_catch_2() | 0;
$33 = tempRet0;
__ZdlPv($26);
$$0 = $33;
$$08 = $32;
___resumeException($$08 | 0);
} else {
HEAP32[$0 + 76 >> 2] = $26;
STACKTOP = sp;
return;
}
}
function _vfprintf($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$ = 0, $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $35 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, dest = 0, sp = 0, stop = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 224 | 0;
$3 = sp + 120 | 0;
$4 = sp + 80 | 0;
$5 = sp;
$6 = sp + 136 | 0;
dest = $4;
stop = dest + 40 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) $$0 = -1; else {
if ((HEAP32[$0 + 76 >> 2] | 0) > -1) $40 = ___lockfile($0) | 0; else $40 = 0;
$13 = HEAP32[$0 >> 2] | 0;
$14 = $13 & 32;
if ((HEAP8[$0 + 74 >> 0] | 0) < 1) HEAP32[$0 >> 2] = $13 & -33;
$19 = $0 + 48 | 0;
if (!(HEAP32[$19 >> 2] | 0)) {
$23 = $0 + 44 | 0;
$24 = HEAP32[$23 >> 2] | 0;
HEAP32[$23 >> 2] = $6;
$25 = $0 + 28 | 0;
HEAP32[$25 >> 2] = $6;
$26 = $0 + 20 | 0;
HEAP32[$26 >> 2] = $6;
HEAP32[$19 >> 2] = 80;
$28 = $0 + 16 | 0;
HEAP32[$28 >> 2] = $6 + 80;
$29 = _printf_core($0, $1, $3, $5, $4) | 0;
if (!$24) $$1 = $29; else {
FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 31]($0, 0, 0) | 0;
$$ = (HEAP32[$26 >> 2] | 0) == 0 ? -1 : $29;
HEAP32[$23 >> 2] = $24;
HEAP32[$19 >> 2] = 0;
HEAP32[$28 >> 2] = 0;
HEAP32[$25 >> 2] = 0;
HEAP32[$26 >> 2] = 0;
$$1 = $$;
}
} else $$1 = _printf_core($0, $1, $3, $5, $4) | 0;
$35 = HEAP32[$0 >> 2] | 0;
HEAP32[$0 >> 2] = $35 | $14;
if ($40 | 0) ___unlockfile($0);
$$0 = ($35 & 32 | 0) == 0 ? $$1 : -1;
}
STACKTOP = sp;
return $$0 | 0;
}
function __ZL20printDirection3SiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKc10Direction3($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$4 = sp;
if (Math_fround(HEAPF32[$3 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$3 + 4 >> 2]) == Math_fround(0.0)) if (!(Math_fround(HEAPF32[$3 + 8 >> 2]) != Math_fround(0.0))) {
STACKTOP = sp;
return;
}
if ($1) {
HEAP8[$4 >> 0] = 32;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, $4, 1) | 0;
} else __Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($0, (HEAP16[36078] | 0) + 1 | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, $2, _strlen($2) | 0) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, 49551, 2) | 0;
__ZL18printDirCoordSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEfcc($0, Math_fround(HEAPF32[$3 + 4 >> 2]), 117, 100);
__ZL18printDirCoordSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEfcc($0, Math_fround(HEAPF32[$3 + 8 >> 2]), 111, 105);
__ZL18printDirCoordSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEfcc($0, Math_fround(HEAPF32[$3 >> 2]), 108, 114);
HEAP8[$4 >> 0] = 34;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, $4, 1) | 0;
if ($1) {
STACKTOP = sp;
return;
}
HEAP8[$4 >> 0] = 10;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, $4, 1) | 0;
STACKTOP = sp;
return;
}
function __ZN16CircularMovement22setOwnMotionAttributesERK16MotionAttributes($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $15 = 0, $16 = 0, $25 = 0, $26 = 0, $32 = 0, $33 = 0, $5 = 0, $54 = 0, $55 = 0, $6 = 0;
HEAP32[$0 + 552 >> 2] = HEAP32[$1 + 92 >> 2];
$5 = $1 + 152 | 0;
$6 = $0 + 528 | 0;
if (($6 | 0) != ($5 | 0)) {
HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
HEAP32[$0 + 532 >> 2] = HEAP32[$1 + 156 >> 2];
HEAP32[$0 + 536 >> 2] = HEAP32[$1 + 160 >> 2];
}
$15 = $1 + 164 | 0;
$16 = $0 + 540 | 0;
if (($16 | 0) != ($15 | 0)) {
HEAP32[$16 >> 2] = HEAP32[$15 >> 2];
HEAP32[$0 + 544 >> 2] = HEAP32[$1 + 168 >> 2];
HEAP32[$0 + 548 >> 2] = HEAP32[$1 + 172 >> 2];
}
$25 = $1 + 180 | 0;
$26 = $0 + 556 | 0;
if (($26 | 0) != ($25 | 0)) {
HEAP32[$26 >> 2] = HEAP32[$25 >> 2];
HEAP32[$0 + 560 >> 2] = HEAP32[$1 + 184 >> 2];
}
$32 = $1 + 192 | 0;
$33 = $0 + 568 | 0;
if (($33 | 0) != ($32 | 0)) {
HEAP32[$33 >> 2] = HEAP32[$32 >> 2];
HEAP32[$0 + 572 >> 2] = HEAP32[$1 + 196 >> 2];
}
HEAP8[$0 + 564 >> 0] = HEAP8[$1 + 188 >> 0] | 0;
HEAP8[$0 + 565 >> 0] = HEAP8[$1 + 189 >> 0] | 0;
HEAP32[$0 + 588 >> 2] = HEAP32[$1 + 32 >> 2];
HEAP32[$0 + 592 >> 2] = HEAP32[$1 + 36 >> 2];
HEAP32[$0 + 584 >> 2] = HEAP32[$1 + 200 >> 2];
$54 = $1 + 140 | 0;
$55 = $0 + 576 | 0;
if (($55 | 0) != ($54 | 0)) {
HEAP32[$55 >> 2] = HEAP32[$54 >> 2];
HEAP32[$0 + 580 >> 2] = HEAP32[$1 + 144 >> 2];
}
HEAP32[$0 + 596 >> 2] = HEAP32[$1 + 124 >> 2];
HEAP32[$0 + 600 >> 2] = HEAP32[$1 + 128 >> 2];
HEAP32[$0 + 604 >> 2] = HEAP32[$1 + 132 >> 2];
HEAP32[$0 + 608 >> 2] = HEAP32[$1 + 136 >> 2];
HEAP16[$0 + 612 >> 1] = HEAP16[$1 + 148 >> 1] | 0;
return;
}
function ___dynamic_cast($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $8 = 0, dest = 0, sp = 0, stop = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$4 = sp;
$5 = HEAP32[$0 >> 2] | 0;
$8 = $0 + (HEAP32[$5 + -8 >> 2] | 0) | 0;
$10 = HEAP32[$5 + -4 >> 2] | 0;
HEAP32[$4 >> 2] = $2;
HEAP32[$4 + 4 >> 2] = $0;
HEAP32[$4 + 8 >> 2] = $1;
HEAP32[$4 + 12 >> 2] = $3;
$14 = $4 + 16 | 0;
$15 = $4 + 20 | 0;
$16 = $4 + 24 | 0;
$17 = $4 + 28 | 0;
$18 = $4 + 32 | 0;
$19 = $4 + 40 | 0;
dest = $14;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP16[$14 + 36 >> 1] = 0;
HEAP8[$14 + 38 >> 0] = 0;
L1 : do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0) {
HEAP32[$4 + 48 >> 2] = 1;
FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] & 7]($10, $4, $8, $8, 1, 0);
$$0 = (HEAP32[$16 >> 2] | 0) == 1 ? $8 : 0;
} else {
FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] & 15]($10, $4, $8, 1, 0);
switch (HEAP32[$4 + 36 >> 2] | 0) {
case 0:
{
$$0 = (HEAP32[$19 >> 2] | 0) == 1 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1 ? HEAP32[$15 >> 2] | 0 : 0;
break L1;
break;
}
case 1:
break;
default:
{
$$0 = 0;
break L1;
}
}
if ((HEAP32[$16 >> 2] | 0) != 1) if (!((HEAP32[$19 >> 2] | 0) == 0 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1)) {
$$0 = 0;
break;
}
$$0 = HEAP32[$14 >> 2] | 0;
} while (0);
STACKTOP = sp;
return $$0 | 0;
}
function __ZNK10ZigzagInfo5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $20 = 0.0, $25 = 0.0, $30 = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$vararg_buffer9 = sp + 40 | 0;
$vararg_buffer5 = sp + 24 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
if (!(HEAP32[$0 >> 2] | 0)) {
STACKTOP = sp;
return;
}
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(36958, 17, 1, $1) | 0;
HEAP32[$vararg_buffer >> 2] = HEAP32[$0 >> 2];
_fprintf($1, 35092, $vararg_buffer) | 0;
if (!(HEAP32[$0 >> 2] | 0)) {
STACKTOP = sp;
return;
}
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(37214, 18, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK6Vector5printEP8_IO_FILEi($0 + 4 | 0, $1, 3);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$20 = +Math_fround(HEAPF32[$0 + 16 >> 2]);
HEAP32[$vararg_buffer1 >> 2] = 3;
HEAPF64[$vararg_buffer1 + 8 >> 3] = $20;
_fprintf($1, 37233, $vararg_buffer1) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$25 = +Math_fround(HEAPF32[$0 + 20 >> 2]);
HEAP32[$vararg_buffer5 >> 2] = 3;
HEAPF64[$vararg_buffer5 + 8 >> 3] = $25;
_fprintf($1, 37257, $vararg_buffer5) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$30 = +Math_fround(HEAPF32[$0 + 24 >> 2]);
HEAP32[$vararg_buffer9 >> 2] = 3;
HEAPF64[$vararg_buffer9 + 8 >> 3] = $30;
_fprintf($1, 37282, $vararg_buffer9) | 0;
STACKTOP = sp;
return;
}
function __Z17CopyJointRotationP13JointRotationPKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $11 = 0, $7 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!(($0 | 0) != 0 & ($1 | 0) != 0)) {
STACKTOP = sp;
return;
}
$7 = HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 24 >> 2] | 0;
$11 = HEAP32[(HEAP32[$1 + 4 >> 2] | 0) + 24 >> 2] | 0;
if (($7 | 0) != ($11 | 0)) {
HEAP32[$vararg_buffer >> 2] = $7;
HEAP32[$vararg_buffer + 4 >> 2] = $11;
__Z7eprintfPKcz(15383, $vararg_buffer);
HEAPF32[$vararg_buffer >> 2] = Math_fround(0.0);
HEAPF32[$vararg_buffer + 4 >> 2] = Math_fround(0.0);
HEAPF32[$vararg_buffer + 8 >> 2] = Math_fround(0.0);
HEAPF32[$vararg_buffer + 12 >> 2] = Math_fround(1.0);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 255]($1, $vararg_buffer);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 255]($0, $vararg_buffer);
STACKTOP = sp;
return;
}
switch ($7 | 0) {
case 5:
{
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] & 255]($0, $1);
STACKTOP = sp;
return;
}
case 2:
{
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] & 255]($0, $1);
STACKTOP = sp;
return;
}
case 3:
{
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] & 255]($0, $1);
STACKTOP = sp;
return;
}
case 4:
{
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] & 255]($0, $1);
STACKTOP = sp;
return;
}
case 1:
{
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] & 255]($0, $1);
STACKTOP = sp;
return;
}
default:
{
STACKTOP = sp;
return;
}
}
}
function __ZN7Gesture14InstallAHConstEv($0) {
$0 = $0 | 0;
var $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $8 = 0;
$1 = $0 + 40 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if (!$2) return;
$8 = $0 + 20 | 0;
$10 = (HEAP32[$8 >> 2] | 0) + 4 | 0;
if (!((HEAP32[16607] ^ HEAP32[$2 >> 2]) & 16777215)) {
$15 = $2 + 12 | 0;
HEAP32[$10 >> 2] = HEAP32[$15 >> 2];
HEAP32[$10 + 4 >> 2] = HEAP32[$15 + 4 >> 2];
HEAP32[$10 + 8 >> 2] = HEAP32[$15 + 8 >> 2];
$17 = $0 + 24 | 0;
$19 = (HEAP32[$17 >> 2] | 0) + 4 | 0;
$20 = (HEAP32[$1 >> 2] | 0) + 24 | 0;
HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
HEAP32[$19 + 4 >> 2] = HEAP32[$20 + 4 >> 2];
HEAP32[$19 + 8 >> 2] = HEAP32[$20 + 8 >> 2];
$$pre$phiZ2D = $17;
} else {
HEAP32[$10 >> 2] = HEAP32[$2 >> 2];
HEAP32[$10 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
HEAP32[$10 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
$11 = HEAP32[$1 >> 2] | 0;
$12 = $0 + 24 | 0;
$14 = (HEAP32[$12 >> 2] | 0) + 4 | 0;
HEAP32[$14 >> 2] = HEAP32[$11 >> 2];
HEAP32[$14 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
HEAP32[$14 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
$$pre$phiZ2D = $12;
}
$23 = (HEAP32[$8 >> 2] | 0) + 16 | 0;
$24 = (HEAP32[$1 >> 2] | 0) + 36 | 0;
HEAP16[$23 >> 1] = HEAP16[$24 >> 1] | 0;
HEAP8[$23 + 2 >> 0] = HEAP8[$24 + 2 >> 0] | 0;
$27 = (HEAP32[$$pre$phiZ2D >> 2] | 0) + 16 | 0;
$28 = (HEAP32[$1 >> 2] | 0) + 40 | 0;
HEAP16[$27 >> 1] = HEAP16[$28 >> 1] | 0;
HEAP8[$27 + 2 >> 0] = HEAP8[$28 + 2 >> 0] | 0;
HEAP32[$0 + 16 >> 2] = HEAP32[(HEAP32[17190] | 0) + (HEAP32[(HEAP32[$1 >> 2] | 0) + 44 >> 2] << 2) >> 2];
return;
}
function __ZN19OneHAbstractPosture15reportUndefinedEP8_IO_FILEb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $13 = 0, $30 = 0, $31 = 0, $4 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$vararg_buffer10 = sp + 32 | 0;
$vararg_buffer7 = sp + 24 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$4 = $2 ? 36340 : 36353;
$7 = HEAP32[16607] | 0;
if (!(($7 ^ HEAP32[$0 + 4 >> 2]) & 16777215)) {
HEAP32[$vararg_buffer >> 2] = $4;
_fprintf($1, 36369, $vararg_buffer) | 0;
$13 = HEAP32[16607] | 0;
} else $13 = $7;
if (!(($13 ^ HEAP32[$0 + 16 >> 2]) & 16777215)) {
HEAP32[$vararg_buffer1 >> 2] = $4;
_fprintf($1, 36393, $vararg_buffer1) | 0;
}
if (Math_fround(HEAPF32[$0 + 20 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 24 >> 2]) == Math_fround(0.0)) if (!(Math_fround(HEAPF32[$0 + 28 >> 2]) != Math_fround(0.0))) {
HEAP32[$vararg_buffer4 >> 2] = $4;
_fprintf($1, 36415, $vararg_buffer4) | 0;
}
if (Math_fround(HEAPF32[$0 + 32 >> 2]) == Math_fround(0.0)) if (!(Math_fround(HEAPF32[$0 + 36 >> 2]) != Math_fround(0.0))) {
HEAP32[$vararg_buffer7 >> 2] = $4;
_fprintf($1, 36453, $vararg_buffer7) | 0;
}
$30 = $0 + 56 | 0;
$31 = HEAP32[$30 >> 2] | 0;
if ($31 | 0) if (__ZNK9Handshape7definedEv($31) | 0) if (HEAP32[(HEAP32[$30 >> 2] | 0) + 236 >> 2] | 0) {
STACKTOP = sp;
return;
}
HEAP32[$vararg_buffer10 >> 2] = $4;
_fprintf($1, 36482, $vararg_buffer10) | 0;
STACKTOP = sp;
return;
}
function __ZN11SeqMovement20propagateChangeFlagsE18PostureChangeFlagsS0_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$02336 = 0, $$lcssa = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $20 = 0, $23 = 0, $24 = 0, $26 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $sext = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp + 10 | 0;
$4 = sp + 8 | 0;
$5 = sp + 6 | 0;
$6 = sp + 4 | 0;
$7 = sp + 2 | 0;
$8 = sp;
HEAP16[$3 >> 1] = HEAPU8[$1 >> 0] | HEAPU8[$1 + 1 >> 0] << 8;
HEAP16[$4 >> 1] = HEAPU8[$2 >> 0] | HEAPU8[$2 + 1 >> 0] << 8;
__ZN13BasicMovement20propagateChangeFlagsE18PostureChangeFlagsS0_($0, $3, $4);
$sext = HEAP32[$0 + 540 >> 2] << 16;
$13 = $sext >> 16;
if (!$13) {
STACKTOP = sp;
return;
}
$15 = $13 + -1 | 0;
$17 = $0 + 528 | 0;
$18 = HEAP32[$17 >> 2] | 0;
if (($sext | 0) > 65536) {
$$02336 = 0;
$29 = $18;
while (1) {
$30 = HEAP32[$29 + ($$02336 << 2) >> 2] | 0;
$33 = HEAP32[(HEAP32[$30 >> 2] | 0) + 28 >> 2] | 0;
HEAP16[$5 >> 1] = 0;
HEAP16[$6 >> 1] = 0;
FUNCTION_TABLE_viii[$33 & 127]($30, $5, $6);
$$02336 = $$02336 + 1 | 0;
$36 = HEAP32[$17 >> 2] | 0;
if (($$02336 | 0) >= ($15 | 0)) {
$$lcssa = $36;
break;
} else $29 = $36;
}
} else $$lcssa = $18;
$20 = HEAP32[$$lcssa + ($15 << 2) >> 2] | 0;
$23 = HEAP32[(HEAP32[$20 >> 2] | 0) + 28 >> 2] | 0;
$24 = $0 + 508 | 0;
HEAP16[$7 >> 1] = HEAPU8[$24 >> 0] | HEAPU8[$24 + 1 >> 0] << 8;
$26 = $0 + 510 | 0;
HEAP16[$8 >> 1] = HEAPU8[$26 >> 0] | HEAPU8[$26 + 1 >> 0] << 8;
FUNCTION_TABLE_viii[$23 & 127]($20, $7, $8);
STACKTOP = sp;
return;
}
function __ZN16CompoundMovementD2Ev($0) {
$0 = $0 | 0;
var $$06$i = 0, $$pr6 = 0, $$pre = 0, $1 = 0, $13 = 0, $19 = 0, $2 = 0, $26 = 0, $28 = 0, $35 = 0, $4 = 0, $7 = 0, $8 = 0, label = 0;
HEAP32[$0 >> 2] = 2972;
$1 = $0 + 528 | 0;
$2 = HEAP32[$1 >> 2] | 0;
$$pre = $0 + 540 | 0;
L1 : do if ($2 | 0) {
$4 = HEAP32[$$pre >> 2] | 0;
do if (($4 | 0) > 0) {
$$06$i = 0;
$35 = $4;
$7 = $2;
while (1) {
$8 = HEAP32[$7 + ($$06$i << 2) >> 2] | 0;
if (!$8) $19 = $35; else {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] | 0, $8 | 0);
$13 = __THREW__;
__THREW__ = 0;
if ($13 & 1) break;
HEAP32[(HEAP32[$1 >> 2] | 0) + ($$06$i << 2) >> 2] = 0;
$19 = HEAP32[$$pre >> 2] | 0;
}
$$06$i = $$06$i + 1 | 0;
$7 = HEAP32[$1 >> 2] | 0;
if (($$06$i | 0) >= ($19 | 0)) {
label = 7;
break;
} else $35 = $19;
}
if ((label | 0) == 7) if (!$7) break L1; else {
$$pr6 = $7;
break;
}
$26 = ___cxa_find_matching_catch_2() | 0;
$28 = HEAP32[$1 >> 2] | 0;
if ($28 | 0) {
_free($28);
HEAP32[$1 >> 2] = 0;
}
HEAP32[$$pre >> 2] = 0;
HEAP32[$0 + 536 >> 2] = 0;
HEAP32[$0 >> 2] = 1984;
HEAP32[$0 + 452 >> 2] = 0;
HEAP32[$0 + 340 >> 2] = 0;
HEAP32[$0 + 228 >> 2] = 0;
HEAP32[$0 + 116 >> 2] = 0;
___resumeException($26 | 0);
} else $$pr6 = $2; while (0);
_free($$pr6);
HEAP32[$1 >> 2] = 0;
} while (0);
HEAP32[$$pre >> 2] = 0;
HEAP32[$0 + 536 >> 2] = 0;
HEAP32[$0 >> 2] = 1984;
HEAP32[$0 + 452 >> 2] = 0;
HEAP32[$0 + 340 >> 2] = 0;
HEAP32[$0 + 228 >> 2] = 0;
HEAP32[$0 + 116 >> 2] = 0;
return;
}
function __ZN13BasicMovementC2E12MovementType12SET_OF_HANDS($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $17 = 0, $19 = 0, $21 = 0, $23 = 0, $25 = 0, $4 = 0, $8 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
HEAP32[$0 >> 2] = 1984;
HEAP32[$0 + 4 >> 2] = $1;
$4 = $0 + 8 | 0;
HEAP32[$4 >> 2] = $2;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 16 >> 2] = 0;
HEAP8[$0 + 20 >> 0] = 0;
$8 = $0 + 24 | 0;
HEAP32[$0 + 36 >> 2] = 0;
HEAPF32[$0 + 40 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 44 >> 2] = Math_fround(0.0);
HEAP32[$8 >> 2] = 0;
HEAP32[$8 + 4 >> 2] = 0;
HEAP16[$8 + 8 >> 1] = 0;
HEAPF32[$0 + 48 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 52 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 56 >> 2] = Math_fround(1.0);
__ZN25TwoHConcretePostureChangeC2Ev($0 + 60 | 0);
switch (HEAP32[$4 >> 2] | 0) {
case 1:
{
__THREW__ = 0;
invoke_vii(115, 42429, sp | 0);
$17 = __THREW__;
__THREW__ = 0;
if (!($17 & 1)) {
$19 = ___cxa_allocate_exception(4) | 0;
HEAP32[$19 >> 2] = 8;
__THREW__ = 0;
invoke_viii(75, $19 | 0, 232, 0);
__THREW__ = 0;
}
break;
}
case 2:
{
__THREW__ = 0;
invoke_vii(115, 42478, sp + 8 | 0);
$21 = __THREW__;
__THREW__ = 0;
if (!($21 & 1)) {
$23 = ___cxa_allocate_exception(4) | 0;
HEAP32[$23 >> 2] = 8;
__THREW__ = 0;
invoke_viii(75, $23 | 0, 232, 0);
__THREW__ = 0;
}
break;
}
default:
{
STACKTOP = sp;
return;
}
}
$25 = ___cxa_find_matching_catch_2() | 0;
HEAP32[$0 + 452 >> 2] = 0;
HEAP32[$0 + 340 >> 2] = 0;
HEAP32[$0 + 228 >> 2] = 0;
HEAP32[$0 + 116 >> 2] = 0;
___resumeException($25 | 0);
}
function __ZN13WristMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $12 = f0, $16 = f0, $18 = 0, $21 = f0, $24 = f0, $25 = 0, $27 = f0, $31 = 0, $32 = 0, $37 = 0, $7 = f0, $9 = 0, $vararg_buffer1 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
__ZN13BasicMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture($0, $1, $2);
if (0) __Z7eprintfPKcz(38690, sp);
$7 = Math_fround(HEAPF32[65084 + (HEAP32[$0 + 532 >> 2] << 2) >> 2]);
$9 = HEAP32[$0 + 528 >> 2] | 0;
$12 = Math_fround($7 * Math_fround(HEAPF32[65192 + ($9 * 24 | 0) >> 2]));
HEAPF32[$0 + 536 >> 2] = $12;
$16 = Math_fround($7 * Math_fround(HEAPF32[65192 + ($9 * 24 | 0) + 4 >> 2]));
HEAPF32[$0 + 540 >> 2] = $16;
$18 = 65192 + ($9 * 24 | 0) + 8 | 0;
HEAP32[$0 + 544 >> 2] = HEAP32[$18 >> 2];
$21 = Math_fround(HEAPF32[$18 >> 2]);
$24 = Math_fround($21 * Math_fround(HEAPF32[65192 + ($9 * 24 | 0) + 12 >> 2]));
$25 = $0 + 40 | 0;
$27 = Math_fround(Math_fround(HEAPF32[$25 >> 2]) * $24);
HEAPF32[$25 >> 2] = $27;
__ZN6Vector7setFromERKS_($0 + 548 | 0, 66560 + ($9 * 12 | 0) | 0);
$31 = HEAP32[$0 + 8 >> 2] | 0;
switch ($31 | 0) {
case 3:
case 5:
{
$32 = $0 + 508 | 0;
HEAP16[$32 >> 1] = HEAP16[$32 >> 1] | 256;
break;
}
default:
{}
}
if (($31 | 1 | 0) == 5) {
$37 = $0 + 510 | 0;
HEAP16[$37 >> 1] = HEAP16[$37 >> 1] | 256;
}
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$0 >> 2] | 0) + 68 >> 2] & 255]($0);
if (!0) {
STACKTOP = sp;
return;
}
__Z7eprintfPKcz(38708, $vararg_buffer1);
STACKTOP = sp;
return;
}
function __ZN17TargettedMovement17GetCurrentPostureER19TwoHConcretePosturefb($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
var $$$i$i = f0, $10 = f0, $11 = 0, $12 = 0, $13 = f0, $19 = f0, $20 = f0, $21 = f0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $5 = f0, $8 = f0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$5 = Math_fround(HEAPF32[$0 + 40 >> 2]);
$8 = Math_fround($5 - Math_fround(HEAPF32[$0 + 44 >> 2]));
if (!($8 <= Math_fround(0.0))) {
$10 = Math_fround($2 / $8);
$11 = $10 < Math_fround(0.0);
$12 = $10 > Math_fround(1.0);
$13 = $12 ? Math_fround(1.0) : $10;
$19 = $11 ? Math_fround(0.0) : $13;
} else $19 = Math_fround(1.0);
$20 = Math_fround(__ZNK10Trajectory16lookupByFractionEf(HEAP32[66492 + (HEAP32[$0 + 12 >> 2] << 2) >> 2] | 0, $19));
$21 = Math_fround(Math_fround(1.0) - $20);
$$$i$i = $3 ? $20 : $21;
if (!0) {
$28 = $0 + 60 | 0;
$29 = $0 + 8 | 0;
$30 = HEAP32[$29 >> 2] | 0;
__ZNK25TwoHConcretePostureChange11interpolateER19TwoHConcretePosturef12SET_OF_HANDSb($28, $1, $$$i$i, $30, $3);
STACKTOP = sp;
return;
}
$25 = HEAP32[$0 + 4 >> 2] | 0;
$27 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[16658] | 0, $25) | 0;
HEAP32[$vararg_buffer >> 2] = $25;
HEAP32[$vararg_buffer + 4 >> 2] = $27;
HEAPF64[$vararg_buffer + 8 >> 3] = +$2;
__Z7eprintfPKcz(35945, $vararg_buffer);
$28 = $0 + 60 | 0;
$29 = $0 + 8 | 0;
$30 = HEAP32[$29 >> 2] | 0;
__ZNK25TwoHConcretePostureChange11interpolateER19TwoHConcretePosturef12SET_OF_HANDSb($28, $1, $$$i$i, $30, $3);
STACKTOP = sp;
return;
}
function __Z19CreateSiGMLHandlersv() {
var $0 = 0, $11 = 0, $16 = 0, $17 = 0, $6 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$vararg_buffer2 = sp + 8 | 0;
$vararg_buffer = sp;
$0 = __Znwj(28) | 0;
HEAP32[$0 + 20 >> 2] = 0;
HEAP32[$0 + 24 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 2;
$6 = _malloc(16) | 0;
HEAP32[$0 >> 2] = $6;
$8 = $0 + 4 | 0;
if ($6 | 0) {
HEAP32[$8 >> 2] = 2;
HEAP32[$6 >> 2] = 0;
HEAP16[$6 + 4 >> 1] = 0;
HEAP32[$6 + 8 >> 2] = 0;
HEAP16[$6 + 12 >> 1] = 0;
HEAP32[16639] = $0;
HEAP32[$vararg_buffer2 >> 2] = 149;
HEAP32[$vararg_buffer2 + 4 >> 2] = 6;
HEAP32[$vararg_buffer2 + 8 >> 2] = 150;
HEAP32[$vararg_buffer2 + 12 >> 2] = 3;
HEAP32[$vararg_buffer2 + 16 >> 2] = 151;
HEAP32[$vararg_buffer2 + 20 >> 2] = 4;
HEAP32[$vararg_buffer2 + 24 >> 2] = 152;
HEAP32[$vararg_buffer2 + 28 >> 2] = 0;
__ZN7HashAnyI13SiGML_ElementPFvPvP7XMLCellEE14addManyToHashXES0_z($0, 5, $vararg_buffer2);
STACKTOP = sp;
return;
}
HEAP32[$8 >> 2] = 0;
__THREW__ = 0;
HEAP32[$vararg_buffer >> 2] = 2;
HEAP32[$vararg_buffer + 4 >> 2] = 8;
invoke_vii(115, 57708, $vararg_buffer | 0);
$9 = __THREW__;
__THREW__ = 0;
if ($9 & 1) {
$16 = ___cxa_find_matching_catch_2() | 0;
$17 = tempRet0;
__ZdlPv($0);
___resumeException($16 | 0);
}
$11 = ___cxa_allocate_exception(4) | 0;
HEAP32[$11 >> 2] = 1;
__THREW__ = 0;
invoke_viii(75, $11 | 0, 32, 0);
__THREW__ = 0;
$16 = ___cxa_find_matching_catch_2() | 0;
$17 = tempRet0;
__ZdlPv($0);
___resumeException($16 | 0);
}
function __GLOBAL__sub_I_Humanoid_cpp() {
var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, dest = 0, sp = 0, stop = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$0 = sp + 48 | 0;
$1 = sp + 36 | 0;
$2 = sp + 24 | 0;
$3 = sp + 12 | 0;
$4 = sp;
HEAPF32[16093] = Math_fround(1.57079637);
HEAPF32[16092] = Math_fround(3.14159274);
HEAPF32[16094] = Math_fround(1.41421354);
__ZN6VectorC2Efff($0, Math_fround(2.0), Math_fround(0.0), Math_fround(0.0));
__ZN6VectorC2Efff($1, Math_fround(1.5), Math_fround(0.0), Math_fround(.75));
__ZN6VectorC2Efff($2, Math_fround(0.0), Math_fround(0.0), Math_fround(1.0));
__ZN6VectorC2Efff($3, Math_fround(-1.5), Math_fround(0.0), Math_fround(.75));
__ZN6VectorC2Efff($4, Math_fround(-2.0), Math_fround(0.0), Math_fround(0.0));
__ZN6VectorC2Ev(64380);
__ZN6VectorC2Ev(64392);
__ZN6VectorC2Ev(64404);
__ZN6VectorC2Ev(64416);
__ZN6VectorC2Ev(64428);
dest = 64440;
stop = dest + 64 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[16095] = HEAP32[$0 >> 2];
HEAP32[16096] = HEAP32[$0 + 4 >> 2];
HEAP32[16097] = HEAP32[$0 + 8 >> 2];
HEAP32[16098] = HEAP32[$1 >> 2];
HEAP32[16099] = HEAP32[$1 + 4 >> 2];
HEAP32[16100] = HEAP32[$1 + 8 >> 2];
HEAP32[16101] = HEAP32[$2 >> 2];
HEAP32[16102] = HEAP32[$2 + 4 >> 2];
HEAP32[16103] = HEAP32[$2 + 8 >> 2];
HEAP32[16104] = HEAP32[$3 >> 2];
HEAP32[16105] = HEAP32[$3 + 4 >> 2];
HEAP32[16106] = HEAP32[$3 + 8 >> 2];
HEAP32[16107] = HEAP32[$4 >> 2];
HEAP32[16108] = HEAP32[$4 + 4 >> 2];
HEAP32[16109] = HEAP32[$4 + 8 >> 2];
__ZN10TorsoCurve10initialiseEv(64380);
STACKTOP = sp;
return;
}
function __ZN9Transform10setComposeERK6VectorRK10Quaternion($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $10 = 0, $11 = f0, $13 = f0, $15 = f0, $16 = f0, $18 = f0, $20 = f0, $21 = 0, $22 = f0, $23 = f0, $25 = f0, $3 = 0, $32 = f0, $39 = f0, $4 = 0, $47 = f0, $5 = 0, $6 = f0, $8 = f0, $9 = f0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp;
__ZN6VectorC2Ev($3);
$4 = $0 + 12 | 0;
__ZNK10Quaternion12rotateVectorERK6VectorRS0_($4, $1, $3);
__ZN6Vector6setAddERKS_($0, $3);
$5 = $0 + 16 | 0;
$6 = Math_fround(HEAPF32[$5 >> 2]);
$8 = Math_fround(HEAPF32[$2 + 8 >> 2]);
$9 = Math_fround($6 * $8);
$10 = $0 + 20 | 0;
$11 = Math_fround(HEAPF32[$10 >> 2]);
$13 = Math_fround(HEAPF32[$2 + 4 >> 2]);
$15 = Math_fround($9 - Math_fround($11 * $13));
$16 = Math_fround(HEAPF32[$4 >> 2]);
$18 = Math_fround(HEAPF32[$2 + 12 >> 2]);
$20 = Math_fround($15 + Math_fround($16 * $18));
$21 = $0 + 24 | 0;
$22 = Math_fround(HEAPF32[$21 >> 2]);
$23 = Math_fround(HEAPF32[$2 >> 2]);
$25 = Math_fround($20 + Math_fround($22 * $23));
$32 = Math_fround(Math_fround($13 * $22) + Math_fround(Math_fround($6 * $18) + Math_fround(Math_fround($11 * $23) - Math_fround($8 * $16))));
$39 = Math_fround(Math_fround($8 * $22) + Math_fround(Math_fround($11 * $18) + Math_fround(Math_fround($13 * $16) - Math_fround($6 * $23))));
$47 = Math_fround(Math_fround($18 * $22) + Math_fround(Math_fround(Math_fround(-Math_fround($16 * $23)) - Math_fround($6 * $13)) - Math_fround($8 * $11)));
HEAPF32[$4 >> 2] = $25;
HEAPF32[$5 >> 2] = $32;
HEAPF32[$10 >> 2] = $39;
HEAPF32[$21 >> 2] = $47;
STACKTOP = sp;
return;
}
function __ZN13BasicMovement17GetCurrentPostureER19TwoHConcretePosturefb($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
var $$$i = f0, $10 = f0, $11 = 0, $12 = 0, $13 = f0, $19 = f0, $20 = f0, $21 = f0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $5 = f0, $8 = f0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$5 = Math_fround(HEAPF32[$0 + 40 >> 2]);
$8 = Math_fround($5 - Math_fround(HEAPF32[$0 + 44 >> 2]));
if (!($8 <= Math_fround(0.0))) {
$10 = Math_fround($2 / $8);
$11 = $10 < Math_fround(0.0);
$12 = $10 > Math_fround(1.0);
$13 = $12 ? Math_fround(1.0) : $10;
$19 = $11 ? Math_fround(0.0) : $13;
} else $19 = Math_fround(1.0);
$20 = Math_fround(__ZNK10Trajectory16lookupByFractionEf(HEAP32[66492 + (HEAP32[$0 + 12 >> 2] << 2) >> 2] | 0, $19));
$21 = Math_fround(Math_fround(1.0) - $20);
$$$i = $3 ? $20 : $21;
if (!0) {
$28 = $0 + 60 | 0;
$29 = $0 + 8 | 0;
$30 = HEAP32[$29 >> 2] | 0;
__ZNK25TwoHConcretePostureChange11interpolateER19TwoHConcretePosturef12SET_OF_HANDSb($28, $1, $$$i, $30, $3);
STACKTOP = sp;
return;
}
$25 = HEAP32[$0 + 4 >> 2] | 0;
$27 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[16658] | 0, $25) | 0;
HEAP32[$vararg_buffer >> 2] = $25;
HEAP32[$vararg_buffer + 4 >> 2] = $27;
HEAPF64[$vararg_buffer + 8 >> 3] = +$2;
__Z7eprintfPKcz(35945, $vararg_buffer);
$28 = $0 + 60 | 0;
$29 = $0 + 8 | 0;
$30 = HEAP32[$29 >> 2] | 0;
__ZNK25TwoHConcretePostureChange11interpolateER19TwoHConcretePosturef12SET_OF_HANDSb($28, $1, $$$i, $30, $3);
STACKTOP = sp;
return;
}
function __ZN7Getopts11OptionValueEPKcS1_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$012$i$i$i$i = 0, $$01215$i$i$i$i = 0, $$01216$i$i$i$i = 0, $$sink$i$i$i$i = 0, $20 = 0, $23 = 0, $30 = 0, $33 = 0, $4 = 0, $40 = 0, $7 = 0, $8 = 0, label = 0;
if (!$1) {
$40 = $2;
return $40 | 0;
}
$4 = HEAP32[$0 >> 2] | 0;
$7 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($1, HEAP32[$4 + 4 >> 2] | 0) | 0;
$8 = HEAP32[$4 >> 2] | 0;
L4 : do if ((HEAP16[$8 + ($7 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i$i = HEAP32[$8 + ($7 << 3) >> 2] | 0;
if (!$$01215$i$i$i$i) label = 7; else {
$$01216$i$i$i$i = $$01215$i$i$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($1, HEAP32[$$01216$i$i$i$i >> 2] | 0) | 0) break;
$$012$i$i$i$i = HEAP32[$$01216$i$i$i$i + 8 >> 2] | 0;
if (!$$012$i$i$i$i) {
label = 7;
break L4;
} else $$01216$i$i$i$i = $$012$i$i$i$i;
}
$$sink$i$i$i$i = $$01216$i$i$i$i + 4 | 0;
}
} else label = 7; while (0);
if ((label | 0) == 7) $$sink$i$i$i$i = $4 + 20 | 0;
$20 = HEAP32[$$sink$i$i$i$i >> 2] | 0;
if (($20 | 0) == -1) {
$40 = $2;
return $40 | 0;
}
$23 = HEAP32[$0 + 8 >> 2] | 0;
if (($20 | 0) < 0) {
$40 = $2;
return $40 | 0;
}
if ((HEAP32[$23 + 12 >> 2] | 0) <= ($20 | 0)) {
$40 = $2;
return $40 | 0;
}
$30 = HEAP32[(HEAP32[$23 >> 2] | 0) + ($20 << 2) >> 2] | 0;
if (!$30) {
$40 = $2;
return $40 | 0;
}
$33 = HEAP32[$30 + 12 >> 2] | 0;
if (!$33) {
$40 = $2;
return $40 | 0;
}
if ((HEAP32[$33 + 12 >> 2] | 0) <= 0) {
$40 = 0;
return $40 | 0;
}
$40 = HEAP32[HEAP32[$33 >> 2] >> 2] | 0;
return $40 | 0;
}
function __ZN15AnimgenInstance8AGIFrameEP7SSFrameRb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$03839 = 0, $$040 = 0, $10 = 0.0, $17 = 0, $19 = 0, $22 = 0, $3 = 0, $32 = 0, $37 = 0.0, $4 = 0, $40 = 0.0, $43 = 0.0, $46 = 0.0, $49 = 0.0, $5 = 0, $52 = 0.0;
$3 = __ZNK7SSFrame12GetNumMorphsEv($1) | 0;
$4 = __ZNK7SSFrame12GetNumPRSetsEv($1) | 0;
$5 = $0 + 36 | 0;
$10 = +Math_fround(Math_fround(HEAPF32[$1 + 28 >> 2]) * Math_fround(1.0e3));
_emscripten_asm_const_iiiidd(7, HEAP32[$5 >> 2] | 0, $4 | 0, $3 | 0, +$10, +(+Math_fround(Math_fround(HEAPF32[$1 + 32 >> 2]) * Math_fround(1.0e3)))) | 0;
if (($3 | 0) > 0) {
$17 = $1 + 16 | 0;
$$040 = 0;
do {
$22 = HEAP32[(HEAP32[$17 >> 2] | 0) + ($$040 << 2) >> 2] | 0;
_emscripten_asm_const_iiid(8, HEAP32[$5 >> 2] | 0, $22 + 4 | 0, +(+Math_fround(HEAPF32[$22 + 12 >> 2]))) | 0;
$$040 = $$040 + 1 | 0;
} while (($$040 | 0) != ($3 | 0));
}
if (($4 | 0) <= 0) {
HEAP8[$2 >> 0] = 1;
return;
}
$19 = $1 + 4 | 0;
$$03839 = 0;
do {
$32 = HEAP32[(HEAP32[$19 >> 2] | 0) + ($$03839 << 2) >> 2] | 0;
$37 = +Math_fround(HEAPF32[$32 + 12 >> 2]);
$40 = +Math_fround(HEAPF32[$32 + 16 >> 2]);
$43 = +Math_fround(HEAPF32[$32 + 20 >> 2]);
$46 = +Math_fround(HEAPF32[$32 + 24 >> 2]);
$49 = +Math_fround(HEAPF32[$32 + 28 >> 2]);
$52 = +Math_fround(HEAPF32[$32 + 32 >> 2]);
_emscripten_asm_const_iiiddddddd(9, HEAP32[$5 >> 2] | 0, $32 + 4 | 0, +$37, +$40, +$43, +$46, +$49, +$52, +(+Math_fround(HEAPF32[$32 + 36 >> 2]))) | 0;
$$03839 = $$03839 + 1 | 0;
} while (($$03839 | 0) != ($4 | 0));
HEAP8[$2 >> 0] = 1;
return;
}
function __ZNK19TurretJointRotation5printEP8_IO_FILEs($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $10 = 0.0, $13 = 0.0, $16 = 0.0, $19 = 0.0, $22 = 0.0, $25 = 0.0, $28 = 0.0, $31 = 0.0, $7 = 0, $vararg_buffer = 0, $vararg_buffer9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 128 | 0;
$vararg_buffer9 = sp + 64 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$7 = $2 << 16 >> 16;
$10 = +Math_fround(HEAPF32[$0 + 8 >> 2]);
$13 = +Math_fround(HEAPF32[$0 + 12 >> 2]);
$16 = +Math_fround(HEAPF32[$0 + 16 >> 2]);
$19 = +Math_fround(HEAPF32[$0 + 32 >> 2]);
HEAP32[$vararg_buffer >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2];
HEAP32[$vararg_buffer + 4 >> 2] = $7;
HEAPF64[$vararg_buffer + 8 >> 3] = $10;
HEAP32[$vararg_buffer + 16 >> 2] = $7;
HEAPF64[$vararg_buffer + 24 >> 3] = $13;
HEAP32[$vararg_buffer + 32 >> 2] = $7;
HEAPF64[$vararg_buffer + 40 >> 3] = $16;
HEAP32[$vararg_buffer + 48 >> 2] = $7;
HEAPF64[$vararg_buffer + 56 >> 3] = $19;
_fprintf($1, 13718, $vararg_buffer) | 0;
$22 = +Math_fround(HEAPF32[$0 + 20 >> 2]);
$25 = +Math_fround(HEAPF32[$0 + 24 >> 2]);
$28 = +Math_fround(HEAPF32[$0 + 28 >> 2]);
$31 = +Math_fround(HEAPF32[$0 + 36 >> 2]);
HEAP32[$vararg_buffer9 >> 2] = $7;
HEAPF64[$vararg_buffer9 + 8 >> 3] = $22;
HEAP32[$vararg_buffer9 + 16 >> 2] = $7;
HEAPF64[$vararg_buffer9 + 24 >> 3] = $25;
HEAP32[$vararg_buffer9 + 32 >> 2] = $7;
HEAPF64[$vararg_buffer9 + 40 >> 3] = $28;
HEAP32[$vararg_buffer9 + 48 >> 2] = $7;
HEAPF64[$vararg_buffer9 + 56 >> 3] = $31;
_fprintf($1, 13752, $vararg_buffer9) | 0;
STACKTOP = sp;
return;
}
function __ZNK13FingerBending10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$pre = 0, $19 = 0, $2 = 0, $21 = 0, $24 = 0, $27 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
$$pre = $0 + 4 | 0;
if (!(Math_fround(HEAPF32[$0 >> 2]) != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$$pre >> 2]) != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$0 + 8 >> 2]) != Math_fround(-100.0))) if (!(Math_fround(HEAPF32[$0 + 12 >> 2]) != Math_fround(-100.0))) {
STACKTOP = sp;
return;
}
HEAP32[$1 + (HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0) + 8 >> 2] = 2;
$19 = __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEf($1, Math_fround(HEAPF32[$0 >> 2])) | 0;
HEAP8[$2 >> 0] = 32;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($19, $2, 1) | 0;
$21 = __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEf($1, Math_fround(HEAPF32[$$pre >> 2])) | 0;
HEAP8[$2 >> 0] = 32;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($21, $2, 1) | 0;
__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEf($1, Math_fround(HEAPF32[$0 + 8 >> 2])) | 0;
$24 = $0 + 12 | 0;
if (!(Math_fround(HEAPF32[$24 >> 2]) != Math_fround(-100.0))) {
STACKTOP = sp;
return;
}
HEAP8[$2 >> 0] = 32;
$27 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2, 1) | 0;
__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEf($27, Math_fround(HEAPF32[$24 >> 2])) | 0;
STACKTOP = sp;
return;
}
function __ZN7HashAnyIPKciE9emptyHashEi($0) {
$0 = $0 | 0;
var $1 = 0, $10 = 0, $12 = 0, $23 = 0, $29 = 0, $30 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$1 = __Znwj(28) | 0;
HEAP32[$1 + 20 >> 2] = $0;
HEAP32[$1 + 24 >> 2] = 0;
HEAP32[$1 + 8 >> 2] = 0;
HEAP32[$1 + 16 >> 2] = 0;
HEAP32[$1 + 12 >> 2] = 9;
$7 = _malloc(72) | 0;
HEAP32[$1 >> 2] = $7;
$9 = $1 + 4 | 0;
if (!$7) {
HEAP32[$9 >> 2] = 0;
__THREW__ = 0;
HEAP32[$vararg_buffer >> 2] = 9;
HEAP32[$vararg_buffer + 4 >> 2] = 8;
invoke_vii(115, 57708, $vararg_buffer | 0);
$10 = __THREW__;
__THREW__ = 0;
if ($10 & 1) {
$29 = ___cxa_find_matching_catch_2() | 0;
$30 = tempRet0;
__ZdlPv($1);
___resumeException($29 | 0);
}
$12 = ___cxa_allocate_exception(4) | 0;
HEAP32[$12 >> 2] = 1;
__THREW__ = 0;
invoke_viii(75, $12 | 0, 32, 0);
__THREW__ = 0;
$29 = ___cxa_find_matching_catch_2() | 0;
$30 = tempRet0;
__ZdlPv($1);
___resumeException($29 | 0);
} else {
HEAP32[$9 >> 2] = 9;
HEAP32[$7 >> 2] = 0;
HEAP16[$7 + 4 >> 1] = 0;
HEAP32[$7 + 8 >> 2] = 0;
HEAP16[$7 + 12 >> 1] = 0;
HEAP32[$7 + 16 >> 2] = 0;
HEAP16[(HEAP32[$1 >> 2] | 0) + 20 >> 1] = 0;
if ((HEAP32[$9 >> 2] | 0) > 3) $23 = 3; else {
STACKTOP = sp;
return $1 | 0;
}
do {
HEAP32[(HEAP32[$1 >> 2] | 0) + ($23 << 3) >> 2] = 0;
HEAP16[(HEAP32[$1 >> 2] | 0) + ($23 << 3) + 4 >> 1] = 0;
$23 = $23 + 1 | 0;
} while (($23 | 0) < (HEAP32[$9 >> 2] | 0));
STACKTOP = sp;
return $1 | 0;
}
return 0;
}
function __ZN5Joint17completeInitFrameEv($0) {
$0 = $0 | 0;
var $$012 = 0, $$0913 = 0, $1 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $27 = 0, $28 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $8 = 0, $9 = 0;
$1 = $0 + 40 | 0;
$2 = $0 + 68 | 0;
HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
HEAP32[$2 + 20 >> 2] = HEAP32[$1 + 20 >> 2];
HEAP32[$2 + 24 >> 2] = HEAP32[$1 + 24 >> 2];
$4 = HEAP32[$0 + 8 >> 2] | 0;
if ($4 | 0) __ZN9Transform13setPreComposeERK6VectorRK10Quaternion($2, $4 + 68 | 0, $4 + 80 | 0);
$8 = $0 + 12 | 0;
$9 = HEAP32[$8 >> 2] | 0;
if ($9 | 0) if ((HEAP32[$9 + 12 >> 2] | 0) > 0) {
$$0913 = 0;
$16 = $9;
$18 = 0;
do {
if ($$0913 << 16 >> 16 < 0) $20 = 0; else $20 = HEAP32[(HEAP32[$16 >> 2] | 0) + ($18 << 2) >> 2] | 0;
__ZN5Joint17completeInitFrameEv($20);
$$0913 = $$0913 + 1 << 16 >> 16;
$18 = $$0913 << 16 >> 16;
$16 = HEAP32[$8 >> 2] | 0;
} while ((HEAP32[$16 + 12 >> 2] | 0) > ($18 | 0));
}
$27 = $0 + 16 | 0;
$28 = HEAP32[$27 >> 2] | 0;
if (!$28) return;
if ((HEAP32[$28 + 12 >> 2] | 0) > 0) {
$$012 = 0;
$35 = $28;
$37 = 0;
} else return;
do {
if ($$012 << 16 >> 16 < 0) $39 = 0; else $39 = HEAP32[(HEAP32[$35 >> 2] | 0) + ($37 << 2) >> 2] | 0;
__ZN4Site21computeGlobalPositionEv($39);
$$012 = $$012 + 1 << 16 >> 16;
$37 = $$012 << 16 >> 16;
$35 = HEAP32[$27 >> 2] | 0;
} while ((HEAP32[$35 + 12 >> 2] | 0) > ($37 | 0));
return;
}
function __ZNK14RepeatMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp;
__ZNK13BasicMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($0, $1, $2);
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, $2, 50859, HEAP32[$0 + 528 >> 2] | 0, HEAP32[17763] | 0);
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, $2, 50888, HEAP32[$0 + 532 >> 2] | 0, HEAP32[17763] | 0);
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, $2, 50947, HEAP32[$0 + 536 >> 2] | 0, HEAP32[17759] | 0);
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, $2, 50967, HEAP32[$0 + 540 >> 2] | 0, HEAP32[17762] | 0);
HEAP32[$3 >> 2] = HEAP32[$0 + 544 >> 2];
HEAP32[$3 + 4 >> 2] = HEAP32[$0 + 548 >> 2];
HEAP32[$3 + 8 >> 2] = HEAP32[$0 + 552 >> 2];
__ZL20printDirection3SiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKc10Direction3($1, $2, 50992, $3);
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, $2, 51028, HEAP32[$0 + 560 >> 2] | 0, HEAP32[17759] | 0);
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, $2, 51047, HEAP32[$0 + 564 >> 2] | 0, HEAP32[17762] | 0);
STACKTOP = sp;
return;
}
function __ZN13SeqTimedMorphD0Ev($0) {
$0 = $0 | 0;
var $$06$i$i = 0, $$pre = 0, $$pre$i = 0, $1 = 0, $10 = 0, $11 = 0, $16 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $7 = 0, label = 0;
HEAP32[$0 >> 2] = 3324;
$1 = $0 + 24 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if (!$2) {
__ZdlPv($0);
return;
}
$4 = HEAP32[$2 >> 2] | 0;
L4 : do if (!$4) $26 = $2; else {
$6 = $2 + 12 | 0;
$7 = HEAP32[$6 >> 2] | 0;
do if (($7 | 0) > 0) {
$$06$i$i = 0;
$10 = $4;
$29 = $7;
while (1) {
$11 = HEAP32[$10 + ($$06$i$i << 2) >> 2] | 0;
if (!$11) $22 = $29; else {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$11 >> 2] | 0) + 4 >> 2] | 0, $11 | 0);
$16 = __THREW__;
__THREW__ = 0;
if ($16 & 1) {
label = 14;
break;
}
HEAP32[(HEAP32[$2 >> 2] | 0) + ($$06$i$i << 2) >> 2] = 0;
$22 = HEAP32[$6 >> 2] | 0;
}
$20 = $$06$i$i + 1 | 0;
if (($20 | 0) >= ($22 | 0)) break;
$$06$i$i = $20;
$10 = HEAP32[$2 >> 2] | 0;
$29 = $22;
}
if ((label | 0) == 14) {
$27 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($0);
___resumeException($27 | 0);
}
$$pre$i = HEAP32[$1 >> 2] | 0;
if (!$$pre$i) {
__ZdlPv($0);
return;
} else {
$$pre = HEAP32[$$pre$i >> 2] | 0;
if (!$$pre) {
$26 = $$pre$i;
break L4;
} else {
$25 = $$pre;
$30 = $$pre$i;
break;
}
}
} else {
$25 = $4;
$30 = $2;
} while (0);
_free($25);
$26 = $30;
} while (0);
__ZdlPv($26);
__ZdlPv($0);
return;
}
function __ZN13ParTimedMorphD0Ev($0) {
$0 = $0 | 0;
var $$06$i$i = 0, $$pre = 0, $$pre$i = 0, $1 = 0, $10 = 0, $11 = 0, $16 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $7 = 0, label = 0;
HEAP32[$0 >> 2] = 3260;
$1 = $0 + 24 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if (!$2) {
__ZdlPv($0);
return;
}
$4 = HEAP32[$2 >> 2] | 0;
L4 : do if (!$4) $26 = $2; else {
$6 = $2 + 12 | 0;
$7 = HEAP32[$6 >> 2] | 0;
do if (($7 | 0) > 0) {
$$06$i$i = 0;
$10 = $4;
$29 = $7;
while (1) {
$11 = HEAP32[$10 + ($$06$i$i << 2) >> 2] | 0;
if (!$11) $22 = $29; else {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$11 >> 2] | 0) + 4 >> 2] | 0, $11 | 0);
$16 = __THREW__;
__THREW__ = 0;
if ($16 & 1) {
label = 14;
break;
}
HEAP32[(HEAP32[$2 >> 2] | 0) + ($$06$i$i << 2) >> 2] = 0;
$22 = HEAP32[$6 >> 2] | 0;
}
$20 = $$06$i$i + 1 | 0;
if (($20 | 0) >= ($22 | 0)) break;
$$06$i$i = $20;
$10 = HEAP32[$2 >> 2] | 0;
$29 = $22;
}
if ((label | 0) == 14) {
$27 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($0);
___resumeException($27 | 0);
}
$$pre$i = HEAP32[$1 >> 2] | 0;
if (!$$pre$i) {
__ZdlPv($0);
return;
} else {
$$pre = HEAP32[$$pre$i >> 2] | 0;
if (!$$pre) {
$26 = $$pre$i;
break L4;
} else {
$25 = $$pre;
$30 = $$pre$i;
break;
}
}
} else {
$25 = $4;
$30 = $2;
} while (0);
_free($25);
$26 = $30;
} while (0);
__ZdlPv($26);
__ZdlPv($0);
return;
}
function __ZN7SSFrame8SetMorphEjPcf($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = Math_fround($3);
var $10 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $18 = 0, $21 = 0, $29 = 0, $30 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$4 = sp;
$5 = __Znwj(16) | 0;
__THREW__ = 0;
invoke_viif(1, $5 | 0, $2 | 0, +$3);
$6 = __THREW__;
__THREW__ = 0;
if ($6 & 1) {
$39 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($5);
___resumeException($39 | 0);
}
$8 = $0 + 16 | 0;
$9 = $0 + 20 | 0;
$10 = HEAP32[$9 >> 2] | 0;
$11 = HEAP32[$8 >> 2] | 0;
$13 = $10 - $11 >> 2;
$15 = $11;
if (($13 | 0) > ($1 | 0)) $29 = $15; else {
$16 = $1 + 1 | 0;
HEAP32[$4 >> 2] = 0;
$18 = $10;
if ($16 >>> 0 > $13 >>> 0) {
__ZNSt3__26vectorIP7SSMorphNS_9allocatorIS2_EEE8__appendEjRKS2_($8, $16 - $13 | 0, $4);
$41 = HEAP32[$8 >> 2] | 0;
} else if ($16 >>> 0 < $13 >>> 0) {
$21 = $15 + ($16 << 2) | 0;
if (($21 | 0) == ($18 | 0)) $41 = $15; else {
HEAP32[$9 >> 2] = $18 + (~(($18 + -4 - $21 | 0) >>> 2) << 2);
$41 = $15;
}
} else $41 = $15;
$29 = $41;
}
$30 = HEAP32[$29 + ($1 << 2) >> 2] | 0;
if (!$30) {
$38 = $29;
$37 = $38 + ($1 << 2) | 0;
HEAP32[$37 >> 2] = $5;
STACKTOP = sp;
return;
}
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$30 >> 2] | 0) + 4 >> 2] & 255]($30);
HEAP32[(HEAP32[$8 >> 2] | 0) + ($1 << 2) >> 2] = 0;
$38 = HEAP32[$8 >> 2] | 0;
$37 = $38 + ($1 << 2) | 0;
HEAP32[$37 >> 2] = $5;
STACKTOP = sp;
return;
}
function _little2_predefinedEntityName($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0 = 0, $18 = 0;
L1 : do switch (($2 - $1 | 0) / 2 | 0 | 0) {
case 2:
{
if (!(HEAP8[$1 + 3 >> 0] | 0)) if ((HEAP8[$1 + 2 >> 0] | 0) == 116) {
if (!(HEAP8[$1 + 1 >> 0] | 0)) $18 = HEAP8[$1 >> 0] | 0; else $18 = -1;
$$0 = ($18 | 0) == 108 ? 60 : ($18 | 0) == 103 ? 62 : 0;
return $$0 | 0;
}
break;
}
case 3:
{
if (!(HEAP8[$1 + 1 >> 0] | 0)) if ((HEAP8[$1 >> 0] | 0) == 97) if (!(HEAP8[$1 + 3 >> 0] | 0)) if ((HEAP8[$1 + 2 >> 0] | 0) == 109) if (!(HEAP8[$1 + 5 >> 0] | 0)) if ((HEAP8[$1 + 4 >> 0] | 0) == 112) {
$$0 = 38;
return $$0 | 0;
}
break;
}
case 4:
{
if (!(HEAP8[$1 + 1 >> 0] | 0)) switch (HEAP8[$1 >> 0] | 0) {
case 113:
{
if (HEAP8[$1 + 3 >> 0] | 0) break L1;
if ((HEAP8[$1 + 2 >> 0] | 0) != 117) break L1;
if (HEAP8[$1 + 5 >> 0] | 0) break L1;
if ((HEAP8[$1 + 4 >> 0] | 0) != 111) break L1;
if (HEAP8[$1 + 7 >> 0] | 0) break L1;
if ((HEAP8[$1 + 6 >> 0] | 0) == 116) $$0 = 34; else break L1;
return $$0 | 0;
}
case 97:
{
if (HEAP8[$1 + 3 >> 0] | 0) break L1;
if ((HEAP8[$1 + 2 >> 0] | 0) != 112) break L1;
if (HEAP8[$1 + 5 >> 0] | 0) break L1;
if ((HEAP8[$1 + 4 >> 0] | 0) != 111) break L1;
if (HEAP8[$1 + 7 >> 0] | 0) break L1;
if ((HEAP8[$1 + 6 >> 0] | 0) == 115) $$0 = 39; else break L1;
return $$0 | 0;
}
default:
break L1;
}
break;
}
default:
{}
} while (0);
$$0 = 0;
return $$0 | 0;
}
function _big2_predefinedEntityName($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0 = 0, $18 = 0;
L1 : do switch (($2 - $1 | 0) / 2 | 0 | 0) {
case 2:
{
if (!(HEAP8[$1 + 2 >> 0] | 0)) if ((HEAP8[$1 + 3 >> 0] | 0) == 116) {
if (!(HEAP8[$1 >> 0] | 0)) $18 = HEAP8[$1 + 1 >> 0] | 0; else $18 = -1;
$$0 = ($18 | 0) == 108 ? 60 : ($18 | 0) == 103 ? 62 : 0;
return $$0 | 0;
}
break;
}
case 3:
{
if (!(HEAP8[$1 >> 0] | 0)) if ((HEAP8[$1 + 1 >> 0] | 0) == 97) if (!(HEAP8[$1 + 2 >> 0] | 0)) if ((HEAP8[$1 + 3 >> 0] | 0) == 109) if (!(HEAP8[$1 + 4 >> 0] | 0)) if ((HEAP8[$1 + 5 >> 0] | 0) == 112) {
$$0 = 38;
return $$0 | 0;
}
break;
}
case 4:
{
if (!(HEAP8[$1 >> 0] | 0)) switch (HEAP8[$1 + 1 >> 0] | 0) {
case 113:
{
if (HEAP8[$1 + 2 >> 0] | 0) break L1;
if ((HEAP8[$1 + 3 >> 0] | 0) != 117) break L1;
if (HEAP8[$1 + 4 >> 0] | 0) break L1;
if ((HEAP8[$1 + 5 >> 0] | 0) != 111) break L1;
if (HEAP8[$1 + 6 >> 0] | 0) break L1;
if ((HEAP8[$1 + 7 >> 0] | 0) == 116) $$0 = 34; else break L1;
return $$0 | 0;
}
case 97:
{
if (HEAP8[$1 + 2 >> 0] | 0) break L1;
if ((HEAP8[$1 + 3 >> 0] | 0) != 112) break L1;
if (HEAP8[$1 + 4 >> 0] | 0) break L1;
if ((HEAP8[$1 + 5 >> 0] | 0) != 111) break L1;
if (HEAP8[$1 + 6 >> 0] | 0) break L1;
if ((HEAP8[$1 + 7 >> 0] | 0) == 115) $$0 = 39; else break L1;
return $$0 | 0;
}
default:
break L1;
}
break;
}
default:
{}
} while (0);
$$0 = 0;
return $$0 | 0;
}
function __ZNK11HanimAvatar12locateSiteIDEbRK10SiteIDPairP6VectorRP5JointRP4Site($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
var $10 = 0, $18 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpcast12$byval_copy = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$tmpcast12$byval_copy = sp + 28 | 0;
$6 = sp + 24 | 0;
$7 = sp + 12 | 0;
$8 = sp + 8 | 0;
$9 = sp + 4 | 0;
$10 = sp;
HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
HEAP8[$tmpcast12$byval_copy >> 0] = HEAP8[$6 >> 0] | 0;
HEAP8[$tmpcast12$byval_copy + 1 >> 0] = HEAP8[$6 + 1 >> 0] | 0;
HEAP8[$tmpcast12$byval_copy + 2 >> 0] = HEAP8[$6 + 2 >> 0] | 0;
HEAP8[$tmpcast12$byval_copy + 3 >> 0] = HEAP8[$6 + 3 >> 0] | 0;
__ZNK11HanimAvatar12locateSiteIDEb6SiteIDP6VectorRP5JointRP4Site($0, $1, $tmpcast12$byval_copy, $3, $4, $5);
if (!((HEAP32[16607] ^ HEAP32[$2 + 4 >> 2]) & 16777215)) {
STACKTOP = sp;
return;
}
__ZN6VectorC2Ev($7);
HEAP32[$8 >> 2] = 0;
HEAP32[$9 >> 2] = 0;
HEAP32[$10 >> 2] = HEAP32[$2 >> 2];
$18 = ($3 | 0) == 0;
HEAP8[$tmpcast12$byval_copy >> 0] = HEAP8[$10 >> 0] | 0;
HEAP8[$tmpcast12$byval_copy + 1 >> 0] = HEAP8[$10 + 1 >> 0] | 0;
HEAP8[$tmpcast12$byval_copy + 2 >> 0] = HEAP8[$10 + 2 >> 0] | 0;
HEAP8[$tmpcast12$byval_copy + 3 >> 0] = HEAP8[$10 + 3 >> 0] | 0;
__ZNK11HanimAvatar12locateSiteIDEb6SiteIDP6VectorRP5JointRP4Site($0, $1, $tmpcast12$byval_copy, $18 ? 0 : $7, $8, $9);
if (!$18) __ZN6Vector11setMidPointERKS_S1_f($3, $3, $7, Math_fround(HEAPF32[$2 + 8 >> 2]));
STACKTOP = sp;
return;
}
function __ZNK18SphereInterpolator11interpolateERK6Vector($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = f0, $15 = f0, $16 = 0, $17 = f0, $19 = 0, $2 = 0, $27 = f0, $28 = f0, $29 = f0, $3 = 0, $31 = f0, $32 = f0, $4 = 0, $6 = 0, $7 = 0, $or$cond$i = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$2 = sp + 24 | 0;
$3 = sp + 12 | 0;
$4 = sp;
$6 = Math_fround(HEAPF32[$1 >> 2]) == Math_fround(0.0);
$7 = $1 + 4 | 0;
if ($6 & Math_fround(HEAPF32[$7 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$1 + 8 >> 2]) == Math_fround(0.0)) {
$$0 = Math_fround(HEAPF32[$0 + 336 >> 2]);
STACKTOP = sp;
return Math_fround($$0);
}
__ZN6VectorC2Ev($2);
$15 = Math_fround(HEAPF32[$1 >> 2]);
$16 = $15 == Math_fround(0.0);
$17 = Math_fround(HEAPF32[$7 >> 2]);
$or$cond$i = $16 & $17 == Math_fround(0.0);
$19 = $1 + 8 | 0;
if ($or$cond$i & Math_fround(HEAPF32[$19 >> 2]) == Math_fround(0.0)) __ZN6Vector7setZeroEv($2); else __ZNK18OctantInterpolator11interpolateERK6VectorRS0_($0 + (($15 >= Math_fround(0.0) & 1) * 168 | 0) + (($17 >= Math_fround(0.0) & 1) * 84 | 0) | 0, $1, $2);
$27 = Math_fround(HEAPF32[$1 >> 2]);
$28 = Math_fround(HEAPF32[$7 >> 2]);
$29 = Math_fround($27 * $28);
$31 = Math_fround(-Math_fround($27 * $27));
$32 = Math_fround(HEAPF32[$19 >> 2]);
__ZN6VectorC2Efff($3, $29, Math_fround($31 - Math_fround($32 * $32)), Math_fround($28 * $32));
__ZN6VectorC2ERKS_($4, $1);
__ZN6Vector7setUnitEv($4) | 0;
$$0 = Math_fround(__ZNK6Vector9angleWithERKS_S1_($3, $2, $4));
STACKTOP = sp;
return Math_fround($$0);
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $21 = 0, $9 = 0;
if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); else {
$9 = $1 + 52 | 0;
$10 = HEAP8[$9 >> 0] | 0;
$11 = $1 + 53 | 0;
$12 = HEAP8[$11 >> 0] | 0;
$15 = HEAP32[$0 + 12 >> 2] | 0;
$16 = $0 + 16 + ($15 << 3) | 0;
HEAP8[$9 >> 0] = 0;
HEAP8[$11 >> 0] = 0;
__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0 + 16 | 0, $1, $2, $3, $4, $5);
L4 : do if (($15 | 0) > 1) {
$19 = $1 + 24 | 0;
$20 = $0 + 8 | 0;
$21 = $1 + 54 | 0;
$$0 = $0 + 24 | 0;
do {
if (HEAP8[$21 >> 0] | 0) break L4;
if (!(HEAP8[$9 >> 0] | 0)) {
if (HEAP8[$11 >> 0] | 0) if (!(HEAP32[$20 >> 2] & 1)) break L4;
} else {
if ((HEAP32[$19 >> 2] | 0) == 1) break L4;
if (!(HEAP32[$20 >> 2] & 2)) break L4;
}
HEAP8[$9 >> 0] = 0;
HEAP8[$11 >> 0] = 0;
__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0, $1, $2, $3, $4, $5);
$$0 = $$0 + 8 | 0;
} while ($$0 >>> 0 < $16 >>> 0);
} while (0);
HEAP8[$9 >> 0] = $10;
HEAP8[$11 >> 0] = $12;
}
return;
}
function __ZNK14RepeatMovement10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $14 = 0, $19 = 0;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36843, 1) | 0, 51484, 10) | 0, 49554, 1) | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$0 >> 2] | 0) + 84 >> 2] & 127]($0, $1, 0);
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36571, 2) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
$14 = HEAP32[$0 + 696 >> 2] | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$14 >> 2] | 0) + 80 >> 2] & 255]($14, $1);
$19 = (HEAP16[36078] | 0) + -1 << 16 >> 16;
HEAP16[36078] = $19;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, $19 << 16 >> 16);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36574, 2) | 0, 51484, 10) | 0, 36571, 2) | 0;
return;
}
function __ZN11OneHGesture18ConcreteLocateSiteER6Vector6SiteID($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $tmpcast$byval_copy = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$tmpcast$byval_copy = sp + 28 | 0;
$3 = sp + 16 | 0;
$4 = sp + 12 | 0;
$5 = sp + 8 | 0;
$6 = sp + 4 | 0;
__ZN6VectorC2Ev($3);
HEAP32[$4 >> 2] = 0;
HEAP32[$5 >> 2] = 0;
$7 = $0 + 72 | 0;
$9 = HEAP32[HEAP32[$7 >> 2] >> 2] | 0;
HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$6 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$6 + 1 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 2 >> 0] = HEAP8[$6 + 2 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 3 >> 0] = HEAP8[$6 + 3 >> 0] | 0;
__ZNK11HanimAvatar12locateSiteIDEb6SiteIDP6VectorRP5JointRP4Site($9, 0, $tmpcast$byval_copy, $3, $4, $5);
$11 = HEAP32[$4 >> 2] | 0;
if ($11 | 0) {
__ZN7Gesture16transferLocationER6VectorP5JointS3_RKS0_(HEAP32[$7 >> 2] | 0, $1, 0, $11, $3);
STACKTOP = sp;
return;
}
if (!1) {
STACKTOP = sp;
return;
}
__Z7LogTimev() | 0;
__Z7eprintfPKcz(49113, sp);
__ZNK6SiteID5printEP8_IO_FILE($2, HEAP32[16082] | 0);
__Z5eputcc(10);
__Z5eputsPKc(49166);
__ZNK6Vector5printEP8_IO_FILEi($3, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
if (!(HEAP32[$5 >> 2] | 0)) {
__Z5eputsPKc(49197);
STACKTOP = sp;
return;
} else {
__Z5eputsPKc(49181);
__ZNK4Site5printEP8_IO_FILE(HEAP32[$5 >> 2] | 0, HEAP32[16082] | 0);
__Z5eputcc(10);
STACKTOP = sp;
return;
}
}
function __ZNK13WristMovement12CopyMovementEv($0) {
$0 = $0 | 0;
var $1 = 0, $11 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $6 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$1 = __Znwj(560) | 0;
HEAP32[$1 >> 2] = 1984;
HEAP32[$1 + 12 >> 2] = 0;
HEAP32[$1 + 16 >> 2] = 0;
HEAP8[$1 + 20 >> 0] = 0;
__THREW__ = 0;
invoke_vi(141, $1 + 60 | 0);
$6 = __THREW__;
__THREW__ = 0;
if ($6 & 1) {
$16 = ___cxa_find_matching_catch_2() | 0;
$17 = tempRet0;
__ZdlPv($1);
___resumeException($16 | 0);
}
$8 = $1 + 4 | 0;
$9 = $0 + 4 | 0;
_memcpy($8 | 0, $9 | 0, 524) | 0;
HEAP32[$1 >> 2] = 2464;
__THREW__ = 0;
invoke_vi(98, $1 + 548 | 0);
$11 = __THREW__;
__THREW__ = 0;
if ($11 & 1) {
$16 = ___cxa_find_matching_catch_2() | 0;
$17 = tempRet0;
__ZdlPv($1);
___resumeException($16 | 0);
}
_memcpy($8 | 0, $9 | 0, 524) | 0;
$13 = $1 + 528 | 0;
$14 = $0 + 528 | 0;
HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
HEAP32[$13 + 4 >> 2] = HEAP32[$14 + 4 >> 2];
HEAP32[$13 + 8 >> 2] = HEAP32[$14 + 8 >> 2];
HEAP32[$13 + 12 >> 2] = HEAP32[$14 + 12 >> 2];
HEAP32[$13 + 16 >> 2] = HEAP32[$14 + 16 >> 2];
HEAP32[$13 + 20 >> 2] = HEAP32[$14 + 20 >> 2];
HEAP32[$13 + 24 >> 2] = HEAP32[$14 + 24 >> 2];
HEAP32[$13 + 28 >> 2] = HEAP32[$14 + 28 >> 2];
if (!0) {
STACKTOP = sp;
return $1 | 0;
}
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer >> 2] = $0;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
__Z7eprintfPKcz(38724, $vararg_buffer);
STACKTOP = sp;
return $1 | 0;
}
function __ZL25default_terminate_handlerv() {
var $0 = 0, $1 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $3 = 0, $30 = 0, $34 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$vararg_buffer10 = sp + 32 | 0;
$vararg_buffer7 = sp + 24 | 0;
$vararg_buffer3 = sp + 16 | 0;
$vararg_buffer = sp;
$0 = sp + 36 | 0;
$1 = ___cxa_get_globals_fast() | 0;
if ($1 | 0) {
$3 = HEAP32[$1 >> 2] | 0;
if ($3 | 0) {
$7 = $3 + 48 | 0;
$9 = HEAP32[$7 >> 2] | 0;
$12 = HEAP32[$7 + 4 >> 2] | 0;
if (!(($9 & -256 | 0) == 1126902528 & ($12 | 0) == 1129074247)) {
HEAP32[$vararg_buffer7 >> 2] = 63716;
_abort_message(63666, $vararg_buffer7);
}
if (($9 | 0) == 1126902529 & ($12 | 0) == 1129074247) $22 = HEAP32[$3 + 44 >> 2] | 0; else $22 = $3 + 80 | 0;
HEAP32[$0 >> 2] = $22;
$23 = HEAP32[$3 >> 2] | 0;
$25 = HEAP32[$23 + 4 >> 2] | 0;
if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[146] | 0) + 16 >> 2] & 31](584, $23, $0) | 0) {
$30 = HEAP32[$0 >> 2] | 0;
$34 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 8 >> 2] & 63]($30) | 0;
HEAP32[$vararg_buffer >> 2] = 63716;
HEAP32[$vararg_buffer + 4 >> 2] = $25;
HEAP32[$vararg_buffer + 8 >> 2] = $34;
_abort_message(63580, $vararg_buffer);
} else {
HEAP32[$vararg_buffer3 >> 2] = 63716;
HEAP32[$vararg_buffer3 + 4 >> 2] = $25;
_abort_message(63625, $vararg_buffer3);
}
}
}
_abort_message(63704, $vararg_buffer10);
}
function __ZN18HandJointRotations7setFromEPKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__Z17CopyJointRotationP13JointRotationPKS_(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0);
__Z17CopyJointRotationP13JointRotationPKS_(HEAP32[$0 + 4 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0);
__Z17CopyJointRotationP13JointRotationPKS_(HEAP32[$0 + 8 >> 2] | 0, HEAP32[$1 + 8 >> 2] | 0);
__Z17CopyJointRotationP13JointRotationPKS_(HEAP32[$0 + 12 >> 2] | 0, HEAP32[$1 + 12 >> 2] | 0);
__Z17CopyJointRotationP13JointRotationPKS_(HEAP32[$0 + 16 >> 2] | 0, HEAP32[$1 + 16 >> 2] | 0);
__Z17CopyJointRotationP13JointRotationPKS_(HEAP32[$0 + 20 >> 2] | 0, HEAP32[$1 + 20 >> 2] | 0);
__Z17CopyJointRotationP13JointRotationPKS_(HEAP32[$0 + 24 >> 2] | 0, HEAP32[$1 + 24 >> 2] | 0);
__Z17CopyJointRotationP13JointRotationPKS_(HEAP32[$0 + 28 >> 2] | 0, HEAP32[$1 + 28 >> 2] | 0);
__Z17CopyJointRotationP13JointRotationPKS_(HEAP32[$0 + 32 >> 2] | 0, HEAP32[$1 + 32 >> 2] | 0);
__Z17CopyJointRotationP13JointRotationPKS_(HEAP32[$0 + 36 >> 2] | 0, HEAP32[$1 + 36 >> 2] | 0);
__Z17CopyJointRotationP13JointRotationPKS_(HEAP32[$0 + 40 >> 2] | 0, HEAP32[$1 + 40 >> 2] | 0);
__Z17CopyJointRotationP13JointRotationPKS_(HEAP32[$0 + 44 >> 2] | 0, HEAP32[$1 + 44 >> 2] | 0);
__Z17CopyJointRotationP13JointRotationPKS_(HEAP32[$0 + 48 >> 2] | 0, HEAP32[$1 + 48 >> 2] | 0);
__Z17CopyJointRotationP13JointRotationPKS_(HEAP32[$0 + 52 >> 2] | 0, HEAP32[$1 + 52 >> 2] | 0);
__Z17CopyJointRotationP13JointRotationPKS_(HEAP32[$0 + 56 >> 2] | 0, HEAP32[$1 + 56 >> 2] | 0);
return;
}
function __ZN18SphereInterpolatorC2Ev($0) {
$0 = $0 | 0;
__ZN6VectorC2Ev($0);
__ZN6VectorC2Ev($0 + 12 | 0);
__ZN6VectorC2Ev($0 + 24 | 0);
__ZN6VectorC2Ev($0 + 36 | 0);
__ZN6VectorC2Ev($0 + 48 | 0);
__ZN6VectorC2Ev($0 + 60 | 0);
HEAPF32[$0 + 72 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 76 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 80 >> 2] = Math_fround(-1.57079637);
__ZN6VectorC2Ev($0 + 84 | 0);
__ZN6VectorC2Ev($0 + 96 | 0);
__ZN6VectorC2Ev($0 + 108 | 0);
__ZN6VectorC2Ev($0 + 120 | 0);
__ZN6VectorC2Ev($0 + 132 | 0);
__ZN6VectorC2Ev($0 + 144 | 0);
HEAPF32[$0 + 156 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 160 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 164 >> 2] = Math_fround(-1.57079637);
__ZN6VectorC2Ev($0 + 168 | 0);
__ZN6VectorC2Ev($0 + 180 | 0);
__ZN6VectorC2Ev($0 + 192 | 0);
__ZN6VectorC2Ev($0 + 204 | 0);
__ZN6VectorC2Ev($0 + 216 | 0);
__ZN6VectorC2Ev($0 + 228 | 0);
HEAPF32[$0 + 240 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 244 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 248 >> 2] = Math_fround(-1.57079637);
__ZN6VectorC2Ev($0 + 252 | 0);
__ZN6VectorC2Ev($0 + 264 | 0);
__ZN6VectorC2Ev($0 + 276 | 0);
__ZN6VectorC2Ev($0 + 288 | 0);
__ZN6VectorC2Ev($0 + 300 | 0);
__ZN6VectorC2Ev($0 + 312 | 0);
HEAPF32[$0 + 324 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 328 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 332 >> 2] = Math_fround(-1.57079637);
__ZN18SphereInterpolator7setFromEffffff($0, Math_fround(0.0), Math_fround(0.0), Math_fround(0.0), Math_fround(0.0), Math_fround(0.0), Math_fround(0.0));
return;
}
function __ZL13offset1TargetRK6VectorRS_S2_R15OneHDirMoveSpec($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $14 = f0, $18 = 0, $19 = 0, $20 = 0, $22 = f0, $23 = 0, $25 = f0, $4 = 0, $5 = 0, $6 = 0, $7 = f0, $8 = f0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$4 = sp + 28 | 0;
$5 = sp + 16 | 0;
$6 = sp;
__ZN6VectorC2Ev($4);
__ZN6Vector11setSubtractERKS_S1_($4, $1, $2);
$7 = Math_fround(__ZNK6Vector8lengthsqEv($4));
__ZN6VectorC2Ev($5);
__ZN6Vector6setAddERKS_S1_($5, $4, $0);
$8 = Math_fround(__ZNK6Vector8lengthsqEv($5));
__ZN6Vector6setAddERKS_S1_($1, $2, $5);
if (!($7 > Math_fround(0.0) ? Math_fround(HEAPF32[$3 + 12 >> 2]) != Math_fround(0.0) : 0)) {
STACKTOP = sp;
return;
}
$14 = Math_fround(Math_sqrt(Math_fround($8 / $7)));
HEAPF32[$6 >> 2] = Math_fround(0.0);
HEAPF32[$6 + 4 >> 2] = Math_fround(0.0);
HEAPF32[$6 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$6 + 12 >> 2] = Math_fround(1.0);
__ZN10Quaternion16setQuatFrom2VecsERK6VectorS2_($6, $4, $5);
__ZNK10Quaternion12rotateVectorER6Vector($6, $3);
$18 = $3 + 16 | 0;
__ZNK10Quaternion12rotateVectorER6Vector($6, $18);
__ZN6Vector8setScaleEf($18, $14);
$19 = $3 + 48 | 0;
__ZNK10Quaternion12rotateVectorER6Vector($6, $19);
__ZN6Vector8setScaleEf($19, $14);
$20 = $3 + 60 | 0;
$22 = Math_fround($14 * Math_fround(HEAPF32[$20 >> 2]));
HEAPF32[$20 >> 2] = $22;
$23 = $3 + 64 | 0;
$25 = Math_fround($14 * Math_fround(HEAPF32[$23 >> 2]));
HEAPF32[$23 >> 2] = $25;
STACKTOP = sp;
return;
}
function __ZN28InvertibleDynamicStringArray19NewInvertibleArrayHEiPKcz($0, $1, $varargs) {
$0 = $0 | 0;
$1 = $1 | 0;
$varargs = $varargs | 0;
var $$011$i = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $28 = 0, $3 = 0, $30 = 0, $42 = 0, $45 = 0, $5 = 0, $8 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
$3 = __Znwj(16) | 0;
__THREW__ = 0;
invoke_viii(76, $3 | 0, $0 & 65535 | 0, 1);
$5 = __THREW__;
__THREW__ = 0;
if ($5 & 1) {
$45 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($3);
___resumeException($45 | 0);
}
HEAP32[$2 >> 2] = $varargs;
if (!$1) {
STACKTOP = sp;
return $3 | 0;
}
$8 = $3 + 4 | 0;
$$011$i = $1;
do {
$14 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$15 = HEAP32[$14 >> 2] | 0;
HEAP32[$2 >> 2] = $14 + 4;
$17 = __Z10copyStringPKc($$011$i) | 0;
$18 = HEAP32[$8 >> 2] | 0;
$19 = $15 << 16 >> 16;
if (($15 & 65535) << 16 >> 16 >= 0) {
if ((HEAP32[$18 + 8 >> 2] | 0) <= ($19 | 0)) {
$28 = HEAP32[$18 + 4 >> 2] | 0;
__ZN13DynamicArrayPIKcE6resizeEi($18, ($28 | 0) > ($19 | 0) ? $28 : $19 + 1 + ($19 >>> 1) | 0);
}
$30 = $18 + 12 | 0;
if ((HEAP32[$30 >> 2] | 0) <= ($19 | 0)) HEAP32[$30 >> 2] = $19 + 1;
HEAP32[(HEAP32[$18 >> 2] | 0) + ($19 << 2) >> 2] = $17;
}
__ZN7HashAnyIPKciE7addItemES1_i(HEAP32[$3 >> 2] | 0, $17, $19);
$42 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$$011$i = HEAP32[$42 >> 2] | 0;
HEAP32[$2 >> 2] = $42 + 4;
} while (($$011$i | 0) != 0);
STACKTOP = sp;
return $3 | 0;
}
function __Z10realAttribPK7HashAnyIPKcS1_ES1_Rf($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$012$i$i = 0, $$01215$i$i = 0, $$01216$i$i = 0, $$1 = 0, $$sink$i$i = 0, $20 = 0, $23 = 0, $25 = f0, $3 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer1 = sp + 16 | 0;
$vararg_buffer = sp + 8 | 0;
$3 = sp;
if (!$0) {
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
$7 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($1, HEAP32[$0 + 4 >> 2] | 0) | 0;
$8 = HEAP32[$0 >> 2] | 0;
L4 : do if ((HEAP16[$8 + ($7 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i = HEAP32[$8 + ($7 << 3) >> 2] | 0;
if (!$$01215$i$i) label = 7; else {
$$01216$i$i = $$01215$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($1, HEAP32[$$01216$i$i >> 2] | 0) | 0) break;
$$012$i$i = HEAP32[$$01216$i$i + 8 >> 2] | 0;
if (!$$012$i$i) {
label = 7;
break L4;
} else $$01216$i$i = $$012$i$i;
}
$$sink$i$i = $$01216$i$i + 4 | 0;
}
} else label = 7; while (0);
if ((label | 0) == 7) $$sink$i$i = $0 + 20 | 0;
$20 = HEAP32[$$sink$i$i >> 2] | 0;
if (!$20) {
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$vararg_buffer >> 2] = $3;
$23 = (_sscanf($20, 54455, $vararg_buffer) | 0) == 1;
if ($23) {
$25 = Math_fround(+HEAPF64[$3 >> 3]);
HEAPF32[$2 >> 2] = $25;
} else {
HEAP32[$vararg_buffer1 >> 2] = $20;
__Z7eprintfPKcz(53473, $vararg_buffer1);
}
$$1 = $23;
STACKTOP = sp;
return $$1 | 0;
}
function _build_node($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$04548 = 0, $$046 = 0, $$049 = 0, $$049$in = 0, $10 = 0, $21 = 0, $22 = 0, $31 = 0, $32 = 0, $34 = 0, $7 = 0;
$7 = (HEAP32[$0 + 340 >> 2] | 0) + 144 | 0;
$10 = HEAP32[(HEAP32[$7 >> 2] | 0) + ($1 * 28 | 0) >> 2] | 0;
HEAP32[$2 >> 2] = $10;
HEAP32[$2 + 4 >> 2] = HEAP32[(HEAP32[$7 >> 2] | 0) + ($1 * 28 | 0) + 4 >> 2];
if (($10 | 0) == 4) {
HEAP32[$2 + 8 >> 2] = HEAP32[$4 >> 2];
$$046 = HEAP32[(HEAP32[$7 >> 2] | 0) + ($1 * 28 | 0) + 8 >> 2] | 0;
while (1) {
$21 = HEAP8[$$046 >> 0] | 0;
$22 = HEAP32[$4 >> 2] | 0;
HEAP32[$4 >> 2] = $22 + 1;
HEAP8[$22 >> 0] = $21;
if (!(HEAP8[$$046 >> 0] | 0)) break; else $$046 = $$046 + 1 | 0;
}
HEAP32[$2 + 12 >> 2] = 0;
HEAP32[$2 + 16 >> 2] = 0;
return;
}
$31 = HEAP32[(HEAP32[$7 >> 2] | 0) + ($1 * 28 | 0) + 20 >> 2] | 0;
$32 = $2 + 12 | 0;
HEAP32[$32 >> 2] = $31;
$34 = $2 + 16 | 0;
HEAP32[$34 >> 2] = HEAP32[$3 >> 2];
HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + ($31 * 20 | 0);
if (HEAP32[$32 >> 2] | 0) {
$$04548 = 0;
$$049$in = (HEAP32[$7 >> 2] | 0) + ($1 * 28 | 0) + 12 | 0;
while (1) {
$$049 = HEAP32[$$049$in >> 2] | 0;
_build_node($0, $$049, (HEAP32[$34 >> 2] | 0) + ($$04548 * 20 | 0) | 0, $3, $4);
$$04548 = $$04548 + 1 | 0;
if ($$04548 >>> 0 >= (HEAP32[$32 >> 2] | 0) >>> 0) break; else $$049$in = (HEAP32[$7 >> 2] | 0) + ($$049 * 28 | 0) + 24 | 0;
}
}
HEAP32[$2 + 8 >> 2] = 0;
return;
}
function __ZN5Joint32computeGlobalFromLocalTransformsEv($0) {
$0 = $0 | 0;
var $$07 = 0, $10 = 0, $11 = 0, $14 = 0, $17 = 0, $2 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
$2 = HEAP32[$0 + 8 >> 2] | 0;
if (!$2) {
$4 = $0 + 40 | 0;
$5 = $0 + 68 | 0;
HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
HEAP32[$5 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
HEAP32[$5 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
HEAP32[$5 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
HEAP32[$5 + 16 >> 2] = HEAP32[$4 + 16 >> 2];
HEAP32[$5 + 20 >> 2] = HEAP32[$4 + 20 >> 2];
HEAP32[$5 + 24 >> 2] = HEAP32[$4 + 24 >> 2];
} else {
$6 = $2 + 68 | 0;
$7 = $0 + 68 | 0;
HEAP32[$7 >> 2] = HEAP32[$6 >> 2];
HEAP32[$7 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
HEAP32[$7 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
HEAP32[$7 + 12 >> 2] = HEAP32[$6 + 12 >> 2];
HEAP32[$7 + 16 >> 2] = HEAP32[$6 + 16 >> 2];
HEAP32[$7 + 20 >> 2] = HEAP32[$6 + 20 >> 2];
HEAP32[$7 + 24 >> 2] = HEAP32[$6 + 24 >> 2];
__ZN9Transform10setComposeERK6VectorRK10Quaternion($7, $0 + 40 | 0, $0 + 52 | 0);
}
$10 = $0 + 12 | 0;
$11 = HEAP32[$10 >> 2] | 0;
if (!$11) return;
$14 = HEAP32[$11 + 12 >> 2] | 0;
if (($14 | 0) > 0) {
$$07 = 0;
$17 = $11;
} else return;
while (1) {
if ((HEAP32[$17 + 12 >> 2] | 0) > ($$07 | 0)) $23 = HEAP32[(HEAP32[$17 >> 2] | 0) + ($$07 << 2) >> 2] | 0; else $23 = 0;
__ZN5Joint32computeGlobalFromLocalTransformsEv($23);
$24 = $$07 + 1 | 0;
if (($24 | 0) == ($14 | 0)) break;
$$07 = $24;
$17 = HEAP32[$10 >> 2] | 0;
}
return;
}
function ___strchrnul($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $31 = 0, $38 = 0, $39 = 0, $7 = 0;
$2 = $1 & 255;
L1 : do if (!$2) $$0 = $0 + (_strlen($0) | 0) | 0; else {
if (!($0 & 3)) $$030$lcssa = $0; else {
$7 = $1 & 255;
$$03039 = $0;
while (1) {
$10 = HEAP8[$$03039 >> 0] | 0;
if ($10 << 24 >> 24 == 0 ? 1 : $10 << 24 >> 24 == $7 << 24 >> 24) {
$$0 = $$03039;
break L1;
}
$13 = $$03039 + 1 | 0;
if (!($13 & 3)) {
$$030$lcssa = $13;
break;
} else $$03039 = $13;
}
}
$17 = Math_imul($2, 16843009) | 0;
$18 = HEAP32[$$030$lcssa >> 2] | 0;
L10 : do if (!(($18 & -2139062144 ^ -2139062144) & $18 + -16843009)) {
$$02936 = $$030$lcssa;
$25 = $18;
while (1) {
$24 = $25 ^ $17;
if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
$$029$lcssa = $$02936;
break L10;
}
$31 = $$02936 + 4 | 0;
$25 = HEAP32[$31 >> 2] | 0;
if (($25 & -2139062144 ^ -2139062144) & $25 + -16843009 | 0) {
$$029$lcssa = $31;
break;
} else $$02936 = $31;
}
} else $$029$lcssa = $$030$lcssa; while (0);
$38 = $1 & 255;
$$1 = $$029$lcssa;
while (1) {
$39 = HEAP8[$$1 >> 0] | 0;
if ($39 << 24 >> 24 == 0 ? 1 : $39 << 24 >> 24 == $38 << 24 >> 24) {
$$0 = $$1;
break;
} else $$1 = $$1 + 1 | 0;
}
} while (0);
return $$0 | 0;
}
function __ZNSt3__26vectorIP7SSPRSetNS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$sroa$speculated$$i = 0, $11 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0;
$2 = $0 + 4 | 0;
$4 = HEAP32[$0 >> 2] | 0;
$5 = (HEAP32[$2 >> 2] | 0) - $4 | 0;
$6 = $5 >> 2;
$7 = $6 + 1 | 0;
if ($7 >>> 0 > 1073741823) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
$9 = $0 + 8 | 0;
$11 = (HEAP32[$9 >> 2] | 0) - $4 | 0;
$14 = $11 >> 1;
$$sroa$speculated$$i = $11 >> 2 >>> 0 < 536870911 ? ($14 >>> 0 < $7 >>> 0 ? $7 : $14) : 1073741823;
do if (!$$sroa$speculated$$i) {
$26 = 0;
$35 = 0;
} else {
if ($$sroa$speculated$$i >>> 0 <= 1073741823) {
$24 = __Znwj($$sroa$speculated$$i << 2) | 0;
$26 = $24;
$35 = $24;
break;
}
$18 = ___cxa_allocate_exception(8) | 0;
__THREW__ = 0;
invoke_vii(111, $18 | 0, 9067);
$19 = __THREW__;
__THREW__ = 0;
if ($19 & 1) {
$21 = ___cxa_find_matching_catch_2() | 0;
___cxa_free_exception($18 | 0);
___resumeException($21 | 0);
} else {
HEAP32[$18 >> 2] = 8224;
___cxa_throw($18 | 0, 696, 80);
}
} while (0);
$25 = $26 + ($6 << 2) | 0;
HEAP32[$25 >> 2] = HEAP32[$1 >> 2];
if (($5 | 0) > 0) _memcpy($35 | 0, $4 | 0, $5 | 0) | 0;
HEAP32[$0 >> 2] = $26;
HEAP32[$2 >> 2] = $25 + 4;
HEAP32[$9 >> 2] = $26 + ($$sroa$speculated$$i << 2);
if (!$4) return;
__ZdlPv($4);
return;
}
function __ZN11HanimAvatar12FakeFarSitesEv($0) {
$0 = $0 | 0;
__ZN11HanimAvatar16fakeFarLeftRightE8Locationf($0, 25, Math_fround(1.5));
__ZN11HanimAvatar16fakeFarLeftRightE8Locationf($0, 26, Math_fround(1.5));
__ZN11HanimAvatar16fakeFarLeftRightE8Locationf($0, 27, Math_fround(1.5));
__ZN11HanimAvatar16fakeFarLeftRightE8Locationf($0, 28, Math_fround(1.5));
__ZN11HanimAvatar16fakeFarLeftRightE8Locationf($0, 29, Math_fround(1.5));
__ZN11HanimAvatar16fakeFarLeftRightE8Locationf($0, 30, Math_fround(1.5));
__ZN11HanimAvatar16fakeFarLeftRightE8Locationf($0, 31, Math_fround(1.5));
__ZN11HanimAvatar16fakeFarLeftRightE8Locationf($0, 32, Math_fround(1.5));
__ZN11HanimAvatar16fakeFarLeftRightE8Locationf($0, 33, Math_fround(1.5));
__ZN11HanimAvatar16fakeFarLeftRightE8Locationf($0, 34, Math_fround(1.5));
__ZN11HanimAvatar16fakeFarLeftRightE8Locationf($0, 35, Math_fround(1.5));
__ZN11HanimAvatar16fakeFarLeftRightE8Locationf($0, 36, Math_fround(1.5));
__ZN11HanimAvatar16fakeFarLeftRightE8Locationf($0, 37, Math_fround(1.5));
__ZN11HanimAvatar16fakeFarLeftRightE8Locationf($0, 38, Math_fround(1.5));
__ZN11HanimAvatar16fakeFarLeftRightE8Locationf($0, 39, Math_fround(1.5));
__ZN11HanimAvatar16fakeFarLeftRightE8Locationf($0, 40, Math_fround(1.5));
__ZN11HanimAvatar16fakeFarLeftRightE8Locationf($0, 41, Math_fround(1.5));
__ZN11HanimAvatar16fakeFarLeftRightE8Locationf($0, 42, Math_fround(1.5));
__ZN11HanimAvatar16fakeFarLeftRightE8Locationf($0, 43, Math_fround(1.5));
return;
}
function __ZN13DynamicArrayPIKcE11setElementsEiPS0_z($0, $1, $2, $varargs) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$varargs = $varargs | 0;
var $14 = 0, $25 = 0, $26 = 0, $28 = 0, $3 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $5 = 0, $54 = 0, $9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp;
if (($1 | 0) < 0) {
STACKTOP = sp;
return;
}
$5 = $0 + 8 | 0;
if ((HEAP32[$5 >> 2] | 0) <= ($1 | 0)) {
$9 = HEAP32[$0 + 4 >> 2] | 0;
__ZN13DynamicArrayPIKcE6resizeEi($0, ($9 | 0) > ($1 | 0) ? $9 : $1 + 1 + ($1 >>> 1) | 0);
}
$14 = $0 + 12 | 0;
if ((HEAP32[$14 >> 2] | 0) <= ($1 | 0)) HEAP32[$14 >> 2] = $1 + 1;
HEAP32[(HEAP32[$0 >> 2] | 0) + ($1 << 2) >> 2] = $2;
HEAP32[$3 >> 2] = $varargs;
$25 = (HEAP32[$3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$26 = HEAP32[$25 >> 2] | 0;
HEAP32[$3 >> 2] = $25 + 4;
if (($26 | 0) > -1) {
$28 = $0 + 4 | 0;
$38 = $26;
do {
$34 = (HEAP32[$3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$35 = HEAP32[$34 >> 2] | 0;
HEAP32[$3 >> 2] = $34 + 4;
if ((HEAP32[$5 >> 2] | 0) <= ($38 | 0)) {
$39 = HEAP32[$28 >> 2] | 0;
__ZN13DynamicArrayPIKcE6resizeEi($0, ($39 | 0) > ($38 | 0) ? $39 : $38 + 1 + ($38 >>> 1) | 0);
}
if ((HEAP32[$14 >> 2] | 0) <= ($38 | 0)) HEAP32[$14 >> 2] = $38 + 1;
HEAP32[(HEAP32[$0 >> 2] | 0) + ($38 << 2) >> 2] = $35;
$54 = (HEAP32[$3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$38 = HEAP32[$54 >> 2] | 0;
HEAP32[$3 >> 2] = $54 + 4;
} while (($38 | 0) > -1);
}
STACKTOP = sp;
return;
}
function __ZN13BasicMovement19UseExplicitDurationEv($0) {
$0 = $0 | 0;
var $$pre$phiZ2D = 0, $10 = f0, $17 = f0, $20 = 0.0, $23 = 0.0, $25 = f0, $32 = f0, $4 = 0, $6 = 0.0, $9 = 0.0, $vararg_buffer = 0, $vararg_buffer3 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$vararg_buffer3 = sp + 24 | 0;
$vararg_buffer = sp;
if (!0) $$pre$phiZ2D = $0 + 52 | 0; else {
$4 = $0 + 52 | 0;
$6 = +Math_fround(HEAPF32[$4 >> 2]);
$9 = +Math_fround(HEAPF32[$0 + 40 >> 2]);
HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 4 >> 2];
HEAPF64[$vararg_buffer + 8 >> 3] = $6;
HEAPF64[$vararg_buffer + 16 >> 3] = $9;
__Z7eprintfPKcz(35836, $vararg_buffer);
$$pre$phiZ2D = $4;
}
$10 = Math_fround(HEAPF32[$$pre$phiZ2D >> 2]);
if ($10 > Math_fround(0.0)) {
$17 = Math_fround($10 * Math_fround(HEAPF32[$0 + 56 >> 2]));
FUNCTION_TABLE_vifi[HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] & 7]($0, $17, 1);
if (!0) {
STACKTOP = sp;
return;
}
$20 = +Math_fround(HEAPF32[$$pre$phiZ2D >> 2]);
$23 = +Math_fround(HEAPF32[$0 + 40 >> 2]);
HEAPF64[$vararg_buffer3 >> 3] = $20;
HEAPF64[$vararg_buffer3 + 8 >> 3] = $23;
__Z7eprintfPKcz(35891, $vararg_buffer3);
STACKTOP = sp;
return;
} else {
$25 = Math_fround(HEAPF32[$0 + 56 >> 2]);
if (!($25 != Math_fround(1.0))) {
STACKTOP = sp;
return;
}
$32 = Math_fround($25 * Math_fround(HEAPF32[$0 + 40 >> 2]));
FUNCTION_TABLE_vifi[HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] & 7]($0, $32, 1);
STACKTOP = sp;
return;
}
}
function __ZN13DynamicArrayPIcE11setElementsEiPcz($0, $1, $2, $varargs) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$varargs = $varargs | 0;
var $14 = 0, $25 = 0, $26 = 0, $28 = 0, $3 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $5 = 0, $54 = 0, $9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp;
if (($1 | 0) < 0) {
STACKTOP = sp;
return;
}
$5 = $0 + 8 | 0;
if ((HEAP32[$5 >> 2] | 0) <= ($1 | 0)) {
$9 = HEAP32[$0 + 4 >> 2] | 0;
__ZN13DynamicArrayPIcE6resizeEi($0, ($9 | 0) > ($1 | 0) ? $9 : $1 + 1 + ($1 >>> 1) | 0);
}
$14 = $0 + 12 | 0;
if ((HEAP32[$14 >> 2] | 0) <= ($1 | 0)) HEAP32[$14 >> 2] = $1 + 1;
HEAP32[(HEAP32[$0 >> 2] | 0) + ($1 << 2) >> 2] = $2;
HEAP32[$3 >> 2] = $varargs;
$25 = (HEAP32[$3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$26 = HEAP32[$25 >> 2] | 0;
HEAP32[$3 >> 2] = $25 + 4;
if (($26 | 0) > -1) {
$28 = $0 + 4 | 0;
$38 = $26;
do {
$34 = (HEAP32[$3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$35 = HEAP32[$34 >> 2] | 0;
HEAP32[$3 >> 2] = $34 + 4;
if ((HEAP32[$5 >> 2] | 0) <= ($38 | 0)) {
$39 = HEAP32[$28 >> 2] | 0;
__ZN13DynamicArrayPIcE6resizeEi($0, ($39 | 0) > ($38 | 0) ? $39 : $38 + 1 + ($38 >>> 1) | 0);
}
if ((HEAP32[$14 >> 2] | 0) <= ($38 | 0)) HEAP32[$14 >> 2] = $38 + 1;
HEAP32[(HEAP32[$0 >> 2] | 0) + ($38 << 2) >> 2] = $35;
$54 = (HEAP32[$3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$38 = HEAP32[$54 >> 2] | 0;
HEAP32[$3 >> 2] = $54 + 4;
} while (($38 | 0) > -1);
}
STACKTOP = sp;
return;
}
function __ZL20printDirection2SiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKc10Direction2($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$4 = sp;
if (Math_fround(HEAPF32[$3 >> 2]) == Math_fround(0.0)) if (!(Math_fround(HEAPF32[$3 + 4 >> 2]) != Math_fround(0.0))) {
STACKTOP = sp;
return;
}
if ($1) {
HEAP8[$4 >> 0] = 32;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, $4, 1) | 0;
} else __Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($0, (HEAP16[36078] | 0) + 1 | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, $2, _strlen($2) | 0) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, 49551, 2) | 0;
__ZL18printDirCoordSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEfcc($0, Math_fround(HEAPF32[$3 + 4 >> 2]), 117, 100);
__ZL18printDirCoordSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEfcc($0, Math_fround(HEAPF32[$3 >> 2]), 108, 114);
HEAP8[$4 >> 0] = 34;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, $4, 1) | 0;
if ($1) {
STACKTOP = sp;
return;
}
HEAP8[$4 >> 0] = 10;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, $4, 1) | 0;
STACKTOP = sp;
return;
}
function __ZNK10Quaternion14checkValidQuatEv($0) {
$0 = $0 | 0;
var $11 = 0, $15 = 0, $21 = 0, $24 = 0.0, $27 = 0.0, $3 = 0, $30 = 0.0, $33 = 0.0, $7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 80 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
if (!0) {
STACKTOP = sp;
return;
}
$3 = HEAP32[$0 >> 2] & 2147483647;
if ($3 >>> 0 <= 2139095040) {
$7 = HEAP32[$0 + 4 >> 2] & 2147483647;
if ($7 >>> 0 <= 2139095040) {
$11 = HEAP32[$0 + 8 >> 2] & 2147483647;
if ($11 >>> 0 <= 2139095040) {
$15 = HEAP32[$0 + 12 >> 2] & 2147483647;
if (!(($7 | 0) == 2139095040 | (($3 | 0) == 2139095040 | $15 >>> 0 > 2139095040))) if (!(($11 | 0) == 2139095040 | ($15 | 0) == 2139095040)) {
STACKTOP = sp;
return;
}
}
}
}
__Z7eprintfPKcz(11804, $vararg_buffer);
$21 = HEAP32[16082] | 0;
if ($21 | 0) {
$24 = +Math_fround(HEAPF32[$0 >> 2]);
$27 = +Math_fround(HEAPF32[$0 + 4 >> 2]);
$30 = +Math_fround(HEAPF32[$0 + 8 >> 2]);
$33 = +Math_fround(HEAPF32[$0 + 12 >> 2]);
HEAP32[$vararg_buffer1 >> 2] = 4;
HEAPF64[$vararg_buffer1 + 8 >> 3] = $24;
HEAP32[$vararg_buffer1 + 16 >> 2] = 4;
HEAPF64[$vararg_buffer1 + 24 >> 3] = $27;
HEAP32[$vararg_buffer1 + 32 >> 2] = 4;
HEAPF64[$vararg_buffer1 + 40 >> 3] = $30;
HEAP32[$vararg_buffer1 + 48 >> 2] = 4;
HEAPF64[$vararg_buffer1 + 56 >> 3] = $33;
_fprintf($21, 13349, $vararg_buffer1) | 0;
}
__Z5eputcc(10);
STACKTOP = sp;
return;
}
function __ZL15ConvertAxisPairR6Vector10Direction3S1_9Mirroring($0, $1, $2, $$01, $$12) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$$01 = $$01 | 0;
$$12 = $$12 | 0;
var $$sroa$0$0$insert$insert6 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $tmpcast3$byval_copy = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$tmpcast3$byval_copy = sp + 40 | 0;
$3 = sp + 24 | 0;
$4 = sp + 38 | 0;
$5 = sp + 12 | 0;
$6 = sp;
$7 = sp + 36 | 0;
$$sroa$0$0$insert$insert6 = ($$12 & 255) << 8 & 65535 | $$01 & 255;
HEAP16[$4 >> 1] = $$sroa$0$0$insert$insert6;
HEAP8[$tmpcast3$byval_copy >> 0] = HEAP8[$4 >> 0] | 0;
HEAP8[$tmpcast3$byval_copy + 1 >> 0] = HEAP8[$4 + 1 >> 0] | 0;
__ZNK10Direction314makeMirrorAxisE9Mirroring($3, $1, $tmpcast3$byval_copy);
__ZN5SiGML19convertDirectionVecER6Vector10Direction3($0, $3);
if (Math_fround(HEAPF32[$2 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$2 + 4 >> 2]) == Math_fround(0.0)) if (!(Math_fround(HEAPF32[$2 + 8 >> 2]) != Math_fround(0.0))) {
STACKTOP = sp;
return;
}
__ZN6VectorC2Ev($5);
HEAP16[$7 >> 1] = $$sroa$0$0$insert$insert6;
HEAP8[$tmpcast3$byval_copy >> 0] = HEAP8[$7 >> 0] | 0;
HEAP8[$tmpcast3$byval_copy + 1 >> 0] = HEAP8[$7 + 1 >> 0] | 0;
__ZNK10Direction314makeMirrorAxisE9Mirroring($6, $2, $tmpcast3$byval_copy);
__ZN5SiGML19convertDirectionVecER6Vector10Direction3($5, $6);
__ZN6Vector11setMidPointERKS_S1_f($0, $0, $5, Math_fround(.5));
__ZN6Vector7setUnitEv($0) | 0;
STACKTOP = sp;
return;
}
function __ZNK16AtomicTimedMorph5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $12 = 0.0, $15 = 0.0, $19 = 0, $22 = 0.0, $24 = 0, $27 = 0.0, $30 = 0.0, $32 = 0, $35 = 0.0, $39 = 0, $6 = 0, $9 = 0.0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 96 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$6 = __ZNK28InvertibleDynamicStringArray14valueFromIndexEi(HEAP32[17820] | 0, HEAP32[$0 + 24 >> 2] | 0) | 0;
$9 = +Math_fround(HEAPF32[$0 + 32 >> 2]);
$12 = +Math_fround(HEAPF32[$0 + 28 >> 2]);
$15 = +Math_fround(HEAPF32[$0 + 36 >> 2]);
$19 = HEAP8[$0 + 48 >> 0] | 0 ? 120 : 101;
$22 = +Math_fround(HEAPF32[$0 + 4 >> 2]);
$24 = HEAP32[$0 + 40 >> 2] | 0;
$27 = +Math_fround(HEAPF32[$0 + 8 >> 2]);
$30 = +Math_fround(HEAPF32[$0 + 12 >> 2]);
$32 = HEAP32[$0 + 44 >> 2] | 0;
$35 = +Math_fround(HEAPF32[$0 + 16 >> 2]);
$39 = HEAP8[$0 + 49 >> 0] | 0 ? 120 : 101;
HEAP32[$vararg_buffer >> 2] = $6;
HEAPF64[$vararg_buffer + 8 >> 3] = $9;
HEAPF64[$vararg_buffer + 16 >> 3] = $12;
HEAPF64[$vararg_buffer + 24 >> 3] = $15;
HEAP32[$vararg_buffer + 32 >> 2] = $19;
HEAPF64[$vararg_buffer + 40 >> 3] = $22;
HEAP32[$vararg_buffer + 48 >> 2] = $24;
HEAPF64[$vararg_buffer + 56 >> 3] = $27;
HEAPF64[$vararg_buffer + 64 >> 3] = $30;
HEAP32[$vararg_buffer + 72 >> 2] = $32;
HEAPF64[$vararg_buffer + 80 >> 3] = $35;
HEAP32[$vararg_buffer + 88 >> 2] = $39;
_fprintf($1, 34549, $vararg_buffer) | 0;
STACKTOP = sp;
return;
}
function ___shgetc($0) {
$0 = $0 | 0;
var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert29 = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $12 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $26 = 0, $27 = 0, $29 = 0, $35 = 0, $36 = 0, $7 = 0, label = 0;
$1 = $0 + 104 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if (!$2) label = 3; else if ((HEAP32[$0 + 108 >> 2] | 0) < ($2 | 0)) label = 3; else label = 4;
if ((label | 0) == 3) {
$7 = ___uflow($0) | 0;
if (($7 | 0) < 0) label = 4; else {
$10 = HEAP32[$1 >> 2] | 0;
$$phi$trans$insert = $0 + 8 | 0;
if (!$10) {
$$pre = HEAP32[$$phi$trans$insert >> 2] | 0;
$$sink = $$pre;
$26 = $$pre;
} else {
$12 = HEAP32[$$phi$trans$insert >> 2] | 0;
$14 = HEAP32[$0 + 4 >> 2] | 0;
$19 = $10 - (HEAP32[$0 + 108 >> 2] | 0) | 0;
$21 = $12;
if (($12 - $14 | 0) < ($19 | 0)) {
$$sink = $21;
$26 = $21;
} else {
$$sink = $14 + ($19 + -1) | 0;
$26 = $21;
}
}
HEAP32[$0 + 100 >> 2] = $$sink;
$$phi$trans$insert29 = $0 + 4 | 0;
if (!$26) $36 = HEAP32[$$phi$trans$insert29 >> 2] | 0; else {
$27 = HEAP32[$$phi$trans$insert29 >> 2] | 0;
$29 = $0 + 108 | 0;
HEAP32[$29 >> 2] = $26 + 1 - $27 + (HEAP32[$29 >> 2] | 0);
$36 = $27;
}
$35 = $36 + -1 | 0;
if (($7 | 0) == (HEAPU8[$35 >> 0] | 0 | 0)) $$0 = $7; else {
HEAP8[$35 >> 0] = $7;
$$0 = $7;
}
}
}
if ((label | 0) == 4) {
HEAP32[$0 + 100 >> 2] = 0;
$$0 = -1;
}
return $$0 | 0;
}
function _fread($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$ = 0, $$0 = 0, $$054$ph = 0, $$05460 = 0, $$056$ph = 0, $$05659 = 0, $$57 = 0, $10 = 0, $12 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, $28 = 0, $32 = 0, $36 = 0, $39 = 0, $4 = 0, label = 0;
$4 = Math_imul($2, $1) | 0;
$$ = ($1 | 0) == 0 ? 0 : $2;
if ((HEAP32[$3 + 76 >> 2] | 0) > -1) $36 = ___lockfile($3) | 0; else $36 = 0;
$10 = $3 + 74 | 0;
$12 = HEAP8[$10 >> 0] | 0;
HEAP8[$10 >> 0] = $12 + 255 | $12;
$18 = $3 + 4 | 0;
$19 = HEAP32[$18 >> 2] | 0;
$20 = (HEAP32[$3 + 8 >> 2] | 0) - $19 | 0;
$$57 = $20 >>> 0 < $4 >>> 0 ? $20 : $4;
$23 = $19;
if (($20 | 0) > 0) {
_memcpy($0 | 0, $23 | 0, $$57 | 0) | 0;
HEAP32[$18 >> 2] = $23 + $$57;
$$054$ph = $4 - $$57 | 0;
$$056$ph = $0 + $$57 | 0;
} else {
$$054$ph = $4;
$$056$ph = $0;
}
L7 : do if (!$$054$ph) label = 13; else {
$28 = $3 + 32 | 0;
$$05460 = $$054$ph;
$$05659 = $$056$ph;
while (1) {
if (___toread($3) | 0) break;
$32 = FUNCTION_TABLE_iiii[HEAP32[$28 >> 2] & 31]($3, $$05659, $$05460) | 0;
if (($32 + 1 | 0) >>> 0 < 2) break;
$39 = $$05460 - $32 | 0;
if (!$39) {
label = 13;
break L7;
} else {
$$05460 = $39;
$$05659 = $$05659 + $32 | 0;
}
}
if ($36 | 0) ___unlockfile($3);
$$0 = (($4 - $$05460 | 0) >>> 0) / ($1 >>> 0) | 0;
} while (0);
if ((label | 0) == 13) if (!$36) $$0 = $$; else {
___unlockfile($3);
$$0 = $$;
}
return $$0 | 0;
}
function __ZNK9Handshape10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $7 = 0, $9 = 0;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36843, 1) | 0, 51325, 10) | 0, 49554, 1) | 0;
__ZNK14SiGMLHandshape17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($0, $1, 0);
$7 = HEAP32[$0 + 220 >> 2] | 0;
if ($7 | 0) {
__ZNK14SiGMLHandshape17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($7, $1, 0);
$9 = $0 + 224 | 0;
if (Math_fround(HEAPF32[$9 >> 2]) != Math_fround(.5)) {
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 34407, 8) | 0;
__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEf($1, Math_fround(HEAPF32[$9 >> 2])) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 34935, 1) | 0;
}
}
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36603, 3) | 0;
return;
}
function __ZN13SeqTimedMorph13scaleDurationEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $$015 = 0, $10 = 0, $14 = f0, $15 = 0, $16 = f0, $2 = 0, $20 = f0, $21 = 0, $22 = f0, $26 = f0, $28 = 0, $3 = 0, $30 = 0, $32 = f0, $35 = f0, $7 = 0, $8 = f0, $9 = f0;
$2 = $0 + 24 | 0;
$3 = HEAP32[$2 >> 2] | 0;
$7 = $0 + 4 | 0;
if ((HEAP32[$3 + 12 >> 2] | 0) > 0) {
$8 = Math_fround($1 + Math_fround(-1.0));
$$015 = 0;
$28 = $3;
do {
$30 = HEAP32[(HEAP32[$28 >> 2] | 0) + ($$015 << 2) >> 2] | 0;
$32 = Math_fround(HEAPF32[$30 + 4 >> 2]);
$35 = Math_fround($8 * Math_fround($32 - Math_fround(HEAPF32[$7 >> 2])));
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$30 >> 2] | 0) + 28 >> 2] & 63]($30, $1);
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 63]($30, $35);
$$015 = $$015 + 1 | 0;
$28 = HEAP32[$2 >> 2] | 0;
} while (($$015 | 0) < (HEAP32[$28 + 12 >> 2] | 0));
}
$9 = Math_fround(HEAPF32[$7 >> 2]);
$10 = $0 + 8 | 0;
$14 = Math_fround($9 + Math_fround(Math_fround(Math_fround(HEAPF32[$10 >> 2]) - $9) * $1));
HEAPF32[$10 >> 2] = $14;
$15 = $0 + 12 | 0;
$16 = Math_fround(HEAPF32[$15 >> 2]);
if ($16 != Math_fround(-1.0)) {
$20 = Math_fround($9 + Math_fround(Math_fround($16 - $9) * $1));
HEAPF32[$15 >> 2] = $20;
}
$21 = $0 + 16 | 0;
$22 = Math_fround(HEAPF32[$21 >> 2]);
if (!($22 != Math_fround(-1.0))) return;
$26 = Math_fround($9 + Math_fround(Math_fround($22 - $9) * $1));
HEAPF32[$21 >> 2] = $26;
return;
}
function __ZN13SeqTimedMorph10CalcTimingEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $$017$lcssa = 0, $$018$lcssa = f0, $$01820 = f0, $$021 = 0, $$1 = f0, $$lcssa = 0, $2 = 0, $20 = 0, $22 = 0, $3 = 0, $30 = 0, $34 = 0, $4 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$2 = $0 + 24 | 0;
$3 = HEAP32[$2 >> 2] | 0;
$4 = $3 + 12 | 0;
if (!(HEAP32[$4 >> 2] | 0)) {
STACKTOP = sp;
return;
}
HEAPF32[$0 + 4 >> 2] = $1;
if ((HEAP32[$4 >> 2] | 0) > 0) {
$$01820 = $1;
$$021 = 0;
$20 = $3;
while (1) {
$22 = HEAP32[(HEAP32[$20 >> 2] | 0) + ($$021 << 2) >> 2] | 0;
if (!$22) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer >> 2] = $$021;
__Z7eprintfPKcz(45406, $vararg_buffer);
$$1 = $$01820;
$34 = 0;
} else {
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$22 >> 2] | 0) + 12 >> 2] & 63]($22, $$01820);
$$1 = Math_fround(HEAPF32[$22 + 12 >> 2]);
$34 = $22;
}
$$021 = $$021 + 1 | 0;
$30 = HEAP32[$2 >> 2] | 0;
if (($$021 | 0) >= (HEAP32[$30 + 12 >> 2] | 0)) {
$$017$lcssa = $34;
$$018$lcssa = $$1;
$$lcssa = $30;
break;
} else {
$$01820 = $$1;
$20 = $30;
}
}
} else {
$$017$lcssa = 0;
$$018$lcssa = $1;
$$lcssa = $3;
}
HEAP32[$0 + 8 >> 2] = HEAP32[(HEAP32[HEAP32[$$lcssa >> 2] >> 2] | 0) + 8 >> 2];
HEAPF32[$0 + 12 >> 2] = $$018$lcssa;
HEAP32[$0 + 16 >> 2] = HEAP32[$$017$lcssa + 16 >> 2];
STACKTOP = sp;
return;
}
function __ZN18OctantInterpolatorC2ERK6VectorS2_S2_S2_S2_S2_($0, $1, $2, $3, $4, $5, $6) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
$6 = $6 | 0;
var $10 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = f0, $20 = f0, $21 = f0, $23 = f0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$7 = sp + 48 | 0;
$8 = sp + 32 | 0;
$9 = sp + 16 | 0;
$10 = sp;
__ZN6VectorC2ERKS_($0, $1);
__ZN6VectorC2ERKS_($0 + 12 | 0, $2);
__ZN6VectorC2ERKS_($0 + 24 | 0, $3);
__ZN6VectorC2ERKS_($0 + 36 | 0, $4);
__ZN6VectorC2ERKS_($0 + 48 | 0, $5);
__ZN6VectorC2ERKS_($0 + 60 | 0, $6);
$16 = $0 + 72 | 0;
HEAPF32[$16 >> 2] = Math_fround(0.0);
$17 = $0 + 76 | 0;
HEAPF32[$17 >> 2] = Math_fround(0.0);
$18 = $0 + 80 | 0;
HEAPF32[$18 >> 2] = Math_fround(0.0);
__ZN10QuaternionC2ERK6Vectorfb($7, $1, Math_fround(1.57079637), 1);
__ZN6VectorC2Ev($8);
__ZNK10Quaternion12rotateVectorERK6VectorRS0_($7, $5, $8);
$19 = Math_fround(__ZNK6Vector9angleWithERKS_S1_($8, $6, $3));
HEAPF32[$17 >> 2] = $19;
__ZN10QuaternionC2ERK6Vectorfb($9, $3, Math_fround(-1.57079637), 1);
__ZN6VectorC2Ev($10);
__ZNK10Quaternion12rotateVectorERK6VectorRS0_($9, $5, $10);
$20 = Math_fround(__ZNK6Vector9angleWithERKS_S1_($10, $4, $1));
HEAPF32[$16 >> 2] = $20;
$21 = Math_fround($20 + Math_fround(-1.57079637));
$23 = Math_fround($21 - Math_fround(HEAPF32[$17 >> 2]));
HEAPF32[$18 >> 2] = $23;
STACKTOP = sp;
return;
}
function __ZN10Quaternion16setScaleRotationEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $13 = f0, $14 = f0, $15 = f0, $17 = f0, $19 = f0, $2 = 0, $21 = f0, $23 = f0, $24 = f0, $25 = f0, $26 = f0, $27 = f0, $28 = f0, $3 = f0, $4 = 0, $5 = f0, $6 = 0, $8 = f0, $9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
$3 = Math_fround(HEAPF32[$0 >> 2]);
$4 = $0 + 4 | 0;
$5 = Math_fround(HEAPF32[$4 >> 2]);
$6 = $0 + 8 | 0;
$8 = Math_fround(__ZN6Vector7alengthEfff($3, $5, Math_fround(HEAPF32[$6 >> 2])));
$9 = $0 + 12 | 0;
$13 = Math_fround(Math_fround(Math_fround(+Math_atan2(+$8, +Math_fround(HEAPF32[$9 >> 2]))) * Math_fround(2.0)) * $1);
__ZN6VectorC2Ev($2);
$14 = Math_fround(HEAPF32[$0 >> 2]);
$15 = Math_fround(HEAPF32[$4 >> 2]);
__ZN6Vector7setFromEfff($2, $14, $15, Math_fround(HEAPF32[$6 >> 2]));
__ZN6Vector7setUnitEv($2) | 0;
$17 = Math_fround(HEAPF32[$2 >> 2]);
$19 = Math_fround(HEAPF32[$2 + 4 >> 2]);
$21 = Math_fround(HEAPF32[$2 + 8 >> 2]);
$23 = Math_fround(Math_fround(__Z11trimAnglePIf($13)) * Math_fround(.5));
$24 = Math_fround(+Math_cos(+$23));
$25 = Math_fround(+Math_sin(+$23));
$26 = Math_fround($17 * $25);
$27 = Math_fround($19 * $25);
$28 = Math_fround($21 * $25);
HEAPF32[$0 >> 2] = $26;
HEAPF32[$4 >> 2] = $27;
HEAPF32[$6 >> 2] = $28;
HEAPF32[$9 >> 2] = $24;
__ZNK10Quaternion14checkValidQuatEv($0);
__ZNK10Quaternion14checkValidQuatEv($0);
STACKTOP = sp;
return;
}
function __ZN13DynamicArray1I15AtomicNonmanualE10initialiseEiPS0_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$024$i = 0, $10 = 0, $12 = 0, $14 = 0, $15 = 0, $7 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
HEAP32[$0 + 4 >> 2] = 10;
HEAP32[$0 + 12 >> 2] = 0;
if (!$1) {
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
STACKTOP = sp;
return;
}
$7 = $0 + 8 | 0;
HEAP32[$7 >> 2] = $1;
if ($2 | 0) {
HEAP32[$0 >> 2] = $2;
STACKTOP = sp;
return;
}
$10 = _malloc($1 * 28 | 0) | 0;
HEAP32[$0 >> 2] = $10;
if (!$10) {
HEAP32[$vararg_buffer >> 2] = $1;
__Z7eprintfPKcz(46957, $vararg_buffer);
HEAP32[$7 >> 2] = 0;
$12 = ___cxa_allocate_exception(4) | 0;
HEAP32[$12 >> 2] = 1;
___cxa_throw($12 | 0, 32, 0);
}
if (($1 | 0) <= 0) {
STACKTOP = sp;
return;
}
$$024$i = 0;
$14 = $10;
while (1) {
HEAP32[$14 + ($$024$i * 28 | 0) >> 2] = 0;
HEAP16[$14 + ($$024$i * 28 | 0) + 4 >> 1] = -1;
HEAP32[$14 + ($$024$i * 28 | 0) + 8 >> 2] = 0;
HEAPF32[$14 + ($$024$i * 28 | 0) + 12 >> 2] = Math_fround(-1.0);
HEAPF32[$14 + ($$024$i * 28 | 0) + 16 >> 2] = Math_fround(1.0);
HEAPF32[$14 + ($$024$i * 28 | 0) + 20 >> 2] = Math_fround(1.0);
HEAPF32[$14 + ($$024$i * 28 | 0) + 24 >> 2] = Math_fround(1.0);
$15 = $$024$i + 1 | 0;
if (($15 | 0) == ($1 | 0)) break;
$$024$i = $15;
$14 = HEAP32[$0 >> 2] | 0;
}
STACKTOP = sp;
return;
}
function __ZL16HandleXMLGesturePvP7XMLCell($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$012$i$i$i = 0, $$01215$i$i$i = 0, $$01216$i$i$i = 0, $$sink$i$i$i = 0, $10 = 0, $22 = 0, $5 = 0, $6 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
__Z10checkSiGMLP7XMLCell($1);
if (!$0) {
STACKTOP = sp;
return;
}
$5 = __ZN5SiGML14convertElementEPKc(HEAP32[$1 >> 2] | 0) | 0;
$6 = HEAP32[16639] | 0;
$9 = ($5 >>> 0) % ((HEAP32[$6 + 4 >> 2] | 0) >>> 0) | 0;
$10 = HEAP32[$6 >> 2] | 0;
L7 : do if ((HEAP16[$10 + ($9 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i = HEAP32[$10 + ($9 << 3) >> 2] | 0;
if (!$$01215$i$i$i) label = 8; else {
$$01216$i$i$i = $$01215$i$i$i;
while (1) {
if ((HEAP32[$$01216$i$i$i >> 2] | 0) == ($5 | 0)) break;
$$012$i$i$i = HEAP32[$$01216$i$i$i + 8 >> 2] | 0;
if (!$$012$i$i$i) {
label = 8;
break L7;
} else $$01216$i$i$i = $$012$i$i$i;
}
$$sink$i$i$i = $$01216$i$i$i + 4 | 0;
}
} else label = 8; while (0);
if ((label | 0) == 8) $$sink$i$i$i = $6 + 20 | 0;
$22 = HEAP32[$$sink$i$i$i >> 2] | 0;
if (!$22) {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer >> 2] = HEAP32[$1 >> 2];
__Z7eprintfPKcz(30819, $vararg_buffer);
__Z11UnimplSiGMLv();
} else FUNCTION_TABLE_vii[$22 & 255]($0, $1);
__Z16UpdatePostMortemv();
STACKTOP = sp;
return;
}
function __ZN7Getopts10FlagOptionEPKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$012$i$i$i$i = 0, $$01215$i$i$i$i = 0, $$01216$i$i$i$i = 0, $$sink$i$i$i$i = 0, $19 = 0, $22 = 0, $29 = 0, $3 = 0, $33 = 0, $6 = 0, $7 = 0, label = 0;
if (!$1) {
$33 = 0;
return $33 | 0;
}
$3 = HEAP32[$0 >> 2] | 0;
$6 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($1, HEAP32[$3 + 4 >> 2] | 0) | 0;
$7 = HEAP32[$3 >> 2] | 0;
L4 : do if ((HEAP16[$7 + ($6 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i$i = HEAP32[$7 + ($6 << 3) >> 2] | 0;
if (!$$01215$i$i$i$i) label = 7; else {
$$01216$i$i$i$i = $$01215$i$i$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($1, HEAP32[$$01216$i$i$i$i >> 2] | 0) | 0) break;
$$012$i$i$i$i = HEAP32[$$01216$i$i$i$i + 8 >> 2] | 0;
if (!$$012$i$i$i$i) {
label = 7;
break L4;
} else $$01216$i$i$i$i = $$012$i$i$i$i;
}
$$sink$i$i$i$i = $$01216$i$i$i$i + 4 | 0;
}
} else label = 7; while (0);
if ((label | 0) == 7) $$sink$i$i$i$i = $3 + 20 | 0;
$19 = HEAP32[$$sink$i$i$i$i >> 2] | 0;
if (($19 | 0) == -1) {
$33 = 0;
return $33 | 0;
}
$22 = HEAP32[$0 + 8 >> 2] | 0;
if (($19 | 0) < 0) {
$33 = 0;
return $33 | 0;
}
if ((HEAP32[$22 + 12 >> 2] | 0) <= ($19 | 0)) {
$33 = 0;
return $33 | 0;
}
$29 = HEAP32[(HEAP32[$22 >> 2] | 0) + ($19 << 2) >> 2] | 0;
if (!$29) {
$33 = 0;
return $33 | 0;
}
$33 = (HEAP32[$29 + 16 >> 2] | 0) > 0;
return $33 | 0;
}
function __ZN10QuaternionC2ERK6Vectorfb($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
var $$sink$i$i = f0, $$sink34$i$i = f0, $$sink36$i$i = f0, $$sink38$i$i = f0, $10 = f0, $11 = f0, $12 = f0, $16 = f0, $18 = f0, $4 = f0, $6 = f0, $8 = f0;
$4 = Math_fround(HEAPF32[$1 >> 2]);
$6 = Math_fround(HEAPF32[$1 + 4 >> 2]);
$8 = Math_fround(HEAPF32[$1 + 8 >> 2]);
$10 = Math_fround(Math_fround(__Z11trimAnglePIf($2)) * Math_fround(.5));
$11 = Math_fround(+Math_cos(+$10));
$12 = Math_fround(+Math_sin(+$10));
if ($3) {
$$sink$i$i = $11;
$$sink34$i$i = Math_fround($8 * $12);
$$sink36$i$i = Math_fround($6 * $12);
$$sink38$i$i = Math_fround($4 * $12);
} else {
$16 = Math_fround(__ZN6Vector7alengthEfff($4, $6, $8));
$18 = Math_fround($12 / $16);
if (!($16 <= Math_fround(0.0))) {
$$sink$i$i = $11;
$$sink34$i$i = Math_fround($8 * $18);
$$sink36$i$i = Math_fround($6 * $18);
$$sink38$i$i = Math_fround($4 * $18);
} else {
$$sink$i$i = Math_fround(1.0);
$$sink34$i$i = Math_fround(0.0);
$$sink36$i$i = Math_fround(0.0);
$$sink38$i$i = Math_fround(0.0);
}
}
HEAPF32[$0 >> 2] = $$sink38$i$i;
HEAPF32[$0 + 4 >> 2] = $$sink36$i$i;
HEAPF32[$0 + 8 >> 2] = $$sink34$i$i;
HEAPF32[$0 + 12 >> 2] = $$sink$i$i;
__ZNK10Quaternion14checkValidQuatEv($0);
__ZNK10Quaternion14checkValidQuatEv($0);
__ZNK10Quaternion14checkValidQuatEv($0);
return;
}
function __ZNSt3__212system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0$i$i = 0, $13 = 0, $15 = 0, $16 = 0, $23 = 0, $25 = 0, $3 = 0, $7 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp;
do if (HEAP32[$1 >> 2] | 0) {
$7 = HEAP8[$2 + 11 >> 0] | 0;
if ($7 << 24 >> 24 < 0) $13 = HEAP32[$2 + 4 >> 2] | 0; else $13 = $7 & 255;
if ($13 | 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($2, 63577) | 0;
__ZNKSt3__210error_code7messageEv($3, $1);
$15 = HEAP8[$3 + 11 >> 0] | 0;
$16 = $15 << 24 >> 24 < 0;
__THREW__ = 0;
invoke_iiii(26, $2 | 0, ($16 ? HEAP32[$3 >> 2] | 0 : $3) | 0, ($16 ? HEAP32[$3 + 4 >> 2] | 0 : $15 & 255) | 0) | 0;
$23 = __THREW__;
__THREW__ = 0;
if ($23 & 1) {
$25 = ___cxa_find_matching_catch_2() | 0;
__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
___resumeException($25 | 0);
} else {
__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
break;
}
} while (0);
HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
$$0$i$i = 0;
while (1) {
if (($$0$i$i | 0) == 3) break;
HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
$$0$i$i = $$0$i$i + 1 | 0;
}
STACKTOP = sp;
return;
}
function __ZNK11OneHGesture11ShiftToPalmER19OneHConcretePosture($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpcast$byval_copy = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$tmpcast$byval_copy = sp + 28 | 0;
$2 = sp + 24 | 0;
$3 = sp + 12 | 0;
$4 = sp + 8 | 0;
$5 = sp + 4 | 0;
$6 = sp;
$7 = $0 + 72 | 0;
$8 = HEAP32[$7 >> 2] | 0;
$9 = HEAP32[$8 >> 2] | 0;
__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($2, 1, (HEAP8[$0 >> 0] | 0) == ((HEAPU8[$8 + 13 >> 0] | 0) >>> 6 & 1) ? 1 : 2, 0, 0, 1, 0);
__ZN6VectorC2Ev($3);
HEAP32[$4 >> 2] = 0;
HEAP32[$5 >> 2] = 0;
HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$6 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$6 + 1 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 2 >> 0] = HEAP8[$6 + 2 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 3 >> 0] = HEAP8[$6 + 3 >> 0] | 0;
__ZNK11HanimAvatar12locateSiteIDEb6SiteIDP6VectorRP5JointRP4Site($9, 0, $tmpcast$byval_copy, $3, $4, $5);
$19 = HEAP32[$7 >> 2] | 0;
__ZN7Gesture16transferLocationER6VectorP5JointS3_RKS0_($19, $3, HEAP32[(HEAP32[$9 + 72 >> 2] | 0) + 20 + (((HEAP8[$0 >> 0] | 0) == ((HEAPU8[$19 + 13 >> 0] | 0) >>> 6 & 1) & 1) << 4) + 12 >> 2] | 0, HEAP32[$4 >> 2] | 0, $3);
__ZN19OneHConcretePosture13shiftHandSiteERK6Vector($1, $3);
STACKTOP = sp;
return;
}
function __ZN12ExpatWrapperC2Ev($0) {
$0 = $0 | 0;
var $1 = 0, $11 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $21 = 0, $24 = 0, $6 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$1 = $0 + 4 | 0;
HEAP32[$1 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 >> 2] = 3444;
HEAP32[$0 + 20 >> 2] = 0;
HEAP32[$0 + 28 >> 2] = 0;
__THREW__ = 0;
$6 = invoke_ii(32, 54254) | 0;
$7 = __THREW__;
__THREW__ = 0;
do if (!($7 & 1)) {
$9 = $0 + 24 | 0;
HEAP32[$9 >> 2] = $6;
if (!$6) {
__THREW__ = 0;
invoke_vii(115, 54265, $vararg_buffer | 0);
$11 = __THREW__;
__THREW__ = 0;
if ($11 & 1) break;
$13 = ___cxa_allocate_exception(4) | 0;
HEAP32[$13 >> 2] = 1;
__THREW__ = 0;
invoke_viii(75, $13 | 0, 32, 0);
__THREW__ = 0;
break;
}
__THREW__ = 0;
invoke_viii(99, $6 | 0, 100, 182);
$21 = __THREW__;
__THREW__ = 0;
if (!($21 & 1)) {
__THREW__ = 0;
invoke_vii(183, HEAP32[$9 >> 2] | 0, $0 | 0);
$24 = __THREW__;
__THREW__ = 0;
if (!($24 & 1)) {
STACKTOP = sp;
return;
}
}
} while (0);
$15 = ___cxa_find_matching_catch_2() | 0;
HEAP32[$0 >> 2] = 3420;
$17 = HEAP32[$1 >> 2] | 0;
if (!$17) ___resumeException($15 | 0);
$19 = HEAP32[$17 >> 2] | 0;
if ($19 | 0) _free($19);
__ZdlPv($17);
HEAP32[$1 >> 2] = 0;
___resumeException($15 | 0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0, $1, $2, $3, $4, $5, $6, $7) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
$6 = $6 | 0;
$7 = $7 | 0;
var $$sroa$speculated = 0, $16 = 0, $17 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $38 = 0, $8 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$8 = sp;
if ((-18 - $1 | 0) >>> 0 < $2 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
if ((HEAP8[$0 + 11 >> 0] | 0) < 0) $25 = HEAP32[$0 >> 2] | 0; else $25 = $0;
if ($1 >>> 0 < 2147483623) {
$16 = $2 + $1 | 0;
$17 = $1 << 1;
$$sroa$speculated = $16 >>> 0 < $17 >>> 0 ? $17 : $16;
$22 = $$sroa$speculated >>> 0 < 11 ? 11 : $$sroa$speculated + 16 & -16;
} else $22 = -17;
$23 = __Znwj($22) | 0;
if ($4 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcj($23, $25, $4) | 0;
if ($6 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcj($23 + $4 | 0, $7, $6) | 0;
$28 = $3 - $5 | 0;
$29 = $28 - $4 | 0;
if ($29 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcj($23 + $4 + $6 | 0, $25 + $4 + $5 | 0, $29) | 0;
if (($1 | 0) != 10) __ZdlPv($25);
HEAP32[$0 >> 2] = $23;
HEAP32[$0 + 8 >> 2] = $22 | -2147483648;
$38 = $28 + $6 | 0;
HEAP32[$0 + 4 >> 2] = $38;
HEAP8[$8 >> 0] = 0;
__ZNSt3__211char_traitsIcE6assignERcRKc($23 + $38 | 0, $8);
STACKTOP = sp;
return;
}
function __ZN17QuatJointRotation10setComposeERK10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $10 = f0, $12 = f0, $13 = 0, $14 = f0, $16 = f0, $18 = f0, $19 = 0, $2 = 0, $20 = f0, $21 = f0, $23 = f0, $3 = f0, $30 = f0, $37 = f0, $45 = f0, $5 = f0, $6 = f0, $7 = 0, $8 = f0;
$2 = $0 + 12 | 0;
$3 = Math_fround(HEAPF32[$2 >> 2]);
$5 = Math_fround(HEAPF32[$1 + 8 >> 2]);
$6 = Math_fround($3 * $5);
$7 = $0 + 16 | 0;
$8 = Math_fround(HEAPF32[$7 >> 2]);
$10 = Math_fround(HEAPF32[$1 + 4 >> 2]);
$12 = Math_fround($6 - Math_fround($8 * $10));
$13 = $0 + 8 | 0;
$14 = Math_fround(HEAPF32[$13 >> 2]);
$16 = Math_fround(HEAPF32[$1 + 12 >> 2]);
$18 = Math_fround($12 + Math_fround($14 * $16));
$19 = $0 + 20 | 0;
$20 = Math_fround(HEAPF32[$19 >> 2]);
$21 = Math_fround(HEAPF32[$1 >> 2]);
$23 = Math_fround($18 + Math_fround($20 * $21));
$30 = Math_fround(Math_fround($10 * $20) + Math_fround(Math_fround($3 * $16) + Math_fround(Math_fround($8 * $21) - Math_fround($5 * $14))));
$37 = Math_fround(Math_fround($5 * $20) + Math_fround(Math_fround($8 * $16) + Math_fround(Math_fround($10 * $14) - Math_fround($3 * $21))));
$45 = Math_fround(Math_fround($16 * $20) + Math_fround(Math_fround(Math_fround(-Math_fround($14 * $21)) - Math_fround($3 * $10)) - Math_fround($5 * $8)));
HEAPF32[$13 >> 2] = $23;
HEAPF32[$2 >> 2] = $30;
HEAPF32[$7 >> 2] = $37;
HEAPF32[$19 >> 2] = $45;
return;
}
function __ZNK13SplitMovement12CopyMovementEv($0) {
$0 = $0 | 0;
var $1 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $36 = 0, $39 = 0, $40 = 0, $6 = 0;
$1 = __Znwj(536) | 0;
HEAP32[$1 >> 2] = 1984;
HEAP32[$1 + 12 >> 2] = 0;
HEAP32[$1 + 16 >> 2] = 0;
HEAP8[$1 + 20 >> 0] = 0;
__THREW__ = 0;
invoke_vi(141, $1 + 60 | 0);
$6 = __THREW__;
__THREW__ = 0;
if ($6 & 1) {
$39 = ___cxa_find_matching_catch_2() | 0;
$40 = tempRet0;
__ZdlPv($1);
___resumeException($39 | 0);
}
HEAP32[$1 >> 2] = 3164;
_memcpy($1 + 4 | 0, $0 + 4 | 0, 524) | 0;
$10 = $1 + 528 | 0;
$12 = $0 + 528 | 0;
$14 = HEAP32[$12 >> 2] | 0;
$17 = HEAP32[$12 + 4 >> 2] | 0;
$18 = $10;
HEAP32[$18 >> 2] = $14;
HEAP32[$18 + 4 >> 2] = $17;
__THREW__ = 0;
$27 = invoke_ii(HEAP32[(HEAP32[$14 >> 2] | 0) + 8 >> 2] | 0, $14 | 0) | 0;
$28 = __THREW__;
__THREW__ = 0;
if ($28 & 1) {
$39 = ___cxa_find_matching_catch_2() | 0;
$40 = tempRet0;
__ZdlPv($1);
___resumeException($39 | 0);
}
HEAP32[$10 >> 2] = $27;
$31 = HEAP32[$0 + 532 >> 2] | 0;
__THREW__ = 0;
$35 = invoke_ii(HEAP32[(HEAP32[$31 >> 2] | 0) + 8 >> 2] | 0, $31 | 0) | 0;
$36 = __THREW__;
__THREW__ = 0;
if ($36 & 1) {
$39 = ___cxa_find_matching_catch_2() | 0;
$40 = tempRet0;
__ZdlPv($1);
___resumeException($39 | 0);
} else {
HEAP32[$1 + 532 >> 2] = $35;
return $1 | 0;
}
return 0;
}
function __ZN11ParMovementD0Ev($0) {
$0 = $0 | 0;
var $$06$i$i = 0, $$pr6$i = 0, $$pre$i = 0, $$pre$i$i = 0, $1 = 0, $13 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $4 = 0, $7 = 0, $8 = 0, label = 0;
HEAP32[$0 >> 2] = 2972;
$1 = $0 + 528 | 0;
$2 = HEAP32[$1 >> 2] | 0;
$$pre$i = $0 + 540 | 0;
if (!$2) {
__ZdlPv($0);
return;
}
$4 = HEAP32[$$pre$i >> 2] | 0;
do if (($4 | 0) > 0) {
$$06$i$i = 0;
$25 = $4;
$7 = $2;
while (1) {
$8 = HEAP32[$7 + ($$06$i$i << 2) >> 2] | 0;
if (!$8) {
$$pre$i$i = $7;
$19 = $25;
} else {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] | 0, $8 | 0);
$13 = __THREW__;
__THREW__ = 0;
if ($13 & 1) break;
HEAP32[(HEAP32[$1 >> 2] | 0) + ($$06$i$i << 2) >> 2] = 0;
$$pre$i$i = HEAP32[$1 >> 2] | 0;
$19 = HEAP32[$$pre$i >> 2] | 0;
}
$$06$i$i = $$06$i$i + 1 | 0;
if (($$06$i$i | 0) >= ($19 | 0)) {
label = 7;
break;
} else {
$25 = $19;
$7 = $$pre$i$i;
}
}
if ((label | 0) == 7) {
if ($$pre$i$i | 0) {
$$pr6$i = $$pre$i$i;
break;
}
__ZdlPv($0);
return;
}
$21 = ___cxa_find_matching_catch_2() | 0;
$23 = HEAP32[$1 >> 2] | 0;
if (!$23) {
__ZdlPv($0);
___resumeException($21 | 0);
}
_free($23);
__ZdlPv($0);
___resumeException($21 | 0);
} else $$pr6$i = $2; while (0);
_free($$pr6$i);
__ZdlPv($0);
return;
}
function ___fwritex($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$038 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $9 = 0, label = 0;
$3 = $2 + 16 | 0;
$4 = HEAP32[$3 >> 2] | 0;
if (!$4) if (!(___towrite($2) | 0)) {
$12 = HEAP32[$3 >> 2] | 0;
label = 5;
} else $$1 = 0; else {
$12 = $4;
label = 5;
}
L5 : do if ((label | 0) == 5) {
$9 = $2 + 20 | 0;
$10 = HEAP32[$9 >> 2] | 0;
$14 = $10;
if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
$$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 31]($2, $0, $1) | 0;
break;
}
L10 : do if ((HEAP8[$2 + 75 >> 0] | 0) > -1) {
$$038 = $1;
while (1) {
if (!$$038) {
$$139 = 0;
$$141 = $0;
$$143 = $1;
$31 = $14;
break L10;
}
$22 = $$038 + -1 | 0;
if ((HEAP8[$0 + $22 >> 0] | 0) == 10) break; else $$038 = $22;
}
$28 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 31]($2, $0, $$038) | 0;
if ($28 >>> 0 < $$038 >>> 0) {
$$1 = $28;
break L5;
}
$$139 = $$038;
$$141 = $0 + $$038 | 0;
$$143 = $1 - $$038 | 0;
$31 = HEAP32[$9 >> 2] | 0;
} else {
$$139 = 0;
$$141 = $0;
$$143 = $1;
$31 = $14;
} while (0);
_memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0;
HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143;
$$1 = $$139 + $$143 | 0;
} while (0);
return $$1 | 0;
}
function __ZN17QuatJointRotation13setComposeInvERK10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $10 = f0, $12 = f0, $13 = 0, $14 = f0, $16 = f0, $18 = f0, $19 = 0, $2 = 0, $20 = f0, $21 = f0, $23 = f0, $3 = f0, $30 = f0, $37 = f0, $44 = f0, $5 = f0, $6 = f0, $7 = 0, $8 = f0;
$2 = $0 + 12 | 0;
$3 = Math_fround(HEAPF32[$2 >> 2]);
$5 = Math_fround(HEAPF32[$1 + 8 >> 2]);
$6 = Math_fround($3 * $5);
$7 = $0 + 16 | 0;
$8 = Math_fround(HEAPF32[$7 >> 2]);
$10 = Math_fround(HEAPF32[$1 + 4 >> 2]);
$12 = Math_fround(Math_fround($8 * $10) - $6);
$13 = $0 + 8 | 0;
$14 = Math_fround(HEAPF32[$13 >> 2]);
$16 = Math_fround(HEAPF32[$1 + 12 >> 2]);
$18 = Math_fround($12 + Math_fround($14 * $16));
$19 = $0 + 20 | 0;
$20 = Math_fround(HEAPF32[$19 >> 2]);
$21 = Math_fround(HEAPF32[$1 >> 2]);
$23 = Math_fround($18 - Math_fround($20 * $21));
$30 = Math_fround(Math_fround(Math_fround($3 * $16) + Math_fround(Math_fround($5 * $14) - Math_fround($8 * $21))) - Math_fround($10 * $20));
$37 = Math_fround(Math_fround(Math_fround($8 * $16) + Math_fround(Math_fround($3 * $21) - Math_fround($10 * $14))) - Math_fround($5 * $20));
$44 = Math_fround(Math_fround($16 * $20) + Math_fround(Math_fround($5 * $8) + Math_fround(Math_fround($3 * $10) + Math_fround($14 * $21))));
HEAPF32[$13 >> 2] = $23;
HEAPF32[$2 >> 2] = $30;
HEAPF32[$7 >> 2] = $37;
HEAPF32[$19 >> 2] = $44;
return;
}
function __ZN20QuaternionController8XnewTimeEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $$020 = 0, $10 = 0, $11 = 0, $12 = f0, $14 = f0, $20 = 0, $23 = f0, $5 = 0, $6 = 0, $7 = 0, $8 = f0;
if ((HEAP32[$0 + 448 >> 2] | 0) == 1) {
$5 = $0 + 548 | 0;
$6 = $0 + 532 | 0;
HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
HEAP32[$6 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
HEAP32[$6 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
HEAP32[$6 + 12 >> 2] = HEAP32[$5 + 12 >> 2];
return;
}
$7 = $0 + 480 | 0;
$8 = Math_fround(HEAPF32[$7 >> 2]);
do if ($8 == Math_fround(-1.0)) {
$10 = $0 + 548 | 0;
$11 = $0 + 532 | 0;
HEAP32[$11 >> 2] = HEAP32[$10 >> 2];
HEAP32[$11 + 4 >> 2] = HEAP32[$10 + 4 >> 2];
HEAP32[$11 + 8 >> 2] = HEAP32[$10 + 8 >> 2];
HEAP32[$11 + 12 >> 2] = HEAP32[$10 + 12 >> 2];
} else {
$12 = Math_fround($1 - $8);
$14 = Math_fround(HEAPF32[$0 + 620 >> 2]);
if ($12 <= $14) {
__ZN20QuaternionController11microUpdateEf($0, $12);
break;
}
$20 = ~~(+Math_fround($12 / $14) + .99);
if ($14 == Math_fround(0.0) | ($20 | 0) < 2) {
__ZN20QuaternionController11microUpdateEf($0, $12);
break;
}
$23 = Math_fround($12 / Math_fround($20 | 0));
if (($20 | 0) > 0) {
$$020 = 0;
do {
__ZN20QuaternionController11microUpdateEf($0, $23);
$$020 = $$020 + 1 | 0;
} while (($$020 | 0) != ($20 | 0));
}
} while (0);
HEAPF32[$7 >> 2] = $1;
return;
}
function __ZNK19OneHConcretePosture14printUndefinedEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$1$off0 = 0, $$3$off0 = 0, $$5$off0 = 0;
if (!$1) return;
if (Math_fround(HEAPF32[$0 + 4 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 8 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 12 >> 2]) == Math_fround(0.0)) {
_fwrite(38313, 18, 1, $1) | 0;
$$1$off0 = 0;
} else $$1$off0 = 1; else $$1$off0 = 1; else $$1$off0 = 1;
if (Math_fround(HEAPF32[$0 + 16 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 20 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 24 >> 2]) == Math_fround(0.0)) {
if (!$$1$off0) _fwrite(38332, 2, 1, $1) | 0;
_fwrite(38335, 20, 1, $1) | 0;
$$3$off0 = 0;
} else $$3$off0 = $$1$off0; else $$3$off0 = $$1$off0; else $$3$off0 = $$1$off0;
if (Math_fround(HEAPF32[$0 + 40 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 44 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 48 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 52 >> 2]) == Math_fround(1.0)) {
if (!$$3$off0) _fwrite(38332, 2, 1, $1) | 0;
_fwrite(38356, 19, 1, $1) | 0;
$$5$off0 = 0;
} else $$5$off0 = $$3$off0; else $$5$off0 = $$3$off0; else $$5$off0 = $$3$off0; else $$5$off0 = $$3$off0;
if (HEAP32[$0 + 56 >> 2] | 0) return;
if (!$$5$off0) _fwrite(38332, 2, 1, $1) | 0;
_fwrite(38376, 12, 1, $1) | 0;
return;
}
function __ZN5Joint17addGlobalRotationERK10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $18 = 0, $2 = 0, $28 = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$2 = sp + 24 | 0;
if (0) {
HEAP32[$vararg_buffer >> 2] = HEAP32[$0 >> 2];
__Z7eprintfPKcz(13e3, $vararg_buffer);
__ZNK9Transform5printEP8_IO_FILEi($0 + 68 | 0, HEAP32[16082] | 0, 6);
__Z5eputcc(10);
}
HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
$18 = HEAP32[$0 + 8 >> 2] | 0;
if ($18 | 0) __ZNK9Transform20invTransformRotationER10Quaternion($18 + 68 | 0, $2);
__ZN10Quaternion13setPreComposeERKS_($0 + 52 | 0, $2);
__ZN5Joint17completeInitFrameEv($0);
if (!0) {
STACKTOP = sp;
return;
}
HEAP32[$vararg_buffer1 >> 2] = HEAP32[$0 >> 2];
__Z7eprintfPKcz(13035, $vararg_buffer1);
__ZNK9Transform5printEP8_IO_FILEi($0 + 68 | 0, HEAP32[16082] | 0, 6);
__Z5eputsPKc(13077);
__ZN10Quaternion5printEP8_IO_FILEi($2, HEAP32[16082] | 0, 6);
$28 = +Math_fround(__ZNK10Quaternion8getAngleEv($2));
HEAPF64[$vararg_buffer4 >> 3] = $28;
__Z7eprintfPKcz(13094, $vararg_buffer4);
__Z5eputcc(10);
STACKTOP = sp;
return;
}
function __ZN20QuaternionController14get_perceptionER10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $10 = f0, $11 = 0, $15 = f0, $16 = 0, $2 = 0, $20 = f0, $21 = 0, $25 = f0, $28 = 0, $3 = 0, $30 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
$3 = $2 + 4 | 0;
$4 = $2 + 8 | 0;
$5 = $2 + 12 | 0;
$6 = $0 + 16 | 0;
$10 = Math_fround(FUNCTION_TABLE_fi[HEAP32[(HEAP32[$6 >> 2] | 0) + 32 >> 2] & 3]($6));
$11 = $0 + 124 | 0;
$15 = Math_fround(FUNCTION_TABLE_fi[HEAP32[(HEAP32[$11 >> 2] | 0) + 32 >> 2] & 3]($11));
$16 = $0 + 232 | 0;
$20 = Math_fround(FUNCTION_TABLE_fi[HEAP32[(HEAP32[$16 >> 2] | 0) + 32 >> 2] & 3]($16));
$21 = $0 + 340 | 0;
$25 = Math_fround(FUNCTION_TABLE_fi[HEAP32[(HEAP32[$21 >> 2] | 0) + 32 >> 2] & 3]($21));
HEAPF32[$2 >> 2] = $10;
HEAPF32[$3 >> 2] = $15;
HEAPF32[$4 >> 2] = $20;
HEAPF32[$5 >> 2] = $25;
__ZN10Quaternion16setPositivePhaseEv($2);
__ZN10Quaternion9normaliseEv($2);
HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
$28 = $1 + 4 | 0;
HEAP32[$28 >> 2] = HEAP32[$3 >> 2];
$30 = $1 + 8 | 0;
HEAP32[$30 >> 2] = HEAP32[$4 >> 2];
$32 = $1 + 12 | 0;
HEAP32[$32 >> 2] = HEAP32[$5 >> 2];
HEAP32[$1 >> 2] = HEAP32[$0 + 532 >> 2];
HEAP32[$28 >> 2] = HEAP32[$0 + 536 >> 2];
HEAP32[$30 >> 2] = HEAP32[$0 + 540 >> 2];
HEAP32[$32 >> 2] = HEAP32[$0 + 544 >> 2];
STACKTOP = sp;
return;
}
function __ZN13ParTimedMorph10CalcTimingEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $$018 = 0, $10 = 0, $14 = 0, $16 = 0, $2 = 0, $20 = f0, $22 = f0, $24 = f0, $27 = f0, $3 = 0, $32 = f0, $34 = f0, $4 = 0, $8 = 0, $9 = 0;
$2 = $0 + 24 | 0;
$3 = HEAP32[$2 >> 2] | 0;
$4 = $3 + 12 | 0;
if (!(HEAP32[$4 >> 2] | 0)) return;
HEAPF32[$0 + 4 >> 2] = $1;
$8 = $0 + 8 | 0;
HEAPF32[$8 >> 2] = $1;
$9 = $0 + 12 | 0;
HEAPF32[$9 >> 2] = $1;
$10 = $0 + 16 | 0;
HEAPF32[$10 >> 2] = $1;
if ((HEAP32[$4 >> 2] | 0) <= 0) return;
$$018 = 0;
$14 = $3;
do {
$16 = HEAP32[(HEAP32[$14 >> 2] | 0) + ($$018 << 2) >> 2] | 0;
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$16 >> 2] | 0) + 12 >> 2] & 63]($16, $1);
$20 = Math_fround(HEAPF32[$8 >> 2]);
$22 = Math_fround(HEAPF32[$16 + 8 >> 2]);
if ($20 < $22) HEAPF32[$8 >> 2] = $22;
$24 = Math_fround(HEAPF32[$9 >> 2]);
do if ($24 >= Math_fround(0.0)) {
$27 = Math_fround(HEAPF32[$16 + 12 >> 2]);
if ($27 < Math_fround(0.0)) {
HEAPF32[$9 >> 2] = $27;
HEAP32[$10 >> 2] = HEAP32[$16 + 16 >> 2];
break;
}
if ($24 < $27) HEAPF32[$9 >> 2] = $27;
$32 = Math_fround(HEAPF32[$10 >> 2]);
$34 = Math_fround(HEAPF32[$16 + 16 >> 2]);
if ($32 < $34) HEAPF32[$10 >> 2] = $34;
} while (0);
$$018 = $$018 + 1 | 0;
$14 = HEAP32[$2 >> 2] | 0;
} while (($$018 | 0) < (HEAP32[$14 + 12 >> 2] | 0));
return;
}
function __ZNK13SplitMovement5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $12 = 0, $20 = 0, $25 = 0, $5 = 0, $7 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
HEAP32[$vararg_buffer >> 2] = $0;
_fprintf($1, 45053, $vararg_buffer) | 0;
__ZNK13BasicMovement5printEP8_IO_FILE($0, $1);
$5 = (HEAP16[36078] | 0) + 1 << 16 >> 16;
HEAP16[36078] = $5;
__Z11printIndentP8_IO_FILEi($1, $5 << 16 >> 16);
$7 = $0 + 528 | 0;
if (!(HEAP32[$7 >> 2] | 0)) _fwrite(45090, 23, 1, $1) | 0; else {
_fwrite(45071, 18, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
$12 = HEAP32[$7 >> 2] | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 72 >> 2] & 255]($12, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$20 = $0 + 532 | 0;
if (!(HEAP32[$20 >> 2] | 0)) _fwrite(45132, 22, 1, $1) | 0; else {
_fwrite(45114, 17, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
$25 = HEAP32[$20 >> 2] | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$25 >> 2] | 0) + 72 >> 2] & 255]($25, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
}
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
STACKTOP = sp;
return;
}
function __ZN11TokenStreamC2EPKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $11 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$2 = $0 + 8 | 0;
HEAP8[$2 >> 0] = 0;
HEAP32[$0 + 12 >> 2] = 0;
$4 = $0 + 32 | 0;
HEAP32[$4 >> 2] = 0;
HEAP8[$4 + 4 >> 0] = 0;
HEAP8[$0 + 37 >> 0] = 1;
HEAP8[$0 + 38 >> 0] = 0;
HEAP32[$0 >> 2] = 0;
$7 = $0 + 4 | 0;
HEAP32[$7 >> 2] = 0;
$8 = __Znwj(16) | 0;
__THREW__ = 0;
invoke_vii(116, $8 | 0, 1e3);
$9 = __THREW__;
__THREW__ = 0;
if ($9 & 1) {
$11 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($8);
___resumeException($11 | 0);
}
HEAP32[$0 + 16 >> 2] = $8;
HEAP32[$0 + 20 >> 2] = 0;
HEAP32[$0 + 24 >> 2] = 0;
HEAP32[$0 + 28 >> 2] = -1;
if (!$1) {
STACKTOP = sp;
return;
}
$18 = __Z10copyStringPKc($1) | 0;
HEAP32[$0 >> 2] = $18;
$19 = HEAP32[$7 >> 2] | 0;
if (!$19) $22 = $18; else {
_fclose($19) | 0;
HEAP32[$7 >> 2] = 0;
$22 = HEAP32[$0 >> 2] | 0;
}
if ($22 | 0) {
$23 = _fopen($22, 54169) | 0;
HEAP32[$7 >> 2] = $23;
if ($23 | 0) {
if (!0) {
STACKTOP = sp;
return;
}
HEAP32[$vararg_buffer >> 2] = HEAP32[$0 >> 2];
__Z7eprintfPKcz(9267, $vararg_buffer);
STACKTOP = sp;
return;
}
}
HEAP8[$2 >> 0] = 1;
STACKTOP = sp;
return;
}
function __ZNK28InvertibleDynamicStringArray14indexFromValueEPKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$012$i$i = 0, $$01215$i$i = 0, $$01216$i$i = 0, $$07$lcssa$i$i$i = 0, $$078$i$i$i = 0, $$09$i$i$i = 0, $$sink$i$i = 0, $13 = 0, $16 = 0, $17 = 0, $2 = 0, $30 = 0, $4 = 0, $5 = 0, $8 = 0;
$2 = HEAP32[$0 >> 2] | 0;
$4 = HEAP32[$2 + 4 >> 2] | 0;
$5 = HEAP8[$1 >> 0] | 0;
if (!($5 << 24 >> 24)) $$07$lcssa$i$i$i = 0; else {
$$078$i$i$i = 0;
$$09$i$i$i = $1;
$8 = $5;
while (1) {
$$09$i$i$i = $$09$i$i$i + 1 | 0;
$13 = ($$078$i$i$i << 8 | $$078$i$i$i >>> 24) + ($8 & 255) | 0;
$8 = HEAP8[$$09$i$i$i >> 0] | 0;
if (!($8 << 24 >> 24)) {
$$07$lcssa$i$i$i = $13;
break;
} else $$078$i$i$i = $13;
}
}
$16 = ($$07$lcssa$i$i$i >>> 0) % ($4 >>> 0) | 0;
$17 = HEAP32[$2 >> 2] | 0;
L5 : do if ((HEAP16[$17 + ($16 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i = HEAP32[$17 + ($16 << 3) >> 2] | 0;
if ($$01215$i$i | 0) {
$$01216$i$i = $$01215$i$i;
while (1) {
if (!(_strcmp($1, HEAP32[$$01216$i$i >> 2] | 0) | 0)) break;
$$012$i$i = HEAP32[$$01216$i$i + 8 >> 2] | 0;
if (!$$012$i$i) break L5; else $$01216$i$i = $$012$i$i;
}
$$sink$i$i = $$01216$i$i + 4 | 0;
$30 = HEAP32[$$sink$i$i >> 2] | 0;
return $30 | 0;
}
} while (0);
$$sink$i$i = $2 + 20 | 0;
$30 = HEAP32[$$sink$i$i >> 2] | 0;
return $30 | 0;
}
function __ZN5SiGML16convertboolfalseEPKc($0) {
$0 = $0 | 0;
var $$012$i$i$i = 0, $$01215$i$i$i = 0, $$01216$i$i$i = 0, $$1$i = 0, $$sink$i$i$i = 0, $1 = 0, $18 = 0, $20 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$1 = HEAP32[17198] | 0;
if (!$0) {
$$1$i = 0;
$20 = ($$1$i | 0) == 1;
STACKTOP = sp;
return $20 | 0;
}
$5 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($0, HEAP32[$1 + 4 >> 2] | 0) | 0;
$6 = HEAP32[$1 >> 2] | 0;
L4 : do if ((HEAP16[$6 + ($5 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i = HEAP32[$6 + ($5 << 3) >> 2] | 0;
if (!$$01215$i$i$i) label = 7; else {
$$01216$i$i$i = $$01215$i$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($0, HEAP32[$$01216$i$i$i >> 2] | 0) | 0) break;
$$012$i$i$i = HEAP32[$$01216$i$i$i + 8 >> 2] | 0;
if (!$$012$i$i$i) {
label = 7;
break L4;
} else $$01216$i$i$i = $$012$i$i$i;
}
$$sink$i$i$i = $$01216$i$i$i + 4 | 0;
}
} else label = 7; while (0);
if ((label | 0) == 7) $$sink$i$i$i = $1 + 20 | 0;
$18 = HEAP32[$$sink$i$i$i >> 2] | 0;
if (($18 | 0) != -1) {
$$1$i = $18;
$20 = ($$1$i | 0) == 1;
STACKTOP = sp;
return $20 | 0;
}
HEAP32[$vararg_buffer >> 2] = $0;
__Z7eprintfPKcz(53557, $vararg_buffer);
$$1$i = 0;
$20 = ($$1$i | 0) == 1;
STACKTOP = sp;
return $20 | 0;
}
function __ZN11ParMovement17setFinalHandStuffERK12TwoHandStuffRK20ArmHandConstellation($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$013 = 0, $10 = 0, $11 = 0, $13 = 0, $18 = 0, $20 = 0, $24 = 0, $25 = 0, $28 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0;
$sext = HEAP32[$0 + 540 >> 2] << 16;
$5 = $sext >> 16;
if (($sext | 0) > 0) {
$7 = $0 + 528 | 0;
$$013 = 0;
do {
$28 = HEAP32[(HEAP32[$7 >> 2] | 0) + ($$013 << 2) >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$28 >> 2] | 0) + 32 >> 2] & 127]($28, $1, $2);
$$013 = $$013 + 1 | 0;
} while (($$013 | 0) < ($5 | 0));
}
$8 = $1 + 20 | 0;
$9 = $0 + 324 | 0;
HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
HEAP32[$9 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
HEAP32[$9 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
HEAP32[$9 + 12 >> 2] = HEAP32[$8 + 12 >> 2];
$10 = $1 + 64 | 0;
$11 = $0 + 436 | 0;
HEAP32[$11 >> 2] = HEAP32[$10 >> 2];
HEAP32[$11 + 4 >> 2] = HEAP32[$10 + 4 >> 2];
HEAP32[$11 + 8 >> 2] = HEAP32[$10 + 8 >> 2];
HEAP32[$11 + 12 >> 2] = HEAP32[$10 + 12 >> 2];
$13 = HEAP32[$1 + 36 >> 2] | 0;
if (!$13) $18 = 0; else $18 = HEAP32[$13 + 236 >> 2] | 0;
HEAP32[$0 + 340 >> 2] = $18;
$20 = HEAP32[$1 + 80 >> 2] | 0;
if (!$20) {
$25 = 0;
$24 = $0 + 452 | 0;
HEAP32[$24 >> 2] = $25;
return;
}
$25 = HEAP32[$20 + 236 >> 2] | 0;
$24 = $0 + 452 | 0;
HEAP32[$24 >> 2] = $25;
return;
}
function _handleUnknownEncoding($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$022$ph = 0, $$3 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $24 = 0, $31 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 1040 | 0;
$2 = sp;
$4 = HEAP32[$0 + 124 >> 2] | 0;
if (!$4) {
$$3 = 18;
STACKTOP = sp;
return $$3 | 0;
}
_memset($2 | 0, -1, 1024) | 0;
$6 = $2 + 1028 | 0;
HEAP32[$6 >> 2] = 0;
$7 = $2 + 1024 | 0;
HEAP32[$7 >> 2] = 0;
$8 = $2 + 1032 | 0;
HEAP32[$8 >> 2] = 0;
do if (FUNCTION_TABLE_iiii[$4 & 31](HEAP32[$0 + 244 >> 2] | 0, $1, $2) | 0) {
$14 = HEAP32[$0 + 12 >> 2] | 0;
$15 = _XmlSizeOfUnknownEncoding() | 0;
$16 = FUNCTION_TABLE_ii[$14 & 63]($15) | 0;
HEAP32[$0 + 236 >> 2] = $16;
if (!$16) {
$19 = HEAP32[$8 >> 2] | 0;
if (!$19) $$022$ph = 1; else {
FUNCTION_TABLE_vi[$19 & 255](HEAP32[$7 >> 2] | 0);
$$022$ph = 1;
}
} else {
$24 = _XmlInitUnknownEncoding($16, $2, HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0) | 0;
if (!$24) break;
HEAP32[$0 + 240 >> 2] = HEAP32[$7 >> 2];
HEAP32[$0 + 248 >> 2] = HEAP32[$8 >> 2];
HEAP32[$0 + 144 >> 2] = $24;
$$022$ph = 0;
}
$$3 = $$022$ph;
STACKTOP = sp;
return $$3 | 0;
} while (0);
$31 = HEAP32[$8 >> 2] | 0;
if ($31 | 0) FUNCTION_TABLE_vi[$31 & 255](HEAP32[$7 >> 2] | 0);
$$3 = 18;
STACKTOP = sp;
return $$3 | 0;
}
function __ZN20HanimAnimationRecord14printARPHeaderEv($0) {
$0 = $0 | 0;
var $1 = 0, $15 = 0, $17 = 0, $2 = 0, $4 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer7 = sp + 24 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$1 = $0 + 12 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if (!$2) {
STACKTOP = sp;
return;
}
$4 = $0 + 20 | 0;
if ((HEAP32[$4 >> 2] | 0) == 5) {
STACKTOP = sp;
return;
}
$7 = _fopen($2, 12585) | 0;
HEAP32[$0 + 96 >> 2] = $7;
if (!$7) {
HEAP32[$vararg_buffer >> 2] = HEAP32[$1 >> 2];
__Z7eprintfPKcz(12836, $vararg_buffer);
STACKTOP = sp;
return;
}
switch (HEAP32[$4 >> 2] | 0) {
case 3:
{
$15 = HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 56 >> 2] | 0;
$17 = HEAP32[$0 + 116 >> 2] | 0;
_fwrite(12623, 56, 1, $7) | 0;
HEAP32[$vararg_buffer1 >> 2] = $15;
_fprintf($7, 12680, $vararg_buffer1) | 0;
HEAP32[$vararg_buffer4 >> 2] = $17;
_fprintf($7, 12716, $vararg_buffer4) | 0;
STACKTOP = sp;
return;
}
case 2:
{
HEAP32[$vararg_buffer7 >> 2] = HEAP32[$0 + 116 >> 2];
_fprintf($7, 12737, $vararg_buffer7) | 0;
STACKTOP = sp;
return;
}
case 1:
{
STACKTOP = sp;
return;
}
default:
{
STACKTOP = sp;
return;
}
}
}
function __ZNK21InvertibleStringArray14indexFromValueEPKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$012$i$i = 0, $$01215$i$i = 0, $$01216$i$i = 0, $$07$lcssa$i$i$i = 0, $$078$i$i$i = 0, $$09$i$i$i = 0, $$sink$i$i = 0, $13 = 0, $16 = 0, $17 = 0, $2 = 0, $30 = 0, $4 = 0, $5 = 0, $8 = 0;
$2 = HEAP32[$0 >> 2] | 0;
$4 = HEAP32[$2 + 4 >> 2] | 0;
$5 = HEAP8[$1 >> 0] | 0;
if (!($5 << 24 >> 24)) $$07$lcssa$i$i$i = 0; else {
$$078$i$i$i = 0;
$$09$i$i$i = $1;
$8 = $5;
while (1) {
$$09$i$i$i = $$09$i$i$i + 1 | 0;
$13 = ($$078$i$i$i << 8 | $$078$i$i$i >>> 24) + ($8 & 255) | 0;
$8 = HEAP8[$$09$i$i$i >> 0] | 0;
if (!($8 << 24 >> 24)) {
$$07$lcssa$i$i$i = $13;
break;
} else $$078$i$i$i = $13;
}
}
$16 = ($$07$lcssa$i$i$i >>> 0) % ($4 >>> 0) | 0;
$17 = HEAP32[$2 >> 2] | 0;
L5 : do if ((HEAP16[$17 + ($16 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i = HEAP32[$17 + ($16 << 3) >> 2] | 0;
if ($$01215$i$i | 0) {
$$01216$i$i = $$01215$i$i;
while (1) {
if (!(_strcmp($1, HEAP32[$$01216$i$i >> 2] | 0) | 0)) break;
$$012$i$i = HEAP32[$$01216$i$i + 8 >> 2] | 0;
if (!$$012$i$i) break L5; else $$01216$i$i = $$012$i$i;
}
$$sink$i$i = $$01216$i$i + 4 | 0;
$30 = HEAP32[$$sink$i$i >> 2] | 0;
return $30 | 0;
}
} while (0);
$$sink$i$i = $2 + 20 | 0;
$30 = HEAP32[$$sink$i$i >> 2] | 0;
return $30 | 0;
}
function __ZN11ParMovement11setDurationEfb($0, $1, $2) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = $2 | 0;
var $$016 = 0, $10 = f0, $11 = 0, $12 = f0, $16 = f0, $17 = f0, $18 = f0, $21 = 0, $23 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = f0, $7 = f0, $8 = 0, $sext = 0;
$3 = $0 + 40 | 0;
$4 = Math_fround(HEAPF32[$3 >> 2]);
do if ($2) if ($4 == Math_fround(0.0)) {
HEAPF32[$0 + 44 >> 2] = Math_fround(0.0);
$18 = Math_fround(0.0);
break;
} else {
$7 = Math_fround($1 / $4);
$8 = $0 + 44 | 0;
$10 = Math_fround($7 * Math_fround(HEAPF32[$8 >> 2]));
HEAPF32[$8 >> 2] = $10;
$18 = $10;
break;
} else {
$11 = $0 + 44 | 0;
$12 = Math_fround(HEAPF32[$11 >> 2]);
if (Math_fround($4 - $12) > $1) {
HEAPF32[$11 >> 2] = Math_fround(0.0);
$18 = Math_fround(0.0);
break;
} else {
$16 = Math_fround(Math_fround($1 - $4) + $12);
HEAPF32[$11 >> 2] = $16;
$18 = $16;
break;
}
} while (0);
HEAPF32[$3 >> 2] = $1;
$17 = Math_fround($1 - $18);
$sext = HEAP32[$0 + 540 >> 2] << 16;
$21 = $sext >> 16;
if (($sext | 0) <= 0) return;
$23 = $0 + 528 | 0;
$$016 = 0;
$26 = 0;
do {
$27 = HEAP32[(HEAP32[$23 >> 2] | 0) + ($26 << 2) >> 2] | 0;
FUNCTION_TABLE_vifi[HEAP32[(HEAP32[$27 >> 2] | 0) + 64 >> 2] & 7]($27, $17, $2);
$$016 = $$016 + 1 << 16 >> 16;
$26 = $$016 << 16 >> 16;
} while (($21 | 0) > ($26 | 0));
return;
}
function __ZNK23FingerBaseJointRotation12toQuaternionER10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $11 = f0, $14 = f0, $16 = f0, $18 = f0, $2 = 0, $23 = f0, $3 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = f0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$2 = sp + 48 | 0;
$3 = sp + 32 | 0;
$4 = sp + 16 | 0;
$5 = sp;
$6 = $0 + 44 | 0;
$8 = Math_fround(Math_fround(HEAPF32[$6 >> 2]) / Math_fround(1.57079637));
$11 = Math_fround(Math_fround(HEAPF32[$0 + 68 >> 2]) * $8);
$14 = Math_fround(Math_fround(1.0) - $8);
$16 = Math_fround($11 + Math_fround($14 * Math_fround(HEAPF32[$0 + 48 >> 2])));
$18 = Math_fround(HEAPF32[$0 + 60 >> 2]);
$23 = Math_fround(Math_fround($14 * $18) + Math_fround($8 * Math_fround(HEAPF32[$0 + 64 >> 2])));
__ZN10QuaternionC2ERK6Vectorfb($2, $0 + 32 | 0, $11, 1);
HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
HEAP32[$1 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
$35 = $0 + 20 | 0;
__ZN10QuaternionC2ERK6Vectorfb($3, $35, $23, 1);
__ZN10Quaternion13setPreComposeERKS_($1, $3);
__ZN10QuaternionC2ERK6Vectorfb($4, $0 + 8 | 0, Math_fround(HEAPF32[$6 >> 2]), 1);
__ZN10Quaternion13setPreComposeERKS_($1, $4);
__ZN10QuaternionC2ERK6Vectorfb($5, $35, $16, 1);
__ZN10Quaternion13setPreComposeERKS_($1, $5);
STACKTOP = sp;
return;
}
function __ZN10Quaternion13setPreComposeERKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $10 = f0, $12 = f0, $13 = f0, $14 = 0, $15 = f0, $17 = f0, $19 = f0, $20 = f0, $22 = f0, $29 = f0, $3 = f0, $36 = f0, $4 = 0, $44 = f0, $5 = f0, $6 = f0, $8 = f0, $9 = 0;
$3 = Math_fround(HEAPF32[$1 + 4 >> 2]);
$4 = $0 + 8 | 0;
$5 = Math_fround(HEAPF32[$4 >> 2]);
$6 = Math_fround($3 * $5);
$8 = Math_fround(HEAPF32[$1 + 8 >> 2]);
$9 = $0 + 4 | 0;
$10 = Math_fround(HEAPF32[$9 >> 2]);
$12 = Math_fround($6 - Math_fround($8 * $10));
$13 = Math_fround(HEAPF32[$1 >> 2]);
$14 = $0 + 12 | 0;
$15 = Math_fround(HEAPF32[$14 >> 2]);
$17 = Math_fround($12 + Math_fround($13 * $15));
$19 = Math_fround(HEAPF32[$1 + 12 >> 2]);
$20 = Math_fround(HEAPF32[$0 >> 2]);
$22 = Math_fround($17 + Math_fround($19 * $20));
$29 = Math_fround(Math_fround($10 * $19) + Math_fround(Math_fround($3 * $15) + Math_fround(Math_fround($8 * $20) - Math_fround($5 * $13))));
$36 = Math_fround(Math_fround($5 * $19) + Math_fround(Math_fround($8 * $15) + Math_fround(Math_fround($10 * $13) - Math_fround($3 * $20))));
$44 = Math_fround(Math_fround($15 * $19) + Math_fround(Math_fround(Math_fround(-Math_fround($13 * $20)) - Math_fround($3 * $10)) - Math_fround($5 * $8)));
HEAPF32[$0 >> 2] = $22;
HEAPF32[$9 >> 2] = $29;
HEAPF32[$4 >> 2] = $36;
HEAPF32[$14 >> 2] = $44;
return;
}
function __ZN10Quaternion15setFromVecAngleERK6Vectorfb($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
var $$sink$i = f0, $$sink34$i = f0, $$sink36$i = f0, $$sink38$i = f0, $10 = f0, $11 = f0, $12 = f0, $16 = f0, $18 = f0, $4 = f0, $6 = f0, $8 = f0;
$4 = Math_fround(HEAPF32[$1 >> 2]);
$6 = Math_fround(HEAPF32[$1 + 4 >> 2]);
$8 = Math_fround(HEAPF32[$1 + 8 >> 2]);
$10 = Math_fround(Math_fround(__Z11trimAnglePIf($2)) * Math_fround(.5));
$11 = Math_fround(+Math_cos(+$10));
$12 = Math_fround(+Math_sin(+$10));
if ($3) {
$$sink$i = $11;
$$sink34$i = Math_fround($8 * $12);
$$sink36$i = Math_fround($6 * $12);
$$sink38$i = Math_fround($4 * $12);
} else {
$16 = Math_fround(__ZN6Vector7alengthEfff($4, $6, $8));
$18 = Math_fround($12 / $16);
if (!($16 <= Math_fround(0.0))) {
$$sink$i = $11;
$$sink34$i = Math_fround($8 * $18);
$$sink36$i = Math_fround($6 * $18);
$$sink38$i = Math_fround($4 * $18);
} else {
$$sink$i = Math_fround(1.0);
$$sink34$i = Math_fround(0.0);
$$sink36$i = Math_fround(0.0);
$$sink38$i = Math_fround(0.0);
}
}
HEAPF32[$0 >> 2] = $$sink38$i;
HEAPF32[$0 + 4 >> 2] = $$sink36$i;
HEAPF32[$0 + 8 >> 2] = $$sink34$i;
HEAPF32[$0 + 12 >> 2] = $$sink$i;
__ZNK10Quaternion14checkValidQuatEv($0);
__ZNK10Quaternion14checkValidQuatEv($0);
return;
}
function __Z10boolAttribPK7HashAnyIPKcS1_ES1_Rbb($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$012$i$i$i = 0, $$01215$i$i$i = 0, $$01216$i$i$i = 0, $$sink = 0, $$sink$i$i$i = 0, $21 = 0, $4 = 0, $8 = 0, $9 = 0, label = 0;
$4 = $3 & 1;
if ($0 | 0) {
$8 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($1, HEAP32[$0 + 4 >> 2] | 0) | 0;
$9 = HEAP32[$0 >> 2] | 0;
L3 : do if ((HEAP16[$9 + ($8 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i = HEAP32[$9 + ($8 << 3) >> 2] | 0;
if (!$$01215$i$i$i) label = 7; else {
$$01216$i$i$i = $$01215$i$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($1, HEAP32[$$01216$i$i$i >> 2] | 0) | 0) break;
$$012$i$i$i = HEAP32[$$01216$i$i$i + 8 >> 2] | 0;
if (!$$012$i$i$i) {
label = 7;
break L3;
} else $$01216$i$i$i = $$012$i$i$i;
}
$$sink$i$i$i = $$01216$i$i$i + 4 | 0;
}
} else label = 7; while (0);
if ((label | 0) == 7) $$sink$i$i$i = $0 + 20 | 0;
$21 = HEAP32[$$sink$i$i$i >> 2] | 0;
if ($21 | 0) {
if (!(_strcmp($21, 52414) | 0)) {
$$0 = 1;
$$sink = 1;
HEAP8[$2 >> 0] = $$sink;
return $$0 | 0;
}
if (!(_strcmp($21, 52419) | 0)) {
$$0 = 1;
$$sink = 0;
HEAP8[$2 >> 0] = $$sink;
return $$0 | 0;
}
}
}
$$0 = 0;
$$sink = $4;
HEAP8[$2 >> 0] = $$sink;
return $$0 | 0;
}
function _element7($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $10 = 0, $12 = 0, $15 = 0, $17 = 0, $20 = 0, $22 = 0, $5 = 0, $7 = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 39;
break;
}
case 24:
{
$5 = $0 + 4 | 0;
$7 = (HEAP32[$5 >> 2] | 0) + -1 | 0;
HEAP32[$5 >> 2] = $7;
if (!$7) {
HEAP32[$0 >> 2] = 24;
HEAP32[$0 + 8 >> 2] = 39;
$$0 = 45;
} else $$0 = 45;
break;
}
case 36:
{
$10 = $0 + 4 | 0;
$12 = (HEAP32[$10 >> 2] | 0) + -1 | 0;
HEAP32[$10 >> 2] = $12;
if (!$12) {
HEAP32[$0 >> 2] = 24;
HEAP32[$0 + 8 >> 2] = 39;
$$0 = 46;
} else $$0 = 46;
break;
}
case 35:
{
$15 = $0 + 4 | 0;
$17 = (HEAP32[$15 >> 2] | 0) + -1 | 0;
HEAP32[$15 >> 2] = $17;
if (!$17) {
HEAP32[$0 >> 2] = 24;
HEAP32[$0 + 8 >> 2] = 39;
$$0 = 47;
} else $$0 = 47;
break;
}
case 37:
{
$20 = $0 + 4 | 0;
$22 = (HEAP32[$20 >> 2] | 0) + -1 | 0;
HEAP32[$20 >> 2] = $22;
if (!$22) {
HEAP32[$0 >> 2] = 24;
HEAP32[$0 + 8 >> 2] = 39;
$$0 = 48;
} else $$0 = 48;
break;
}
case 38:
{
HEAP32[$0 >> 2] = 28;
$$0 = 50;
break;
}
case 21:
{
HEAP32[$0 >> 2] = 28;
$$0 = 49;
break;
}
default:
{
HEAP32[$0 >> 2] = 4;
$$0 = -1;
}
}
return $$0 | 0;
}
function __ZN20QuaternionController13get_referenceER10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $10 = f0, $11 = 0, $15 = f0, $16 = 0, $2 = 0, $20 = f0, $21 = 0, $25 = f0, $28 = 0, $3 = 0, $30 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
$3 = $2 + 4 | 0;
$4 = $2 + 8 | 0;
$5 = $2 + 12 | 0;
$6 = $0 + 16 | 0;
$10 = Math_fround(FUNCTION_TABLE_fi[HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] & 3]($6));
$11 = $0 + 124 | 0;
$15 = Math_fround(FUNCTION_TABLE_fi[HEAP32[(HEAP32[$11 >> 2] | 0) + 20 >> 2] & 3]($11));
$16 = $0 + 232 | 0;
$20 = Math_fround(FUNCTION_TABLE_fi[HEAP32[(HEAP32[$16 >> 2] | 0) + 20 >> 2] & 3]($16));
$21 = $0 + 340 | 0;
$25 = Math_fround(FUNCTION_TABLE_fi[HEAP32[(HEAP32[$21 >> 2] | 0) + 20 >> 2] & 3]($21));
HEAPF32[$2 >> 2] = $10;
HEAPF32[$3 >> 2] = $15;
HEAPF32[$4 >> 2] = $20;
HEAPF32[$5 >> 2] = $25;
__ZN10Quaternion16setPositivePhaseEv($2);
HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
$28 = $1 + 4 | 0;
HEAP32[$28 >> 2] = HEAP32[$3 >> 2];
$30 = $1 + 8 | 0;
HEAP32[$30 >> 2] = HEAP32[$4 >> 2];
$32 = $1 + 12 | 0;
HEAP32[$32 >> 2] = HEAP32[$5 >> 2];
HEAP32[$1 >> 2] = HEAP32[$0 + 548 >> 2];
HEAP32[$28 >> 2] = HEAP32[$0 + 552 >> 2];
HEAP32[$30 >> 2] = HEAP32[$0 + 556 >> 2];
HEAP32[$32 >> 2] = HEAP32[$0 + 560 >> 2];
STACKTOP = sp;
return;
}
function __ZN10Quaternion16setPreInvComposeERKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $10 = f0, $12 = f0, $13 = f0, $14 = 0, $15 = f0, $17 = f0, $19 = f0, $20 = f0, $22 = f0, $29 = f0, $3 = f0, $36 = f0, $4 = 0, $43 = f0, $5 = f0, $6 = f0, $8 = f0, $9 = 0;
$3 = Math_fround(HEAPF32[$1 + 4 >> 2]);
$4 = $0 + 8 | 0;
$5 = Math_fround(HEAPF32[$4 >> 2]);
$6 = Math_fround($3 * $5);
$8 = Math_fround(HEAPF32[$1 + 8 >> 2]);
$9 = $0 + 4 | 0;
$10 = Math_fround(HEAPF32[$9 >> 2]);
$12 = Math_fround(Math_fround($8 * $10) - $6);
$13 = Math_fround(HEAPF32[$1 >> 2]);
$14 = $0 + 12 | 0;
$15 = Math_fround(HEAPF32[$14 >> 2]);
$17 = Math_fround($12 - Math_fround($13 * $15));
$19 = Math_fround(HEAPF32[$1 + 12 >> 2]);
$20 = Math_fround(HEAPF32[$0 >> 2]);
$22 = Math_fround($17 + Math_fround($19 * $20));
$29 = Math_fround(Math_fround($10 * $19) + Math_fround(Math_fround(Math_fround($5 * $13) - Math_fround($8 * $20)) - Math_fround($3 * $15)));
$36 = Math_fround(Math_fround($5 * $19) + Math_fround(Math_fround(Math_fround($3 * $20) - Math_fround($10 * $13)) - Math_fround($8 * $15)));
$43 = Math_fround(Math_fround($15 * $19) + Math_fround(Math_fround($5 * $8) + Math_fround(Math_fround($3 * $10) + Math_fround($13 * $20))));
HEAPF32[$0 >> 2] = $22;
HEAPF32[$9 >> 2] = $29;
HEAPF32[$4 >> 2] = $36;
HEAPF32[$14 >> 2] = $43;
return;
}
function __ZN7SSFrameD2Ev($0) {
$0 = $0 | 0;
var $1 = 0, $11 = 0, $12 = 0, $20 = 0, $22 = 0, $23 = 0, $3 = 0, $31 = 0, $33 = 0, $34 = 0, $4 = 0, $42 = 0, $44 = 0, $45 = 0, $6 = 0, $9 = 0;
HEAP32[$0 >> 2] = 784;
__THREW__ = 0;
invoke_vi(88, $0 | 0);
$1 = __THREW__;
__THREW__ = 0;
if ($1 & 1) {
$6 = ___cxa_find_matching_catch_2() | 0;
$9 = HEAP32[$0 + 16 >> 2] | 0;
if ($9 | 0) {
$11 = $0 + 20 | 0;
$12 = HEAP32[$11 >> 2] | 0;
if (($12 | 0) != ($9 | 0)) HEAP32[$11 >> 2] = $12 + (~(($12 + -4 - $9 | 0) >>> 2) << 2);
__ZdlPv($9);
}
$42 = HEAP32[$0 + 4 >> 2] | 0;
if (!$42) ___resumeException($6 | 0);
$44 = $0 + 8 | 0;
$45 = HEAP32[$44 >> 2] | 0;
if (($45 | 0) != ($42 | 0)) HEAP32[$44 >> 2] = $45 + (~(($45 + -4 - $42 | 0) >>> 2) << 2);
__ZdlPv($42);
___resumeException($6 | 0);
}
$3 = $0 + 36 | 0;
$4 = HEAP32[$3 >> 2] | 0;
if ($4 | 0) __ZdaPv($4);
HEAP32[$3 >> 2] = 0;
$20 = HEAP32[$0 + 16 >> 2] | 0;
if ($20 | 0) {
$22 = $0 + 20 | 0;
$23 = HEAP32[$22 >> 2] | 0;
if (($23 | 0) != ($20 | 0)) HEAP32[$22 >> 2] = $23 + (~(($23 + -4 - $20 | 0) >>> 2) << 2);
__ZdlPv($20);
}
$31 = HEAP32[$0 + 4 >> 2] | 0;
if (!$31) return;
$33 = $0 + 8 | 0;
$34 = HEAP32[$33 >> 2] | 0;
if (($34 | 0) != ($31 | 0)) HEAP32[$33 >> 2] = $34 + (~(($34 + -4 - $31 | 0) >>> 2) << 2);
__ZdlPv($31);
return;
}
function __ZN20QuaternionController13set_referenceE10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
__ZN10Quaternion19setNonNegativePhaseEv($2);
if ((HEAP32[$0 + 448 >> 2] | 0) == 1) {
$16 = $0 + 548 | 0;
HEAP32[$16 >> 2] = HEAP32[$2 >> 2];
HEAP32[$16 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
HEAP32[$16 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
HEAP32[$16 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
$17 = $0 + 532 | 0;
HEAP32[$17 >> 2] = HEAP32[$2 >> 2];
HEAP32[$17 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
HEAP32[$17 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
HEAP32[$17 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
STACKTOP = sp;
return;
} else {
$18 = $0 + 580 | 0;
HEAP32[$18 >> 2] = HEAP32[$2 >> 2];
HEAP32[$18 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
HEAP32[$18 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
HEAP32[$18 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
$19 = $0 + 548 | 0;
HEAP32[$19 >> 2] = HEAP32[$2 >> 2];
HEAP32[$19 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
HEAP32[$19 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
HEAP32[$19 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
STACKTOP = sp;
return;
}
}
function __Z25printDigitPairAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKc10DigitIndexS7_($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $5 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$5 = sp;
if (!(($3 | 0) != -1 & ($4 | 0) != -1)) {
STACKTOP = sp;
return;
}
if ($1) {
HEAP8[$5 >> 0] = 32;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, $5, 1) | 0;
} else __Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($0, (HEAP16[36078] | 0) + 1 | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, $2, _strlen($2) | 0) | 0, 49551, 2) | 0;
__Z11SprintDigitRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEE10DigitIndex($0, $3);
__Z11SprintDigitRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEE10DigitIndex($0, $4);
HEAP8[$5 >> 0] = 34;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, $5, 1) | 0;
if ($1) {
STACKTOP = sp;
return;
}
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, 49554, 1) | 0;
STACKTOP = sp;
return;
}
function _little2_isPublicId($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$020 = 0, $$02024 = 0, $$02026 = 0, $$pn25 = 0, $$pn25$phi = 0, $4 = 0, $6 = 0, $9 = 0, label = 0;
$4 = $2 + -2 | 0;
$$02024 = $1 + 2 | 0;
if (($$02024 | 0) == ($4 | 0)) {
$$0 = 1;
return $$0 | 0;
}
$6 = $0 + 72 | 0;
$$02026 = $$02024;
$$pn25 = $1;
L4 : while (1) {
if (HEAP8[$$pn25 + 3 >> 0] | 0) break;
$9 = HEAP8[$$02026 >> 0] | 0;
switch (HEAP8[$6 + ($9 & 255) >> 0] | 0) {
case 19:
case 30:
case 33:
case 16:
case 18:
case 10:
case 9:
case 15:
case 14:
case 17:
case 35:
case 34:
case 32:
case 31:
case 13:
case 27:
case 24:
case 25:
break;
case 21:
{
if ($9 << 24 >> 24 == 9) break L4;
break;
}
case 22:
case 26:
{
if ($9 << 24 >> 24 < 0) label = 8;
break;
}
default:
label = 8;
}
if ((label | 0) == 8) {
label = 0;
switch (HEAP8[$$02026 >> 0] | 0) {
case 64:
case 36:
break;
default:
break L4;
}
}
$$020 = $$02026 + 2 | 0;
if (($$020 | 0) == ($4 | 0)) {
$$0 = 1;
label = 10;
break;
} else {
$$pn25$phi = $$02026;
$$02026 = $$020;
$$pn25 = $$pn25$phi;
}
}
if ((label | 0) == 10) return $$0 | 0;
HEAP32[$3 >> 2] = $$02026;
$$0 = 0;
return $$0 | 0;
}
function _big2_isPublicId($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$020 = 0, $$02024 = 0, $$02028 = 0, $$pn25 = 0, $$pn25$phi = 0, $4 = 0, $6 = 0, $9 = 0, label = 0;
$4 = $2 + -2 | 0;
$$02024 = $1 + 2 | 0;
if (($$02024 | 0) == ($4 | 0)) {
$$0 = 1;
return $$0 | 0;
}
$6 = $0 + 72 | 0;
$$02028 = $$02024;
$$pn25 = $1;
L4 : while (1) {
if (HEAP8[$$02028 >> 0] | 0) break;
$9 = HEAP8[$$pn25 + 3 >> 0] | 0;
switch (HEAP8[$6 + ($9 & 255) >> 0] | 0) {
case 19:
case 30:
case 33:
case 16:
case 18:
case 10:
case 9:
case 15:
case 14:
case 17:
case 35:
case 34:
case 32:
case 31:
case 13:
case 27:
case 24:
case 25:
break;
case 21:
{
if ($9 << 24 >> 24 == 9) break L4;
break;
}
case 22:
case 26:
{
if ($9 << 24 >> 24 < 0) label = 8;
break;
}
default:
label = 8;
}
if ((label | 0) == 8) {
label = 0;
switch (HEAP8[$$pn25 + 3 >> 0] | 0) {
case 64:
case 36:
break;
default:
break L4;
}
}
$$020 = $$02028 + 2 | 0;
if (($$020 | 0) == ($4 | 0)) {
$$0 = 1;
label = 10;
break;
} else {
$$pn25$phi = $$02028;
$$02028 = $$020;
$$pn25 = $$pn25$phi;
}
}
if ((label | 0) == 10) return $$0 | 0;
HEAP32[$3 >> 2] = $$02028;
$$0 = 0;
return $$0 | 0;
}
function __ZN7HashAnyIiiE7addItemEii($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$sink$i = 0, $10 = 0, $11 = 0, $16 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $37 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0;
$5 = __ZN6KeyOpsIiE12hashFunctionEii($1, HEAP32[$0 + 4 >> 2] | 0) | 0;
$6 = HEAP32[$0 >> 2] | 0;
$7 = $6 + ($5 << 3) | 0;
$8 = $6 + ($5 << 3) + 4 | 0;
switch (HEAP16[$8 >> 1] | 0) {
case 0:
{
$10 = __Znwj(12) | 0;
$11 = $10;
HEAP32[$11 >> 2] = $1;
HEAP32[$11 + 4 >> 2] = $2;
HEAP32[$10 + 8 >> 2] = 0;
HEAP32[$7 >> 2] = $10;
$16 = $0 + 12 | 0;
HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + -1;
$$sink$i = $0 + 16 | 0;
break;
}
case 1:
{
$20 = $0 + 16 | 0;
HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + -1;
label = 4;
break;
}
default:
label = 4;
}
if ((label | 0) == 4) {
$23 = HEAP32[$7 >> 2] | 0;
$24 = __Znwj(12) | 0;
$25 = $23 + 8 | 0;
$26 = HEAP32[$25 >> 2] | 0;
$27 = $24;
HEAP32[$27 >> 2] = $1;
HEAP32[$27 + 4 >> 2] = $2;
HEAP32[$24 + 8 >> 2] = $26;
HEAP32[$25 >> 2] = $24;
$$sink$i = $0 + 8 | 0;
}
HEAP32[$$sink$i >> 2] = (HEAP32[$$sink$i >> 2] | 0) + 1;
HEAP16[$8 >> 1] = (HEAP16[$8 >> 1] | 0) + 1 << 16 >> 16;
$37 = $0 + 24 | 0;
HEAP32[$37 >> 2] = (HEAP32[$37 >> 2] | 0) + 1;
return;
}
function __ZN13SplitMovement20propagateChangeFlagsE18PostureChangeFlagsS0_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $12 = 0, $16 = 0, $17 = 0, $19 = 0, $22 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp + 10 | 0;
$4 = sp + 8 | 0;
$5 = sp + 6 | 0;
$6 = sp + 4 | 0;
$7 = sp + 2 | 0;
$8 = sp;
HEAP16[$3 >> 1] = HEAPU8[$1 >> 0] | HEAPU8[$1 + 1 >> 0] << 8;
HEAP16[$4 >> 1] = HEAPU8[$2 >> 0] | HEAPU8[$2 + 1 >> 0] << 8;
__ZN13BasicMovement20propagateChangeFlagsE18PostureChangeFlagsS0_($0, $3, $4);
$12 = HEAP32[$0 + 528 >> 2] | 0;
if ($12 | 0) {
$16 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0;
$17 = $0 + 508 | 0;
HEAP16[$5 >> 1] = HEAPU8[$17 >> 0] | HEAPU8[$17 + 1 >> 0] << 8;
$19 = $0 + 510 | 0;
HEAP16[$6 >> 1] = HEAPU8[$19 >> 0] | HEAPU8[$19 + 1 >> 0] << 8;
FUNCTION_TABLE_viii[$16 & 127]($12, $5, $6);
}
$22 = HEAP32[$0 + 532 >> 2] | 0;
if (!$22) {
STACKTOP = sp;
return;
}
$26 = HEAP32[(HEAP32[$22 >> 2] | 0) + 28 >> 2] | 0;
$27 = $0 + 508 | 0;
HEAP16[$7 >> 1] = HEAPU8[$27 >> 0] | HEAPU8[$27 + 1 >> 0] << 8;
$29 = $0 + 510 | 0;
HEAP16[$8 >> 1] = HEAPU8[$29 >> 0] | HEAPU8[$29 + 1 >> 0] << 8;
FUNCTION_TABLE_viii[$26 & 127]($22, $7, $8);
STACKTOP = sp;
return;
}
function __Z16printAttribValueRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKcS6_($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $11 = 0, $13 = 0, $15 = 0, $4 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$4 = sp;
if (!$2) {
STACKTOP = sp;
return;
}
if ($1) {
HEAP8[$4 >> 0] = 32;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, $4, 1) | 0;
} else __Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($0, (HEAP16[36078] | 0) + 1 | 0);
$11 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, $2, _strlen($2) | 0) | 0, 49551, 2) | 0;
$13 = ($3 | 0) == 0 ? 61277 : $3;
$15 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($11, $13, _strlen($13) | 0) | 0;
HEAP8[$4 >> 0] = 34;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($15, $4, 1) | 0;
if ($1) {
STACKTOP = sp;
return;
}
HEAP8[$4 >> 0] = 10;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, $4, 1) | 0;
STACKTOP = sp;
return;
}
function __ZNK13SeqTimedMorph13printIndentedEP8_IO_FILEi($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$018 = 0, $12 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $21 = 0, $25 = 0, $33 = 0, $6 = 0.0, $9 = 0.0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$6 = +Math_fround(HEAPF32[$0 + 4 >> 2]);
$9 = +Math_fround(HEAPF32[$0 + 8 >> 2]);
$12 = +Math_fround(HEAPF32[$0 + 12 >> 2]);
$15 = +Math_fround(HEAPF32[$0 + 16 >> 2]);
HEAPF64[$vararg_buffer >> 3] = $6;
HEAPF64[$vararg_buffer + 8 >> 3] = $9;
HEAPF64[$vararg_buffer + 16 >> 3] = $12;
HEAPF64[$vararg_buffer + 24 >> 3] = $15;
_fprintf($1, 45376, $vararg_buffer) | 0;
$16 = $2 + 1 | 0;
$17 = $0 + 24 | 0;
$21 = (HEAP32[(HEAP32[$17 >> 2] | 0) + 12 >> 2] | 0) > 0;
_fputc(10, $1) | 0;
if ($21) {
$$018 = 0;
do {
__Z11printIndentP8_IO_FILEi($1, $16);
$25 = HEAP32[(HEAP32[HEAP32[$17 >> 2] >> 2] | 0) + ($$018 << 2) >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$25 >> 2] | 0) + 44 >> 2] & 127]($25, $1, $16);
$$018 = $$018 + 1 | 0;
$33 = ($$018 | 0) < (HEAP32[(HEAP32[$17 >> 2] | 0) + 12 >> 2] | 0);
_fputc(10, $1) | 0;
} while ($33);
}
__Z11printIndentP8_IO_FILEi($1, $2);
_fwrite(45401, 4, 1, $1) | 0;
STACKTOP = sp;
return;
}
function __ZNK13ParTimedMorph13printIndentedEP8_IO_FILEi($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$018 = 0, $12 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $21 = 0, $25 = 0, $33 = 0, $6 = 0.0, $9 = 0.0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$6 = +Math_fround(HEAPF32[$0 + 4 >> 2]);
$9 = +Math_fround(HEAPF32[$0 + 8 >> 2]);
$12 = +Math_fround(HEAPF32[$0 + 12 >> 2]);
$15 = +Math_fround(HEAPF32[$0 + 16 >> 2]);
HEAPF64[$vararg_buffer >> 3] = $6;
HEAPF64[$vararg_buffer + 8 >> 3] = $9;
HEAPF64[$vararg_buffer + 16 >> 3] = $12;
HEAPF64[$vararg_buffer + 24 >> 3] = $15;
_fprintf($1, 45330, $vararg_buffer) | 0;
$16 = $2 + 1 | 0;
$17 = $0 + 24 | 0;
$21 = (HEAP32[(HEAP32[$17 >> 2] | 0) + 12 >> 2] | 0) > 0;
_fputc(10, $1) | 0;
if ($21) {
$$018 = 0;
do {
__Z11printIndentP8_IO_FILEi($1, $16);
$25 = HEAP32[(HEAP32[HEAP32[$17 >> 2] >> 2] | 0) + ($$018 << 2) >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$25 >> 2] | 0) + 44 >> 2] & 127]($25, $1, $16);
$$018 = $$018 + 1 | 0;
$33 = ($$018 | 0) < (HEAP32[(HEAP32[$17 >> 2] | 0) + 12 >> 2] | 0);
_fputc(10, $1) | 0;
} while ($33);
}
__Z11printIndentP8_IO_FILEi($1, $2);
_fwrite(45355, 4, 1, $1) | 0;
STACKTOP = sp;
return;
}
function __ZN11TokenStream14TokeniseStringEPKc($0) {
$0 = $0 | 0;
var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $21 = 0, $5 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0;
if (!$0) {
$$0 = 0;
return $$0 | 0;
}
$2 = __Znwj(40) | 0;
HEAP8[$2 + 8 >> 0] = 0;
HEAP32[$2 + 12 >> 2] = 0;
$5 = $2 + 32 | 0;
HEAP32[$5 >> 2] = 0;
HEAP8[$5 + 4 >> 0] = 0;
HEAP8[$2 + 37 >> 0] = 1;
HEAP8[$2 + 38 >> 0] = 0;
HEAP32[$2 >> 2] = 0;
HEAP32[$2 + 4 >> 2] = 0;
__THREW__ = 0;
$9 = invoke_ii(20, 16) | 0;
$10 = __THREW__;
__THREW__ = 0;
if ($10 & 1) {
$21 = ___cxa_find_matching_catch_2() | 0;
$eh$lpad$body$index2Z2D = tempRet0;
$eh$lpad$body$indexZ2D = $21;
__ZdlPv($2);
___resumeException($eh$lpad$body$indexZ2D | 0);
}
__THREW__ = 0;
invoke_vii(116, $9 | 0, 1e3);
$12 = __THREW__;
__THREW__ = 0;
if ($12 & 1) {
$14 = ___cxa_find_matching_catch_2() | 0;
$15 = tempRet0;
__ZdlPv($9);
$eh$lpad$body$index2Z2D = $15;
$eh$lpad$body$indexZ2D = $14;
__ZdlPv($2);
___resumeException($eh$lpad$body$indexZ2D | 0);
} else {
HEAP32[$2 + 16 >> 2] = $9;
HEAP32[$2 + 20 >> 2] = 0;
HEAP32[$2 + 24 >> 2] = 0;
HEAP32[$2 + 28 >> 2] = -1;
HEAP32[$9 + 12 >> 2] = 0;
__ZN13DynamicString12appendStringEPKc($9, $0);
$$0 = $2;
return $$0 | 0;
}
return 0;
}
function __ZN28InvertibleDynamicStringArrayD2Ev($0) {
$0 = $0 | 0;
var $$01013$i = 0, $$011$i = 0, $$012$i = 0, $12 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $6 = 0, $7 = 0;
if (HEAP8[$0 + 8 >> 0] | 0) {
$4 = HEAP32[$0 >> 2] | 0;
if ($4 | 0) {
$6 = $4 + 4 | 0;
$7 = HEAP32[$6 >> 2] | 0;
if (($7 | 0) > 0) {
$$01013$i = 0;
$30 = $7;
while (1) {
$$011$i = HEAP32[(HEAP32[$4 >> 2] | 0) + ($$01013$i << 3) >> 2] | 0;
if (!$$011$i) $18 = $30; else {
$$012$i = $$011$i;
do {
$12 = HEAP32[$$012$i >> 2] | 0;
if ($12 | 0) _free($12);
$$012$i = HEAP32[$$012$i + 8 >> 2] | 0;
} while (($$012$i | 0) != 0);
$18 = HEAP32[$6 >> 2] | 0;
}
$$01013$i = $$01013$i + 1 | 0;
if (($$01013$i | 0) >= ($18 | 0)) break; else $30 = $18;
}
}
}
}
$19 = $0 + 4 | 0;
$20 = HEAP32[$19 >> 2] | 0;
if ($20 | 0) {
$22 = HEAP32[$20 >> 2] | 0;
if ($22 | 0) _free($22);
__ZdlPv($20);
HEAP32[$19 >> 2] = 0;
}
$24 = HEAP32[$0 >> 2] | 0;
if (!$24) return;
__THREW__ = 0;
invoke_vi(93, $24 | 0);
$26 = __THREW__;
__THREW__ = 0;
if ($26 & 1) {
$28 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($24);
___resumeException($28 | 0);
}
__ZdlPv($24);
HEAP32[$0 >> 2] = 0;
return;
}
function _internalEntityProcessor($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $17 = 0, $22 = 0, $24 = 0, $33 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$4 = sp;
$5 = $0 + 284 | 0;
$6 = HEAP32[$5 >> 2] | 0;
if (!$6) {
$$0 = 23;
STACKTOP = sp;
return $$0 | 0;
}
$9 = HEAP32[$6 + 12 >> 2] | 0;
$10 = $9 + 4 | 0;
$11 = HEAP32[$10 >> 2] | 0;
$12 = $9 + 12 | 0;
$17 = $11 + (HEAP32[$9 + 8 >> 2] | 0) | 0;
$22 = _doContent($0, HEAP32[$6 + 16 >> 2] | 0, HEAP32[$0 + 224 >> 2] | 0, $11 + (HEAP32[$12 >> 2] | 0) | 0, $17, $4, 0) | 0;
if ($22 | 0) {
$$0 = $22;
STACKTOP = sp;
return $$0 | 0;
}
$24 = HEAP32[$4 >> 2] | 0;
if (($17 | 0) != ($24 | 0)) if ((HEAP32[$0 + 464 >> 2] | 0) == 3) {
HEAP32[$12 >> 2] = $24 - (HEAP32[$10 >> 2] | 0);
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
HEAP8[$9 + 32 >> 0] = 0;
$33 = $6 + 8 | 0;
HEAP32[$5 >> 2] = HEAP32[$33 >> 2];
$35 = $0 + 288 | 0;
HEAP32[$33 >> 2] = HEAP32[$35 >> 2];
HEAP32[$35 >> 2] = $6;
HEAP32[$0 + 264 >> 2] = 29;
$$0 = _doContent($0, (HEAP32[$0 + 460 >> 2] | 0) != 0 & 1, HEAP32[$0 + 144 >> 2] | 0, $1, $2, $3, (HEAP8[$0 + 468 >> 0] | 0) == 0 & 1) | 0;
STACKTOP = sp;
return $$0 | 0;
}
function __ZNK4Site9printNameEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $12 = 0, $14 = 0, $28 = 0, $3 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_buffer5 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer5 = sp + 24 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$3 = HEAP32[$0 >> 2] | 0;
if ($3 | 0) {
_fputs($3, $1) | 0;
STACKTOP = sp;
return;
}
$5 = $0 + 12 | 0;
$6 = HEAP32[$5 >> 2] | 0;
if ((HEAP32[16607] ^ $6) & 16777215 | 0) {
$12 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17192] | 0, $6 & 255) | 0;
$14 = HEAPU16[$5 >> 1] | 0 | (HEAPU8[$5 + 2 >> 0] | 0) << 16;
HEAP32[$vararg_buffer >> 2] = ($12 | 0) == 0 ? 15452 : $12;
HEAP32[$vararg_buffer + 4 >> 2] = ($14 & 16777215) >>> 8 & 15;
HEAP32[$vararg_buffer + 8 >> 2] = ($14 & 16777215) >>> 12 & 7;
HEAP32[$vararg_buffer + 12 >> 2] = ($14 & 16777215) >>> 15 & 31;
HEAP32[$vararg_buffer + 16 >> 2] = ($14 & 16777215) >>> 20 & 7;
_fprintf($1, 15466, $vararg_buffer) | 0;
STACKTOP = sp;
return;
}
$28 = HEAP32[$0 + 4 >> 2] | 0;
if (($28 | 0) == -1) {
_fwrite(15494, 10, 1, $1) | 0;
STACKTOP = sp;
return;
} else {
HEAP32[$vararg_buffer5 >> 2] = $28;
_fprintf($1, 15486, $vararg_buffer5) | 0;
STACKTOP = sp;
return;
}
}
function _vsnprintf($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $21 = 0, $4 = 0, $5 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 128 | 0;
$4 = sp + 124 | 0;
$5 = sp;
dest = $5;
src = 7584;
stop = dest + 124 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
if (($1 + -1 | 0) >>> 0 > 2147483646) if (!$1) {
$$014 = $4;
$$015 = 1;
label = 4;
} else {
$9 = ___errno_location() | 0;
HEAP32[$9 >> 2] = 75;
$$0 = -1;
} else {
$$014 = $0;
$$015 = $1;
label = 4;
}
if ((label | 0) == 4) {
$11 = -2 - $$014 | 0;
$$$015 = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015;
HEAP32[$5 + 48 >> 2] = $$$015;
$14 = $5 + 20 | 0;
HEAP32[$14 >> 2] = $$014;
HEAP32[$5 + 44 >> 2] = $$014;
$16 = $$014 + $$$015 | 0;
$17 = $5 + 16 | 0;
HEAP32[$17 >> 2] = $16;
HEAP32[$5 + 28 >> 2] = $16;
$19 = _vfprintf($5, $2, $3) | 0;
if (!$$$015) $$0 = $19; else {
$21 = HEAP32[$14 >> 2] | 0;
HEAP8[$21 + ((($21 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0;
$$0 = $19;
}
}
STACKTOP = sp;
return $$0 | 0;
}
function __ZN19TwoHAbstractPostureD2Ev($0) {
$0 = $0 | 0;
var $12 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $4 = 0, $5 = 0, $7 = 0;
do if (HEAP8[$0 + 124 >> 0] | 0) {
$4 = $0 + 128 | 0;
$5 = HEAP32[$4 >> 2] | 0;
if ($5 | 0) {
__THREW__ = 0;
invoke_vi(133, $5 | 0);
$7 = __THREW__;
__THREW__ = 0;
if (!($7 & 1)) {
__ZdlPv($5);
HEAP32[$4 >> 2] = 0;
break;
}
$19 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($5);
if (!(HEAP8[$0 + 52 >> 0] | 0)) ___resumeException($19 | 0);
$24 = $0 + 56 | 0;
$25 = HEAP32[$24 >> 2] | 0;
if (!$25) ___resumeException($19 | 0);
__THREW__ = 0;
invoke_vi(133, $25 | 0);
$27 = __THREW__;
__THREW__ = 0;
if ($27 & 1) {
$29 = ___cxa_find_matching_catch_3(0) | 0;
__ZdlPv($25);
___clang_call_terminate($29);
}
__ZdlPv($25);
HEAP32[$24 >> 2] = 0;
___resumeException($19 | 0);
}
} while (0);
if (!(HEAP8[$0 + 52 >> 0] | 0)) return;
$12 = $0 + 56 | 0;
$13 = HEAP32[$12 >> 2] | 0;
if (!$13) return;
__THREW__ = 0;
invoke_vi(133, $13 | 0);
$15 = __THREW__;
__THREW__ = 0;
if ($15 & 1) {
$17 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($13);
___resumeException($17 | 0);
}
__ZdlPv($13);
HEAP32[$12 >> 2] = 0;
return;
}
function __ZL15CheckIsHandSiteR6SiteIDb($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $6 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$2 = HEAP32[$0 >> 2] | 0;
if (!((HEAP32[16607] ^ $2) & 16777215)) {
STACKTOP = sp;
return;
}
$6 = $1 ? 1 : 2;
$8 = ($2 & 16777215) >>> 8 & 15;
if (!($8 & 16777215)) {
$17 = $2;
label = 5;
} else if (($6 | 0) == ($8 & 16777215 | 0)) $20 = $2; else {
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer >> 2] = $1 ? 35820 : 35826;
__Z7eprintfPKcz(27984, $vararg_buffer);
__ZNK6SiteID5printEP8_IO_FILE($0, HEAP32[16082] | 0);
__Z5eputcc(10);
$17 = HEAPU16[$0 >> 1] | 0 | (HEAPU8[$0 + 2 >> 0] | 0) << 16;
label = 5;
}
if ((label | 0) == 5) {
$18 = $17 & 16773375 | $6 << 8 & 3840;
HEAP16[$0 >> 1] = $18;
HEAP8[$0 + 2 >> 0] = $18 >>> 16;
$20 = $18;
}
$19 = $20 & 255;
if (!($19 & 16777215)) {
STACKTOP = sp;
return;
}
if ((($19 & 16777215) + -1 | 0) >>> 0 < 11) {
STACKTOP = sp;
return;
}
__Z7LogTimev() | 0;
__Z7eprintfPKcz(28043, $vararg_buffer1);
__ZNK6SiteID5printEP8_IO_FILE($0, HEAP32[16082] | 0);
__Z5eputcc(10);
STACKTOP = sp;
return;
}
function __ZN19OneHAbstractPostureC2EbP7Gesture($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0 = 0, $$05 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $19 = 0, $21 = 0, $22 = 0, $5 = 0, $9 = 0;
HEAP8[$0 >> 0] = $1 & 1;
$5 = HEAP32[16607] | 0;
HEAP32[$0 + 4 >> 2] = $5;
HEAP32[$0 + 8 >> 2] = $5;
HEAPF32[$0 + 12 >> 2] = Math_fround(.5);
HEAP32[$0 + 16 >> 2] = $5;
$9 = $0 + 20 | 0;
HEAP32[$9 >> 2] = 0;
HEAP32[$9 + 4 >> 2] = 0;
HEAP32[$9 + 8 >> 2] = 0;
HEAP32[$9 + 12 >> 2] = 0;
HEAP32[$9 + 16 >> 2] = 0;
HEAP16[$9 + 20 >> 1] = 0;
HEAPF32[$0 + 44 >> 2] = Math_fround(-2.0);
HEAPF32[$0 + 48 >> 2] = Math_fround(-2.0);
HEAP8[$0 + 52 >> 0] = 1;
$13 = $0 + 56 | 0;
HEAP32[$13 >> 2] = 0;
HEAP32[$13 + 4 >> 2] = 0;
HEAP32[$13 + 8 >> 2] = 0;
HEAP32[$13 + 12 >> 2] = 0;
__THREW__ = 0;
$14 = invoke_ii(20, 240) | 0;
$15 = __THREW__;
__THREW__ = 0;
if ($15 & 1) {
$19 = ___cxa_find_matching_catch_2() | 0;
$$0 = tempRet0;
$$05 = $19;
___resumeException($$05 | 0);
}
__THREW__ = 0;
invoke_viii(93, $14 | 0, $1 | 0, $2 | 0);
$17 = __THREW__;
__THREW__ = 0;
if (!($17 & 1)) {
HEAP32[$13 >> 2] = $14;
return;
}
$21 = ___cxa_find_matching_catch_2() | 0;
$22 = tempRet0;
__ZdlPv($14);
$$0 = $22;
$$05 = $21;
___resumeException($$05 | 0);
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($0) {
$0 = $0 | 0;
var $1 = 0, $18 = 0, $2 = 0, $24 = 0, $28 = 0, $29 = 0, $32 = 0, $36 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $6 = 0;
$1 = $0 + 4 | 0;
$2 = HEAP32[$1 >> 2] | 0;
$6 = $2 + (HEAP32[(HEAP32[$2 >> 2] | 0) + -12 >> 2] | 0) | 0;
do if (HEAP32[$6 + 24 >> 2] | 0) if (!(HEAP32[$6 + 16 >> 2] | 0)) if (HEAP32[$6 + 4 >> 2] & 8192 | 0) if (!(__ZSt18uncaught_exceptionv() | 0)) {
$18 = HEAP32[$1 >> 2] | 0;
$24 = HEAP32[$18 + (HEAP32[(HEAP32[$18 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
__THREW__ = 0;
$28 = invoke_ii(HEAP32[(HEAP32[$24 >> 2] | 0) + 24 >> 2] | 0, $24 | 0) | 0;
$29 = __THREW__;
__THREW__ = 0;
if (!($29 & 1)) {
if (($28 | 0) != -1) break;
$32 = HEAP32[$1 >> 2] | 0;
$36 = $32 + (HEAP32[(HEAP32[$32 >> 2] | 0) + -12 >> 2] | 0) | 0;
__THREW__ = 0;
invoke_vii(114, $36 | 0, HEAP32[$36 + 16 >> 2] | 1 | 0);
$40 = __THREW__;
__THREW__ = 0;
if (!($40 & 1)) break;
}
$42 = ___cxa_find_matching_catch_3(0) | 0;
___cxa_begin_catch($42 | 0) | 0;
__THREW__ = 0;
invoke_v(3);
$44 = __THREW__;
__THREW__ = 0;
if ($44 & 1) {
$46 = ___cxa_find_matching_catch_3(0) | 0;
___clang_call_terminate($46);
}
} while (0);
return;
}
function __ZN13SplitMovement17setFinalHandStuffERK12TwoHandStuffRK20ArmHandConstellation($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $10 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $25 = 0, $27 = 0, $31 = 0, $32 = 0, $4 = 0;
$4 = HEAP32[$0 + 528 >> 2] | 0;
if ($4 | 0) FUNCTION_TABLE_viii[HEAP32[(HEAP32[$4 >> 2] | 0) + 32 >> 2] & 127]($4, $1, $2);
$10 = HEAP32[$0 + 532 >> 2] | 0;
if ($10 | 0) FUNCTION_TABLE_viii[HEAP32[(HEAP32[$10 >> 2] | 0) + 32 >> 2] & 127]($10, $1, $2);
$15 = $1 + 20 | 0;
$16 = $0 + 324 | 0;
HEAP32[$16 >> 2] = HEAP32[$15 >> 2];
HEAP32[$16 + 4 >> 2] = HEAP32[$15 + 4 >> 2];
HEAP32[$16 + 8 >> 2] = HEAP32[$15 + 8 >> 2];
HEAP32[$16 + 12 >> 2] = HEAP32[$15 + 12 >> 2];
$17 = $1 + 64 | 0;
$18 = $0 + 436 | 0;
HEAP32[$18 >> 2] = HEAP32[$17 >> 2];
HEAP32[$18 + 4 >> 2] = HEAP32[$17 + 4 >> 2];
HEAP32[$18 + 8 >> 2] = HEAP32[$17 + 8 >> 2];
HEAP32[$18 + 12 >> 2] = HEAP32[$17 + 12 >> 2];
$20 = HEAP32[$1 + 36 >> 2] | 0;
if (!$20) $25 = 0; else $25 = HEAP32[$20 + 236 >> 2] | 0;
HEAP32[$0 + 340 >> 2] = $25;
$27 = HEAP32[$1 + 80 >> 2] | 0;
if (!$27) {
$32 = 0;
$31 = $0 + 452 | 0;
HEAP32[$31 >> 2] = $32;
return;
}
$32 = HEAP32[$27 + 236 >> 2] | 0;
$31 = $0 + 452 | 0;
HEAP32[$31 >> 2] = $32;
return;
}
function _internalSubset($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $5 = 0, $7 = 0;
switch ($1 | 0) {
case 16:
{
$5 = $4 + 24 | 0;
$7 = $4 + 64 | 0;
if (FUNCTION_TABLE_iiiii[HEAP32[$5 >> 2] & 63]($4, $2 + (HEAP32[$7 >> 2] << 1) | 0, $3, 59821) | 0) {
HEAP32[$0 >> 2] = 10;
$$0 = 11;
return $$0 | 0;
}
if (FUNCTION_TABLE_iiiii[HEAP32[$5 >> 2] & 63]($4, $2 + (HEAP32[$7 >> 2] << 1) | 0, $3, 59828) | 0) {
HEAP32[$0 >> 2] = 11;
$$0 = 33;
return $$0 | 0;
}
if (FUNCTION_TABLE_iiiii[HEAP32[$5 >> 2] & 63]($4, $2 + (HEAP32[$7 >> 2] << 1) | 0, $3, 59836) | 0) {
HEAP32[$0 >> 2] = 12;
$$0 = 39;
return $$0 | 0;
}
if (FUNCTION_TABLE_iiiii[HEAP32[$5 >> 2] & 63]($4, $2 + (HEAP32[$7 >> 2] << 1) | 0, $3, 59844) | 0) {
HEAP32[$0 >> 2] = 13;
$$0 = 17;
return $$0 | 0;
}
break;
}
case 11:
{
$$0 = 55;
return $$0 | 0;
}
case 13:
{
$$0 = 56;
return $$0 | 0;
}
case 28:
{
$$0 = 57;
return $$0 | 0;
}
case 26:
{
HEAP32[$0 >> 2] = 14;
$$0 = 3;
return $$0 | 0;
}
case -4:
case 15:
{
$$0 = 0;
return $$0 | 0;
}
default:
{}
}
HEAP32[$0 >> 2] = 4;
$$0 = -1;
return $$0 | 0;
}
function _memset(ptr, value, num) {
ptr = ptr | 0;
value = value | 0;
num = num | 0;
var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
end = ptr + num | 0;
value = value & 255;
if ((num | 0) >= 67) {
while (ptr & 3) {
HEAP8[ptr >> 0] = value;
ptr = ptr + 1 | 0;
}
aligned_end = end & -4 | 0;
block_aligned_end = aligned_end - 64 | 0;
value4 = value | value << 8 | value << 16 | value << 24;
while ((ptr | 0) <= (block_aligned_end | 0)) {
HEAP32[ptr >> 2] = value4;
HEAP32[ptr + 4 >> 2] = value4;
HEAP32[ptr + 8 >> 2] = value4;
HEAP32[ptr + 12 >> 2] = value4;
HEAP32[ptr + 16 >> 2] = value4;
HEAP32[ptr + 20 >> 2] = value4;
HEAP32[ptr + 24 >> 2] = value4;
HEAP32[ptr + 28 >> 2] = value4;
HEAP32[ptr + 32 >> 2] = value4;
HEAP32[ptr + 36 >> 2] = value4;
HEAP32[ptr + 40 >> 2] = value4;
HEAP32[ptr + 44 >> 2] = value4;
HEAP32[ptr + 48 >> 2] = value4;
HEAP32[ptr + 52 >> 2] = value4;
HEAP32[ptr + 56 >> 2] = value4;
HEAP32[ptr + 60 >> 2] = value4;
ptr = ptr + 64 | 0;
}
while ((ptr | 0) < (aligned_end | 0)) {
HEAP32[ptr >> 2] = value4;
ptr = ptr + 4 | 0;
}
}
while ((ptr | 0) < (end | 0)) {
HEAP8[ptr >> 0] = value;
ptr = ptr + 1 | 0;
}
return end - num | 0;
}
function __ZN10TorsoCurveC2ERK6VectorS2_S2_S2_S2_($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
var $11 = 0, $12 = 0, $13 = 0, $14 = 0, dest = 0, stop = 0;
__ZN6VectorC2Ev($0);
__ZN6VectorC2Ev($0 + 12 | 0);
__ZN6VectorC2Ev($0 + 24 | 0);
__ZN6VectorC2Ev($0 + 36 | 0);
__ZN6VectorC2Ev($0 + 48 | 0);
dest = $0 + 60 | 0;
stop = dest + 64 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
$11 = $0 + 12 | 0;
HEAP32[$11 >> 2] = HEAP32[$2 >> 2];
HEAP32[$11 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
HEAP32[$11 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
$12 = $0 + 24 | 0;
HEAP32[$12 >> 2] = HEAP32[$3 >> 2];
HEAP32[$12 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
HEAP32[$12 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
$13 = $0 + 36 | 0;
HEAP32[$13 >> 2] = HEAP32[$4 >> 2];
HEAP32[$13 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
HEAP32[$13 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
$14 = $0 + 48 | 0;
HEAP32[$14 >> 2] = HEAP32[$5 >> 2];
HEAP32[$14 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
HEAP32[$14 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
__ZN10TorsoCurve10initialiseEv($0);
return;
}
function __ZNK17TargettedMovement5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $10 = 0, $6 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
HEAP32[$vararg_buffer >> 2] = $0;
_fprintf($1, 39943, $vararg_buffer) | 0;
__ZNK13BasicMovement5printEP8_IO_FILE($0, $1);
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$6 = $0 + 528 | 0;
HEAP32[$vararg_buffer1 >> 2] = HEAP32[$6 >> 2];
_fprintf($1, 39968, $vararg_buffer1) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
$10 = $0 + 532 | 0;
HEAP32[$vararg_buffer4 >> 2] = HEAP8[$10 >> 0] | 0 ? 84 : 70;
_fprintf($1, 39992, $vararg_buffer4) | 0;
if (!(HEAP8[$10 >> 0] | 0)) {
STACKTOP = sp;
return;
}
if (!(HEAP32[$6 >> 2] | 0)) {
STACKTOP = sp;
return;
}
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(40011, 18, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK7Gesture5printEP8_IO_FILE(HEAP32[$6 >> 2] | 0, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
STACKTOP = sp;
return;
}
function __ZN11SeqMovement17setFinalHandStuffERK12TwoHandStuffRK20ArmHandConstellation($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $11 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $25 = 0, $27 = 0, $31 = 0, $32 = 0, $4 = 0;
$4 = HEAP32[$0 + 540 >> 2] | 0;
if (($4 << 16 | 0) > 0) {
$11 = HEAP32[(HEAP32[$0 + 528 >> 2] | 0) + (($4 & 65535) + -1 << 2) >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$11 >> 2] | 0) + 32 >> 2] & 127]($11, $1, $2);
}
$15 = $1 + 20 | 0;
$16 = $0 + 324 | 0;
HEAP32[$16 >> 2] = HEAP32[$15 >> 2];
HEAP32[$16 + 4 >> 2] = HEAP32[$15 + 4 >> 2];
HEAP32[$16 + 8 >> 2] = HEAP32[$15 + 8 >> 2];
HEAP32[$16 + 12 >> 2] = HEAP32[$15 + 12 >> 2];
$17 = $1 + 64 | 0;
$18 = $0 + 436 | 0;
HEAP32[$18 >> 2] = HEAP32[$17 >> 2];
HEAP32[$18 + 4 >> 2] = HEAP32[$17 + 4 >> 2];
HEAP32[$18 + 8 >> 2] = HEAP32[$17 + 8 >> 2];
HEAP32[$18 + 12 >> 2] = HEAP32[$17 + 12 >> 2];
$20 = HEAP32[$1 + 36 >> 2] | 0;
if (!$20) $25 = 0; else $25 = HEAP32[$20 + 236 >> 2] | 0;
HEAP32[$0 + 340 >> 2] = $25;
$27 = HEAP32[$1 + 80 >> 2] | 0;
if (!$27) {
$32 = 0;
$31 = $0 + 452 | 0;
HEAP32[$31 >> 2] = $32;
return;
}
$32 = HEAP32[$27 + 236 >> 2] | 0;
$31 = $0 + 452 | 0;
HEAP32[$31 >> 2] = $32;
return;
}
function __ZNK10Direction314makeMirrorAxisE9Mirroring($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $10 = 0, $12 = f0, $13 = f0, $14 = f0, $15 = f0, $16 = f0, $18 = f0, $19 = f0, $20 = f0, $22 = f0, $23 = f0, $24 = f0, $25 = f0, $3 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0;
$3 = HEAP32[$1 >> 2] | 0;
HEAP32[$0 >> 2] = $3;
$5 = HEAP32[$1 + 4 >> 2] | 0;
$6 = $0 + 4 | 0;
HEAP32[$6 >> 2] = $5;
$8 = HEAP32[$1 + 8 >> 2] | 0;
$9 = $0 + 8 | 0;
HEAP32[$9 >> 2] = $8;
$10 = HEAP8[$2 >> 0] | 0;
$12 = (HEAP32[tempDoublePtr >> 2] = $5, Math_fround(HEAPF32[tempDoublePtr >> 2]));
$13 = (HEAP32[tempDoublePtr >> 2] = $8, Math_fround(HEAPF32[tempDoublePtr >> 2]));
$14 = (HEAP32[tempDoublePtr >> 2] = $3, Math_fround(HEAPF32[tempDoublePtr >> 2]));
if (!($10 & 2)) {
$19 = $13;
$25 = $12;
} else {
$15 = Math_fround(-$12);
HEAPF32[$6 >> 2] = $15;
$16 = Math_fround(-$13);
HEAPF32[$9 >> 2] = $16;
$19 = $16;
$25 = $15;
}
if (!($10 & 4)) $23 = $14; else {
$18 = Math_fround(-$19);
HEAPF32[$9 >> 2] = $18;
$20 = Math_fround(-$14);
HEAPF32[$0 >> 2] = $20;
$23 = $20;
}
if (!($10 & 8)) return;
$22 = Math_fround(-$23);
HEAPF32[$0 >> 2] = $22;
$24 = Math_fround(-$25);
HEAPF32[$6 >> 2] = $24;
return;
}
function __ZN5SiGML16convertAttributeEPK7HashAnyIPKciES2_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$012$i$i = 0, $$01215$i$i = 0, $$01216$i$i = 0, $$1 = 0, $$sink$i$i = 0, $18 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
$5 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($1, HEAP32[$0 + 4 >> 2] | 0) | 0;
$6 = HEAP32[$0 >> 2] | 0;
L4 : do if ((HEAP16[$6 + ($5 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i = HEAP32[$6 + ($5 << 3) >> 2] | 0;
if (!$$01215$i$i) label = 7; else {
$$01216$i$i = $$01215$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($1, HEAP32[$$01216$i$i >> 2] | 0) | 0) break;
$$012$i$i = HEAP32[$$01216$i$i + 8 >> 2] | 0;
if (!$$012$i$i) {
label = 7;
break L4;
} else $$01216$i$i = $$012$i$i;
}
$$sink$i$i = $$01216$i$i + 4 | 0;
}
} else label = 7; while (0);
if ((label | 0) == 7) $$sink$i$i = $0 + 20 | 0;
$18 = HEAP32[$$sink$i$i >> 2] | 0;
if (($18 | 0) != -1) {
$$1 = $18;
STACKTOP = sp;
return $$1 | 0;
}
HEAP32[$vararg_buffer >> 2] = $1;
__Z7eprintfPKcz(53557, $vararg_buffer);
$$1 = 0;
STACKTOP = sp;
return $$1 | 0;
}
function _concatStrings($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0, $10 = 0, $11 = 0, $13 = 0, $17 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$3 = ($1 | 0) == 0;
if (!$0) {
if ($3) {
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
$5 = (_strlen($1) | 0) + 1 | 0;
$6 = _malloc($5) | 0;
if (!$6) {
HEAP32[$vararg_buffer >> 2] = $5;
__Z7eprintfPKcz(9153, $vararg_buffer);
$8 = ___cxa_allocate_exception(4) | 0;
HEAP32[$8 >> 2] = 1;
___cxa_throw($8 | 0, 32, 0);
}
_strncpy($6, $1, $5) | 0;
$$0 = $6;
STACKTOP = sp;
return $$0 | 0;
}
$9 = _strlen($0) | 0;
if (!$3) {
$17 = _malloc($9 + 1 + (_strlen($1) | 0) | 0) | 0;
_strcpy($17, $0) | 0;
_strcpy($17 + $9 | 0, $1) | 0;
$$0 = $17;
STACKTOP = sp;
return $$0 | 0;
}
$10 = $9 + 1 | 0;
$11 = _malloc($10) | 0;
if (!$11) {
HEAP32[$vararg_buffer1 >> 2] = $10;
__Z7eprintfPKcz(9153, $vararg_buffer1);
$13 = ___cxa_allocate_exception(4) | 0;
HEAP32[$13 >> 2] = 1;
___cxa_throw($13 | 0, 32, 0);
}
_strncpy($11, $0, $10) | 0;
$$0 = $11;
STACKTOP = sp;
return $$0 | 0;
}
function __ZNK17TargettedMovement12CopyMovementEv($0) {
$0 = $0 | 0;
var $1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $6 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$1 = __Znwj(536) | 0;
HEAP32[$1 >> 2] = 1984;
HEAP32[$1 + 12 >> 2] = 0;
HEAP32[$1 + 16 >> 2] = 0;
HEAP8[$1 + 20 >> 0] = 0;
__THREW__ = 0;
invoke_vi(141, $1 + 60 | 0);
$6 = __THREW__;
__THREW__ = 0;
if ($6 & 1) {
$17 = ___cxa_find_matching_catch_2() | 0;
$18 = tempRet0;
__ZdlPv($1);
___resumeException($17 | 0);
}
HEAP32[$1 >> 2] = 2752;
_memcpy($1 + 4 | 0, $0 + 4 | 0, 524) | 0;
$10 = $1 + 528 | 0;
$11 = $0 + 528 | 0;
HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
HEAP8[$10 + 4 >> 0] = HEAP8[$11 + 4 >> 0] | 0;
__THREW__ = 0;
$13 = invoke_ii(26, HEAP32[$11 >> 2] | 0) | 0;
$14 = __THREW__;
__THREW__ = 0;
if ($14 & 1) {
$17 = ___cxa_find_matching_catch_2() | 0;
$18 = tempRet0;
__ZdlPv($1);
___resumeException($17 | 0);
}
HEAP32[$10 >> 2] = $13;
if (!0) {
STACKTOP = sp;
return $1 | 0;
}
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer >> 2] = $0;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
__Z7eprintfPKcz(42365, $vararg_buffer);
STACKTOP = sp;
return $1 | 0;
}
function ___stdio_read($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0 = 0, $$cast = 0, $11 = 0, $18 = 0, $24 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer = sp;
$3 = sp + 16 | 0;
HEAP32[$3 >> 2] = $1;
$4 = $3 + 4 | 0;
$5 = $0 + 48 | 0;
$6 = HEAP32[$5 >> 2] | 0;
HEAP32[$4 >> 2] = $2 - (($6 | 0) != 0 & 1);
$11 = $0 + 44 | 0;
HEAP32[$3 + 8 >> 2] = HEAP32[$11 >> 2];
HEAP32[$3 + 12 >> 2] = $6;
HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2];
HEAP32[$vararg_buffer + 4 >> 2] = $3;
HEAP32[$vararg_buffer + 8 >> 2] = 2;
$18 = ___syscall_ret(___syscall145(145, $vararg_buffer | 0) | 0) | 0;
if (($18 | 0) < 1) {
HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | $18 & 48 ^ 16;
$$0 = $18;
} else {
$24 = HEAP32[$4 >> 2] | 0;
if ($18 >>> 0 > $24 >>> 0) {
$27 = HEAP32[$11 >> 2] | 0;
$28 = $0 + 4 | 0;
HEAP32[$28 >> 2] = $27;
$$cast = $27;
HEAP32[$0 + 8 >> 2] = $$cast + ($18 - $24);
if (!(HEAP32[$5 >> 2] | 0)) $$0 = $2; else {
HEAP32[$28 >> 2] = $$cast + 1;
HEAP8[$1 + ($2 + -1) >> 0] = HEAP8[$$cast >> 0] | 0;
$$0 = $2;
}
} else $$0 = $18;
}
STACKTOP = sp;
return $$0 | 0;
}
function __ZN7HashAnyIPKcPS_IS1_iEEC2ES3_i($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $11 = 0, $12 = 0, $22 = 0, $9 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
HEAP32[$0 + 20 >> 2] = $1;
HEAP32[$0 + 24 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = $2;
$9 = _malloc($2 << 3) | 0;
HEAP32[$0 >> 2] = $9;
$11 = $0 + 4 | 0;
if (!$9) {
HEAP32[$11 >> 2] = 0;
HEAP32[$vararg_buffer >> 2] = $2;
HEAP32[$vararg_buffer + 4 >> 2] = 8;
__Z7eprintfPKcz(57708, $vararg_buffer);
$12 = ___cxa_allocate_exception(4) | 0;
HEAP32[$12 >> 2] = 1;
___cxa_throw($12 | 0, 32, 0);
}
HEAP32[$11 >> 2] = $2;
if (($2 | 0) <= 0) {
STACKTOP = sp;
return;
}
HEAP32[$9 >> 2] = 0;
HEAP16[$9 + 4 >> 1] = 0;
if (($2 | 0) == 1) {
STACKTOP = sp;
return;
}
HEAP32[$9 + 8 >> 2] = 0;
HEAP16[(HEAP32[$0 >> 2] | 0) + 12 >> 1] = 0;
if ((HEAP32[$11 >> 2] | 0) > 2) $22 = 2; else {
STACKTOP = sp;
return;
}
do {
HEAP32[(HEAP32[$0 >> 2] | 0) + ($22 << 3) >> 2] = 0;
HEAP16[(HEAP32[$0 >> 2] | 0) + ($22 << 3) + 4 >> 1] = 0;
$22 = $22 + 1 | 0;
} while (($22 | 0) < (HEAP32[$11 >> 2] | 0));
STACKTOP = sp;
return;
}
function __ZN7HashAnyIPKciEC2Eii($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $11 = 0, $12 = 0, $22 = 0, $9 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
HEAP32[$0 + 20 >> 2] = $1;
HEAP32[$0 + 24 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = $2;
$9 = _malloc($2 << 3) | 0;
HEAP32[$0 >> 2] = $9;
$11 = $0 + 4 | 0;
if (!$9) {
HEAP32[$11 >> 2] = 0;
HEAP32[$vararg_buffer >> 2] = $2;
HEAP32[$vararg_buffer + 4 >> 2] = 8;
__Z7eprintfPKcz(57708, $vararg_buffer);
$12 = ___cxa_allocate_exception(4) | 0;
HEAP32[$12 >> 2] = 1;
___cxa_throw($12 | 0, 32, 0);
}
HEAP32[$11 >> 2] = $2;
if (($2 | 0) <= 0) {
STACKTOP = sp;
return;
}
HEAP32[$9 >> 2] = 0;
HEAP16[$9 + 4 >> 1] = 0;
if (($2 | 0) == 1) {
STACKTOP = sp;
return;
}
HEAP32[$9 + 8 >> 2] = 0;
HEAP16[(HEAP32[$0 >> 2] | 0) + 12 >> 1] = 0;
if ((HEAP32[$11 >> 2] | 0) > 2) $22 = 2; else {
STACKTOP = sp;
return;
}
do {
HEAP32[(HEAP32[$0 >> 2] | 0) + ($22 << 3) >> 2] = 0;
HEAP16[(HEAP32[$0 >> 2] | 0) + ($22 << 3) + 4 >> 1] = 0;
$22 = $22 + 1 | 0;
} while (($22 | 0) < (HEAP32[$11 >> 2] | 0));
STACKTOP = sp;
return;
}
function __ZN7HashAnyIiiEC2Eii($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $11 = 0, $12 = 0, $22 = 0, $9 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
HEAP32[$0 + 20 >> 2] = $1;
HEAP32[$0 + 24 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = $2;
$9 = _malloc($2 << 3) | 0;
HEAP32[$0 >> 2] = $9;
$11 = $0 + 4 | 0;
if (!$9) {
HEAP32[$11 >> 2] = 0;
HEAP32[$vararg_buffer >> 2] = $2;
HEAP32[$vararg_buffer + 4 >> 2] = 8;
__Z7eprintfPKcz(57708, $vararg_buffer);
$12 = ___cxa_allocate_exception(4) | 0;
HEAP32[$12 >> 2] = 1;
___cxa_throw($12 | 0, 32, 0);
}
HEAP32[$11 >> 2] = $2;
if (($2 | 0) <= 0) {
STACKTOP = sp;
return;
}
HEAP32[$9 >> 2] = 0;
HEAP16[$9 + 4 >> 1] = 0;
if (($2 | 0) == 1) {
STACKTOP = sp;
return;
}
HEAP32[$9 + 8 >> 2] = 0;
HEAP16[(HEAP32[$0 >> 2] | 0) + 12 >> 1] = 0;
if ((HEAP32[$11 >> 2] | 0) > 2) $22 = 2; else {
STACKTOP = sp;
return;
}
do {
HEAP32[(HEAP32[$0 >> 2] | 0) + ($22 << 3) >> 2] = 0;
HEAP16[(HEAP32[$0 >> 2] | 0) + ($22 << 3) + 4 >> 1] = 0;
$22 = $22 + 1 | 0;
} while (($22 | 0) < (HEAP32[$11 >> 2] | 0));
STACKTOP = sp;
return;
}
function __ZNK6Vector16checkValidVectorEv($0) {
$0 = $0 | 0;
var $11 = 0, $16 = 0, $19 = 0.0, $22 = 0.0, $25 = 0.0, $3 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
if (!0) {
STACKTOP = sp;
return;
}
$3 = HEAP32[$0 >> 2] & 2147483647;
if ($3 >>> 0 <= 2139095040) {
$7 = HEAP32[$0 + 4 >> 2] & 2147483647;
if ($7 >>> 0 <= 2139095040) {
$11 = HEAP32[$0 + 8 >> 2] & 2147483647;
if (!(($3 | 0) == 2139095040 | $11 >>> 0 > 2139095040)) if (!(($7 | 0) == 2139095040 | ($11 | 0) == 2139095040)) {
STACKTOP = sp;
return;
}
}
}
__Z7eprintfPKcz(11903, $vararg_buffer);
$16 = HEAP32[16082] | 0;
if ($16 | 0) {
$19 = +Math_fround(HEAPF32[$0 >> 2]);
$22 = +Math_fround(HEAPF32[$0 + 4 >> 2]);
$25 = +Math_fround(HEAPF32[$0 + 8 >> 2]);
HEAP32[$vararg_buffer1 >> 2] = 4;
HEAPF64[$vararg_buffer1 + 8 >> 3] = $19;
HEAP32[$vararg_buffer1 + 16 >> 2] = 4;
HEAPF64[$vararg_buffer1 + 24 >> 3] = $22;
HEAP32[$vararg_buffer1 + 32 >> 2] = 4;
HEAPF64[$vararg_buffer1 + 40 >> 3] = $25;
_fprintf($16, 11888, $vararg_buffer1) | 0;
}
__Z5eputcc(10);
STACKTOP = sp;
return;
}
function __ZN13SplitMovement11setDurationEfb($0, $1, $2) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = $2 | 0;
var $10 = f0, $11 = 0, $12 = f0, $16 = f0, $17 = f0, $18 = f0, $20 = 0, $26 = 0, $3 = 0, $4 = f0, $7 = f0, $8 = 0;
$3 = $0 + 40 | 0;
$4 = Math_fround(HEAPF32[$3 >> 2]);
do if ($2) if ($4 == Math_fround(0.0)) {
HEAPF32[$0 + 44 >> 2] = Math_fround(0.0);
$18 = Math_fround(0.0);
break;
} else {
$7 = Math_fround($1 / $4);
$8 = $0 + 44 | 0;
$10 = Math_fround($7 * Math_fround(HEAPF32[$8 >> 2]));
HEAPF32[$8 >> 2] = $10;
$18 = $10;
break;
} else {
$11 = $0 + 44 | 0;
$12 = Math_fround(HEAPF32[$11 >> 2]);
if (Math_fround($4 - $12) > $1) {
HEAPF32[$11 >> 2] = Math_fround(0.0);
$18 = Math_fround(0.0);
break;
} else {
$16 = Math_fround(Math_fround($1 - $4) + $12);
HEAPF32[$11 >> 2] = $16;
$18 = $16;
break;
}
} while (0);
HEAPF32[$3 >> 2] = $1;
$17 = Math_fround($1 - $18);
$20 = HEAP32[$0 + 528 >> 2] | 0;
if ($20 | 0) FUNCTION_TABLE_vifi[HEAP32[(HEAP32[$20 >> 2] | 0) + 64 >> 2] & 7]($20, $17, $2);
$26 = HEAP32[$0 + 532 >> 2] | 0;
if (!$26) return;
FUNCTION_TABLE_vifi[HEAP32[(HEAP32[$26 >> 2] | 0) + 64 >> 2] & 7]($26, $17, $2);
return;
}
function __ZN13SeqTimedMorph10shiftStartEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $$010 = 0, $10 = 0, $12 = f0, $13 = 0, $14 = f0, $16 = f0, $17 = 0, $18 = f0, $2 = 0, $20 = f0, $22 = 0, $24 = 0, $3 = 0, $31 = 0, $7 = 0, $9 = f0;
$2 = $0 + 24 | 0;
$3 = HEAP32[$2 >> 2] | 0;
if ((HEAP32[$3 + 12 >> 2] | 0) > 0) {
$$010 = 0;
$22 = $3;
while (1) {
$24 = HEAP32[(HEAP32[$22 >> 2] | 0) + ($$010 << 2) >> 2] | 0;
if (!$24) $31 = $22; else {
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 63]($24, $1);
$31 = HEAP32[$2 >> 2] | 0;
}
$$010 = $$010 + 1 | 0;
if (($$010 | 0) >= (HEAP32[$31 + 12 >> 2] | 0)) break; else $22 = $31;
}
}
$7 = $0 + 4 | 0;
$9 = Math_fround(Math_fround(HEAPF32[$7 >> 2]) + $1);
HEAPF32[$7 >> 2] = $9;
$10 = $0 + 8 | 0;
$12 = Math_fround(Math_fround(HEAPF32[$10 >> 2]) + $1);
HEAPF32[$10 >> 2] = $12;
$13 = $0 + 12 | 0;
$14 = Math_fround(HEAPF32[$13 >> 2]);
if ($14 >= Math_fround(0.0)) {
$16 = Math_fround($14 + $1);
HEAPF32[$13 >> 2] = $16;
}
$17 = $0 + 16 | 0;
$18 = Math_fround(HEAPF32[$17 >> 2]);
if (!($18 >= Math_fround(0.0))) return;
$20 = Math_fround($18 + $1);
HEAPF32[$17 >> 2] = $20;
return;
}
function __ZN12FaceAnimator5resetEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $10 = 0, $16 = 0, $22 = 0, $28 = 0, $34 = 0, $4 = 0, $40 = 0, $46 = 0;
HEAPF32[$0 >> 2] = $1;
HEAPF32[$0 + 4 >> 2] = $1;
$4 = HEAP32[$0 + 12 >> 2] | 0;
if ($4 | 0) FUNCTION_TABLE_vif[HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] & 63]($4, $1);
$10 = HEAP32[$0 + 16 >> 2] | 0;
if ($10 | 0) FUNCTION_TABLE_vif[HEAP32[(HEAP32[$10 >> 2] | 0) + 8 >> 2] & 63]($10, $1);
$16 = HEAP32[$0 + 20 >> 2] | 0;
if ($16 | 0) FUNCTION_TABLE_vif[HEAP32[(HEAP32[$16 >> 2] | 0) + 8 >> 2] & 63]($16, $1);
$22 = HEAP32[$0 + 24 >> 2] | 0;
if ($22 | 0) FUNCTION_TABLE_vif[HEAP32[(HEAP32[$22 >> 2] | 0) + 8 >> 2] & 63]($22, $1);
$28 = HEAP32[$0 + 28 >> 2] | 0;
if ($28 | 0) FUNCTION_TABLE_vif[HEAP32[(HEAP32[$28 >> 2] | 0) + 8 >> 2] & 63]($28, $1);
$34 = HEAP32[$0 + 32 >> 2] | 0;
if ($34 | 0) FUNCTION_TABLE_vif[HEAP32[(HEAP32[$34 >> 2] | 0) + 8 >> 2] & 63]($34, $1);
$40 = HEAP32[$0 + 36 >> 2] | 0;
if ($40 | 0) FUNCTION_TABLE_vif[HEAP32[(HEAP32[$40 >> 2] | 0) + 8 >> 2] & 63]($40, $1);
$46 = HEAP32[$0 + 40 >> 2] | 0;
if (!$46) return;
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$46 >> 2] | 0) + 8 >> 2] & 63]($46, $1);
return;
}
function __ZN7Gesture14installPostureERK19OneHConcretePostureb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $15 = 0, $17 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$3 = sp + 16 | 0;
$4 = sp + 4 | 0;
$7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0;
$8 = $2 & 1;
$9 = $0 + 13 | 0;
$15 = $8 ^ 1 ^ (HEAPU8[$9 >> 0] | 0) >>> 6 & 1;
$17 = HEAP32[$0 + 4 >> 2] | 0;
HEAP32[$3 >> 2] = HEAP32[$17 + (HEAP16[$7 + 10 + ($15 << 3) >> 1] << 2) >> 2];
HEAP32[$3 + 4 >> 2] = HEAP32[$17 + (HEAP16[$7 + 10 + ($15 << 3) + 2 >> 1] << 2) >> 2];
HEAP32[$3 + 8 >> 2] = HEAP32[$17 + (HEAP16[$7 + 10 + ($15 << 3) + 4 >> 1] << 2) >> 2];
HEAP32[$3 + 12 >> 2] = HEAP32[$17 + (HEAP16[$7 + 10 + ($15 << 3) + 6 >> 1] << 2) >> 2];
__ZN6VectorC2Ev($4);
__ZNK19OneHConcretePosture15computeWristLocEPK11HanimAvatarR6Vector($1, HEAP32[$0 >> 2] | 0, $4);
if (0) __Z7eprintfPKcz(29187, sp);
__ZNK11HanimAvatar19computeArmRotationsEPP13JointRotationbRK6VectorRK10QuaternionS8_ff(HEAP32[$0 >> 2] | 0, $3, ($8 | 0) == ((HEAPU8[$9 >> 0] | 0) >>> 6 & 1 | 0), $4, $1 + 40 | 0, $1 + 76 | 0, Math_fround(0.0), Math_fround(0.0));
STACKTOP = sp;
return;
}
function __Z11ReadXMLFilePKc($0) {
$0 = $0 | 0;
var $$0 = 0, $1 = 0, $10 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$1 = __Znwj(32) | 0;
__THREW__ = 0;
invoke_vi(153, $1 | 0);
$2 = __THREW__;
__THREW__ = 0;
if ($2 & 1) {
$4 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($1);
___resumeException($4 | 0);
}
do if (!$0) if (!0) $$0 = 0; else label = 7; else {
$8 = _fopen($0, 54169) | 0;
$10 = 0 != 0;
if (!$8) if ($10) {
label = 7;
break;
} else {
$$0 = 0;
break;
}
if ($10) {
HEAP32[$vararg_buffer1 >> 2] = $0;
__Z7eprintfPKcz(54215, $vararg_buffer1);
}
if (!(FUNCTION_TABLE_iii[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 63]($1, $8) | 0)) {
$16 = $1 + 20 | 0;
$17 = HEAP32[$16 >> 2] | 0;
HEAP32[$16 >> 2] = 0;
$$0 = $17;
} else $$0 = 0;
} while (0);
if ((label | 0) == 7) {
HEAP32[$vararg_buffer >> 2] = $0;
__Z7eprintfPKcz(54171, $vararg_buffer);
$$0 = 0;
}
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] & 255]($1);
STACKTOP = sp;
return $$0 | 0;
}
function __Z22printDigitsAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKcs($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$4 = sp;
if (!($3 << 16 >> 16)) {
STACKTOP = sp;
return;
}
if ($1) {
HEAP8[$4 >> 0] = 32;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, $4, 1) | 0;
} else __Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($0, (HEAP16[36078] | 0) + 1 | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, $2, _strlen($2) | 0) | 0, 49551, 2) | 0;
__Z12SprintDigitsRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEs($0, $3);
HEAP8[$4 >> 0] = 34;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, $4, 1) | 0;
if ($1) {
STACKTOP = sp;
return;
}
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, 49554, 1) | 0;
STACKTOP = sp;
return;
}
function __Z10boolAttribPK7HashAnyIPKcS1_ES1_Rb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$012$i$i = 0, $$01215$i$i = 0, $$01216$i$i = 0, $$1 = 0, $$sink$i$i = 0, $19 = 0, $6 = 0, $7 = 0, label = 0;
if (!$0) {
$$1 = 0;
return $$1 | 0;
}
$6 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($1, HEAP32[$0 + 4 >> 2] | 0) | 0;
$7 = HEAP32[$0 >> 2] | 0;
L4 : do if ((HEAP16[$7 + ($6 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i = HEAP32[$7 + ($6 << 3) >> 2] | 0;
if (!$$01215$i$i) label = 7; else {
$$01216$i$i = $$01215$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($1, HEAP32[$$01216$i$i >> 2] | 0) | 0) break;
$$012$i$i = HEAP32[$$01216$i$i + 8 >> 2] | 0;
if (!$$012$i$i) {
label = 7;
break L4;
} else $$01216$i$i = $$012$i$i;
}
$$sink$i$i = $$01216$i$i + 4 | 0;
}
} else label = 7; while (0);
if ((label | 0) == 7) $$sink$i$i = $0 + 20 | 0;
$19 = HEAP32[$$sink$i$i >> 2] | 0;
if (!$19) {
$$1 = 0;
return $$1 | 0;
}
if (!(_strcmp($19, 52414) | 0)) {
HEAP8[$2 >> 0] = 1;
$$1 = 1;
return $$1 | 0;
}
if (_strcmp($19, 52419) | 0) {
$$1 = 0;
return $$1 | 0;
}
HEAP8[$2 >> 0] = 0;
$$1 = 1;
return $$1 | 0;
}
function __ZN13DynamicArray1I6VectorE10initialiseEiPS0_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$06$i = 0, $11 = 0, $13 = 0, $16 = 0, $3 = 0, $8 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$3 = sp + 4 | 0;
HEAP32[$0 + 4 >> 2] = 10;
HEAP32[$0 + 12 >> 2] = 0;
if (!$1) {
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
STACKTOP = sp;
return;
}
$8 = $0 + 8 | 0;
HEAP32[$8 >> 2] = $1;
if ($2 | 0) {
HEAP32[$0 >> 2] = $2;
STACKTOP = sp;
return;
}
$11 = _malloc($1 * 12 | 0) | 0;
HEAP32[$0 >> 2] = $11;
if (!$11) {
HEAP32[$vararg_buffer >> 2] = $1;
__Z7eprintfPKcz(46957, $vararg_buffer);
HEAP32[$8 >> 2] = 0;
$13 = ___cxa_allocate_exception(4) | 0;
HEAP32[$13 >> 2] = 1;
___cxa_throw($13 | 0, 32, 0);
}
if (($1 | 0) <= 0) {
STACKTOP = sp;
return;
}
$$06$i = 0;
do {
__ZN6VectorC2Ev($3);
$16 = (HEAP32[$0 >> 2] | 0) + ($$06$i * 12 | 0) | 0;
HEAP32[$16 >> 2] = HEAP32[$3 >> 2];
HEAP32[$16 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
HEAP32[$16 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
$$06$i = $$06$i + 1 | 0;
} while (($$06$i | 0) != ($1 | 0));
STACKTOP = sp;
return;
}
function __ZL13computeError1R10QuaternionRKS_S2_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $25 = f0, $3 = 0, $33 = f0, $4 = f0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp;
$4 = Math_fround(__ZNK10Quaternion10dotProductERKS_($1, $2));
HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
HEAP32[$0 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
HEAP32[$3 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[$3 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
__ZN10Quaternion8setScaleEf($3, $4);
__ZN10Quaternion11setSubtractERKS_($0, $3);
$25 = Math_fround(__ZNK10Quaternion8lengthsqEv($0));
if (+$25 > .0001) {
__ZN10Quaternion8setScaleEf($0, Math_fround(Math_fround(+Math_acos(+$4)) / Math_fround(Math_sqrt(Math_fround($25)))));
STACKTOP = sp;
return;
}
if (!($4 < Math_fround(0.0) & $25 > Math_fround(0.0))) {
STACKTOP = sp;
return;
}
$33 = Math_fround(Math_sqrt(Math_fround($25)));
__ZN10Quaternion8setScaleEf($0, Math_fround(Math_fround(Math_fround(3.14159274) - $33) / $33));
STACKTOP = sp;
return;
}
function _normal_isPublicId($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $$014 = 0, $$01416 = 0, $$01417 = 0, $4 = 0, $6 = 0, $7 = 0, label = 0;
$4 = $2 + -1 | 0;
$$01416 = $1 + 1 | 0;
if (($$01416 | 0) == ($4 | 0)) {
$$0 = 1;
return $$0 | 0;
}
$6 = $0 + 72 | 0;
$$01417 = $$01416;
L4 : while (1) {
$7 = HEAP8[$$01417 >> 0] | 0;
switch (HEAP8[$6 + ($7 & 255) >> 0] | 0) {
case 19:
case 30:
case 33:
case 16:
case 18:
case 10:
case 9:
case 15:
case 14:
case 17:
case 35:
case 34:
case 32:
case 31:
case 13:
case 27:
case 24:
case 25:
break;
case 21:
{
if ($7 << 24 >> 24 == 9) break L4;
break;
}
case 22:
case 26:
{
if ($7 << 24 >> 24 < 0) label = 7;
break;
}
default:
label = 7;
}
if ((label | 0) == 7) {
label = 0;
switch ($7 << 24 >> 24 | 0) {
case 64:
case 36:
break;
default:
break L4;
}
}
$$014 = $$01417 + 1 | 0;
if (($$014 | 0) == ($4 | 0)) {
$$0 = 1;
label = 9;
break;
} else $$01417 = $$014;
}
if ((label | 0) == 9) return $$0 | 0;
HEAP32[$3 >> 2] = $$01417;
$$0 = 0;
return $$0 | 0;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0, $$018 = 0, $$019 = 0, $$pn = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
$3 = sp + 1 | 0;
HEAP8[$2 >> 0] = $1;
$4 = $0 + 11 | 0;
$5 = HEAP8[$4 >> 0] | 0;
$6 = $5 << 24 >> 24 < 0;
if ($6) {
$$018 = HEAP32[$0 + 4 >> 2] | 0;
$$019 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
} else {
$$018 = $5 & 255;
$$019 = 10;
}
if (($$018 | 0) == ($$019 | 0)) {
__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($0, $$019, 1, $$019, $$019, 0, 0);
if ((HEAP8[$4 >> 0] | 0) < 0) label = 8; else label = 7;
} else if ($6) label = 8; else label = 7;
if ((label | 0) == 7) {
HEAP8[$4 >> 0] = $$018 + 1;
$$pn = $0;
} else if ((label | 0) == 8) {
$19 = HEAP32[$0 >> 2] | 0;
HEAP32[$0 + 4 >> 2] = $$018 + 1;
$$pn = $19;
}
$$0 = $$pn + $$018 | 0;
__ZNSt3__211char_traitsIcE6assignERcRKc($$0, $2);
HEAP8[$3 >> 0] = 0;
__ZNSt3__211char_traitsIcE6assignERcRKc($$0 + 1 | 0, $3);
STACKTOP = sp;
return;
}
function _wcrtomb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0 = 0, $13 = 0, $57 = 0, $7 = 0;
do if (!$0) $$0 = 1; else {
if ($1 >>> 0 < 128) {
HEAP8[$0 >> 0] = $1;
$$0 = 1;
break;
}
$7 = (___pthread_self_426() | 0) + 188 | 0;
if (!(HEAP32[HEAP32[$7 >> 2] >> 2] | 0)) if (($1 & -128 | 0) == 57216) {
HEAP8[$0 >> 0] = $1;
$$0 = 1;
break;
} else {
$13 = ___errno_location() | 0;
HEAP32[$13 >> 2] = 84;
$$0 = -1;
break;
}
if ($1 >>> 0 < 2048) {
HEAP8[$0 >> 0] = $1 >>> 6 | 192;
HEAP8[$0 + 1 >> 0] = $1 & 63 | 128;
$$0 = 2;
break;
}
if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
HEAP8[$0 >> 0] = $1 >>> 12 | 224;
HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128;
HEAP8[$0 + 2 >> 0] = $1 & 63 | 128;
$$0 = 3;
break;
}
if (($1 + -65536 | 0) >>> 0 < 1048576) {
HEAP8[$0 >> 0] = $1 >>> 18 | 240;
HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128;
HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128;
HEAP8[$0 + 3 >> 0] = $1 & 63 | 128;
$$0 = 4;
break;
} else {
$57 = ___errno_location() | 0;
HEAP32[$57 >> 2] = 84;
$$0 = -1;
break;
}
} while (0);
return $$0 | 0;
}
function __ZN10Quaternion15setFromVecAngleEffffb($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = Math_fround($2);
$3 = Math_fround($3);
$4 = Math_fround($4);
$5 = $5 | 0;
var $$sink = f0, $$sink34 = f0, $$sink36 = f0, $$sink38 = f0, $13 = f0, $15 = f0, $7 = f0, $8 = f0, $9 = f0;
$7 = Math_fround(Math_fround(__Z11trimAnglePIf($4)) * Math_fround(.5));
$8 = Math_fround(+Math_cos(+$7));
$9 = Math_fround(+Math_sin(+$7));
if ($5) {
$$sink = $8;
$$sink34 = Math_fround($9 * $3);
$$sink36 = Math_fround($9 * $2);
$$sink38 = Math_fround($9 * $1);
} else {
$13 = Math_fround(__ZN6Vector7alengthEfff($1, $2, $3));
if (!($13 <= Math_fround(0.0))) {
$15 = Math_fround($9 / $13);
$$sink = $8;
$$sink34 = Math_fround($15 * $3);
$$sink36 = Math_fround($15 * $2);
$$sink38 = Math_fround($15 * $1);
} else {
$$sink = Math_fround(1.0);
$$sink34 = Math_fround(0.0);
$$sink36 = Math_fround(0.0);
$$sink38 = Math_fround(0.0);
}
}
HEAPF32[$0 >> 2] = $$sink38;
HEAPF32[$0 + 4 >> 2] = $$sink36;
HEAPF32[$0 + 8 >> 2] = $$sink34;
HEAPF32[$0 + 12 >> 2] = $$sink;
__ZNK10Quaternion14checkValidQuatEv($0);
return;
}
function __ZN13ParTimedMorph13scaleDurationEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $$09 = 0, $13 = f0, $14 = 0, $15 = f0, $19 = f0, $2 = 0, $20 = 0, $21 = f0, $25 = f0, $27 = 0, $29 = 0, $3 = 0, $8 = f0, $9 = 0;
$2 = $0 + 24 | 0;
$3 = HEAP32[$2 >> 2] | 0;
if ((HEAP32[$3 + 12 >> 2] | 0) > 0) {
$$09 = 0;
$27 = $3;
do {
$29 = HEAP32[(HEAP32[$27 >> 2] | 0) + ($$09 << 2) >> 2] | 0;
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$29 >> 2] | 0) + 28 >> 2] & 63]($29, $1);
$$09 = $$09 + 1 | 0;
$27 = HEAP32[$2 >> 2] | 0;
} while (($$09 | 0) < (HEAP32[$27 + 12 >> 2] | 0));
}
$8 = Math_fround(HEAPF32[$0 + 4 >> 2]);
$9 = $0 + 8 | 0;
$13 = Math_fround($8 + Math_fround(Math_fround(Math_fround(HEAPF32[$9 >> 2]) - $8) * $1));
HEAPF32[$9 >> 2] = $13;
$14 = $0 + 12 | 0;
$15 = Math_fround(HEAPF32[$14 >> 2]);
if ($15 != Math_fround(-1.0)) {
$19 = Math_fround($8 + Math_fround(Math_fround($15 - $8) * $1));
HEAPF32[$14 >> 2] = $19;
}
$20 = $0 + 16 | 0;
$21 = Math_fround(HEAPF32[$20 >> 2]);
if (!($21 != Math_fround(-1.0))) return;
$25 = Math_fround($8 + Math_fround(Math_fround($21 - $8) * $1));
HEAPF32[$20 >> 2] = $25;
return;
}
function __ZN14RepeatMovement17setFinalHandStuffERK12TwoHandStuffRK20ArmHandConstellation($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $21 = 0, $23 = 0, $27 = 0, $28 = 0, $7 = 0;
if (!(HEAP8[$0 + 570 >> 0] | 0)) {
$7 = HEAP32[$0 + 696 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$7 >> 2] | 0) + 32 >> 2] & 127]($7, $1, $2);
}
$11 = $1 + 20 | 0;
$12 = $0 + 324 | 0;
HEAP32[$12 >> 2] = HEAP32[$11 >> 2];
HEAP32[$12 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
HEAP32[$12 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
HEAP32[$12 + 12 >> 2] = HEAP32[$11 + 12 >> 2];
$13 = $1 + 64 | 0;
$14 = $0 + 436 | 0;
HEAP32[$14 >> 2] = HEAP32[$13 >> 2];
HEAP32[$14 + 4 >> 2] = HEAP32[$13 + 4 >> 2];
HEAP32[$14 + 8 >> 2] = HEAP32[$13 + 8 >> 2];
HEAP32[$14 + 12 >> 2] = HEAP32[$13 + 12 >> 2];
$16 = HEAP32[$1 + 36 >> 2] | 0;
if (!$16) $21 = 0; else $21 = HEAP32[$16 + 236 >> 2] | 0;
HEAP32[$0 + 340 >> 2] = $21;
$23 = HEAP32[$1 + 80 >> 2] | 0;
if (!$23) {
$28 = 0;
$27 = $0 + 452 | 0;
HEAP32[$27 >> 2] = $28;
return;
}
$28 = HEAP32[$23 + 236 >> 2] | 0;
$27 = $0 + 452 | 0;
HEAP32[$27 >> 2] = $28;
return;
}
function _fflush($0) {
$0 = $0 | 0;
var $$0 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $12 = 0, $26 = 0, $29 = 0, $7 = 0, $phitmp = 0;
do if (!$0) {
if (!(HEAP32[1895] | 0)) $29 = 0; else $29 = _fflush(HEAP32[1895] | 0) | 0;
$12 = ___ofl_lock() | 0;
$$02325 = HEAP32[$12 >> 2] | 0;
if (!$$02325) $$024$lcssa = $29; else {
$$02327 = $$02325;
$$02426 = $29;
while (1) {
if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) $26 = ___lockfile($$02327) | 0; else $26 = 0;
if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) $$1 = ___fflush_unlocked($$02327) | 0 | $$02426; else $$1 = $$02426;
if ($26 | 0) ___unlockfile($$02327);
$$02327 = HEAP32[$$02327 + 56 >> 2] | 0;
if (!$$02327) {
$$024$lcssa = $$1;
break;
} else $$02426 = $$1;
}
}
___ofl_unlock();
$$0 = $$024$lcssa;
} else {
if ((HEAP32[$0 + 76 >> 2] | 0) <= -1) {
$$0 = ___fflush_unlocked($0) | 0;
break;
}
$phitmp = (___lockfile($0) | 0) == 0;
$7 = ___fflush_unlocked($0) | 0;
if ($phitmp) $$0 = $7; else {
___unlockfile($0);
$$0 = $7;
}
} while (0);
return $$0 | 0;
}
function __ZN14RepeatMovement11setDurationEfb($0, $1, $2) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = $2 | 0;
var $$sink = f0, $15 = f0, $17 = 0, $19 = 0, $25 = f0, $27 = 0, $3 = 0, $34 = f0, $4 = f0, $5 = 0, $6 = f0, $7 = f0;
$3 = $0 + 40 | 0;
$4 = Math_fround(HEAPF32[$3 >> 2]);
$5 = $0 + 44 | 0;
$6 = Math_fround(HEAPF32[$5 >> 2]);
$7 = Math_fround($4 - $6);
if ($2) if ($4 == Math_fround(0.0)) $$sink = Math_fround(0.0); else $$sink = Math_fround(Math_fround($1 / $4) * $6); else if ($7 > $1) $$sink = Math_fround(0.0); else $$sink = Math_fround(Math_fround($1 - $4) + $6);
HEAPF32[$5 >> 2] = $$sink;
HEAPF32[$3 >> 2] = $1;
$15 = Math_fround(Math_fround($1 - $$sink) / $7);
$17 = HEAP32[$0 + 696 >> 2] | 0;
$19 = $15 != Math_fround(1.0);
if (($17 | 0) != 0 & $19) {
$25 = Math_fround($15 * Math_fround(HEAPF32[$17 + 40 >> 2]));
FUNCTION_TABLE_vifi[HEAP32[(HEAP32[$17 >> 2] | 0) + 64 >> 2] & 7]($17, $25, $2);
}
$27 = HEAP32[$0 + 700 >> 2] | 0;
if (!($19 & ($27 | 0) != 0)) return;
$34 = Math_fround($15 * Math_fround(HEAPF32[$27 + 40 >> 2]));
FUNCTION_TABLE_vifi[HEAP32[(HEAP32[$27 >> 2] | 0) + 64 >> 2] & 7]($27, $34, $2);
return;
}
function __ZL7FakeFarRK6VectorS1_PS0_S2_fRS_S3_($0, $1, $2, $3, $4, $5, $6) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = Math_fround($4);
$5 = $5 | 0;
$6 = $6 | 0;
var $10 = f0, $16 = f0, $19 = 0, $21 = f0, $7 = 0, $8 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$7 = sp + 16 | 0;
$8 = sp;
__ZN6Vector11setMidPointERKS_S1_f($5, $0, $1, $4);
$10 = Math_fround(HEAPF32[$1 + 8 >> 2]);
$16 = Math_fround(Math_fround($4 + Math_fround(-1.0)) * Math_fround(Math_fround($10 - Math_fround(HEAPF32[$0 + 8 >> 2])) * $4));
$19 = $5 + (HEAP16[4149] << 2) | 0;
$21 = Math_fround(Math_fround(HEAPF32[$19 >> 2]) + $16);
HEAPF32[$19 >> 2] = $21;
if (!(($2 | 0) != 0 & ($3 | 0) != 0)) {
STACKTOP = sp;
return;
}
HEAPF32[$7 >> 2] = Math_fround(0.0);
HEAPF32[$7 + 4 >> 2] = Math_fround(0.0);
HEAPF32[$7 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$7 + 12 >> 2] = Math_fround(1.0);
__ZN10Quaternion16setQuatFrom2VecsERK6VectorS2_($7, $2, $3);
__ZN10Quaternion16setScaleRotationEf($7, $4);
__ZN6VectorC2EPKS_($8, $2);
__ZN6Vector7setFromERKS_($6, $8);
__ZNK10Quaternion12rotateVectorER6Vector($7, $6);
STACKTOP = sp;
return;
}
function __ZN11ParMovement20propagateChangeFlagsE18PostureChangeFlagsS0_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$01518 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $sext = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp + 6 | 0;
$4 = sp + 4 | 0;
$5 = sp + 2 | 0;
$6 = sp;
HEAP16[$3 >> 1] = HEAPU8[$1 >> 0] | HEAPU8[$1 + 1 >> 0] << 8;
HEAP16[$4 >> 1] = HEAPU8[$2 >> 0] | HEAPU8[$2 + 1 >> 0] << 8;
__ZN13BasicMovement20propagateChangeFlagsE18PostureChangeFlagsS0_($0, $3, $4);
$sext = HEAP32[$0 + 540 >> 2] << 16;
$11 = $sext >> 16;
if (($sext | 0) <= 0) {
STACKTOP = sp;
return;
}
$13 = $0 + 528 | 0;
$14 = $0 + 508 | 0;
$15 = $0 + 510 | 0;
$$01518 = 0;
do {
$18 = HEAP32[(HEAP32[$13 >> 2] | 0) + ($$01518 << 2) >> 2] | 0;
$21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 28 >> 2] | 0;
HEAP16[$5 >> 1] = HEAPU8[$14 >> 0] | HEAPU8[$14 + 1 >> 0] << 8;
HEAP16[$6 >> 1] = HEAPU8[$15 >> 0] | HEAPU8[$15 + 1 >> 0] << 8;
FUNCTION_TABLE_viii[$21 & 127]($18, $5, $6);
$$01518 = $$01518 + 1 | 0;
} while (($$01518 | 0) < ($11 | 0));
STACKTOP = sp;
return;
}
function __ZN7XMLCell7elementEPKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0, $$02535$i = 0, $$4$i = 0, $11 = 0, $4 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer2 = sp + 8 | 0;
$vararg_buffer = sp;
if (!$1) {
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
$4 = HEAP32[$0 + 8 >> 2] | 0;
L4 : do if (!$4) $$4$i = 0; else {
$7 = HEAP32[$4 + 12 >> 2] | 0;
if (($7 | 0) > 0) {
$9 = HEAP32[$4 >> 2] | 0;
$$02535$i = 0;
do {
$11 = HEAP32[$9 + ($$02535$i << 2) >> 2] | 0;
if (!(_strcmp($1, HEAP32[$11 >> 2] | 0) | 0)) {
$$4$i = $11;
break L4;
}
$$02535$i = $$02535$i + 1 | 0;
} while (($$02535$i | 0) < ($7 | 0));
}
if (!0) $$4$i = 0; else {
HEAP32[$vararg_buffer >> 2] = $1;
HEAP32[$vararg_buffer + 4 >> 2] = 0;
__Z7eprintfPKcz(54384, $vararg_buffer);
$$4$i = 0;
}
} while (0);
if (!(($$4$i | 0) == 0 & 0 != 0)) {
$$0 = $$4$i;
STACKTOP = sp;
return $$0 | 0;
}
HEAP32[$vararg_buffer2 >> 2] = $1;
__Z7eprintfPKcz(54421, $vararg_buffer2);
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
function __ZN7HashAnyIPKciE7makeSetES1_z($0, $varargs) {
$0 = $0 | 0;
$varargs = $varargs | 0;
var $$025$lcssa = 0, $$02528 = 0, $$127 = 0, $1 = 0, $12 = 0, $13 = 0, $15 = 0, $2 = 0, $22 = 0, $8 = 0, $9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$1 = sp;
HEAP32[$1 >> 2] = $varargs;
$2 = ($0 | 0) == 0;
if ($2) $$025$lcssa = 3; else {
$$02528 = 1;
do {
$8 = (HEAP32[$1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$9 = HEAP32[$8 >> 2] | 0;
HEAP32[$1 >> 2] = $8 + 4;
$$02528 = $$02528 + 1 | 0;
} while (($9 | 0) != 0);
$$025$lcssa = $$02528 * 3 | 1;
}
$12 = __Znwj(28) | 0;
__THREW__ = 0;
invoke_viii(74, $12 | 0, 0, $$025$lcssa | 0);
$13 = __THREW__;
__THREW__ = 0;
if ($13 & 1) {
$15 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($12);
___resumeException($15 | 0);
}
HEAP32[$1 >> 2] = $varargs;
if ($2) {
STACKTOP = sp;
return $12 | 0;
} else $$127 = $0;
do {
__ZN7HashAnyIPKciE7addItemES1_i($12, $$127, 1);
$22 = (HEAP32[$1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$$127 = HEAP32[$22 >> 2] | 0;
HEAP32[$1 >> 2] = $22 + 4;
} while (($$127 | 0) != 0);
STACKTOP = sp;
return $12 | 0;
}
function __ZN10Direction37BetweenES_S_f($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = Math_fround($3);
var $10 = f0, $13 = f0, $17 = f0, $20 = f0, $24 = f0, $31 = 0, $4 = 0, $5 = f0, $7 = f0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$4 = sp;
$5 = Math_fround(Math_fround(1.0) - $3);
$7 = Math_fround($5 * Math_fround(HEAPF32[$1 >> 2]));
$10 = Math_fround($7 + Math_fround(Math_fround(HEAPF32[$2 >> 2]) * $3));
$13 = Math_fround($5 * Math_fround(HEAPF32[$1 + 4 >> 2]));
$17 = Math_fround($13 + Math_fround(Math_fround(HEAPF32[$2 + 4 >> 2]) * $3));
$20 = Math_fround($5 * Math_fround(HEAPF32[$1 + 8 >> 2]));
$24 = Math_fround($20 + Math_fround(Math_fround(HEAPF32[$2 + 8 >> 2]) * $3));
HEAPF32[$4 >> 2] = $10;
HEAPF32[$4 + 4 >> 2] = $17;
HEAPF32[$4 + 8 >> 2] = $24;
if ($10 == Math_fround(0.0)) if ($24 != Math_fround(0.0) | $17 != Math_fround(0.0)) label = 3; else $31 = $1; else label = 3;
if ((label | 0) == 3) $31 = $4;
HEAP32[$0 >> 2] = HEAP32[$31 >> 2];
HEAP32[$0 + 4 >> 2] = HEAP32[$31 + 4 >> 2];
HEAP32[$0 + 8 >> 2] = HEAP32[$31 + 8 >> 2];
STACKTOP = sp;
return;
}
function __ZNK18FingerPlayMovement12CopyMovementEv($0) {
$0 = $0 | 0;
var $1 = 0, $10 = 0, $11 = 0, $13 = 0, $6 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$1 = __Znwj(552) | 0;
HEAP32[$1 >> 2] = 1984;
HEAP32[$1 + 12 >> 2] = 0;
HEAP32[$1 + 16 >> 2] = 0;
HEAP8[$1 + 20 >> 0] = 0;
__THREW__ = 0;
invoke_vi(141, $1 + 60 | 0);
$6 = __THREW__;
__THREW__ = 0;
if ($6 & 1) {
$13 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($1);
___resumeException($13 | 0);
}
HEAP32[$1 >> 2] = 2560;
_memcpy($1 + 4 | 0, $0 + 4 | 0, 524) | 0;
$10 = $1 + 528 | 0;
$11 = $0 + 528 | 0;
HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
HEAP32[$10 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
HEAP32[$10 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
HEAP32[$10 + 12 >> 2] = HEAP32[$11 + 12 >> 2];
HEAP32[$10 + 16 >> 2] = HEAP32[$11 + 16 >> 2];
HEAP32[$10 + 20 >> 2] = HEAP32[$11 + 20 >> 2];
if (!0) {
STACKTOP = sp;
return $1 | 0;
}
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer >> 2] = $0;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
__Z7eprintfPKcz(38887, $vararg_buffer);
STACKTOP = sp;
return $1 | 0;
}
function _big2_nameLength($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0, $$sink = 0, $2 = 0, label = 0;
$2 = $0 + 72 | 0;
$$0 = $1;
L1 : while (1) {
L3 : do switch (HEAP8[$$0 >> 0] | 0) {
case -33:
case -34:
case -35:
case -36:
{
break L1;
break;
}
case 0:
{
switch (HEAP8[$2 + (HEAPU8[$$0 + 1 >> 0] | 0) >> 0] | 0) {
case 6:
{
$$sink = 3;
break L3;
break;
}
case 7:
{
label = 6;
break L3;
break;
}
case 27:
case 26:
case 25:
case 24:
case 22:
case 29:
{
label = 7;
break L3;
break;
}
case 5:
break;
default:
break L1;
}
$$sink = 2;
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 6;
break;
}
case -1:
{
if ((HEAPU8[$$0 + 1 >> 0] | 0) > 253) break L1; else label = 7;
break;
}
default:
label = 7;
} while (0);
if ((label | 0) == 6) {
label = 0;
$$sink = 4;
} else if ((label | 0) == 7) {
label = 0;
$$sink = 2;
}
$$0 = $$0 + $$sink | 0;
}
return $$0 - $1 | 0;
}
function _little2_nameLength($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0, $$sink = 0, $2 = 0, label = 0;
$2 = $0 + 72 | 0;
$$0 = $1;
L1 : while (1) {
L3 : do switch (HEAP8[$$0 + 1 >> 0] | 0) {
case -33:
case -34:
case -35:
case -36:
{
break L1;
break;
}
case 0:
{
switch (HEAP8[$2 + (HEAPU8[$$0 >> 0] | 0) >> 0] | 0) {
case 6:
{
$$sink = 3;
break L3;
break;
}
case 7:
{
label = 6;
break L3;
break;
}
case 27:
case 26:
case 25:
case 24:
case 22:
case 29:
{
label = 7;
break L3;
break;
}
case 5:
break;
default:
break L1;
}
$$sink = 2;
break;
}
case -37:
case -38:
case -39:
case -40:
{
label = 6;
break;
}
case -1:
{
if ((HEAPU8[$$0 >> 0] | 0) > 253) break L1; else label = 7;
break;
}
default:
label = 7;
} while (0);
if ((label | 0) == 6) {
label = 0;
$$sink = 4;
} else if ((label | 0) == 7) {
label = 0;
$$sink = 2;
}
$$0 = $$0 + $$sink | 0;
}
return $$0 - $1 | 0;
}
function _utf8_toUtf8($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0$lcssa = 0, $$025$lcssa = 0, $$02527 = 0, $$026 = 0, $$028 = 0, $$1 = 0, $11 = 0, $13 = 0, $16 = 0, $23 = 0, $5 = 0, $9 = 0;
$5 = HEAP32[$1 >> 2] | 0;
$9 = HEAP32[$3 >> 2] | 0;
$11 = $4 - $9 | 0;
$13 = $9;
L1 : do if (($2 - $5 | 0) > ($11 | 0)) {
$$026 = $5 + $11 | 0;
while (1) {
if ($$026 >>> 0 <= $5 >>> 0) {
$$1 = $$026;
break L1;
}
$16 = $$026 + -1 | 0;
if ((HEAP8[$16 >> 0] & -64) << 24 >> 24 == -128) $$026 = $16; else {
$$1 = $$026;
break;
}
}
} else $$1 = $2; while (0);
if (($5 | 0) == ($$1 | 0)) {
$$0$lcssa = $5;
$$025$lcssa = $13;
HEAP32[$1 >> 2] = $$0$lcssa;
HEAP32[$3 >> 2] = $$025$lcssa;
return;
} else {
$$02527 = $13;
$$028 = $5;
}
while (1) {
HEAP8[$$02527 >> 0] = HEAP8[$$028 >> 0] | 0;
$$028 = $$028 + 1 | 0;
$23 = $$02527 + 1 | 0;
if (($$028 | 0) == ($$1 | 0)) {
$$0$lcssa = $$1;
$$025$lcssa = $23;
break;
} else $$02527 = $23;
}
HEAP32[$1 >> 2] = $$0$lcssa;
HEAP32[$3 >> 2] = $$025$lcssa;
return;
}
function __ZN15AnimgenInstance9SetAvatarEiPKcS1_S1_S1_S1_($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
var $$0 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $22 = 0, $24 = 0, $9 = 0;
$9 = HEAP32[17849] | 0;
if (($9 | 0) == 0 | (($0 | 0) != 0 | (HEAP32[17848] | 0) != 1)) {
$$0 = 0;
return $$0 | 0;
}
$12 = $9 + 40 | 0;
if ((HEAP32[$12 >> 2] | 0) != 1) {
$$0 = 0;
return $$0 | 0;
}
$15 = __Z10copyStringPKc($1) | 0;
$16 = $9 + 16 | 0;
HEAP32[$16 >> 2] = $15;
$17 = __Znaj(20) | 0;
HEAP32[$17 + 16 >> 2] = 0;
$19 = __Z10copyStringPKc($2) | 0;
HEAP32[$17 >> 2] = $19;
$20 = __Z10copyStringPKc($3) | 0;
HEAP32[$17 + 4 >> 2] = $20;
$22 = __Z10copyStringPKc($4) | 0;
HEAP32[$17 + 8 >> 2] = $22;
$24 = __Z10copyStringPKc($5) | 0;
HEAP32[$17 + 12 >> 2] = $24;
HEAP32[$9 + 20 >> 2] = $17;
if (!(_animgen_lite_initialise($17, HEAP32[$16 >> 2] | 0, HEAP32[$9 >> 2] | 0, (HEAP8[$9 + 4 >> 0] | 0) != 0, (HEAP8[$9 + 5 >> 0] | 0) != 0) | 0)) {
$$0 = 0;
return $$0 | 0;
}
HEAP32[$12 >> 2] = 2;
$$0 = 1;
return $$0 | 0;
}
function __ZN13ParTimedMorph10shiftStartEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $$06 = 0, $10 = 0, $12 = f0, $13 = 0, $14 = f0, $16 = f0, $17 = 0, $18 = f0, $2 = 0, $20 = f0, $22 = 0, $24 = 0, $3 = 0, $7 = 0, $9 = f0;
$2 = $0 + 24 | 0;
$3 = HEAP32[$2 >> 2] | 0;
if ((HEAP32[$3 + 12 >> 2] | 0) > 0) {
$$06 = 0;
$22 = $3;
do {
$24 = HEAP32[(HEAP32[$22 >> 2] | 0) + ($$06 << 2) >> 2] | 0;
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 63]($24, $1);
$$06 = $$06 + 1 | 0;
$22 = HEAP32[$2 >> 2] | 0;
} while (($$06 | 0) < (HEAP32[$22 + 12 >> 2] | 0));
}
$7 = $0 + 4 | 0;
$9 = Math_fround(Math_fround(HEAPF32[$7 >> 2]) + $1);
HEAPF32[$7 >> 2] = $9;
$10 = $0 + 8 | 0;
$12 = Math_fround(Math_fround(HEAPF32[$10 >> 2]) + $1);
HEAPF32[$10 >> 2] = $12;
$13 = $0 + 12 | 0;
$14 = Math_fround(HEAPF32[$13 >> 2]);
if ($14 >= Math_fround(0.0)) {
$16 = Math_fround($14 + $1);
HEAPF32[$13 >> 2] = $16;
}
$17 = $0 + 16 | 0;
$18 = Math_fround(HEAPF32[$17 >> 2]);
if (!($18 >= Math_fround(0.0))) return;
$20 = Math_fround($18 + $1);
HEAPF32[$17 >> 2] = $20;
return;
}
function __ZN5JointC2EPKciPS_P7SegmentP13DynamicArrayPI4SiteE($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
var $10 = 0, $19 = 0, $22 = 0, $25 = 0, $32 = 0, $9 = 0;
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $2;
HEAP32[$0 + 8 >> 2] = $3;
HEAP32[$0 + 12 >> 2] = 0;
$9 = $0 + 16 | 0;
HEAP32[$9 >> 2] = $5;
$10 = $0 + 20 | 0;
HEAP32[$10 >> 2] = $4;
HEAP32[$0 + 24 >> 2] = 1;
HEAPF32[$0 + 28 >> 2] = Math_fround(0.0);
HEAP32[$0 + 36 >> 2] = 0;
__ZN9TransformC2Ev($0 + 40 | 0);
__ZN9TransformC2Ev($0 + 68 | 0);
HEAP8[$0 + 96 >> 0] = 1;
HEAP32[$0 + 100 >> 2] = 0;
HEAP32[$0 + 32 >> 2] = 1484;
$19 = HEAP32[$10 >> 2] | 0;
if ($19 | 0) HEAP32[$19 + 8 >> 2] = $0;
$22 = HEAP32[$9 >> 2] | 0;
if (!$22) return;
$25 = HEAP32[$22 + 12 >> 2] | 0;
if (($25 | 0) <= 0) return;
HEAP32[(HEAP32[HEAP32[$22 >> 2] >> 2] | 0) + 16 >> 2] = $0;
if (($25 | 0) == 1) return; else $32 = 1;
do {
HEAP32[(HEAP32[(HEAP32[HEAP32[$9 >> 2] >> 2] | 0) + ($32 << 2) >> 2] | 0) + 16 >> 2] = $0;
$32 = $32 + 1 | 0;
} while (($32 | 0) != ($25 | 0));
return;
}
function __ZN10OptionSpecD2Ev($0) {
$0 = $0 | 0;
var $$06$i = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $25 = 0, $4 = 0, $6 = 0, $7 = 0;
$1 = $0 + 12 | 0;
$2 = HEAP32[$1 >> 2] | 0;
do if ($2 | 0) {
$4 = HEAP32[$2 >> 2] | 0;
if (!$4) $20 = $2; else {
$6 = $2 + 12 | 0;
$7 = HEAP32[$6 >> 2] | 0;
if (($7 | 0) > 0) {
$$06$i = 0;
$10 = $4;
$25 = $7;
while (1) {
$11 = HEAP32[$10 + ($$06$i << 2) >> 2] | 0;
if (!$11) $17 = $25; else {
_free($11);
HEAP32[(HEAP32[$2 >> 2] | 0) + ($$06$i << 2) >> 2] = 0;
$17 = HEAP32[$6 >> 2] | 0;
}
$15 = $$06$i + 1 | 0;
if (($15 | 0) >= ($17 | 0)) break;
$$06$i = $15;
$10 = HEAP32[$2 >> 2] | 0;
$25 = $17;
}
$$pre = HEAP32[$1 >> 2] | 0;
if (!$$pre) break; else $20 = $$pre;
} else $20 = $2;
}
$19 = HEAP32[$20 >> 2] | 0;
if ($19 | 0) _free($19);
__ZdlPv($20);
HEAP32[$1 >> 2] = 0;
} while (0);
$22 = $0 + 8 | 0;
$23 = HEAP32[$22 >> 2] | 0;
if (!$23) return;
_free($23);
HEAP32[$22 >> 2] = 0;
return;
}
function __ZN5JointD2Ev($0) {
$0 = $0 | 0;
var $1 = 0, $11 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0;
$1 = HEAP32[$0 >> 2] | 0;
if ($1 | 0) {
_free($1);
HEAP32[$0 >> 2] = 0;
}
$3 = $0 + 12 | 0;
$4 = HEAP32[$3 >> 2] | 0;
if ($4 | 0) {
$6 = HEAP32[$4 >> 2] | 0;
if ($6 | 0) _free($6);
__ZdlPv($4);
HEAP32[$3 >> 2] = 0;
}
$8 = $0 + 16 | 0;
$9 = HEAP32[$8 >> 2] | 0;
if ($9 | 0) {
$11 = HEAP32[$9 >> 2] | 0;
if ($11 | 0) _free($11);
__ZdlPv($9);
HEAP32[$8 >> 2] = 0;
}
$13 = $0 + 100 | 0;
$14 = HEAP32[$13 >> 2] | 0;
if ($14 | 0) {
__ZdlPv($14);
HEAP32[$13 >> 2] = 0;
}
$16 = $0 + 36 | 0;
$17 = HEAP32[$16 >> 2] | 0;
if (!$17) {
$22 = $0 + 8 | 0;
HEAP32[$22 >> 2] = 0;
$23 = $0 + 20 | 0;
HEAP32[$23 >> 2] = 0;
$24 = $0 + 24 | 0;
HEAP32[$24 >> 2] = 0;
return;
}
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$17 >> 2] | 0) + 4 >> 2] & 255]($17);
HEAP32[$16 >> 2] = 0;
$22 = $0 + 8 | 0;
HEAP32[$22 >> 2] = 0;
$23 = $0 + 20 | 0;
HEAP32[$23 >> 2] = 0;
$24 = $0 + 24 | 0;
HEAP32[$24 >> 2] = 0;
return;
}
function __ZN7SSFrame8AddPRSetEPcfffffff($0, $1, $2, $3, $4, $5, $6, $7, $8) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = Math_fround($3);
$4 = Math_fround($4);
$5 = Math_fround($5);
$6 = Math_fround($6);
$7 = Math_fround($7);
$8 = Math_fround($8);
var $10 = 0, $11 = 0, $13 = 0, $14 = 0, $22 = 0, $28 = 0, $9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$9 = sp;
$10 = __Znwj(40) | 0;
__THREW__ = 0;
invoke_viifffffff(1, $10 | 0, $1 | 0, +$2, +$3, +$4, +$5, +$6, +$7, +$8);
$11 = __THREW__;
__THREW__ = 0;
if ($11 & 1) {
$28 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($10);
___resumeException($28 | 0);
}
HEAP32[$9 >> 2] = $10;
$13 = $0 + 8 | 0;
$14 = HEAP32[$13 >> 2] | 0;
if (($14 | 0) == (HEAP32[$0 + 12 >> 2] | 0)) __ZNSt3__26vectorIP7SSPRSetNS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($0 + 4 | 0, $9); else {
HEAP32[$14 >> 2] = $10;
HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 4;
}
$22 = HEAP32[$9 >> 2] | 0;
if (_strcmp($22 + 4 | 0, 18047) | 0) {
STACKTOP = sp;
return;
}
HEAP32[$0 + 40 >> 2] = $22;
STACKTOP = sp;
return;
}
function __ZNK18HingeJointRotation13printAxesVRMLEP8_IO_FILEfss($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
$4 = $4 | 0;
var $11 = 0.0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$vararg_buffer9 = sp + 48 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$7 = __Z12indentStringi($3 << 16 >> 16) | 0;
$9 = $4 << 16 >> 16;
$11 = +Math_fround($2 / Math_fround(5.0));
HEAP32[$vararg_buffer >> 2] = $7;
HEAP32[$vararg_buffer + 4 >> 2] = $7;
HEAP32[$vararg_buffer + 8 >> 2] = $9;
HEAPF64[$vararg_buffer + 16 >> 3] = +$2;
HEAP32[$vararg_buffer + 24 >> 2] = $7;
HEAP32[$vararg_buffer + 28 >> 2] = $9;
HEAPF64[$vararg_buffer + 32 >> 3] = $11;
HEAP32[$vararg_buffer + 40 >> 2] = $7;
HEAP32[$vararg_buffer + 44 >> 2] = $7;
_fprintf($1, 13245, $vararg_buffer) | 0;
__ZNK6Vector5printEP8_IO_FILEi($0 + 8 | 0, $1, $9);
HEAP32[$vararg_buffer9 >> 2] = $7;
_fprintf($1, 13343, $vararg_buffer9) | 0;
if (!$7) {
STACKTOP = sp;
return;
}
_free($7);
STACKTOP = sp;
return;
}
function __Z12SprintDigitsRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEs($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$01415 = 0, $$016 = 0, $2 = 0, $7 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
if (!($1 << 16 >> 16)) {
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, 24677, 6) | 0;
STACKTOP = sp;
return;
}
if ($1 << 16 >> 16 < 0) {
$7 = __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEs(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, 25046, 7) | 0, $1) | 0;
HEAP8[$2 >> 0] = 41;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($7, $2, 1) | 0;
STACKTOP = sp;
return;
}
$$01415 = 0;
$$016 = $1 << 16 >> 16;
while (1) {
if ($$016 & 1 | 0) {
HEAP8[$2 >> 0] = $$01415 + 49;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, $2, 1) | 0;
}
$$016 = $$016 >>> 1;
if (!$$016) break; else $$01415 = $$01415 + 1 | 0;
}
STACKTOP = sp;
return;
}
function __ZN10TorsoCurveC2EPKS_S1_f($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = Math_fround($3);
var $$023 = 0, $10 = f0, $12 = f0, $16 = f0, $17 = f0, $20 = 0, $23 = 0, $9 = 0, dest = 0, stop = 0;
__ZN6VectorC2Ev($0);
__ZN6VectorC2Ev($0 + 12 | 0);
__ZN6VectorC2Ev($0 + 24 | 0);
__ZN6VectorC2Ev($0 + 36 | 0);
__ZN6VectorC2Ev($0 + 48 | 0);
$9 = $1 + 28 | 0;
dest = $0 + 60 | 0;
stop = dest + 64 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
$10 = Math_fround(HEAPF32[$9 >> 2]);
$12 = Math_fround(HEAPF32[$2 + 28 >> 2]);
$16 = Math_fround(Math_fround($3 - $10) / Math_fround($12 - $10));
$17 = $12 == $10 ? Math_fround(.5) : $16;
if (5 > 0) {
$$023 = 0;
$20 = 0;
} else {
__ZN10TorsoCurve10initialiseEv($0);
return;
}
while (1) {
__ZN6Vector11setMidPointERKS_S1_f($0 + ($20 * 12 | 0) | 0, $1 + ($20 * 12 | 0) | 0, $2 + ($20 * 12 | 0) | 0, $17);
$23 = $$023 + 1 << 16 >> 16;
if ($23 << 16 >> 16 < 5) {
$$023 = $23;
$20 = $23 << 16 >> 16;
} else break;
}
__ZN10TorsoCurve10initialiseEv($0);
return;
}
function __GLOBAL__sub_I_Tables_cpp() {
HEAPF32[16608] = Math_fround(1.57079637);
HEAPF32[16609] = Math_fround(1.41421354);
HEAPF32[16610] = Math_fround(0.0);
HEAPF32[16611] = Math_fround(0.0);
HEAPF32[16612] = Math_fround(0.0);
HEAP16[33106] = 1;
HEAP8[66214] = 0;
HEAP8[66215] = 0;
HEAP8[66216] = 0;
HEAP16[33118] = 2;
HEAP8[66238] = 0;
HEAP8[66239] = 1;
HEAP8[66240] = 0;
HEAP16[33130] = 3;
HEAP8[66262] = 0;
HEAP8[66263] = 1;
HEAP8[66264] = 0;
HEAP16[33142] = 2;
HEAP8[66286] = 0;
HEAP8[66287] = 0;
HEAP8[66288] = 0;
HEAP16[33154] = 1;
HEAP8[66310] = 1;
HEAP8[66311] = 0;
HEAP8[66312] = 0;
HEAP16[33166] = 2;
HEAP8[66334] = 0;
HEAP8[66335] = 1;
HEAP8[66336] = 1;
HEAP16[33178] = 3;
HEAP8[66358] = 0;
HEAP8[66359] = 1;
HEAP8[66360] = 1;
HEAP16[33190] = 3;
HEAP8[66382] = 0;
HEAP8[66383] = 1;
HEAP8[66384] = 0;
HEAP16[33202] = 1;
HEAP8[66406] = 0;
HEAP8[66407] = 0;
HEAP8[66408] = 0;
HEAP8[72162] = HEAP8[72162] & -16;
HEAP8[72164] = HEAP8[72164] & -16 | 2;
HEAP8[73352] = 0;
HEAP8[73353] = 0;
HEAP8[73354] = 0;
HEAP16[33214] = 0;
HEAP8[66430] = 0;
return;
}
function _fopen($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0, $10 = 0, $14 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$vararg_buffer8 = sp + 32 | 0;
$vararg_buffer3 = sp + 16 | 0;
$vararg_buffer = sp;
if (!(_memchr(63238, HEAP8[$1 >> 0] | 0, 4) | 0)) {
$5 = ___errno_location() | 0;
HEAP32[$5 >> 2] = 22;
$$0 = 0;
} else {
$6 = ___fmodeflags($1) | 0;
HEAP32[$vararg_buffer >> 2] = $0;
HEAP32[$vararg_buffer + 4 >> 2] = $6 | 32768;
HEAP32[$vararg_buffer + 8 >> 2] = 438;
$10 = ___syscall_ret(___syscall5(5, $vararg_buffer | 0) | 0) | 0;
if (($10 | 0) < 0) $$0 = 0; else {
if ($6 & 524288 | 0) {
HEAP32[$vararg_buffer3 >> 2] = $10;
HEAP32[$vararg_buffer3 + 4 >> 2] = 2;
HEAP32[$vararg_buffer3 + 8 >> 2] = 1;
___syscall221(221, $vararg_buffer3 | 0) | 0;
}
$14 = ___fdopen($10, $1) | 0;
if (!$14) {
HEAP32[$vararg_buffer8 >> 2] = $10;
___syscall6(6, $vararg_buffer8 | 0) | 0;
$$0 = 0;
} else $$0 = $14;
}
}
STACKTOP = sp;
return $$0 | 0;
}
function __ZN5Joint32computeLocalFromGlobalTransformsEv($0) {
$0 = $0 | 0;
var $$07 = 0, $1 = 0, $12 = 0, $15 = 0, $2 = 0, $21 = 0, $22 = 0, $4 = 0, $8 = 0, $9 = 0;
$1 = $0 + 68 | 0;
$2 = $0 + 40 | 0;
HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
HEAP32[$2 + 20 >> 2] = HEAP32[$1 + 20 >> 2];
HEAP32[$2 + 24 >> 2] = HEAP32[$1 + 24 >> 2];
$4 = HEAP32[$0 + 8 >> 2] | 0;
if ($4 | 0) __ZN9Transform13setComposeInvERK6VectorRK10Quaternion($2, $4 + 68 | 0, $4 + 80 | 0);
$8 = $0 + 12 | 0;
$9 = HEAP32[$8 >> 2] | 0;
if (!$9) return;
$12 = HEAP32[$9 + 12 >> 2] | 0;
if (($12 | 0) > 0) {
$$07 = 0;
$15 = $9;
} else return;
while (1) {
if ((HEAP32[$15 + 12 >> 2] | 0) > ($$07 | 0)) $21 = HEAP32[(HEAP32[$15 >> 2] | 0) + ($$07 << 2) >> 2] | 0; else $21 = 0;
__ZN5Joint32computeLocalFromGlobalTransformsEv($21);
$22 = $$07 + 1 | 0;
if (($22 | 0) == ($12 | 0)) break;
$$07 = $22;
$15 = HEAP32[$8 >> 2] | 0;
}
return;
}
function __GLOBAL__sub_I_Vector_cpp() {
HEAPF32[16159] = Math_fround(1.57079637);
HEAPF32[16160] = Math_fround(1.41421354);
HEAPF32[16129] = Math_fround(0.0);
HEAPF32[16130] = Math_fround(0.0);
HEAPF32[16131] = Math_fround(0.0);
HEAPF32[16132] = Math_fround(1.0);
HEAPF32[16133] = Math_fround(0.0);
HEAPF32[16134] = Math_fround(0.0);
HEAPF32[16135] = Math_fround(0.0);
HEAPF32[16136] = Math_fround(1.0);
HEAPF32[16137] = Math_fround(0.0);
HEAPF32[16138] = Math_fround(0.0);
HEAPF32[16139] = Math_fround(0.0);
HEAPF32[16140] = Math_fround(1.0);
HEAPF32[16141] = Math_fround(-1.0);
HEAPF32[16142] = Math_fround(0.0);
HEAPF32[16143] = Math_fround(0.0);
HEAPF32[16144] = Math_fround(0.0);
HEAPF32[16145] = Math_fround(-1.0);
HEAPF32[16146] = Math_fround(0.0);
HEAPF32[16147] = Math_fround(0.0);
HEAPF32[16148] = Math_fround(0.0);
HEAPF32[16149] = Math_fround(-1.0);
HEAP32[16150] = 1065353216;
HEAP32[16151] = 0;
HEAP32[16152] = 0;
HEAP32[16153] = 0;
HEAP32[16154] = 1065353216;
HEAP32[16155] = 0;
HEAP32[16156] = 0;
HEAP32[16157] = 0;
HEAP32[16158] = 1065353216;
return;
}
function _normal_predefinedEntityName($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0 = 0, $9 = 0;
L1 : do switch ($2 - $1 | 0) {
case 2:
{
if ((HEAP8[$1 + 1 >> 0] | 0) == 116) {
$9 = HEAP8[$1 >> 0] | 0;
$$0 = $9 << 24 >> 24 == 108 ? 60 : $9 << 24 >> 24 == 103 ? 62 : 0;
return $$0 | 0;
}
break;
}
case 3:
{
if ((HEAP8[$1 >> 0] | 0) == 97) if ((HEAP8[$1 + 1 >> 0] | 0) == 109) if ((HEAP8[$1 + 2 >> 0] | 0) == 112) {
$$0 = 38;
return $$0 | 0;
}
break;
}
case 4:
{
switch (HEAP8[$1 >> 0] | 0) {
case 113:
{
if ((HEAP8[$1 + 1 >> 0] | 0) != 117) break L1;
if ((HEAP8[$1 + 2 >> 0] | 0) != 111) break L1;
if ((HEAP8[$1 + 3 >> 0] | 0) == 116) $$0 = 34; else break L1;
return $$0 | 0;
}
case 97:
{
if ((HEAP8[$1 + 1 >> 0] | 0) != 112) break L1;
if ((HEAP8[$1 + 2 >> 0] | 0) != 111) break L1;
if ((HEAP8[$1 + 3 >> 0] | 0) == 115) $$0 = 39; else break L1;
return $$0 | 0;
}
default:
break L1;
}
break;
}
default:
{}
} while (0);
$$0 = 0;
return $$0 | 0;
}
function __Z21CreateControllerTablev() {
var $0 = 0, $1 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$vararg_buffer = sp;
HEAP32[$vararg_buffer >> 2] = 1;
HEAP32[$vararg_buffer + 4 >> 2] = 12161;
HEAP32[$vararg_buffer + 8 >> 2] = 2;
HEAP32[$vararg_buffer + 12 >> 2] = 12169;
HEAP32[$vararg_buffer + 16 >> 2] = 3;
HEAP32[$vararg_buffer + 20 >> 2] = 53138;
HEAP32[$vararg_buffer + 24 >> 2] = 4;
HEAP32[$vararg_buffer + 28 >> 2] = 12177;
HEAP32[$vararg_buffer + 32 >> 2] = 5;
HEAP32[$vararg_buffer + 36 >> 2] = 12183;
HEAP32[$vararg_buffer + 40 >> 2] = 6;
HEAP32[$vararg_buffer + 44 >> 2] = 0;
$0 = __ZN7HashAnyIPKciE8makeHashEiS1_z(0, 42976, $vararg_buffer) | 0;
HEAP32[16162] = $0;
$1 = _malloc(112) | 0;
HEAP32[16161] = $1;
HEAPF32[$1 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 16 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 32 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 48 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 64 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 80 >> 2] = Math_fround(0.0);
HEAPF32[$1 + 96 >> 2] = Math_fround(0.0);
STACKTOP = sp;
return;
}
function _unknown_toUtf16($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$sink3 = 0, $10 = 0, $14 = 0, $17 = 0, $22 = 0, $23 = 0, $31 = 0, $32 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
$5 = HEAP32[$1 >> 2] | 0;
if (($5 | 0) == ($2 | 0)) return;
$7 = $0 + 372 | 0;
$8 = $0 + 364 | 0;
$9 = $0 + 368 | 0;
$10 = $0 + 72 | 0;
$14 = $5;
while (1) {
if ((HEAP32[$3 >> 2] | 0) == ($4 | 0)) {
label = 7;
break;
}
$17 = HEAP16[$7 + ((HEAPU8[$14 >> 0] | 0) << 1) >> 1] | 0;
if (!($17 << 16 >> 16)) {
$22 = (FUNCTION_TABLE_iii[HEAP32[$8 >> 2] & 63](HEAP32[$9 >> 2] | 0, $14) | 0) & 65535;
$23 = HEAP32[$1 >> 2] | 0;
$$0 = $22;
$$sink3 = (HEAPU8[$10 + (HEAPU8[$23 >> 0] | 0) >> 0] | 0) + -3 | 0;
$31 = $23;
} else {
$$0 = $17;
$$sink3 = 1;
$31 = $14;
}
HEAP32[$1 >> 2] = $31 + $$sink3;
$32 = HEAP32[$3 >> 2] | 0;
HEAP32[$3 >> 2] = $32 + 2;
HEAP16[$32 >> 1] = $$0;
$14 = HEAP32[$1 >> 2] | 0;
if (($14 | 0) == ($2 | 0)) {
label = 7;
break;
}
}
if ((label | 0) == 7) return;
}
function __ZN7Gesture12InitPosture1ER19TwoHConcretePosture($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $15 = 0, $2 = 0, $21 = 0, $3 = 0, $5 = 0, $6 = 0;
$2 = $0 + 28 | 0;
$3 = HEAP32[$2 >> 2] | 0;
do if ($3 | 0) {
$5 = $3 + 4 | 0;
$6 = HEAPU16[$5 >> 1] | 0 | (HEAPU8[$5 + 2 >> 0] | 0) << 16;
if (!(($6 & 252 | 0) == 12 | (($6 & 1015808 | 0) != 0 | (($6 & 255) + -1 | 0) >>> 0 < 11))) {
__ZN11OneHGesture20InitConcretePosture1ER19OneHConcretePosture($3, $1);
break;
}
$15 = HEAP32[$0 + 32 >> 2] | 0;
if ($15 | 0) {
__ZN11OneHGesture20InitConcretePosture1ER19OneHConcretePosture($15, $1 + 112 | 0);
if (!(HEAP32[$2 >> 2] | 0)) return;
}
__ZN7Gesture14installPostureERK19OneHConcretePostureb($0, $1 + 112 | 0, 0);
__ZN11OneHGesture20InitConcretePosture1ER19OneHConcretePosture(HEAP32[$2 >> 2] | 0, $1);
return;
} while (0);
$21 = $0 + 32 | 0;
if (!(HEAP32[$21 >> 2] | 0)) return;
__ZN7Gesture14installPostureERK19OneHConcretePostureb($0, $1, 1);
__ZN11OneHGesture20InitConcretePosture1ER19OneHConcretePosture(HEAP32[$21 >> 2] | 0, $1 + 112 | 0);
return;
}
function __ZNK18PostureChangeFlags5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $3 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$3 = HEAPU8[$0 >> 0] | HEAPU8[$0 + 1 >> 0] << 8;
HEAP32[$vararg_buffer >> 2] = (($3 & 65535) << 1 & 2 ^ 2) + 43;
HEAP32[$vararg_buffer + 4 >> 2] = $3 & 2 ? 65 : 45;
HEAP32[$vararg_buffer + 8 >> 2] = $3 & 4 ? 68 : 45;
HEAP32[$vararg_buffer + 12 >> 2] = $3 & 8 ? 72 : 45;
HEAP32[$vararg_buffer + 16 >> 2] = $3 & 16 ? 69 : 45;
HEAP32[$vararg_buffer + 20 >> 2] = $3 & 32 ? 80 : 45;
HEAP32[$vararg_buffer + 24 >> 2] = $3 & 64 ? 83 : 45;
HEAP32[$vararg_buffer + 28 >> 2] = $3 & 128 ? 70 : 45;
HEAP32[$vararg_buffer + 32 >> 2] = $3 & 256 ? 87 : 45;
HEAP32[$vararg_buffer + 36 >> 2] = ($3 & 112) == 0 ? 45 : ($3 & 6) == 0 ? 82 : 45;
HEAP32[$vararg_buffer + 40 >> 2] = (($3 & 65535) >>> 3 & 64 | 45) & 65535;
HEAP32[$vararg_buffer + 44 >> 2] = $3 & 1024 ? 114 : 45;
_fprintf($1, 35379, $vararg_buffer) | 0;
STACKTOP = sp;
return;
}
function __ZN12DynamicArrayIsLsn1EE15appendElementsXEiz($0, $1, $varargs) {
$0 = $0 | 0;
$1 = $1 | 0;
$varargs = $varargs | 0;
var $$012 = 0, $10 = 0, $15 = 0, $17 = 0, $2 = 0, $24 = 0, $25 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
HEAP32[$2 >> 2] = $varargs;
$3 = $0 + 12 | 0;
$5 = (HEAP32[$3 >> 2] | 0) + $1 | 0;
$6 = $0 + 8 | 0;
$7 = HEAP32[$6 >> 2] | 0;
if (($7 | 0) < ($5 | 0)) {
$10 = HEAP32[$0 + 4 >> 2] | 0;
if (($10 | 0) > ($5 | 0)) $15 = $10; else $15 = $5 + 1 + (($5 | 0) / 2 | 0) | 0;
__ZN12DynamicArrayIsLsn1EE6resizeEi($0, $15);
$17 = HEAP32[$6 >> 2] | 0;
} else $17 = $7;
if (($5 | 0) > ($17 | 0)) {
STACKTOP = sp;
return;
}
if (($1 | 0) > 0) {
$$012 = 0;
do {
$24 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$25 = HEAP32[$24 >> 2] | 0;
HEAP32[$2 >> 2] = $24 + 4;
HEAP16[(HEAP32[$0 >> 2] | 0) + ((HEAP32[$3 >> 2] | 0) + $$012 << 1) >> 1] = $25;
$$012 = $$012 + 1 | 0;
} while (($$012 | 0) != ($1 | 0));
}
HEAP32[$3 >> 2] = $5;
STACKTOP = sp;
return;
}
function __ZN7ASDdataC2EPKcb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $4 = 0, $6 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, dest = 0, sp = 0, stop = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
HEAP32[$0 >> 2] = -1;
dest = $0 + 4 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
if ($2) {
$4 = __Z11ReadXMLFilePKc($1) | 0;
if (!$4) {
HEAP32[$vararg_buffer >> 2] = $1;
__Z7eprintfPKcz(15607, $vararg_buffer);
$6 = ___cxa_allocate_exception(4) | 0;
HEAP32[$6 >> 2] = 11;
___cxa_throw($6 | 0, 232, 0);
}
__ZN7ASDdata16buildFromXMLCellEP7XMLCellPKc($0, $4, $1);
STACKTOP = sp;
return;
} else {
$7 = __Z13ReadXMLStringPc($1) | 0;
if (!$7) {
__Z7eprintfPKcz(17109, $vararg_buffer1);
$9 = ___cxa_allocate_exception(4) | 0;
HEAP32[$9 >> 2] = 11;
___cxa_throw($9 | 0, 232, 0);
}
__ZN7ASDdata16buildFromXMLCellEP7XMLCellPKc($0, $7, 47464);
STACKTOP = sp;
return;
}
}
function __ZN13DynamicStringC2Ei($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $14 = 0, $6 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
HEAP32[$0 + 4 >> 2] = 10;
HEAP32[$0 + 12 >> 2] = 0;
if (!$1) {
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
STACKTOP = sp;
return;
}
$6 = $0 + 8 | 0;
HEAP32[$6 >> 2] = $1;
$7 = _malloc($1) | 0;
HEAP32[$0 >> 2] = $7;
if (!$7) {
HEAP32[$vararg_buffer >> 2] = $1;
__Z7eprintfPKcz(20821, $vararg_buffer);
HEAP32[$6 >> 2] = 0;
$9 = ___cxa_allocate_exception(4) | 0;
HEAP32[$9 >> 2] = 1;
___cxa_throw($9 | 0, 32, 0);
}
if (($1 | 0) <= 0) {
STACKTOP = sp;
return;
}
HEAP8[$7 >> 0] = 0;
if (($1 | 0) == 1) {
STACKTOP = sp;
return;
}
HEAP8[$7 + 1 >> 0] = 0;
if (($1 | 0) == 2) {
STACKTOP = sp;
return;
}
HEAP8[$7 + 2 >> 0] = 0;
if (($1 | 0) == 3) {
STACKTOP = sp;
return;
} else $14 = 3;
do {
HEAP8[(HEAP32[$0 >> 2] | 0) + $14 >> 0] = 0;
$14 = $14 + 1 | 0;
} while (($14 | 0) != ($1 | 0));
STACKTOP = sp;
return;
}
function _fmt_u($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $26 = 0, $8 = 0, $9 = 0, $8$looptemp = 0;
if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
$$0914 = $2;
$8 = $0;
$9 = $1;
while (1) {
$10 = ___uremdi3($8 | 0, $9 | 0, 10, 0) | 0;
$$0914 = $$0914 + -1 | 0;
HEAP8[$$0914 >> 0] = $10 & 255 | 48;
$8$looptemp = $8;
$8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0;
if (!($9 >>> 0 > 9 | ($9 | 0) == 9 & $8$looptemp >>> 0 > 4294967295)) break; else $9 = tempRet0;
}
$$010$lcssa$off0 = $8;
$$09$lcssa = $$0914;
} else {
$$010$lcssa$off0 = $0;
$$09$lcssa = $2;
}
if (!$$010$lcssa$off0) $$1$lcssa = $$09$lcssa; else {
$$012 = $$010$lcssa$off0;
$$111 = $$09$lcssa;
while (1) {
$26 = $$111 + -1 | 0;
HEAP8[$26 >> 0] = ($$012 >>> 0) % 10 | 0 | 48;
if ($$012 >>> 0 < 10) {
$$1$lcssa = $26;
break;
} else {
$$012 = ($$012 >>> 0) / 10 | 0;
$$111 = $26;
}
}
}
return $$1$lcssa | 0;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0$i = 0, $14 = 0, $15 = 0, $2 = 0, $6 = 0, $8 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
if ((HEAP8[$1 + 11 >> 0] | 0) < 0) {
$6 = HEAP32[$1 >> 2] | 0;
$8 = HEAP32[$1 + 4 >> 2] | 0;
if ($8 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
if ($8 >>> 0 < 11) {
HEAP8[$0 + 11 >> 0] = $8;
$$0$i = $0;
} else {
$14 = $8 + 16 & -16;
$15 = __Znwj($14) | 0;
HEAP32[$0 >> 2] = $15;
HEAP32[$0 + 8 >> 2] = $14 | -2147483648;
HEAP32[$0 + 4 >> 2] = $8;
$$0$i = $15;
}
__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i, $6, $8) | 0;
HEAP8[$2 >> 0] = 0;
__ZNSt3__211char_traitsIcE6assignERcRKc($$0$i + $8 | 0, $2);
} else {
HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
}
STACKTOP = sp;
return;
}
function _initUpdatePosition($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$020$i = 0, $$1$i = 0, $$2$i = 0, $18 = 0, $5 = 0;
if (($1 | 0) == ($2 | 0)) return;
$5 = $3 + 4 | 0;
$$020$i = $1;
while (1) {
switch (HEAP8[5712 + (HEAPU8[$$020$i >> 0] | 0) >> 0] | 0) {
case 5:
{
$$2$i = $$020$i + 2 | 0;
break;
}
case 6:
{
$$2$i = $$020$i + 3 | 0;
break;
}
case 7:
{
$$2$i = $$020$i + 4 | 0;
break;
}
case 10:
{
HEAP32[$5 >> 2] = -1;
HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
$$2$i = $$020$i + 1 | 0;
break;
}
case 9:
{
HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
$18 = $$020$i + 1 | 0;
if (($18 | 0) == ($2 | 0)) $$1$i = $2; else $$1$i = (HEAP8[5712 + (HEAPU8[$18 >> 0] | 0) >> 0] | 0) == 10 ? $$020$i + 2 | 0 : $18;
HEAP32[$5 >> 2] = -1;
$$2$i = $$1$i;
break;
}
default:
$$2$i = $$020$i + 1 | 0;
}
HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1;
if (($$2$i | 0) == ($2 | 0)) break; else $$020$i = $$2$i;
}
return;
}
function __ZN15OneHDirMoveSpec15currentPositionER6Vectorf($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
var $12 = 0, $15 = 0, $16 = f0, $18 = f0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$3 = sp + 16 | 0;
$4 = sp;
$5 = $0 + 16 | 0;
__ZN6Vector7setFromERKS_($1, $5);
HEAPF32[$3 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 4 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 12 >> 2] = Math_fround(1.0);
__ZN10Quaternion15setFromVecAngleERK6Vectorfb($3, $0, Math_fround(Math_fround(HEAPF32[$0 + 12 >> 2]) * $2), 1);
__ZNK10Quaternion12rotateVectorER6Vector($3, $1);
__ZN6Vector11setSubtractERKS_($1, $5);
$12 = $0 + 40 | 0;
if (!(Math_fround(HEAPF32[$12 >> 2]) > Math_fround(0.0))) {
STACKTOP = sp;
return;
}
$15 = $0 + 28 | 0;
$16 = Math_fround(__ZNK6Vector10dotProductERKS_($1, $15));
$18 = Math_fround($16 * Math_fround(HEAPF32[$12 >> 2]));
__ZN6VectorC2ERKS_($4, $15);
__ZN6Vector8setScaleEf($4, $18);
__ZN6Vector6setAddERKS_($1, $4);
STACKTOP = sp;
return;
}
function _latin1_toUtf8($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $10 = 0, $13 = 0, $24 = 0, $27 = 0, $29 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $9 = 0, label = 0;
$5 = $4;
$6 = HEAP32[$1 >> 2] | 0;
if (($6 | 0) == ($2 | 0)) return; else $9 = $6;
while (1) {
$10 = HEAPU8[$9 >> 0] | 0;
$13 = HEAP32[$3 >> 2] | 0;
if (!($10 & 128)) {
if (($13 | 0) == ($4 | 0)) {
label = 8;
break;
}
HEAP32[$1 >> 2] = $9 + 1;
$32 = HEAP8[$9 >> 0] | 0;
$33 = HEAP32[$3 >> 2] | 0;
HEAP32[$3 >> 2] = $33 + 1;
HEAP8[$33 >> 0] = $32;
$29 = HEAP32[$1 >> 2] | 0;
} else {
if (($5 - $13 | 0) < 2) {
label = 8;
break;
}
HEAP32[$3 >> 2] = $13 + 1;
HEAP8[$13 >> 0] = $10 >>> 6 | 192;
$24 = HEAP32[$3 >> 2] | 0;
HEAP32[$3 >> 2] = $24 + 1;
HEAP8[$24 >> 0] = $10 & 63 | 128;
$27 = (HEAP32[$1 >> 2] | 0) + 1 | 0;
HEAP32[$1 >> 2] = $27;
$29 = $27;
}
if (($29 | 0) == ($2 | 0)) {
label = 8;
break;
} else $9 = $29;
}
if ((label | 0) == 8) return;
}
function __ZN17TargettedMovement17setFinalHandStuffERK12TwoHandStuffRK20ArmHandConstellation($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $10 = 0, $15 = 0, $17 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
__ZN7Gesture16installHandStuffERK12TwoHandStuff(HEAP32[$0 + 528 >> 2] | 0, $1);
$5 = $1 + 20 | 0;
$6 = $0 + 324 | 0;
HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
HEAP32[$6 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
HEAP32[$6 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
HEAP32[$6 + 12 >> 2] = HEAP32[$5 + 12 >> 2];
$7 = $1 + 64 | 0;
$8 = $0 + 436 | 0;
HEAP32[$8 >> 2] = HEAP32[$7 >> 2];
HEAP32[$8 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
HEAP32[$8 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
HEAP32[$8 + 12 >> 2] = HEAP32[$7 + 12 >> 2];
$10 = HEAP32[$1 + 36 >> 2] | 0;
if (!$10) $15 = 0; else $15 = HEAP32[$10 + 236 >> 2] | 0;
HEAP32[$0 + 340 >> 2] = $15;
$17 = HEAP32[$1 + 80 >> 2] | 0;
if (!$17) {
$22 = 0;
$21 = $0 + 452 | 0;
HEAP32[$21 >> 2] = $22;
return;
}
$22 = HEAP32[$17 + 236 >> 2] | 0;
$21 = $0 + 452 | 0;
HEAP32[$21 >> 2] = $22;
return;
}
function __ZN14RepeatMovementD2Ev($0) {
$0 = $0 | 0;
var $1 = 0, $10 = 0, $15 = 0, $2 = 0, $21 = 0, $7 = 0, $9 = 0, label = 0;
HEAP32[$0 >> 2] = 2656;
$1 = $0 + 696 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if (!$2) label = 4; else {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0, $2 | 0);
$7 = __THREW__;
__THREW__ = 0;
if (!($7 & 1)) {
HEAP32[$1 >> 2] = 0;
label = 4;
}
}
do if ((label | 0) == 4) {
$9 = $0 + 700 | 0;
$10 = HEAP32[$9 >> 2] | 0;
if ($10 | 0) {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$10 >> 2] | 0) + 4 >> 2] | 0, $10 | 0);
$15 = __THREW__;
__THREW__ = 0;
if ($15 & 1) break;
HEAP32[$9 >> 2] = 0;
}
HEAP32[$0 >> 2] = 1984;
HEAP32[$0 + 452 >> 2] = 0;
HEAP32[$0 + 340 >> 2] = 0;
HEAP32[$0 + 228 >> 2] = 0;
HEAP32[$0 + 116 >> 2] = 0;
return;
} while (0);
$21 = ___cxa_find_matching_catch_2() | 0;
HEAP32[$0 >> 2] = 1984;
HEAP32[$0 + 452 >> 2] = 0;
HEAP32[$0 + 340 >> 2] = 0;
HEAP32[$0 + 228 >> 2] = 0;
HEAP32[$0 + 116 >> 2] = 0;
___resumeException($21 | 0);
}
function __ZN13SplitMovementD2Ev($0) {
$0 = $0 | 0;
var $1 = 0, $10 = 0, $15 = 0, $2 = 0, $21 = 0, $7 = 0, $9 = 0, label = 0;
HEAP32[$0 >> 2] = 3164;
$1 = $0 + 528 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if (!$2) label = 4; else {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0, $2 | 0);
$7 = __THREW__;
__THREW__ = 0;
if (!($7 & 1)) {
HEAP32[$1 >> 2] = 0;
label = 4;
}
}
do if ((label | 0) == 4) {
$9 = $0 + 532 | 0;
$10 = HEAP32[$9 >> 2] | 0;
if ($10 | 0) {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$10 >> 2] | 0) + 4 >> 2] | 0, $10 | 0);
$15 = __THREW__;
__THREW__ = 0;
if ($15 & 1) break;
HEAP32[$9 >> 2] = 0;
}
HEAP32[$0 >> 2] = 1984;
HEAP32[$0 + 452 >> 2] = 0;
HEAP32[$0 + 340 >> 2] = 0;
HEAP32[$0 + 228 >> 2] = 0;
HEAP32[$0 + 116 >> 2] = 0;
return;
} while (0);
$21 = ___cxa_find_matching_catch_2() | 0;
HEAP32[$0 >> 2] = 1984;
HEAP32[$0 + 452 >> 2] = 0;
HEAP32[$0 + 340 >> 2] = 0;
HEAP32[$0 + 228 >> 2] = 0;
HEAP32[$0 + 116 >> 2] = 0;
___resumeException($21 | 0);
}
function __ZN18ControlledByScalarI6VectorE13set_referenceES0_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $11 = f0, $15 = f0, $17 = 0, $2 = f0, $20 = 0, $21 = 0, $26 = 0, $6 = f0;
$2 = Math_fround(HEAPF32[$1 >> 2]);
if ($2 == Math_fround(HEAPF32[$0 >> 2])) {
$6 = Math_fround(HEAPF32[$1 + 4 >> 2]);
if ($6 == Math_fround(HEAPF32[$0 + 4 >> 2])) {
$11 = Math_fround(HEAPF32[$1 + 8 >> 2]);
if ($11 == Math_fround(HEAPF32[$0 + 8 >> 2])) return;
}
}
$15 = Math_fround(__ZNK6Vector10distanceSqERKS_($1, $0));
$17 = $15 > Math_fround(HEAPF32[212]);
__ZN6Vector7setFromERKS_($0, $1);
if (!$17) {
__ZN6Vector7setFromERKS_($0 + 12 | 0, $1);
__ZN6Vector7setFromERKS_($0 + 24 | 0, $1);
return;
}
__ZN6Vector7setFromERKS_($0 + 24 | 0, $0 + 12 | 0);
$20 = $0 + 36 | 0;
$21 = HEAP32[$20 >> 2] | 0;
if (!$21) return;
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$21 >> 2] | 0) + 16 >> 2] & 63]($21, Math_fround(1.0));
$26 = HEAP32[$20 >> 2] | 0;
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$26 >> 2] | 0) + 28 >> 2] & 63]($26, Math_fround(0.0));
return;
}
function _normal_updatePosition($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$020 = 0, $$1 = 0, $$2 = 0, $19 = 0, $5 = 0, $6 = 0;
if (($1 | 0) == ($2 | 0)) return;
$5 = $0 + 72 | 0;
$6 = $3 + 4 | 0;
$$020 = $1;
while (1) {
switch (HEAP8[$5 + (HEAPU8[$$020 >> 0] | 0) >> 0] | 0) {
case 5:
{
$$2 = $$020 + 2 | 0;
break;
}
case 6:
{
$$2 = $$020 + 3 | 0;
break;
}
case 7:
{
$$2 = $$020 + 4 | 0;
break;
}
case 10:
{
HEAP32[$6 >> 2] = -1;
HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
$$2 = $$020 + 1 | 0;
break;
}
case 9:
{
HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
$19 = $$020 + 1 | 0;
if (($19 | 0) == ($2 | 0)) $$1 = $2; else $$1 = (HEAP8[$5 + (HEAPU8[$19 >> 0] | 0) >> 0] | 0) == 10 ? $$020 + 2 | 0 : $19;
HEAP32[$6 >> 2] = -1;
$$2 = $$1;
break;
}
default:
$$2 = $$020 + 1 | 0;
}
HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
if (($$2 | 0) == ($2 | 0)) break; else $$020 = $$2;
}
return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $14 = 0, $15 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp;
$4 = $0 + 11 | 0;
$5 = HEAP8[$4 >> 0] | 0;
$6 = $5 << 24 >> 24 < 0;
if ($6) {
$14 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
$15 = HEAP32[$0 + 4 >> 2] | 0;
} else {
$14 = 10;
$15 = $5 & 255;
}
if (($14 - $15 | 0) >>> 0 < $2 >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0, $14, $2 - $14 + $15 | 0, $15, $15, 0, $2, $1); else if ($2 | 0) {
if ($6) $20 = HEAP32[$0 >> 2] | 0; else $20 = $0;
__ZNSt3__211char_traitsIcE4copyEPcPKcj($20 + $15 | 0, $1, $2) | 0;
$21 = $15 + $2 | 0;
if ((HEAP8[$4 >> 0] | 0) < 0) HEAP32[$0 + 4 >> 2] = $21; else HEAP8[$4 >> 0] = $21;
HEAP8[$3 >> 0] = 0;
__ZNSt3__211char_traitsIcE6assignERcRKc($20 + $21 | 0, $3);
}
STACKTOP = sp;
return $0 | 0;
}
function __ZNK13SeqTimedMorph14fillMorphFrameEfPfb($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = $2 | 0;
$3 = $3 | 0;
var $$020 = 0, $10 = 0, $12 = 0, $17 = f0, $28 = 0, $4 = 0, $5 = 0, label = 0;
$4 = $0 + 24 | 0;
$5 = HEAP32[$4 >> 2] | 0;
if ((HEAP32[$5 + 12 >> 2] | 0) > 0) {
$$020 = 0;
$10 = $5;
} else return;
while (1) {
$12 = HEAP32[(HEAP32[$10 >> 2] | 0) + ($$020 << 2) >> 2] | 0;
if (Math_fround(HEAPF32[$12 + 4 >> 2]) >= $1) {
label = 8;
break;
}
$17 = Math_fround(HEAPF32[$12 + 16 >> 2]);
if ($17 < Math_fround(0.0)) {
label = 4;
break;
}
if (!($17 <= $1)) {
FUNCTION_TABLE_vifii[HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] & 3]($12, $1, $2, $3);
$28 = HEAP32[$4 >> 2] | 0;
} else $28 = $10;
$$020 = $$020 + 1 | 0;
if (($$020 | 0) >= (HEAP32[$28 + 12 >> 2] | 0)) {
label = 8;
break;
} else $10 = $28;
}
if ((label | 0) == 4) {
FUNCTION_TABLE_vifii[HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] & 3]($12, $1, $2, $3);
return;
} else if ((label | 0) == 8) return;
}
function __ZN19SHMScalarController7newTimeEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $$020 = 0, $10 = 0, $11 = f0, $16 = f0, $18 = f0, $24 = 0, $27 = f0;
HEAP32[16163] = (HEAP32[16163] | 0) + 1;
if ((HEAP32[$0 + 60 >> 2] | 0) == 1) {
HEAP32[$0 + 80 >> 2] = HEAP32[$0 + 76 >> 2];
return;
}
$10 = $0 + 68 | 0;
$11 = Math_fround(HEAPF32[$10 >> 2]);
do if ($11 == Math_fround(-1.0)) HEAP32[$0 + 80 >> 2] = HEAP32[$0 + 76 >> 2]; else {
$16 = Math_fround($1 - $11);
$18 = Math_fround(HEAPF32[$0 + 56 >> 2]);
if ($16 <= $18) {
__ZN19SHMScalarController11microUpdateEf($0, $16);
break;
}
$24 = ~~(+Math_fround($16 / $18) + .99);
if ($18 == Math_fround(0.0) | ($24 | 0) < 2) {
__ZN19SHMScalarController11microUpdateEf($0, $16);
break;
}
$27 = Math_fround($16 / Math_fround($24 | 0));
if (($24 | 0) > 0) {
$$020 = 0;
do {
__ZN19SHMScalarController11microUpdateEf($0, $27);
$$020 = $$020 + 1 | 0;
} while (($$020 | 0) != ($24 | 0));
}
} while (0);
HEAPF32[$10 >> 2] = $1;
return;
}
function __Z14SetVersionInfoPKcS0_S0_S0_S0_($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $11 = 0, $12 = 0, $16 = 0, $17 = 0, $18 = 0, $5 = 0, $7 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
HEAP32[16085] = $0;
HEAP32[16086] = $1;
HEAP32[16087] = $2;
HEAP32[16088] = $3;
HEAP32[16089] = $4;
$5 = _strlen($0) | 0;
$7 = (_strlen($1) | 0) + $5 | 0;
$11 = ($7 + (_strlen($2) | 0) << 16) + 327680 >> 16;
$12 = _malloc($11) | 0;
HEAP32[16090] = $12;
HEAP32[$vararg_buffer >> 2] = $0;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
HEAP32[$vararg_buffer + 8 >> 2] = $2;
_snprintf($12, $11, 9444, $vararg_buffer) | 0;
HEAP8[(HEAP32[16090] | 0) + ($11 + -1) >> 0] = 0;
$16 = _malloc(40) | 0;
HEAP32[16091] = $16;
$17 = _time(0) | 0;
HEAP32[$vararg_buffer >> 2] = $17;
$18 = _localtime($vararg_buffer | 0) | 0;
_strftime(HEAP32[16091] | 0, 40, 9455, $18 | 0) | 0;
HEAP8[(HEAP32[16091] | 0) + 39 >> 0] = 0;
STACKTOP = sp;
return;
}
function _attlist8($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0$ph = 0, $5 = 0, $7 = 0, $error$sink = 0, label = 0;
switch ($1 | 0) {
case 20:
{
label = 2;
break;
}
case 27:
{
$$0$ph = 37;
$error$sink = 18;
break;
}
case 15:
{
$$0 = 33;
return $$0 | 0;
}
default:
label = 5;
}
if ((label | 0) == 2) {
$5 = $4 + 24 | 0;
$7 = $4 + 64 | 0;
if (!(FUNCTION_TABLE_iiiii[HEAP32[$5 >> 2] & 63]($4, $2 + (HEAP32[$7 >> 2] | 0) | 0, $3, 59918) | 0)) if (!(FUNCTION_TABLE_iiiii[HEAP32[$5 >> 2] & 63]($4, $2 + (HEAP32[$7 >> 2] | 0) | 0, $3, 59926) | 0)) if (!(FUNCTION_TABLE_iiiii[HEAP32[$5 >> 2] & 63]($4, $2 + (HEAP32[$7 >> 2] | 0) | 0, $3, 59935) | 0)) label = 5; else {
$$0$ph = 33;
$error$sink = 37;
} else {
$$0$ph = 36;
$error$sink = 18;
} else {
$$0$ph = 35;
$error$sink = 18;
}
}
if ((label | 0) == 5) {
$$0$ph = -1;
$error$sink = 4;
}
HEAP32[$0 >> 2] = $error$sink;
$$0 = $$0$ph;
return $$0 | 0;
}
function __ZN13SeqTimedMorphD2Ev($0) {
$0 = $0 | 0;
var $$06$i = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $25 = 0, $4 = 0, $6 = 0, $7 = 0;
HEAP32[$0 >> 2] = 3324;
$1 = $0 + 24 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if (!$2) return;
$4 = HEAP32[$2 >> 2] | 0;
if (!$4) $23 = $2; else {
$6 = $2 + 12 | 0;
$7 = HEAP32[$6 >> 2] | 0;
if (($7 | 0) > 0) {
$$06$i = 0;
$10 = $4;
$25 = $7;
while (1) {
$11 = HEAP32[$10 + ($$06$i << 2) >> 2] | 0;
if (!$11) $20 = $25; else {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$11 >> 2] | 0) + 4 >> 2] & 255]($11);
HEAP32[(HEAP32[$2 >> 2] | 0) + ($$06$i << 2) >> 2] = 0;
$20 = HEAP32[$6 >> 2] | 0;
}
$18 = $$06$i + 1 | 0;
if (($18 | 0) >= ($20 | 0)) break;
$$06$i = $18;
$10 = HEAP32[$2 >> 2] | 0;
$25 = $20;
}
$$pre = HEAP32[$1 >> 2] | 0;
if (!$$pre) return; else $23 = $$pre;
} else $23 = $2;
}
$22 = HEAP32[$23 >> 2] | 0;
if ($22 | 0) _free($22);
__ZdlPv($23);
HEAP32[$1 >> 2] = 0;
return;
}
function __ZN13ParTimedMorphD2Ev($0) {
$0 = $0 | 0;
var $$06$i = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $25 = 0, $4 = 0, $6 = 0, $7 = 0;
HEAP32[$0 >> 2] = 3260;
$1 = $0 + 24 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if (!$2) return;
$4 = HEAP32[$2 >> 2] | 0;
if (!$4) $23 = $2; else {
$6 = $2 + 12 | 0;
$7 = HEAP32[$6 >> 2] | 0;
if (($7 | 0) > 0) {
$$06$i = 0;
$10 = $4;
$25 = $7;
while (1) {
$11 = HEAP32[$10 + ($$06$i << 2) >> 2] | 0;
if (!$11) $20 = $25; else {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$11 >> 2] | 0) + 4 >> 2] & 255]($11);
HEAP32[(HEAP32[$2 >> 2] | 0) + ($$06$i << 2) >> 2] = 0;
$20 = HEAP32[$6 >> 2] | 0;
}
$18 = $$06$i + 1 | 0;
if (($18 | 0) >= ($20 | 0)) break;
$$06$i = $18;
$10 = HEAP32[$2 >> 2] | 0;
$25 = $20;
}
$$pre = HEAP32[$1 >> 2] | 0;
if (!$$pre) return; else $23 = $$pre;
} else $23 = $2;
}
$22 = HEAP32[$23 >> 2] | 0;
if ($22 | 0) _free($22);
__ZdlPv($23);
HEAP32[$1 >> 2] = 0;
return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($0, $1, $2, $3, $4, $5, $6) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
$6 = $6 | 0;
var $$sroa$speculated = 0, $14 = 0, $15 = 0, $20 = 0, $21 = 0, $23 = 0, $25 = 0;
if ((-17 - $1 | 0) >>> 0 < $2 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
if ((HEAP8[$0 + 11 >> 0] | 0) < 0) $23 = HEAP32[$0 >> 2] | 0; else $23 = $0;
if ($1 >>> 0 < 2147483623) {
$14 = $2 + $1 | 0;
$15 = $1 << 1;
$$sroa$speculated = $14 >>> 0 < $15 >>> 0 ? $15 : $14;
$20 = $$sroa$speculated >>> 0 < 11 ? 11 : $$sroa$speculated + 16 & -16;
} else $20 = -17;
$21 = __Znwj($20) | 0;
if ($4 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcj($21, $23, $4) | 0;
$25 = $3 - $5 - $4 | 0;
if ($25 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcj($21 + $4 + $6 | 0, $23 + $4 + $5 | 0, $25) | 0;
if (($1 | 0) != 10) __ZdlPv($23);
HEAP32[$0 >> 2] = $21;
HEAP32[$0 + 8 >> 2] = $20 | -2147483648;
return;
}
function __ZN7SegmentD2Ev($0) {
$0 = $0 | 0;
var $$0 = 0, $$03 = 0, $1 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0;
$1 = $0 + 16 | 0;
$2 = HEAP32[$1 >> 2] | 0;
do if ($2 | 0) {
__THREW__ = 0;
invoke_vi(109, $2 | 0);
$4 = __THREW__;
__THREW__ = 0;
if (!($4 & 1)) {
__ZdlPv($2);
HEAP32[$1 >> 2] = 0;
break;
}
$6 = ___cxa_find_matching_catch_2() | 0;
$7 = tempRet0;
__ZdlPv($2);
$$0 = $7;
$$03 = $6;
___resumeException($$03 | 0);
} while (0);
$8 = HEAP32[$0 >> 2] | 0;
if ($8 | 0) {
_free($8);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 20 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = -1;
$14 = (HEAP32[16167] | 0) + -1 | 0;
HEAP32[16167] = $14;
if (!(($14 | 0) == 0 & 0 != 0)) return;
__THREW__ = 0;
invoke_vi(93, 0);
$17 = __THREW__;
__THREW__ = 0;
if ($17 & 1) {
$19 = ___cxa_find_matching_catch_2() | 0;
$20 = tempRet0;
__ZdlPv(0);
$$0 = $20;
$$03 = $19;
___resumeException($$03 | 0);
} else {
__ZdlPv(0);
return;
}
}
function _fputc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0, $13 = 0, $14 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $33 = 0, $7 = 0, $8 = 0, label = 0;
if ((HEAP32[$1 + 76 >> 2] | 0) < 0) label = 3; else if (!(___lockfile($1) | 0)) label = 3; else {
$20 = $0 & 255;
$21 = $0 & 255;
if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) label = 10; else {
$26 = $1 + 20 | 0;
$27 = HEAP32[$26 >> 2] | 0;
if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
HEAP32[$26 >> 2] = $27 + 1;
HEAP8[$27 >> 0] = $20;
$33 = $21;
} else label = 10;
}
if ((label | 0) == 10) $33 = ___overflow($1, $0) | 0;
___unlockfile($1);
$$0 = $33;
}
do if ((label | 0) == 3) {
$7 = $0 & 255;
$8 = $0 & 255;
if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
$13 = $1 + 20 | 0;
$14 = HEAP32[$13 >> 2] | 0;
if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
HEAP32[$13 >> 2] = $14 + 1;
HEAP8[$14 >> 0] = $7;
$$0 = $8;
break;
}
}
$$0 = ___overflow($1, $0) | 0;
} while (0);
return $$0 | 0;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $11 = 0, $13 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp;
$4 = $0 + 11 | 0;
$5 = HEAP8[$4 >> 0] | 0;
$6 = $5 << 24 >> 24 < 0;
if ($6) $11 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0; else $11 = 10;
do if ($11 >>> 0 < $2 >>> 0) {
if ($6) $23 = HEAP32[$0 + 4 >> 2] | 0; else $23 = $5 & 255;
__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0, $11, $2 - $11 | 0, $23, 0, $23, $2, $1);
} else {
if ($6) $13 = HEAP32[$0 >> 2] | 0; else $13 = $0;
__ZNSt3__211char_traitsIcE4moveEPcPKcj($13, $1, $2) | 0;
HEAP8[$3 >> 0] = 0;
__ZNSt3__211char_traitsIcE6assignERcRKc($13 + $2 | 0, $3);
if ((HEAP8[$4 >> 0] | 0) < 0) {
HEAP32[$0 + 4 >> 2] = $2;
break;
} else {
HEAP8[$4 >> 0] = $2;
break;
}
} while (0);
STACKTOP = sp;
return $0 | 0;
}
function __ZN14RepeatMovement20propagateChangeFlagsE18PostureChangeFlagsS0_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $12 = 0, $16 = 0, $18 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp + 10 | 0;
$4 = sp + 8 | 0;
$5 = sp + 6 | 0;
$6 = sp + 4 | 0;
$7 = sp + 2 | 0;
$8 = sp;
HEAP16[$3 >> 1] = HEAPU8[$1 >> 0] | HEAPU8[$1 + 1 >> 0] << 8;
HEAP16[$4 >> 1] = HEAPU8[$2 >> 0] | HEAPU8[$2 + 1 >> 0] << 8;
__ZN13BasicMovement20propagateChangeFlagsE18PostureChangeFlagsS0_($0, $3, $4);
$12 = HEAP32[$0 + 696 >> 2] | 0;
if ($12 | 0) {
$16 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0;
HEAP16[$5 >> 1] = 0;
HEAP16[$6 >> 1] = 0;
FUNCTION_TABLE_viii[$16 & 127]($12, $5, $6);
}
$18 = HEAP32[$0 + 700 >> 2] | 0;
if (!$18) {
STACKTOP = sp;
return;
}
$22 = HEAP32[(HEAP32[$18 >> 2] | 0) + 28 >> 2] | 0;
HEAP16[$7 >> 1] = 0;
HEAP16[$8 >> 1] = 0;
FUNCTION_TABLE_viii[$22 & 127]($18, $7, $8);
STACKTOP = sp;
return;
}
function __ZN7XMLCell13attrib_stringEPKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0, $$012$i$i$i = 0, $$01215$i$i$i = 0, $$01216$i$i$i = 0, $$sink$i$i$i = 0, $3 = 0, $8 = 0, $9 = 0, label = 0;
$3 = HEAP32[$0 + 4 >> 2] | 0;
if (($1 | 0) == 0 | ($3 | 0) == 0) {
$$0 = 0;
return $$0 | 0;
}
$8 = __ZN6KeyOpsIPKcE12hashFunctionES1_i($1, HEAP32[$3 + 4 >> 2] | 0) | 0;
$9 = HEAP32[$3 >> 2] | 0;
L4 : do if ((HEAP16[$9 + ($8 << 3) + 4 >> 1] | 0) > 0) {
$$01215$i$i$i = HEAP32[$9 + ($8 << 3) >> 2] | 0;
if (!$$01215$i$i$i) label = 7; else {
$$01216$i$i$i = $$01215$i$i$i;
while (1) {
if (__ZN6KeyOpsIPKcE5eqkeyES1_S1_($1, HEAP32[$$01216$i$i$i >> 2] | 0) | 0) break;
$$012$i$i$i = HEAP32[$$01216$i$i$i + 8 >> 2] | 0;
if (!$$012$i$i$i) {
label = 7;
break L4;
} else $$01216$i$i$i = $$012$i$i$i;
}
$$sink$i$i$i = $$01216$i$i$i + 4 | 0;
}
} else label = 7; while (0);
if ((label | 0) == 7) $$sink$i$i$i = $3 + 20 | 0;
$$0 = HEAP32[$$sink$i$i$i >> 2] | 0;
return $$0 | 0;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $10 = 0, $11 = 0, $21 = 0, $22 = 0, $28 = 0, $30 = 0;
HEAP8[$1 + 53 >> 0] = 1;
do if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) {
HEAP8[$1 + 52 >> 0] = 1;
$10 = $1 + 16 | 0;
$11 = HEAP32[$10 >> 2] | 0;
if (!$11) {
HEAP32[$10 >> 2] = $2;
HEAP32[$1 + 24 >> 2] = $4;
HEAP32[$1 + 36 >> 2] = 1;
if (!(($4 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0)) break;
HEAP8[$1 + 54 >> 0] = 1;
break;
}
if (($11 | 0) != ($2 | 0)) {
$30 = $1 + 36 | 0;
HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1;
HEAP8[$1 + 54 >> 0] = 1;
break;
}
$21 = $1 + 24 | 0;
$22 = HEAP32[$21 >> 2] | 0;
if (($22 | 0) == 2) {
HEAP32[$21 >> 2] = $4;
$28 = $4;
} else $28 = $22;
if (($28 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0) HEAP8[$1 + 54 >> 0] = 1;
} while (0);
return;
}
function __ZN10Controller6updateEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $$020 = 0, $10 = 0, $11 = f0, $16 = f0, $18 = f0, $24 = 0, $27 = f0;
HEAP32[16163] = (HEAP32[16163] | 0) + 1;
if ((HEAP32[$0 + 44 >> 2] | 0) == 1) {
HEAP32[$0 + 68 >> 2] = HEAP32[$0 + 64 >> 2];
return;
}
$10 = $0 + 52 | 0;
$11 = Math_fround(HEAPF32[$10 >> 2]);
do if ($11 == Math_fround(-1.0)) HEAP32[$0 + 68 >> 2] = HEAP32[$0 + 64 >> 2]; else {
$16 = Math_fround($1 - $11);
$18 = Math_fround(HEAPF32[$0 + 40 >> 2]);
if ($16 <= $18) {
__ZN10Controller11microUpdateEf($0, $16);
break;
}
$24 = ~~(+Math_fround($16 / $18) + .99);
if ($18 == Math_fround(0.0) | ($24 | 0) < 2) {
__ZN10Controller11microUpdateEf($0, $16);
break;
}
$27 = Math_fround($16 / Math_fround($24 | 0));
if (($24 | 0) > 0) {
$$020 = 0;
do {
__ZN10Controller11microUpdateEf($0, $27);
$$020 = $$020 + 1 | 0;
} while (($$020 | 0) != ($24 | 0));
}
} while (0);
HEAPF32[$10 >> 2] = $1;
return;
}
function __ZN13GestureParser13readXMLStringEPKcR10ParserDataPP7Gesture($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $22 = 0, $23 = 0, $3 = 0, $5 = 0, label = 0;
$3 = __Z13MakeXMLParserv() | 0;
__ZN10XMLWrapper11SetElementsEP7HashAnyIPKciE($3, HEAP32[17756] | 0);
__ZN10XMLWrapper10SetHandlerEPFvPvP7XMLCellE($3, 146);
$5 = __Znwj(20) | 0;
HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
HEAP32[$5 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$5 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[$5 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
HEAP32[$5 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
__ZN10XMLWrapper11SetUserDataEPv($3, $5);
$22 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] & 63]($3, $0) | 0;
$23 = __ZN10XMLWrapper11GetUserDataEv($3) | 0;
if (!$2) {
if ($23 | 0) label = 4;
} else {
HEAP32[$2 >> 2] = HEAP32[$23 >> 2];
label = 4;
}
if ((label | 0) == 4) __ZdlPv($23);
if (!$3) return $22 | 0;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] & 255]($3);
return $22 | 0;
}
function __ZN10ControllerC2E16ControllerParams($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $14 = 0, dest = 0, stop = 0;
HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[$0 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
HEAP8[$0 + 16 >> 0] = 0;
HEAPF32[$0 + 20 >> 2] = Math_fround(4.0);
HEAPF32[$0 + 24 >> 2] = Math_fround(15.0e3);
HEAPF32[$0 + 28 >> 2] = Math_fround(15.0);
HEAPF32[$0 + 32 >> 2] = Math_fround(2.0e4);
HEAPF32[$0 + 36 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 40 >> 2] = Math_fround(.0199999996);
HEAP32[$0 + 44 >> 2] = 3;
HEAPF32[$0 + 48 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 52 >> 2] = Math_fround(-1.0);
HEAPF32[$0 + 56 >> 2] = Math_fround(-1.0);
$14 = $0 + 96 | 0;
dest = $0 + 60 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAPF32[$14 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 100 >> 2] = Math_fround(1.0);
return;
}
function __Z9SetDigitsRsPKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$01931$i = 0, $$02230$i = 0, $$4$i = 0, $12 = 0, $3 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$3 = HEAP8[$1 >> 0] | 0;
do if (!($3 << 24 >> 24)) $$4$i = 0; else {
$$01931$i = $1;
$$02230$i = 0;
$6 = $3;
while (1) {
if (($6 + -49 & 255) >= 5) {
label = 5;
break;
}
$$02230$i = 1 << (($6 << 24 >> 24 << 16) + -3211264 >> 16) | $$02230$i & 65535;
$12 = $$01931$i + 1 | 0;
$6 = HEAP8[$12 >> 0] | 0;
if (!($6 << 24 >> 24)) {
label = 6;
break;
} else $$01931$i = $12;
}
if ((label | 0) == 5) {
HEAP32[$vararg_buffer >> 2] = $$01931$i;
__Z7eprintfPKcz(24993, $vararg_buffer);
$$4$i = 0;
break;
} else if ((label | 0) == 6) {
$$4$i = $$02230$i & 65535;
break;
}
} while (0);
HEAP16[$0 >> 1] = $$4$i;
STACKTOP = sp;
return;
}
function __ZNKSt3__219__iostream_category7messageEi($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0$i$i = 0, $12 = 0, $13 = 0, $3 = 0, $6 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp;
if (($2 | 0) != 1 & ($2 | 0) < 257) __ZNKSt3__212__do_message7messageEi($0, $1, $2); else {
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
$6 = __ZNSt3__211char_traitsIcE6lengthEPKc(63242) | 0;
if ($6 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
if ($6 >>> 0 < 11) {
HEAP8[$0 + 11 >> 0] = $6;
$$0$i$i = $0;
} else {
$12 = $6 + 16 & -16;
$13 = __Znwj($12) | 0;
HEAP32[$0 >> 2] = $13;
HEAP32[$0 + 8 >> 2] = $12 | -2147483648;
HEAP32[$0 + 4 >> 2] = $6;
$$0$i$i = $13;
}
__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i$i, 63242, $6) | 0;
HEAP8[$3 >> 0] = 0;
__ZNSt3__211char_traitsIcE6assignERcRKc($$0$i$i + $6 | 0, $3);
}
STACKTOP = sp;
return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $13 = 0, $19 = 0;
do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); else if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
$13 = $1 + 20 | 0;
if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
HEAP32[$1 + 32 >> 2] = $3;
HEAP32[$13 >> 2] = $2;
$19 = $1 + 40 | 0;
HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1;
if ((HEAP32[$1 + 36 >> 2] | 0) == 1) if ((HEAP32[$1 + 24 >> 2] | 0) == 2) HEAP8[$1 + 54 >> 0] = 1;
HEAP32[$1 + 44 >> 2] = 4;
break;
}
}
if (($3 | 0) == 1) HEAP32[$1 + 32 >> 2] = 1;
} while (0);
return;
}
function __Z10MakeDigitsPKc($0) {
$0 = $0 | 0;
var $$01931 = 0, $$02230 = 0, $$4 = 0, $11 = 0, $2 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$0) {
$$4 = 0;
STACKTOP = sp;
return $$4 | 0;
}
$2 = HEAP8[$0 >> 0] | 0;
if (!($2 << 24 >> 24)) {
$$4 = 0;
STACKTOP = sp;
return $$4 | 0;
} else {
$$01931 = $0;
$$02230 = 0;
$5 = $2;
}
while (1) {
if (($5 + -49 & 255) >= 5) {
label = 5;
break;
}
$$02230 = 1 << (($5 << 24 >> 24 << 16) + -3211264 >> 16) | $$02230 & 65535;
$11 = $$01931 + 1 | 0;
$5 = HEAP8[$11 >> 0] | 0;
if (!($5 << 24 >> 24)) {
label = 6;
break;
} else $$01931 = $11;
}
if ((label | 0) == 5) {
HEAP32[$vararg_buffer >> 2] = $$01931;
__Z7eprintfPKcz(24993, $vararg_buffer);
$$4 = 0;
STACKTOP = sp;
return $$4 | 0;
} else if ((label | 0) == 6) {
$$4 = $$02230 & 65535;
STACKTOP = sp;
return $$4 | 0;
}
return 0;
}
function __ZNK7Gesture12CloneGestureEs($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0$i = 0, $11 = 0, $15 = 0, $22 = 0, $3 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$3 = HEAP32[$0 + 8 >> 2] | 0;
if (!$3) $$0$i = 0; else {
$7 = ((_strlen($3) | 0) << 16) + 851968 >> 16;
$8 = _malloc($7) | 0;
HEAP32[$vararg_buffer >> 2] = $3;
HEAP32[$vararg_buffer + 4 >> 2] = $1 << 16 >> 16;
_snprintf($8, $7, 28882, $vararg_buffer) | 0;
$$0$i = $8;
}
$9 = __Znwj(52) | 0;
$11 = $0 + 13 | 0;
__THREW__ = 0;
invoke_viiii(7, $9 | 0, $$0$i | 0, HEAP32[$0 >> 2] | 0, (HEAP8[$11 >> 0] & 64) != 0 | 0);
$15 = __THREW__;
__THREW__ = 0;
if ($15 & 1) {
$22 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($9);
___resumeException($22 | 0);
} else {
HEAP8[$9 + 13 >> 0] = HEAP8[$11 >> 0] | 0;
HEAP8[$9 + 14 >> 0] = HEAP8[$0 + 14 >> 0] | 0;
STACKTOP = sp;
return $9 | 0;
}
return 0;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0 = 0, $$2 = 0, $3 = 0, $6 = 0, dest = 0, sp = 0, stop = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$3 = sp;
if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0) $$2 = 1; else if (!$1) $$2 = 0; else {
$6 = ___dynamic_cast($1, 608, 592, 0) | 0;
if (!$6) $$2 = 0; else {
dest = $3 + 4 | 0;
stop = dest + 52 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[$3 >> 2] = $6;
HEAP32[$3 + 8 >> 2] = $0;
HEAP32[$3 + 12 >> 2] = -1;
HEAP32[$3 + 48 >> 2] = 1;
FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] & 15]($6, $3, HEAP32[$2 >> 2] | 0, 1);
if ((HEAP32[$3 + 24 >> 2] | 0) == 1) {
HEAP32[$2 >> 2] = HEAP32[$3 + 16 >> 2];
$$0 = 1;
} else $$0 = 0;
$$2 = $$0;
}
}
STACKTOP = sp;
return $$2 | 0;
}
function __Z11checkPosNumPKcPcPf($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$1 = 0, $3 = 0, $6 = 0, $7 = f0, $storemerge11 = f0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
$3 = sp + 24 | 0;
if (!$1) {
HEAP32[$vararg_buffer >> 2] = $0;
__Z7eprintfPKcz(9303, $vararg_buffer);
$$1 = 0;
$storemerge11 = Math_fround(0.0);
} else {
HEAP32[$vararg_buffer1 >> 2] = $3;
$6 = (_sscanf($1, 9358, $vararg_buffer1) | 0) == 1;
$7 = Math_fround(HEAPF32[$3 >> 2]);
if ($6 & $7 >= Math_fround(0.0)) {
$$1 = 1;
$storemerge11 = $7;
} else {
HEAP32[$vararg_buffer4 >> 2] = $0;
HEAP32[$vararg_buffer4 + 4 >> 2] = $1;
__Z7eprintfPKcz(9361, $vararg_buffer4);
$$1 = 0;
$storemerge11 = Math_fround(0.0);
}
}
HEAPF32[$2 >> 2] = $storemerge11;
STACKTOP = sp;
return $$1 | 0;
}
function __ZNK10SiteIDPair17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $6 = 0, $7 = 0;
$2 = $0 + 4 | 0;
$6 = ((HEAP32[16607] ^ HEAP32[$2 >> 2]) & 16777215 | 0) == 0;
__ZNK6SiteID17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($0, $1, 0);
if ($6) return;
__ZNK6SiteID17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($2, $1, 1);
$7 = $0 + 8 | 0;
if (!(Math_fround(HEAPF32[$7 >> 2]) != Math_fround(.5))) return;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, (HEAP16[36078] | 0) + 1 | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 24985, 7) | 0;
__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEf($1, Math_fround(HEAPF32[$7 >> 2])) | 0;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 34937, 2) | 0;
return;
}
function __ZN19SHMScalarControllerC2Ev($0) {
$0 = $0 | 0;
var dest = 0, stop = 0;
HEAPF32[$0 + 4 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 8 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 12 >> 2] = Math_fround(1.0);
HEAP32[$0 >> 2] = 860;
HEAPF32[$0 + 16 >> 2] = Math_fround(10.0);
HEAPF32[$0 + 20 >> 2] = Math_fround(.0500000007);
HEAPF32[$0 + 24 >> 2] = Math_fround(7.0);
HEAPF32[$0 + 28 >> 2] = Math_fround(0.0);
HEAP8[$0 + 32 >> 0] = 0;
HEAPF32[$0 + 36 >> 2] = Math_fround(4.0);
HEAPF32[$0 + 40 >> 2] = Math_fround(15.0e3);
HEAPF32[$0 + 44 >> 2] = Math_fround(15.0);
HEAPF32[$0 + 48 >> 2] = Math_fround(2.0e4);
HEAPF32[$0 + 52 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 56 >> 2] = Math_fround(.0199999996);
HEAP32[$0 + 60 >> 2] = 3;
HEAPF32[$0 + 64 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 68 >> 2] = Math_fround(-1.0);
dest = $0 + 72 | 0;
stop = dest + 36 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
return;
}
function __ZN13BasicMovement17setFinalHandStuffERK12TwoHandStuffRK20ArmHandConstellation($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $13 = 0, $15 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0;
$3 = $1 + 20 | 0;
$4 = $0 + 324 | 0;
HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
HEAP32[$4 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
HEAP32[$4 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
HEAP32[$4 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
$5 = $1 + 64 | 0;
$6 = $0 + 436 | 0;
HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
HEAP32[$6 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
HEAP32[$6 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
HEAP32[$6 + 12 >> 2] = HEAP32[$5 + 12 >> 2];
$8 = HEAP32[$1 + 36 >> 2] | 0;
if (!$8) $13 = 0; else $13 = HEAP32[$8 + 236 >> 2] | 0;
HEAP32[$0 + 340 >> 2] = $13;
$15 = HEAP32[$1 + 80 >> 2] | 0;
if (!$15) {
$20 = 0;
$19 = $0 + 452 | 0;
HEAP32[$19 >> 2] = $20;
return;
}
$20 = HEAP32[$15 + 236 >> 2] | 0;
$19 = $0 + 452 | 0;
HEAP32[$19 >> 2] = $20;
return;
}
function __Z14ReportXMLError13XMLResultCodePKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer7 = sp + 24 | 0;
$vararg_buffer4 = sp + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
switch ($0 | 0) {
case 1:
{
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer >> 2] = $1;
__Z7eprintfPKcz(53996, $vararg_buffer);
STACKTOP = sp;
return;
}
case 2:
{
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer1 >> 2] = $1;
__Z7eprintfPKcz(54023, $vararg_buffer1);
STACKTOP = sp;
return;
}
case 3:
{
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer4 >> 2] = $1;
__Z7eprintfPKcz(54064, $vararg_buffer4);
STACKTOP = sp;
return;
}
default:
{
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer7 >> 2] = $1;
__Z7eprintfPKcz(54105, $vararg_buffer7);
STACKTOP = sp;
return;
}
}
}
function __ZN10Quaternion9normaliseEv($0) {
$0 = $0 | 0;
var $1 = f0, $10 = f0, $11 = 0, $12 = f0, $15 = f0, $17 = f0, $18 = f0, $19 = f0, $2 = f0, $20 = f0, $3 = 0, $4 = f0, $6 = f0, $7 = 0, $8 = f0;
$1 = Math_fround(HEAPF32[$0 >> 2]);
$2 = Math_fround($1 * $1);
$3 = $0 + 4 | 0;
$4 = Math_fround(HEAPF32[$3 >> 2]);
$6 = Math_fround($2 + Math_fround($4 * $4));
$7 = $0 + 8 | 0;
$8 = Math_fround(HEAPF32[$7 >> 2]);
$10 = Math_fround($6 + Math_fround($8 * $8));
$11 = $0 + 12 | 0;
$12 = Math_fround(HEAPF32[$11 >> 2]);
$15 = Math_fround(Math_sqrt(Math_fround($10 + Math_fround($12 * $12))));
if (!($15 != Math_fround(0.0))) {
__ZNK10Quaternion14checkValidQuatEv($0);
return;
}
$17 = Math_fround($1 / $15);
HEAPF32[$0 >> 2] = $17;
$18 = Math_fround($4 / $15);
HEAPF32[$3 >> 2] = $18;
$19 = Math_fround($8 / $15);
HEAPF32[$7 >> 2] = $19;
$20 = Math_fround($12 / $15);
HEAPF32[$11 >> 2] = $20;
__ZNK10Quaternion14checkValidQuatEv($0);
return;
}
function _strlen($0) {
$0 = $0 | 0;
var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$sink = 0, $1 = 0, $10 = 0, $19 = 0, $23 = 0, $6 = 0, label = 0;
$1 = $0;
L1 : do if (!($1 & 3)) {
$$015$lcssa = $0;
label = 4;
} else {
$$01519 = $0;
$23 = $1;
while (1) {
if (!(HEAP8[$$01519 >> 0] | 0)) {
$$sink = $23;
break L1;
}
$6 = $$01519 + 1 | 0;
$23 = $6;
if (!($23 & 3)) {
$$015$lcssa = $6;
label = 4;
break;
} else $$01519 = $6;
}
} while (0);
if ((label | 0) == 4) {
$$0 = $$015$lcssa;
while (1) {
$10 = HEAP32[$$0 >> 2] | 0;
if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) $$0 = $$0 + 4 | 0; else break;
}
if (!(($10 & 255) << 24 >> 24)) $$1$lcssa = $$0; else {
$$pn = $$0;
while (1) {
$19 = $$pn + 1 | 0;
if (!(HEAP8[$19 >> 0] | 0)) {
$$1$lcssa = $19;
break;
} else $$pn = $19;
}
}
$$sink = $$1$lcssa;
}
return $$sink - $1 | 0;
}
function __ZN13GestureParser11readXMLFileEPKcR10ParserDataPP7Gesture($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $19 = 0, $20 = 0, $3 = 0, $5 = 0, label = 0;
$3 = __Z13MakeXMLParserv() | 0;
__ZN10XMLWrapper11SetElementsEP7HashAnyIPKciE($3, HEAP32[17756] | 0);
__ZN10XMLWrapper10SetHandlerEPFvPvP7XMLCellE($3, 146);
$5 = __Znwj(20) | 0;
HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
HEAP32[$5 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$5 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[$5 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
HEAP32[$5 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
__ZN10XMLWrapper11SetUserDataEPv($3, $5);
$19 = __ZN10XMLWrapper9ParseFileEPKc($3, $0) | 0;
$20 = __ZN10XMLWrapper11GetUserDataEv($3) | 0;
if (!$2) {
if ($20 | 0) label = 4;
} else {
HEAP32[$2 >> 2] = HEAP32[$20 >> 2];
label = 4;
}
if ((label | 0) == 4) __ZdlPv($20);
if (!$3) return $19 | 0;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] & 255]($3);
return $19 | 0;
}
function __ZNSt3__28ios_base5clearEj($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$index = 0, $$index2 = 0, $$sink = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
$$sink = (HEAP32[$0 + 24 >> 2] | 0) == 0 | $1;
HEAP32[$0 + 16 >> 2] = $$sink;
if (!($$sink & HEAP32[$0 + 20 >> 2])) {
STACKTOP = sp;
return;
}
$12 = ___cxa_allocate_exception(16) | 0;
__ZNSt3__217iostream_categoryEv() | 0;
HEAP32[$2 >> 2] = 1;
HEAP32[$2 + 4 >> 2] = 8048;
__THREW__ = 0;
invoke_viii(102, $12 | 0, 63343, $2 | 0);
$13 = __THREW__;
__THREW__ = 0;
if ($13 & 1) {
$18 = ___cxa_find_matching_catch_2() | 0;
$19 = tempRet0;
___cxa_free_exception($12 | 0);
$$index = $18;
$$index2 = $19;
} else {
__THREW__ = 0;
invoke_viii(75, $12 | 0, 528, 69);
__THREW__ = 0;
$16 = ___cxa_find_matching_catch_2() | 0;
$$index = $16;
$$index2 = tempRet0;
}
___resumeException($$index | 0);
}
function __ZNK6Vector12cosAngleWithERKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $10 = f0, $13 = f0, $14 = f0, $16 = f0, $18 = f0, $2 = f0, $20 = f0, $22 = f0, $4 = f0, $6 = f0, $8 = f0;
$2 = Math_fround(HEAPF32[$0 >> 2]);
$4 = Math_fround(Math_fround($2 * $2) + Math_fround(0.0));
$6 = Math_fround(HEAPF32[$0 + 4 >> 2]);
$8 = Math_fround($4 + Math_fround($6 * $6));
$10 = Math_fround(HEAPF32[$0 + 8 >> 2]);
$13 = Math_fround(Math_sqrt(Math_fround($8 + Math_fround($10 * $10))));
$14 = Math_fround(HEAPF32[$1 >> 2]);
$16 = Math_fround(Math_fround($14 * $14) + Math_fround(0.0));
$18 = Math_fround(HEAPF32[$1 + 4 >> 2]);
$20 = Math_fround($16 + Math_fround($18 * $18));
$22 = Math_fround(HEAPF32[$1 + 8 >> 2]);
return Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($2 * $14) + Math_fround(0.0)) + Math_fround($6 * $18)) + Math_fround($10 * $22)) / Math_fround($13 * Math_fround(Math_sqrt(Math_fround($20 + Math_fround($22 * $22))))));
}
function __ZNK18HingeJointRotation5printEP8_IO_FILEs($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $10 = 0.0, $13 = 0.0, $16 = 0.0, $19 = 0.0, $7 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$7 = $2 << 16 >> 16;
$10 = +Math_fround(HEAPF32[$0 + 8 >> 2]);
$13 = +Math_fround(HEAPF32[$0 + 12 >> 2]);
$16 = +Math_fround(HEAPF32[$0 + 16 >> 2]);
$19 = +Math_fround(HEAPF32[$0 + 20 >> 2]);
HEAP32[$vararg_buffer >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2];
HEAP32[$vararg_buffer + 4 >> 2] = $7;
HEAPF64[$vararg_buffer + 8 >> 3] = $10;
HEAP32[$vararg_buffer + 16 >> 2] = $7;
HEAPF64[$vararg_buffer + 24 >> 3] = $13;
HEAP32[$vararg_buffer + 32 >> 2] = $7;
HEAPF64[$vararg_buffer + 40 >> 3] = $16;
HEAP32[$vararg_buffer + 48 >> 2] = $7;
HEAPF64[$vararg_buffer + 56 >> 3] = $19;
_fprintf($1, 13369, $vararg_buffer) | 0;
STACKTOP = sp;
return;
}
function __ZN5Joint13addChildJointEPS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $17 = 0, $19 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, label = 0;
$2 = $0 + 12 | 0;
$3 = HEAP32[$2 >> 2] | 0;
if (!$3) {
$5 = __Znwj(16) | 0;
HEAP32[$5 + 4 >> 2] = 10;
HEAP32[$5 + 12 >> 2] = 0;
HEAP32[$5 >> 2] = 0;
HEAP32[$5 + 8 >> 2] = 0;
HEAP32[$2 >> 2] = $5;
$10 = $5;
} else $10 = $3;
$9 = $10 + 12 | 0;
$11 = HEAP32[$9 >> 2] | 0;
if (($11 | 0) < 0) return;
if ((HEAP32[$10 + 8 >> 2] | 0) > ($11 | 0)) {
$$pre$phiZ2D = $11 + 1 | 0;
label = 7;
} else {
$17 = HEAP32[$10 + 4 >> 2] | 0;
$19 = $11 + 1 | 0;
__ZN13DynamicArrayPI5JointE6resizeEi($10, ($17 | 0) > ($11 | 0) ? $17 : $19 + ($11 >>> 1) | 0);
if ((HEAP32[$9 >> 2] | 0) <= ($11 | 0)) {
$$pre$phiZ2D = $19;
label = 7;
}
}
if ((label | 0) == 7) HEAP32[$9 >> 2] = $$pre$phiZ2D;
HEAP32[(HEAP32[$10 >> 2] | 0) + ($11 << 2) >> 2] = $1;
return;
}
function _utf8_isInvalid3($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$pre = 0, $13 = 0, $18 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $5 = 0, label = 0;
$3 = HEAP8[$1 + 2 >> 0] | 0;
if ($3 << 24 >> 24 > -1) {
$26 = 1;
$25 = $26 & 1;
return $25 | 0;
}
$5 = HEAP8[$1 >> 0] | 0;
if ($5 << 24 >> 24 == -17) if ((HEAP8[$1 + 1 >> 0] | 0) == -65) if (($3 & 255) > 189) {
$26 = 1;
$25 = $26 & 1;
return $25 | 0;
} else {
$18 = 191;
$24 = -65;
} else label = 5; else label = 5;
if ((label | 0) == 5) {
if (($3 & 255) > 191) {
$26 = 1;
$25 = $26 & 1;
return $25 | 0;
}
$$pre = HEAP8[$1 + 1 >> 0] | 0;
$13 = $$pre & 255;
if ($5 << 24 >> 24 == -32) {
$26 = ($$pre & 255) < 160 | ($13 & 192 | 0) == 192;
$25 = $26 & 1;
return $25 | 0;
} else {
$18 = $13;
$24 = $$pre;
}
}
$26 = ($18 & 128 | 0) == 0 ? 1 : $5 << 24 >> 24 == -19 ? ($24 & 255) > 159 : ($18 & 192 | 0) == 192;
$25 = $26 & 1;
return $25 | 0;
}
function __ZN13DynamicString12appendStringEPKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$01112 = 0, $$013 = 0, $10 = 0, $15 = 0, $16 = 0, $2 = 0, $21 = 0, $26 = 0, $27 = 0, $3 = 0, $5 = 0;
$2 = _strlen($1) | 0;
$3 = $0 + 12 | 0;
$5 = (HEAP32[$3 >> 2] | 0) + $2 | 0;
if ((HEAP32[$0 + 8 >> 2] | 0) < ($5 | 0)) {
$10 = HEAP32[$0 + 4 >> 2] | 0;
if (($10 | 0) > ($5 | 0)) $15 = $10; else $15 = $5 + 1 + (($5 | 0) / 2 | 0) | 0;
__ZN12DynamicArrayIcLc0EE6resizeEi($0, $15);
}
$16 = HEAP8[$1 >> 0] | 0;
if (!($16 << 24 >> 24)) {
$26 = HEAP32[$3 >> 2] | 0;
$27 = $26 + $2 | 0;
HEAP32[$3 >> 2] = $27;
return;
}
$$01112 = $1;
$$013 = HEAP32[$3 >> 2] | 0;
$21 = $16;
while (1) {
HEAP8[(HEAP32[$0 >> 2] | 0) + $$013 >> 0] = $21;
$$01112 = $$01112 + 1 | 0;
$21 = HEAP8[$$01112 >> 0] | 0;
if (!($21 << 24 >> 24)) break; else $$013 = $$013 + 1 | 0;
}
$26 = HEAP32[$3 >> 2] | 0;
$27 = $26 + $2 | 0;
HEAP32[$3 >> 2] = $27;
return;
}
function _element2($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0$ph = 0, $error$sink = 0, label = 0;
switch ($1 | 0) {
case 20:
{
if (!(FUNCTION_TABLE_iiiii[HEAP32[$4 + 24 >> 2] & 63]($4, $2 + (HEAP32[$4 + 64 >> 2] | 0) | 0, $3, 59863) | 0)) label = 7; else {
$$0$ph = 43;
$error$sink = 27;
}
break;
}
case 23:
{
HEAP32[$0 + 4 >> 2] = 2;
$$0$ph = 44;
$error$sink = 28;
break;
}
case 41:
case 18:
{
$$0$ph = 51;
$error$sink = 26;
break;
}
case 30:
{
$$0$ph = 53;
$error$sink = 26;
break;
}
case 31:
{
$$0$ph = 52;
$error$sink = 26;
break;
}
case 32:
{
$$0$ph = 54;
$error$sink = 26;
break;
}
case 15:
{
$$0 = 39;
return $$0 | 0;
}
default:
label = 7;
}
if ((label | 0) == 7) {
$$0$ph = -1;
$error$sink = 4;
}
HEAP32[$0 >> 2] = $error$sink;
$$0 = $$0$ph;
return $$0 | 0;
}
function __ZN5Joint7addSiteEP4Site($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $17 = 0, $19 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, label = 0;
$2 = $0 + 16 | 0;
$3 = HEAP32[$2 >> 2] | 0;
if (!$3) {
$5 = __Znwj(16) | 0;
HEAP32[$5 + 4 >> 2] = 10;
HEAP32[$5 + 12 >> 2] = 0;
HEAP32[$5 >> 2] = 0;
HEAP32[$5 + 8 >> 2] = 0;
HEAP32[$2 >> 2] = $5;
$10 = $5;
} else $10 = $3;
$9 = $10 + 12 | 0;
$11 = HEAP32[$9 >> 2] | 0;
if (($11 | 0) < 0) return;
if ((HEAP32[$10 + 8 >> 2] | 0) > ($11 | 0)) {
$$pre$phiZ2D = $11 + 1 | 0;
label = 7;
} else {
$17 = HEAP32[$10 + 4 >> 2] | 0;
$19 = $11 + 1 | 0;
__ZN13DynamicArrayPI4SiteE6resizeEi($10, ($17 | 0) > ($11 | 0) ? $17 : $19 + ($11 >>> 1) | 0);
if ((HEAP32[$9 >> 2] | 0) <= ($11 | 0)) {
$$pre$phiZ2D = $19;
label = 7;
}
}
if ((label | 0) == 7) HEAP32[$9 >> 2] = $$pre$phiZ2D;
HEAP32[(HEAP32[$10 >> 2] | 0) + ($11 << 2) >> 2] = $1;
return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $10 = 0, $13 = 0, $9 = 0;
L1 : do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); else {
$9 = HEAP32[$0 + 12 >> 2] | 0;
$10 = $0 + 16 + ($9 << 3) | 0;
__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0 + 16 | 0, $1, $2, $3);
if (($9 | 0) > 1) {
$13 = $1 + 54 | 0;
$$0 = $0 + 24 | 0;
do {
__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0, $1, $2, $3);
if (HEAP8[$13 >> 0] | 0) break L1;
$$0 = $$0 + 8 | 0;
} while ($$0 >>> 0 < $10 >>> 0);
}
} while (0);
return;
}
function __ZN5Joint10pathToRootER13DynamicArrayPIS_E($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$07 = 0, $$pre$phiZ2D = 0, $10 = 0, $12 = 0, $19 = 0, $2 = 0, $4 = 0, $5 = 0, $7 = 0, label = 0;
$2 = $1 + 12 | 0;
HEAP32[$2 >> 2] = 0;
if (!$0) return;
$4 = $1 + 8 | 0;
$5 = $1 + 4 | 0;
$$07 = $0;
$7 = 0;
while (1) {
if (($7 | 0) >= 0) {
if ((HEAP32[$4 >> 2] | 0) > ($7 | 0)) {
$$pre$phiZ2D = $7 + 1 | 0;
label = 7;
} else {
$10 = HEAP32[$5 >> 2] | 0;
$12 = $7 + 1 | 0;
__ZN13DynamicArrayPI5JointE6resizeEi($1, ($10 | 0) > ($7 | 0) ? $10 : $12 + ($7 >>> 1) | 0);
if ((HEAP32[$2 >> 2] | 0) <= ($7 | 0)) {
$$pre$phiZ2D = $12;
label = 7;
}
}
if ((label | 0) == 7) {
label = 0;
HEAP32[$2 >> 2] = $$pre$phiZ2D;
}
HEAP32[(HEAP32[$1 >> 2] | 0) + ($7 << 2) >> 2] = $$07;
}
$19 = HEAP32[$$07 + 8 >> 2] | 0;
if (!$19) break;
$$07 = $19;
$7 = HEAP32[$2 >> 2] | 0;
}
return;
}
function __ZN9Handshape18CalcJointBendCodesEv($0) {
$0 = $0 | 0;
var $1 = 0, $4 = 0, $5 = 0, $7 = 0;
$1 = $0 + 233 | 0;
if (HEAP8[$1 >> 0] | 0) return;
__ZN14SiGMLHandshape18CalcJointBendCodesEv($0);
$4 = $0 + 220 | 0;
$5 = HEAP32[$4 >> 2] | 0;
if ($5 | 0) {
__ZN14SiGMLHandshape18CalcJointBendCodesEv($5);
$7 = $0 + 224 | 0;
__ZN13FingerBending7BetweenERKS_f($0 + 96 | 0, (HEAP32[$4 >> 2] | 0) + 96 | 0, Math_fround(HEAPF32[$7 >> 2]));
__ZN13FingerBending7BetweenERKS_f($0 + 112 | 0, (HEAP32[$4 >> 2] | 0) + 112 | 0, Math_fround(HEAPF32[$7 >> 2]));
__ZN13FingerBending7BetweenERKS_f($0 + 128 | 0, (HEAP32[$4 >> 2] | 0) + 128 | 0, Math_fround(HEAPF32[$7 >> 2]));
__ZN13FingerBending7BetweenERKS_f($0 + 144 | 0, (HEAP32[$4 >> 2] | 0) + 144 | 0, Math_fround(HEAPF32[$7 >> 2]));
__ZN12ThumbBending7BetweenERKS_f($0 + 160 | 0, (HEAP32[$4 >> 2] | 0) + 160 | 0, Math_fround(HEAPF32[$7 >> 2]));
}
HEAP8[$1 >> 0] = 1;
return;
}
function __ZNK25TwoHConcretePostureChange18CalcHandSiteChangeER6VectorS1_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$3 = sp + 12 | 0;
$4 = sp;
if (!(HEAP16[$0 + 448 >> 1] & 8)) __ZN6Vector7setZeroEv($1); else {
__ZN6VectorC2ERKS_($3, $0 + 16 | 0);
__ZNK10Quaternion12rotateVectorER6Vector($0 + 40 | 0, $3);
__ZN6VectorC2ERKS_($4, $0 + 240 | 0);
__ZNK10Quaternion12rotateVectorER6Vector($0 + 264 | 0, $4);
__ZN6Vector11setSubtractERKS_S1_($1, $4, $3);
}
if (!(HEAP16[$0 + 450 >> 1] & 8)) {
__ZN6Vector7setZeroEv($2);
STACKTOP = sp;
return;
} else {
__ZN6VectorC2ERKS_($3, $0 + 128 | 0);
__ZNK10Quaternion12rotateVectorER6Vector($0 + 152 | 0, $3);
__ZN6VectorC2ERKS_($4, $0 + 352 | 0);
__ZNK10Quaternion12rotateVectorER6Vector($0 + 376 | 0, $4);
__ZN6Vector11setSubtractERKS_S1_($2, $4, $3);
STACKTOP = sp;
return;
}
}
function __ZN15TorsoDecolliderD0Ev($0) {
$0 = $0 | 0;
var $$07$i = 0, $$lcssa$i = 0, $1 = 0, $10 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0;
HEAP32[$0 >> 2] = 832;
$1 = $0 + 4 | 0;
$2 = HEAP16[$1 >> 1] | 0;
$4 = $0 + 8 | 0;
$5 = HEAP32[$4 >> 2] | 0;
if ($2 << 16 >> 16 > 0) {
$$07$i = 0;
$18 = $2;
$8 = $5;
$9 = 0;
while (1) {
$10 = HEAP32[$8 + ($9 << 2) >> 2] | 0;
if (!$10) {
$17 = $18;
$19 = $8;
} else {
__ZdlPv($10);
HEAP32[(HEAP32[$4 >> 2] | 0) + ($9 << 2) >> 2] = 0;
$17 = HEAP16[$1 >> 1] | 0;
$19 = HEAP32[$4 >> 2] | 0;
}
$14 = $$07$i + 1 << 16 >> 16;
if ($14 << 16 >> 16 < $17 << 16 >> 16) {
$$07$i = $14;
$18 = $17;
$8 = $19;
$9 = $14 << 16 >> 16;
} else {
$$lcssa$i = $19;
break;
}
}
} else $$lcssa$i = $5;
if (!$$lcssa$i) {
__ZdlPv($0);
return;
}
__ZdaPv($$lcssa$i);
__ZdlPv($0);
return;
}
function __Z11SprintDigitRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEE10DigitIndex($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $6 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
if (($1 | 0) == -1) {
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, 36583, 7) | 0;
STACKTOP = sp;
return;
}
if ($1 >>> 0 > 4) {
$6 = __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, 25046, 7) | 0, $1) | 0;
HEAP8[$2 >> 0] = 41;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($6, $2, 1) | 0;
STACKTOP = sp;
return;
} else {
HEAP8[$2 >> 0] = $1 + 49;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, $2, 1) | 0;
STACKTOP = sp;
return;
}
}
function _little2_nameMatchesAscii($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$012 = 0, $$08 = 0, $$0911 = 0, $$lcssa = 0, $12 = 0, $17 = 0, $19 = 0, $4 = 0, $6 = 0, label = 0;
$4 = HEAP8[$3 >> 0] | 0;
$6 = ($1 | 0) == ($2 | 0);
L1 : do if (!($4 << 24 >> 24)) $$lcssa = $6; else {
$$012 = $3;
$$0911 = $1;
$12 = $4;
$19 = $6;
while (1) {
if ($19) {
$$08 = 0;
label = 7;
break;
}
if (HEAP8[$$0911 + 1 >> 0] | 0) {
$$08 = 0;
label = 7;
break;
}
if ((HEAP8[$$0911 >> 0] | 0) != $12 << 24 >> 24) {
$$08 = 0;
label = 7;
break;
}
$$0911 = $$0911 + 2 | 0;
$$012 = $$012 + 1 | 0;
$12 = HEAP8[$$012 >> 0] | 0;
$17 = ($$0911 | 0) == ($2 | 0);
if (!($12 << 24 >> 24)) {
$$lcssa = $17;
break L1;
} else $19 = $17;
}
if ((label | 0) == 7) return $$08 | 0;
} while (0);
$$08 = $$lcssa & 1;
return $$08 | 0;
}
function _big2_toUtf16($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0$ph = 0, $12 = 0, $13 = 0, $14 = 0, $21 = 0, $28 = 0, $30 = 0, $5 = 0, $8 = 0, label = 0;
$5 = HEAP32[$1 >> 2] | 0;
$8 = HEAP32[$3 >> 2] | 0;
$12 = $5;
$13 = $8;
if (($2 - $5 | 0) > ($4 - $8 | 0)) {
$14 = $2 + -2 | 0;
$$0$ph = (HEAP8[$14 >> 0] & -8) << 24 >> 24 == -40 ? $14 : $2;
} else $$0$ph = $2;
if (($$0$ph | 0) == ($12 | 0) | ($13 | 0) == ($4 | 0)) return; else {
$21 = $12;
$30 = $13;
}
while (1) {
$28 = ((HEAPU8[$21 >> 0] | 0) << 8 | (HEAPU8[$21 + 1 >> 0] | 0)) & 65535;
HEAP32[$3 >> 2] = $30 + 2;
HEAP16[$30 >> 1] = $28;
$21 = (HEAP32[$1 >> 2] | 0) + 2 | 0;
HEAP32[$1 >> 2] = $21;
if (($21 | 0) == ($$0$ph | 0)) {
label = 6;
break;
}
$30 = HEAP32[$3 >> 2] | 0;
if (($30 | 0) == ($4 | 0)) {
label = 6;
break;
}
}
if ((label | 0) == 6) return;
}
function _big2_nameMatchesAscii($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$012 = 0, $$08 = 0, $$0911 = 0, $$lcssa = 0, $12 = 0, $17 = 0, $19 = 0, $4 = 0, $6 = 0, label = 0;
$4 = HEAP8[$3 >> 0] | 0;
$6 = ($1 | 0) == ($2 | 0);
L1 : do if (!($4 << 24 >> 24)) $$lcssa = $6; else {
$$012 = $3;
$$0911 = $1;
$12 = $4;
$19 = $6;
while (1) {
if ($19) {
$$08 = 0;
label = 7;
break;
}
if (HEAP8[$$0911 >> 0] | 0) {
$$08 = 0;
label = 7;
break;
}
if ((HEAP8[$$0911 + 1 >> 0] | 0) != $12 << 24 >> 24) {
$$08 = 0;
label = 7;
break;
}
$$0911 = $$0911 + 2 | 0;
$$012 = $$012 + 1 | 0;
$12 = HEAP8[$$012 >> 0] | 0;
$17 = ($$0911 | 0) == ($2 | 0);
if (!($12 << 24 >> 24)) {
$$lcssa = $17;
break L1;
} else $19 = $17;
}
if ((label | 0) == 7) return $$08 | 0;
} while (0);
$$08 = $$lcssa & 1;
return $$08 | 0;
}
function _strncmp($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0$lcssa = 0, $$01823 = 0, $$01925$in = 0, $$020 = 0, $$024 = 0, $10 = 0, $12 = 0, $16 = 0, $4 = 0, $6 = 0;
if (!$2) $$020 = 0; else {
$4 = HEAP8[$0 >> 0] | 0;
L3 : do if (!($4 << 24 >> 24)) {
$$0$lcssa = $1;
$16 = 0;
} else {
$$01823 = $0;
$$01925$in = $2;
$$024 = $1;
$10 = $4;
while (1) {
$$01925$in = $$01925$in + -1 | 0;
$6 = HEAP8[$$024 >> 0] | 0;
if (!($10 << 24 >> 24 == $6 << 24 >> 24 & (($$01925$in | 0) != 0 & $6 << 24 >> 24 != 0))) {
$$0$lcssa = $$024;
$16 = $10;
break L3;
}
$$01823 = $$01823 + 1 | 0;
$12 = $$024 + 1 | 0;
$10 = HEAP8[$$01823 >> 0] | 0;
if (!($10 << 24 >> 24)) {
$$0$lcssa = $12;
$16 = 0;
break;
} else $$024 = $12;
}
} while (0);
$$020 = ($16 & 255) - (HEAPU8[$$0$lcssa >> 0] | 0) | 0;
}
return $$020 | 0;
}
function __ZN16AtomicTimedMorph10CalcTimingEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $11 = f0, $12 = 0, $13 = f0, $15 = f0, $16 = 0, $17 = f0, $19 = f0, $3 = 0, $8 = f0, $9 = 0;
$3 = $0 + 4 | 0;
if ($1 < Math_fround(0.0)) {
HEAPF32[$3 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 12 >> 2] = Math_fround(-1.0);
HEAPF32[$0 + 16 >> 2] = Math_fround(-1.0);
return;
}
$8 = Math_fround($1 - Math_fround(HEAPF32[$3 >> 2]));
HEAPF32[$3 >> 2] = $1;
$9 = $0 + 8 | 0;
$11 = Math_fround($8 + Math_fround(HEAPF32[$9 >> 2]));
HEAPF32[$9 >> 2] = $11;
$12 = $0 + 12 | 0;
$13 = Math_fround(HEAPF32[$12 >> 2]);
if ($13 >= Math_fround(0.0)) {
$15 = Math_fround($8 + $13);
HEAPF32[$12 >> 2] = $15;
}
$16 = $0 + 16 | 0;
$17 = Math_fround(HEAPF32[$16 >> 2]);
if (!($17 >= Math_fround(0.0))) return;
$19 = Math_fround($8 + $17);
HEAPF32[$16 >> 2] = $19;
return;
}
function __ZN10Quaternion19setNonNegativePhaseEv($0) {
$0 = $0 | 0;
var $$sink1$i = f0, $1 = 0, $13 = f0, $14 = 0, $16 = f0, $17 = 0, $19 = f0, $2 = f0, $20 = f0, $5 = f0, $8 = f0;
$1 = $0 + 12 | 0;
$2 = Math_fround(HEAPF32[$1 >> 2]);
if ($2 != Math_fround(0.0)) $$sink1$i = $2; else {
$5 = Math_fround(HEAPF32[$0 + 8 >> 2]);
if ($5 != Math_fround(0.0)) $$sink1$i = $5; else {
$8 = Math_fround(HEAPF32[$0 + 4 >> 2]);
if ($8 != Math_fround(0.0)) $$sink1$i = $8; else $$sink1$i = Math_fround(HEAPF32[$0 >> 2]);
}
}
if (!($$sink1$i < Math_fround(0.0))) return;
$13 = Math_fround(-Math_fround(HEAPF32[$0 >> 2]));
HEAPF32[$0 >> 2] = $13;
$14 = $0 + 4 | 0;
$16 = Math_fround(-Math_fround(HEAPF32[$14 >> 2]));
HEAPF32[$14 >> 2] = $16;
$17 = $0 + 8 | 0;
$19 = Math_fround(-Math_fround(HEAPF32[$17 >> 2]));
HEAPF32[$17 >> 2] = $19;
$20 = Math_fround(-$2);
HEAPF32[$1 >> 2] = $20;
return;
}
function __ZN15TorsoDecolliderD2Ev($0) {
$0 = $0 | 0;
var $$07 = 0, $$lcssa = 0, $1 = 0, $10 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0;
HEAP32[$0 >> 2] = 832;
$1 = $0 + 4 | 0;
$2 = HEAP16[$1 >> 1] | 0;
$4 = $0 + 8 | 0;
$5 = HEAP32[$4 >> 2] | 0;
if ($2 << 16 >> 16 > 0) {
$$07 = 0;
$18 = $2;
$8 = $5;
$9 = 0;
while (1) {
$10 = HEAP32[$8 + ($9 << 2) >> 2] | 0;
if (!$10) {
$17 = $18;
$19 = $8;
} else {
__ZdlPv($10);
HEAP32[(HEAP32[$4 >> 2] | 0) + ($9 << 2) >> 2] = 0;
$17 = HEAP16[$1 >> 1] | 0;
$19 = HEAP32[$4 >> 2] | 0;
}
$14 = $$07 + 1 << 16 >> 16;
if ($14 << 16 >> 16 < $17 << 16 >> 16) {
$$07 = $14;
$18 = $17;
$8 = $19;
$9 = $14 << 16 >> 16;
} else {
$$lcssa = $19;
break;
}
}
} else $$lcssa = $5;
if (!$$lcssa) return;
__ZdaPv($$lcssa);
HEAP32[$4 >> 2] = 0;
return;
}
function _prolog0($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0$ph = 0, $error$sink = 0, label = 0;
switch ($1 | 0) {
case 15:
{
$$0$ph = 0;
$error$sink = 2;
break;
}
case 12:
{
$$0$ph = 1;
$error$sink = 2;
break;
}
case 11:
{
$$0$ph = 55;
$error$sink = 2;
break;
}
case 13:
{
$$0$ph = 56;
$error$sink = 2;
break;
}
case 16:
{
if (!(FUNCTION_TABLE_iiiii[HEAP32[$4 + 24 >> 2] & 63]($4, $2 + (HEAP32[$4 + 64 >> 2] << 1) | 0, $3, 59799) | 0)) label = 7; else {
$$0$ph = 3;
$error$sink = 3;
}
break;
}
case 29:
{
$$0$ph = 2;
$error$sink = 4;
break;
}
case 14:
{
$$0 = 0;
return $$0 | 0;
}
default:
label = 7;
}
if ((label | 0) == 7) {
$$0$ph = -1;
$error$sink = 4;
}
HEAP32[$0 >> 2] = $error$sink;
$$0 = $$0$ph;
return $$0 | 0;
}
function _little2_toUtf16($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0$ph = 0, $12 = 0, $13 = 0, $22 = 0, $29 = 0, $31 = 0, $5 = 0, $8 = 0, label = 0;
$5 = HEAP32[$1 >> 2] | 0;
$8 = HEAP32[$3 >> 2] | 0;
$12 = $5;
$13 = $8;
if (($2 - $5 | 0) > ($4 - $8 | 0)) $$0$ph = (HEAP8[$2 + -1 >> 0] & -8) << 24 >> 24 == -40 ? $2 + -2 | 0 : $2; else $$0$ph = $2;
if (($$0$ph | 0) == ($12 | 0) | ($13 | 0) == ($4 | 0)) return; else {
$22 = $12;
$31 = $13;
}
while (1) {
$29 = ((HEAPU8[$22 + 1 >> 0] | 0) << 8 | (HEAPU8[$22 >> 0] | 0)) & 65535;
HEAP32[$3 >> 2] = $31 + 2;
HEAP16[$31 >> 1] = $29;
$22 = (HEAP32[$1 >> 2] | 0) + 2 | 0;
HEAP32[$1 >> 2] = $22;
if (($22 | 0) == ($$0$ph | 0)) {
label = 6;
break;
}
$31 = HEAP32[$3 >> 2] | 0;
if (($31 | 0) == ($4 | 0)) {
label = 6;
break;
}
}
if ((label | 0) == 6) return;
}
function __ZNK18HingeJointRotation17printRotationVRMLEP8_IO_FILEs($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $10 = 0.0, $13 = 0.0, $16 = 0.0, $4 = 0, $7 = 0.0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$4 = $2 << 16 >> 16;
$7 = +Math_fround(HEAPF32[$0 + 8 >> 2]);
$10 = +Math_fround(HEAPF32[$0 + 12 >> 2]);
$13 = +Math_fround(HEAPF32[$0 + 16 >> 2]);
$16 = +Math_fround(HEAPF32[$0 + 20 >> 2]);
HEAP32[$vararg_buffer >> 2] = $4;
HEAPF64[$vararg_buffer + 8 >> 3] = $7;
HEAP32[$vararg_buffer + 16 >> 2] = $4;
HEAPF64[$vararg_buffer + 24 >> 3] = $10;
HEAP32[$vararg_buffer + 32 >> 2] = $4;
HEAPF64[$vararg_buffer + 40 >> 3] = $13;
HEAP32[$vararg_buffer + 48 >> 2] = $4;
HEAPF64[$vararg_buffer + 56 >> 3] = $16;
_fprintf($1, 13349, $vararg_buffer) | 0;
STACKTOP = sp;
return;
}
function __ZN6Vector9setLengthEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $$0 = 0, $10 = f0, $13 = f0, $15 = f0, $16 = f0, $17 = f0, $18 = f0, $2 = f0, $4 = f0, $5 = 0, $6 = f0, $8 = f0, $9 = 0;
$2 = Math_fround(HEAPF32[$0 >> 2]);
$4 = Math_fround(Math_fround($2 * $2) + Math_fround(0.0));
$5 = $0 + 4 | 0;
$6 = Math_fround(HEAPF32[$5 >> 2]);
$8 = Math_fround($4 + Math_fround($6 * $6));
$9 = $0 + 8 | 0;
$10 = Math_fround(HEAPF32[$9 >> 2]);
$13 = Math_fround(Math_sqrt(Math_fround($8 + Math_fround($10 * $10))));
if ($13 <= Math_fround(0.0)) {
$$0 = 0;
return $$0 | 0;
}
$15 = Math_fround($1 / $13);
$16 = Math_fround($2 * $15);
HEAPF32[$0 >> 2] = $16;
$17 = Math_fround($15 * $6);
HEAPF32[$5 >> 2] = $17;
$18 = Math_fround($15 * $10);
HEAPF32[$9 >> 2] = $18;
__ZNK6Vector16checkValidVectorEv($0);
__ZNK6Vector16checkValidVectorEv($0);
$$0 = 1;
return $$0 | 0;
}
function ___strerror_l($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $7 = 0, label = 0, $$113$looptemp = 0;
$$016 = 0;
while (1) {
if ((HEAPU8[61333 + $$016 >> 0] | 0) == ($0 | 0)) {
label = 2;
break;
}
$7 = $$016 + 1 | 0;
if (($7 | 0) == 87) {
$$01214 = 61421;
$$115 = 87;
label = 5;
break;
} else $$016 = $7;
}
if ((label | 0) == 2) if (!$$016) $$012$lcssa = 61421; else {
$$01214 = 61421;
$$115 = $$016;
label = 5;
}
if ((label | 0) == 5) while (1) {
label = 0;
$$113 = $$01214;
do {
$$113$looptemp = $$113;
$$113 = $$113 + 1 | 0;
} while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
$$115 = $$115 + -1 | 0;
if (!$$115) {
$$012$lcssa = $$113;
break;
} else {
$$01214 = $$113;
label = 5;
}
}
return ___lctrans($$012$lcssa, HEAP32[$1 + 20 >> 2] | 0) | 0;
}
function __ZN6Vector7setUnitEv($0) {
$0 = $0 | 0;
var $$0$i = 0, $1 = f0, $12 = f0, $14 = f0, $15 = f0, $16 = f0, $17 = f0, $3 = f0, $4 = 0, $5 = f0, $7 = f0, $8 = 0, $9 = f0;
$1 = Math_fround(HEAPF32[$0 >> 2]);
$3 = Math_fround(Math_fround($1 * $1) + Math_fround(0.0));
$4 = $0 + 4 | 0;
$5 = Math_fround(HEAPF32[$4 >> 2]);
$7 = Math_fround($3 + Math_fround($5 * $5));
$8 = $0 + 8 | 0;
$9 = Math_fround(HEAPF32[$8 >> 2]);
$12 = Math_fround(Math_sqrt(Math_fround($7 + Math_fround($9 * $9))));
if ($12 <= Math_fround(0.0)) {
$$0$i = 0;
return $$0$i | 0;
}
$14 = Math_fround(Math_fround(1.0) / $12);
$15 = Math_fround($1 * $14);
HEAPF32[$0 >> 2] = $15;
$16 = Math_fround($5 * $14);
HEAPF32[$4 >> 2] = $16;
$17 = Math_fround($9 * $14);
HEAPF32[$8 >> 2] = $17;
__ZNK6Vector16checkValidVectorEv($0);
__ZNK6Vector16checkValidVectorEv($0);
$$0$i = 1;
return $$0$i | 0;
}
function __ZNK19TwoHConcretePosture5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $6 = 0;
if (!$1) return;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(42757, 21, 1, $1) | 0;
$6 = (HEAP16[36078] | 0) + 1 << 16 >> 16;
HEAP16[36078] = $6;
__Z11printIndentP8_IO_FILEi($1, $6 << 16 >> 16);
_fwrite(37097, 10, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK19OneHConcretePosture5printEP8_IO_FILE($0, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(37108, 9, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK19OneHConcretePosture5printEP8_IO_FILE($0 + 112 | 0, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
return;
}
function __ZNK10SiteIDPair10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36843, 1) | 0, 51353, 8) | 0, 49554, 1) | 0;
__ZNK10SiteIDPair17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE($0, $1);
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36603, 3) | 0;
return;
}
function __ZN14RepeatMovementD0Ev($0) {
$0 = $0 | 0;
var $1 = 0, $10 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $7 = 0;
HEAP32[$0 >> 2] = 2656;
$1 = $0 + 696 | 0;
$2 = HEAP32[$1 >> 2] | 0;
do if ($2 | 0) {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0, $2 | 0);
$7 = __THREW__;
__THREW__ = 0;
if ($7 & 1) {
$17 = ___cxa_find_matching_catch_2() | 0;
$18 = tempRet0;
__ZdlPv($0);
___resumeException($17 | 0);
} else {
HEAP32[$1 >> 2] = 0;
break;
}
} while (0);
$10 = HEAP32[$0 + 700 >> 2] | 0;
if (!$10) {
__ZdlPv($0);
return;
}
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$10 >> 2] | 0) + 4 >> 2] | 0, $10 | 0);
$15 = __THREW__;
__THREW__ = 0;
if ($15 & 1) {
$17 = ___cxa_find_matching_catch_2() | 0;
$18 = tempRet0;
__ZdlPv($0);
___resumeException($17 | 0);
} else {
__ZdlPv($0);
return;
}
}
function __ZN13SplitMovementD0Ev($0) {
$0 = $0 | 0;
var $1 = 0, $10 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $7 = 0;
HEAP32[$0 >> 2] = 3164;
$1 = $0 + 528 | 0;
$2 = HEAP32[$1 >> 2] | 0;
do if ($2 | 0) {
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0, $2 | 0);
$7 = __THREW__;
__THREW__ = 0;
if ($7 & 1) {
$17 = ___cxa_find_matching_catch_2() | 0;
$18 = tempRet0;
__ZdlPv($0);
___resumeException($17 | 0);
} else {
HEAP32[$1 >> 2] = 0;
break;
}
} while (0);
$10 = HEAP32[$0 + 532 >> 2] | 0;
if (!$10) {
__ZdlPv($0);
return;
}
__THREW__ = 0;
invoke_vi(HEAP32[(HEAP32[$10 >> 2] | 0) + 4 >> 2] | 0, $10 | 0);
$15 = __THREW__;
__THREW__ = 0;
if ($15 & 1) {
$17 = ___cxa_find_matching_catch_2() | 0;
$18 = tempRet0;
__ZdlPv($0);
___resumeException($17 | 0);
} else {
__ZdlPv($0);
return;
}
}
function ___overflow($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
$3 = $1 & 255;
HEAP8[$2 >> 0] = $3;
$4 = $0 + 16 | 0;
$5 = HEAP32[$4 >> 2] | 0;
if (!$5) if (!(___towrite($0) | 0)) {
$12 = HEAP32[$4 >> 2] | 0;
label = 4;
} else $$0 = -1; else {
$12 = $5;
label = 4;
}
do if ((label | 0) == 4) {
$9 = $0 + 20 | 0;
$10 = HEAP32[$9 >> 2] | 0;
if ($10 >>> 0 < $12 >>> 0) {
$13 = $1 & 255;
if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
HEAP32[$9 >> 2] = $10 + 1;
HEAP8[$10 >> 0] = $3;
$$0 = $13;
break;
}
}
if ((FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 31]($0, $2, 1) | 0) == 1) $$0 = HEAPU8[$2 >> 0] | 0; else $$0 = -1;
} while (0);
STACKTOP = sp;
return $$0 | 0;
}
function __ZNK6SiteID10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36843, 1) | 0, 51353, 8) | 0, 49554, 1) | 0;
__ZNK6SiteID17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($0, $1, 0);
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36603, 3) | 0;
return;
}
function __ZN17TargettedMovementD2Ev($0) {
$0 = $0 | 0;
var $13 = 0, $4 = 0, $5 = 0, $7 = 0, label = 0;
HEAP32[$0 >> 2] = 2752;
$4 = $0 + 528 | 0;
do if (!(HEAP8[$0 + 532 >> 0] | 0)) label = 5; else {
$5 = HEAP32[$4 >> 2] | 0;
if ($5 | 0) {
__THREW__ = 0;
invoke_vi(142, $5 | 0);
$7 = __THREW__;
__THREW__ = 0;
if ($7 & 1) {
$13 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($5);
HEAP32[$0 >> 2] = 1984;
HEAP32[$0 + 452 >> 2] = 0;
HEAP32[$0 + 340 >> 2] = 0;
HEAP32[$0 + 228 >> 2] = 0;
HEAP32[$0 + 116 >> 2] = 0;
___resumeException($13 | 0);
} else {
__ZdlPv($5);
label = 5;
break;
}
}
} while (0);
if ((label | 0) == 5) HEAP32[$4 >> 2] = 0;
HEAP32[$0 >> 2] = 1984;
HEAP32[$0 + 452 >> 2] = 0;
HEAP32[$0 + 340 >> 2] = 0;
HEAP32[$0 + 228 >> 2] = 0;
HEAP32[$0 + 116 >> 2] = 0;
return;
}
function __ZNK16DirectedMovement10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36843, 1) | 0, 51511, 14) | 0, 49554, 1) | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$0 >> 2] | 0) + 84 >> 2] & 127]($0, $1, 0);
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36603, 3) | 0;
return;
}
function __ZNK16CircularMovement10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36843, 1) | 0, 51526, 14) | 0, 49554, 1) | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$0 >> 2] | 0) + 84 >> 2] & 127]($0, $1, 0);
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36603, 3) | 0;
return;
}
function __ZNK10Quaternion6toVRMLER12VRMLRotation($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $12 = f0, $14 = f0, $16 = f0, $2 = f0, $3 = 0, $4 = f0, $5 = 0, $7 = f0;
$2 = Math_fround(HEAPF32[$0 >> 2]);
$3 = $0 + 4 | 0;
$4 = Math_fround(HEAPF32[$3 >> 2]);
$5 = $0 + 8 | 0;
$7 = Math_fround(__ZN6Vector7alengthEfff($2, $4, Math_fround(HEAPF32[$5 >> 2])));
if (!($7 <= Math_fround(0.0))) {
$12 = Math_fround(Math_fround(+Math_atan2(+$7, +Math_fround(HEAPF32[$0 + 12 >> 2]))) * Math_fround(2.0));
$14 = Math_fround(Math_fround(HEAPF32[$0 >> 2]) / $7);
$16 = Math_fround(Math_fround(HEAPF32[$3 >> 2]) / $7);
__ZN12VRMLRotation7setFromEffff($1, $14, $16, Math_fround(Math_fround(HEAPF32[$5 >> 2]) / $7), $12);
return;
} else {
__ZN12VRMLRotation7setFromEffff($1, Math_fround(0.0), Math_fround(0.0), Math_fround(1.0), Math_fround(0.0));
return;
}
}
function __ZN17VectorController2C2Ev($0) {
$0 = $0 | 0;
HEAPF32[$0 + 4 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 8 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 12 >> 2] = Math_fround(1.0);
HEAP32[$0 >> 2] = 924;
__ZN6VectorC2Ev($0 + 16 | 0);
__ZN6VectorC2Ev($0 + 28 | 0);
__ZN6VectorC2Ev($0 + 40 | 0);
__ZN6VectorC2Ev($0 + 52 | 0);
__ZN6VectorC2Ev($0 + 64 | 0);
__ZN6VectorC2Ev($0 + 76 | 0);
__ZN6VectorC2Ev($0 + 88 | 0);
__ZN6VectorC2Ev($0 + 100 | 0);
HEAP32[$0 + 112 >> 2] = 3;
HEAPF32[$0 + 116 >> 2] = Math_fround(10.0);
HEAPF32[$0 + 120 >> 2] = Math_fround(.0500000007);
HEAPF32[$0 + 124 >> 2] = Math_fround(7.0);
HEAPF32[$0 + 128 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 132 >> 2] = Math_fround(4.0);
HEAPF32[$0 + 136 >> 2] = Math_fround(15.0);
HEAPF32[$0 + 140 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 144 >> 2] = Math_fround(-1.0);
return;
}
function __ZN13BasicMovement11setDurationEfb($0, $1, $2) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = $2 | 0;
var $10 = f0, $11 = 0, $12 = f0, $16 = f0, $3 = 0, $4 = f0, $7 = f0, $8 = 0;
$3 = $0 + 40 | 0;
$4 = Math_fround(HEAPF32[$3 >> 2]);
if ($2) if ($4 == Math_fround(0.0)) {
HEAPF32[$0 + 44 >> 2] = Math_fround(0.0);
HEAPF32[$3 >> 2] = $1;
return;
} else {
$7 = Math_fround($1 / $4);
$8 = $0 + 44 | 0;
$10 = Math_fround($7 * Math_fround(HEAPF32[$8 >> 2]));
HEAPF32[$8 >> 2] = $10;
HEAPF32[$3 >> 2] = $1;
return;
} else {
$11 = $0 + 44 | 0;
$12 = Math_fround(HEAPF32[$11 >> 2]);
if (Math_fround($4 - $12) > $1) {
HEAPF32[$11 >> 2] = Math_fround(0.0);
HEAPF32[$3 >> 2] = $1;
return;
} else {
$16 = Math_fround(Math_fround($1 - $4) + $12);
HEAPF32[$11 >> 2] = $16;
HEAPF32[$3 >> 2] = $1;
return;
}
}
}
function __ZNK10Trajectory16lookupByFractionEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $$0 = f0, $10 = 0, $17 = f0, $19 = 0, $2 = 0, $21 = f0, $4 = f0, $5 = 0;
$2 = HEAP32[476] | 0;
$4 = Math_fround(Math_fround($2 | 0) * $1);
$5 = ~~$4;
if (($5 | 0) < 0) {
$$0 = Math_fround(HEAPF32[HEAP32[$0 + 28 >> 2] >> 2]);
return Math_fround($$0);
}
$10 = $2 + -1 | 0;
if (($10 | 0) > ($5 | 0)) {
$17 = Math_fround($4 - Math_fround($5 | 0));
$19 = HEAP32[$0 + 28 >> 2] | 0;
$21 = Math_fround(HEAPF32[$19 + ($5 << 2) >> 2]);
$$0 = Math_fround(Math_fround(Math_fround(Math_fround(1.0) - $17) * $21) + Math_fround($17 * Math_fround(HEAPF32[$19 + ($5 + 1 << 2) >> 2])));
return Math_fround($$0);
} else {
$$0 = Math_fround(HEAPF32[(HEAP32[$0 + 28 >> 2] | 0) + ($10 << 2) >> 2]);
return Math_fround($$0);
}
return Math_fround(0.0);
}
function _scalbn($0, $1) {
$0 = +$0;
$1 = $1 | 0;
var $$0 = 0.0, $$020 = 0, $10 = 0.0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $3 = 0.0, $5 = 0, $7 = 0;
if (($1 | 0) > 1023) {
$3 = $0 * 8988465674311579538646525.0e283;
$5 = ($1 | 0) > 2046;
$7 = $1 + -2046 | 0;
$$0 = $5 ? $3 * 8988465674311579538646525.0e283 : $3;
$$020 = $5 ? (($7 | 0) < 1023 ? $7 : 1023) : $1 + -1023 | 0;
} else if (($1 | 0) < -1022) {
$10 = $0 * 2.2250738585072014e-308;
$12 = ($1 | 0) < -2044;
$14 = $1 + 2044 | 0;
$$0 = $12 ? $10 * 2.2250738585072014e-308 : $10;
$$020 = $12 ? (($14 | 0) > -1022 ? $14 : -1022) : $1 + 1022 | 0;
} else {
$$0 = $0;
$$020 = $1;
}
$17 = _bitshift64Shl($$020 + 1023 | 0, 0, 52) | 0;
$18 = tempRet0;
HEAP32[tempDoublePtr >> 2] = $17;
HEAP32[tempDoublePtr + 4 >> 2] = $18;
return +($$0 * +HEAPF64[tempDoublePtr >> 3]);
}
function _frexp($0, $1) {
$0 = +$0;
$1 = $1 | 0;
var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
HEAPF64[tempDoublePtr >> 3] = $0;
$2 = HEAP32[tempDoublePtr >> 2] | 0;
$3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
$4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
switch ($4 & 2047) {
case 0:
{
if ($0 != 0.0) {
$9 = +_frexp($0 * 18446744073709551616.0, $1);
$$016 = $9;
$storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0;
} else {
$$016 = $0;
$storemerge = 0;
}
HEAP32[$1 >> 2] = $storemerge;
$$0 = $$016;
break;
}
case 2047:
{
$$0 = $0;
break;
}
default:
{
HEAP32[$1 >> 2] = ($4 & 2047) + -1022;
HEAP32[tempDoublePtr >> 2] = $2;
HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672;
$$0 = +HEAPF64[tempDoublePtr >> 3];
}
}
return +$$0;
}
function __ZN19OneHConcretePostureC2Eb($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $12 = 0, $14 = 0;
HEAP8[$0 >> 0] = $1 & 1;
__ZN6VectorC2Ev($0 + 4 | 0);
__ZN6VectorC2Ev($0 + 16 | 0);
__ZN6VectorC2Ev($0 + 28 | 0);
HEAPF32[$0 + 40 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 44 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 48 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 52 >> 2] = Math_fround(1.0);
HEAP32[$0 + 56 >> 2] = 0;
HEAPF32[$0 + 60 >> 2] = Math_fround(1.0);
$12 = $0 + 64 | 0;
HEAP32[$12 >> 2] = 0;
HEAP32[$12 + 4 >> 2] = 0;
HEAP32[$12 + 8 >> 2] = 0;
HEAP32[$12 + 12 >> 2] = 0;
HEAP32[$12 + 16 >> 2] = 0;
HEAP32[$12 + 20 >> 2] = 0;
HEAPF32[$0 + 88 >> 2] = Math_fround(1.0);
$14 = $0 + 92 | 0;
HEAP32[$14 >> 2] = 0;
HEAP32[$14 + 4 >> 2] = 0;
HEAP32[$14 + 8 >> 2] = 0;
HEAP32[$14 + 12 >> 2] = 0;
HEAP32[$14 + 16 >> 2] = 0;
return;
}
function __ZNK12VRMLRotation5printEP8_IO_FILEi($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $11 = 0.0, $14 = 0.0, $5 = 0.0, $8 = 0.0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$5 = +Math_fround(HEAPF32[$0 >> 2]);
$8 = +Math_fround(HEAPF32[$0 + 4 >> 2]);
$11 = +Math_fround(HEAPF32[$0 + 8 >> 2]);
$14 = +Math_fround(HEAPF32[$0 + 12 >> 2]);
HEAP32[$vararg_buffer >> 2] = $2;
HEAPF64[$vararg_buffer + 8 >> 3] = $5;
HEAP32[$vararg_buffer + 16 >> 2] = $2;
HEAPF64[$vararg_buffer + 24 >> 3] = $8;
HEAP32[$vararg_buffer + 32 >> 2] = $2;
HEAPF64[$vararg_buffer + 40 >> 3] = $11;
HEAP32[$vararg_buffer + 48 >> 2] = $2;
HEAPF64[$vararg_buffer + 56 >> 3] = $14;
_fprintf($1, 13349, $vararg_buffer) | 0;
STACKTOP = sp;
return;
}
function _normal_nameMatchesAscii($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$011 = 0, $$07 = 0, $$0810 = 0, $$lcssa = 0, $14 = 0, $16 = 0, $4 = 0, $6 = 0, $9 = 0, label = 0;
$4 = HEAP8[$3 >> 0] | 0;
$6 = ($1 | 0) == ($2 | 0);
L1 : do if (!($4 << 24 >> 24)) $$lcssa = $6; else {
$$011 = $3;
$$0810 = $1;
$16 = $6;
$9 = $4;
while (1) {
if ($16) {
$$07 = 0;
label = 6;
break;
}
if ((HEAP8[$$0810 >> 0] | 0) != $9 << 24 >> 24) {
$$07 = 0;
label = 6;
break;
}
$$0810 = $$0810 + 1 | 0;
$$011 = $$011 + 1 | 0;
$9 = HEAP8[$$011 >> 0] | 0;
$14 = ($$0810 | 0) == ($2 | 0);
if (!($9 << 24 >> 24)) {
$$lcssa = $14;
break L1;
} else $16 = $14;
}
if ((label | 0) == 6) return $$07 | 0;
} while (0);
$$07 = $$lcssa & 1;
return $$07 | 0;
}
function __ZNK10Quaternion5printEP8_IO_FILEi($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $11 = 0.0, $14 = 0.0, $5 = 0.0, $8 = 0.0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$5 = +Math_fround(HEAPF32[$0 >> 2]);
$8 = +Math_fround(HEAPF32[$0 + 4 >> 2]);
$11 = +Math_fround(HEAPF32[$0 + 8 >> 2]);
$14 = +Math_fround(HEAPF32[$0 + 12 >> 2]);
HEAP32[$vararg_buffer >> 2] = $2;
HEAPF64[$vararg_buffer + 8 >> 3] = $5;
HEAP32[$vararg_buffer + 16 >> 2] = $2;
HEAPF64[$vararg_buffer + 24 >> 3] = $8;
HEAP32[$vararg_buffer + 32 >> 2] = $2;
HEAPF64[$vararg_buffer + 40 >> 3] = $11;
HEAP32[$vararg_buffer + 48 >> 2] = $2;
HEAPF64[$vararg_buffer + 56 >> 3] = $14;
_fprintf($1, 13349, $vararg_buffer) | 0;
STACKTOP = sp;
return;
}
function __ZN18SiGMLConstellation9mergeFromERKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $3 = 0, dest = 0, src = 0, stop = 0;
$3 = HEAP32[16607] | 0;
if (!(($3 ^ HEAP32[$1 >> 2]) & 16777215)) if (!((HEAP32[$1 + 16 >> 2] ^ $3) & 16777215)) if (!((HEAP32[$1 + 28 >> 2] ^ $3) & 16777215)) if (!(HEAP32[$1 + 48 >> 2] | 0)) if (Math_fround(HEAPF32[$1 + 52 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$1 + 56 >> 2]) == Math_fround(0.0)) if (Math_fround(HEAPF32[$1 + 60 >> 2]) == Math_fround(0.0)) if (!((HEAP32[$1 + 64 >> 2] ^ $3) & 16777215)) if (!((HEAP32[$1 + 68 >> 2] ^ $3) & 16777215)) if (!((HEAP32[$1 + 72 >> 2] ^ $3) & 16777215)) return;
dest = $0;
src = $1;
stop = dest + 84 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
return;
}
function __ZN10Direction27BetweenES_S_f($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = Math_fround($3);
var $10 = f0, $13 = f0, $17 = f0, $21 = 0, $4 = 0, $5 = f0, $7 = f0, $brmerge = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$4 = sp;
$5 = Math_fround(Math_fround(1.0) - $3);
$7 = Math_fround($5 * Math_fround(HEAPF32[$1 >> 2]));
$10 = Math_fround($7 + Math_fround(Math_fround(HEAPF32[$2 >> 2]) * $3));
$13 = Math_fround($5 * Math_fround(HEAPF32[$1 + 4 >> 2]));
$17 = Math_fround($13 + Math_fround(Math_fround(HEAPF32[$2 + 4 >> 2]) * $3));
HEAPF32[$4 >> 2] = $10;
HEAPF32[$4 + 4 >> 2] = $17;
$brmerge = $10 != Math_fround(0.0) | $17 != Math_fround(0.0);
$21 = $brmerge ? $4 : $1;
HEAP32[$0 >> 2] = HEAP32[$21 >> 2];
HEAP32[$0 + 4 >> 2] = HEAP32[$21 + 4 >> 2];
STACKTOP = sp;
return;
}
function _doctype1($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0$ph = 0, $5 = 0, $error$sink = 0, label = 0;
switch ($1 | 0) {
case 25:
{
$$0$ph = 7;
$error$sink = 7;
break;
}
case 17:
{
$$0$ph = 8;
$error$sink = 6;
break;
}
case 18:
{
$5 = $4 + 24 | 0;
if (!(FUNCTION_TABLE_iiiii[HEAP32[$5 >> 2] & 63]($4, $2, $3, 59807) | 0)) if (!(FUNCTION_TABLE_iiiii[HEAP32[$5 >> 2] & 63]($4, $2, $3, 59814) | 0)) label = 5; else {
$$0$ph = 3;
$error$sink = 9;
} else {
$$0$ph = 3;
$error$sink = 8;
}
break;
}
case 15:
{
$$0 = 3;
return $$0 | 0;
}
default:
label = 5;
}
if ((label | 0) == 5) {
$$0$ph = -1;
$error$sink = 4;
}
HEAP32[$0 >> 2] = $error$sink;
$$0 = $$0$ph;
return $$0 | 0;
}
function __ZN11TokenStreamD2Ev($0) {
$0 = $0 | 0;
var $1 = 0, $11 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0;
$1 = $0 + 4 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if ($2 | 0) {
_fclose($2) | 0;
HEAP32[$1 >> 2] = 0;
}
$4 = HEAP32[$0 >> 2] | 0;
if ($4 | 0) {
_free($4);
HEAP32[$0 >> 2] = 0;
}
$6 = $0 + 16 | 0;
$7 = HEAP32[$6 >> 2] | 0;
do if ($7 | 0) {
__THREW__ = 0;
invoke_vi(95, $7 | 0);
$9 = __THREW__;
__THREW__ = 0;
if ($9 & 1) {
$16 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($7);
___resumeException($16 | 0);
} else {
__ZdlPv($7);
HEAP32[$6 >> 2] = 0;
break;
}
} while (0);
$11 = $0 + 20 | 0;
$12 = HEAP32[$11 >> 2] | 0;
if (!$12) return;
$14 = HEAP32[$12 >> 2] | 0;
if ($14 | 0) _free($14);
__ZdlPv($12);
HEAP32[$11 >> 2] = 0;
return;
}
function __ZN6Vector7findRotERKS_S1_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $12 = f0, $14 = f0, $18 = f0, $21 = f0, $25 = f0, $3 = f0, $6 = f0, $8 = f0;
$3 = Math_fround(HEAPF32[$0 >> 2]);
$6 = Math_fround(Math_fround($3 * Math_fround(HEAPF32[$1 >> 2])) + Math_fround(0.0));
$8 = Math_fround(HEAPF32[$0 + 4 >> 2]);
$12 = Math_fround($6 + Math_fround($8 * Math_fround(HEAPF32[$1 + 4 >> 2])));
$14 = Math_fround(HEAPF32[$0 + 8 >> 2]);
$18 = Math_fround($12 + Math_fround($14 * Math_fround(HEAPF32[$1 + 8 >> 2])));
$21 = Math_fround(Math_fround($3 * Math_fround(HEAPF32[$2 >> 2])) + Math_fround(0.0));
$25 = Math_fround($21 + Math_fround($8 * Math_fround(HEAPF32[$2 + 4 >> 2])));
return Math_fround(+Math_atan2(+Math_fround($25 + Math_fround($14 * Math_fround(HEAPF32[$2 + 8 >> 2]))), +$18));
}
function __Z12completeQuadRK6VectorS1_S1_RS_($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $11 = f0, $13 = f0, $16 = f0, $18 = f0, $21 = f0, $24 = f0, $4 = f0, $6 = f0, $8 = f0;
$4 = Math_fround(HEAPF32[$0 >> 2]);
$6 = Math_fround($4 + Math_fround(HEAPF32[$2 >> 2]));
$8 = Math_fround(HEAPF32[$0 + 4 >> 2]);
$11 = Math_fround($8 + Math_fround(HEAPF32[$2 + 4 >> 2]));
$13 = Math_fround(HEAPF32[$0 + 8 >> 2]);
$16 = Math_fround($13 + Math_fround(HEAPF32[$2 + 8 >> 2]));
$18 = Math_fround($6 - Math_fround(HEAPF32[$1 >> 2]));
$21 = Math_fround($11 - Math_fround(HEAPF32[$1 + 4 >> 2]));
$24 = Math_fround($16 - Math_fround(HEAPF32[$1 + 8 >> 2]));
HEAPF32[$3 >> 2] = $18;
HEAPF32[$3 + 4 >> 2] = $21;
HEAPF32[$3 + 8 >> 2] = $24;
__ZNK6Vector16checkValidVectorEv($3);
return;
}
function _fclose($0) {
$0 = $0 | 0;
var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $25 = 0, $27 = 0, $30 = 0, $7 = 0, $8 = 0;
if ((HEAP32[$0 + 76 >> 2] | 0) > -1) $30 = ___lockfile($0) | 0; else $30 = 0;
___unlist_locked_file($0);
$7 = (HEAP32[$0 >> 2] & 1 | 0) != 0;
if (!$7) {
$8 = ___ofl_lock() | 0;
$10 = HEAP32[$0 + 52 >> 2] | 0;
$$pre = $0 + 56 | 0;
if ($10 | 0) HEAP32[$10 + 56 >> 2] = HEAP32[$$pre >> 2];
$15 = HEAP32[$$pre >> 2] | 0;
if ($15 | 0) HEAP32[$15 + 52 >> 2] = $10;
if ((HEAP32[$8 >> 2] | 0) == ($0 | 0)) HEAP32[$8 >> 2] = $15;
___ofl_unlock();
}
$21 = _fflush($0) | 0;
$25 = FUNCTION_TABLE_ii[HEAP32[$0 + 12 >> 2] & 63]($0) | 0 | $21;
$27 = HEAP32[$0 + 92 >> 2] | 0;
if ($27 | 0) _free($27);
if ($7) {
if ($30 | 0) ___unlockfile($0);
} else _free($0);
return $25 | 0;
}
function __ZN11MannerFlags14addMannerFlagsES_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $12 = 0, $17 = 0, $2 = 0, $9 = 0;
$2 = HEAP32[$1 >> 2] | 0;
L1 : do if ((HEAP32[$0 >> 2] | 0) < ($2 | 0)) switch ($2 | 0) {
case 1:
case 10:
case 9:
case 8:
case 6:
case 3:
case 2:
case 11:
{
HEAP32[$0 >> 2] = $2;
break L1;
break;
}
case 4:
{
HEAP32[$0 + 4 >> 2] = 1;
break L1;
break;
}
case 5:
{
HEAP32[$0 + 4 >> 2] = 3;
break L1;
break;
}
case 7:
{
HEAP8[$0 + 8 >> 0] = 1;
break L1;
break;
}
default:
break L1;
} while (0);
$9 = HEAP32[$1 + 4 >> 2] | 0;
if ($9 | 0) HEAP32[$0 + 4 >> 2] = $9;
$12 = $0 + 8 | 0;
if (HEAP8[$12 >> 0] | 0) {
$17 = 1;
HEAP8[$12 >> 0] = $17;
return;
}
$17 = HEAP8[$1 + 8 >> 0] | 0;
HEAP8[$12 >> 0] = $17;
return;
}
function __ZN7SSFrame10TrimMorphsEj($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$022 = 0, $10 = 0, $12 = 0, $2 = 0, $20 = 0, $21 = 0, $27 = 0, $3 = 0, $5 = 0, $7 = 0;
$2 = $0 + 16 | 0;
$3 = $0 + 20 | 0;
$5 = HEAP32[$2 >> 2] | 0;
$7 = (HEAP32[$3 >> 2] | 0) - $5 >> 2;
if ($7 >>> 0 <= $1 >>> 0) return;
$$022 = $1;
$20 = $5;
do {
$21 = HEAP32[$20 + ($$022 << 2) >> 2] | 0;
if (!$21) $27 = $20; else {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$21 >> 2] | 0) + 4 >> 2] & 255]($21);
$27 = HEAP32[$2 >> 2] | 0;
}
HEAP32[$27 + ($$022 << 2) >> 2] = 0;
$$022 = $$022 + 1 | 0;
$20 = HEAP32[$2 >> 2] | 0;
} while (($$022 | 0) != ($7 | 0));
$10 = $20 + ($1 << 2) | 0;
$12 = HEAP32[$3 >> 2] | 0;
if (($12 | 0) == ($10 | 0)) return;
HEAP32[$3 >> 2] = $12 + (~(($12 + -4 - $10 | 0) >>> 2) << 2);
return;
}
function __ZN6Vector15setCrossProductERKS_S1_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $11 = f0, $13 = f0, $14 = f0, $15 = f0, $16 = f0, $18 = f0, $21 = f0, $4 = f0, $6 = f0, $7 = f0, $9 = f0;
$4 = Math_fround(HEAPF32[$1 + 4 >> 2]);
$6 = Math_fround(HEAPF32[$2 + 8 >> 2]);
$7 = Math_fround($4 * $6);
$9 = Math_fround(HEAPF32[$1 + 8 >> 2]);
$11 = Math_fround(HEAPF32[$2 + 4 >> 2]);
$13 = Math_fround($7 - Math_fround($9 * $11));
$14 = Math_fround(HEAPF32[$2 >> 2]);
$15 = Math_fround($9 * $14);
$16 = Math_fround(HEAPF32[$1 >> 2]);
$18 = Math_fround($15 - Math_fround($6 * $16));
$21 = Math_fround(Math_fround($11 * $16) - Math_fround($4 * $14));
HEAPF32[$0 >> 2] = $13;
HEAPF32[$0 + 4 >> 2] = $18;
HEAPF32[$0 + 8 >> 2] = $21;
__ZNK6Vector16checkValidVectorEv($0);
return;
}
function __ZN10Quaternion5printEP8_IO_FILEi($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $10 = 0.0, $13 = 0.0, $4 = 0.0, $7 = 0.0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 64 | 0;
$vararg_buffer = sp;
$4 = +Math_fround(HEAPF32[$0 >> 2]);
$7 = +Math_fround(HEAPF32[$0 + 4 >> 2]);
$10 = +Math_fround(HEAPF32[$0 + 8 >> 2]);
$13 = +Math_fround(HEAPF32[$0 + 12 >> 2]);
HEAP32[$vararg_buffer >> 2] = $2;
HEAPF64[$vararg_buffer + 8 >> 3] = $4;
HEAP32[$vararg_buffer + 16 >> 2] = $2;
HEAPF64[$vararg_buffer + 24 >> 3] = $7;
HEAP32[$vararg_buffer + 32 >> 2] = $2;
HEAPF64[$vararg_buffer + 40 >> 3] = $10;
HEAP32[$vararg_buffer + 48 >> 2] = $2;
HEAPF64[$vararg_buffer + 56 >> 3] = $13;
_fprintf($1, 11860, $vararg_buffer) | 0;
STACKTOP = sp;
return;
}
function __ZN10XMLWrapper9ParseFileEPKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0, $4 = 0, $6 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer1 = sp + 8 | 0;
$vararg_buffer = sp;
do if (!$1) if (!0) $$0 = 1; else label = 5; else {
$4 = _fopen($1, 54169) | 0;
$6 = 0 != 0;
if (!$4) if ($6) {
label = 5;
break;
} else {
$$0 = 1;
break;
}
if ($6) {
HEAP32[$vararg_buffer1 >> 2] = $1;
__Z7eprintfPKcz(54215, $vararg_buffer1);
}
$$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] & 63]($0, $4) | 0;
} while (0);
if ((label | 0) == 5) {
HEAP32[$vararg_buffer >> 2] = $1;
__Z7eprintfPKcz(54171, $vararg_buffer);
$$0 = 1;
}
STACKTOP = sp;
return $$0 | 0;
}
function __ZNK22ThumbBaseJointRotation12toQuaternionER10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $4 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$2 = sp + 32 | 0;
$3 = sp + 16 | 0;
$4 = sp;
__ZN10QuaternionC2ERK6Vectorfb($2, $0 + 32 | 0, Math_fround(HEAPF32[$0 + 52 >> 2]), 1);
HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
HEAP32[$1 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
__ZN10QuaternionC2ERK6Vectorfb($3, $0 + 20 | 0, Math_fround(HEAPF32[$0 + 48 >> 2]), 1);
__ZN10Quaternion13setPreComposeERKS_($1, $3);
__ZN10QuaternionC2ERK6Vectorfb($4, $0 + 8 | 0, Math_fround(HEAPF32[$0 + 44 >> 2]), 1);
__ZN10Quaternion13setPreComposeERKS_($1, $4);
STACKTOP = sp;
return;
}
function __ZNK10NoMovement12CopyMovementEv($0) {
$0 = $0 | 0;
var $1 = 0, $11 = 0, $6 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$1 = __Znwj(528) | 0;
HEAP32[$1 >> 2] = 1984;
HEAP32[$1 + 12 >> 2] = 0;
HEAP32[$1 + 16 >> 2] = 0;
HEAP8[$1 + 20 >> 0] = 0;
__THREW__ = 0;
invoke_vi(141, $1 + 60 | 0);
$6 = __THREW__;
__THREW__ = 0;
if ($6 & 1) {
$11 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($1);
___resumeException($11 | 0);
}
HEAP32[$1 >> 2] = 2368;
_memcpy($1 + 4 | 0, $0 + 4 | 0, 524) | 0;
if (!0) {
STACKTOP = sp;
return $1 | 0;
}
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer >> 2] = $0;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
__Z7eprintfPKcz(38547, $vararg_buffer);
STACKTOP = sp;
return $1 | 0;
}
function __ZN14TwoArmAnimator11setMovementEP13BasicMovement($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $17 = 0, $18 = 0, $2 = 0, $5 = f0, $6 = 0, $8 = f0;
$2 = HEAP32[$0 >> 2] | 0;
if (!$2) {
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 40 >> 2] & 255]($1, HEAP32[16638] | 0);
HEAP32[$0 >> 2] = $1;
$17 = $0 + 16 | 0;
HEAP32[$17 >> 2] = $1;
$18 = $0 + 3572 | 0;
HEAP32[$18 >> 2] = $1;
return;
} else {
$5 = Math_fround(HEAPF32[$2 + 40 >> 2]);
$6 = $0 + 4 | 0;
$8 = Math_fround($5 + Math_fround(HEAPF32[$6 >> 2]));
HEAPF32[$6 >> 2] = $8;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 40 >> 2] & 255]($1, $0 + 7128 | 0);
HEAP32[$0 >> 2] = $1;
$17 = $0 + 16 | 0;
HEAP32[$17 >> 2] = $1;
$18 = $0 + 3572 | 0;
HEAP32[$18 >> 2] = $1;
return;
}
}
function __ZN22ThumbBaseJointRotation11interpolateERKS_S1_f($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = Math_fround($3);
var $11 = f0, $15 = f0, $19 = f0, $23 = f0, $27 = f0, $4 = f0, $7 = f0;
$4 = Math_fround(Math_fround(1.0) - $3);
$7 = Math_fround($4 * Math_fround(HEAPF32[$1 + 44 >> 2]));
$11 = Math_fround($7 + Math_fround(Math_fround(HEAPF32[$2 + 44 >> 2]) * $3));
HEAPF32[$0 + 44 >> 2] = $11;
$15 = Math_fround($4 * Math_fround(HEAPF32[$1 + 48 >> 2]));
$19 = Math_fround($15 + Math_fround(Math_fround(HEAPF32[$2 + 48 >> 2]) * $3));
HEAPF32[$0 + 48 >> 2] = $19;
$23 = Math_fround($4 * Math_fround(HEAPF32[$1 + 52 >> 2]));
$27 = Math_fround($23 + Math_fround(Math_fround(HEAPF32[$2 + 52 >> 2]) * $3));
HEAPF32[$0 + 52 >> 2] = $27;
return;
}
function __ZN6Vector11setMidPointERKS_S1_f($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = Math_fround($3);
var $12 = f0, $16 = f0, $20 = f0, $24 = f0, $4 = f0, $6 = f0, $9 = f0;
$4 = Math_fround(Math_fround(1.0) - $3);
$6 = Math_fround($4 * Math_fround(HEAPF32[$1 >> 2]));
$9 = Math_fround($6 + Math_fround(Math_fround(HEAPF32[$2 >> 2]) * $3));
HEAPF32[$0 >> 2] = $9;
$12 = Math_fround($4 * Math_fround(HEAPF32[$1 + 4 >> 2]));
$16 = Math_fround($12 + Math_fround(Math_fround(HEAPF32[$2 + 4 >> 2]) * $3));
HEAPF32[$0 + 4 >> 2] = $16;
$20 = Math_fround($4 * Math_fround(HEAPF32[$1 + 8 >> 2]));
$24 = Math_fround($20 + Math_fround(Math_fround(HEAPF32[$2 + 8 >> 2]) * $3));
HEAPF32[$0 + 8 >> 2] = $24;
__ZNK6Vector16checkValidVectorEv($0);
return;
}
function __ZN28InvertibleDynamicStringArray8AddValueEsPKc($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $12 = 0, $17 = 0, $23 = 0, $3 = 0, $5 = 0, $6 = 0;
$3 = __Z10copyStringPKc($2) | 0;
$5 = HEAP32[$0 + 4 >> 2] | 0;
$6 = $1 << 16 >> 16;
if ($1 << 16 >> 16 < 0) {
$23 = HEAP32[$0 >> 2] | 0;
__ZN7HashAnyIPKciE7addItemES1_i($23, $3, $6);
return;
}
if ((HEAP32[$5 + 8 >> 2] | 0) <= ($6 | 0)) {
$12 = HEAP32[$5 + 4 >> 2] | 0;
__ZN13DynamicArrayPIKcE6resizeEi($5, ($12 | 0) > ($6 | 0) ? $12 : $6 + 1 + ($6 >>> 1) | 0);
}
$17 = $5 + 12 | 0;
if ((HEAP32[$17 >> 2] | 0) <= ($6 | 0)) HEAP32[$17 >> 2] = $6 + 1;
HEAP32[(HEAP32[$5 >> 2] | 0) + ($6 << 2) >> 2] = $3;
$23 = HEAP32[$0 >> 2] | 0;
__ZN7HashAnyIPKciE7addItemES1_i($23, $3, $6);
return;
}
function __ZNK18FingerPlayMovement10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
HEAP8[$2 >> 0] = 60;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2, 1) | 0, 51565, 10) | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$0 >> 2] | 0) + 84 >> 2] & 127]($0, $1, 1);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36603, 3) | 0;
STACKTOP = sp;
return;
}
function __ZNK16AtomicTimedMorph7newCopyEv($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
$1 = __Znwj(52) | 0;
$2 = $1 + 4 | 0;
HEAP32[$1 >> 2] = 1920;
$3 = $1 + 24 | 0;
$4 = $0 + 4 | 0;
HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
HEAP32[$2 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
HEAP32[$2 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
HEAP32[$2 + 16 >> 2] = HEAP32[$4 + 16 >> 2];
$5 = $0 + 24 | 0;
HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
HEAP32[$3 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
HEAP32[$3 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
HEAP32[$3 + 12 >> 2] = HEAP32[$5 + 12 >> 2];
HEAP32[$3 + 16 >> 2] = HEAP32[$5 + 16 >> 2];
HEAP32[$3 + 20 >> 2] = HEAP32[$5 + 20 >> 2];
HEAP16[$3 + 24 >> 1] = HEAP16[$5 + 24 >> 1] | 0;
return $1 | 0;
}
function __ZN8IFS_specD2Ev($0) {
$0 = $0 | 0;
var $1 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $18 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0;
$1 = HEAP32[$0 >> 2] | 0;
if ($1 | 0) {
$3 = HEAP32[$1 >> 2] | 0;
if ($3 | 0) _free($3);
__ZdlPv($1);
HEAP32[$0 >> 2] = 0;
}
$5 = $0 + 4 | 0;
$6 = HEAP32[$5 >> 2] | 0;
if ($6 | 0) {
$8 = HEAP32[$6 >> 2] | 0;
if ($8 | 0) _free($8);
__ZdlPv($6);
HEAP32[$5 >> 2] = 0;
}
$10 = $0 + 8 | 0;
$11 = HEAP32[$10 >> 2] | 0;
if ($11 | 0) {
$13 = HEAP32[$11 >> 2] | 0;
if ($13 | 0) _free($13);
__ZdlPv($11);
HEAP32[$10 >> 2] = 0;
}
$15 = $0 + 12 | 0;
$16 = HEAP32[$15 >> 2] | 0;
if (!$16) return;
$18 = HEAP32[$16 >> 2] | 0;
if ($18 | 0) _free($18);
__ZdlPv($16);
HEAP32[$15 >> 2] = 0;
return;
}
function __Z20StaticGestureFromXMLP7GestureP13DynamicArrayPI7XMLCellEi($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$016 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $13 = 0, $14 = 0, $6 = 0, label = 0;
$$pre = $1 + 12 | 0;
if (!$1) $6 = 0; else $6 = HEAP32[$$pre >> 2] | 0;
$$016 = $2;
while (1) {
if (($$016 | 0) >= ($6 | 0)) {
$$2 = $$016;
label = 9;
break;
}
if (($$016 | 0) < 0) $13 = 0; else if ((HEAP32[$$pre >> 2] | 0) > ($$016 | 0)) $13 = HEAP32[(HEAP32[$1 >> 2] | 0) + ($$016 << 2) >> 2] | 0; else $13 = 0;
$14 = __Z25AddToStaticGestureFromXMLP7GestureP7XMLCell($0, $13) | 0;
$$1 = $$016 + ($14 & 1) | 0;
if ($14) $$016 = $$1; else {
$$2 = $$1;
label = 9;
break;
}
}
if ((label | 0) == 9) return $$2 | 0;
return 0;
}
function __ZNK13WristMovement10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
HEAP8[$2 >> 0] = 60;
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, $2, 1) | 0, 51541, 11) | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$0 >> 2] | 0) + 84 >> 2] & 127]($0, $1, 1);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 36603, 3) | 0;
STACKTOP = sp;
return;
}
function _element1($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $5 = 0;
switch ($1 | 0) {
case 18:
{
$5 = $4 + 24 | 0;
if (FUNCTION_TABLE_iiiii[HEAP32[$5 >> 2] & 63]($4, $2, $3, 59853) | 0) {
HEAP32[$0 >> 2] = 24;
HEAP32[$0 + 8 >> 2] = 39;
$$0 = 42;
return $$0 | 0;
}
if (FUNCTION_TABLE_iiiii[HEAP32[$5 >> 2] & 63]($4, $2, $3, 59859) | 0) {
HEAP32[$0 >> 2] = 24;
HEAP32[$0 + 8 >> 2] = 39;
$$0 = 41;
return $$0 | 0;
}
break;
}
case 23:
{
HEAP32[$0 >> 2] = 25;
HEAP32[$0 + 4 >> 2] = 1;
$$0 = 44;
return $$0 | 0;
}
case 15:
{
$$0 = 39;
return $$0 | 0;
}
default:
{}
}
HEAP32[$0 >> 2] = 4;
$$0 = -1;
return $$0 | 0;
}
function __ZN7RepSpec10initialiseEv($0) {
$0 = $0 | 0;
var $12 = f0, $15 = f0, $16 = f0, $2 = 0, $20 = f0, $21 = 0, $25 = f0, $4 = f0, $5 = f0;
$2 = HEAP8[$0 + 4 >> 0] | 0;
$4 = Math_fround(HEAPF32[16552]);
$5 = $2 << 24 >> 24 ? $4 : Math_fround(-1.0);
HEAPF32[$0 + 12 >> 2] = $5;
if (!($2 << 24 >> 24)) {
$12 = Math_fround(HEAPF32[458]);
$15 = HEAP8[$0 + 3 >> 0] | 0 ? $12 : Math_fround(1.0);
} else $15 = Math_fround(HEAPF32[16551]);
HEAPF32[$0 + 8 >> 2] = $15;
$16 = Math_fround($15 + Math_fround(1.0));
HEAPF32[$0 + 16 >> 2] = $16;
$20 = Math_fround($16 * Math_fround(HEAP16[$0 >> 1] | 0));
$21 = $0 + 20 | 0;
HEAPF32[$21 >> 2] = $20;
if (HEAP8[$0 + 2 >> 0] | 0) return;
$25 = Math_fround($20 - $15);
HEAPF32[$21 >> 2] = $25;
return;
}
function __ZNK10Direction35printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $15 = 0.0, $3 = f0, $4 = 0, $6 = f0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$3 = Math_fround(HEAPF32[$0 >> 2]);
$4 = $3 == Math_fround(0.0);
$6 = Math_fround(HEAPF32[$0 + 4 >> 2]);
if ($4 & $6 == Math_fround(0.0)) if (Math_fround(HEAPF32[$0 + 8 >> 2]) == Math_fround(0.0)) {
_fwrite(53768, 5, 1, $1) | 0;
STACKTOP = sp;
return;
}
$15 = +Math_fround(HEAPF32[$0 + 8 >> 2]);
HEAPF64[$vararg_buffer >> 3] = +$3;
HEAPF64[$vararg_buffer + 8 >> 3] = +$6;
HEAPF64[$vararg_buffer + 16 >> 3] = $15;
_fprintf($1, 53774, $vararg_buffer) | 0;
STACKTOP = sp;
return;
}
function __Z11trimAnglePIf($0) {
$0 = Math_fround($0);
var $$1$i = f0, $1 = f0, $10 = 0, $16 = f0, $2 = f0, $9 = f0;
$1 = Math_fround($0 + Math_fround(3.14159274));
$2 = Math_fround($1 / Math_fround(6.28318548));
if ($1 < Math_fround(0.0)) {
$9 = Math_fround(Math_fround($1 + Math_fround(6.28318548)) + Math_fround(Math_fround(~~Math_fround(-$2) | 0) * Math_fround(6.28318548)));
$10 = $9 == Math_fround(6.28318548);
$$1$i = $10 ? Math_fround(0.0) : $9;
$16 = Math_fround($$1$i + Math_fround(-3.14159274));
return Math_fround($16);
} else {
$$1$i = Math_fround($1 - Math_fround(Math_fround(~~$2 | 0) * Math_fround(6.28318548)));
$16 = Math_fround($$1$i + Math_fround(-3.14159274));
return Math_fround($16);
}
return Math_fround(0.0);
}
function _XmlUtf8Encode($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0;
if (($0 | 0) < 0) {
$$0 = 0;
return $$0 | 0;
}
if (($0 | 0) < 128) {
HEAP8[$1 >> 0] = $0;
$$0 = 1;
return $$0 | 0;
}
if (($0 | 0) < 2048) {
HEAP8[$1 >> 0] = $0 >>> 6 | 192;
HEAP8[$1 + 1 >> 0] = $0 & 63 | 128;
$$0 = 2;
return $$0 | 0;
}
if (($0 | 0) < 65536) {
HEAP8[$1 >> 0] = $0 >>> 12 | 224;
HEAP8[$1 + 1 >> 0] = $0 >>> 6 & 63 | 128;
HEAP8[$1 + 2 >> 0] = $0 & 63 | 128;
$$0 = 3;
return $$0 | 0;
}
if (($0 | 0) >= 1114112) {
$$0 = 0;
return $$0 | 0;
}
HEAP8[$1 >> 0] = $0 >>> 18 | 240;
HEAP8[$1 + 1 >> 0] = $0 >>> 12 & 63 | 128;
HEAP8[$1 + 2 >> 0] = $0 >>> 6 & 63 | 128;
HEAP8[$1 + 3 >> 0] = $0 & 63 | 128;
$$0 = 4;
return $$0 | 0;
}
function __ZN10Direction3C2EPKc9Mirroring($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $10 = f0, $12 = 0, $14 = f0, $3 = 0, $6 = f0, $8 = 0, $tmpcast2$sroa$0$0$extract$trunc$i = 0;
$3 = HEAP16[$2 >> 1] | 0;
__ZN10Direction313setFromStringEPKc($0, $1);
$tmpcast2$sroa$0$0$extract$trunc$i = $3 & 255;
if ($tmpcast2$sroa$0$0$extract$trunc$i & 2) {
$6 = Math_fround(-Math_fround(HEAPF32[$0 >> 2]));
HEAPF32[$0 >> 2] = $6;
}
if ($tmpcast2$sroa$0$0$extract$trunc$i & 4) {
$8 = $0 + 4 | 0;
$10 = Math_fround(-Math_fround(HEAPF32[$8 >> 2]));
HEAPF32[$8 >> 2] = $10;
}
if (!($tmpcast2$sroa$0$0$extract$trunc$i & 8)) return;
$12 = $0 + 8 | 0;
$14 = Math_fround(-Math_fround(HEAPF32[$12 >> 2]));
HEAPF32[$12 >> 2] = $14;
return;
}
function _utf8_isInvalid4($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $11 = 0, $16 = 0, $19 = 0, $20 = 0, $30 = 0, $31 = 0, $4 = 0;
$4 = HEAPU8[$1 + 3 >> 0] | 0;
if (($4 & 128 | 0) == 0 | ($4 & 192 | 0) == 192) {
$31 = 1;
$30 = $31 & 1;
return $30 | 0;
}
$11 = HEAPU8[$1 + 2 >> 0] | 0;
if (($11 & 128 | 0) == 0 | ($11 & 192 | 0) == 192) {
$31 = 1;
$30 = $31 & 1;
return $30 | 0;
}
$16 = HEAP8[$1 >> 0] | 0;
$19 = HEAP8[$1 + 1 >> 0] | 0;
$20 = $19 & 255;
if ($16 << 24 >> 24 == -16) {
$31 = ($19 & 255) < 144 | ($20 & 192 | 0) == 192;
$30 = $31 & 1;
return $30 | 0;
} else {
$31 = ($20 & 128 | 0) == 0 ? 1 : $16 << 24 >> 24 == -12 ? ($19 & 255) > 143 : ($20 & 192 | 0) == 192;
$30 = $31 & 1;
return $30 | 0;
}
return 0;
}
function __ZN19OneHConcretePosture13shiftHandSiteERK6Vector($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $6 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$2 = sp + 12 | 0;
__ZN6VectorC2Ev($2);
$3 = $0 + 16 | 0;
__ZN6Vector11setSubtractERKS_S1_($2, $3, $1);
__ZNK10Quaternion12rotateVectorER6Vector($0 + 40 | 0, $2);
__ZN6Vector11setSubtractERKS_($0 + 4 | 0, $2);
$6 = $0 + 28 | 0;
__ZN6Vector7setFromERKS_($6, $3);
__ZN6Vector7setFromERKS_($3, $1);
if (!0) {
STACKTOP = sp;
return;
}
__Z7eprintfPKcz(46572, sp);
__ZNK6Vector5printEP8_IO_FILEi($6, HEAP32[16082] | 0, 3);
__Z7eprintfPKcz(46520, sp + 8 | 0);
__ZNK6Vector5printEP8_IO_FILEi($3, HEAP32[16082] | 0, 3);
__Z5eputcc(10);
STACKTOP = sp;
return;
}
function __ZNK11HanimAvatar12locateSiteIDEb6SiteID($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, $5 = 0, $tmpcast$byval_copy = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$tmpcast$byval_copy = sp + 12 | 0;
$3 = sp + 8 | 0;
$4 = sp + 4 | 0;
$5 = sp;
HEAP32[$3 >> 2] = 0;
HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$5 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$5 + 1 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 2 >> 0] = HEAP8[$5 + 2 >> 0] | 0;
HEAP8[$tmpcast$byval_copy + 3 >> 0] = HEAP8[$5 + 3 >> 0] | 0;
__ZNK11HanimAvatar12locateSiteIDEb6SiteIDP6VectorRP5JointRP4Site($0, $1, $tmpcast$byval_copy, 0, $3, $4);
STACKTOP = sp;
return HEAP32[$4 >> 2] | 0;
}
function _animgenAllocate($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0$i = 0, $12 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0;
if (!(($0 | 0) == 0 & (HEAP32[17848] | 0) == 1 & (HEAP32[17849] | 0) == 0)) {
$$0$i = 0;
return $$0$i | 0;
}
$12 = __Znwj(44) | 0;
HEAP32[$12 >> 2] = 0;
$13 = $12 + 4 | 0;
HEAP8[$13 >> 0] = 0;
$14 = $12 + 5 | 0;
HEAP8[$14 >> 0] = 1;
HEAP32[$12 + 8 >> 2] = 0;
HEAP32[$12 + 16 >> 2] = 0;
HEAP32[$12 + 32 >> 2] = 0;
HEAP32[$12 + 36 >> 2] = 0;
$19 = $12 + 40 | 0;
HEAP32[$19 >> 2] = 1;
$20 = __Z10copyStringPKc($1) | 0;
HEAP32[$12 >> 2] = $20;
HEAP8[$13 >> 0] = $2 & 1;
HEAP8[$14 >> 0] = $3 & 1;
HEAP32[$19 >> 2] = 1;
HEAP32[17849] = $12;
$$0$i = 1;
return $$0$i | 0;
}
function ___fflush_unlocked($0) {
$0 = $0 | 0;
var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, label = 0;
$1 = $0 + 20 | 0;
$3 = $0 + 28 | 0;
if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 31]($0, 0, 0) | 0;
if (!(HEAP32[$1 >> 2] | 0)) $$0 = -1; else label = 3;
} else label = 3;
if ((label | 0) == 3) {
$10 = $0 + 4 | 0;
$11 = HEAP32[$10 >> 2] | 0;
$12 = $0 + 8 | 0;
$13 = HEAP32[$12 >> 2] | 0;
if ($11 >>> 0 < $13 >>> 0) FUNCTION_TABLE_iiii[HEAP32[$0 + 40 >> 2] & 31]($0, $11 - $13 | 0, 1) | 0;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$3 >> 2] = 0;
HEAP32[$1 >> 2] = 0;
HEAP32[$12 >> 2] = 0;
HEAP32[$10 >> 2] = 0;
$$0 = 0;
}
return $$0 | 0;
}
function __Z8remfloatff($0, $1) {
$0 = Math_fround($0);
$1 = Math_fround($1);
var $$022 = f0, $$023 = f0, $$1 = f0, $13 = f0, $3 = 0, $4 = f0, $5 = f0, $6 = f0;
if ($1 == Math_fround(0.0)) {
$$1 = $0;
return Math_fround($$1);
}
$3 = $1 < Math_fround(0.0);
$4 = Math_fround(-$0);
$5 = Math_fround(-$1);
$$023 = $3 ? $5 : $1;
$$022 = $3 ? $4 : $0;
$6 = Math_fround($$022 / $$023);
if ($$022 < Math_fround(0.0)) {
$13 = Math_fround(Math_fround($$023 + $$022) + Math_fround($$023 * Math_fround(~~Math_fround(-$6) | 0)));
$$1 = $13 == $$023 ? Math_fround(0.0) : $13;
return Math_fround($$1);
} else {
$$1 = Math_fround($$022 - Math_fround($$023 * Math_fround(~~$6 | 0)));
return Math_fround($$1);
}
return Math_fround(0.0);
}
function __ZN16AtomicTimedMorph13scaleDurationEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $10 = f0, $14 = f0, $15 = 0, $16 = f0, $20 = f0, $3 = f0, $4 = 0, $8 = f0, $9 = 0;
$3 = Math_fround(HEAPF32[$0 + 4 >> 2]);
$4 = $0 + 8 | 0;
$8 = Math_fround($3 + Math_fround(Math_fround(Math_fround(HEAPF32[$4 >> 2]) - $3) * $1));
HEAPF32[$4 >> 2] = $8;
$9 = $0 + 12 | 0;
$10 = Math_fround(HEAPF32[$9 >> 2]);
if ($10 != Math_fround(-1.0)) {
$14 = Math_fround($3 + Math_fround(Math_fround($10 - $3) * $1));
HEAPF32[$9 >> 2] = $14;
}
$15 = $0 + 16 | 0;
$16 = Math_fround(HEAPF32[$15 >> 2]);
if (!($16 != Math_fround(-1.0))) return;
$20 = Math_fround($3 + Math_fround(Math_fround($16 - $3) * $1));
HEAPF32[$15 >> 2] = $20;
return;
}
function __ZN20HanimAnimationRecord10openOutputEv($0) {
$0 = $0 | 0;
var $$0 = 0, $1 = 0, $10 = 0, $14 = 0, $2 = 0, $5 = 0, $9 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$1 = $0 + 12 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if (!$2) {
$$0 = 1;
STACKTOP = sp;
return $$0 | 0;
}
$5 = HEAP32[$0 + 20 >> 2] | 0;
if (($5 | 0) == 5) {
$$0 = 1;
STACKTOP = sp;
return $$0 | 0;
}
$9 = _fopen($2, ($5 | 0) == 1 ? 12585 : 57208) | 0;
$10 = $0 + 96 | 0;
HEAP32[$10 >> 2] = $9;
if (!$9) {
HEAP32[$vararg_buffer >> 2] = HEAP32[$1 >> 2];
__Z7eprintfPKcz(12588, $vararg_buffer);
$14 = HEAP32[$10 >> 2] | 0;
} else $14 = $9;
$$0 = ($14 | 0) != 0;
STACKTOP = sp;
return $$0 | 0;
}
function __ZN10Quaternion11setSubtractERKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $11 = f0, $12 = 0, $14 = f0, $16 = f0, $17 = 0, $19 = f0, $2 = f0, $4 = f0, $6 = f0, $7 = 0, $9 = f0;
$2 = Math_fround(HEAPF32[$1 >> 2]);
$4 = Math_fround(Math_fround(HEAPF32[$0 >> 2]) - $2);
HEAPF32[$0 >> 2] = $4;
$6 = Math_fround(HEAPF32[$1 + 4 >> 2]);
$7 = $0 + 4 | 0;
$9 = Math_fround(Math_fround(HEAPF32[$7 >> 2]) - $6);
HEAPF32[$7 >> 2] = $9;
$11 = Math_fround(HEAPF32[$1 + 8 >> 2]);
$12 = $0 + 8 | 0;
$14 = Math_fround(Math_fround(HEAPF32[$12 >> 2]) - $11);
HEAPF32[$12 >> 2] = $14;
$16 = Math_fround(HEAPF32[$1 + 12 >> 2]);
$17 = $0 + 12 | 0;
$19 = Math_fround(Math_fround(HEAPF32[$17 >> 2]) - $16);
HEAPF32[$17 >> 2] = $19;
return;
}
function _notation1($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0$ph = 0, $5 = 0, $error$sink = 0, label = 0;
switch ($1 | 0) {
case 18:
{
label = 2;
break;
}
case 15:
{
$$0 = 17;
return $$0 | 0;
}
default:
label = 4;
}
if ((label | 0) == 2) {
$5 = $4 + 24 | 0;
if (!(FUNCTION_TABLE_iiiii[HEAP32[$5 >> 2] & 63]($4, $2, $3, 59807) | 0)) if (!(FUNCTION_TABLE_iiiii[HEAP32[$5 >> 2] & 63]($4, $2, $3, 59814) | 0)) label = 4; else {
$$0$ph = 17;
$error$sink = 22;
} else {
$$0$ph = 17;
$error$sink = 21;
}
}
if ((label | 0) == 4) {
$$0$ph = -1;
$error$sink = 4;
}
HEAP32[$0 >> 2] = $error$sink;
$$0 = $$0$ph;
return $$0 | 0;
}
function __ZN10Quaternion6setAddERKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $11 = f0, $12 = 0, $14 = f0, $16 = f0, $17 = 0, $19 = f0, $2 = f0, $4 = f0, $6 = f0, $7 = 0, $9 = f0;
$2 = Math_fround(HEAPF32[$1 >> 2]);
$4 = Math_fround($2 + Math_fround(HEAPF32[$0 >> 2]));
HEAPF32[$0 >> 2] = $4;
$6 = Math_fround(HEAPF32[$1 + 4 >> 2]);
$7 = $0 + 4 | 0;
$9 = Math_fround($6 + Math_fround(HEAPF32[$7 >> 2]));
HEAPF32[$7 >> 2] = $9;
$11 = Math_fround(HEAPF32[$1 + 8 >> 2]);
$12 = $0 + 8 | 0;
$14 = Math_fround($11 + Math_fround(HEAPF32[$12 >> 2]));
HEAPF32[$12 >> 2] = $14;
$16 = Math_fround(HEAPF32[$1 + 12 >> 2]);
$17 = $0 + 12 | 0;
$19 = Math_fround($16 + Math_fround(HEAPF32[$17 >> 2]));
HEAPF32[$17 >> 2] = $19;
return;
}
function __ZN16CompoundMovement12addComponentEP13BasicMovement($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$pre$phiZ2D = 0, $10 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0;
$2 = $0 + 528 | 0;
$3 = $0 + 540 | 0;
$4 = HEAP32[$3 >> 2] | 0;
if (($4 | 0) < 0) return;
if ((HEAP32[$0 + 536 >> 2] | 0) > ($4 | 0)) {
$$pre$phiZ2D = $4 + 1 | 0;
label = 5;
} else {
$10 = HEAP32[$0 + 532 >> 2] | 0;
$12 = $4 + 1 | 0;
__ZN13DynamicArrayPI13BasicMovementE6resizeEi($2, ($10 | 0) > ($4 | 0) ? $10 : $12 + ($4 >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($4 | 0)) {
$$pre$phiZ2D = $12;
label = 5;
}
}
if ((label | 0) == 5) HEAP32[$3 >> 2] = $$pre$phiZ2D;
HEAP32[(HEAP32[$2 >> 2] | 0) + ($4 << 2) >> 2] = $1;
return;
}
function __Z20DestroySiGMLHandlersv() {
var $$0 = 0, $$01 = 0, $1 = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $9 = 0;
do if (0) {
__THREW__ = 0;
invoke_vi(137, 0);
$1 = __THREW__;
__THREW__ = 0;
if (!($1 & 1)) {
__ZdlPv(0);
break;
}
$3 = ___cxa_find_matching_catch_2() | 0;
$4 = tempRet0;
__ZdlPv(0);
$$0 = $4;
$$01 = $3;
___resumeException($$01 | 0);
} while (0);
$5 = HEAP32[16639] | 0;
if (!$5) return;
__THREW__ = 0;
invoke_vi(138, $5 | 0);
$7 = __THREW__;
__THREW__ = 0;
if ($7 & 1) {
$9 = ___cxa_find_matching_catch_2() | 0;
$10 = tempRet0;
__ZdlPv($5);
$$0 = $10;
$$01 = $9;
___resumeException($$01 | 0);
} else {
__ZdlPv($5);
HEAP32[16639] = 0;
return;
}
}
function __ZNK11MannerFlags5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $11 = 0, $15 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$5 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17761] | 0, HEAP32[$0 >> 2] | 0) | 0;
$6 = HEAP32[$0 >> 2] | 0;
$11 = HEAP8[24767 + (HEAP32[$0 + 4 >> 2] | 0) >> 0] | 0;
$15 = HEAP8[$0 + 8 >> 0] | 0 ? 24771 : 72308;
HEAP32[$vararg_buffer >> 2] = $5;
HEAP32[$vararg_buffer + 4 >> 2] = $6;
HEAP32[$vararg_buffer + 8 >> 2] = $11;
HEAP32[$vararg_buffer + 12 >> 2] = $15;
_fprintf($1, 24773, $vararg_buffer) | 0;
STACKTOP = sp;
return;
}
function __Z9totalTimePK13DynamicArrayPI7GestureE($0) {
$0 = $0 | 0;
var $$0 = f0, $$01619 = 0, $$01718 = f0, $13 = f0, $3 = 0, $5 = 0, $9 = 0;
if (!$0) {
$$0 = Math_fround(0.0);
return Math_fround($$0);
}
$3 = HEAP32[$0 + 12 >> 2] | 0;
if (($3 | 0) < 1) {
$$0 = Math_fround(0.0);
return Math_fround($$0);
}
$5 = HEAP32[$0 >> 2] | 0;
$$01619 = 0;
$$01718 = Math_fround(0.0);
while (1) {
$9 = HEAP32[(HEAP32[$5 + ($$01619 << 2) >> 2] | 0) + 44 >> 2] | 0;
$13 = Math_fround($$01718 + Math_fround(HEAPF32[(($9 | 0) == 0 ? 64676 : $9 + 40 | 0) >> 2]));
$$01619 = $$01619 + 1 | 0;
if (($$01619 | 0) >= ($3 | 0)) {
$$0 = $13;
break;
} else $$01718 = $13;
}
return Math_fround($$0);
}
function __Z14AppendPlayItemP13DynamicArrayPI7GestureEPS0_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$pre$phiZ2D = 0, $10 = 0, $12 = 0, $3 = 0, $4 = 0, label = 0;
if (!$0) return;
$3 = $0 + 12 | 0;
$4 = HEAP32[$3 >> 2] | 0;
if (($4 | 0) < 0) return;
if ((HEAP32[$0 + 8 >> 2] | 0) > ($4 | 0)) {
$$pre$phiZ2D = $4 + 1 | 0;
label = 6;
} else {
$10 = HEAP32[$0 + 4 >> 2] | 0;
$12 = $4 + 1 | 0;
__ZN13DynamicArrayPI7GestureE6resizeEi($0, ($10 | 0) > ($4 | 0) ? $10 : $12 + ($4 >>> 1) | 0);
if ((HEAP32[$3 >> 2] | 0) <= ($4 | 0)) {
$$pre$phiZ2D = $12;
label = 6;
}
}
if ((label | 0) == 6) HEAP32[$3 >> 2] = $$pre$phiZ2D;
HEAP32[(HEAP32[$0 >> 2] | 0) + ($4 << 2) >> 2] = $1;
return;
}
function __Z11printDigitsP8_IO_FILEs($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$01516 = 0, $$017 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$0) {
STACKTOP = sp;
return;
}
$3 = $1 << 16 >> 16;
if (!($1 << 16 >> 16)) {
_fwrite(24677, 6, 1, $0) | 0;
STACKTOP = sp;
return;
}
if ($1 << 16 >> 16 < 0) {
HEAP32[$vararg_buffer >> 2] = $3;
_fprintf($0, 24785, $vararg_buffer) | 0;
STACKTOP = sp;
return;
} else {
$$01516 = 0;
$$017 = $3;
}
while (1) {
if ($$017 & 1 | 0) _fputc($$01516 + 49 | 0, $0) | 0;
$$017 = $$017 >>> 1;
if (!$$017) break; else $$01516 = $$01516 + 1 | 0;
}
STACKTOP = sp;
return;
}
function __ZN10Quaternion11setSubtractERKS_S1_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $10 = f0, $13 = f0, $16 = f0, $19 = f0, $22 = f0, $3 = f0, $5 = f0, $7 = f0;
$3 = Math_fround(HEAPF32[$1 >> 2]);
$5 = Math_fround($3 - Math_fround(HEAPF32[$2 >> 2]));
HEAPF32[$0 >> 2] = $5;
$7 = Math_fround(HEAPF32[$1 + 4 >> 2]);
$10 = Math_fround($7 - Math_fround(HEAPF32[$2 + 4 >> 2]));
HEAPF32[$0 + 4 >> 2] = $10;
$13 = Math_fround(HEAPF32[$1 + 8 >> 2]);
$16 = Math_fround($13 - Math_fround(HEAPF32[$2 + 8 >> 2]));
HEAPF32[$0 + 8 >> 2] = $16;
$19 = Math_fround(HEAPF32[$1 + 12 >> 2]);
$22 = Math_fround($19 - Math_fround(HEAPF32[$2 + 12 >> 2]));
HEAPF32[$0 + 12 >> 2] = $22;
return;
}
function _entity7($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $5 = 0;
switch ($1 | 0) {
case 18:
{
$5 = $4 + 24 | 0;
if (FUNCTION_TABLE_iiiii[HEAP32[$5 >> 2] & 63]($4, $2, $3, 59807) | 0) {
HEAP32[$0 >> 2] = 44;
$$0 = 11;
return $$0 | 0;
}
if (FUNCTION_TABLE_iiiii[HEAP32[$5 >> 2] & 63]($4, $2, $3, 59814) | 0) {
HEAP32[$0 >> 2] = 45;
$$0 = 11;
return $$0 | 0;
}
break;
}
case 27:
{
HEAP32[$0 >> 2] = 24;
HEAP32[$0 + 8 >> 2] = 11;
$$0 = 12;
return $$0 | 0;
}
case 15:
{
$$0 = 11;
return $$0 | 0;
}
default:
{}
}
HEAP32[$0 >> 2] = 4;
$$0 = -1;
return $$0 | 0;
}
function _entity2($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $5 = 0;
switch ($1 | 0) {
case 18:
{
$5 = $4 + 24 | 0;
if (FUNCTION_TABLE_iiiii[HEAP32[$5 >> 2] & 63]($4, $2, $3, 59807) | 0) {
HEAP32[$0 >> 2] = 40;
$$0 = 11;
return $$0 | 0;
}
if (FUNCTION_TABLE_iiiii[HEAP32[$5 >> 2] & 63]($4, $2, $3, 59814) | 0) {
HEAP32[$0 >> 2] = 41;
$$0 = 11;
return $$0 | 0;
}
break;
}
case 27:
{
HEAP32[$0 >> 2] = 24;
HEAP32[$0 + 8 >> 2] = 11;
$$0 = 12;
return $$0 | 0;
}
case 15:
{
$$0 = 11;
return $$0 | 0;
}
default:
{}
}
HEAP32[$0 >> 2] = 4;
$$0 = -1;
return $$0 | 0;
}
function __ZN9HashChainI13SiGML_ElementPFvP7GestureP7XMLCellEED2Ev($0) {
$0 = $0 | 0;
var $1 = 0, $11 = 0, $2 = 0, $4 = 0, $5 = 0, $7 = 0, $9 = 0, label = 0;
$1 = $0 + 8 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if (!$2) return;
$5 = $2;
while (1) {
$4 = $5 + 8 | 0;
HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
HEAP32[$4 >> 2] = 0;
__THREW__ = 0;
invoke_vi(139, $5 | 0);
$7 = __THREW__;
__THREW__ = 0;
if ($7 & 1) {
label = 6;
break;
}
__ZdlPv($5);
$9 = HEAP32[$1 >> 2] | 0;
if (!$9) {
label = 5;
break;
} else $5 = $9;
}
if ((label | 0) == 5) return; else if ((label | 0) == 6) {
$11 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($5);
___resumeException($11 | 0);
}
}
function __ZN19SHMScalarController8new_ref1Ef($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $13 = f0, $15 = 0, $16 = f0, $17 = 0, $8 = f0, $storemerge = f0, $storemerge2 = f0;
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 63]($0, $1);
$8 = Math_fround(FUNCTION_TABLE_fi[HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] & 3]($0));
$13 = Math_fround($8 - Math_fround(FUNCTION_TABLE_fi[HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] & 3]($0)));
$15 = $13 < Math_fround(0.0);
$16 = Math_fround(-$13);
$storemerge = $15 ? $16 : $13;
$17 = $storemerge < Math_fround(.0000999999974);
$storemerge2 = $17 ? Math_fround(.0000999999974) : $storemerge;
HEAPF32[$0 + 8 >> 2] = $storemerge2;
return;
}
function __ZNK6Vector5printEP8_IO_FILEi($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $11 = 0.0, $5 = 0.0, $8 = 0.0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$5 = +Math_fround(HEAPF32[$0 >> 2]);
$8 = +Math_fround(HEAPF32[$0 + 4 >> 2]);
$11 = +Math_fround(HEAPF32[$0 + 8 >> 2]);
HEAP32[$vararg_buffer >> 2] = $2;
HEAPF64[$vararg_buffer + 8 >> 3] = $5;
HEAP32[$vararg_buffer + 16 >> 2] = $2;
HEAPF64[$vararg_buffer + 24 >> 3] = $8;
HEAP32[$vararg_buffer + 32 >> 2] = $2;
HEAPF64[$vararg_buffer + 40 >> 3] = $11;
_fprintf($1, 11888, $vararg_buffer) | 0;
STACKTOP = sp;
return;
}
function __ZN20QuaternionController14set_perceptionE10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $16 = 0, $2 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
__ZN10Quaternion19setNonNegativePhaseEv($2);
if ((HEAP32[$0 + 448 >> 2] | 0) == 1) {
STACKTOP = sp;
return;
}
$16 = $0 + 532 | 0;
HEAP32[$16 >> 2] = HEAP32[$2 >> 2];
HEAP32[$16 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
HEAP32[$16 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
HEAP32[$16 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
STACKTOP = sp;
return;
}
function __ZN19OneHAbstractPosture11defaultFromERKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $12 = 0, $2 = 0, $4 = 0, $7 = 0, $8 = 0;
$2 = $0 + 4 | 0;
$4 = HEAP32[16607] | 0;
if (!(($4 ^ HEAP32[$2 >> 2]) & 16777215)) {
$7 = $1 + 4 | 0;
HEAP32[$2 >> 2] = HEAP32[$7 >> 2];
HEAP32[$2 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
HEAP32[$2 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
}
$8 = $0 + 16 | 0;
if (($4 ^ HEAP32[$8 >> 2]) & 16777215 | 0) {
__ZN19OneHAbstractPosture20defaultHandstuffFromERKS_($0, $1);
return;
}
$12 = $1 + 16 | 0;
HEAP16[$8 >> 1] = HEAP16[$12 >> 1] | 0;
HEAP8[$8 + 2 >> 0] = HEAP8[$12 + 2 >> 0] | 0;
__ZN19OneHAbstractPosture20defaultHandstuffFromERKS_($0, $1);
return;
}
function __ZNSt3__26locale2id5__getEv($0) {
$0 = $0 | 0;
var $$byval_copy = 0, $1 = 0, $2 = 0, $3 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 48 | 0;
$$byval_copy = sp + 32 | 0;
$1 = sp + 24 | 0;
$2 = sp;
$3 = sp + 16 | 0;
HEAP32[$3 >> 2] = 177;
HEAP32[$3 + 4 >> 2] = 0;
HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2];
HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2];
__ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_($2, $$byval_copy, $0);
if ((HEAP32[$0 >> 2] | 0) != -1) {
HEAP32[$$byval_copy >> 2] = $2;
HEAP32[$1 >> 2] = $$byval_copy;
__ZNSt3__211__call_onceERVmPvPFvS2_E($0, $1, 178);
}
STACKTOP = sp;
return (HEAP32[$0 + 4 >> 2] | 0) + -1 | 0;
}
function _realloc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$1 = 0, $11 = 0, $14 = 0, $17 = 0, $22 = 0, $5 = 0;
if (!$0) {
$$1 = _malloc($1) | 0;
return $$1 | 0;
}
if ($1 >>> 0 > 4294967231) {
$5 = ___errno_location() | 0;
HEAP32[$5 >> 2] = 12;
$$1 = 0;
return $$1 | 0;
}
$11 = _try_realloc_chunk($0 + -8 | 0, $1 >>> 0 < 11 ? 16 : $1 + 11 & -8) | 0;
if ($11 | 0) {
$$1 = $11 + 8 | 0;
return $$1 | 0;
}
$14 = _malloc($1) | 0;
if (!$14) {
$$1 = 0;
return $$1 | 0;
}
$17 = HEAP32[$0 + -4 >> 2] | 0;
$22 = ($17 & -8) - (($17 & 3 | 0) == 0 ? 8 : 4) | 0;
_memcpy($14 | 0, $0 | 0, ($22 >>> 0 < $1 >>> 0 ? $22 : $1) | 0) | 0;
_free($0);
$$1 = $14;
return $$1 | 0;
}
function __ZN9HashChainI13SiGML_ElementPFvPvP7XMLCellEED2Ev($0) {
$0 = $0 | 0;
var $1 = 0, $11 = 0, $2 = 0, $4 = 0, $5 = 0, $7 = 0, $9 = 0, label = 0;
$1 = $0 + 8 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if (!$2) return;
$5 = $2;
while (1) {
$4 = $5 + 8 | 0;
HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
HEAP32[$4 >> 2] = 0;
__THREW__ = 0;
invoke_vi(140, $5 | 0);
$7 = __THREW__;
__THREW__ = 0;
if ($7 & 1) {
label = 6;
break;
}
__ZdlPv($5);
$9 = HEAP32[$1 >> 2] | 0;
if (!$9) {
label = 5;
break;
} else $5 = $9;
}
if ((label | 0) == 5) return; else if ((label | 0) == 6) {
$11 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($5);
___resumeException($11 | 0);
}
}
function __ZN20HanimAnimationRecord5resetEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $3 = 0, $5 = 0, $9 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
HEAPF64[$vararg_buffer >> 3] = +$1;
__Z7eprintfPKcz(12923, $vararg_buffer);
$3 = $0 + 56 | 0;
HEAPF32[$3 >> 2] = $1;
$5 = HEAP32[$0 + 100 >> 2] | 0;
if ($5 | 0) __ZN14TwoArmAnimator5resetER19TwoHConcretePosturef($5, HEAP32[16638] | 0, $1);
$9 = HEAP32[$0 + 104 >> 2] | 0;
if ($9 | 0) __ZN12FaceAnimator5resetEf($9, Math_fround(HEAPF32[$3 >> 2]));
HEAP32[$0 + 60 >> 2] = HEAP32[$3 >> 2];
HEAP32[$0 + 108 >> 2] = 0;
HEAP32[$0 + 116 >> 2] = 0;
STACKTOP = sp;
return;
}
function __ZN13BasicMovement23MergeDurationPropertiesEPKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $10 = 0, $11 = f0, $13 = 0, $17 = f0, $18 = 0, $2 = 0, $20 = f0, $3 = 0, $4 = f0, $6 = 0, $9 = 0;
$2 = $1 + 52 | 0;
$3 = $0 + 52 | 0;
$4 = Math_fround(HEAPF32[$2 >> 2]);
$6 = $4 < Math_fround(HEAPF32[$3 >> 2]);
HEAP32[$3 >> 2] = HEAP32[($6 ? $3 : $2) >> 2];
$9 = $1 + 40 | 0;
$10 = $0 + 40 | 0;
$11 = Math_fround(HEAPF32[$9 >> 2]);
$13 = $11 < Math_fround(HEAPF32[$10 >> 2]);
HEAP32[$10 >> 2] = HEAP32[($13 ? $10 : $9) >> 2];
$17 = Math_fround(HEAPF32[$1 + 56 >> 2]);
$18 = $0 + 56 | 0;
$20 = Math_fround($17 * Math_fround(HEAPF32[$18 >> 2]));
HEAPF32[$18 >> 2] = $20;
return;
}
function __ZN16AtomicTimedMorph10shiftStartEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $11 = f0, $12 = 0, $13 = f0, $15 = f0, $2 = 0, $4 = f0, $5 = 0, $7 = f0, $8 = 0, $9 = f0;
$2 = $0 + 4 | 0;
$4 = Math_fround(Math_fround(HEAPF32[$2 >> 2]) + $1);
HEAPF32[$2 >> 2] = $4;
$5 = $0 + 8 | 0;
$7 = Math_fround(Math_fround(HEAPF32[$5 >> 2]) + $1);
HEAPF32[$5 >> 2] = $7;
$8 = $0 + 12 | 0;
$9 = Math_fround(HEAPF32[$8 >> 2]);
if ($9 >= Math_fround(0.0)) {
$11 = Math_fround($9 + $1);
HEAPF32[$8 >> 2] = $11;
}
$12 = $0 + 16 | 0;
$13 = Math_fround(HEAPF32[$12 >> 2]);
if (!($13 >= Math_fround(0.0))) return;
$15 = Math_fround($13 + $1);
HEAPF32[$12 >> 2] = $15;
return;
}
function __ZSt11__terminatePFvvE($0) {
$0 = $0 | 0;
var $1 = 0, $11 = 0, $4 = 0, $7 = 0, $9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
__THREW__ = 0;
invoke_v($0 | 0);
$1 = __THREW__;
__THREW__ = 0;
if (!($1 & 1)) {
__THREW__ = 0;
invoke_vii(191, 64007, sp | 0);
__THREW__ = 0;
}
$4 = ___cxa_find_matching_catch_3(0) | 0;
___cxa_begin_catch($4 | 0) | 0;
__THREW__ = 0;
invoke_vii(191, 64047, sp + 8 | 0);
__THREW__ = 0;
$7 = ___cxa_find_matching_catch_3(0) | 0;
__THREW__ = 0;
invoke_v(3);
$9 = __THREW__;
__THREW__ = 0;
if ($9 & 1) {
$11 = ___cxa_find_matching_catch_3(0) | 0;
___clang_call_terminate($11);
} else ___clang_call_terminate($7);
}
function __ZN9HashChainIPKcP18AbstractTimedMorphED2Ev($0) {
$0 = $0 | 0;
var $1 = 0, $11 = 0, $2 = 0, $4 = 0, $5 = 0, $7 = 0, $9 = 0, label = 0;
$1 = $0 + 8 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if (!$2) return;
$5 = $2;
while (1) {
$4 = $5 + 8 | 0;
HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
HEAP32[$4 >> 2] = 0;
__THREW__ = 0;
invoke_vi(146, $5 | 0);
$7 = __THREW__;
__THREW__ = 0;
if ($7 & 1) {
label = 6;
break;
}
__ZdlPv($5);
$9 = HEAP32[$1 >> 2] | 0;
if (!$9) {
label = 5;
break;
} else $5 = $9;
}
if ((label | 0) == 5) return; else if ((label | 0) == 6) {
$11 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($5);
___resumeException($11 | 0);
}
}
function ___toread($0) {
$0 = $0 | 0;
var $$0 = 0, $1 = 0, $15 = 0, $23 = 0, $3 = 0, $7 = 0, $9 = 0;
$1 = $0 + 74 | 0;
$3 = HEAP8[$1 >> 0] | 0;
HEAP8[$1 >> 0] = $3 + 255 | $3;
$7 = $0 + 20 | 0;
$9 = $0 + 28 | 0;
if ((HEAP32[$7 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 31]($0, 0, 0) | 0;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$9 >> 2] = 0;
HEAP32[$7 >> 2] = 0;
$15 = HEAP32[$0 >> 2] | 0;
if (!($15 & 4)) {
$23 = (HEAP32[$0 + 44 >> 2] | 0) + (HEAP32[$0 + 48 >> 2] | 0) | 0;
HEAP32[$0 + 8 >> 2] = $23;
HEAP32[$0 + 4 >> 2] = $23;
$$0 = $15 << 27 >> 31;
} else {
HEAP32[$0 >> 2] = $15 | 32;
$$0 = -1;
}
return $$0 | 0;
}
function __ZN5Joint26transformHanimToJointFrameER10QuaternionRKS0_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp;
HEAP32[$3 >> 2] = HEAP32[$0 + 80 >> 2];
HEAP32[$3 + 4 >> 2] = HEAP32[$0 + 84 >> 2];
HEAP32[$3 + 8 >> 2] = HEAP32[$0 + 88 >> 2];
HEAP32[$3 + 12 >> 2] = HEAP32[$0 + 92 >> 2];
__ZN10Quaternion17setPostConjugate2ERKS_S1_($1, $2, $3);
HEAP32[$3 >> 2] = HEAP32[$0 + 52 >> 2];
HEAP32[$3 + 4 >> 2] = HEAP32[$0 + 56 >> 2];
HEAP32[$3 + 8 >> 2] = HEAP32[$0 + 60 >> 2];
HEAP32[$3 + 12 >> 2] = HEAP32[$0 + 64 >> 2];
__ZN10Quaternion13setPreComposeERKS_($1, $3);
STACKTOP = sp;
return;
}
function __ZN9HashChainIPKcP7HashAnyIS1_iEED2Ev($0) {
$0 = $0 | 0;
var $1 = 0, $11 = 0, $2 = 0, $4 = 0, $5 = 0, $7 = 0, $9 = 0, label = 0;
$1 = $0 + 8 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if (!$2) return;
$5 = $2;
while (1) {
$4 = $5 + 8 | 0;
HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
HEAP32[$4 >> 2] = 0;
__THREW__ = 0;
invoke_vi(150, $5 | 0);
$7 = __THREW__;
__THREW__ = 0;
if ($7 & 1) {
label = 6;
break;
}
__ZdlPv($5);
$9 = HEAP32[$1 >> 2] | 0;
if (!$9) {
label = 5;
break;
} else $5 = $9;
}
if ((label | 0) == 5) return; else if ((label | 0) == 6) {
$11 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($5);
___resumeException($11 | 0);
}
}
function __Z12SetREALArrayPfiz($0, $1, $varargs) {
$0 = $0 | 0;
$1 = $1 | 0;
$varargs = $varargs | 0;
var $$0 = 0, $10 = 0.0, $11 = f0, $19 = 0, $2 = 0, $9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
HEAP32[$2 >> 2] = $varargs;
if (!($1 & 32768)) $$0 = $1; else {
STACKTOP = sp;
return;
}
do {
$9 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
$10 = +HEAPF64[$9 >> 3];
HEAP32[$2 >> 2] = $9 + 8;
$11 = Math_fround($10);
HEAPF32[$0 + ($$0 << 16 >> 16 << 2) >> 2] = $11;
$19 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$$0 = HEAP32[$19 >> 2] | 0;
HEAP32[$2 >> 2] = $19 + 4;
} while (!($$0 & 32768 | 0));
STACKTOP = sp;
return;
}
function __ZN9HashChainIKPKc10AvatarTypeED2Ev($0) {
$0 = $0 | 0;
var $1 = 0, $11 = 0, $2 = 0, $4 = 0, $5 = 0, $7 = 0, $9 = 0, label = 0;
$1 = $0 + 8 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if (!$2) return;
$5 = $2;
while (1) {
$4 = $5 + 8 | 0;
HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
HEAP32[$4 >> 2] = 0;
__THREW__ = 0;
invoke_vi(117, $5 | 0);
$7 = __THREW__;
__THREW__ = 0;
if ($7 & 1) {
label = 6;
break;
}
__ZdlPv($5);
$9 = HEAP32[$1 >> 2] | 0;
if (!$9) {
label = 5;
break;
} else $5 = $9;
}
if ((label | 0) == 5) return; else if ((label | 0) == 6) {
$11 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($5);
___resumeException($11 | 0);
}
}
function __ZN9HashChainIK6SiteIDP4SiteED2Ev($0) {
$0 = $0 | 0;
var $1 = 0, $11 = 0, $2 = 0, $4 = 0, $5 = 0, $7 = 0, $9 = 0, label = 0;
$1 = $0 + 8 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if (!$2) return;
$5 = $2;
while (1) {
$4 = $5 + 8 | 0;
HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
HEAP32[$4 >> 2] = 0;
__THREW__ = 0;
invoke_vi(118, $5 | 0);
$7 = __THREW__;
__THREW__ = 0;
if ($7 & 1) {
label = 6;
break;
}
__ZdlPv($5);
$9 = HEAP32[$1 >> 2] | 0;
if (!$9) {
label = 5;
break;
} else $5 = $9;
}
if ((label | 0) == 5) return; else if ((label | 0) == 6) {
$11 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($5);
___resumeException($11 | 0);
}
}
function __ZN9HashChainIPKcP7GestureED2Ev($0) {
$0 = $0 | 0;
var $1 = 0, $11 = 0, $2 = 0, $4 = 0, $5 = 0, $7 = 0, $9 = 0, label = 0;
$1 = $0 + 8 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if (!$2) return;
$5 = $2;
while (1) {
$4 = $5 + 8 | 0;
HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
HEAP32[$4 >> 2] = 0;
__THREW__ = 0;
invoke_vi(175, $5 | 0);
$7 = __THREW__;
__THREW__ = 0;
if ($7 & 1) {
label = 6;
break;
}
__ZdlPv($5);
$9 = HEAP32[$1 >> 2] | 0;
if (!$9) {
label = 5;
break;
} else $5 = $9;
}
if ((label | 0) == 5) return; else if ((label | 0) == 6) {
$11 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($5);
___resumeException($11 | 0);
}
}
function __ZN9HashChainIPKc6SiteIDED2Ev($0) {
$0 = $0 | 0;
var $1 = 0, $11 = 0, $2 = 0, $4 = 0, $5 = 0, $7 = 0, $9 = 0, label = 0;
$1 = $0 + 8 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if (!$2) return;
$5 = $2;
while (1) {
$4 = $5 + 8 | 0;
HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
HEAP32[$4 >> 2] = 0;
__THREW__ = 0;
invoke_vi(116, $5 | 0);
$7 = __THREW__;
__THREW__ = 0;
if ($7 & 1) {
label = 6;
break;
}
__ZdlPv($5);
$9 = HEAP32[$1 >> 2] | 0;
if (!$9) {
label = 5;
break;
} else $5 = $9;
}
if ((label | 0) == 5) return; else if ((label | 0) == 6) {
$11 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($5);
___resumeException($11 | 0);
}
}
function __ZN9HashChainIPKcS1_ED2Ev($0) {
$0 = $0 | 0;
var $1 = 0, $11 = 0, $2 = 0, $4 = 0, $5 = 0, $7 = 0, $9 = 0, label = 0;
$1 = $0 + 8 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if (!$2) return;
$5 = $2;
while (1) {
$4 = $5 + 8 | 0;
HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
HEAP32[$4 >> 2] = 0;
__THREW__ = 0;
invoke_vi(115, $5 | 0);
$7 = __THREW__;
__THREW__ = 0;
if ($7 & 1) {
label = 6;
break;
}
__ZdlPv($5);
$9 = HEAP32[$1 >> 2] | 0;
if (!$9) {
label = 5;
break;
} else $5 = $9;
}
if ((label | 0) == 5) return; else if ((label | 0) == 6) {
$11 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($5);
___resumeException($11 | 0);
}
}
function __ZNK16ControllerParams5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $10 = 0.0, $13 = 0.0, $4 = 0.0, $7 = 0.0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$4 = +Math_fround(HEAPF32[$0 >> 2]);
$7 = +Math_fround(HEAPF32[$0 + 4 >> 2]);
$10 = +Math_fround(HEAPF32[$0 + 8 >> 2]);
$13 = +Math_fround(HEAPF32[$0 + 12 >> 2]);
HEAPF64[$vararg_buffer >> 3] = $4;
HEAPF64[$vararg_buffer + 8 >> 3] = $7;
HEAPF64[$vararg_buffer + 16 >> 3] = $10;
HEAPF64[$vararg_buffer + 24 >> 3] = $13;
_fprintf($1, 12357, $vararg_buffer) | 0;
STACKTOP = sp;
return;
}
function __ZN9HashChainIPKciED2Ev($0) {
$0 = $0 | 0;
var $1 = 0, $11 = 0, $2 = 0, $4 = 0, $5 = 0, $7 = 0, $9 = 0, label = 0;
$1 = $0 + 8 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if (!$2) return;
$5 = $2;
while (1) {
$4 = $5 + 8 | 0;
HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
HEAP32[$4 >> 2] = 0;
__THREW__ = 0;
invoke_vi(94, $5 | 0);
$7 = __THREW__;
__THREW__ = 0;
if ($7 & 1) {
label = 6;
break;
}
__ZdlPv($5);
$9 = HEAP32[$1 >> 2] | 0;
if (!$9) {
label = 5;
break;
} else $5 = $9;
}
if ((label | 0) == 5) return; else if ((label | 0) == 6) {
$11 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($5);
___resumeException($11 | 0);
}
}
function __ZN9HashChainIiiED2Ev($0) {
$0 = $0 | 0;
var $1 = 0, $11 = 0, $2 = 0, $4 = 0, $5 = 0, $7 = 0, $9 = 0, label = 0;
$1 = $0 + 8 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if (!$2) return;
$5 = $2;
while (1) {
$4 = $5 + 8 | 0;
HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
HEAP32[$4 >> 2] = 0;
__THREW__ = 0;
invoke_vi(148, $5 | 0);
$7 = __THREW__;
__THREW__ = 0;
if ($7 & 1) {
label = 6;
break;
}
__ZdlPv($5);
$9 = HEAP32[$1 >> 2] | 0;
if (!$9) {
label = 5;
break;
} else $5 = $9;
}
if ((label | 0) == 5) return; else if ((label | 0) == 6) {
$11 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($5);
___resumeException($11 | 0);
}
}
function __Z9SetArrayXIbEvPT_sz($0, $1, $varargs) {
$0 = $0 | 0;
$1 = $1 | 0;
$varargs = $varargs | 0;
var $$0$i = 0, $10 = 0, $11 = 0, $2 = 0, $20 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
HEAP32[$2 >> 2] = $varargs;
if ($1 << 16 >> 16 <= -1) {
STACKTOP = sp;
return;
}
$$0$i = $1 << 16 >> 16;
do {
$10 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$11 = HEAP32[$10 >> 2] | 0;
HEAP32[$2 >> 2] = $10 + 4;
HEAP8[$0 + $$0$i >> 0] = ($11 | 0) != 0 & 1;
$20 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$$0$i = HEAP32[$20 >> 2] | 0;
HEAP32[$2 >> 2] = $20 + 4;
} while (($$0$i | 0) > -1);
STACKTOP = sp;
return;
}
function __Z9SetArrayXI6MannerEvPT_sz($0, $1, $varargs) {
$0 = $0 | 0;
$1 = $1 | 0;
$varargs = $varargs | 0;
var $$0$i = 0, $10 = 0, $11 = 0, $18 = 0, $2 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
HEAP32[$2 >> 2] = $varargs;
if ($1 << 16 >> 16 <= -1) {
STACKTOP = sp;
return;
}
$$0$i = $1 << 16 >> 16;
do {
$10 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$11 = HEAP32[$10 >> 2] | 0;
HEAP32[$2 >> 2] = $10 + 4;
HEAP32[$0 + ($$0$i << 2) >> 2] = $11;
$18 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$$0$i = HEAP32[$18 >> 2] | 0;
HEAP32[$2 >> 2] = $18 + 4;
} while (($$0$i | 0) > -1);
STACKTOP = sp;
return;
}
function _prolog1($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, label = 0;
switch ($1 | 0) {
case 14:
case 15:
{
$$0 = 0;
break;
}
case 11:
{
$$0 = 55;
break;
}
case 13:
{
$$0 = 56;
break;
}
case 16:
{
if (!(FUNCTION_TABLE_iiiii[HEAP32[$4 + 24 >> 2] & 63]($4, $2 + (HEAP32[$4 + 64 >> 2] << 1) | 0, $3, 59799) | 0)) label = 7; else {
HEAP32[$0 >> 2] = 3;
$$0 = 3;
}
break;
}
case 29:
{
HEAP32[$0 >> 2] = 4;
$$0 = 2;
break;
}
default:
label = 7;
}
if ((label | 0) == 7) {
HEAP32[$0 >> 2] = 4;
$$0 = -1;
}
return $$0 | 0;
}
function __ZNK9Handshape15DefaultHandSiteEv($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $11 = 0, $15 = 0, $19 = 0, $23 = 0, $4 = 0, $6 = 0, $8 = 0;
$4 = (HEAP8[$1 + 232 >> 0] | 0) != 0;
$6 = HEAP32[$1 >> 2] | 0;
$8 = HEAP32[(HEAP32[17189] | 0) + ($6 << 2) >> 2] | 0;
HEAP32[$0 >> 2] = $8;
$11 = $8 & 16773375 | ($4 ? 256 : 512);
HEAP16[$0 >> 1] = $11;
HEAP8[$0 + 2 >> 0] = $11 >>> 16;
if (($8 & 255 | 0) == 1) return;
$15 = HEAP16[$1 + 52 >> 1] | 0;
if (!($15 << 16 >> 16)) $19 = HEAP16[66668 + ($6 * 160 | 0) + 152 >> 1] | 0; else $19 = $15;
$23 = ($19 & 31) << 15 | $11 & 15758335;
HEAP16[$0 >> 1] = $23;
HEAP8[$0 + 2 >> 0] = $23 >>> 16;
return;
}
function __ZN19SHMScalarController13set_referenceEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $$sink$sink$i = f0, $12 = f0, $9 = f0;
if ((HEAP32[$0 + 60 >> 2] | 0) == 1) {
HEAPF32[$0 + 76 >> 2] = $1;
HEAPF32[$0 + 80 >> 2] = $1;
return;
}
HEAPF32[$0 + 72 >> 2] = $1;
$9 = Math_fround(HEAPF32[$0 + 28 >> 2]);
if (!($9 > Math_fround(0.0))) {
HEAPF32[$0 + 76 >> 2] = $1;
return;
}
$12 = Math_fround(HEAPF32[$0 + 80 >> 2]);
if ($12 < $1) $$sink$sink$i = Math_fround($9 + $1); else if ($12 > $1) $$sink$sink$i = Math_fround($1 - $9); else $$sink$sink$i = $1;
HEAPF32[$0 + 76 >> 2] = $$sink$sink$i;
HEAP8[$0 + 32 >> 0] = 0;
return;
}
function _element6($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $5 = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 39;
break;
}
case 23:
{
$5 = $0 + 4 | 0;
HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1;
$$0 = 44;
break;
}
case 41:
case 18:
{
HEAP32[$0 >> 2] = 26;
$$0 = 51;
break;
}
case 30:
{
HEAP32[$0 >> 2] = 26;
$$0 = 53;
break;
}
case 31:
{
HEAP32[$0 >> 2] = 26;
$$0 = 52;
break;
}
case 32:
{
HEAP32[$0 >> 2] = 26;
$$0 = 54;
break;
}
default:
{
HEAP32[$0 >> 2] = 4;
$$0 = -1;
}
}
return $$0 | 0;
}
function __ZN9Transform10setInverseEv($0) {
$0 = $0 | 0;
var $1 = 0, $10 = f0, $2 = 0, $4 = f0, $5 = 0, $7 = f0, $8 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$1 = sp;
$2 = $0 + 12 | 0;
$4 = Math_fround(-Math_fround(HEAPF32[$2 >> 2]));
HEAPF32[$2 >> 2] = $4;
$5 = $0 + 16 | 0;
$7 = Math_fround(-Math_fround(HEAPF32[$5 >> 2]));
HEAPF32[$5 >> 2] = $7;
$8 = $0 + 20 | 0;
$10 = Math_fround(-Math_fround(HEAPF32[$8 >> 2]));
HEAPF32[$8 >> 2] = $10;
__ZN6VectorC2Ev($1);
__ZNK10Quaternion12rotateVectorERK6VectorRS0_($2, $0, $1);
__ZN6Vector10setInverseEv($1);
__ZN6Vector7setFromERKS_($0, $1);
STACKTOP = sp;
return;
}
function _unknown_isInvalid($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $13 = 0, $6 = 0;
$6 = FUNCTION_TABLE_iii[HEAP32[$0 + 364 >> 2] & 63](HEAP32[$0 + 368 >> 2] | 0, $1) | 0;
if ($6 >>> 0 > 65535) {
$13 = 1;
return $13 | 0;
}
switch ($6 >>> 8 & 16777215 | 0) {
case 0:
{
if (!(HEAP8[3704 + $6 >> 0] | 0)) {
$13 = 1;
return $13 | 0;
}
break;
}
case 255:
{
if (($6 | 1 | 0) == 65535) {
$13 = 1;
return $13 | 0;
}
break;
}
case 223:
case 222:
case 221:
case 220:
case 219:
case 218:
case 217:
case 216:
{
$13 = 1;
return $13 | 0;
}
default:
{}
}
$13 = 0;
return $13 | 0;
}
function __ZNK10Quaternion10dotProductERKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $11 = f0, $13 = f0, $17 = f0, $19 = f0, $2 = f0, $5 = f0, $7 = f0;
$2 = Math_fround(HEAPF32[$0 >> 2]);
$5 = Math_fround(Math_fround($2 * Math_fround(HEAPF32[$1 >> 2])) + Math_fround(0.0));
$7 = Math_fround(HEAPF32[$0 + 4 >> 2]);
$11 = Math_fround($5 + Math_fround($7 * Math_fround(HEAPF32[$1 + 4 >> 2])));
$13 = Math_fround(HEAPF32[$0 + 8 >> 2]);
$17 = Math_fround($11 + Math_fround($13 * Math_fround(HEAPF32[$1 + 8 >> 2])));
$19 = Math_fround(HEAPF32[$0 + 12 >> 2]);
return Math_fround($17 + Math_fround($19 * Math_fround(HEAPF32[$1 + 12 >> 2])));
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $10 = 0, $13 = 0, $4 = 0, $5 = 0;
$4 = $1 + 16 | 0;
$5 = HEAP32[$4 >> 2] | 0;
do if (!$5) {
HEAP32[$4 >> 2] = $2;
HEAP32[$1 + 24 >> 2] = $3;
HEAP32[$1 + 36 >> 2] = 1;
} else {
if (($5 | 0) != ($2 | 0)) {
$13 = $1 + 36 | 0;
HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1;
HEAP32[$1 + 24 >> 2] = 2;
HEAP8[$1 + 54 >> 0] = 1;
break;
}
$10 = $1 + 24 | 0;
if ((HEAP32[$10 >> 2] | 0) == 2) HEAP32[$10 >> 2] = $3;
} while (0);
return;
}
function __ZN10Controller8new_ref1Ef($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $$sink$sink$i = f0, $12 = f0, $9 = f0;
if ((HEAP32[$0 + 44 >> 2] | 0) == 1) {
HEAPF32[$0 + 64 >> 2] = $1;
HEAPF32[$0 + 68 >> 2] = $1;
return;
}
HEAPF32[$0 + 60 >> 2] = $1;
$9 = Math_fround(HEAPF32[$0 + 12 >> 2]);
if (!($9 > Math_fround(0.0))) {
HEAPF32[$0 + 64 >> 2] = $1;
return;
}
$12 = Math_fround(HEAPF32[$0 + 68 >> 2]);
if ($12 < $1) $$sink$sink$i = Math_fround($9 + $1); else if ($12 > $1) $$sink$sink$i = Math_fround($1 - $9); else $$sink$sink$i = $1;
HEAPF32[$0 + 64 >> 2] = $$sink$sink$i;
HEAP8[$0 + 16 >> 0] = 0;
return;
}
function __ZNSt3__28ios_base7failureC2EPKcRKNS_10error_codeE($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $10 = 0, $3 = 0, $4 = 0, $9 = 0, $tmpcast$byval_copy = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$tmpcast$byval_copy = sp + 8 | 0;
$3 = sp;
$4 = $2;
$9 = HEAP32[$4 + 4 >> 2] | 0;
$10 = $3;
HEAP32[$10 >> 2] = HEAP32[$4 >> 2];
HEAP32[$10 + 4 >> 2] = $9;
HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$3 >> 2];
HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2];
__ZNSt3__212system_errorC2ENS_10error_codeEPKc($0, $tmpcast$byval_copy, $1);
HEAP32[$0 >> 2] = 8036;
STACKTOP = sp;
return;
}
function _sbrk(increment) {
increment = increment | 0;
var oldDynamicTop = 0, newDynamicTop = 0;
increment = increment + 15 & -16 | 0;
oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0;
newDynamicTop = oldDynamicTop + increment | 0;
if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
abortOnCannotGrowMemory() | 0;
___setErrNo(12);
return -1;
}
HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop;
if ((newDynamicTop | 0) > (getTotalMemory() | 0)) if (!(enlargeMemory() | 0)) {
HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop;
___setErrNo(12);
return -1;
}
return oldDynamicTop | 0;
}
function __ZNK16TwoHCircMoveSpec5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(37097, 10, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK16OneHCircMoveSpec5printEP8_IO_FILE($0, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(37108, 9, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK16OneHCircMoveSpec5printEP8_IO_FILE($0 + 68 | 0, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
return;
}
function __ZN5Joint24getGlobalBoneTranslationEv($0) {
$0 = $0 | 0;
var $1 = 0, $12 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0;
$1 = $0 + 100 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if ($2 | 0) {
$14 = $2;
return $14 | 0;
}
$4 = __Znwj(12) | 0;
__THREW__ = 0;
invoke_vii(120, $4 | 0, $0 + 68 | 0);
$6 = __THREW__;
__THREW__ = 0;
if ($6 & 1) {
$12 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($4);
___resumeException($12 | 0);
}
HEAP32[$1 >> 2] = $4;
$9 = HEAP32[$0 + 8 >> 2] | 0;
if (!$9) {
$14 = $4;
return $14 | 0;
}
__ZN6Vector11setSubtractERKS_($4, $9 + 68 | 0);
$14 = HEAP32[$1 >> 2] | 0;
return $14 | 0;
}
function __ZN7SSFrameC2Ev($0) {
$0 = $0 | 0;
var $1 = 0, $4 = 0, $5 = 0, $8 = 0;
HEAP32[$0 >> 2] = 784;
$1 = $0 + 4 | 0;
HEAP32[$1 >> 2] = 0;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$1 + 8 >> 2] = 0;
HEAP32[$1 + 12 >> 2] = 0;
HEAP32[$1 + 16 >> 2] = 0;
HEAP32[$1 + 20 >> 2] = 0;
HEAPF32[$0 + 28 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 32 >> 2] = Math_fround(0.0);
$4 = __Znaj(312) | 0;
$5 = $0 + 36 | 0;
HEAP32[$5 >> 2] = $4;
HEAPF32[$4 >> 2] = Math_fround(0.0);
$8 = 1;
do {
HEAPF32[(HEAP32[$5 >> 2] | 0) + ($8 << 2) >> 2] = Math_fround(0.0);
$8 = $8 + 1 | 0;
} while (($8 | 0) != 78);
HEAP32[$0 + 40 >> 2] = 0;
return;
}
function __ZNK6Vector8distanceERKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $11 = f0, $13 = f0, $15 = f0, $18 = f0, $2 = f0, $4 = f0, $6 = f0, $8 = f0;
$2 = Math_fround(HEAPF32[$0 >> 2]);
$4 = Math_fround($2 - Math_fround(HEAPF32[$1 >> 2]));
$6 = Math_fround(Math_fround($4 * $4) + Math_fround(0.0));
$8 = Math_fround(HEAPF32[$0 + 4 >> 2]);
$11 = Math_fround($8 - Math_fround(HEAPF32[$1 + 4 >> 2]));
$13 = Math_fround($6 + Math_fround($11 * $11));
$15 = Math_fround(HEAPF32[$0 + 8 >> 2]);
$18 = Math_fround($15 - Math_fround(HEAPF32[$1 + 8 >> 2]));
return Math_fround(Math_sqrt(Math_fround($13 + Math_fround($18 * $18))));
}
function __ZNK15TwoHDirMoveSpec5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(37097, 10, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK15OneHDirMoveSpec5printEP8_IO_FILE($0, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
__Z11printIndentP8_IO_FILEi($1, HEAP16[36078] | 0);
_fwrite(37108, 9, 1, $1) | 0;
HEAP16[36078] = (HEAP16[36078] | 0) + 1 << 16 >> 16;
__ZNK15OneHDirMoveSpec5printEP8_IO_FILE($0 + 72 | 0, $1);
HEAP16[36078] = (HEAP16[36078] | 0) + -1 << 16 >> 16;
_fputc(10, $1) | 0;
return;
}
function __ZeqRK9HandshapeS1_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $12 = f0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $merge = 0;
if (!(__ZeqRK14SiGMLHandshapeS1_($0, $1) | 0)) {
$merge = 0;
return $merge | 0;
}
$4 = HEAP32[$0 + 220 >> 2] | 0;
$5 = ($4 | 0) == 0;
$7 = HEAP32[$1 + 220 >> 2] | 0;
$8 = ($7 | 0) == 0;
if ($5) {
$merge = $8;
return $merge | 0;
}
if ($5 ^ $8) {
$merge = 0;
return $merge | 0;
}
if (!(__ZeqRK14SiGMLHandshapeS1_($4, $7) | 0)) {
$merge = 0;
return $merge | 0;
}
$12 = Math_fround(HEAPF32[$0 + 224 >> 2]);
$merge = $12 == Math_fround(HEAPF32[$1 + 224 >> 2]);
return $merge | 0;
}
function _pad_679($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0$lcssa = 0, $$011 = 0, $13 = 0, $5 = 0, $9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 256 | 0;
$5 = sp;
if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
$9 = $2 - $3 | 0;
_memset($5 | 0, $1 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0;
if ($9 >>> 0 > 255) {
$13 = $2 - $3 | 0;
$$011 = $9;
do {
_out($0, $5, 256);
$$011 = $$011 + -256 | 0;
} while ($$011 >>> 0 > 255);
$$0$lcssa = $13 & 255;
} else $$0$lcssa = $9;
_out($0, $5, $$0$lcssa);
}
STACKTOP = sp;
return;
}
function __ZN14TwoArmAnimator7newTimeEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $3 = f0, $4 = f0, $6 = 0, $7 = 0, $8 = f0;
$3 = Math_fround(HEAPF32[$0 + 4 >> 2]);
$4 = Math_fround($3 + $1);
HEAPF32[$0 + 8 >> 2] = $4;
$6 = HEAP32[$0 >> 2] | 0;
$7 = $0 + 7128 | 0;
$8 = Math_fround($4 - $3);
FUNCTION_TABLE_viifi[HEAP32[(HEAP32[$6 >> 2] | 0) + 60 >> 2] & 15]($6, $7, $8, 1);
__ZN14OneArmAnimator21computeJointRotationsERK19OneHConcretePosturef($0 + 16 | 0, $7, Math_fround(0.0));
__ZN14OneArmAnimator21computeJointRotationsERK19OneHConcretePosturef($0 + 3572 | 0, $0 + 7240 | 0, Math_fround(0.0));
return;
}
function _animgenGenerateFrames($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0$i = 0, $11 = 0, $13 = 0, $5 = 0, $8 = 0;
$5 = HEAP32[17849] | 0;
if (($5 | 0) == 0 | (($0 | 0) != 0 | (HEAP32[17848] | 0) != 1)) {
$$0$i = 0;
return $$0$i | 0;
}
$8 = $5 + 40 | 0;
if ((HEAP32[$8 >> 2] | 0) != 3) {
$$0$i = 0;
return $$0$i | 0;
}
HEAP32[$8 >> 2] = 4;
$11 = $5 + 32 | 0;
HEAP32[$11 >> 2] = 0;
HEAP8[$5 + 28 >> 0] = 1;
$13 = __Z10copyStringPKc($1) | 0;
_animgen_lite_doSignCASARP($13, 20, 8, 34, 185, $5);
HEAP32[$8 >> 2] = 3;
if ($13 | 0) __ZdlPv($13);
$$0$i = (HEAP32[$11 >> 2] | 0) == 0;
return $$0$i | 0;
}
function __ZNK11MannerFlags17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0 = 0;
L1 : do if (!(HEAP8[$0 + 8 >> 0] | 0)) switch (HEAP32[$0 + 4 >> 2] | 0) {
case 1:
{
$$0 = 50561;
break L1;
break;
}
case 3:
{
$$0 = 50566;
break L1;
break;
}
default:
{
$$0 = __ZNK21InvertibleStringArray14valueFromIndexEi(HEAP32[17761] | 0, HEAP32[$0 >> 2] | 0) | 0;
break L1;
}
} else $$0 = 50577; while (0);
__Z16printAttribValueRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKcS6_($1, $2, 50906, $$0);
return;
}
function __ZNK16DirectedMovement12CopyMovementEv($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $5 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$1 = __Znwj(744) | 0;
__THREW__ = 0;
invoke_vii(161, $1 | 0, $0 | 0);
$2 = __THREW__;
__THREW__ = 0;
if ($2 & 1) {
$5 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($1);
___resumeException($5 | 0);
}
if (!0) {
STACKTOP = sp;
return $1 | 0;
}
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer >> 2] = $0;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
__Z7eprintfPKcz(37729, $vararg_buffer);
STACKTOP = sp;
return $1 | 0;
}
function __ZNK16CircularMovement12CopyMovementEv($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $5 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$1 = __Znwj(752) | 0;
__THREW__ = 0;
invoke_vii(162, $1 | 0, $0 | 0);
$2 = __THREW__;
__THREW__ = 0;
if ($2 & 1) {
$5 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($1);
___resumeException($5 | 0);
}
if (!0) {
STACKTOP = sp;
return $1 | 0;
}
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer >> 2] = $0;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
__Z7eprintfPKcz(38389, $vararg_buffer);
STACKTOP = sp;
return $1 | 0;
}
function _entity5($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0$ph = 0, $error$sink = 0, label = 0;
switch ($1 | 0) {
case 17:
{
$$0$ph = 15;
$error$sink = 7;
break;
}
case 18:
{
if (!(FUNCTION_TABLE_iiiii[HEAP32[$4 + 24 >> 2] & 63]($4, $2, $3, 59941) | 0)) label = 3; else {
$$0$ph = 11;
$error$sink = 43;
}
break;
}
case 15:
{
$$0 = 11;
return $$0 | 0;
}
default:
label = 3;
}
if ((label | 0) == 3) {
$$0$ph = -1;
$error$sink = 4;
}
HEAP32[$0 >> 2] = $error$sink;
$$0 = $$0$ph;
return $$0 | 0;
}
function __ZNK14RepeatMovement12CopyMovementEv($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $5 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$1 = __Znwj(704) | 0;
__THREW__ = 0;
invoke_vii(163, $1 | 0, $0 | 0);
$2 = __THREW__;
__THREW__ = 0;
if ($2 & 1) {
$5 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($1);
___resumeException($5 | 0);
}
if (!0) {
STACKTOP = sp;
return $1 | 0;
}
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer >> 2] = $0;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
__Z7eprintfPKcz(42587, $vararg_buffer);
STACKTOP = sp;
return $1 | 0;
}
function __ZNK10Direction25printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $3 = f0, $4 = 0, $6 = f0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$3 = Math_fround(HEAPF32[$0 >> 2]);
$4 = $3 == Math_fround(0.0);
$6 = Math_fround(HEAPF32[$0 + 4 >> 2]);
if ($4 & $6 == Math_fround(0.0)) {
_fwrite(53768, 5, 1, $1) | 0;
STACKTOP = sp;
return;
} else {
HEAPF64[$vararg_buffer >> 3] = +$3;
HEAPF64[$vararg_buffer + 8 >> 3] = +$6;
_fprintf($1, 53795, $vararg_buffer) | 0;
STACKTOP = sp;
return;
}
}
function _strcmp($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
$2 = HEAP8[$0 >> 0] | 0;
$3 = HEAP8[$1 >> 0] | 0;
if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
$$lcssa = $3;
$$lcssa8 = $2;
} else {
$$011 = $1;
$$0710 = $0;
do {
$$0710 = $$0710 + 1 | 0;
$$011 = $$011 + 1 | 0;
$8 = HEAP8[$$0710 >> 0] | 0;
$9 = HEAP8[$$011 >> 0] | 0;
} while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
$$lcssa = $9;
$$lcssa8 = $8;
}
return ($$lcssa8 & 255) - ($$lcssa & 255) | 0;
}
function __ZNK6Vector10distanceSqERKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $11 = f0, $13 = f0, $15 = f0, $18 = f0, $2 = f0, $4 = f0, $6 = f0, $8 = f0;
$2 = Math_fround(HEAPF32[$0 >> 2]);
$4 = Math_fround($2 - Math_fround(HEAPF32[$1 >> 2]));
$6 = Math_fround(Math_fround($4 * $4) + Math_fround(0.0));
$8 = Math_fround(HEAPF32[$0 + 4 >> 2]);
$11 = Math_fround($8 - Math_fround(HEAPF32[$1 + 4 >> 2]));
$13 = Math_fround($6 + Math_fround($11 * $11));
$15 = Math_fround(HEAPF32[$0 + 8 >> 2]);
$18 = Math_fround($15 - Math_fround(HEAPF32[$1 + 8 >> 2]));
return Math_fround($13 + Math_fround($18 * $18));
}
function __ZN19SHMScalarController14set_perceptionEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $$sink$sink$i = f0, $10 = f0, $7 = f0, $8 = 0;
if ((HEAP32[$0 + 60 >> 2] | 0) == 1) return;
HEAPF32[$0 + 80 >> 2] = $1;
$7 = Math_fround(HEAPF32[$0 + 28 >> 2]);
$8 = $7 > Math_fround(0.0);
$10 = Math_fround(HEAPF32[$0 + 72 >> 2]);
if (!$8) {
HEAPF32[$0 + 76 >> 2] = $10;
return;
}
if ($10 > $1) $$sink$sink$i = Math_fround($7 + $10); else if ($10 < $1) $$sink$sink$i = Math_fround($10 - $7); else $$sink$sink$i = $10;
HEAPF32[$0 + 76 >> 2] = $$sink$sink$i;
HEAP8[$0 + 32 >> 0] = 0;
return;
}
function ___stdio_seek($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer = sp;
$3 = sp + 20 | 0;
HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2];
HEAP32[$vararg_buffer + 4 >> 2] = 0;
HEAP32[$vararg_buffer + 8 >> 2] = $1;
HEAP32[$vararg_buffer + 12 >> 2] = $3;
HEAP32[$vararg_buffer + 16 >> 2] = $2;
if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
HEAP32[$3 >> 2] = -1;
$10 = -1;
} else $10 = HEAP32[$3 >> 2] | 0;
STACKTOP = sp;
return $10 | 0;
}
function __ZNK23FingerBaseJointRotation17printRotationVRMLEP8_IO_FILEs($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$3 = sp + 16 | 0;
$4 = sp;
HEAPF32[$3 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 4 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 12 >> 2] = Math_fround(1.0);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] & 255]($0, $3);
__ZN12VRMLRotationC2ERK10Quaternion($4, $3);
__ZNK12VRMLRotation5printEP8_IO_FILEi($4, $1, $2 << 16 >> 16);
STACKTOP = sp;
return;
}
function __ZNK22ThumbBaseJointRotation17printRotationVRMLEP8_IO_FILEs($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$3 = sp + 16 | 0;
$4 = sp;
HEAPF32[$3 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 4 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 12 >> 2] = Math_fround(1.0);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] & 255]($0, $3);
__ZN12VRMLRotationC2ERK10Quaternion($4, $3);
__ZNK12VRMLRotation5printEP8_IO_FILEi($4, $1, $2 << 16 >> 16);
STACKTOP = sp;
return;
}
function __ZNK19TurretJointRotation17printRotationVRMLEP8_IO_FILEs($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$3 = sp + 16 | 0;
$4 = sp;
HEAPF32[$3 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 4 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$3 + 12 >> 2] = Math_fround(1.0);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] & 255]($0, $3);
__ZN12VRMLRotationC2ERK10Quaternion($4, $3);
__ZNK12VRMLRotation5printEP8_IO_FILEi($4, $1, $2 << 16 >> 16);
STACKTOP = sp;
return;
}
function __ZN17NonmanualMovement11setDurationEfb($0, $1, $2) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = $2 | 0;
var $11 = f0, $14 = f0, $4 = 0;
$4 = HEAP32[$0 + 20 >> 2] | 0;
do if ($4 | 0) {
if ($2) {
$11 = Math_fround(Math_fround(HEAPF32[$4 + 16 >> 2]) * $1);
$14 = Math_fround($11 / Math_fround(HEAPF32[$0 + 24 >> 2]));
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] & 63]($4, $14);
break;
}
if (Math_fround(HEAPF32[$4 + 16 >> 2]) >= $1) FUNCTION_TABLE_vif[HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] & 63]($4, $1);
} while (0);
HEAPF32[$0 + 24 >> 2] = $1;
return;
}
function _little2_skipS($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0$lcssa = 0, $$08 = 0, $4 = 0, $9 = 0, label = 0;
if (HEAP8[$1 + 1 >> 0] | 0) {
$$0$lcssa = $1;
return $$0$lcssa | 0;
}
$4 = $0 + 72 | 0;
$$08 = $1;
L4 : while (1) {
switch (HEAP8[$4 + (HEAPU8[$$08 >> 0] | 0) >> 0] | 0) {
case 21:
case 9:
case 10:
break;
default:
{
$$0$lcssa = $$08;
label = 5;
break L4;
}
}
$9 = $$08 + 2 | 0;
if (!(HEAP8[$$08 + 3 >> 0] | 0)) $$08 = $9; else {
$$0$lcssa = $9;
label = 5;
break;
}
}
if ((label | 0) == 5) return $$0$lcssa | 0;
return 0;
}
function _latin1_toUtf16($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $10 = 0, $12 = 0, $13 = 0, $5 = 0, label = 0;
$5 = HEAP32[$1 >> 2] | 0;
if (($5 | 0) == ($2 | 0)) return; else $10 = $5;
while (1) {
if ((HEAP32[$3 >> 2] | 0) == ($4 | 0)) {
label = 4;
break;
}
HEAP32[$1 >> 2] = $10 + 1;
$12 = HEAPU8[$10 >> 0] | 0;
$13 = HEAP32[$3 >> 2] | 0;
HEAP32[$3 >> 2] = $13 + 2;
HEAP16[$13 >> 1] = $12;
$10 = HEAP32[$1 >> 2] | 0;
if (($10 | 0) == ($2 | 0)) {
label = 4;
break;
}
}
if ((label | 0) == 4) return;
}
function _big2_skipS($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0$lcssa = 0, $$08 = 0, $3 = 0, $9 = 0, label = 0;
if (HEAP8[$1 >> 0] | 0) {
$$0$lcssa = $1;
return $$0$lcssa | 0;
}
$3 = $0 + 72 | 0;
$$08 = $1;
L4 : while (1) {
switch (HEAP8[$3 + (HEAPU8[$$08 + 1 >> 0] | 0) >> 0] | 0) {
case 21:
case 9:
case 10:
break;
default:
{
$$0$lcssa = $$08;
label = 5;
break L4;
}
}
$9 = $$08 + 2 | 0;
if (!(HEAP8[$9 >> 0] | 0)) $$08 = $9; else {
$$0$lcssa = $9;
label = 5;
break;
}
}
if ((label | 0) == 5) return $$0$lcssa | 0;
return 0;
}
function __ZN12ThumbBending21ModifyByFingerBendingERK13FingerBending($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
__Z7eprintfPKcz(53823, sp);
__ZNK13FingerBending5printEP8_IO_FILE($1, HEAP32[16082] | 0);
__Z7eprintfPKcz(53844, sp + 8 | 0);
__ZNK12ThumbBending5printEP8_IO_FILE($0, HEAP32[16082] | 0);
__Z5eputcc(10);
HEAP32[$0 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$0 + 16 >> 2] = HEAP32[$1 + 8 >> 2];
__Z5eputsPKc(53852);
__ZNK12ThumbBending5printEP8_IO_FILE($0, HEAP32[16082] | 0);
__Z5eputcc(10);
STACKTOP = sp;
return;
}
function _ascii_toUtf8($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $10 = 0, $11 = 0, $12 = 0, $5 = 0, label = 0;
$5 = HEAP32[$1 >> 2] | 0;
if (($5 | 0) == ($2 | 0)) return; else $10 = $5;
while (1) {
if ((HEAP32[$3 >> 2] | 0) == ($4 | 0)) {
label = 4;
break;
}
HEAP32[$1 >> 2] = $10 + 1;
$11 = HEAP8[$10 >> 0] | 0;
$12 = HEAP32[$3 >> 2] | 0;
HEAP32[$3 >> 2] = $12 + 1;
HEAP8[$12 >> 0] = $11;
$10 = HEAP32[$1 >> 2] | 0;
if (($10 | 0) == ($2 | 0)) {
label = 4;
break;
}
}
if ((label | 0) == 4) return;
}
function __ZNK13WristMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
__ZNK13BasicMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($0, $1, $2);
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, $2, 51275, HEAP32[$0 + 528 >> 2] | 0, HEAP32[17764] | 0);
__Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($1, $2, 51093, HEAP32[$0 + 532 >> 2] | 0, HEAP32[17762] | 0);
return;
}
function __ZN23FingerBaseJointRotation11interpolateERKS_S1_f($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = Math_fround($3);
var $11 = f0, $15 = f0, $19 = f0, $4 = f0, $7 = f0;
$4 = Math_fround(Math_fround(1.0) - $3);
$7 = Math_fround($4 * Math_fround(HEAPF32[$1 + 44 >> 2]));
$11 = Math_fround($7 + Math_fround(Math_fround(HEAPF32[$2 + 44 >> 2]) * $3));
HEAPF32[$0 + 44 >> 2] = $11;
$15 = Math_fround($4 * Math_fround(HEAPF32[$1 + 48 >> 2]));
$19 = Math_fround($15 + Math_fround(Math_fround(HEAPF32[$2 + 48 >> 2]) * $3));
HEAPF32[$0 + 48 >> 2] = $19;
return;
}
function __Z13ReadXMLStringPc($0) {
$0 = $0 | 0;
var $$0 = 0, $1 = 0, $11 = 0, $12 = 0, $2 = 0, $4 = 0;
$1 = __Znwj(32) | 0;
__THREW__ = 0;
invoke_vi(153, $1 | 0);
$2 = __THREW__;
__THREW__ = 0;
if ($2 & 1) {
$4 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($1);
___resumeException($4 | 0);
}
if (!(FUNCTION_TABLE_iii[HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] & 63]($1, $0) | 0)) {
$11 = $1 + 20 | 0;
$12 = HEAP32[$11 >> 2] | 0;
HEAP32[$11 >> 2] = 0;
$$0 = $12;
} else $$0 = 0;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] & 255]($1);
return $$0 | 0;
}
function __ZN7SSPRSetC2Ev($0) {
$0 = $0 | 0;
var $1 = 0, $scevgep10 = 0;
HEAP32[$0 >> 2] = 816;
$1 = $0 + 4 | 0;
HEAP8[$1 >> 0] = HEAP8[53852] | 0;
HEAP8[$1 + 1 >> 0] = HEAP8[53853] | 0;
HEAP8[$1 + 2 >> 0] = HEAP8[53854] | 0;
HEAP8[$1 + 3 >> 0] = HEAP8[53855] | 0;
HEAP8[$1 + 4 >> 0] = HEAP8[53856] | 0;
$scevgep10 = $0 + 12 | 0;
HEAP32[$scevgep10 >> 2] = 0;
HEAP32[$scevgep10 + 4 >> 2] = 0;
HEAP32[$scevgep10 + 8 >> 2] = 0;
HEAP32[$scevgep10 + 12 >> 2] = 0;
HEAP32[$scevgep10 + 16 >> 2] = 0;
HEAP32[$scevgep10 + 20 >> 2] = 0;
HEAP32[$scevgep10 + 24 >> 2] = 0;
return;
}
function __ZN10Direction2C2EPKc9Mirroring($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $10 = f0, $3 = 0, $6 = f0, $8 = 0, $tmpcast2$sroa$0$0$extract$trunc$i = 0;
$3 = HEAP16[$2 >> 1] | 0;
__ZN10Direction213setFromStringEPKc($0, $1);
$tmpcast2$sroa$0$0$extract$trunc$i = $3 & 255;
if ($tmpcast2$sroa$0$0$extract$trunc$i & 2) {
$6 = Math_fround(-Math_fround(HEAPF32[$0 >> 2]));
HEAPF32[$0 >> 2] = $6;
}
if (!($tmpcast2$sroa$0$0$extract$trunc$i & 4)) return;
$8 = $0 + 4 | 0;
$10 = Math_fround(-Math_fround(HEAPF32[$8 >> 2]));
HEAPF32[$8 >> 2] = $10;
return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
var $10 = 0;
if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); else {
$10 = HEAP32[$0 + 8 >> 2] | 0;
FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] & 7]($10, $1, $2, $3, $4, $5);
}
return;
}
function __ZNK13ParTimedMorph14fillMorphFrameEfPfb($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = $2 | 0;
$3 = $3 | 0;
var $$010 = 0, $10 = 0, $12 = 0, $4 = 0, $5 = 0;
$4 = $0 + 24 | 0;
$5 = HEAP32[$4 >> 2] | 0;
if ((HEAP32[$5 + 12 >> 2] | 0) > 0) {
$$010 = 0;
$10 = $5;
} else return;
do {
$12 = HEAP32[(HEAP32[$10 >> 2] | 0) + ($$010 << 2) >> 2] | 0;
FUNCTION_TABLE_vifii[HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] & 3]($12, $1, $2, $3);
$$010 = $$010 + 1 | 0;
$10 = HEAP32[$4 >> 2] | 0;
} while (($$010 | 0) < (HEAP32[$10 + 12 >> 2] | 0));
return;
}
function __ZN19TurretJointRotation11interpolateERKS_S1_f($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = Math_fround($3);
var $11 = f0, $15 = f0, $19 = f0, $4 = f0, $7 = f0;
$4 = Math_fround(Math_fround(1.0) - $3);
$7 = Math_fround($4 * Math_fround(HEAPF32[$1 + 32 >> 2]));
$11 = Math_fround($7 + Math_fround(Math_fround(HEAPF32[$2 + 32 >> 2]) * $3));
HEAPF32[$0 + 32 >> 2] = $11;
$15 = Math_fround($4 * Math_fround(HEAPF32[$1 + 36 >> 2]));
$19 = Math_fround($15 + Math_fround(Math_fround(HEAPF32[$2 + 36 >> 2]) * $3));
HEAPF32[$0 + 36 >> 2] = $19;
return;
}
function __ZN7Gesture18propagateHandStuffER12TwoHandStuff($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $14 = 0, $17 = 0, $3 = 0, $6 = 0;
$3 = HEAP32[$0 + 28 >> 2] | 0;
if ($3 | 0) {
$6 = HEAP8[$0 + 13 >> 0] | 0;
if ((1 << (($6 & 255) >>> 6 & 1 ^ 3) & 255 & $6) << 24 >> 24) __ZN11OneHGesture18propagateHandStuffER12OneHandStuff($3, $1);
}
$14 = HEAP32[$0 + 32 >> 2] | 0;
if (!$14) return;
$17 = HEAP8[$0 + 13 >> 0] | 0;
if (!((1 << (($17 & 255) >>> 6 | 2) & 255 & $17) << 24 >> 24)) return;
__ZN11OneHGesture18propagateHandStuffER12OneHandStuff($14, $1 + 44 | 0);
return;
}
function __Z16UpdatePostMortemv() {
var $0 = 0, $4 = 0, $8 = 0;
$0 = HEAP8[73352] | 0;
if ($0 << 24 >> 24) HEAP32[17852] = (HEAP32[17852] | 0) + 1;
$4 = HEAP8[73353] | 0;
if ($4 << 24 >> 24) HEAP32[17853] = (HEAP32[17853] | 0) + 1;
$8 = HEAP8[73354] | 0;
if ($8 << 24 >> 24) HEAP32[17854] = (HEAP32[17854] | 0) + 1;
HEAP32[17851] = (HEAP32[17851] | 0) + 1;
if (($4 | $0 | $8) << 24 >> 24) {
HEAP8[73352] = 0;
HEAP8[73353] = 0;
HEAP8[73354] = 0;
return;
}
HEAP32[17855] = (HEAP32[17855] | 0) + 1;
HEAP8[73352] = 0;
HEAP8[73353] = 0;
HEAP8[73354] = 0;
return;
}
function _getint($0) {
$0 = $0 | 0;
var $$0$lcssa = 0, $$06 = 0, $1 = 0, $5 = 0, $7 = 0, $isdigittmp4 = 0, $isdigittmp7 = 0;
$1 = HEAP32[$0 >> 2] | 0;
$isdigittmp4 = (HEAP8[$1 >> 0] | 0) + -48 | 0;
if ($isdigittmp4 >>> 0 < 10) {
$$06 = 0;
$7 = $1;
$isdigittmp7 = $isdigittmp4;
while (1) {
$5 = $isdigittmp7 + ($$06 * 10 | 0) | 0;
$7 = $7 + 1 | 0;
HEAP32[$0 >> 2] = $7;
$isdigittmp7 = (HEAP8[$7 >> 0] | 0) + -48 | 0;
if ($isdigittmp7 >>> 0 >= 10) {
$$0$lcssa = $5;
break;
} else $$06 = $5;
}
} else $$0$lcssa = 0;
return $$0$lcssa | 0;
}
function __ZN4Site24getGlobalBoneTranslationEv($0) {
$0 = $0 | 0;
var $1 = 0, $11 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0;
$1 = $0 + 52 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if ($2 | 0) {
$13 = $2;
return $13 | 0;
}
$4 = __Znwj(12) | 0;
__THREW__ = 0;
invoke_vii(120, $4 | 0, $0 + 40 | 0);
$6 = __THREW__;
__THREW__ = 0;
if ($6 & 1) {
$11 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($4);
___resumeException($11 | 0);
}
HEAP32[$1 >> 2] = $4;
__ZN6Vector11setSubtractERKS_($4, (HEAP32[$0 + 16 >> 2] | 0) + 68 | 0);
$13 = HEAP32[$1 >> 2] | 0;
return $13 | 0;
}
function _memcmp($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$01318 = 0, $$01417 = 0, $$019 = 0, $14 = 0, $4 = 0, $5 = 0;
L1 : do if (!$2) $14 = 0; else {
$$01318 = $0;
$$01417 = $2;
$$019 = $1;
while (1) {
$4 = HEAP8[$$01318 >> 0] | 0;
$5 = HEAP8[$$019 >> 0] | 0;
if ($4 << 24 >> 24 != $5 << 24 >> 24) break;
$$01417 = $$01417 + -1 | 0;
if (!$$01417) {
$14 = 0;
break L1;
} else {
$$01318 = $$01318 + 1 | 0;
$$019 = $$019 + 1 | 0;
}
}
$14 = ($4 & 255) - ($5 & 255) | 0;
} while (0);
return $14 | 0;
}
function __ZN6Vector11setSubtractERKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $11 = f0, $12 = 0, $14 = f0, $2 = f0, $4 = f0, $6 = f0, $7 = 0, $9 = f0;
$2 = Math_fround(HEAPF32[$1 >> 2]);
$4 = Math_fround(Math_fround(HEAPF32[$0 >> 2]) - $2);
HEAPF32[$0 >> 2] = $4;
$6 = Math_fround(HEAPF32[$1 + 4 >> 2]);
$7 = $0 + 4 | 0;
$9 = Math_fround(Math_fround(HEAPF32[$7 >> 2]) - $6);
HEAPF32[$7 >> 2] = $9;
$11 = Math_fround(HEAPF32[$1 + 8 >> 2]);
$12 = $0 + 8 | 0;
$14 = Math_fround(Math_fround(HEAPF32[$12 >> 2]) - $11);
HEAPF32[$12 >> 2] = $14;
return;
}
function __ZN19SHMScalarController8resetVarEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 72 >> 2] = $1;
HEAPF32[$0 + 76 >> 2] = $1;
HEAPF32[$0 + 80 >> 2] = $1;
HEAP8[$0 + 32 >> 0] = 1;
HEAPF32[$0 + 88 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 92 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 64 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 100 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 104 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 68 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 4 >> 2] = Math_fround(0.0);
HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 12 >> 2];
return;
}
function __ZN10Quaternion16setPositivePhaseEv($0) {
$0 = $0 | 0;
var $1 = 0, $11 = f0, $12 = f0, $2 = f0, $5 = f0, $6 = 0, $8 = f0, $9 = 0;
$1 = $0 + 12 | 0;
$2 = Math_fround(HEAPF32[$1 >> 2]);
if (!($2 < Math_fround(0.0))) return;
$5 = Math_fround(-Math_fround(HEAPF32[$0 >> 2]));
HEAPF32[$0 >> 2] = $5;
$6 = $0 + 4 | 0;
$8 = Math_fround(-Math_fround(HEAPF32[$6 >> 2]));
HEAPF32[$6 >> 2] = $8;
$9 = $0 + 8 | 0;
$11 = Math_fround(-Math_fround(HEAPF32[$9 >> 2]));
HEAPF32[$9 >> 2] = $11;
$12 = Math_fround(-$2);
HEAPF32[$1 >> 2] = $12;
return;
}
function _store_int($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $7 = 0;
L1 : do if ($0 | 0) switch ($1 | 0) {
case -2:
{
HEAP8[$0 >> 0] = $2;
break L1;
break;
}
case -1:
{
HEAP16[$0 >> 1] = $2;
break L1;
break;
}
case 0:
{
HEAP32[$0 >> 2] = $2;
break L1;
break;
}
case 1:
{
HEAP32[$0 >> 2] = $2;
break L1;
break;
}
case 3:
{
$7 = $0;
HEAP32[$7 >> 2] = $2;
HEAP32[$7 + 4 >> 2] = $3;
break L1;
break;
}
default:
break L1;
} while (0);
return;
}
function __Z10copyStringPKc($0) {
$0 = $0 | 0;
var $$0 = 0, $3 = 0, $4 = 0, $6 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$0) {
$$0 = 0;
STACKTOP = sp;
return $$0 | 0;
}
$3 = (_strlen($0) | 0) + 1 | 0;
$4 = _malloc($3) | 0;
if (!$4) {
HEAP32[$vararg_buffer >> 2] = $3;
__Z7eprintfPKcz(9153, $vararg_buffer);
$6 = ___cxa_allocate_exception(4) | 0;
HEAP32[$6 >> 2] = 1;
___cxa_throw($6 | 0, 32, 0);
}
_strncpy($4, $0, $3) | 0;
$$0 = $4;
STACKTOP = sp;
return $$0 | 0;
}
function _attlist1($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0$ph = 0, $error$sink = 0, label = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 33;
break;
}
case 17:
{
$$0$ph = 33;
$error$sink = 7;
label = 4;
break;
}
case 41:
case 18:
{
$$0$ph = 22;
$error$sink = 31;
label = 4;
break;
}
default:
{
$$0$ph = -1;
$error$sink = 4;
label = 4;
}
}
if ((label | 0) == 4) {
HEAP32[$0 >> 2] = $error$sink;
$$0 = $$0$ph;
}
return $$0 | 0;
}
function __ZN6Vector6setAddERKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $11 = f0, $12 = 0, $14 = f0, $2 = f0, $4 = f0, $6 = f0, $7 = 0, $9 = f0;
$2 = Math_fround(HEAPF32[$1 >> 2]);
$4 = Math_fround($2 + Math_fround(HEAPF32[$0 >> 2]));
HEAPF32[$0 >> 2] = $4;
$6 = Math_fround(HEAPF32[$1 + 4 >> 2]);
$7 = $0 + 4 | 0;
$9 = Math_fround($6 + Math_fround(HEAPF32[$7 >> 2]));
HEAPF32[$7 >> 2] = $9;
$11 = Math_fround(HEAPF32[$1 + 8 >> 2]);
$12 = $0 + 8 | 0;
$14 = Math_fround($11 + Math_fround(HEAPF32[$12 >> 2]));
HEAPF32[$12 >> 2] = $14;
return;
}
function __ZN7SSPRSetC2EPcfffffff($0, $1, $2, $3, $4, $5, $6, $7, $8) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = Math_fround($3);
$4 = Math_fround($4);
$5 = Math_fround($5);
$6 = Math_fround($6);
$7 = Math_fround($7);
$8 = Math_fround($8);
HEAP32[$0 >> 2] = 816;
HEAP8[$0 + 8 >> 0] = 0;
_strncpy($0 + 4 | 0, $1, 4) | 0;
HEAPF32[$0 + 12 >> 2] = $2;
HEAPF32[$0 + 16 >> 2] = $3;
HEAPF32[$0 + 20 >> 2] = $4;
HEAPF32[$0 + 24 >> 2] = $5;
HEAPF32[$0 + 28 >> 2] = $6;
HEAPF32[$0 + 32 >> 2] = $7;
HEAPF32[$0 + 36 >> 2] = $8;
return;
}
function __ZNK17ElbowDisplacement5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $4 = 0.0, $7 = 0.0, $9 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
$4 = +Math_fround(HEAPF32[$0 >> 2]);
$7 = +Math_fround(HEAPF32[$0 + 4 >> 2]);
$9 = HEAP32[$0 + 8 >> 2] | 0;
HEAPF64[$vararg_buffer >> 3] = $4;
HEAPF64[$vararg_buffer + 8 >> 3] = $7;
HEAP32[$vararg_buffer + 16 >> 2] = $9;
_fprintf($1, 37475, $vararg_buffer) | 0;
STACKTOP = sp;
return;
}
function __ZN11ParMovement15offset1FinalPosERK6Vectorb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$012 = 0, $10 = 0, $11 = 0, $5 = 0, $7 = 0, $sext = 0;
$sext = HEAP32[$0 + 540 >> 2] << 16;
$5 = $sext >> 16;
if (($sext | 0) <= 0) return;
$7 = $0 + 528 | 0;
$$012 = 0;
$10 = 0;
do {
$11 = HEAP32[(HEAP32[$7 >> 2] | 0) + ($10 << 2) >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$11 >> 2] | 0) + 52 >> 2] & 127]($11, $1, $2);
$$012 = $$012 + 1 << 16 >> 16;
$10 = $$012 << 16 >> 16;
} while (($5 | 0) > ($10 | 0));
return;
}
function __ZN6KeyOpsIKPKcE12hashFunctionES1_i($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$07$lcssa$i = 0, $$078$i = 0, $$09$i = 0, $10 = 0, $2 = 0, $5 = 0;
$2 = HEAP8[$0 >> 0] | 0;
if (!($2 << 24 >> 24)) $$07$lcssa$i = 0; else {
$$078$i = 0;
$$09$i = $0;
$5 = $2;
while (1) {
$$09$i = $$09$i + 1 | 0;
$10 = ($$078$i << 8 | $$078$i >>> 24) + ($5 & 255) | 0;
$5 = HEAP8[$$09$i >> 0] | 0;
if (!($5 << 24 >> 24)) {
$$07$lcssa$i = $10;
break;
} else $$078$i = $10;
}
}
return ($$07$lcssa$i >>> 0) % ($1 >>> 0) | 0 | 0;
}
function __ZN11ParMovement12set1FinalPosERK6Vectorb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$012 = 0, $10 = 0, $11 = 0, $5 = 0, $7 = 0, $sext = 0;
$sext = HEAP32[$0 + 540 >> 2] << 16;
$5 = $sext >> 16;
if (($sext | 0) <= 0) return;
$7 = $0 + 528 | 0;
$$012 = 0;
$10 = 0;
do {
$11 = HEAP32[(HEAP32[$7 >> 2] | 0) + ($10 << 2) >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$11 >> 2] | 0) + 44 >> 2] & 127]($11, $1, $2);
$$012 = $$012 + 1 << 16 >> 16;
$10 = $$012 << 16 >> 16;
} while (($5 | 0) > ($10 | 0));
return;
}
function __ZN6KeyOpsIPKcE12hashFunctionES1_i($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$07$lcssa$i = 0, $$078$i = 0, $$09$i = 0, $10 = 0, $2 = 0, $5 = 0;
$2 = HEAP8[$0 >> 0] | 0;
if (!($2 << 24 >> 24)) $$07$lcssa$i = 0; else {
$$078$i = 0;
$$09$i = $0;
$5 = $2;
while (1) {
$$09$i = $$09$i + 1 | 0;
$10 = ($$078$i << 8 | $$078$i >>> 24) + ($5 & 255) | 0;
$5 = HEAP8[$$09$i >> 0] | 0;
if (!($5 << 24 >> 24)) {
$$07$lcssa$i = $10;
break;
} else $$078$i = $10;
}
}
return ($$07$lcssa$i >>> 0) % ($1 >>> 0) | 0 | 0;
}
function __ZN17VectorController213set_referenceE6Vector($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $3 = 0, $5 = f0, $7 = 0, $storemerge = f0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
$3 = $0 + 16 | 0;
__ZN6Vector7setFromERKS_($3, $1);
__ZN6VectorC2ERKS_($2, $3);
__ZN6Vector11setSubtractERKS_($2, $0 + 28 | 0);
$5 = Math_fround(__ZNK6Vector6lengthEv($2));
$7 = $5 < Math_fround(.0000999999974);
$storemerge = $7 ? Math_fround(.0000999999974) : $5;
HEAPF32[$0 + 8 >> 2] = $storemerge;
STACKTOP = sp;
return;
}
function _attlist7($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0$ph = 0, $error$sink = 0, label = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 33;
break;
}
case 24:
{
$$0$ph = 33;
$error$sink = 33;
label = 4;
break;
}
case 21:
{
$$0$ph = 33;
$error$sink = 35;
label = 4;
break;
}
default:
{
$$0$ph = -1;
$error$sink = 4;
label = 4;
}
}
if ((label | 0) == 4) {
HEAP32[$0 >> 2] = $error$sink;
$$0 = $$0$ph;
}
return $$0 | 0;
}
function _attlist4($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0$ph = 0, $error$sink = 0, label = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 33;
break;
}
case 24:
{
$$0$ph = 33;
$error$sink = 33;
label = 4;
break;
}
case 21:
{
$$0$ph = 33;
$error$sink = 32;
label = 4;
break;
}
default:
{
$$0$ph = -1;
$error$sink = 4;
label = 4;
}
}
if ((label | 0) == 4) {
HEAP32[$0 >> 2] = $error$sink;
$$0 = $$0$ph;
}
return $$0 | 0;
}
function __ZN6Vector11setSubtractERKS_S1_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $10 = f0, $13 = f0, $16 = f0, $3 = f0, $5 = f0, $7 = f0;
$3 = Math_fround(HEAPF32[$1 >> 2]);
$5 = Math_fround($3 - Math_fround(HEAPF32[$2 >> 2]));
HEAPF32[$0 >> 2] = $5;
$7 = Math_fround(HEAPF32[$1 + 4 >> 2]);
$10 = Math_fround($7 - Math_fround(HEAPF32[$2 + 4 >> 2]));
HEAPF32[$0 + 4 >> 2] = $10;
$13 = Math_fround(HEAPF32[$1 + 8 >> 2]);
$16 = Math_fround($13 - Math_fround(HEAPF32[$2 + 8 >> 2]));
HEAPF32[$0 + 8 >> 2] = $16;
return;
}
function _entity0($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0$ph = 0, $error$sink = 0, label = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 11;
break;
}
case 22:
{
$$0$ph = 11;
$error$sink = 17;
label = 4;
break;
}
case 18:
{
$$0$ph = 9;
$error$sink = 16;
label = 4;
break;
}
default:
{
$$0$ph = -1;
$error$sink = 4;
label = 4;
}
}
if ((label | 0) == 4) {
HEAP32[$0 >> 2] = $error$sink;
$$0 = $$0$ph;
}
return $$0 | 0;
}
function _doctype4($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0$ph = 0, $error$sink = 0, label = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 3;
break;
}
case 25:
{
$$0$ph = 7;
$error$sink = 7;
label = 4;
break;
}
case 17:
{
$$0$ph = 8;
$error$sink = 6;
label = 4;
break;
}
default:
{
$$0$ph = -1;
$error$sink = 4;
label = 4;
}
}
if ((label | 0) == 4) {
HEAP32[$0 >> 2] = $error$sink;
$$0 = $$0$ph;
}
return $$0 | 0;
}
function _fmt_x($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
if (($0 | 0) == 0 & ($1 | 0) == 0) $$05$lcssa = $2; else {
$$056 = $2;
$15 = $1;
$8 = $0;
while (1) {
$14 = $$056 + -1 | 0;
HEAP8[$14 >> 0] = HEAPU8[61315 + ($8 & 15) >> 0] | 0 | $3;
$8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0;
$15 = tempRet0;
if (($8 | 0) == 0 & ($15 | 0) == 0) {
$$05$lcssa = $14;
break;
} else $$056 = $14;
}
}
return $$05$lcssa | 0;
}
function ___stdout_write($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $14 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer = sp;
HEAP32[$0 + 36 >> 2] = 9;
if (!(HEAP32[$0 >> 2] & 64)) {
HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2];
HEAP32[$vararg_buffer + 4 >> 2] = 21523;
HEAP32[$vararg_buffer + 8 >> 2] = sp + 16;
if (___syscall54(54, $vararg_buffer | 0) | 0) HEAP8[$0 + 75 >> 0] = -1;
}
$14 = ___stdio_write($0, $1, $2) | 0;
STACKTOP = sp;
return $14 | 0;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
var $$0 = 0, $14 = 0, $7 = 0, $8 = 0;
$7 = HEAP32[$0 + 4 >> 2] | 0;
$8 = $7 >> 8;
if (!($7 & 1)) $$0 = $8; else $$0 = HEAP32[(HEAP32[$3 >> 2] | 0) + $8 >> 2] | 0;
$14 = HEAP32[$0 >> 2] | 0;
FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] & 7]($14, $1, $2, $3 + $$0 | 0, $7 & 2 | 0 ? $4 : 2, $5);
return;
}
function __ZN6Vector6setAddERKS_S1_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $10 = f0, $13 = f0, $16 = f0, $3 = f0, $5 = f0, $7 = f0;
$3 = Math_fround(HEAPF32[$1 >> 2]);
$5 = Math_fround($3 + Math_fround(HEAPF32[$2 >> 2]));
HEAPF32[$0 >> 2] = $5;
$7 = Math_fround(HEAPF32[$1 + 4 >> 2]);
$10 = Math_fround($7 + Math_fround(HEAPF32[$2 + 4 >> 2]));
HEAPF32[$0 + 4 >> 2] = $10;
$13 = Math_fround(HEAPF32[$1 + 8 >> 2]);
$16 = Math_fround($13 + Math_fround(HEAPF32[$2 + 8 >> 2]));
HEAPF32[$0 + 8 >> 2] = $16;
return;
}
function _fwrite($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$ = 0, $11 = 0, $13 = 0, $15 = 0, $4 = 0, $phitmp = 0;
$4 = Math_imul($2, $1) | 0;
$$ = ($1 | 0) == 0 ? 0 : $2;
if ((HEAP32[$3 + 76 >> 2] | 0) > -1) {
$phitmp = (___lockfile($3) | 0) == 0;
$11 = ___fwritex($0, $4, $3) | 0;
if ($phitmp) $13 = $11; else {
___unlockfile($3);
$13 = $11;
}
} else $13 = ___fwritex($0, $4, $3) | 0;
if (($13 | 0) == ($4 | 0)) $15 = $$; else $15 = ($13 >>> 0) / ($1 >>> 0) | 0;
return $15 | 0;
}
function __ZN4SiteC2EPKci($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $4 = 0, $7 = 0;
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $2;
$4 = $0 + 12 | 0;
HEAP16[$4 >> 1] = 0;
HEAP8[$4 + 2 >> 0] = 0;
__ZN6VectorC2Ev($0 + 28 | 0);
__ZN6VectorC2Ev($0 + 40 | 0);
$7 = $0 + 12 | 0;
HEAP16[$7 >> 1] = HEAP16[33214] | 0;
HEAP8[$7 + 2 >> 0] = HEAP8[66430] | 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 24 >> 2] = 0;
HEAPF32[$0 + 20 >> 2] = Math_fround(0.0);
HEAP32[$0 + 52 >> 2] = 0;
return;
}
function __ZN10Quaternion8setScaleEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $10 = 0, $12 = f0, $3 = f0, $4 = 0, $6 = f0, $7 = 0, $9 = f0;
$3 = Math_fround(Math_fround(HEAPF32[$0 >> 2]) * $1);
HEAPF32[$0 >> 2] = $3;
$4 = $0 + 4 | 0;
$6 = Math_fround(Math_fround(HEAPF32[$4 >> 2]) * $1);
HEAPF32[$4 >> 2] = $6;
$7 = $0 + 8 | 0;
$9 = Math_fround(Math_fround(HEAPF32[$7 >> 2]) * $1);
HEAPF32[$7 >> 2] = $9;
$10 = $0 + 12 | 0;
$12 = Math_fround(Math_fround(HEAPF32[$10 >> 2]) * $1);
HEAPF32[$10 >> 2] = $12;
return;
}
function __ZNK10Direction310makeMirrorE9Mirroring($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $10 = f0, $11 = f0, $15 = f0, $16 = f0, $3 = 0, $5 = f0, $6 = f0;
$3 = HEAP8[$2 >> 0] | 0;
$5 = Math_fround(HEAPF32[$1 >> 2]);
$6 = Math_fround(-$5);
$10 = Math_fround(HEAPF32[$1 + 4 >> 2]);
$11 = Math_fround(-$10);
$15 = Math_fround(HEAPF32[$1 + 8 >> 2]);
$16 = Math_fround(-$15);
HEAPF32[$0 >> 2] = $3 & 2 ? $6 : $5;
HEAPF32[$0 + 4 >> 2] = $3 & 4 ? $11 : $10;
HEAPF32[$0 + 8 >> 2] = $3 & 8 ? $16 : $15;
return;
}
function __ZSt9terminatev() {
var $0 = 0, $1 = 0, $19 = 0, $4 = 0, $7 = 0;
__THREW__ = 0;
$0 = invoke_i(5) | 0;
$1 = __THREW__;
__THREW__ = 0;
if ($1 & 1) {
$19 = ___cxa_find_matching_catch_3(0) | 0;
___clang_call_terminate($19);
}
if ($0 | 0) {
$4 = HEAP32[$0 >> 2] | 0;
if ($4 | 0) {
$7 = $4 + 48 | 0;
if ((HEAP32[$7 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$7 + 4 >> 2] | 0) == 1129074247 : 0) __ZSt11__terminatePFvvE(HEAP32[$4 + 12 >> 2] | 0);
}
}
__ZSt11__terminatePFvvE(__ZSt13get_terminatev() | 0);
}
function __ZNK11SeqMovement12CopyMovementEv($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $9 = 0;
$1 = __Znwj(580) | 0;
__THREW__ = 0;
invoke_vii(168, $1 | 0, $0 | 0);
$2 = __THREW__;
__THREW__ = 0;
if ($2 & 1) {
$9 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($1);
___resumeException($9 | 0);
} else {
HEAP32[$1 >> 2] = 3068;
HEAPF32[$1 + 576 >> 2] = Math_fround(0.0);
HEAP32[$1 + 564 >> 2] = 10;
HEAP32[$1 + 572 >> 2] = 0;
HEAP32[$1 + 560 >> 2] = 0;
HEAP32[$1 + 568 >> 2] = 0;
return $1 | 0;
}
return 0;
}
function _normal_nameLength($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0, $$sink = 0, $2 = 0;
$2 = $0 + 72 | 0;
$$0 = $1;
L1 : while (1) {
switch (HEAP8[$2 + (HEAPU8[$$0 >> 0] | 0) >> 0] | 0) {
case 5:
{
$$sink = 2;
break;
}
case 6:
{
$$sink = 3;
break;
}
case 7:
{
$$sink = 4;
break;
}
case 27:
case 26:
case 25:
case 24:
case 22:
case 29:
{
$$sink = 1;
break;
}
default:
break L1;
}
$$0 = $$0 + $$sink | 0;
}
return $$0 - $1 | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
$a$0 = $a$0 | 0;
$a$1 = $a$1 | 0;
$b$0 = $b$0 | 0;
$b$1 = $b$1 | 0;
var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
$x_sroa_0_0_extract_trunc = $a$0;
$y_sroa_0_0_extract_trunc = $b$0;
$1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
$1$1 = tempRet0;
return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $8 = 0;
if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); else {
$8 = HEAP32[$0 + 8 >> 2] | 0;
FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] & 15]($8, $1, $2, $3);
}
return;
}
function __Z15sphTriFaceAnglefff($0, $1, $2) {
$0 = Math_fround($0);
$1 = Math_fround($1);
$2 = Math_fround($2);
var $10 = f0, $11 = f0, $12 = f0, $9 = f0;
$9 = Math_fround(Math_fround(+Math_cos(+$2)) - Math_fround(Math_fround(+Math_cos(+$0)) * Math_fround(+Math_cos(+$1))));
$10 = Math_fround(Math_fround(+Math_sin(+$0)) * Math_fround(+Math_sin(+$1)));
$11 = Math_fround($9 * $9);
$12 = Math_fround($10 * $10);
return Math_fround(+Math_atan2(+Math_fround(Math_sqrt(Math_fround(($12 < $11 ? $11 : $12) - $11))), +$9));
}
function __ZN11MannerFlags9addMannerE6Manner($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
L1 : do if ((HEAP32[$0 >> 2] | 0) < ($1 | 0)) switch ($1 | 0) {
case 1:
case 10:
case 9:
case 8:
case 6:
case 3:
case 2:
case 11:
{
HEAP32[$0 >> 2] = $1;
break L1;
break;
}
case 4:
{
HEAP32[$0 + 4 >> 2] = 1;
break L1;
break;
}
case 5:
{
HEAP32[$0 + 4 >> 2] = 3;
break L1;
break;
}
case 7:
{
HEAP8[$0 + 8 >> 0] = 1;
break L1;
break;
}
default:
break L1;
} while (0);
return;
}
function __ZN13SeqTimedMorph11scaleAmountEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $$08 = 0, $10 = 0, $2 = 0, $3 = 0, $8 = 0;
$2 = $0 + 24 | 0;
$3 = HEAP32[$2 >> 2] | 0;
if ((HEAP32[$3 + 12 >> 2] | 0) > 0) {
$$08 = 0;
$8 = $3;
} else return;
do {
$10 = HEAP32[(HEAP32[$8 >> 2] | 0) + ($$08 << 2) >> 2] | 0;
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] & 63]($10, $1);
$$08 = $$08 + 1 | 0;
$8 = HEAP32[$2 >> 2] | 0;
} while (($$08 | 0) < (HEAP32[$8 + 12 >> 2] | 0));
return;
}
function __ZN13ParTimedMorph11scaleAmountEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $$08 = 0, $10 = 0, $2 = 0, $3 = 0, $8 = 0;
$2 = $0 + 24 | 0;
$3 = HEAP32[$2 >> 2] | 0;
if ((HEAP32[$3 + 12 >> 2] | 0) > 0) {
$$08 = 0;
$8 = $3;
} else return;
do {
$10 = HEAP32[(HEAP32[$8 >> 2] | 0) + ($$08 << 2) >> 2] | 0;
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] & 63]($10, $1);
$$08 = $$08 + 1 | 0;
$8 = HEAP32[$2 >> 2] | 0;
} while (($$08 | 0) < (HEAP32[$8 + 12 >> 2] | 0));
return;
}
function __ZNK10Quaternion12getAxisAngleER6VectorRf($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $12 = f0, $3 = f0, $5 = f0, $8 = f0;
$3 = Math_fround(HEAPF32[$0 >> 2]);
$5 = Math_fround(HEAPF32[$0 + 4 >> 2]);
__ZN6Vector7setFromEfff($1, $3, $5, Math_fround(HEAPF32[$0 + 8 >> 2]));
$8 = Math_fround(__ZNK6Vector6lengthEv($1));
__ZN6Vector7setUnitEv($1) | 0;
$12 = Math_fround(Math_fround(+Math_atan2(+$8, +Math_fround(HEAPF32[$0 + 12 >> 2]))) * Math_fround(2.0));
HEAPF32[$2 >> 2] = $12;
return;
}
function __ZN4SiteC2EPKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $3 = 0, $6 = 0;
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = -1;
$3 = $0 + 12 | 0;
HEAP16[$3 >> 1] = 0;
HEAP8[$3 + 2 >> 0] = 0;
__ZN6VectorC2Ev($0 + 28 | 0);
__ZN6VectorC2Ev($0 + 40 | 0);
$6 = $0 + 12 | 0;
HEAP16[$6 >> 1] = HEAP16[33214] | 0;
HEAP8[$6 + 2 >> 0] = HEAP8[66430] | 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 16 >> 2] = 0;
HEAP32[$0 + 24 >> 2] = 0;
HEAPF32[$0 + 20 >> 2] = Math_fround(0.0);
HEAP32[$0 + 52 >> 2] = 0;
return;
}
function ___fmodeflags($0) {
$0 = $0 | 0;
var $$0 = 0, $$0$ = 0, $$2 = 0, $$2$ = 0, $$4 = 0, $2 = 0, $3 = 0, $6 = 0, $9 = 0;
$2 = (_strchr($0, 43) | 0) == 0;
$3 = HEAP8[$0 >> 0] | 0;
$$0 = $2 ? $3 << 24 >> 24 != 114 & 1 : 2;
$6 = (_strchr($0, 120) | 0) == 0;
$$0$ = $6 ? $$0 : $$0 | 128;
$9 = (_strchr($0, 101) | 0) == 0;
$$2 = $9 ? $$0$ : $$0$ | 524288;
$$2$ = $3 << 24 >> 24 == 114 ? $$2 : $$2 | 64;
$$4 = $3 << 24 >> 24 == 119 ? $$2$ | 512 : $$2$;
return ($3 << 24 >> 24 == 97 ? $$4 | 1024 : $$4) | 0;
}
function __ZN7Gesture16transferLocationER6VectorP5JointS3_RKS0_($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $5 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$5 = sp;
if (($2 | 0) == ($3 | 0)) {
__ZN6Vector7setFromERKS_($1, $4);
STACKTOP = sp;
return;
} else {
__ZN9TransformC2Ev($5);
__ZN7Gesture8transferER9TransformP5JointS3_($0, $5, $2, $3);
__ZNK9Transform15transformVectorERK6VectorRS0_($5, $4, $1);
STACKTOP = sp;
return;
}
}
function _element3($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 39;
break;
}
case 24:
{
HEAP32[$0 >> 2] = 24;
HEAP32[$0 + 8 >> 2] = 39;
$$0 = 45;
break;
}
case 36:
{
HEAP32[$0 >> 2] = 24;
HEAP32[$0 + 8 >> 2] = 39;
$$0 = 46;
break;
}
case 21:
{
HEAP32[$0 >> 2] = 29;
$$0 = 39;
break;
}
default:
{
HEAP32[$0 >> 2] = 4;
$$0 = -1;
}
}
return $$0 | 0;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $13 = 0, $6 = 0, $7 = 0;
$6 = HEAP32[$0 + 4 >> 2] | 0;
$7 = $6 >> 8;
if (!($6 & 1)) $$0 = $7; else $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $7 >> 2] | 0;
$13 = HEAP32[$0 >> 2] | 0;
FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] & 15]($13, $1, $2 + $$0 | 0, $6 & 2 | 0 ? $3 : 2, $4);
return;
}
function ___string_read($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$027 = 0, $$027$ = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
$3 = $0 + 84 | 0;
$4 = HEAP32[$3 >> 2] | 0;
$5 = $2 + 256 | 0;
$6 = _memchr($4, 0, $5) | 0;
$$027 = ($6 | 0) == 0 ? $5 : $6 - $4 | 0;
$$027$ = $$027 >>> 0 < $2 >>> 0 ? $$027 : $2;
_memcpy($1 | 0, $4 | 0, $$027$ | 0) | 0;
HEAP32[$0 + 4 >> 2] = $4 + $$027$;
$14 = $4 + $$027 | 0;
HEAP32[$0 + 8 >> 2] = $14;
HEAP32[$3 >> 2] = $14;
return $$027$ | 0;
}
function __ZN10Quaternion8setScaleERKS_f($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
var $11 = f0, $15 = f0, $4 = f0, $7 = f0;
$4 = Math_fround(Math_fround(HEAPF32[$1 >> 2]) * $2);
HEAPF32[$0 >> 2] = $4;
$7 = Math_fround(Math_fround(HEAPF32[$1 + 4 >> 2]) * $2);
HEAPF32[$0 + 4 >> 2] = $7;
$11 = Math_fround(Math_fround(HEAPF32[$1 + 8 >> 2]) * $2);
HEAPF32[$0 + 8 >> 2] = $11;
$15 = Math_fround(Math_fround(HEAPF32[$1 + 12 >> 2]) * $2);
HEAPF32[$0 + 12 >> 2] = $15;
return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $12 = 0, $5 = 0, $6 = 0;
$5 = HEAP32[$0 + 4 >> 2] | 0;
$6 = $5 >> 8;
if (!($5 & 1)) $$0 = $6; else $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $6 >> 2] | 0;
$12 = HEAP32[$0 >> 2] | 0;
FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] & 15]($12, $1, $2 + $$0 | 0, $5 & 2 | 0 ? $3 : 2);
return;
}
function __ZNK14SiGMLHandshape13DefaultDigitsEv($0) {
$0 = $0 | 0;
var $$0 = 0, $1 = 0, $4 = 0;
$1 = HEAP32[$0 >> 2] | 0;
switch ($1 | 0) {
case 10:
case 7:
case 2:
case 1:
{
$$0 = __Z10MakeDigitsPKc(32559) | 0;
break;
}
case 12:
case 11:
case 9:
case 8:
case 6:
case 5:
case 4:
case 3:
{
$4 = HEAP16[$0 + 52 >> 1] | 0;
if (!($4 << 16 >> 16)) $$0 = HEAP16[66668 + ($1 * 160 | 0) + 152 >> 1] | 0; else $$0 = $4;
break;
}
default:
$$0 = 0;
}
return $$0 | 0;
}
function ___towrite($0) {
$0 = $0 | 0;
var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
$1 = $0 + 74 | 0;
$3 = HEAP8[$1 >> 0] | 0;
HEAP8[$1 >> 0] = $3 + 255 | $3;
$7 = HEAP32[$0 >> 2] | 0;
if (!($7 & 8)) {
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
$14 = HEAP32[$0 + 44 >> 2] | 0;
HEAP32[$0 + 28 >> 2] = $14;
HEAP32[$0 + 20 >> 2] = $14;
HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0);
$$0 = 0;
} else {
HEAP32[$0 >> 2] = $7 | 32;
$$0 = -1;
}
return $$0 | 0;
}
function __ZNK6Vector10dotProductERKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $11 = f0, $13 = f0, $2 = f0, $5 = f0, $7 = f0;
$2 = Math_fround(HEAPF32[$0 >> 2]);
$5 = Math_fround(Math_fround($2 * Math_fround(HEAPF32[$1 >> 2])) + Math_fround(0.0));
$7 = Math_fround(HEAPF32[$0 + 4 >> 2]);
$11 = Math_fround($5 + Math_fround($7 * Math_fround(HEAPF32[$1 + 4 >> 2])));
$13 = Math_fround(HEAPF32[$0 + 8 >> 2]);
return Math_fround($11 + Math_fround($13 * Math_fround(HEAPF32[$1 + 8 >> 2])));
}
function __ZN9HandshapeD2Ev($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $7 = 0, $9 = 0;
$1 = $0 + 220 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if ($2 | 0) {
__ZdlPv($2);
HEAP32[$1 >> 2] = 0;
}
$4 = $0 + 236 | 0;
$5 = HEAP32[$4 >> 2] | 0;
if (!$5) return;
__THREW__ = 0;
invoke_vi(102, $5 | 0);
$7 = __THREW__;
__THREW__ = 0;
if ($7 & 1) {
$9 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($5);
___resumeException($9 | 0);
}
__ZdlPv($5);
HEAP32[$4 >> 2] = 0;
return;
}
function __Z17MakeSplitMovementP13BasicMovementS0_b($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $10 = 0, $3 = 0, $4 = 0;
$3 = __Znwj(536) | 0;
__THREW__ = 0;
invoke_viii(89, $3 | 0, 7, 5);
$4 = __THREW__;
__THREW__ = 0;
if ($4 & 1) {
$10 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($3);
___resumeException($10 | 0);
} else {
HEAP32[$3 >> 2] = 3164;
HEAP32[$3 + 528 >> 2] = $2 ? $0 : $1;
HEAP32[$3 + 532 >> 2] = $2 ? $1 : $0;
return $3 | 0;
}
return 0;
}
function __Znwj($0) {
$0 = $0 | 0;
var $$ = 0, $2 = 0, $4 = 0, $6 = 0, label = 0;
$$ = ($0 | 0) == 0 ? 1 : $0;
while (1) {
$2 = _malloc($$) | 0;
if ($2 | 0) {
label = 6;
break;
}
$4 = __ZSt15get_new_handlerv() | 0;
if (!$4) {
label = 5;
break;
}
FUNCTION_TABLE_v[$4 & 31]();
}
if ((label | 0) == 5) {
$6 = ___cxa_allocate_exception(4) | 0;
__ZNSt9bad_allocC2Ev($6);
___cxa_throw($6 | 0, 648, 78);
} else if ((label | 0) == 6) return $2 | 0;
return 0;
}
function __ZN5SiGML17convertAttributeHEPK21InvertibleStringArrayPKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$1 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) $$1 = 0; else {
$3 = __ZNK21InvertibleStringArray14indexFromValueEPKc($0, $1) | 0;
if (($3 | 0) == -1) {
HEAP32[$vararg_buffer >> 2] = $1;
__Z7eprintfPKcz(53557, $vararg_buffer);
$$1 = 0;
} else $$1 = $3;
}
STACKTOP = sp;
return $$1 | 0;
}
function _attlist3($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0$ph = 0, $error$sink = 0, label = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 33;
break;
}
case 41:
case 18:
case 19:
{
$$0$ph = 31;
$error$sink = 36;
label = 3;
break;
}
default:
{
$$0$ph = -1;
$error$sink = 4;
label = 3;
}
}
if ((label | 0) == 3) {
HEAP32[$0 >> 2] = $error$sink;
$$0 = $$0$ph;
}
return $$0 | 0;
}
function __ZN7SegmentC2EPKci($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $6 = 0;
HEAP32[$0 >> 2] = $1;
HEAP32[$0 + 4 >> 2] = $2;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 1;
$6 = $0 + 16 | 0;
HEAP32[$6 >> 2] = 0;
HEAP32[$6 + 4 >> 2] = 0;
HEAP32[$6 + 8 >> 2] = 0;
HEAP32[$6 + 12 >> 2] = 0;
__ZN6VectorC2Efff($0 + 32 | 0, Math_fround(0.0), Math_fround(0.0), Math_fround(0.0));
HEAP32[$0 + 44 >> 2] = 1484;
HEAP32[16167] = (HEAP32[16167] | 0) + 1;
return;
}
function _fmt_o($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
if (($0 | 0) == 0 & ($1 | 0) == 0) $$0$lcssa = $2; else {
$$06 = $2;
$11 = $1;
$7 = $0;
while (1) {
$10 = $$06 + -1 | 0;
HEAP8[$10 >> 0] = $7 & 7 | 48;
$7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0;
$11 = tempRet0;
if (($7 | 0) == 0 & ($11 | 0) == 0) {
$$0$lcssa = $10;
break;
} else $$06 = $10;
}
}
return $$0$lcssa | 0;
}
function __ZN10Quaternion7setFlipEv($0) {
$0 = $0 | 0;
var $11 = f0, $2 = f0, $3 = 0, $5 = f0, $6 = 0, $8 = f0, $9 = 0;
$2 = Math_fround(-Math_fround(HEAPF32[$0 >> 2]));
HEAPF32[$0 >> 2] = $2;
$3 = $0 + 4 | 0;
$5 = Math_fround(-Math_fround(HEAPF32[$3 >> 2]));
HEAPF32[$3 >> 2] = $5;
$6 = $0 + 8 | 0;
$8 = Math_fround(-Math_fround(HEAPF32[$6 >> 2]));
HEAPF32[$6 >> 2] = $8;
$9 = $0 + 12 | 0;
$11 = Math_fround(-Math_fround(HEAPF32[$9 >> 2]));
HEAPF32[$9 >> 2] = $11;
return;
}
function __ZN14AvatarGeometryC2Ev($0) {
$0 = $0 | 0;
HEAPF32[$0 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 4 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 8 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 12 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 16 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 20 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 24 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 28 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 32 >> 2] = Math_fround(1.0);
HEAPF32[$0 + 36 >> 2] = Math_fround(1.0);
return;
}
function __Z10printDigitP8_IO_FILE10DigitIndex($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
do if ($0 | 0) {
if (($1 | 0) == -1) {
_fwrite(36583, 7, 1, $0) | 0;
break;
}
if ($1 >>> 0 > 4) {
HEAP32[$vararg_buffer >> 2] = $1;
_fprintf($0, 24785, $vararg_buffer) | 0;
break;
} else {
_fputc($1 + 49 | 0, $0) | 0;
break;
}
} while (0);
STACKTOP = sp;
return;
}
function __ZNK10Quaternion6lengthEv($0) {
$0 = $0 | 0;
var $1 = f0, $10 = f0, $12 = f0, $2 = f0, $4 = f0, $6 = f0, $8 = f0;
$1 = Math_fround(HEAPF32[$0 >> 2]);
$2 = Math_fround($1 * $1);
$4 = Math_fround(HEAPF32[$0 + 4 >> 2]);
$6 = Math_fround($2 + Math_fround($4 * $4));
$8 = Math_fround(HEAPF32[$0 + 8 >> 2]);
$10 = Math_fround($6 + Math_fround($8 * $8));
$12 = Math_fround(HEAPF32[$0 + 12 >> 2]);
return Math_fround(Math_sqrt(Math_fround($10 + Math_fround($12 * $12))));
}
function _vsscanf($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $8 = 0, dest = 0, sp = 0, stop = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 128 | 0;
$3 = sp;
dest = $3;
stop = dest + 124 | 0;
do {
HEAP32[dest >> 2] = 0;
dest = dest + 4 | 0;
} while ((dest | 0) < (stop | 0));
HEAP32[$3 + 32 >> 2] = 25;
HEAP32[$3 + 44 >> 2] = $0;
HEAP32[$3 + 76 >> 2] = -1;
HEAP32[$3 + 84 >> 2] = $0;
$8 = _vfscanf($3, $1, $2) | 0;
STACKTOP = sp;
return $8 | 0;
}
function __ZN17TargettedMovementD0Ev($0) {
$0 = $0 | 0;
var $5 = 0, $7 = 0, $9 = 0;
HEAP32[$0 >> 2] = 2752;
if (!(HEAP8[$0 + 532 >> 0] | 0)) {
__ZdlPv($0);
return;
}
$5 = HEAP32[$0 + 528 >> 2] | 0;
if (!$5) {
__ZdlPv($0);
return;
}
__THREW__ = 0;
invoke_vi(142, $5 | 0);
$7 = __THREW__;
__THREW__ = 0;
if ($7 & 1) {
$9 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($5);
__ZdlPv($0);
___resumeException($9 | 0);
}
__ZdlPv($5);
__ZdlPv($0);
return;
}
function _element4($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0$ph = 0, $error$sink = 0, label = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 39;
break;
}
case 41:
case 18:
{
$$0$ph = 51;
$error$sink = 30;
label = 3;
break;
}
default:
{
$$0$ph = -1;
$error$sink = 4;
label = 3;
}
}
if ((label | 0) == 3) {
HEAP32[$0 >> 2] = $error$sink;
$$0 = $$0$ph;
}
return $$0 | 0;
}
function _element0($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0$ph = 0, $error$sink = 0, label = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 39;
break;
}
case 41:
case 18:
{
$$0$ph = 40;
$error$sink = 19;
label = 3;
break;
}
default:
{
$$0$ph = -1;
$error$sink = 4;
label = 3;
}
}
if ((label | 0) == 3) {
HEAP32[$0 >> 2] = $error$sink;
$$0 = $$0$ph;
}
return $$0 | 0;
}
function _attlist0($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0$ph = 0, $error$sink = 0, label = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 33;
break;
}
case 41:
case 18:
{
$$0$ph = 34;
$error$sink = 18;
label = 3;
break;
}
default:
{
$$0$ph = -1;
$error$sink = 4;
label = 3;
}
}
if ((label | 0) == 3) {
HEAP32[$0 >> 2] = $error$sink;
$$0 = $$0$ph;
}
return $$0 | 0;
}
function __ZN21InvertibleStringArray19NewInvertibleArrayAEssz($0, $1, $varargs) {
$0 = $0 | 0;
$1 = $1 | 0;
$varargs = $varargs | 0;
var $2 = 0, $3 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
$3 = __Znwj(16) | 0;
HEAP32[$3 >> 2] = 0;
HEAP32[$3 + 4 >> 2] = 0;
HEAP32[$3 + 8 >> 2] = 0;
HEAP32[$3 + 12 >> 2] = $0 << 16 >> 16;
HEAP32[$2 >> 2] = $varargs;
__ZN21InvertibleStringArray12vSetAsArrayAEsPi($3, $1, $2);
STACKTOP = sp;
return $3 | 0;
}
function __ZN18FingerPlayMovement22setOwnMotionAttributesERK16MotionAttributes($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $11 = 0, $5 = 0, $6 = 0;
HEAP32[$0 + 528 >> 2] = 2;
HEAP32[$0 + 532 >> 2] = 2;
$5 = HEAP32[$0 + 8 >> 2] | 0;
switch ($5 | 0) {
case 3:
case 5:
{
$6 = $0 + 508 | 0;
HEAP16[$6 >> 1] = HEAP16[$6 >> 1] | 128;
break;
}
default:
{}
}
if (($5 | 1 | 0) != 5) return;
$11 = $0 + 510 | 0;
HEAP16[$11 >> 1] = HEAP16[$11 >> 1] | 128;
return;
}
function __ZN18AbstractTimedMorph7rescaleEP7XMLCell($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $4 = 0, $5 = f0, $6 = f0, $7 = f0;
$4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] | 0;
$5 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($1, 51282, Math_fround(-1.0)));
$6 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($1, 51301, Math_fround(1.0)));
$7 = Math_fround(__ZN7XMLCell11attrib_REALEPKcf($1, 51291, Math_fround(1.0)));
FUNCTION_TABLE_vifff[$4 & 3]($0, $5, $6, $7);
return;
}
function _doctype0($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0$ph = 0, $error$sink = 0, label = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 3;
break;
}
case 41:
case 18:
{
$$0$ph = 4;
$error$sink = 5;
label = 3;
break;
}
default:
{
$$0$ph = -1;
$error$sink = 4;
label = 3;
}
}
if ((label | 0) == 3) {
HEAP32[$0 >> 2] = $error$sink;
$$0 = $$0$ph;
}
return $$0 | 0;
}
function __ZN21InvertibleStringArrayD2Ev($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0;
$1 = $0 + 4 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if ($2 | 0) {
_free($2);
HEAP32[$1 >> 2] = 0;
}
$4 = HEAP32[$0 >> 2] | 0;
if (!$4) return;
__THREW__ = 0;
invoke_vi(93, $4 | 0);
$6 = __THREW__;
__THREW__ = 0;
if ($6 & 1) {
$8 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($4);
___resumeException($8 | 0);
}
__ZdlPv($4);
HEAP32[$0 >> 2] = 0;
return;
}
function __Z7LogTimev() {
var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$0 = sp + 4 | 0;
$1 = HEAP32[16082] | 0;
$2 = _time(0) | 0;
if (!$1) {
STACKTOP = sp;
return $2 | 0;
}
HEAP32[$0 >> 2] = $2;
_strftime(72166, 40, 9231, _localtime($0 | 0) | 0) | 0;
HEAP8[72205] = 0;
HEAP32[$vararg_buffer >> 2] = 72166;
_fprintf($1, 9243, $vararg_buffer) | 0;
STACKTOP = sp;
return $2 | 0;
}
function __ZN5SiGML16convertProximityEPKc($0) {
$0 = $0 | 0;
var $$1$i = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$0) $$1$i = 0; else {
$3 = __ZNK21InvertibleStringArray14indexFromValueEPKc(HEAP32[17197] | 0, $0) | 0;
if (($3 | 0) == -1) {
HEAP32[$vararg_buffer >> 2] = $0;
__Z7eprintfPKcz(53557, $vararg_buffer);
$$1$i = 0;
} else $$1$i = $3;
}
STACKTOP = sp;
return $$1$i | 0;
}
function __ZN5SiGML15convertLocationEPKc($0) {
$0 = $0 | 0;
var $$1$i = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$0) $$1$i = 0; else {
$3 = __ZNK21InvertibleStringArray14indexFromValueEPKc(HEAP32[17192] | 0, $0) | 0;
if (($3 | 0) == -1) {
HEAP32[$vararg_buffer >> 2] = $0;
__Z7eprintfPKcz(53557, $vararg_buffer);
$$1$i = 0;
} else $$1$i = $3;
}
STACKTOP = sp;
return $$1$i | 0;
}
function _notation2($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0$ph = 0, $error$sink = 0, label = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 17;
break;
}
case 27:
{
$$0$ph = 21;
$error$sink = 23;
label = 3;
break;
}
default:
{
$$0$ph = -1;
$error$sink = 4;
label = 3;
}
}
if ((label | 0) == 3) {
HEAP32[$0 >> 2] = $error$sink;
$$0 = $$0$ph;
}
return $$0 | 0;
}
function _notation0($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0$ph = 0, $error$sink = 0, label = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 17;
break;
}
case 18:
{
$$0$ph = 18;
$error$sink = 20;
label = 3;
break;
}
default:
{
$$0$ph = -1;
$error$sink = 4;
label = 3;
}
}
if ((label | 0) == 3) {
HEAP32[$0 >> 2] = $error$sink;
$$0 = $$0$ph;
}
return $$0 | 0;
}
function _attlist9($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0$ph = 0, $error$sink = 0, label = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 33;
break;
}
case 27:
{
$$0$ph = 38;
$error$sink = 18;
label = 3;
break;
}
default:
{
$$0$ph = -1;
$error$sink = 4;
label = 3;
}
}
if ((label | 0) == 3) {
HEAP32[$0 >> 2] = $error$sink;
$$0 = $$0$ph;
}
return $$0 | 0;
}
function _attlist6($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0$ph = 0, $error$sink = 0, label = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 33;
break;
}
case 18:
{
$$0$ph = 32;
$error$sink = 38;
label = 3;
break;
}
default:
{
$$0$ph = -1;
$error$sink = 4;
label = 3;
}
}
if ((label | 0) == 3) {
HEAP32[$0 >> 2] = $error$sink;
$$0 = $$0$ph;
}
return $$0 | 0;
}
function _attlist5($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0$ph = 0, $error$sink = 0, label = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 33;
break;
}
case 23:
{
$$0$ph = 33;
$error$sink = 35;
label = 3;
break;
}
default:
{
$$0$ph = -1;
$error$sink = 4;
label = 3;
}
}
if ((label | 0) == 3) {
HEAP32[$0 >> 2] = $error$sink;
$$0 = $$0$ph;
}
return $$0 | 0;
}
function _entity9($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0$ph = 0, $error$sink = 0, label = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 11;
break;
}
case 27:
{
$$0$ph = 13;
$error$sink = 46;
label = 3;
break;
}
default:
{
$$0$ph = -1;
$error$sink = 4;
label = 3;
}
}
if ((label | 0) == 3) {
HEAP32[$0 >> 2] = $error$sink;
$$0 = $$0$ph;
}
return $$0 | 0;
}
function _entity8($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0$ph = 0, $error$sink = 0, label = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 11;
break;
}
case 27:
{
$$0$ph = 14;
$error$sink = 44;
label = 3;
break;
}
default:
{
$$0$ph = -1;
$error$sink = 4;
label = 3;
}
}
if ((label | 0) == 3) {
HEAP32[$0 >> 2] = $error$sink;
$$0 = $$0$ph;
}
return $$0 | 0;
}
function _entity4($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0$ph = 0, $error$sink = 0, label = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 11;
break;
}
case 27:
{
$$0$ph = 13;
$error$sink = 42;
label = 3;
break;
}
default:
{
$$0$ph = -1;
$error$sink = 4;
label = 3;
}
}
if ((label | 0) == 3) {
HEAP32[$0 >> 2] = $error$sink;
$$0 = $$0$ph;
}
return $$0 | 0;
}
function _entity3($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0$ph = 0, $error$sink = 0, label = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 11;
break;
}
case 27:
{
$$0$ph = 14;
$error$sink = 40;
label = 3;
break;
}
default:
{
$$0$ph = -1;
$error$sink = 4;
label = 3;
}
}
if ((label | 0) == 3) {
HEAP32[$0 >> 2] = $error$sink;
$$0 = $$0$ph;
}
return $$0 | 0;
}
function _entity10($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0$ph = 0, $error$sink = 0, label = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 11;
break;
}
case 17:
{
$$0$ph = 15;
$error$sink = 7;
label = 3;
break;
}
default:
{
$$0$ph = -1;
$error$sink = 4;
label = 3;
}
}
if ((label | 0) == 3) {
HEAP32[$0 >> 2] = $error$sink;
$$0 = $$0$ph;
}
return $$0 | 0;
}
function _entity1($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0$ph = 0, $error$sink = 0, label = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 11;
break;
}
case 18:
{
$$0$ph = 10;
$error$sink = 39;
label = 3;
break;
}
default:
{
$$0$ph = -1;
$error$sink = 4;
label = 3;
}
}
if ((label | 0) == 3) {
HEAP32[$0 >> 2] = $error$sink;
$$0 = $$0$ph;
}
return $$0 | 0;
}
function _doctype3($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0$ph = 0, $error$sink = 0, label = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 3;
break;
}
case 27:
{
$$0$ph = 5;
$error$sink = 15;
label = 3;
break;
}
default:
{
$$0$ph = -1;
$error$sink = 4;
label = 3;
}
}
if ((label | 0) == 3) {
HEAP32[$0 >> 2] = $error$sink;
$$0 = $$0$ph;
}
return $$0 | 0;
}
function __ZN11OneHGesture17SetFromHandConfigEPK7HashAnyIPKcS2_E($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$byval_copy = 0, $2 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$$byval_copy = sp + 2 | 0;
$2 = sp;
HEAP8[$2 >> 0] = 0;
HEAP8[$$byval_copy >> 0] = HEAP8[$2 >> 0] | 0;
HEAP8[$$byval_copy + 1 >> 0] = HEAP8[$2 + 1 >> 0] | 0;
__ZN11OneHGesture17SetFromHandConfigEPK7HashAnyIPKcS2_E9Mirroring($0, $1, $$byval_copy);
STACKTOP = sp;
return;
}
function _doctype5($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0$ph = 0, $error$sink = 0, label = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 3;
break;
}
case 17:
{
$$0$ph = 8;
$error$sink = 6;
label = 3;
break;
}
default:
{
$$0$ph = -1;
$error$sink = 4;
label = 3;
}
}
if ((label | 0) == 3) {
HEAP32[$0 >> 2] = $error$sink;
$$0 = $$0$ph;
}
return $$0 | 0;
}
function _doctype2($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $$0$ph = 0, $error$sink = 0, label = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 3;
break;
}
case 27:
{
$$0$ph = 6;
$error$sink = 8;
label = 3;
break;
}
default:
{
$$0$ph = -1;
$error$sink = 4;
label = 3;
}
}
if ((label | 0) == 3) {
HEAP32[$0 >> 2] = $error$sink;
$$0 = $$0$ph;
}
return $$0 | 0;
}
function runPostSets() {}
function ___muldsi3($a, $b) {
$a = $a | 0;
$b = $b | 0;
var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
$1 = $a & 65535;
$2 = $b & 65535;
$3 = Math_imul($2, $1) | 0;
$6 = $a >>> 16;
$8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
$11 = $b >>> 16;
$12 = Math_imul($11, $1) | 0;
return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}
function __ZN10Controller8resetVarEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 60 >> 2] = $1;
HEAPF32[$0 + 64 >> 2] = $1;
HEAPF32[$0 + 68 >> 2] = $1;
HEAP8[$0 + 16 >> 0] = 1;
HEAPF32[$0 + 76 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 80 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 48 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 88 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 92 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 52 >> 2] = Math_fround(0.0);
return;
}
function __ZNK10Quaternion8lengthsqEv($0) {
$0 = $0 | 0;
var $1 = f0, $10 = f0, $12 = f0, $2 = f0, $4 = f0, $6 = f0, $8 = f0;
$1 = Math_fround(HEAPF32[$0 >> 2]);
$2 = Math_fround($1 * $1);
$4 = Math_fround(HEAPF32[$0 + 4 >> 2]);
$6 = Math_fround($2 + Math_fround($4 * $4));
$8 = Math_fround(HEAPF32[$0 + 8 >> 2]);
$10 = Math_fround($6 + Math_fround($8 * $8));
$12 = Math_fround(HEAPF32[$0 + 12 >> 2]);
return Math_fround($10 + Math_fround($12 * $12));
}
function __ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $15 = 0, $3 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$0 >> 2] | 0) + 12 >> 2] & 127]($3, $0, $1);
if ((HEAP32[$3 + 4 >> 2] | 0) == (HEAP32[$2 + 4 >> 2] | 0)) $15 = (HEAP32[$3 >> 2] | 0) == (HEAP32[$2 >> 2] | 0); else $15 = 0;
STACKTOP = sp;
return $15 | 0;
}
function __ZN7XMLCell11attrib_REALEPKcf($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
var $3 = 0, $4 = 0, $7 = f0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp + 4 | 0;
$4 = sp;
HEAPF32[$4 >> 2] = $2;
HEAP32[$3 >> 2] = 0;
__Z13HA_get_attribIfdEbPK7HashAnyIPKcS2_ERT_R12AttribStatusS2_S2_(HEAP32[$0 + 4 >> 2] | 0, $4, $3, 54455, $1) | 0;
$7 = Math_fround(HEAPF32[$4 >> 2]);
STACKTOP = sp;
return Math_fround($7);
}
function __Z23HashAttribs_attrib_REALPK7HashAnyIPKcS1_ES1_f($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
var $3 = 0, $4 = 0, $5 = f0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp + 4 | 0;
$4 = sp;
HEAPF32[$4 >> 2] = $2;
HEAP32[$3 >> 2] = 0;
__Z13HA_get_attribIfdEbPK7HashAnyIPKcS2_ERT_R12AttribStatusS2_S2_($0, $4, $3, 54455, $1) | 0;
$5 = Math_fround(HEAPF32[$4 >> 2]);
STACKTOP = sp;
return Math_fround($5);
}
function dynCall_viifffffff(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
index = index | 0;
a1 = a1 | 0;
a2 = a2 | 0;
a3 = Math_fround(a3);
a4 = Math_fround(a4);
a5 = Math_fround(a5);
a6 = Math_fround(a6);
a7 = Math_fround(a7);
a8 = Math_fround(a8);
a9 = Math_fround(a9);
FUNCTION_TABLE_viifffffff[index & 1](a1 | 0, a2 | 0, Math_fround(a3), Math_fround(a4), Math_fround(a5), Math_fround(a6), Math_fround(a7), Math_fround(a8), Math_fround(a9));
}
function _animgenDeAllocate($0) {
$0 = $0 | 0;
var $$0$i = 0, $10 = 0, $4 = 0, $7 = 0;
$4 = HEAP32[17849] | 0;
if (($4 | 0) == 0 | (($0 | 0) != 0 | (HEAP32[17848] | 0) != 1)) {
$$0$i = 0;
return $$0$i | 0;
}
_animgen_lite_terminate();
$7 = HEAP32[17849] | 0;
if ($7 | 0) {
__ZdlPv($7);
HEAP32[17849] = 0;
}
$10 = HEAP32[$4 + 12 >> 2] | 0;
if (!$10) {
$$0$i = 1;
return $$0$i | 0;
}
_fclose($10) | 0;
$$0$i = 1;
return $$0$i | 0;
}
function __ZN16AtomicTimedMorph11scaleAmountEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $10 = f0, $2 = 0, $4 = f0, $5 = 0, $7 = f0, $8 = 0;
$2 = $0 + 28 | 0;
$4 = Math_fround(Math_fround(HEAPF32[$2 >> 2]) * $1);
HEAPF32[$2 >> 2] = $4;
$5 = $0 + 32 | 0;
$7 = Math_fround(Math_fround(HEAPF32[$5 >> 2]) * $1);
HEAPF32[$5 >> 2] = $7;
$8 = $0 + 36 | 0;
$10 = Math_fround(Math_fround(HEAPF32[$8 >> 2]) * $1);
HEAPF32[$8 >> 2] = $10;
return;
}
function __ZNK17QuatJointRotation5printEP8_IO_FILEs($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
HEAP32[$vararg_buffer >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2];
_fprintf($1, 14925, $vararg_buffer) | 0;
__ZNK10Quaternion5printEP8_IO_FILEi($0 + 8 | 0, $1, $2 << 16 >> 16);
STACKTOP = sp;
return;
}
function __Z17appendIntToStringNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$2 = sp + 4 | 0;
HEAP32[$vararg_buffer >> 2] = $1;
_sprintf($2, 53470, $vararg_buffer) | 0;
__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($0, $2) | 0;
STACKTOP = sp;
return;
}
function __Z14MirrorBodySide16AbsoluteBodySide9Mirroring($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $4 = 0;
L1 : do if (!(HEAP8[$1 >> 0] & 2)) $4 = $0; else switch ($0 | 0) {
case 1:
{
$4 = 2;
break L1;
break;
}
case 2:
{
$4 = 1;
break L1;
break;
}
case 3:
{
$4 = 4;
break L1;
break;
}
case 4:
{
$4 = 3;
break L1;
break;
}
default:
{
$4 = $0;
break L1;
}
} while (0);
return $4 | 0;
}
function __ZN21InvertibleStringArray19NewInvertibleArrayHEPKcz($0, $varargs) {
$0 = $0 | 0;
$varargs = $varargs | 0;
var $1 = 0, $2 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$1 = sp;
$2 = __Znwj(16) | 0;
HEAP32[$2 >> 2] = 0;
HEAP32[$2 + 4 >> 2] = 0;
HEAP32[$2 + 8 >> 2] = 0;
HEAP32[$2 + 12 >> 2] = 0;
HEAP32[$1 >> 2] = $varargs;
__ZN21InvertibleStringArray12vSetAsArrayHEPKcPi($2, $0, $1);
STACKTOP = sp;
return $2 | 0;
}
function __ZN6Vector8setScaleEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $3 = f0, $4 = 0, $6 = f0, $7 = 0, $9 = f0;
$3 = Math_fround(Math_fround(HEAPF32[$0 >> 2]) * $1);
HEAPF32[$0 >> 2] = $3;
$4 = $0 + 4 | 0;
$6 = Math_fround(Math_fround(HEAPF32[$4 >> 2]) * $1);
HEAPF32[$4 >> 2] = $6;
$7 = $0 + 8 | 0;
$9 = Math_fround(Math_fround(HEAPF32[$7 >> 2]) * $1);
HEAPF32[$7 >> 2] = $9;
__ZNK6Vector16checkValidVectorEv($0);
return;
}
function __ZN11OneHGestureD2Ev($0) {
$0 = $0 | 0;
var $10 = 0, $5 = 0, $6 = 0, $8 = 0;
HEAP32[$0 + 72 >> 2] = 0;
if (!(HEAP8[$0 + 52 >> 0] | 0)) return;
$5 = $0 + 56 | 0;
$6 = HEAP32[$5 >> 2] | 0;
if (!$6) return;
__THREW__ = 0;
invoke_vi(133, $6 | 0);
$8 = __THREW__;
__THREW__ = 0;
if ($8 & 1) {
$10 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($6);
___resumeException($10 | 0);
}
__ZdlPv($6);
HEAP32[$5 >> 2] = 0;
return;
}
function __ZN11SeqMovement16FinaliseGesturesEv($0) {
$0 = $0 | 0;
var $$010 = 0, $3 = 0, $5 = 0, $8 = 0, $sext = 0;
$sext = HEAP32[$0 + 540 >> 2] << 16;
$3 = $sext >> 16;
if (($sext | 0) <= 0) return;
$5 = $0 + 528 | 0;
$$010 = 0;
do {
$8 = HEAP32[(HEAP32[$5 >> 2] | 0) + ($$010 << 2) >> 2] | 0;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$8 >> 2] | 0) + 36 >> 2] & 255]($8);
$$010 = $$010 + 1 | 0;
} while (($$010 | 0) < ($3 | 0));
return;
}
function __ZN11ParMovement16FinaliseGesturesEv($0) {
$0 = $0 | 0;
var $$010 = 0, $3 = 0, $5 = 0, $8 = 0, $sext = 0;
$sext = HEAP32[$0 + 540 >> 2] << 16;
$3 = $sext >> 16;
if (($sext | 0) <= 0) return;
$5 = $0 + 528 | 0;
$$010 = 0;
do {
$8 = HEAP32[(HEAP32[$5 >> 2] | 0) + ($$010 << 2) >> 2] | 0;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$8 >> 2] | 0) + 36 >> 2] & 255]($8);
$$010 = $$010 + 1 | 0;
} while (($$010 | 0) < ($3 | 0));
return;
}
function _prologInitProcessor($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $$0 = 0, $11 = 0, $4 = 0;
$4 = $0 + 228 | 0;
if (!(_XmlInitEncoding($0 + 148 | 0, $0 + 144 | 0, HEAP32[$4 >> 2] | 0) | 0)) {
$11 = _handleUnknownEncoding($0, HEAP32[$4 >> 2] | 0) | 0;
if ($11 | 0) {
$$0 = $11;
return $$0 | 0;
}
}
HEAP32[$0 + 264 >> 2] = 28;
$$0 = _prologProcessor($0, $1, $2, $3) | 0;
return $$0 | 0;
}
function _prolog2($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0, $5 = 0;
$5 = $1 + -11 | 0;
switch ($5 >>> 1 | $5 << 31 | 0) {
case 2:
{
$$0 = 0;
break;
}
case 0:
{
$$0 = 55;
break;
}
case 1:
{
$$0 = 56;
break;
}
case 9:
{
HEAP32[$0 >> 2] = 4;
$$0 = 2;
break;
}
default:
{
HEAP32[$0 >> 2] = 4;
$$0 = -1;
}
}
return $$0 | 0;
}
function _XML_GetCurrentLineNumber($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $8 = 0;
$1 = $0 + 272 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if ($2 | 0) {
$4 = $0 + 280 | 0;
$5 = HEAP32[$4 >> 2] | 0;
if ($2 >>> 0 >= $5 >>> 0) {
$8 = HEAP32[$0 + 144 >> 2] | 0;
FUNCTION_TABLE_viiii[HEAP32[$8 + 48 >> 2] & 15]($8, $5, $2, $0 + 392 | 0);
HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
}
}
return (HEAP32[$0 + 392 >> 2] | 0) + 1 | 0;
}
function _animgenSetSequence($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $$0$i = 0, $5 = 0, $8 = 0;
$5 = HEAP32[17849] | 0;
if (($5 | 0) == 0 | (($0 | 0) != 0 | (HEAP32[17848] | 0) != 1)) {
$$0$i = 0;
return $$0$i | 0;
}
$8 = $5 + 40 | 0;
if ((HEAP32[$8 >> 2] & -2 | 0) != 2) {
$$0$i = 0;
return $$0$i | 0;
}
HEAPF32[$5 + 24 >> 2] = $1;
_animgen_lite_reset($1);
HEAP32[$8 >> 2] = 3;
$$0$i = 1;
return $$0$i | 0;
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $4 = 0;
$1 = ___cxa_allocate_exception(8) | 0;
__THREW__ = 0;
invoke_vii(111, $1 | 0, 63366);
$2 = __THREW__;
__THREW__ = 0;
if ($2 & 1) {
$4 = ___cxa_find_matching_catch_2() | 0;
___cxa_free_exception($1 | 0);
___resumeException($4 | 0);
} else {
HEAP32[$1 >> 2] = 8224;
___cxa_throw($1 | 0, 696, 80);
}
}
function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $4 = 0;
$1 = ___cxa_allocate_exception(8) | 0;
__THREW__ = 0;
invoke_vii(111, $1 | 0, 63359);
$2 = __THREW__;
__THREW__ = 0;
if ($2 & 1) {
$4 = ___cxa_find_matching_catch_2() | 0;
___cxa_free_exception($1 | 0);
___resumeException($4 | 0);
} else {
HEAP32[$1 >> 2] = 8224;
___cxa_throw($1 | 0, 696, 80);
}
}
function __ZN6Vector8setScaleERKS_f($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
var $11 = f0, $4 = f0, $7 = f0;
$4 = Math_fround(Math_fround(HEAPF32[$1 >> 2]) * $2);
HEAPF32[$0 >> 2] = $4;
$7 = Math_fround(Math_fround(HEAPF32[$1 + 4 >> 2]) * $2);
HEAPF32[$0 + 4 >> 2] = $7;
$11 = Math_fround(Math_fround(HEAPF32[$1 + 8 >> 2]) * $2);
HEAPF32[$0 + 8 >> 2] = $11;
__ZNK6Vector16checkValidVectorEv($0);
return;
}
function __ZNK19PostureChangeTiming5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $3 = 0.0, $6 = 0.0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$3 = +Math_fround(HEAPF32[$0 >> 2]);
$6 = +Math_fround(HEAPF32[$0 + 4 >> 2]);
HEAPF64[$vararg_buffer >> 3] = $3;
HEAPF64[$vararg_buffer + 8 >> 3] = $6;
_fprintf($1, 24545, $vararg_buffer) | 0;
STACKTOP = sp;
return;
}
function _memmove(dest, src, num) {
dest = dest | 0;
src = src | 0;
num = num | 0;
var ret = 0;
if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
ret = dest;
src = src + num | 0;
dest = dest + num | 0;
while ((num | 0) > 0) {
dest = dest - 1 | 0;
src = src - 1 | 0;
num = num - 1 | 0;
HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
}
dest = ret;
} else _memcpy(dest, src, num) | 0;
return dest | 0;
}
function __ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $10 = 0, $8 = 0;
HEAP32[$0 >> 2] = 8204;
__THREW__ = 0;
invoke_vii(189, $0 + 4 | 0, ((HEAP8[$1 + 11 >> 0] | 0) < 0 ? HEAP32[$1 >> 2] | 0 : $1) | 0);
$8 = __THREW__;
__THREW__ = 0;
if ($8 & 1) {
$10 = ___cxa_find_matching_catch_2() | 0;
___resumeException($10 | 0);
} else return;
}
function _animgenSetOutput($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0$i = 0, $11 = 0, $5 = 0, $8 = 0;
$5 = HEAP32[17849] | 0;
if (($5 | 0) == 0 | (($0 | 0) != 0 | (HEAP32[17848] | 0) != 1)) {
$$0$i = 0;
return $$0$i | 0;
}
$8 = __Z10copyStringPKc($1) | 0;
HEAP32[$5 + 8 >> 2] = $8;
if (!$8) {
$$0$i = 1;
return $$0$i | 0;
}
$11 = _fopen($8, 57208) | 0;
HEAP32[$5 + 12 >> 2] = $11;
$$0$i = 1;
return $$0$i | 0;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $11 = 0, $6 = 0;
HEAP8[$0 >> 0] = 0;
HEAP32[$0 + 4 >> 2] = $1;
$6 = $1 + (HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0) | 0;
if (!(HEAP32[$6 + 16 >> 2] | 0)) {
$11 = HEAP32[$6 + 72 >> 2] | 0;
if ($11 | 0) __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($11) | 0;
HEAP8[$0 >> 0] = 1;
}
return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4);
return;
}
function __Z15NonZeroMorphSetPf($0) {
$0 = $0 | 0;
var $$05 = 0, $6 = 0;
if (!$0) return;
if ((__ZNK28InvertibleDynamicStringArray6lengthEv(HEAP32[17820] | 0) | 0) > 0) {
$$05 = 0;
$6 = 0;
} else return;
do {
HEAPF32[$0 + ($6 << 2) >> 2] = Math_fround(1.0);
$$05 = $$05 + 1 << 16 >> 16;
$6 = $$05 << 16 >> 16;
} while ((__ZNK28InvertibleDynamicStringArray6lengthEv(HEAP32[17820] | 0) | 0) > ($6 | 0));
return;
}
function __ZN10NoMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
__ZN13BasicMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture($0, $1, $2);
if (0) __Z7eprintfPKcz(38480, sp);
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$0 >> 2] | 0) + 68 >> 2] & 255]($0);
STACKTOP = sp;
return;
}
function __Z16printAttribSiGMLRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKciP21InvertibleStringArray($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $6 = 0;
if (!$3) return;
$6 = __ZNK21InvertibleStringArray14valueFromIndexEi($4, $3) | 0;
__Z16printAttribValueRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEbPKcS6_($0, $1, $2, ($6 | 0) == 0 ? 61277 : $6);
return;
}
function _notation4($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 17;
break;
}
case 27:
{
HEAP32[$0 >> 2] = 24;
HEAP32[$0 + 8 >> 2] = 17;
$$0 = 19;
break;
}
case 17:
{
HEAP32[$0 >> 2] = 7;
$$0 = 20;
break;
}
default:
{
HEAP32[$0 >> 2] = 4;
$$0 = -1;
}
}
return $$0 | 0;
}
function _element5($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 39;
break;
}
case 36:
{
HEAP32[$0 >> 2] = 24;
HEAP32[$0 + 8 >> 2] = 39;
$$0 = 46;
break;
}
case 21:
{
HEAP32[$0 >> 2] = 29;
$$0 = 39;
break;
}
default:
{
HEAP32[$0 >> 2] = 4;
$$0 = -1;
}
}
return $$0 | 0;
}
function __ZN7Gesture11InitPostureER19TwoHConcretePosture($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $3 = 0, $7 = 0;
__ZN7Gesture12InitPosture1ER19TwoHConcretePosture($0, $1);
$3 = HEAP32[$0 + 32 >> 2] | 0;
if ($3 | 0) __ZNK11OneHGesture11ShiftToPalmER19OneHConcretePosture($3, $1 + 112 | 0);
$7 = HEAP32[$0 + 28 >> 2] | 0;
if (!$7) return;
__ZNK11OneHGesture11ShiftToPalmER19OneHConcretePosture($7, $1);
return;
}
function __Z21DeleteTrajectoryTablev() {
var $0 = 0, $2 = 0, $4 = 0, $6 = 0;
$0 = HEAP32[16636] | 0;
if ($0 | 0) {
_free($0);
HEAP32[16636] = 0;
}
$2 = HEAP32[16635] | 0;
if (!$2) return;
__THREW__ = 0;
invoke_vi(93, $2 | 0);
$4 = __THREW__;
__THREW__ = 0;
if ($4 & 1) {
$6 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($2);
___resumeException($6 | 0);
}
__ZdlPv($2);
HEAP32[16635] = 0;
return;
}
function __Z21DeleteControllerTablev() {
var $0 = 0, $2 = 0, $4 = 0, $6 = 0;
$0 = HEAP32[16161] | 0;
if ($0 | 0) {
_free($0);
HEAP32[16161] = 0;
}
$2 = HEAP32[16162] | 0;
if (!$2) return;
__THREW__ = 0;
invoke_vi(93, $2 | 0);
$4 = __THREW__;
__THREW__ = 0;
if ($4 & 1) {
$6 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($2);
___resumeException($6 | 0);
}
__ZdlPv($2);
HEAP32[16162] = 0;
return;
}
function _arg_n($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0, $10 = 0, $2 = 0, $9 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
$$0 = $1;
while (1) {
$9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
$10 = HEAP32[$9 >> 2] | 0;
HEAP32[$2 >> 2] = $9 + 4;
if ($$0 >>> 0 > 1) $$0 = $$0 + -1 | 0; else break;
}
STACKTOP = sp;
return $10 | 0;
}
function _copysign($0, $1) {
$0 = +$0;
$1 = +$1;
var $2 = 0, $3 = 0, $8 = 0;
HEAPF64[tempDoublePtr >> 3] = $0;
$2 = HEAP32[tempDoublePtr >> 2] | 0;
$3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
HEAPF64[tempDoublePtr >> 3] = $1;
$8 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | $3 & 2147483647;
HEAP32[tempDoublePtr >> 2] = $2;
HEAP32[tempDoublePtr + 4 >> 2] = $8;
return +(+HEAPF64[tempDoublePtr >> 3]);
}
function __ZN11MannerFlags9setMannerE6Manner($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
switch ($1 | 0) {
case 1:
case 10:
case 9:
case 8:
case 6:
case 3:
case 2:
case 11:
{
HEAP32[$0 >> 2] = $1;
break;
}
case 4:
{
HEAP32[$0 + 4 >> 2] = 1;
break;
}
case 5:
{
HEAP32[$0 + 4 >> 2] = 3;
break;
}
case 7:
{
HEAP8[$0 + 8 >> 0] = 1;
break;
}
default:
{}
}
return;
}
function __ZNK10SiteIDPair5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $3 = 0;
if (!$1) return;
$3 = $0 + 4 | 0;
if (!((HEAP32[16607] ^ HEAP32[$3 >> 2]) & 16777215)) {
__ZNK6SiteID5printEP8_IO_FILE($0, $1);
return;
} else {
_fputc(40, $1) | 0;
__ZNK6SiteID5printEP8_IO_FILE($0, $1);
_fputc(44, $1) | 0;
__ZNK6SiteID5printEP8_IO_FILE($3, $1);
_fputc(41, $1) | 0;
return;
}
}
function _strerror_r($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0 = 0, $3 = 0, $4 = 0, $7 = 0;
$3 = _strerror($0) | 0;
$4 = _strlen($3) | 0;
if ($4 >>> 0 < $2 >>> 0) {
_memcpy($1 | 0, $3 | 0, $4 + 1 | 0) | 0;
$$0 = 0;
} else {
$7 = $2 + -1 | 0;
if (!$2) $$0 = 34; else {
_memcpy($1 | 0, $3 | 0, $7 | 0) | 0;
HEAP8[$1 + $7 >> 0] = 0;
$$0 = 34;
}
}
return $$0 | 0;
}
function __ZN7XMLCell12attrib_int32EPKci($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $4 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp + 4 | 0;
$4 = sp;
HEAP32[$4 >> 2] = $2;
HEAP32[$3 >> 2] = 0;
__Z13HA_get_attribIilEbPK7HashAnyIPKcS2_ERT_R12AttribStatusS2_S2_(HEAP32[$0 + 4 >> 2] | 0, $4, $3, 54566, $1) | 0;
STACKTOP = sp;
return HEAP32[$4 >> 2] | 0;
}
function __Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb($0, $1, $2, $3, $4, $5, $6) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
$6 = $6 | 0;
var $21 = 0;
$21 = $2 << 8 & 3840 | $1 & 255 | $3 << 12 & 28672 | $5 << 20 & 7340032 | ($4 & 31) << 15 & 1015808 | ($6 & 1) << 23;
HEAP16[$0 >> 1] = $21;
HEAP8[$0 + 2 >> 0] = $21 >>> 16;
return;
}
function ___unlist_locked_file($0) {
$0 = $0 | 0;
var $$pre = 0, $$sink = 0, $10 = 0, $5 = 0;
if (HEAP32[$0 + 68 >> 2] | 0) {
$5 = HEAP32[$0 + 116 >> 2] | 0;
$$pre = $0 + 112 | 0;
if ($5 | 0) HEAP32[$5 + 112 >> 2] = HEAP32[$$pre >> 2];
$10 = HEAP32[$$pre >> 2] | 0;
if (!$10) $$sink = (___pthread_self_608() | 0) + 232 | 0; else $$sink = $10 + 116 | 0;
HEAP32[$$sink >> 2] = $5;
}
return;
}
function __ZNSt3__218__libcpp_refstringC2EPKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $4 = 0, $7 = 0;
$2 = _strlen($1) | 0;
$4 = __Znwj($2 + 13 | 0) | 0;
HEAP32[$4 >> 2] = $2;
HEAP32[$4 + 4 >> 2] = $2;
HEAP32[$4 + 8 >> 2] = 0;
$7 = __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($4) | 0;
_memcpy($7 | 0, $1 | 0, $2 + 1 | 0) | 0;
HEAP32[$0 >> 2] = $7;
return;
}
function __Z18printHandshapeTypeP8_IO_FILE13HandshapeType($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
do if ($0 | 0) if (!$1) {
_fwrite(53809, 13, 1, $0) | 0;
break;
} else {
HEAP32[$vararg_buffer >> 2] = $1;
_fprintf($0, 53470, $vararg_buffer) | 0;
break;
} while (0);
STACKTOP = sp;
return;
}
function __Z20copyStringWithSuffixPKci($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $4 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 32 | 0;
$vararg_buffer = sp;
$2 = sp + 4 | 0;
HEAP8[$2 + 12 >> 0] = 0;
HEAP32[$vararg_buffer >> 2] = $1;
_snprintf($2, 12, 9227, $vararg_buffer) | 0;
$4 = __Z20copyStringWithSuffixPKcS0_($0, $2) | 0;
STACKTOP = sp;
return $4 | 0;
}
function __ZN6KeyOpsIK6SiteIDE12hashFunctionES0_i($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$2 = HEAPU16[$0 >> 1] | 0 | (HEAPU8[$0 + 2 >> 0] | 0) << 16;
return (((((((($2 & 16777215) >>> 23 << 3 | ($2 & 16777215) >>> 20 & 7) << 5 | ($2 & 16777215) >>> 15 & 31) << 3 | ($2 & 16777215) >>> 12 & 7) & 16777215) << 4 | ($2 & 16777215) >>> 8 & 15) << 8 | $2 & 255) >>> 0) % ($1 >>> 0) | 0 | 0;
}
function __ZNK6Vector6lengthEv($0) {
$0 = $0 | 0;
var $1 = f0, $3 = f0, $5 = f0, $7 = f0, $9 = f0;
$1 = Math_fround(HEAPF32[$0 >> 2]);
$3 = Math_fround(Math_fround($1 * $1) + Math_fround(0.0));
$5 = Math_fround(HEAPF32[$0 + 4 >> 2]);
$7 = Math_fround($3 + Math_fround($5 * $5));
$9 = Math_fround(HEAPF32[$0 + 8 >> 2]);
return Math_fround(Math_sqrt(Math_fround($7 + Math_fround($9 * $9))));
}
function __ZN13SplitMovement17setInitialPostureERK19TwoHConcretePosture($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $4 = 0, $9 = 0;
_memcpy($0 + 60 | 0, $1 | 0, 224) | 0;
$4 = HEAP32[$0 + 528 >> 2] | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$4 >> 2] | 0) + 40 >> 2] & 255]($4, $1);
$9 = HEAP32[$0 + 532 >> 2] | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$9 >> 2] | 0) + 40 >> 2] & 255]($9, $1);
return;
}
function __ZNK15TorsoDecollider18ForceOutsideOffsetERK6VectorRS0_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $7 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp;
__ZN6VectorC2Ev($3);
$7 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] & 31]($0, $1, $3) | 0;
__ZN6Vector11setSubtractERKS_S1_($2, $3, $1);
STACKTOP = sp;
return $7 | 0;
}
function _animgen_lite_reset($0) {
$0 = Math_fround($0);
var $1 = 0, $2 = f0, $3 = f0, $4 = 0;
$1 = $0 < Math_fround(1.0);
$2 = Math_fround(Math_fround(1.0) / $0);
$3 = $1 ? $0 : $2;
HEAPF32[866] = $3;
$4 = HEAP32[17859] | 0;
if (!$4) {
_ZeroPostMortem();
return;
}
HEAPF32[$4 + 8 >> 2] = $3;
__ZN20HanimAnimationRecord5resetEf($4, Math_fround(0.0));
_ZeroPostMortem();
return;
}
function __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv($0) {
$0 = $0 | 0;
var $$unpack = 0, $$unpack2 = 0, $10 = 0, $3 = 0;
$$unpack = HEAP32[$0 + 4 >> 2] | 0;
$$unpack2 = HEAP32[$0 + 8 >> 2] | 0;
$3 = (HEAP32[$0 >> 2] | 0) + ($$unpack2 >> 1) | 0;
if (!($$unpack2 & 1)) $10 = $$unpack; else $10 = HEAP32[(HEAP32[$3 >> 2] | 0) + $$unpack >> 2] | 0;
FUNCTION_TABLE_vi[$10 & 255]($3);
return;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
$a$0 = $a$0 | 0;
$a$1 = $a$1 | 0;
$b$0 = $b$0 | 0;
$b$1 = $b$1 | 0;
var $rem = 0, __stackBase__ = 0;
__stackBase__ = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$rem = __stackBase__ | 0;
___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
STACKTOP = __stackBase__;
return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function __ZNSt3__218__libcpp_refstringD2Ev($0) {
$0 = $0 | 0;
var $3 = 0, $4 = 0, $5 = 0;
if (__ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0) | 0) {
$3 = __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_3476(HEAP32[$0 >> 2] | 0) | 0;
$4 = $3 + 8 | 0;
$5 = HEAP32[$4 >> 2] | 0;
HEAP32[$4 >> 2] = $5 + -1;
if (($5 + -1 | 0) < 0) __ZdlPv($3);
}
return;
}
function __ZN4SiteD2Ev($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $8 = 0;
$1 = $0 + 52 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if ($2 | 0) {
__ZdlPv($2);
HEAP32[$1 >> 2] = 0;
}
$4 = $0 + 24 | 0;
$5 = HEAP32[$4 >> 2] | 0;
if ($5 | 0) {
__ZdlPv($5);
HEAP32[$4 >> 2] = 0;
}
HEAP32[$0 + 16 >> 2] = 0;
$8 = HEAP32[$0 >> 2] | 0;
if (!$8) return;
_free($8);
return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3);
return;
}
function __ZN18AbstractTimedMorph11setDurationEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $3 = f0, $6 = f0, $8 = f0;
$3 = Math_fround(HEAPF32[$0 + 16 >> 2]);
$6 = Math_fround($3 - Math_fround(HEAPF32[$0 + 4 >> 2]));
if (!($6 > Math_fround(0.0))) return;
$8 = Math_fround($1 / $6);
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 63]($0, $8);
return;
}
function __ZNK6Vector8lengthsqEv($0) {
$0 = $0 | 0;
var $1 = f0, $3 = f0, $5 = f0, $7 = f0, $9 = f0;
$1 = Math_fround(HEAPF32[$0 >> 2]);
$3 = Math_fround(Math_fround($1 * $1) + Math_fround(0.0));
$5 = Math_fround(HEAPF32[$0 + 4 >> 2]);
$7 = Math_fround($3 + Math_fround($5 * $5));
$9 = Math_fround(HEAPF32[$0 + 8 >> 2]);
return Math_fround($7 + Math_fround($9 * $9));
}
function __ZNK10NoMovement5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!$1) {
STACKTOP = sp;
return;
}
HEAP32[$vararg_buffer >> 2] = $0;
_fprintf($1, 38464, $vararg_buffer) | 0;
__ZNK13BasicMovement5printEP8_IO_FILE($0, $1);
STACKTOP = sp;
return;
}
function __ZN5Joint23setLocalGlobalDirectionERK6VectorS2_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp;
__ZN6VectorC2ERKS_($3, $1);
__ZNK9Transform18transformDirectionER6Vector($0 + 68 | 0, $3);
__ZN5Joint24setGlobalGlobalDirectionERK6VectorS2_($0, $3, $2);
STACKTOP = sp;
return;
}
function _XmlInitEncoding($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0 = 0, $3 = 0;
$3 = _getEncodingIndex($2) | 0;
if (($3 | 0) == -1) {
$$0 = 0;
return $$0 | 0;
}
HEAP8[$0 + 69 >> 0] = $3;
HEAP32[$0 >> 2] = 35;
HEAP32[$0 + 4 >> 2] = 36;
HEAP32[$0 + 48 >> 2] = 9;
HEAP32[$0 + 72 >> 2] = $1;
HEAP32[$1 >> 2] = $0;
$$0 = 1;
return $$0 | 0;
}
function ___cxa_can_catch($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $8 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp;
HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
$8 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 31]($0, $1, $3) | 0;
if ($8) HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
STACKTOP = sp;
return $8 & 1 | 0;
}
function __ZN6Vector10setInverseEv($0) {
$0 = $0 | 0;
var $2 = f0, $3 = 0, $5 = f0, $6 = 0, $8 = f0;
$2 = Math_fround(-Math_fround(HEAPF32[$0 >> 2]));
HEAPF32[$0 >> 2] = $2;
$3 = $0 + 4 | 0;
$5 = Math_fround(-Math_fround(HEAPF32[$3 >> 2]));
HEAPF32[$3 >> 2] = $5;
$6 = $0 + 8 | 0;
$8 = Math_fround(-Math_fround(HEAPF32[$6 >> 2]));
HEAPF32[$6 >> 2] = $8;
return;
}
function __ZN18HingeJointRotation11interpolateERKS_S1_f($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = Math_fround($3);
var $11 = f0, $7 = f0;
$7 = Math_fround(Math_fround(Math_fround(1.0) - $3) * Math_fround(HEAPF32[$1 + 20 >> 2]));
$11 = Math_fround($7 + Math_fround(Math_fround(HEAPF32[$2 + 20 >> 2]) * $3));
HEAPF32[$0 + 20 >> 2] = $11;
return;
}
function _llvm_cttz_i32(x) {
x = x | 0;
var ret = 0;
ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0;
if ((ret | 0) < 8) return ret | 0;
ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0;
if ((ret | 0) < 8) return ret + 8 | 0;
ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0;
if ((ret | 0) < 8) return ret + 16 | 0;
return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0;
}
function __ZN14TwoArmAnimator5resetER19TwoHConcretePosturef($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
__ZN14OneArmAnimator5resetEP19OneHConcretePosturef($0 + 16 | 0, $1, $2);
__ZN14OneArmAnimator5resetEP19OneHConcretePosturef($0 + 3572 | 0, $1 + 112 | 0, $2);
HEAPF32[$0 + 4 >> 2] = $2;
HEAPF32[$0 + 8 >> 2] = $2;
HEAP32[$0 >> 2] = 0;
return;
}
function __ZN11SeqMovement15offset1FinalPosERK6Vectorb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $11 = 0, $4 = 0;
$4 = HEAP32[$0 + 540 >> 2] | 0;
if (($4 << 16 | 0) <= 0) return;
$11 = HEAP32[(HEAP32[$0 + 528 >> 2] | 0) + (($4 & 65535) + -1 << 2) >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$11 >> 2] | 0) + 52 >> 2] & 127]($11, $1, $2);
return;
}
function __ZN13SplitMovement15offset1FinalPosERK6Vectorb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $4 = 0, $9 = 0;
$4 = HEAP32[$0 + 528 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$4 >> 2] | 0) + 52 >> 2] & 127]($4, $1, $2);
$9 = HEAP32[$0 + 532 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$9 >> 2] | 0) + 52 >> 2] & 127]($9, $1, $2);
return;
}
function __ZNK16AtomicTimedMorph14fillMorphFrameEfPfb($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = $2 | 0;
$3 = $3 | 0;
var $4 = f0, $7 = 0, $9 = f0;
$4 = Math_fround(__ZNK16AtomicTimedMorph14getMorphAmountEf($0, $1));
$7 = $2 + (HEAP32[$0 + 24 >> 2] << 2) | 0;
$9 = Math_fround($4 + Math_fround(HEAPF32[$7 >> 2]));
HEAPF32[$7 >> 2] = $9;
return;
}
function __ZN11SeqMovement12set1FinalPosERK6Vectorb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $11 = 0, $4 = 0;
$4 = HEAP32[$0 + 540 >> 2] | 0;
if (($4 << 16 | 0) <= 0) return;
$11 = HEAP32[(HEAP32[$0 + 528 >> 2] | 0) + (($4 & 65535) + -1 << 2) >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$11 >> 2] | 0) + 44 >> 2] & 127]($11, $1, $2);
return;
}
function _declClose($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0;
switch ($1 | 0) {
case 15:
{
$$0 = HEAP32[$0 + 8 >> 2] | 0;
break;
}
case 17:
{
HEAP32[$0 >> 2] = 7;
$$0 = HEAP32[$0 + 8 >> 2] | 0;
break;
}
default:
{
HEAP32[$0 >> 2] = 4;
$$0 = -1;
}
}
return $$0 | 0;
}
function __ZN13SplitMovement12set1FinalPosERK6Vectorb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $4 = 0, $9 = 0;
$4 = HEAP32[$0 + 528 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$4 >> 2] | 0) + 44 >> 2] & 127]($4, $1, $2);
$9 = HEAP32[$0 + 532 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$9 >> 2] | 0) + 44 >> 2] & 127]($9, $1, $2);
return;
}
function __ZN23FingerBaseJointRotation7setFromERKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var dest = 0, src = 0, stop = 0;
HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
dest = $0 + 8 | 0;
src = $1 + 8 | 0;
stop = dest + 64 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
return;
}
function __ZN22ThumbBaseJointRotation7setFromERKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var dest = 0, src = 0, stop = 0;
HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
dest = $0 + 8 | 0;
src = $1 + 8 | 0;
stop = dest + 60 | 0;
do {
HEAP32[dest >> 2] = HEAP32[src >> 2];
dest = dest + 4 | 0;
src = src + 4 | 0;
} while ((dest | 0) < (stop | 0));
return;
}
function __ZNK10Quaternion8getAngleEv($0) {
$0 = $0 | 0;
var $1 = f0, $3 = f0, $6 = f0;
$1 = Math_fround(HEAPF32[$0 >> 2]);
$3 = Math_fround(HEAPF32[$0 + 4 >> 2]);
$6 = Math_fround(__ZN6Vector7alengthEfff($1, $3, Math_fround(HEAPF32[$0 + 8 >> 2])));
return Math_fround(Math_fround(+Math_atan2(+$6, +Math_fround(HEAPF32[$0 + 12 >> 2]))) * Math_fround(2.0));
}
function __ZN16DirectedMovement15offset1FinalPosERK6Vectorb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
if ($2) {
__ZL13offset1TargetRK6VectorRS_S2_R15OneHDirMoveSpec($1, $0 + 288 | 0, $0 + 64 | 0, $0 + 600 | 0);
return;
} else {
__ZL13offset1TargetRK6VectorRS_S2_R15OneHDirMoveSpec($1, $0 + 400 | 0, $0 + 176 | 0, $0 + 672 | 0);
return;
}
}
function _unknown_isNmstrt($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0, $6 = 0;
$6 = FUNCTION_TABLE_iii[HEAP32[$0 + 364 >> 2] & 63](HEAP32[$0 + 368 >> 2] | 0, $1) | 0;
if ($6 >>> 0 > 65535) {
$$0 = 0;
return $$0 | 0;
}
$$0 = HEAP32[3996 + (((HEAPU8[59947 + ($6 >>> 8) >> 0] | 0) << 3 | $6 >>> 5 & 7) << 2) >> 2] & 1 << ($6 & 31);
return $$0 | 0;
}
function __ZNK28InvertibleDynamicStringArray14valueFromIndexEi($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $11 = 0, $3 = 0;
$3 = HEAP32[$0 + 4 >> 2] | 0;
if (($1 | 0) < 0) {
$11 = 0;
return $11 | 0;
}
if ((HEAP32[$3 + 12 >> 2] | 0) <= ($1 | 0)) {
$11 = 0;
return $11 | 0;
}
$11 = HEAP32[(HEAP32[$3 >> 2] | 0) + ($1 << 2) >> 2] | 0;
return $11 | 0;
}
function __ZNK7Gesture11ShiftToPalmER19TwoHConcretePosture($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $3 = 0, $7 = 0;
$3 = HEAP32[$0 + 32 >> 2] | 0;
if ($3 | 0) __ZNK11OneHGesture11ShiftToPalmER19OneHConcretePosture($3, $1 + 112 | 0);
$7 = HEAP32[$0 + 28 >> 2] | 0;
if (!$7) return;
__ZNK11OneHGesture11ShiftToPalmER19OneHConcretePosture($7, $1);
return;
}
function __Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$04 = 0;
if (($1 | 0) > 0) $$04 = 0; else return;
do {
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0, 29294, 2) | 0;
$$04 = $$04 + 1 | 0;
} while (($$04 | 0) != ($1 | 0));
return;
}
function _unknown_isName($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0, $6 = 0;
$6 = FUNCTION_TABLE_iii[HEAP32[$0 + 364 >> 2] & 63](HEAP32[$0 + 368 >> 2] | 0, $1) | 0;
if ($6 >>> 0 > 65535) {
$$0 = 0;
return $$0 | 0;
}
$$0 = HEAP32[3996 + (((HEAPU8[60203 + ($6 >>> 8) >> 0] | 0) << 3 | $6 >>> 5 & 7) << 2) >> 2] & 1 << ($6 & 31);
return $$0 | 0;
}
function __ZN7XMLCell11attrib_REALERfPKc($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, $6 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp;
HEAP32[$3 >> 2] = 0;
$6 = __Z13HA_get_attribIfdEbPK7HashAnyIPKcS2_ERT_R12AttribStatusS2_S2_(HEAP32[$0 + 4 >> 2] | 0, $1, $3, 54455, $2) | 0;
STACKTOP = sp;
return $6 | 0;
}
function _notation3($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 17;
break;
}
case 27:
{
HEAP32[$0 >> 2] = 24;
HEAP32[$0 + 8 >> 2] = 17;
$$0 = 19;
break;
}
default:
{
HEAP32[$0 >> 2] = 4;
$$0 = -1;
}
}
return $$0 | 0;
}
function _entity6($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
var $$0 = 0;
switch ($1 | 0) {
case 15:
{
$$0 = 11;
break;
}
case 18:
{
HEAP32[$0 >> 2] = 24;
HEAP32[$0 + 8 >> 2] = 11;
$$0 = 16;
break;
}
default:
{
HEAP32[$0 >> 2] = 4;
$$0 = -1;
}
}
return $$0 | 0;
}
function __ZNK14SiGMLHandshape20DefaultDigitLocationEs($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0;
switch (HEAP32[$0 >> 2] | 0) {
case 2:
case 1:
{
$$0 = 9;
break;
}
case 12:
case 11:
case 9:
case 8:
case 6:
case 5:
case 4:
case 3:
case 10:
case 7:
{
$$0 = 7;
break;
}
default:
$$0 = 0;
}
return $$0 | 0;
}
function __ZNK10NoMovement10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi($1, HEAP16[36078] | 0);
__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($1, 38451, 12) | 0;
return;
}
function ___stdio_close($0) {
$0 = $0 | 0;
var $3 = 0, $5 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
$3 = _dummy_565(HEAP32[$0 + 60 >> 2] | 0) | 0;
HEAP32[$vararg_buffer >> 2] = $3;
$5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0;
STACKTOP = sp;
return $5 | 0;
}
function __ZN7HashAnyIPKcPS_IS1_iEE8makeHashES3_S1_z($0, $1, $varargs) {
$0 = $0 | 0;
$1 = $1 | 0;
$varargs = $varargs | 0;
var $2 = 0, $3 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
HEAP32[$2 >> 2] = $varargs;
$3 = __ZN7HashAnyIPKcPS_IS1_iEE9vmakeHashES3_S1_Pi($0, $1, $2) | 0;
STACKTOP = sp;
return $3 | 0;
}
function __ZNK17QuatJointRotation17printRotationVRMLEP8_IO_FILEs($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $3 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp;
__ZN12VRMLRotationC2ERK10Quaternion($3, $0 + 8 | 0);
__ZNK12VRMLRotation5printEP8_IO_FILEi($3, $1, $2 << 16 >> 16);
STACKTOP = sp;
return;
}
function __ZN20QuaternionController14get_perceptionEv($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
HEAPF32[$0 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 4 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 12 >> 2] = Math_fround(1.0);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 36 >> 2] & 255]($1, $0);
return;
}
function _ferror($0) {
$0 = $0 | 0;
var $$lobit = 0, $$lobit9 = 0, $phitmp = 0;
if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
$phitmp = (___lockfile($0) | 0) == 0;
$$lobit = (HEAP32[$0 >> 2] | 0) >>> 5 & 1;
if ($phitmp) $$lobit9 = $$lobit; else $$lobit9 = $$lobit;
} else $$lobit9 = (HEAP32[$0 >> 2] | 0) >>> 5 & 1;
return $$lobit9 | 0;
}
function __ZN20QuaternionController13get_referenceEv($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
HEAPF32[$0 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 4 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 12 >> 2] = Math_fround(1.0);
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 24 >> 2] & 255]($1, $0);
return;
}
function __ZN17VectorController25resetEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
__ZN6Vector7setZeroEv($0 + 16 | 0);
__ZN6Vector7setZeroEv($0 + 28 | 0);
__ZN6Vector7setZeroEv($0 + 40 | 0);
__ZN6Vector7setZeroEv($0 + 64 | 0);
__ZN6Vector7setZeroEv($0 + 76 | 0);
HEAPF32[$0 + 144 >> 2] = $1;
HEAPF32[$0 + 4 >> 2] = $1;
return;
}
function _stat($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $5 = 0, $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
HEAP32[$vararg_buffer >> 2] = $0;
HEAP32[$vararg_buffer + 4 >> 2] = $1;
$5 = ___syscall_ret(___syscall195(195, $vararg_buffer | 0) | 0) | 0;
STACKTOP = sp;
return $5 | 0;
}
function _sn_write($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$ = 0, $5 = 0, $6 = 0, $7 = 0;
$5 = $0 + 20 | 0;
$6 = HEAP32[$5 >> 2] | 0;
$7 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0;
$$ = $7 >>> 0 > $2 >>> 0 ? $2 : $7;
_memcpy($6 | 0, $1 | 0, $$ | 0) | 0;
HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$;
return $2 | 0;
}
function _feof($0) {
$0 = $0 | 0;
var $$lobit = 0, $$lobit9 = 0, $phitmp = 0;
if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
$phitmp = (___lockfile($0) | 0) == 0;
$$lobit = (HEAP32[$0 >> 2] | 0) >>> 4 & 1;
if ($phitmp) $$lobit9 = $$lobit; else $$lobit9 = $$lobit;
} else $$lobit9 = (HEAP32[$0 >> 2] | 0) >>> 4 & 1;
return $$lobit9 | 0;
}
function __ZN11SeqMovement17setInitialPostureERK19TwoHConcretePosture($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $8 = 0;
_memcpy($0 + 60 | 0, $1 | 0, 224) | 0;
if ((HEAP32[$0 + 540 >> 2] | 0) <= 0) return;
$8 = HEAP32[HEAP32[$0 + 528 >> 2] >> 2] | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$8 >> 2] | 0) + 40 >> 2] & 255]($8, $1);
return;
}
function dynCall_viiiiiiff(index, a1, a2, a3, a4, a5, a6, a7, a8) {
index = index | 0;
a1 = a1 | 0;
a2 = a2 | 0;
a3 = a3 | 0;
a4 = a4 | 0;
a5 = a5 | 0;
a6 = a6 | 0;
a7 = Math_fround(a7);
a8 = Math_fround(a8);
FUNCTION_TABLE_viiiiiiff[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, Math_fround(a7), Math_fround(a8));
}
function __ZNKSt3__26locale5__imp9use_facetEl($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $3 = 0;
if (__ZNKSt3__26locale5__imp9has_facetEl($0, $1) | 0) return HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + ($1 << 2) >> 2] | 0; else {
$3 = ___cxa_allocate_exception(4) | 0;
__ZNSt8bad_castC2Ev($3);
___cxa_throw($3 | 0, 712, 85);
}
return 0;
}
function __ZN13SplitMovement16FinaliseGesturesEv($0) {
$0 = $0 | 0;
var $2 = 0, $8 = 0;
$2 = HEAP32[$0 + 528 >> 2] | 0;
if ($2 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] & 255]($2);
$8 = HEAP32[$0 + 532 >> 2] | 0;
if (!$8) return;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$8 >> 2] | 0) + 36 >> 2] & 255]($8);
return;
}
function __ZN11HanimAvatar18createBodySegmentsEv($0) {
$0 = $0 | 0;
__ZNK11HanimAvatar16createArmSegmentEPKc($0, 22275);
__ZNK11HanimAvatar16createArmSegmentEPKc($0, 22288);
__ZNK11HanimAvatar16createArmSegmentEPKc($0, 22301);
__ZNK11HanimAvatar16createArmSegmentEPKc($0, 22314);
__ZN11HanimAvatar15createTorsoMeshEv($0);
return;
}
function __ZNK11ParMovement12CopyMovementEv($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $4 = 0;
$1 = __Znwj(556) | 0;
__THREW__ = 0;
invoke_vii(164, $1 | 0, $0 | 0);
$2 = __THREW__;
__THREW__ = 0;
if ($2 & 1) {
$4 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($1);
___resumeException($4 | 0);
} else return $1 | 0;
return 0;
}
function __Z20DeleteMovementTablesv() {
var $0 = 0, $2 = 0, $4 = 0;
$0 = HEAP32[16658] | 0;
if (!$0) return;
__THREW__ = 0;
invoke_vi(144, $0 | 0);
$2 = __THREW__;
__THREW__ = 0;
if ($2 & 1) {
$4 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($0);
___resumeException($4 | 0);
}
__ZdlPv($0);
HEAP32[16658] = 0;
return;
}
function __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$unpack = 0, $$unpack5 = 0;
$$unpack = HEAP32[$1 >> 2] | 0;
$$unpack5 = HEAP32[$1 + 4 >> 2] | 0;
HEAP32[$0 >> 2] = $2;
HEAP32[$0 + 4 >> 2] = $$unpack;
HEAP32[$0 + 8 >> 2] = $$unpack5;
return;
}
function __ZN9Transform7setFromERK6VectorRK10Quaternion($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
__ZN6Vector7setFromERKS_($0, $1);
HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
HEAP32[$0 + 16 >> 2] = HEAP32[$2 + 4 >> 2];
HEAP32[$0 + 20 >> 2] = HEAP32[$2 + 8 >> 2];
HEAP32[$0 + 24 >> 2] = HEAP32[$2 + 12 >> 2];
return;
}
function __Z3diePKc($0) {
$0 = $0 | 0;
var $1 = 0, $4 = 0, $6 = 0;
$1 = HEAP32[16082] | 0;
if ($1 | 0) {
_fwrite(9249, 8, 1, $1) | 0;
_fputs($0, HEAP32[16082] | 0) | 0;
$4 = HEAP32[16082] | 0;
if ($4 | 0) _fputc(10, $4) | 0;
}
$6 = ___cxa_allocate_exception(4) | 0;
HEAP32[$6 >> 2] = 2;
___cxa_throw($6 | 0, 32, 0);
}
function __ZNK9Handshape13CopyHandshapeEv($0) {
$0 = $0 | 0;
var $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
if (!0) {
STACKTOP = sp;
return 0;
}
__Z7LogTimev() | 0;
HEAP32[$vararg_buffer >> 2] = $0;
__Z7eprintfPKcz(33667, $vararg_buffer);
STACKTOP = sp;
return 0;
}
function dynCall_viiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
index = index | 0;
a1 = a1 | 0;
a2 = a2 | 0;
a3 = a3 | 0;
a4 = a4 | 0;
a5 = a5 | 0;
a6 = a6 | 0;
a7 = a7 | 0;
a8 = a8 | 0;
a9 = a9 | 0;
FUNCTION_TABLE_viiiiiiiii[index & 0](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0);
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
var $7 = 0;
if ((HEAP32[$1 + 4 >> 2] | 0) == ($2 | 0)) {
$7 = $1 + 28 | 0;
if ((HEAP32[$7 >> 2] | 0) != 1) HEAP32[$7 >> 2] = $3;
}
return;
}
function __ZN17NonmanualMovement21getCurrentFacePostureEffPfb($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = Math_fround($2);
$3 = $3 | 0;
$4 = $4 | 0;
var $6 = 0;
$6 = HEAP32[$0 + 20 >> 2] | 0;
if (!$6) return;
FUNCTION_TABLE_vifii[HEAP32[(HEAP32[$6 >> 2] | 0) + 16 >> 2] & 3]($6, $1, $3, $4);
return;
}
function __ZN7HashAnyIPKciE8makeHashEiS1_z($0, $1, $varargs) {
$0 = $0 | 0;
$1 = $1 | 0;
$varargs = $varargs | 0;
var $2 = 0, $3 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
HEAP32[$2 >> 2] = $varargs;
$3 = __ZN7HashAnyIPKciE9vmakeHashEiS1_Pi($0, $1, $2) | 0;
STACKTOP = sp;
return $3 | 0;
}
function __ZNK21InvertibleStringArray14valueFromIndexEi($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $10 = 0;
if (($1 | 0) < 0) {
$10 = 0;
return $10 | 0;
}
if ((HEAP32[$0 + 8 >> 2] | 0) <= ($1 | 0)) {
$10 = 0;
return $10 | 0;
}
$10 = HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + ($1 << 2) >> 2] | 0;
return $10 | 0;
}
function ___uflow($0) {
$0 = $0 | 0;
var $$0 = 0, $1 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$1 = sp;
if (!(___toread($0) | 0)) if ((FUNCTION_TABLE_iiii[HEAP32[$0 + 32 >> 2] & 31]($0, $1, 1) | 0) == 1) $$0 = HEAPU8[$1 >> 0] | 0; else $$0 = -1; else $$0 = -1;
STACKTOP = sp;
return $$0 | 0;
}
function __ZN13GestureParser10readXMLXMLEP7XMLCellR10ParserDataPP7Gesture($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $$0 = 0;
if (!$0) $$0 = 1; else {
__ZL16HandleXMLGesturePvP7XMLCell($1, $0);
if (!$2) $$0 = 0; else {
HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
$$0 = 0;
}
}
return $$0 | 0;
}
function __ZN7HashAnyIiiE8makeHashEiiz($0, $1, $varargs) {
$0 = $0 | 0;
$1 = $1 | 0;
$varargs = $varargs | 0;
var $2 = 0, $3 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
HEAP32[$2 >> 2] = $varargs;
$3 = __ZN7HashAnyIiiE9vmakeHashEiiPi($0, $1, $2) | 0;
STACKTOP = sp;
return $3 | 0;
}
function __ZN6VectorC2EPKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
if (!$1) {
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
return;
} else {
HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
return;
}
}
function __ZN5SiGML19convertDirectionVecER6Vector10Direction3($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = f0, $4 = f0;
$2 = Math_fround(HEAPF32[$1 >> 2]);
$4 = Math_fround(HEAPF32[$1 + 4 >> 2]);
__ZN6Vector7setFromEfff($0, $2, $4, Math_fround(HEAPF32[$1 + 8 >> 2]));
__ZN6Vector7setUnitEv($0) | 0;
return;
}
function __Z7eprintfPKcz($0, $varargs) {
$0 = $0 | 0;
$varargs = $varargs | 0;
var $1 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$1 = sp;
if (!(HEAP32[16082] | 0)) {
STACKTOP = sp;
return;
}
HEAP32[$1 >> 2] = $varargs;
_vfprintf(HEAP32[16082] | 0, $0, $1) | 0;
STACKTOP = sp;
return;
}
function _utf8_isNmstrt3($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $20 = 0, $7 = 0;
$7 = HEAPU8[$1 + 1 >> 0] | 0;
$20 = HEAPU8[$1 + 2 >> 0] | 0;
return 1 << ($20 & 31) & HEAP32[3996 + (((HEAPU8[59947 + ($7 >>> 2 & 15 | HEAP8[$1 >> 0] << 4 & 255) >> 0] | 0) << 3 | $7 << 1 & 6 | $20 >>> 5 & 1) << 2) >> 2] | 0;
}
function ___shlim($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $4 = 0, $6 = 0, $7 = 0;
HEAP32[$0 + 104 >> 2] = $1;
$4 = HEAP32[$0 + 8 >> 2] | 0;
$6 = HEAP32[$0 + 4 >> 2] | 0;
$7 = $4 - $6 | 0;
HEAP32[$0 + 108 >> 2] = $7;
HEAP32[$0 + 100 >> 2] = ($1 | 0) != 0 & ($7 | 0) > ($1 | 0) ? $6 + $1 | 0 : $4;
return;
}
function _utf8_isName3($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $20 = 0, $7 = 0;
$7 = HEAPU8[$1 + 1 >> 0] | 0;
$20 = HEAPU8[$1 + 2 >> 0] | 0;
return 1 << ($20 & 31) & HEAP32[3996 + (((HEAPU8[60203 + ($7 >>> 2 & 15 | HEAP8[$1 >> 0] << 4 & 255) >> 0] | 0) << 3 | $7 << 1 & 6 | $20 >>> 5 & 1) << 2) >> 2] | 0;
}
function __ZNK10Quaternion23rotateVectorAboutCentreERK6VectorS2_RS0_($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
__ZN6Vector7setFromERKS_($3, $2);
__ZN6Vector11setSubtractERKS_($3, $1);
__ZNK10Quaternion12rotateVectorER6Vector($0, $3);
__ZN6Vector6setAddERKS_($3, $1);
return;
}
function __ZNSt11logic_errorC2EPKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $3 = 0, $5 = 0;
HEAP32[$0 >> 2] = 8184;
__THREW__ = 0;
invoke_vii(189, $0 + 4 | 0, $1 | 0);
$3 = __THREW__;
__THREW__ = 0;
if ($3 & 1) {
$5 = ___cxa_find_matching_catch_2() | 0;
___resumeException($5 | 0);
} else return;
}
function __ZN23FingerBaseJointRotation14setLongitAngleEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
HEAPF64[$vararg_buffer >> 3] = +$1;
__Z7eprintfPKcz(14219, $vararg_buffer);
STACKTOP = sp;
return;
}
function _XML_ParserCreate($0) {
$0 = $0 | 0;
var $$0$i = 0, $1 = 0;
$1 = _parserCreate($0, 0, 0) | 0;
if (!$1) $$0$i = 0; else if (!(HEAP8[$1 + 232 >> 0] | 0)) $$0$i = $1; else if (!((_setContext($1, 58353) | 0) << 24 >> 24)) {
_XML_ParserFree($1);
$$0$i = 0;
} else $$0$i = $1;
return $$0$i | 0;
}
function __ZN9TransformC2Ev($0) {
$0 = $0 | 0;
__ZN6VectorC2Efff($0, Math_fround(0.0), Math_fround(0.0), Math_fround(0.0));
HEAPF32[$0 + 12 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 16 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 20 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 24 >> 2] = Math_fround(1.0);
return;
}
function __ZN19TurretJointRotation14setLongitAngleEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
HEAPF64[$vararg_buffer >> 3] = +$1;
__Z7eprintfPKcz(13831, $vararg_buffer);
STACKTOP = sp;
return;
}
function __ZN18HingeJointRotation14setLongitAngleEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
HEAPF64[$vararg_buffer >> 3] = +$1;
__Z7eprintfPKcz(13509, $vararg_buffer);
STACKTOP = sp;
return;
}
function __ZN18HingeJointRotation13setSplayAngleEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
HEAPF64[$vararg_buffer >> 3] = +$1;
__Z7eprintfPKcz(13624, $vararg_buffer);
STACKTOP = sp;
return;
}
function __ZN18HingeJointRotation13addSplayAngleEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
HEAPF64[$vararg_buffer >> 3] = +$1;
__Z7eprintfPKcz(13567, $vararg_buffer);
STACKTOP = sp;
return;
}
function __ZN17QuatJointRotation14setLongitAngleEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
HEAPF64[$vararg_buffer >> 3] = +$1;
__Z7eprintfPKcz(15084, $vararg_buffer);
STACKTOP = sp;
return;
}
function __ZN17QuatJointRotation13setSplayAngleEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
HEAPF64[$vararg_buffer >> 3] = +$1;
__Z7eprintfPKcz(15197, $vararg_buffer);
STACKTOP = sp;
return;
}
function __ZN17QuatJointRotation13addSplayAngleEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
HEAPF64[$vararg_buffer >> 3] = +$1;
__Z7eprintfPKcz(15141, $vararg_buffer);
STACKTOP = sp;
return;
}
function __ZN17QuatJointRotation12setBendAngleEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
HEAPF64[$vararg_buffer >> 3] = +$1;
__Z7eprintfPKcz(15308, $vararg_buffer);
STACKTOP = sp;
return;
}
function __ZN17QuatJointRotation12addBendAngleEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $vararg_buffer = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$vararg_buffer = sp;
HEAPF64[$vararg_buffer >> 3] = +$1;
__Z7eprintfPKcz(15253, $vararg_buffer);
STACKTOP = sp;
return;
}
function dynCall_viifffi(index, a1, a2, a3, a4, a5, a6) {
index = index | 0;
a1 = a1 | 0;
a2 = a2 | 0;
a3 = Math_fround(a3);
a4 = Math_fround(a4);
a5 = Math_fround(a5);
a6 = a6 | 0;
FUNCTION_TABLE_viifffi[index & 1](a1 | 0, a2 | 0, Math_fround(a3), Math_fround(a4), Math_fround(a5), a6 | 0);
}
function dynCall_vififfi(index, a1, a2, a3, a4, a5, a6) {
index = index | 0;
a1 = a1 | 0;
a2 = Math_fround(a2);
a3 = a3 | 0;
a4 = Math_fround(a4);
a5 = Math_fround(a5);
a6 = a6 | 0;
FUNCTION_TABLE_vififfi[index & 1](a1 | 0, Math_fround(a2), a3 | 0, Math_fround(a4), Math_fround(a5), a6 | 0);
}
function _normal_skipS($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0, $2 = 0;
$2 = $0 + 72 | 0;
$$0 = $1;
L1 : while (1) {
switch (HEAP8[$2 + (HEAPU8[$$0 >> 0] | 0) >> 0] | 0) {
case 21:
case 9:
case 10:
break;
default:
break L1;
}
$$0 = $$0 + 1 | 0;
}
return $$0 | 0;
}
function __Z14MirrorBodySide16AbsoluteBodySide($0) {
$0 = $0 | 0;
var $$0 = 0;
switch ($0 | 0) {
case 1:
{
$$0 = 2;
break;
}
case 2:
{
$$0 = 1;
break;
}
case 3:
{
$$0 = 4;
break;
}
case 4:
{
$$0 = 3;
break;
}
default:
$$0 = $0;
}
return $$0 | 0;
}
function _snprintf($0, $1, $2, $varargs) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$varargs = $varargs | 0;
var $3 = 0, $4 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$3 = sp;
HEAP32[$3 >> 2] = $varargs;
$4 = _vsnprintf($0, $1, $2, $3) | 0;
STACKTOP = sp;
return $4 | 0;
}
function __ZN18HingeJointRotation16setPreInvComposeERK10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = f0, $3 = 0, $5 = f0;
$2 = Math_fround(__ZNK10Quaternion8getAngleEv($1));
$3 = $0 + 20 | 0;
$5 = Math_fround(Math_fround(HEAPF32[$3 >> 2]) - $2);
HEAPF32[$3 >> 2] = $5;
return;
}
function __Z13MakeXMLParserv() {
var $0 = 0, $1 = 0, $3 = 0;
$0 = __Znwj(32) | 0;
__THREW__ = 0;
invoke_vi(153, $0 | 0);
$1 = __THREW__;
__THREW__ = 0;
if ($1 & 1) {
$3 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($0);
___resumeException($3 | 0);
} else return $0 | 0;
return 0;
}
function __ZN7SSPRSet11SetRotationEffff($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = Math_fround($2);
$3 = Math_fround($3);
$4 = Math_fround($4);
HEAPF32[$0 + 12 >> 2] = $1;
HEAPF32[$0 + 16 >> 2] = $2;
HEAPF32[$0 + 20 >> 2] = $3;
HEAPF32[$0 + 24 >> 2] = $4;
return;
}
function __ZN18HingeJointRotation13setComposeInvERK10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = f0, $3 = 0, $5 = f0;
$2 = Math_fround(__ZNK10Quaternion8getAngleEv($1));
$3 = $0 + 20 | 0;
$5 = Math_fround(Math_fround(HEAPF32[$3 >> 2]) - $2);
HEAPF32[$3 >> 2] = $5;
return;
}
function __ZN15AtomicNonmanual5clearEv($0) {
$0 = $0 | 0;
var $2 = 0, $3 = 0;
HEAP32[$0 >> 2] = 0;
HEAP16[$0 + 4 >> 1] = -1;
$2 = $0 + 8 | 0;
$3 = HEAP32[$2 >> 2] | 0;
if (!$3) return;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] & 255]($3);
HEAP32[$2 >> 2] = 0;
return;
}
function __ZNK9Transform5printEP8_IO_FILEi($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
if (!$1) return;
_fwrite(11881, 2, 1, $1) | 0;
__ZNK6Vector5printEP8_IO_FILEi($0, $1, $2);
_fwrite(11884, 3, 1, $1) | 0;
__ZNK10Quaternion5printEP8_IO_FILEi($0 + 12 | 0, $1, $2);
return;
}
function __ZN23FingerBaseJointRotation7setZeroEv($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = $0 + 44 | 0;
HEAP32[$1 >> 2] = 0;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$1 + 8 >> 2] = 0;
HEAP32[$1 + 12 >> 2] = 0;
HEAP32[$1 + 16 >> 2] = 0;
HEAP32[$1 + 20 >> 2] = 0;
HEAP32[$1 + 24 >> 2] = 0;
return;
}
function __ZN17NonmanualMovementD0Ev($0) {
$0 = $0 | 0;
var $1 = 0, $3 = 0;
__THREW__ = 0;
invoke_vi(35, $0 | 0);
$1 = __THREW__;
__THREW__ = 0;
if ($1 & 1) {
$3 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($0);
___resumeException($3 | 0);
} else {
__ZdlPv($0);
return;
}
}
function __ZL16AGIFrameCallbackPvP7SSFrame($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
HEAP8[$2 >> 0] = 0;
__ZN15AnimgenInstance8AGIFrameEP7SSFrameRb($0, $1, $2);
STACKTOP = sp;
return (HEAP8[$2 >> 0] | 0) != 0 | 0;
}
function __ZN19TurretJointRotation7setFromERKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZN6Vector7setFromERKS_($0 + 8 | 0, $1 + 8 | 0);
__ZN6Vector7setFromERKS_($0 + 20 | 0, $1 + 20 | 0);
HEAP32[$0 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
HEAP32[$0 + 36 >> 2] = HEAP32[$1 + 36 >> 2];
return;
}
function __ZN18HingeJointRotation10setComposeERK10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = f0, $3 = 0, $5 = f0;
$2 = Math_fround(__ZNK10Quaternion8getAngleEv($1));
$3 = $0 + 20 | 0;
$5 = Math_fround($2 + Math_fround(HEAPF32[$3 >> 2]));
HEAPF32[$3 >> 2] = $5;
return;
}
function __ZN12VRMLRotation7setFromEffff($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = Math_fround($2);
$3 = Math_fround($3);
$4 = Math_fround($4);
HEAPF32[$0 >> 2] = $1;
HEAPF32[$0 + 4 >> 2] = $2;
HEAPF32[$0 + 8 >> 2] = $3;
HEAPF32[$0 + 12 >> 2] = $4;
return;
}
function __ZN12ExpatWrapperD0Ev($0) {
$0 = $0 | 0;
var $1 = 0, $3 = 0;
__THREW__ = 0;
invoke_vi(65, $0 | 0);
$1 = __THREW__;
__THREW__ = 0;
if ($1 & 1) {
$3 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($0);
___resumeException($3 | 0);
} else {
__ZdlPv($0);
return;
}
}
function __ZN11SeqMovementD0Ev($0) {
$0 = $0 | 0;
var $1 = 0, $3 = 0;
__THREW__ = 0;
invoke_vi(53, $0 | 0);
$1 = __THREW__;
__THREW__ = 0;
if ($1 & 1) {
$3 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($0);
___resumeException($3 | 0);
} else {
__ZdlPv($0);
return;
}
}
function __ZNK17QuatJointRotation12toQuaternionER10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
HEAP32[$1 >> 2] = HEAP32[$0 + 8 >> 2];
HEAP32[$1 + 4 >> 2] = HEAP32[$0 + 12 >> 2];
HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 16 >> 2];
HEAP32[$1 + 12 >> 2] = HEAP32[$0 + 20 >> 2];
return;
}
function __ZN17QuatJointRotation11setFromQuatERK10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
HEAP32[$0 + 8 >> 2] = HEAP32[$1 >> 2];
HEAP32[$0 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$0 + 16 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[$0 + 20 >> 2] = HEAP32[$1 + 12 >> 2];
return;
}
function __ZNSt3__214__shared_count16__release_sharedEv($0) {
$0 = $0 | 0;
var $$0 = 0;
if ((__ZNSt3__212_GLOBAL__N_19decrementIlEET_RS2_($0 + 4 | 0) | 0) == -1) {
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] & 255]($0);
$$0 = 1;
} else $$0 = 0;
return $$0 | 0;
}
function __ZN13BasicMovement14offsetFinalPosERK6VectorS2_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$0 >> 2] | 0) + 52 >> 2] & 127]($0, $1, 1);
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$0 >> 2] | 0) + 52 >> 2] & 127]($0, $2, 0);
return;
}
function _utf8_isNmstrt2($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $15 = 0, $3 = 0;
$3 = HEAPU8[$1 >> 0] | 0;
$15 = HEAPU8[$1 + 1 >> 0] | 0;
return 1 << ($15 & 31) & HEAP32[3996 + (((HEAPU8[59947 + ($3 >>> 2 & 7) >> 0] | 0) << 3 | $3 << 1 & 6 | $15 >>> 5 & 1) << 2) >> 2] | 0;
}
function __ZN7SSFrameD0Ev($0) {
$0 = $0 | 0;
var $1 = 0, $3 = 0;
__THREW__ = 0;
invoke_vi(1, $0 | 0);
$1 = __THREW__;
__THREW__ = 0;
if ($1 & 1) {
$3 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv($0);
___resumeException($3 | 0);
} else {
__ZdlPv($0);
return;
}
}
function __ZN13BasicMovement11setFinalPosERK6VectorS2_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 127]($0, $1, 1);
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 127]($0, $2, 0);
return;
}
function _utf8_isName2($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $15 = 0, $3 = 0;
$3 = HEAPU8[$1 >> 0] | 0;
$15 = HEAPU8[$1 + 1 >> 0] | 0;
return 1 << ($15 & 31) & HEAP32[3996 + (((HEAPU8[60203 + ($3 >>> 2 & 7) >> 0] | 0) << 3 | $3 << 1 & 6 | $15 >>> 5 & 1) << 2) >> 2] | 0;
}
function _abort_message($0, $varargs) {
$0 = $0 | 0;
$varargs = $varargs | 0;
var $1 = 0, $2 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$1 = sp;
HEAP32[$1 >> 2] = $varargs;
$2 = HEAP32[1832] | 0;
_vfprintf($2, $0, $1) | 0;
_fputc(10, $2) | 0;
_abort();
}
function __ZNK11HanimAvatar23ForceOutsideTorsoOffsetERK6VectorRS0_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
var $4 = 0;
$4 = HEAP32[$0 + 80 >> 2] | 0;
if (!$4) return;
FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 31]($4, $1, $2) | 0;
return;
}
function ___cxa_get_globals_fast() {
var $3 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
if (!(_pthread_once(72144, 16) | 0)) {
$3 = _pthread_getspecific(HEAP32[18037] | 0) | 0;
STACKTOP = sp;
return $3 | 0;
} else _abort_message(63855, sp);
return 0;
}
function __Z7cosRulefff($0, $1, $2) {
$0 = Math_fround($0);
$1 = Math_fround($1);
$2 = Math_fround($2);
return Math_fround(Math_fround(Math_fround(Math_fround($0 * $0) + Math_fround($1 * $1)) - Math_fround($2 * $2)) / Math_fround(Math_fround($0 * Math_fround(2.0)) * $1));
}
function __Z16SetHandshapeTypeR13HandshapeTypePKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $4 = 0;
$2 = ($1 | 0) != 0;
if (!$2) return $2 | 0;
$4 = __ZNK21InvertibleStringArray14indexFromValueEPKc(HEAP32[17751] | 0, $1) | 0;
HEAP32[$0 >> 2] = $4;
return $2 | 0;
}
function __ZN17QuatJointRotation7setFromERKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
HEAP32[$0 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
HEAP32[$0 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
HEAP32[$0 + 20 >> 2] = HEAP32[$1 + 20 >> 2];
return;
}
function dynCall_viiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
index = index | 0;
a1 = a1 | 0;
a2 = a2 | 0;
a3 = a3 | 0;
a4 = a4 | 0;
a5 = a5 | 0;
a6 = a6 | 0;
a7 = a7 | 0;
FUNCTION_TABLE_viiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0);
}
function __ZNKSt3__26locale5__imp9has_facetEl($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $13 = 0, $5 = 0;
$5 = HEAP32[$0 + 8 >> 2] | 0;
if ((HEAP32[$0 + 12 >> 2] | 0) - $5 >> 2 >>> 0 > $1 >>> 0) $13 = (HEAP32[$5 + ($1 << 2) >> 2] | 0) != 0; else $13 = 0;
return $13 | 0;
}
function __ZNK18FingerPlayMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
__ZNK13BasicMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($0, $1, $2);
return;
}
function _sprintf($0, $1, $varargs) {
$0 = $0 | 0;
$1 = $1 | 0;
$varargs = $varargs | 0;
var $2 = 0, $3 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
HEAP32[$2 >> 2] = $varargs;
$3 = _vsprintf($0, $1, $2) | 0;
STACKTOP = sp;
return $3 | 0;
}
function _fprintf($0, $1, $varargs) {
$0 = $0 | 0;
$1 = $1 | 0;
$varargs = $varargs | 0;
var $2 = 0, $3 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
HEAP32[$2 >> 2] = $varargs;
$3 = _vfprintf($0, $1, $2) | 0;
STACKTOP = sp;
return $3 | 0;
}
function __ZNK19OneHAbstractPosture21printOrientationSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZNK19OneHAbstractPosture21printOrientationSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEbb($0, $1, 1, 1);
return;
}
function __ZNK17TargettedMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
__ZNK13BasicMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($0, $1, $2);
return;
}
function _sscanf($0, $1, $varargs) {
$0 = $0 | 0;
$1 = $1 | 0;
$varargs = $varargs | 0;
var $2 = 0, $3 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
$2 = sp;
HEAP32[$2 >> 2] = $varargs;
$3 = _vsscanf($0, $1, $2) | 0;
STACKTOP = sp;
return $3 | 0;
}
function __Z17END_UNIMPLEMENTEDv() {
var $1 = 0, $3 = 0;
if (!0) return;
__THREW__ = 0;
invoke_vi(93, 0);
$1 = __THREW__;
__THREW__ = 0;
if ($1 & 1) {
$3 = ___cxa_find_matching_catch_2() | 0;
__ZdlPv(0);
___resumeException($3 | 0);
}
__ZdlPv(0);
return;
}
function __ZN9Transform13setPreComposeERK6VectorRK10Quaternion($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
__ZNK10Quaternion12rotateVectorER6Vector($2, $0);
__ZN6Vector6setAddERKS_($0, $1);
__ZN10Quaternion13setPreComposeERKS_($0 + 12 | 0, $2);
return;
}
function __ZN17TargettedMovementC2E12SET_OF_HANDSP7Gesture($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
__ZN13BasicMovementC2E12MovementType12SET_OF_HANDS($0, 9, $1);
HEAP32[$0 >> 2] = 2752;
HEAP32[$0 + 528 >> 2] = $2;
HEAP8[$0 + 532 >> 0] = 0;
return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($0, $1, __ZNSt3__211char_traitsIcE6lengthEPKc($1) | 0) | 0;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($0, $1, __ZNSt3__211char_traitsIcE6lengthEPKc($1) | 0) | 0;
}
function __ZNK13SplitMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
__ZNK13BasicMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($0, $1, $2);
return;
}
function __ZN4Site17setGlobalPositionERK6Vector($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$2 = $0 + 40 | 0;
__ZN6Vector7setFromERKS_($2, $1);
__ZNK9Transform18invTransformVectorERK6VectorRS0_((HEAP32[$0 + 16 >> 2] | 0) + 68 | 0, $2, $0 + 28 | 0);
return;
}
function __ZNK11SeqMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
__ZNK13BasicMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($0, $1, $2);
return;
}
function __ZNK11ParMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
__ZNK13BasicMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($0, $1, $2);
return;
}
function _bitshift64Shl(low, high, bits) {
low = low | 0;
high = high | 0;
bits = bits | 0;
if ((bits | 0) < 32) {
tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits;
return low << bits;
}
tempRet0 = low << bits - 32;
return 0;
}
function __ZNK10NoMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
__ZNK13BasicMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($0, $1, $2);
return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
$0 = $0 | 0;
var sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
_free($0);
if (!(_pthread_setspecific(HEAP32[18037] | 0, 0) | 0)) {
STACKTOP = sp;
return;
} else _abort_message(63954, sp);
}
function __ZN4Site16setLocalPositionERK6Vector($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$2 = $0 + 28 | 0;
__ZN6Vector7setFromERKS_($2, $1);
__ZNK9Transform15transformVectorERK6VectorRS0_((HEAP32[$0 + 16 >> 2] | 0) + 68 | 0, $2, $0 + 40 | 0);
return;
}
function __ZN22ThumbBaseJointRotation7setZeroEv($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = $0 + 44 | 0;
HEAP32[$1 >> 2] = 0;
HEAP32[$1 + 4 >> 2] = 0;
HEAP32[$1 + 8 >> 2] = 0;
HEAP32[$1 + 12 >> 2] = 0;
HEAP32[$1 + 16 >> 2] = 0;
HEAP32[$1 + 20 >> 2] = 0;
return;
}
function __ZN9Transform7setZeroEv($0) {
$0 = $0 | 0;
__ZN6Vector7setZeroEv($0);
HEAPF32[$0 + 12 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 16 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 20 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 24 >> 2] = Math_fround(1.0);
return;
}
function __ZN10XMLWrapperD2Ev($0) {
$0 = $0 | 0;
var $1 = 0, $2 = 0, $4 = 0;
HEAP32[$0 >> 2] = 3420;
$1 = $0 + 4 | 0;
$2 = HEAP32[$1 >> 2] | 0;
if (!$2) return;
$4 = HEAP32[$2 >> 2] | 0;
if ($4 | 0) _free($4);
__ZdlPv($2);
HEAP32[$1 >> 2] = 0;
return;
}
function __ZNK10Quaternion26invRotateVectorAboutCentreERK6VectorRS0_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
__ZN6Vector11setSubtractERKS_($2, $1);
__ZNK10Quaternion15invRotateVectorER6Vector($0, $2);
__ZN6Vector6setAddERKS_($2, $1);
return;
}
function _bitshift64Lshr(low, high, bits) {
low = low | 0;
high = high | 0;
bits = bits | 0;
if ((bits | 0) < 32) {
tempRet0 = high >>> bits;
return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
}
tempRet0 = 0;
return high >>> bits - 32 | 0;
}
function __ZNK19OneHAbstractPosture15printShapeSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZNK9Handshape10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE(HEAP32[$0 + 56 >> 2] | 0, $1);
return;
}
function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
index = index | 0;
a1 = a1 | 0;
a2 = a2 | 0;
a3 = a3 | 0;
a4 = a4 | 0;
a5 = a5 | 0;
a6 = a6 | 0;
return FUNCTION_TABLE_iiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}
function __ZNK10Quaternion23rotateVectorAboutCentreERK6VectorRS0_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
__ZN6Vector11setSubtractERKS_($2, $1);
__ZNK10Quaternion12rotateVectorER6Vector($0, $2);
__ZN6Vector6setAddERKS_($2, $1);
return;
}
function __Z11printIndentP8_IO_FILEi($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$05 = 0;
if (($0 | 0) != 0 & ($1 | 0) > 0) $$05 = 0; else return;
do {
_fwrite(29294, 2, 1, $0) | 0;
$$05 = $$05 + 1 | 0;
} while (($$05 | 0) != ($1 | 0));
return;
}
function b20(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
p0 = p0 | 0;
p1 = p1 | 0;
p2 = Math_fround(p2);
p3 = Math_fround(p3);
p4 = Math_fround(p4);
p5 = Math_fround(p5);
p6 = Math_fround(p6);
p7 = Math_fround(p7);
p8 = Math_fround(p8);
abort(20);
}
function ___ofl_add($0) {
$0 = $0 | 0;
var $1 = 0, $4 = 0;
$1 = ___ofl_lock() | 0;
HEAP32[$0 + 56 >> 2] = HEAP32[$1 >> 2];
$4 = HEAP32[$1 >> 2] | 0;
if ($4 | 0) HEAP32[$4 + 52 >> 2] = $0;
HEAP32[$1 >> 2] = $0;
___ofl_unlock();
return $0 | 0;
}
function __ZN16CircularMovement15offset1FinalPosERK6Vectorb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
if ($2) {
__ZN6Vector6setAddERKS_($0 + 288 | 0, $1);
return;
} else {
__ZN6Vector6setAddERKS_($0 + 400 | 0, $1);
return;
}
}
function __ZN18AbstractTimedMorph8setStartEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $7 = f0;
$7 = Math_fround($1 - Math_fround(HEAPF32[$0 + 4 >> 2]));
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 63]($0, $7);
return;
}
function __ZN16CircularMovement12set1FinalPosERK6Vectorb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
if ($2) {
__ZN6Vector7setFromERKS_($0 + 288 | 0, $1);
return;
} else {
__ZN6Vector7setFromERKS_($0 + 400 | 0, $1);
return;
}
}
function __ZN16AtomicTimedMorph8setStartEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $7 = f0;
$7 = Math_fround($1 - Math_fround(HEAPF32[$0 + 4 >> 2]));
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 63]($0, $7);
return;
}
function __ZN13BasicMovement15offset1FinalPosERK6Vectorb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
if ($2) {
__ZN6Vector6setAddERKS_($0 + 288 | 0, $1);
return;
} else {
__ZN6Vector6setAddERKS_($0 + 400 | 0, $1);
return;
}
}
function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
index = index | 0;
a1 = a1 | 0;
a2 = a2 | 0;
a3 = a3 | 0;
a4 = a4 | 0;
a5 = a5 | 0;
a6 = a6 | 0;
FUNCTION_TABLE_viiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}
function __ZN19SHMScalarController5resetEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 63]($0, Math_fround(0.0));
HEAPF32[$0 + 64 >> 2] = $1;
HEAPF32[$0 + 68 >> 2] = $1;
return;
}
function __ZN13BasicMovement12set1FinalPosERK6Vectorb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
if ($2) {
__ZN6Vector7setFromERKS_($0 + 288 | 0, $1);
return;
} else {
__ZN6Vector7setFromERKS_($0 + 400 | 0, $1);
return;
}
}
function dynCall_vifff(index, a1, a2, a3, a4) {
index = index | 0;
a1 = a1 | 0;
a2 = Math_fround(a2);
a3 = Math_fround(a3);
a4 = Math_fround(a4);
FUNCTION_TABLE_vifff[index & 3](a1 | 0, Math_fround(a2), Math_fround(a3), Math_fround(a4));
}
function __ZN17QuatJointRotation7setZeroEv($0) {
$0 = $0 | 0;
HEAPF32[$0 + 8 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 12 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 16 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 20 >> 2] = Math_fround(1.0);
return;
}
function __ZN6Vector7alengthEfff($0, $1, $2) {
$0 = Math_fround($0);
$1 = Math_fround($1);
$2 = Math_fround($2);
return Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($0 * $0) + Math_fround($1 * $1)) + Math_fround($2 * $2))));
}
function __ZL17AGIStatusCallbackPv13AnimgenStatusi($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
_emscripten_asm_const_iiii(4, HEAP32[$0 + 36 >> 2] | 0, $1 | 0, $2 | 0) | 0;
HEAP32[$0 + 32 >> 2] = $1;
return ($1 | 0) == 0 | 0;
}
function __ZN15AtomicNonmanual7setFromE14NonmanualItemssP18AbstractTimedMorph($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
HEAP32[$0 >> 2] = $1;
HEAP16[$0 + 4 >> 1] = $2;
HEAP32[$0 + 8 >> 2] = $3;
return;
}
function dynCall_viifii(index, a1, a2, a3, a4, a5) {
index = index | 0;
a1 = a1 | 0;
a2 = a2 | 0;
a3 = Math_fround(a3);
a4 = a4 | 0;
a5 = a5 | 0;
FUNCTION_TABLE_viifii[index & 7](a1 | 0, a2 | 0, Math_fround(a3), a4 | 0, a5 | 0);
}
function __ZNK9Transform18invTransformVectorERK6VectorRS0_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
__ZN6Vector11setSubtractERKS_S1_($2, $1, $0);
__ZNK10Quaternion15invRotateVectorER6Vector($0 + 12 | 0, $2);
return;
}
function __ZN17TargettedMovement16FinaliseGesturesEv($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = $0 + 528 | 0;
__ZN7Gesture24SetConstellationDefaultsEv(HEAP32[$1 >> 2] | 0);
__ZN7Gesture14InstallAHConstEv(HEAP32[$1 >> 2] | 0);
return;
}
function __ZNKSt3__210error_code7messageEv($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $3 = 0;
$3 = HEAP32[$1 + 4 >> 2] | 0;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] & 127]($0, $3, HEAP32[$1 >> 2] | 0);
return;
}
function __ZN23FingerBaseJointRotation13addSplayAngleEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $2 = 0, $4 = f0;
$2 = $0 + 48 | 0;
$4 = Math_fround(Math_fround(HEAPF32[$2 >> 2]) + $1);
HEAPF32[$2 >> 2] = $4;
return;
}
function __ZN23FingerBaseJointRotation12addBendAngleEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $2 = 0, $4 = f0;
$2 = $0 + 44 | 0;
$4 = Math_fround(Math_fround(HEAPF32[$2 >> 2]) + $1);
HEAPF32[$2 >> 2] = $4;
return;
}
function __ZN22ThumbBaseJointRotation13addSplayAngleEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $2 = 0, $4 = f0;
$2 = $0 + 48 | 0;
$4 = Math_fround(Math_fround(HEAPF32[$2 >> 2]) + $1);
HEAPF32[$2 >> 2] = $4;
return;
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
index = index | 0;
a1 = a1 | 0;
a2 = a2 | 0;
a3 = a3 | 0;
a4 = a4 | 0;
a5 = a5 | 0;
return FUNCTION_TABLE_iiiiii[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}
function __ZN22ThumbBaseJointRotation12addBendAngleEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $2 = 0, $4 = f0;
$2 = $0 + 44 | 0;
$4 = Math_fround(Math_fround(HEAPF32[$2 >> 2]) + $1);
HEAPF32[$2 >> 2] = $4;
return;
}
function _XML_SetUserData($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0, $5 = 0;
$2 = $0 + 4 | 0;
$5 = (HEAP32[$2 >> 2] | 0) == (HEAP32[$0 >> 2] | 0);
HEAP32[$0 >> 2] = $1;
if (!$5) return;
HEAP32[$2 >> 2] = $1;
return;
}
function __ZN19TurretJointRotation13addSplayAngleEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $2 = 0, $4 = f0;
$2 = $0 + 36 | 0;
$4 = Math_fround(Math_fround(HEAPF32[$2 >> 2]) + $1);
HEAPF32[$2 >> 2] = $4;
return;
}
function __ZN19TurretJointRotation12addBendAngleEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $2 = 0, $4 = f0;
$2 = $0 + 32 | 0;
$4 = Math_fround(Math_fround(HEAPF32[$2 >> 2]) + $1);
HEAPF32[$2 >> 2] = $4;
return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
var sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
if (!(_pthread_key_create(72148, 179) | 0)) {
STACKTOP = sp;
return;
} else _abort_message(63904, sp);
}
function __ZN18HingeJointRotation12addBendAngleEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
var $2 = 0, $4 = f0;
$2 = $0 + 20 | 0;
$4 = Math_fround(Math_fround(HEAPF32[$2 >> 2]) + $1);
HEAPF32[$2 >> 2] = $4;
return;
}
function __Z12indentStringi($0) {
$0 = $0 | 0;
var $1 = 0, $3 = 0;
$1 = $0 << 1;
$3 = _malloc($1 | 1) | 0;
if (($0 | 0) > 0) _memset($3 | 0, 32, (($1 | 0) > 1 ? $1 : 1) | 0) | 0;
HEAP8[$3 + $1 >> 0] = 0;
return $3 | 0;
}
function _utf8_isInvalid2($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $6 = 0;
if ((HEAPU8[$1 >> 0] | 0) < 194) return 1; else {
$6 = HEAPU8[$1 + 1 >> 0] | 0;
return $6 >>> 7 ^ 1 | ($6 & 192 | 0) == 192 | 0;
}
return 0;
}
function __ZNK9Transform15transformVectorERK6VectorRS0_($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
__ZNK10Quaternion12rotateVectorERK6VectorRS0_($0 + 12 | 0, $1, $2);
__ZN6Vector6setAddERKS_($2, $0);
return;
}
function __ZN17QuatJointRotation11interpolateERKS_S1_f($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = Math_fround($3);
__ZN10Quaternion8setSlerpERKS_S1_f($0 + 8 | 0, $1 + 8 | 0, $2 + 8 | 0, $3);
return;
}
function _ZeroPostMortem() {
HEAP32[17851] = 0;
HEAP32[17852] = 0;
HEAP32[17853] = 0;
HEAP32[17854] = 0;
HEAP32[17855] = 0;
HEAP32[17856] = 0;
HEAP32[17857] = 0;
HEAP32[17858] = 0;
__Z15ResetSiGMLFlagsv();
return;
}
function dynCall_iiiiid(index, a1, a2, a3, a4, a5) {
index = index | 0;
a1 = a1 | 0;
a2 = a2 | 0;
a3 = a3 | 0;
a4 = a4 | 0;
a5 = +a5;
return FUNCTION_TABLE_iiiiid[index & 0](a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0;
}
function _animgenSetAvatar($0, $1, $2, $3, $4, $5) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
$5 = $5 | 0;
return __ZN15AnimgenInstance9SetAvatarEiPKcS1_S1_S1_S1_($0, $1, $2, $3, $4, $5) | 0;
}
function __ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = $0 + 16 | 0;
HEAP32[$1 >> 2] = HEAP32[$1 >> 2] | 1;
if (!(HEAP32[$0 + 20 >> 2] & 1)) return; else ___cxa_rethrow();
}
function __ZN6Vector7setFromEfff($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = Math_fround($2);
$3 = Math_fround($3);
HEAPF32[$0 >> 2] = $1;
HEAPF32[$0 + 4 >> 2] = $2;
HEAPF32[$0 + 8 >> 2] = $3;
return;
}
function __ZN22ThumbBaseJointRotation16setPreInvComposeERK10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
__Z7eprintfPKcz(14581, sp);
STACKTOP = sp;
return;
}
function __ZNK13BasicMovement18printTopLevelSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 80 >> 2] & 255]($0, $1);
return;
}
function __Z20NewCopyJointRotationPK13JointRotation($0) {
$0 = $0 | 0;
var $3 = 0;
$3 = __ZN5Joint16NewJointRotationEv(HEAP32[$0 + 4 >> 2] | 0) | 0;
__Z17CopyJointRotationP13JointRotationPKS_($3, $0);
return $3 | 0;
}
function __ZN22ThumbBaseJointRotation13setComposeInvERK10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
__Z7eprintfPKcz(14675, sp);
STACKTOP = sp;
return;
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
index = index | 0;
a1 = a1 | 0;
a2 = a2 | 0;
a3 = a3 | 0;
a4 = a4 | 0;
a5 = a5 | 0;
FUNCTION_TABLE_viiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}
function __Z17DeleteVersionInfov() {
var $0 = 0, $2 = 0;
$0 = HEAP32[16090] | 0;
if ($0 | 0) {
_free($0);
HEAP32[16090] = 0;
}
$2 = HEAP32[16091] | 0;
if (!$2) return;
_free($2);
HEAP32[16091] = 0;
return;
}
function __ZNKSt3__26locale9use_facetERNS0_2idE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$2 = HEAP32[$0 >> 2] | 0;
return __ZNKSt3__26locale5__imp9use_facetEl($2, __ZNSt3__26locale2id5__getEv($1) | 0) | 0;
}
function __ZNKSt3__214error_category10equivalentERKNS_10error_codeEi($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
return ((HEAP32[$1 >> 2] | 0) == ($2 | 0) ? (HEAP32[$1 + 4 >> 2] | 0) == ($0 | 0) : 0) | 0;
}
function __ZN22ThumbBaseJointRotation11setFromQuatERK10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
__Z7eprintfPKcz(14849, sp);
STACKTOP = sp;
return;
}
function __ZL26handle_bonesanimation_signPvP7XMLCell($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $4 = 0;
$4 = __Z16convertGlossToIDP7HashAnyIPKcS1_E(HEAP32[$1 + 4 >> 2] | 0) | 0;
if (!$4) return;
_free($4);
return;
}
function __ZN6VectorC2Efff($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = Math_fround($1);
$2 = Math_fround($2);
$3 = Math_fround($3);
HEAPF32[$0 >> 2] = $1;
HEAPF32[$0 + 4 >> 2] = $2;
HEAPF32[$0 + 8 >> 2] = $3;
return;
}
function __ZN22ThumbBaseJointRotation10setComposeERK10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 16 | 0;
__Z7eprintfPKcz(14763, sp);
STACKTOP = sp;
return;
}
function __ZNK28InvertibleDynamicStringArray6lengthEv($0) {
$0 = $0 | 0;
var $2 = 0, $6 = 0;
$2 = HEAP32[$0 + 4 >> 2] | 0;
if (!$2) {
$6 = 0;
return $6 | 0;
}
$6 = HEAP32[$2 + 12 >> 2] | 0;
return $6 | 0;
}
function __ZN13WristMovement22setOwnMotionAttributesERK16MotionAttributes($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
HEAP32[$0 + 528 >> 2] = HEAP32[$1 + 204 >> 2];
HEAP32[$0 + 532 >> 2] = HEAP32[$1 + 92 >> 2];
return;
}
function __ZN7SSMorphC2EPcf($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
HEAP32[$0 >> 2] = 800;
HEAP8[$0 + 8 >> 0] = 0;
_strncpy($0 + 4 | 0, $1, 4) | 0;
HEAPF32[$0 + 12 >> 2] = $2;
return;
}
function __ZNK18HingeJointRotation12toQuaternionER10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZN10Quaternion15setFromVecAngleERK6Vectorfb($1, $0 + 8 | 0, Math_fround(HEAPF32[$0 + 20 >> 2]), 1);
return;
}
function __ZL20AGISignStartCallbackPvPKcii($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
_emscripten_asm_const_iiiii(5, HEAP32[$0 + 36 >> 2] | 0, $1 | 0, $2 | 0, $3 | 0) | 0;
return;
}
function __ZN5Joint17rotateJointGlobalERK10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZN10Quaternion13setPreComposeERKS_($0 + 80 | 0, $1);
__ZN5Joint32computeLocalFromGlobalTransformsEv($0);
return;
}
function __ZN19TurretJointRotation13setLongitAxisERK6Vector($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__Z5eputsPKc(13778);
__ZNK6Vector5printEP8_IO_FILEi($1, HEAP32[16082] | 0, 3);
__Z5eputsPKc(13454);
return;
}
function dynCall_viifi(index, a1, a2, a3, a4) {
index = index | 0;
a1 = a1 | 0;
a2 = a2 | 0;
a3 = Math_fround(a3);
a4 = a4 | 0;
FUNCTION_TABLE_viifi[index & 15](a1 | 0, a2 | 0, Math_fround(a3), a4 | 0);
}
function ___lctrans_impl($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0;
if (!$1) $$0 = 0; else $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0;
return ($$0 | 0 ? $$0 : $0) | 0;
}
function __ZN18HingeJointRotation13setLongitAxisERK6Vector($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__Z5eputsPKc(13402);
__ZNK6Vector5printEP8_IO_FILEi($1, HEAP32[16082] | 0, 3);
__Z5eputsPKc(13454);
return;
}
function __ZN13DynamicStringD2Ev($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = HEAP32[$0 >> 2] | 0;
if ($1 | 0) {
_free($1);
HEAP32[$0 >> 2] = 0;
}
HEAP32[$0 + 12 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
return;
}
function __ZL17handle_mocap_signPvP7XMLCell($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $4 = 0;
$4 = __Z16convertGlossToIDP7HashAnyIPKcS1_E(HEAP32[$1 + 4 >> 2] | 0) | 0;
if (!$4) return;
_free($4);
return;
}
function dynCall_viiif(index, a1, a2, a3, a4) {
index = index | 0;
a1 = a1 | 0;
a2 = a2 | 0;
a3 = a3 | 0;
a4 = Math_fround(a4);
FUNCTION_TABLE_viiif[index & 7](a1 | 0, a2 | 0, a3 | 0, Math_fround(a4));
}
function dynCall_vifii(index, a1, a2, a3, a4) {
index = index | 0;
a1 = a1 | 0;
a2 = Math_fround(a2);
a3 = a3 | 0;
a4 = a4 | 0;
FUNCTION_TABLE_vifii[index & 3](a1 | 0, Math_fround(a2), a3 | 0, a4 | 0);
}
function __ZN18HingeJointRotation12setSplayAxisERK6Vector($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__Z5eputsPKc(13458);
__ZNK6Vector5printEP8_IO_FILEi($1, HEAP32[16082] | 0, 3);
__Z5eputsPKc(13454);
return;
}
function __ZN17QuatJointRotation13setLongitAxisERK6Vector($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__Z5eputsPKc(14934);
__ZNK6Vector5printEP8_IO_FILEi($1, HEAP32[16082] | 0, 3);
__Z5eputsPKc(13454);
return;
}
function __ZN17QuatJointRotation12setSplayAxisERK6Vector($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__Z5eputsPKc(14985);
__ZNK6Vector5printEP8_IO_FILEi($1, HEAP32[16082] | 0, 3);
__Z5eputsPKc(13454);
return;
}
function __ZN17QuatJointRotation11setBendAxisERK6Vector($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__Z5eputsPKc(15035);
__ZNK6Vector5printEP8_IO_FILEi($1, HEAP32[16082] | 0, 3);
__Z5eputsPKc(13454);
return;
}
function __Z10fileExistsPKc($0) {
$0 = $0 | 0;
var $$0 = 0, sp = 0;
sp = STACKTOP;
STACKTOP = STACKTOP + 80 | 0;
if (!$0) $$0 = 0; else $$0 = (_stat($0, sp) | 0) == 0;
STACKTOP = sp;
return $$0 | 0;
}
function __ZN6Vector7setFromERKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
return;
}
function __ZN18HingeJointRotation11setFromQuatERK10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = f0;
$2 = Math_fround(__ZNK10Quaternion8getAngleEv($1));
HEAPF32[$0 + 20 >> 2] = $2;
return;
}
function _i64Subtract(a, b, c, d) {
a = a | 0;
b = b | 0;
c = c | 0;
d = d | 0;
var h = 0;
h = b - d >>> 0;
h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
return (tempRet0 = h, a - c >>> 0 | 0) | 0;
}
function ___syscall_ret($0) {
$0 = $0 | 0;
var $$0 = 0, $3 = 0;
if ($0 >>> 0 > 4294963200) {
$3 = ___errno_location() | 0;
HEAP32[$3 >> 2] = 0 - $0;
$$0 = -1;
} else $$0 = $0;
return $$0 | 0;
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
index = index | 0;
a1 = a1 | 0;
a2 = a2 | 0;
a3 = a3 | 0;
a4 = a4 | 0;
return FUNCTION_TABLE_iiiii[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}
function __ZN16CircularMovementD2Ev($0) {
$0 = $0 | 0;
HEAP32[$0 >> 2] = 1984;
HEAP32[$0 + 452 >> 2] = 0;
HEAP32[$0 + 340 >> 2] = 0;
HEAP32[$0 + 228 >> 2] = 0;
HEAP32[$0 + 116 >> 2] = 0;
return;
}
function __ZNK16AtomicTimedMorph13printIndentedEP8_IO_FILEi($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
FUNCTION_TABLE_vii[HEAP32[(HEAP32[$0 >> 2] | 0) + 40 >> 2] & 255]($0, $1);
return;
}
function dynCall_fiif(index, a1, a2, a3) {
index = index | 0;
a1 = a1 | 0;
a2 = a2 | 0;
a3 = Math_fround(a3);
return Math_fround(FUNCTION_TABLE_fiif[index & 1](a1 | 0, a2 | 0, Math_fround(a3)));
}
function __ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($0) {
$0 = $0 | 0;
__ZNKSt3__212_GLOBAL__N_111__fake_bindclEv(HEAP32[HEAP32[$0 >> 2] >> 2] | 0);
return;
}
function __ZN6VectorC2ERKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
return;
}
function __ZN13BasicMovementD2Ev($0) {
$0 = $0 | 0;
HEAP32[$0 >> 2] = 1984;
HEAP32[$0 + 452 >> 2] = 0;
HEAP32[$0 + 340 >> 2] = 0;
HEAP32[$0 + 228 >> 2] = 0;
HEAP32[$0 + 116 >> 2] = 0;
return;
}
function __ZN10NoMovement17setInitialPostureERK19TwoHConcretePosture($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
_memcpy($0 + 60 | 0, $1 | 0, 224) | 0;
_memcpy($0 + 284 | 0, $1 | 0, 224) | 0;
return;
}
function __ZN14RepeatMovement16FinaliseGesturesEv($0) {
$0 = $0 | 0;
var $2 = 0;
$2 = HEAP32[$0 + 696 >> 2] | 0;
FUNCTION_TABLE_vi[HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] & 255]($2);
return;
}
function ___DOUBLE_BITS_680($0) {
$0 = +$0;
var $1 = 0;
HEAPF64[tempDoublePtr >> 3] = $0;
$1 = HEAP32[tempDoublePtr >> 2] | 0;
tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
return $1 | 0;
}
function ___DOUBLE_BITS_271($0) {
$0 = +$0;
var $1 = 0;
HEAPF64[tempDoublePtr >> 3] = $0;
$1 = HEAP32[tempDoublePtr >> 2] | 0;
tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
return $1 | 0;
}
function __ZNSt3__26localeC2ERKS0_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$2 = HEAP32[$1 >> 2] | 0;
HEAP32[$0 >> 2] = $2;
__ZNSt3__214__shared_count12__add_sharedEv($2);
return;
}
function __Z22isHorizontalWhiteSpacec($0) {
$0 = $0 | 0;
var $1 = 0;
switch ($0 << 24 >> 24) {
case 9:
case 32:
case 0:
{
$1 = 1;
break;
}
default:
$1 = 0;
}
return $1 | 0;
}
function __ZNK9Transform15transformVectorER6Vector($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZNK10Quaternion12rotateVectorER6Vector($0 + 12 | 0, $1);
__ZN6Vector6setAddERKS_($1, $0);
return;
}
function __ZNK13SeqTimedMorph5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
if (!$1) return;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 127]($0, $1, 0);
return;
}
function __ZNK13ParTimedMorph5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
if (!$1) return;
FUNCTION_TABLE_viii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 127]($0, $1, 0);
return;
}
function dynCall_viiii(index, a1, a2, a3, a4) {
index = index | 0;
a1 = a1 | 0;
a2 = a2 | 0;
a3 = a3 | 0;
a4 = a4 | 0;
FUNCTION_TABLE_viiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}
function __ZN18HingeJointRotation7setFromERKS_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZN6Vector7setFromERKS_($0 + 8 | 0, $1 + 8 | 0);
HEAP32[$0 + 20 >> 2] = HEAP32[$1 + 20 >> 2];
return;
}
function b31(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
p0 = p0 | 0;
p1 = p1 | 0;
p2 = p2 | 0;
p3 = p3 | 0;
p4 = p4 | 0;
p5 = p5 | 0;
p6 = p6 | 0;
p7 = p7 | 0;
p8 = p8 | 0;
abort(31);
}
function b29(p0, p1, p2, p3, p4, p5, p6, p7) {
p0 = p0 | 0;
p1 = p1 | 0;
p2 = p2 | 0;
p3 = p3 | 0;
p4 = p4 | 0;
p5 = p5 | 0;
p6 = Math_fround(p6);
p7 = Math_fround(p7);
abort(29);
}
function __ZN11OneHGestureC2EbP7Gesture($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
__ZN19OneHAbstractPostureC2EbP7Gesture($0, $1, $2);
HEAP32[$0 + 72 >> 2] = $2;
return;
}
function __ZN4Site21computeGlobalPositionEv($0) {
$0 = $0 | 0;
__ZNK9Transform15transformVectorERK6VectorRS0_((HEAP32[$0 + 16 >> 2] | 0) + 68 | 0, $0 + 28 | 0, $0 + 40 | 0);
return;
}
function __ZN13GestureParser13readXMLStringEPKcR10ParserData($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return __ZN13GestureParser13readXMLStringEPKcR10ParserDataPP7Gesture($0, $1, 0) | 0;
}
function _XML_ErrorString($0) {
$0 = $0 | 0;
var $$0 = 0;
if (($0 + -1 | 0) >>> 0 >= 40) {
$$0 = 0;
return $$0 | 0;
}
$$0 = HEAP32[3468 + ($0 << 2) >> 2] | 0;
return $$0 | 0;
}
function dynCall_viif(index, a1, a2, a3) {
index = index | 0;
a1 = a1 | 0;
a2 = a2 | 0;
a3 = Math_fround(a3);
FUNCTION_TABLE_viif[index & 3](a1 | 0, a2 | 0, Math_fround(a3));
}
function dynCall_vifi(index, a1, a2, a3) {
index = index | 0;
a1 = a1 | 0;
a2 = Math_fround(a2);
a3 = a3 | 0;
FUNCTION_TABLE_vifi[index & 7](a1 | 0, Math_fround(a2), a3 | 0);
}
function _i64Add(a, b, c, d) {
a = a | 0;
b = b | 0;
c = c | 0;
d = d | 0;
var l = 0;
l = a + c >>> 0;
return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0;
}
function __ZNKSt3__214error_category23default_error_conditionEi($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
HEAP32[$0 >> 2] = $2;
HEAP32[$0 + 4 >> 2] = $1;
return;
}
function __ZN20QuaternionController7newTimeEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 63]($0, $1);
return;
}
function __ZN19SHMScalarController8new_per1Ef($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 63]($0, $1);
return;
}
function __ZN6VectorC2Ev($0) {
$0 = $0 | 0;
HEAPF32[$0 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 4 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 8 >> 2] = Math_fround(0.0);
return;
}
function dynCall_iiii(index, a1, a2, a3) {
index = index | 0;
a1 = a1 | 0;
a2 = a2 | 0;
a3 = a3 | 0;
return FUNCTION_TABLE_iiii[index & 31](a1 | 0, a2 | 0, a3 | 0) | 0;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0) {
$0 = $0 | 0;
if ((HEAP8[$0 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$0 >> 2] | 0);
return;
}
function __ZNK17QuatJointRotation13printAxesVRMLEP8_IO_FILEfss($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = Math_fround($2);
$3 = $3 | 0;
$4 = $4 | 0;
return;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
$a$0 = $a$0 | 0;
$a$1 = $a$1 | 0;
$b$0 = $b$0 | 0;
$b$1 = $b$1 | 0;
return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
}
function __ZN15AtomicNonmanual7setFromE14NonmanualItemss($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
HEAP32[$0 >> 2] = $1;
HEAP16[$0 + 4 >> 1] = $2;
return;
}
function _strchr($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$2 = ___strchrnul($0, $1) | 0;
return ((HEAP8[$2 >> 0] | 0) == ($1 & 255) << 24 >> 24 ? $2 : 0) | 0;
}
function __ZNSt3__211char_traitsIcE4moveEPcPKcj($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
if ($2 | 0) _memmove($0 | 0, $1 | 0, $2 | 0) | 0;
return $0 | 0;
}
function __ZN17QuatJointRotation16setPreInvComposeERK10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZN10Quaternion16setPreInvComposeERKS_($0 + 8 | 0, $1);
return;
}
function __ZNSt3__211char_traitsIcE4copyEPcPKcj($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
if ($2 | 0) _memcpy($0 | 0, $1 | 0, $2 | 0) | 0;
return $0 | 0;
}
function __ZN10Quaternion10setZeroVecEv($0) {
$0 = $0 | 0;
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
HEAP32[$0 + 12 >> 2] = 0;
return;
}
function __ZN13FingerBending16SetFingerBendingEPKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZN13FingerBending16SetFingerBendingEPKcP7HashAnyIS1_S_E($0, $1, 0);
return;
}
function __ZNK9Transform20invTransformRotationER10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZNK10Quaternion17invRotateRotationERS_($0 + 12 | 0, $1);
return;
}
function __ZNK17NonmanualMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
return;
}
function ___cxa_guard_acquire($0) {
$0 = $0 | 0;
var $$0 = 0;
if ((HEAP8[$0 >> 0] | 0) == 1) $$0 = 0; else {
HEAP8[$0 >> 0] = 1;
$$0 = 1;
}
return $$0 | 0;
}
function dynCall_viii(index, a1, a2, a3) {
index = index | 0;
a1 = a1 | 0;
a2 = a2 | 0;
a3 = a3 | 0;
FUNCTION_TABLE_viii[index & 127](a1 | 0, a2 | 0, a3 | 0);
}
function __ZNSt3__212_GLOBAL__N_19decrementIlEET_RS2_($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = HEAP32[$0 >> 2] | 0;
HEAP32[$0 >> 2] = $1 + -1;
return $1 + -1 | 0;
}
function b21(p0, p1, p2, p3, p4, p5) {
p0 = p0 | 0;
p1 = p1 | 0;
p2 = Math_fround(p2);
p3 = Math_fround(p3);
p4 = Math_fround(p4);
p5 = p5 | 0;
abort(21);
}
function b16(p0, p1, p2, p3, p4, p5) {
p0 = p0 | 0;
p1 = Math_fround(p1);
p2 = p2 | 0;
p3 = Math_fround(p3);
p4 = Math_fround(p4);
p5 = p5 | 0;
abort(16);
}
function __ZNSt3__26locale2id6__initEv($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = HEAP32[18014] | 0;
HEAP32[18014] = $1 + 1;
HEAP32[$0 + 4 >> 2] = $1 + 1;
return;
}
function __ZNKSt3__212__do_message7messageEi($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
__ZNSt3__212_GLOBAL__N_113do_strerror_rEi($0, $2);
return;
}
function __ZNK9Transform18transformDirectionER6Vector($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZNK10Quaternion12rotateVectorER6Vector($0 + 12 | 0, $1);
return;
}
function __ZN20QuaternionController5resetEv($0) {
$0 = $0 | 0;
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] & 63]($0, Math_fround(0.0));
return;
}
function __ZN19TurretJointRotation7setZeroEv($0) {
$0 = $0 | 0;
HEAPF32[$0 + 32 >> 2] = Math_fround(0.0);
HEAPF32[$0 + 36 >> 2] = Math_fround(0.0);
return;
}
function __ZN19SHMScalarController5resetEv($0) {
$0 = $0 | 0;
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] & 63]($0, Math_fround(0.0));
return;
}
function stackAlloc(size) {
size = size | 0;
var ret = 0;
ret = STACKTOP;
STACKTOP = STACKTOP + size | 0;
STACKTOP = STACKTOP + 15 & -16;
return ret | 0;
}
function __ZN13BasicMovement17setInitialPostureERK19TwoHConcretePosture($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
_memcpy($0 + 60 | 0, $1 | 0, 224) | 0;
return;
}
function __ZL21AGIPostMortemCallbackPvP10PostMortem($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
_emscripten_asm_const_ii(6, HEAP32[$0 + 36 >> 2] | 0) | 0;
return;
}
function _fputs($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $2 = 0;
$2 = _strlen($0) | 0;
return ((_fwrite($0, 1, $2, $1) | 0) != ($2 | 0)) << 31 >> 31 | 0;
}
function ___cxa_is_pointer_type($0) {
$0 = $0 | 0;
var $3 = 0;
if (!$0) $3 = 0; else $3 = (___dynamic_cast($0, 608, 744, 0) | 0) != 0 & 1;
return $3 | 0;
}
function __ZN17VectorController25resetEv($0) {
$0 = $0 | 0;
FUNCTION_TABLE_vif[HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] & 63]($0, Math_fround(0.0));
return;
}
function __ZN23FingerBaseJointRotation13setLongitAxisERK6Vector($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZN6Vector7setFromERKS_($0 + 32 | 0, $1);
return;
}
function dynCall_fii(index, a1, a2) {
index = index | 0;
a1 = a1 | 0;
a2 = a2 | 0;
return Math_fround(FUNCTION_TABLE_fii[index & 1](a1 | 0, a2 | 0));
}
function __ZN23FingerBaseJointRotation12setSplayAxisERK6Vector($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZN6Vector7setFromERKS_($0 + 20 | 0, $1);
return;
}
function __ZN22ThumbBaseJointRotation13setLongitAxisERK6Vector($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZN6Vector7setFromERKS_($0 + 32 | 0, $1);
return;
}
function dynCall_vif(index, a1, a2) {
index = index | 0;
a1 = a1 | 0;
a2 = Math_fround(a2);
FUNCTION_TABLE_vif[index & 63](a1 | 0, Math_fround(a2));
}
function b30(p0, p1, p2, p3, p4, p5, p6) {
p0 = p0 | 0;
p1 = p1 | 0;
p2 = p2 | 0;
p3 = p3 | 0;
p4 = p4 | 0;
p5 = p5 | 0;
p6 = p6 | 0;
abort(30);
}
function __ZN6KeyOpsIK6SiteIDE5eqkeyES0_S0_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return ((HEAP32[$1 >> 2] ^ HEAP32[$0 >> 2]) & 16777215 | 0) == 0 | 0;
}
function __ZN22ThumbBaseJointRotation12setSplayAxisERK6Vector($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZN6Vector7setFromERKS_($0 + 20 | 0, $1);
return;
}
function _XML_SetElementHandler($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
HEAP32[$0 + 52 >> 2] = $1;
HEAP32[$0 + 56 >> 2] = $2;
return;
}
function establishStackSpace(stackBase, stackMax) {
stackBase = stackBase | 0;
stackMax = stackMax | 0;
STACKTOP = stackBase;
STACK_MAX = stackMax;
}
function __ZN23FingerBaseJointRotation11setBendAxisERK6Vector($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZN6Vector7setFromERKS_($0 + 8 | 0, $1);
return;
}
function __ZN22ThumbBaseJointRotation11setBendAxisERK6Vector($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZN6Vector7setFromERKS_($0 + 8 | 0, $1);
return;
}
function __ZN19TurretJointRotation12setSplayAxisERK6Vector($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZN6Vector7setFromERKS_($0 + 20 | 0, $1);
return;
}
function _strerror($0) {
$0 = $0 | 0;
var $2 = 0;
$2 = (___pthread_self_103() | 0) + 188 | 0;
return ___strerror_l($0, HEAP32[$2 >> 2] | 0) | 0;
}
function __ZN17VectorController214get_perceptionER6Vector($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZN6Vector7setFromERKS_($1, $0 + 28 | 0);
return;
}
function __ZN13BasicMovement9setMannerE6Manner($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZN11MannerFlags9addMannerE6Manner($0 + 12 | 0, $1);
return;
}
function __ZN19TurretJointRotation11setBendAxisERK6Vector($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZN6Vector7setFromERKS_($0 + 8 | 0, $1);
return;
}
function __ZN17VectorController214set_perceptionE6Vector($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZN6Vector7setFromERKS_($0 + 28 | 0, $1);
return;
}
function __ZN17VectorController213get_referenceER6Vector($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZN6Vector7setFromERKS_($1, $0 + 16 | 0);
return;
}
function __ZN18HingeJointRotation11setBendAxisERK6Vector($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZN6Vector7setFromERKS_($0 + 8 | 0, $1);
return;
}
function dynCall_iii(index, a1, a2) {
index = index | 0;
a1 = a1 | 0;
a2 = a2 | 0;
return FUNCTION_TABLE_iii[index & 63](a1 | 0, a2 | 0) | 0;
}
function b10(p0, p1, p2, p3, p4, p5) {
p0 = p0 | 0;
p1 = p1 | 0;
p2 = p2 | 0;
p3 = p3 | 0;
p4 = p4 | 0;
p5 = p5 | 0;
abort(10);
return 0;
}
function __Z26GetNonmanualDefsFromStringPKc($0) {
$0 = $0 | 0;
__Z16GetNonmanualDefsP7XMLCellPKc(__Z13ReadXMLStringPc($0) | 0, 47464);
return;
}
function __ZN5SiGML14convertElementEPKc($0) {
$0 = $0 | 0;
return __ZNK21InvertibleStringArray14indexFromValueEPKc(HEAP32[17757] | 0, $0) | 0;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
return ($0 | 0) == ($1 | 0) | 0;
}
function _animgenInit() {
var $$0$i = 0;
if (!(HEAP32[17848] | 0)) {
HEAP32[17848] = 1;
$$0$i = 1;
} else $$0$i = 0;
return $$0$i | 0;
}
function __ZN12VRMLRotationC2ERK10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZNK10Quaternion6toVRMLER12VRMLRotation($1, $0);
return;
}
function _initScanContent($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
return _initScan($0, 1, $1, $2, $3) | 0;
}
function __ZN19SHMScalarController14get_perceptionERf($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
HEAP32[$1 >> 2] = HEAP32[$0 + 80 >> 2];
return;
}
function _wctomb($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $$0 = 0;
if (!$0) $$0 = 0; else $$0 = _wcrtomb($0, $1, 0) | 0;
return $$0 | 0;
}
function _swapc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
var $3 = 0;
$3 = _llvm_bswap_i32($0 | 0) | 0;
return (($1 | 0) == 0 ? $0 : $3) | 0;
}
function _initScanProlog($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
return _initScan($0, 0, $1, $2, $3) | 0;
}
function __ZN23FingerBaseJointRotation13setSplayAngleEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 48 >> 2] = $1;
return;
}
function __ZN22ThumbBaseJointRotation14setLongitAngleEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 52 >> 2] = $1;
return;
}
function __ZN19SHMScalarController13get_referenceERf($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
HEAP32[$1 >> 2] = HEAP32[$0 + 76 >> 2];
return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
$0 = $0 | 0;
__ZN10__cxxabiv116__shim_type_infoD2Ev($0);
__ZdlPv($0);
return;
}
function __ZNSt3__214__shared_count12__add_sharedEv($0) {
$0 = $0 | 0;
__ZNSt3__212_GLOBAL__N_19incrementIlEET_RS2_($0 + 4 | 0);
return;
}
function __ZN23FingerBaseJointRotation12setBendAngleEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 44 >> 2] = $1;
return;
}
function __ZN22ThumbBaseJointRotation13setSplayAngleEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 48 >> 2] = $1;
return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
$0 = $0 | 0;
__ZN10__cxxabiv116__shim_type_infoD2Ev($0);
__ZdlPv($0);
return;
}
function setThrew(threw, value) {
threw = threw | 0;
value = value | 0;
if (!__THREW__) {
__THREW__ = threw;
threwValue = value;
}
}
function __ZN22ThumbBaseJointRotation12setBendAngleEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 44 >> 2] = $1;
return;
}
function __ZNSt13runtime_errorD2Ev($0) {
$0 = $0 | 0;
HEAP32[$0 >> 2] = 8204;
__ZNSt3__218__libcpp_refstringD2Ev($0 + 4 | 0);
return;
}
function __Z5eputcc($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = HEAP32[16082] | 0;
if (!$1) return;
_fputc($0 << 24 >> 24, $1) | 0;
return;
}
function _out($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
if (!(HEAP32[$0 >> 2] & 32)) ___fwritex($1, $2, $0) | 0;
return;
}
function __ZN19TurretJointRotation13setSplayAngleEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 36 >> 2] = $1;
return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
$0 = $0 | 0;
__ZN10__cxxabiv116__shim_type_infoD2Ev($0);
__ZdlPv($0);
return;
}
function dynCall_vii(index, a1, a2) {
index = index | 0;
a1 = a1 | 0;
a2 = a2 | 0;
FUNCTION_TABLE_vii[index & 255](a1 | 0, a2 | 0);
}
function __ZNSt11logic_errorD2Ev($0) {
$0 = $0 | 0;
HEAP32[$0 >> 2] = 8184;
__ZNSt3__218__libcpp_refstringD2Ev($0 + 4 | 0);
return;
}
function __ZN19TurretJointRotation12setBendAngleEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 32 >> 2] = $1;
return;
}
function __ZN17VectorController214get_perceptionEv($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZN6VectorC2ERKS_($0, $1 + 28 | 0);
return;
}
function b28(p0, p1, p2, p3, p4, p5) {
p0 = p0 | 0;
p1 = p1 | 0;
p2 = p2 | 0;
p3 = p3 | 0;
p4 = p4 | 0;
p5 = p5 | 0;
abort(28);
}
function __ZN18HingeJointRotation12setBendAngleEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 20 >> 2] = $1;
return;
}
function __ZN17VectorController213get_referenceEv($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZN6VectorC2ERKS_($0, $1 + 16 | 0);
return;
}
function _errorProcessor($0, $1, $2, $3) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
return HEAP32[$0 + 268 >> 2] | 0;
}
function __ZNSt3__26localeD2Ev($0) {
$0 = $0 | 0;
__ZNSt3__214__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
return;
}
function __ZNSt3__211char_traitsIcE6assignERcRKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
HEAP8[$0 >> 0] = HEAP8[$1 >> 0] | 0;
return;
}
function __ZN6Vector7setZeroEv($0) {
$0 = $0 | 0;
HEAP32[$0 >> 2] = 0;
HEAP32[$0 + 4 >> 2] = 0;
HEAP32[$0 + 8 >> 2] = 0;
return;
}
function __ZNK7SSFrame12GetNumMorphsEv($0) {
$0 = $0 | 0;
return (HEAP32[$0 + 20 >> 2] | 0) - (HEAP32[$0 + 16 >> 2] | 0) >> 2 | 0;
}
function __ZNKSt3__28ios_base6getlocEv($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZNSt3__26localeC2ERKS0_($0, $1 + 28 | 0);
return;
}
function __ZNK7SSFrame12GetNumPRSetsEv($0) {
$0 = $0 | 0;
return (HEAP32[$0 + 8 >> 2] | 0) - (HEAP32[$0 + 4 >> 2] | 0) >> 2 | 0;
}
function __ZN7XMLCell5printEP8_IO_FILE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZN7XMLCell5printEP8_IO_FILEi($0, $1, 0);
return;
}
function __ZNSt3__212_GLOBAL__N_19incrementIlEET_RS2_($0) {
$0 = $0 | 0;
HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1;
return;
}
function __ZN10XMLWrapper10SetHandlerEPFvPvP7XMLCellE($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
HEAP32[$0 + 12 >> 2] = $1;
return;
}
function _llvm_bswap_i32(x) {
x = x | 0;
return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0;
}
function __Z5eputsPKc($0) {
$0 = $0 | 0;
var $1 = 0;
$1 = HEAP32[16082] | 0;
if (!$1) return;
_fputs($0, $1) | 0;
return;
}
function _mbsinit($0) {
$0 = $0 | 0;
var $4 = 0;
if (!$0) $4 = 1; else $4 = (HEAP32[$0 >> 2] | 0) == 0 & 1;
return $4 | 0;
}
function __ZN18FingerPlayMovement15offset1FinalPosERK6Vectorb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
return;
}
function dynCall_fi(index, a1) {
index = index | 0;
a1 = a1 | 0;
return Math_fround(FUNCTION_TABLE_fi[index & 3](a1 | 0));
}
function b9(p0, p1, p2, p3, p4) {
p0 = p0 | 0;
p1 = p1 | 0;
p2 = p2 | 0;
p3 = p3 | 0;
p4 = p4 | 0;
abort(9);
return 0;
}
function b23(p0, p1, p2, p3, p4) {
p0 = p0 | 0;
p1 = p1 | 0;
p2 = Math_fround(p2);
p3 = p3 | 0;
p4 = p4 | 0;
abort(23);
}
function b14(p0, p1, p2, p3) {
p0 = p0 | 0;
p1 = Math_fround(p1);
p2 = Math_fround(p2);
p3 = Math_fround(p3);
abort(14);
}
function ___cxa_throw__wrapper(p0, p1, p2) {
p0 = p0 | 0;
p1 = p1 | 0;
p2 = p2 | 0;
___cxa_throw(p0 | 0, p1 | 0, p2 | 0);
}
function __ZNSt3__217iostream_categoryEv() {
if (!(HEAP8[64320] | 0)) if (___cxa_guard_acquire(64320) | 0) {}
return 8048;
}
function __ZN10Direction3C2EPKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZN10Direction313setFromStringEPKc($0, $1);
return;
}
function __ZN10Direction2C2EPKc($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
__ZN10Direction213setFromStringEPKc($0, $1);
return;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($0) {
$0 = $0 | 0;
return $0 + 12 | 0;
}
function __ZNSt3__211char_traitsIcE11eq_int_typeEii($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return ($0 | 0) == ($1 | 0) | 0;
}
function __ZNKSt13runtime_error4whatEv($0) {
$0 = $0 | 0;
return __ZNKSt3__218__libcpp_refstring5c_strEv($0 + 4 | 0) | 0;
}
function __ZN18FingerPlayMovement12set1FinalPosERK6Vectorb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
return;
}
function b8(p0, p1, p2, p3, p4) {
p0 = p0 | 0;
p1 = p1 | 0;
p2 = p2 | 0;
p3 = p3 | 0;
p4 = +p4;
abort(8);
return 0;
}
function _vsprintf($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
return _vsnprintf($0, 2147483647, $1, $2) | 0;
}
function __ZN7SSFrame12SetTimestampEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 28 >> 2] = $1;
return;
}
function __ZNSt3__28ios_base7failureD0Ev($0) {
$0 = $0 | 0;
__ZNSt3__28ios_base7failureD2Ev($0);
__ZdlPv($0);
return;
}
function __ZNKSt11logic_error4whatEv($0) {
$0 = $0 | 0;
return __ZNKSt3__218__libcpp_refstring5c_strEv($0 + 4 | 0) | 0;
}
function __ZN7SSFrame11SetDurationEf($0, $1) {
$0 = $0 | 0;
$1 = Math_fround($1);
HEAPF32[$0 + 32 >> 2] = $1;
return;
}
function __ZN13WristMovement15offset1FinalPosERK6Vectorb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
return;
}
function __ZN13BasicMovement22setOwnMotionAttributesERK16MotionAttributes($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return;
}
function __ZN6KeyOpsIiE12hashFunctionEii($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return ($0 >>> 0) % ($1 >>> 0) | 0 | 0;
}
function _strncpy($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
___stpncpy($0, $1, $2) | 0;
return $0 | 0;
}
function _error($0, $1, $2, $3, $4) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
$3 = $3 | 0;
$4 = $4 | 0;
return 0;
}
function __ZN23FingerBaseJointRotation16setPreInvComposeERK10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return;
}
function __ZN13WristMovement12set1FinalPosERK6Vectorb($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
return;
}
function __ZN11SeqMovement22setOwnMotionAttributesERK16MotionAttributes($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return;
}
function __ZN11ParMovement22setOwnMotionAttributesERK16MotionAttributes($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return;
}
function dynCall_ii(index, a1) {
index = index | 0;
a1 = a1 | 0;
return FUNCTION_TABLE_ii[index & 63](a1 | 0) | 0;
}
function __ZN10NoMovement22setOwnMotionAttributesERK16MotionAttributes($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return;
}
function b27(p0, p1, p2, p3, p4) {
p0 = p0 | 0;
p1 = p1 | 0;
p2 = p2 | 0;
p3 = p3 | 0;
p4 = p4 | 0;
abort(27);
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_3476($0) {
$0 = $0 | 0;
return $0 + -12 | 0;
}
function __ZN6KeyOpsIPKcE5eqkeyES1_S1_($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return (_strcmp($0, $1) | 0) == 0 | 0;
}
function __ZN19SHMScalarController14get_perceptionEv($0) {
$0 = $0 | 0;
return Math_fround(HEAPF32[$0 + 80 >> 2]);
}
function __ZN10XMLWrapper11SetUserDataEPv($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
HEAP32[$0 + 16 >> 2] = $1;
return;
}
function __ZSt15get_new_handlerv() {
var $0 = 0;
$0 = HEAP32[18038] | 0;
HEAP32[18038] = $0 + 0;
return $0 | 0;
}
function __ZNSt3__212system_errorD0Ev($0) {
$0 = $0 | 0;
__ZNSt3__212system_errorD2Ev($0);
__ZdlPv($0);
return;
}
function __ZN23FingerBaseJointRotation13setComposeInvERK10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return;
}
function __ZN19SHMScalarController13get_referenceEv($0) {
$0 = $0 | 0;
return Math_fround(HEAPF32[$0 + 76 >> 2]);
}
function __ZN18HingeJointRotation7setZeroEv($0) {
$0 = $0 | 0;
HEAPF32[$0 + 20 >> 2] = Math_fround(0.0);
return;
}
function _tolower($0) {
$0 = $0 | 0;
var $2 = 0;
$2 = (_isupper($0) | 0) == 0;
return ($2 ? $0 : $0 | 32) | 0;
}
function __ZN19TurretJointRotation16setPreInvComposeERK10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return;
}
function _do_read($0, $1, $2) {
$0 = $0 | 0;
$1 = $1 | 0;
$2 = $2 | 0;
return ___string_read($0, $1, $2) | 0;
}
function __ZN23FingerBaseJointRotation11setFromQuatERK10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return;
}
function __ZN23FingerBaseJointRotation10setComposeERK10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return;
}
function b2(p0, p1, p2) {
p0 = p0 | 0;
p1 = p1 | 0;
p2 = Math_fround(p2);
abort(2);
return Math_fround(0);
}
function __ZSt13get_terminatev() {
var $0 = 0;
$0 = HEAP32[2018] | 0;
HEAP32[2018] = $0 + 0;
return $0 | 0;
}
function __ZN19TurretJointRotation13setComposeInvERK10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return;
}
function _InitVersionInfo() {
__Z14SetVersionInfoPKcS0_S0_S0_S0_(57054, 57062, 57097, 57066, 57083);
return;
}
function __ZNSt13runtime_errorD0Ev($0) {
$0 = $0 | 0;
__ZNSt13runtime_errorD2Ev($0);
__ZdlPv($0);
return;
}
function __ZN19TurretJointRotation11setFromQuatERK10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return;
}
function __ZN19TurretJointRotation10setComposeERK10Quaternion($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return;
}
function dynCall_vi(index, a1) {
index = index | 0;
a1 = a1 | 0;
FUNCTION_TABLE_vi[index & 255](a1 | 0);
}
function b7(p0, p1, p2, p3) {
p0 = p0 | 0;
p1 = p1 | 0;
p2 = p2 | 0;
p3 = p3 | 0;
abort(7);
return 0;
}
function b25(p0, p1, p2, p3) {
p0 = p0 | 0;
p1 = p1 | 0;
p2 = p2 | 0;
p3 = Math_fround(p3);
abort(25);
}
function b22(p0, p1, p2, p3) {
p0 = p0 | 0;
p1 = p1 | 0;
p2 = Math_fround(p2);
p3 = p3 | 0;
abort(22);
}
function b17(p0, p1, p2, p3) {
p0 = p0 | 0;
p1 = Math_fround(p1);
p2 = p2 | 0;
p3 = p3 | 0;
abort(17);
}
function _pthread_cond_broadcast__wrapper(p0) {
p0 = p0 | 0;
return _pthread_cond_broadcast(p0 | 0) | 0;
}
function ___clang_call_terminate($0) {
$0 = $0 | 0;
___cxa_begin_catch($0 | 0) | 0;
__ZSt9terminatev();
}
function __ZNSt12length_errorD0Ev($0) {
$0 = $0 | 0;
__ZNSt11logic_errorD2Ev($0);
__ZdlPv($0);
return;
}
function __ZNSt11logic_errorD0Ev($0) {
$0 = $0 | 0;
__ZNSt11logic_errorD2Ev($0);
__ZdlPv($0);
return;
}
function __ZNSt3__28ios_base7failureD2Ev($0) {
$0 = $0 | 0;
__ZNSt3__212system_errorD2Ev($0);
return;
}
function __ZN6KeyOpsIiE5eqkeyEii($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return ($0 | 0) == ($1 | 0) | 0;
}
function __ZNK9Handshape7definedEv($0) {
$0 = $0 | 0;
return __ZNK14SiGMLHandshape7definedEv($0) | 0;
}
function _pthread_mutex_unlock__wrapper(p0) {
p0 = p0 | 0;
return _pthread_mutex_unlock(p0 | 0) | 0;
}
function __ZN17TargettedMovement11setBodyPartE8Location($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return;
}
function __ZN16DirectedMovement11setBodyPartE8Location($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return;
}
function __ZN16CircularMovement11setBodyPartE8Location($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return;
}
function __Z9isNewlinec($0) {
$0 = $0 | 0;
return $0 << 24 >> 24 == 10 | $0 << 24 >> 24 == 13 | 0;
}
function __Z15ResetSiGMLFlagsv() {
HEAP8[73352] = 0;
HEAP8[73353] = 0;
HEAP8[73354] = 0;
return;
}
function __ZNSt9bad_allocD0Ev($0) {
$0 = $0 | 0;
__ZNSt9bad_allocD2Ev($0);
__ZdlPv($0);
return;
}
function __ZN14RepeatMovement11setBodyPartE8Location($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return;
}
function b26(p0, p1, p2, p3) {
p0 = p0 | 0;
p1 = p1 | 0;
p2 = p2 | 0;
p3 = p3 | 0;
abort(26);
}
function _pthread_mutex_lock__wrapper(p0) {
p0 = p0 | 0;
return _pthread_mutex_lock(p0 | 0) | 0;
}
function __ZNSt3__212system_errorD2Ev($0) {
$0 = $0 | 0;
__ZNSt13runtime_errorD2Ev($0);
return;
}
function __ZN13SplitMovement11setBodyPartE8Location($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return;
}
function __ZN13BasicMovement11setBodyPartE8Location($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return;
}
function _isspace($0) {
$0 = $0 | 0;
return (($0 | 0) == 32 | ($0 + -9 | 0) >>> 0 < 5) & 1 | 0;
}
function __ZNSt8bad_castD0Ev($0) {
$0 = $0 | 0;
__ZNSt8bad_castD2Ev($0);
__ZdlPv($0);
return;
}
function __ZNKSt3__218__libcpp_refstring5c_strEv($0) {
$0 = $0 | 0;
return HEAP32[$0 >> 2] | 0;
}
function __ZN11SeqMovement11setBodyPartE8Location($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return;
}
function __ZN11ParMovement11setBodyPartE8Location($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return;
}
function _strcpy($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
___stpcpy($0, $1) | 0;
return $0 | 0;
}
function ___lctrans($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return ___lctrans_impl($0, $1) | 0;
}
function __ZN19OneHConcretePostureD2Ev($0) {
$0 = $0 | 0;
HEAP32[$0 + 56 >> 2] = 0;
return;
}
function __ZN10XMLWrapper11GetUserDataEv($0) {
$0 = $0 | 0;
return HEAP32[$0 + 16 >> 2] | 0;
}
function __ZN20QuaternionControllerD2Ev($0) {
$0 = $0 | 0;
HEAP32[$0 >> 2] = 976;
return;
}
function __ZNSt3__211char_traitsIcE6lengthEPKc($0) {
$0 = $0 | 0;
return _strlen($0) | 0;
}
function dynCall_i(index) {
index = index | 0;
return FUNCTION_TABLE_i[index & 7]() | 0;
}
function __ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0) {
$0 = $0 | 0;
return 1;
}
function b6(p0, p1, p2) {
p0 = p0 | 0;
p1 = p1 | 0;
p2 = p2 | 0;
abort(6);
return 0;
}
function b19(p0, p1, p2) {
p0 = p0 | 0;
p1 = p1 | 0;
p2 = Math_fround(p2);
abort(19);
}
function b15(p0, p1, p2) {
p0 = p0 | 0;
p1 = Math_fround(p1);
p2 = p2 | 0;
abort(15);
}
function __ZNSt3__219__iostream_categoryD0Ev($0) {
$0 = $0 | 0;
__ZdlPv($0);
return;
}
function __ZN7GetoptsC2Ev($0) {
$0 = $0 | 0;
__ZN7Getopts10initialiseEv($0);
return;
}
function __ZN23FingerBaseJointRotationD0Ev($0) {
$0 = $0 | 0;
__ZdlPv($0);
return;
}
function b1(p0, p1) {
p0 = p0 | 0;
p1 = p1 | 0;
abort(1);
return Math_fround(0);
}
function __ZN22ThumbBaseJointRotationD0Ev($0) {
$0 = $0 | 0;
__ZdlPv($0);
return;
}
function __ZNSt9bad_allocC2Ev($0) {
$0 = $0 | 0;
HEAP32[$0 >> 2] = 8164;
return;
}
function __ZNKSt3__219__iostream_category4nameEv($0) {
$0 = $0 | 0;
return 63278;
}
function _copysignl($0, $1) {
$0 = +$0;
$1 = +$1;
return +(+_copysign($0, $1));
}
function __ZNSt8bad_castC2Ev($0) {
$0 = $0 | 0;
HEAP32[$0 >> 2] = 8244;
return;
}
function __ZN20QuaternionControllerD0Ev($0) {
$0 = $0 | 0;
__ZdlPv($0);
return;
}
function _scalbnl($0, $1) {
$0 = +$0;
$1 = $1 | 0;
return +(+_scalbn($0, $1));
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
$0 = $0 | 0;
return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
$0 = $0 | 0;
return;
}
function __ZN7XMLCellD2Ev($0) {
$0 = $0 | 0;
__ZN7XMLCell5clearEv($0);
return;
}
function __ZN19TurretJointRotationD0Ev($0) {
$0 = $0 | 0;
__ZdlPv($0);
return;
}
function __ZN19SHMScalarControllerD0Ev($0) {
$0 = $0 | 0;
__ZdlPv($0);
return;
}
function _XML_GetErrorCode($0) {
$0 = $0 | 0;
return HEAP32[$0 + 268 >> 2] | 0;
}
function dynCall_v(index) {
index = index | 0;
FUNCTION_TABLE_v[index & 31]();
}
function b24(p0, p1, p2) {
p0 = p0 | 0;
p1 = p1 | 0;
p2 = p2 | 0;
abort(24);
}
function __ZN18HingeJointRotationD0Ev($0) {
$0 = $0 | 0;
__ZdlPv($0);
return;
}
function __ZN18FingerPlayMovementD0Ev($0) {
$0 = $0 | 0;
__ZdlPv($0);
return;
}
function _frexpl($0, $1) {
$0 = +$0;
$1 = $1 | 0;
return +(+_frexp($0, $1));
}
function __ZN17VectorController2D0Ev($0) {
$0 = $0 | 0;
__ZdlPv($0);
return;
}
function __ZN17QuatJointRotationD0Ev($0) {
$0 = $0 | 0;
__ZdlPv($0);
return;
}
function _XmlPrologStateInit($0) {
$0 = $0 | 0;
HEAP32[$0 >> 2] = 1;
return;
}
function __ZN16DirectedMovementD0Ev($0) {
$0 = $0 | 0;
__ZdlPv($0);
return;
}
function __ZN16CircularMovementD0Ev($0) {
$0 = $0 | 0;
__ZdlPv($0);
return;
}
function __ZN16AtomicTimedMorphD0Ev($0) {
$0 = $0 | 0;
__ZdlPv($0);
return;
}
function __ZN13BasicMovement16FinaliseGesturesEv($0) {
$0 = $0 | 0;
return;
}
function _isupper($0) {
$0 = $0 | 0;
return ($0 + -65 | 0) >>> 0 < 26 | 0;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
$0 = $0 | 0;
return;
}
function __ZN13WristMovementD0Ev($0) {
$0 = $0 | 0;
__ZdlPv($0);
return;
}
function _fmodl($0, $1) {
$0 = +$0;
$1 = +$1;
return +(+_fmod($0, $1));
}
function __ZN10NoMovementD0Ev($0) {
$0 = $0 | 0;
__ZdlPv($0);
return;
}
function b5(p0, p1) {
p0 = p0 | 0;
p1 = p1 | 0;
abort(5);
return 0;
}
function b13(p0, p1) {
p0 = p0 | 0;
p1 = Math_fround(p1);
abort(13);
}
function __Z18SHOW_UNIMPLEMENTEDP8_IO_FILE($0) {
$0 = $0 | 0;
return;
}
function __ZN16CompoundMovementD0Ev($0) {
$0 = $0 | 0;
_llvm_trap();
}
function setTempRet0(value) {
value = value | 0;
tempRet0 = value;
}
function __ZNSt3__214error_categoryD2Ev($0) {
$0 = $0 | 0;
return;
}
function __ZNKSt9bad_alloc4whatEv($0) {
$0 = $0 | 0;
return 64097;
}
function __ZN7SSPRSetD0Ev($0) {
$0 = $0 | 0;
__ZdlPv($0);
return;
}
function __ZN7SSMorphD0Ev($0) {
$0 = $0 | 0;
__ZdlPv($0);
return;
}
function __ZNKSt8bad_cast4whatEv($0) {
$0 = $0 | 0;
return 64176;
}
function __ZN19SHMScalarControllerD2Ev($0) {
$0 = $0 | 0;
return;
}
function __ZN13BasicMovementD0Ev($0) {
$0 = $0 | 0;
_llvm_trap();
}
function b0(p0) {
p0 = p0 | 0;
abort(0);
return Math_fround(0);
}
function _isNever($0, $1) {
$0 = $0 | 0;
$1 = $1 | 0;
return 0;
}
function __ZN18AbstractTimedMorphD2Ev($0) {
$0 = $0 | 0;
return;
}
function ___cxa_pure_virtual__wrapper() {
___cxa_pure_virtual();
}
function __ZN17VectorController2D2Ev($0) {
$0 = $0 | 0;
return;
}
function __ZN10XMLWrapperD0Ev($0) {
$0 = $0 | 0;
_llvm_trap();
}
function b18(p0, p1) {
p0 = p0 | 0;
p1 = p1 | 0;
abort(18);
}
function __Z10checkSiGMLP7XMLCell($0) {
$0 = $0 | 0;
return;
}
function stackRestore(top) {
top = top | 0;
STACKTOP = top;
}
function ___pthread_self_608() {
return _pthread_self() | 0;
}
function ___pthread_self_426() {
return _pthread_self() | 0;
}
function ___pthread_self_417() {
return _pthread_self() | 0;
}
function ___pthread_self_103() {
return _pthread_self() | 0;
}
function __ZN13JointRotationD2Ev($0) {
$0 = $0 | 0;
return;
}
function __Z13UNIMPLEMENTEDPKc($0) {
$0 = $0 | 0;
return 1;
}
function _pthread_cond_broadcast(x) {
x = x | 0;
return 0;
}
function _exit__wrapper(p0) {
p0 = p0 | 0;
_exit(p0 | 0);
}
function ___cxa_end_catch__wrapper() {
___cxa_end_catch();
}
function __Znaj($0) {
$0 = $0 | 0;
return __Znwj($0) | 0;
}
function __ZdaPv($0) {
$0 = $0 | 0;
__ZdlPv($0);
return;
}
function __Z13VersionStringv() {
return HEAP32[16090] | 0;
}
function _pthread_mutex_unlock(x) {
x = x | 0;
return 0;
}
function ___cxa_guard_release($0) {
$0 = $0 | 0;
return;
}
function __ZNSt9type_infoD2Ev($0) {
$0 = $0 | 0;
return;
}
function __ZNSt9exceptionD2Ev($0) {
$0 = $0 | 0;
return;
}
function __ZNSt9bad_allocD2Ev($0) {
$0 = $0 | 0;
return;
}
function __ZN10ControllerD2Ev($0) {
$0 = $0 | 0;
return;
}
function __Z11UnimplSiGMLv() {
HEAP8[73354] = 1;
return;
}
function __Z11FailedSiGMLv() {
HEAP8[73352] = 1;
return;
}
function __ZdlPv($0) {
$0 = $0 | 0;
_free($0);
return;
}
function __ZNSt8bad_castD2Ev($0) {
$0 = $0 | 0;
return;
}
function __ZNSt3__211char_traitsIcE3eofEv() {
return -1;
}
function __Z11VersionDatev() {
return HEAP32[16087] | 0;
}
function _pthread_mutex_lock(x) {
x = x | 0;
return 0;
}
function ___ofl_lock() {
___lock(72036);
return 72044;
}
function _dummy_565($0) {
$0 = $0 | 0;
return $0 | 0;
}
function ___cxa_rethrow__wrapper() {
___cxa_rethrow();
}
function ___ofl_unlock() {
___unlock(72036);
return;
}
function __ZN7SSPRSetD2Ev($0) {
$0 = $0 | 0;
return;
}
function __ZN7SSMorphD2Ev($0) {
$0 = $0 | 0;
return;
}
function __Z8BadSiGMLv() {
HEAP8[73353] = 1;
return;
}
function _XmlGetUtf8InternalEncoding() {
return 5276;
}
function b4(p0) {
p0 = p0 | 0;
abort(4);
return 0;
}
function _XmlSizeOfUnknownEncoding() {
return 1908;
}
function ___unlockfile($0) {
$0 = $0 | 0;
return;
}
function ___lockfile($0) {
$0 = $0 | 0;
return 0;
}
function _clock__wrapper() {
return _clock() | 0;
}
function getTempRet0() {
return tempRet0 | 0;
}
function ___errno_location() {
return 72028;
}
function stackSave() {
return STACKTOP | 0;
}
function b12(p0) {
p0 = p0 | 0;
abort(12);
}
function _animgenTerminate() {
return 1;
}
function _pthread_self() {
return 7708;
}
function b3() {
abort(3);
return 0;
}
function b11() {
abort(11);
}
// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_fi = [b0,__ZN19SHMScalarController13get_referenceEv,__ZN19SHMScalarController14get_perceptionEv,__Z9totalTimePK13DynamicArrayPI7GestureE];
var FUNCTION_TABLE_fii = [b1,__ZNK11HanimAvatar15siteStdDistanceERK10SiteIDPair];
var FUNCTION_TABLE_fiif = [b2,__ZN7XMLCell11attrib_REALEPKcf];
var FUNCTION_TABLE_i = [b3,__Z7LogTimev,__Z13VersionStringv,__Z11VersionDatev,_clock__wrapper,___cxa_get_globals_fast,b3,b3];
var FUNCTION_TABLE_ii = [b4,__ZNK16AtomicTimedMorph7newCopyEv,__ZNK16DirectedMovement12CopyMovementEv,__ZNK16CircularMovement12CopyMovementEv,__ZNK10NoMovement12CopyMovementEv,__ZNK13WristMovement12CopyMovementEv,__ZNK18FingerPlayMovement12CopyMovementEv,__ZNK14RepeatMovement12CopyMovementEv,__ZNK17TargettedMovement12CopyMovementEv,__ZNK11ParMovement12CopyMovementEv,__ZNK11SeqMovement12CopyMovementEv,__ZNK13SplitMovement12CopyMovementEv,__ZNK13ParTimedMorph7newCopyEv,__ZNK13SeqTimedMorph7newCopyEv,___stdio_close,__ZNKSt3__219__iostream_category4nameEv,__ZNKSt13runtime_error4whatEv,__ZNKSt9bad_alloc4whatEv,__ZNKSt11logic_error4whatEv,__ZNKSt8bad_cast4whatEv,__Znwj,__Z10copyStringPKc,__ZN5Joint16NewJointRotationEv,__ZNK28InvertibleDynamicStringArray6lengthEv,__Znaj,__ZN5Joint24getGlobalBoneTranslationEv,__ZNK7Gesture11CopyGestureEv,__ZN11TokenStream14TokeniseStringEPKc,__ZN11TokenStream9nextTokenEv
,__ZL8ANMtoATM15AtomicNonmanual,__ZN5SiGML16convertboolfalseEPKc,__Z10MakeDigitsPKc,_XML_ParserCreate,__Z14ReadXMLStringsPK13DynamicArrayPIKcE,__ZN20HanimAnimationRecord10openOutputEv,_malloc,_pthread_mutex_unlock__wrapper,_pthread_mutex_lock__wrapper,_pthread_cond_broadcast__wrapper,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_iii = [b5,__ZN12ExpatWrapper9ParseFileEP8_IO_FILE,__ZN12ExpatWrapper11ParseStringEPKc,_normal_nameLength,_normal_skipS,_normal_charRefNumber,_utf8_isName2,_utf8_isName3,_isNever,_utf8_isNmstrt2,_utf8_isNmstrt3,_utf8_isInvalid2,_utf8_isInvalid3,_utf8_isInvalid4,_big2_nameLength,_big2_skipS,_big2_charRefNumber,_little2_nameLength,_little2_skipS,_little2_charRefNumber,__ZNKSt3__26locale9use_facetERNS0_2idE,__ZN7XMLCell7elementEPKc,__ZN6KeyOpsIPKcE12hashFunctionES1_i,__ZN6KeyOpsIPKcE5eqkeyES1_S1_,__ZNK28InvertibleDynamicStringArray14valueFromIndexEi,__ZN6KeyOpsIK6SiteIDE12hashFunctionES0_i,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc,__ZN6KeyOpsIiE12hashFunctionEii
,__ZN6KeyOpsIiE5eqkeyEii,__ZNK19TwoHConcretePosture14totallyDefinedE12SET_OF_HANDS,__ZNK21InvertibleStringArray14valueFromIndexEi,__ZN5SiGML17convertAttributeHEPK21InvertibleStringArrayPKc,__ZN7XMLCell13attrib_stringEPKc,__ZL16AGIFrameCallbackPvP7SSFrame,__ZN7Getopts11processArgsEPPKc,__ZN7Getopts10FlagOptionEPKc,__ZN13GestureParser13readXMLStringEPKcR10ParserData,_realloc,_unknown_isName,_unknown_isNmstrt,_unknown_isInvalid,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_iiii = [b6,__ZNK15TorsoDecollider12ForceOutsideERK6VectorRS0_,__ZNK15TorsoDecollider18ForceOutsideOffsetERK6VectorRS0_,_normal_sameName,_normal_predefinedEntityName,_big2_sameName,_big2_predefinedEntityName,_little2_sameName,_little2_predefinedEntityName,___stdio_write,___stdio_seek,___stdout_write,_sn_write,__ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__214error_category10equivalentERKNS_10error_codeEi,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZN11HanimAvatar13duplicateSiteE6SiteIDS0_,__ZN13GestureParser11readXMLFileEPKcR10ParserDataPP7Gesture,__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j,__Z11checkPosNumPKcPcPf,__ZL17AGIStatusCallbackPv13AnimgenStatusi,__ZN21InvertibleStringArray19NewInvertibleArrayAEssz,__ZN7Getopts11OptionValueEPKcS1_,__ZN13GestureParser10readXMLXMLEP7XMLCellR10ParserDataPP7Gesture,___stdio_read,_do_read,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj,b6,b6
,b6,b6,b6];
var FUNCTION_TABLE_iiiii = [b7,_normal_prologTok,_normal_contentTok,_normal_cdataSectionTok,_normal_attributeValueTok,_normal_entityValueTok,_normal_nameMatchesAscii,_normal_getAtts,_normal_isPublicId,_big2_prologTok,_big2_contentTok,_big2_cdataSectionTok,_big2_attributeValueTok,_big2_entityValueTok,_big2_nameMatchesAscii,_big2_getAtts,_big2_isPublicId,_little2_prologTok,_little2_contentTok,_little2_cdataSectionTok,_little2_attributeValueTok,_little2_entityValueTok,_little2_nameMatchesAscii,_little2_getAtts,_little2_isPublicId,__ZN7XMLCell15attrib_REALVEC3ER6VectorPKcRKS0_,__ZN5SiGML15handOrientationER10Quaternionb10Direction310Direction2,_prologInitProcessor,_prologProcessor
,_contentProcessor,_internalEntityProcessor,_cdataSectionProcessor,_epilogProcessor,_externalEntityContentProcessor,_errorProcessor,_initScanProlog,_initScanContent,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_iiiiid = [b8];
var FUNCTION_TABLE_iiiiii = [b9,_prolog0,_prolog1,_doctype0,_error,_doctype1,_prolog2,_internalSubset,_doctype3,_doctype2,_entity0,_attlist0,_element0,_notation0,_doctype5,_doctype4,_entity2,_entity1,_attlist1,_element1,_notation1,_notation3,_notation2,_notation4,_declClose,_element2,_element7,_element3,_element6
,_element4,_element5,_attlist2,_attlist3,_attlist8,_attlist5,_attlist6,_attlist4,_attlist9,_attlist7,_entity7,_entity4,_entity3,_entity5,_entity6,_entity9,_entity8,_entity10,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_iiiiiii = [b10,__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_];
var FUNCTION_TABLE_v = [b11,___cxa_pure_virtual__wrapper,__ZL25default_terminate_handlerv,___cxa_end_catch__wrapper,__Z11FailedSiGMLv,_InitVersionInfo,__Z20CreateMovementTablesv,__Z17CreateSiGMLTablesv,__Z19CreateSiGMLHandlersv,__Z21CreateTrajectoryTablev,__Z21CreateControllerTablev,__Z17CreateNameIndexesv,__Z25InitialiseRepetitionSpecsv,__ZN10Trajectory22PrecomputeTrajectoriesEv,_ZeroPostMortem,___cxa_rethrow__wrapper,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11];
var FUNCTION_TABLE_vi = [b12,__ZN7SSFrameD2Ev,__ZN7SSFrameD0Ev,__ZN7SSMorphD2Ev,__ZN7SSMorphD0Ev,__ZN7SSPRSetD2Ev,__ZN7SSPRSetD0Ev,__ZN15TorsoDecolliderD2Ev,__ZN15TorsoDecolliderD0Ev,__ZN19SHMScalarControllerD2Ev,__ZN19SHMScalarControllerD0Ev,__ZN19SHMScalarController5resetEv,__ZN17VectorController2D2Ev,__ZN17VectorController2D0Ev,__ZN17VectorController25resetEv,__ZN20QuaternionControllerD2Ev,__ZN20QuaternionControllerD0Ev,__ZN20QuaternionController5resetEv,__ZN13JointRotationD2Ev,__ZN18HingeJointRotationD0Ev,__ZN18HingeJointRotation7setZeroEv,__ZN19TurretJointRotationD0Ev,__ZN19TurretJointRotation7setZeroEv,__ZN23FingerBaseJointRotationD0Ev,__ZN23FingerBaseJointRotation7setZeroEv,__ZN22ThumbBaseJointRotationD0Ev,__ZN22ThumbBaseJointRotation7setZeroEv,__ZN17QuatJointRotationD0Ev,__ZN17QuatJointRotation7setZeroEv
,__ZN18AbstractTimedMorphD2Ev,__ZN16AtomicTimedMorphD0Ev,__ZN13BasicMovementD2Ev,__ZN13BasicMovementD0Ev,__ZN13BasicMovement16FinaliseGesturesEv,__ZN13BasicMovement19UseExplicitDurationEv,__ZN17NonmanualMovementD2Ev,__ZN17NonmanualMovementD0Ev,__ZN16DirectedMovementD0Ev,__ZN16CircularMovementD2Ev,__ZN16CircularMovementD0Ev,__ZN10NoMovementD0Ev,__ZN13WristMovementD0Ev,__ZN18FingerPlayMovementD0Ev,__ZN14RepeatMovementD2Ev,__ZN14RepeatMovementD0Ev,__ZN14RepeatMovement16FinaliseGesturesEv,__ZN17TargettedMovementD2Ev,__ZN17TargettedMovementD0Ev,__ZN17TargettedMovement16FinaliseGesturesEv,__ZN16CompoundMovementD2Ev,__ZN11ParMovementD0Ev,__ZN11ParMovement16FinaliseGesturesEv,__ZN16CompoundMovementD0Ev,__ZN11SeqMovementD2Ev,__ZN11SeqMovementD0Ev,__ZN11SeqMovement16FinaliseGesturesEv,__ZN13SplitMovementD2Ev,__ZN13SplitMovementD0Ev,__ZN13SplitMovement16FinaliseGesturesEv
,__ZN13ParTimedMorphD2Ev,__ZN13ParTimedMorphD0Ev,__ZN13SeqTimedMorphD2Ev,__ZN13SeqTimedMorphD0Ev,__ZN10XMLWrapperD2Ev,__ZN10XMLWrapperD0Ev,__ZN12ExpatWrapperD2Ev,__ZN12ExpatWrapperD0Ev,__ZNSt3__214error_categoryD2Ev,__ZNSt3__219__iostream_categoryD0Ev,__ZNSt3__28ios_base7failureD2Ev,__ZNSt3__28ios_base7failureD0Ev,__ZNSt3__212system_errorD2Ev,__ZNSt3__212system_errorD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN7SSFrame9MakeEmptyEv
,__ZN7SSPRSetC2Ev,__ZNSt3__26localeD2Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev,__ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv,__ZN7HashAnyIPKciED2Ev,__ZN9HashChainIPKciED2Ev,__ZN13DynamicStringD2Ev,__ZN10OptionSpecD2Ev,__ZN11TokenStreamD2Ev,__ZN6VectorC2Ev,__ZN20QuaternionControllerC2Ev,__ZN19SHMScalarControllerC2Ev,__ZN19OneHConcretePostureD2Ev,__ZN18HandJointRotationsD2Ev,__ZN14OneArmAnimatorD2Ev,__Z15NonZeroMorphSetPf,__ZN14TwoArmAnimatorD2Ev,__ZN12FaceAnimatorD2Ev,__ZN7SSFrameC2Ev,__ZN6Vector7setZeroEv,__ZN8IFS_specD2Ev,__ZN7XMLCellD2Ev,__ZN28InvertibleDynamicStringArrayD2Ev,__ZN7HashAnyIPKcS1_ED2Ev,__ZN7HashAnyIPKc6SiteIDED2Ev,__ZN7HashAnyIKPKc10AvatarTypeED2Ev,__ZN9HashChainIPKcS1_ED2Ev,__ZN9HashChainIPKc6SiteIDED2Ev,__ZN9HashChainIKPKc10AvatarTypeED2Ev,__ZN9HashChainIK6SiteIDP4SiteED2Ev
,_exit__wrapper,__ZN5Joint32computeGlobalFromLocalTransformsEv,__ZN4SiteD2Ev,__Z5eputcc,__ZN11HanimAvatar16CreateJointIndexEv,__ZN11HanimAvatar19createARPFacePointsEv,__ZN11HanimAvatar18createFacePolygonsEv,__ZN17AvatarConstraintsC2Ev,__ZN7HashAnyIK6SiteIDP4SiteED2Ev,__ZN5JointD2Ev,__ZN7SegmentD2Ev,__Z5eputsPKc,__ZN11OneHGestureD2Ev,__ZN19TwoHAbstractPostureD2Ev,__ZN9HandshapeD2Ev,__ZN9Transform7setZeroEv,__ZN9TransformC2Ev,__ZN9Transform10setInverseEv,__ZN7HashAnyI13SiGML_ElementPFvP7GestureP7XMLCellEED2Ev,__ZN7HashAnyI13SiGML_ElementPFvPvP7XMLCellEED2Ev,__ZN9HashChainI13SiGML_ElementPFvP7GestureP7XMLCellEED2Ev,__ZN9HashChainI13SiGML_ElementPFvPvP7XMLCellEED2Ev,__ZN25TwoHConcretePostureChangeC2Ev,__ZN7GestureD2Ev,__ZN7RepSpec10initialiseEv,__ZN21InvertibleStringArrayD2Ev,__ZN7HashAnyIPKcP18AbstractTimedMorphED2Ev,__ZN9HashChainIPKcP18AbstractTimedMorphED2Ev,__ZN7HashAnyIiiED2Ev,__ZN9HashChainIiiED2Ev
,__ZN7HashAnyIPKcPS_IS1_iEED2Ev,__ZN9HashChainIPKcP7HashAnyIS1_iEED2Ev,__ZN7XMLCell5clearEv,_XML_ParserFree,__ZN12ExpatWrapperC2Ev,__ZN7GetoptsC2Ev,__Z12setupOptionsP7Getopts,__Z20GetDefaultAvatarInfoP7XMLCell,__Z17GetTrajectoryInfoP7XMLCell,__Z20GetArmControllerInfoP7XMLCell,__Z26GetNonmanualDefsFromStringPKc,__ZN7ASDdataD2Ev,__ZN11HanimAvatar17normaliseSkeletonEv,__ZN11HanimAvatar21setJointArticulationsEv,__ZN11HanimAvatar20createSiGMLHeadSitesEv,__ZN11HanimAvatar21createSiGMLTorsoSitesEv,__ZN11HanimAvatar19createSiGMLArmSitesEv,__ZN11HanimAvatar12FakeFarSitesEv,__ZN11HanimAvatar18createBodySegmentsEv,__ZN11HanimAvatar18computeObjectSizesEv,__ZN20HanimAnimationRecordC2Ev,__ZN20HanimAnimationRecord14startAnimationEv,__ZN20HanimAnimationRecordD2Ev,__ZN7GetoptsD2Ev,__ZN7HashAnyIPKcP7GestureED2Ev,__ZN11HanimAvatarD2Ev,__ZN9HashChainIPKcP7GestureED2Ev,_free,__ZNSt3__26locale2id6__initEv,__ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv
,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12];
var FUNCTION_TABLE_vif = [b13,__ZN19SHMScalarController5resetEf,__ZN19SHMScalarController13set_referenceEf,__ZN19SHMScalarController14set_perceptionEf,__ZN19SHMScalarController7newTimeEf,__ZN19SHMScalarController8resetVarEf,__ZN19SHMScalarController8new_ref1Ef,__ZN19SHMScalarController8new_per1Ef,__ZN17VectorController25resetEf,__ZN17VectorController27newTimeEf,__ZN20QuaternionController5resetEf,__ZN20QuaternionController7newTimeEf,__ZN20QuaternionController8XnewTimeEf,__ZN18HingeJointRotation12setBendAngleEf,__ZN18HingeJointRotation12addBendAngleEf,__ZN18HingeJointRotation13setSplayAngleEf,__ZN18HingeJointRotation13addSplayAngleEf,__ZN18HingeJointRotation14setLongitAngleEf,__ZN19TurretJointRotation12setBendAngleEf,__ZN19TurretJointRotation12addBendAngleEf,__ZN19TurretJointRotation13setSplayAngleEf,__ZN19TurretJointRotation13addSplayAngleEf,__ZN19TurretJointRotation14setLongitAngleEf,__ZN23FingerBaseJointRotation12setBendAngleEf,__ZN23FingerBaseJointRotation12addBendAngleEf,__ZN23FingerBaseJointRotation13setSplayAngleEf,__ZN23FingerBaseJointRotation13addSplayAngleEf,__ZN23FingerBaseJointRotation14setLongitAngleEf,__ZN22ThumbBaseJointRotation12setBendAngleEf
,__ZN22ThumbBaseJointRotation12addBendAngleEf,__ZN22ThumbBaseJointRotation13setSplayAngleEf,__ZN22ThumbBaseJointRotation13addSplayAngleEf,__ZN22ThumbBaseJointRotation14setLongitAngleEf,__ZN17QuatJointRotation12setBendAngleEf,__ZN17QuatJointRotation12addBendAngleEf,__ZN17QuatJointRotation13setSplayAngleEf,__ZN17QuatJointRotation13addSplayAngleEf,__ZN17QuatJointRotation14setLongitAngleEf,__ZN16AtomicTimedMorph10CalcTimingEf,__ZN18AbstractTimedMorph11setDurationEf,__ZN16AtomicTimedMorph11scaleAmountEf,__ZN16AtomicTimedMorph13scaleDurationEf,__ZN16AtomicTimedMorph8setStartEf,__ZN16AtomicTimedMorph10shiftStartEf,__ZN13ParTimedMorph10CalcTimingEf,__ZN13ParTimedMorph11scaleAmountEf,__ZN13ParTimedMorph13scaleDurationEf,__ZN18AbstractTimedMorph8setStartEf,__ZN13ParTimedMorph10shiftStartEf,__ZN13SeqTimedMorph10CalcTimingEf,__ZN13SeqTimedMorph11scaleAmountEf,__ZN13SeqTimedMorph13scaleDurationEf,__ZN13SeqTimedMorph10shiftStartEf,__ZN10Controller8resetVarEf,__ZN10Controller8new_ref1Ef,__ZN10Controller6updateEf,b13,b13,b13
,b13,b13,b13,b13,b13];
var FUNCTION_TABLE_vifff = [b14,__ZN18AbstractTimedMorph7rescaleEfff,__ZN6VectorC2Efff,b14];
var FUNCTION_TABLE_vifi = [b15,__ZN13BasicMovement11setDurationEfb,__ZN14RepeatMovement11setDurationEfb,__ZN11ParMovement11setDurationEfb,__ZN11SeqMovement11setDurationEfb,__ZN13SplitMovement11setDurationEfb,b15,b15];
var FUNCTION_TABLE_vififfi = [b16,__ZL17calcLeadFractionsPff18PostureChangeFlags19PostureChangeTimingb];
var FUNCTION_TABLE_vifii = [b17,__ZNK16AtomicTimedMorph14fillMorphFrameEfPfb,__ZNK13ParTimedMorph14fillMorphFrameEfPfb,__ZNK13SeqTimedMorph14fillMorphFrameEfPfb];
var FUNCTION_TABLE_vii = [b18,__ZN19SHMScalarController13get_referenceERf,__ZN19SHMScalarController14get_perceptionERf,__ZN17VectorController213set_referenceE6Vector,__ZN17VectorController213get_referenceEv,__ZN17VectorController213get_referenceER6Vector,__ZN17VectorController214set_perceptionE6Vector,__ZN17VectorController214get_perceptionEv,__ZN17VectorController214get_perceptionER6Vector,__ZN20QuaternionController13set_referenceE10Quaternion,__ZN20QuaternionController13get_referenceEv,__ZN20QuaternionController13get_referenceER10Quaternion,__ZN20QuaternionController14set_perceptionE10Quaternion,__ZN20QuaternionController14get_perceptionEv,__ZN20QuaternionController14get_perceptionER10Quaternion,__ZNK18HingeJointRotation12toQuaternionER10Quaternion,__ZN18HingeJointRotation11setFromQuatERK10Quaternion,__ZN18HingeJointRotation10setComposeERK10Quaternion,__ZN18HingeJointRotation13setComposeInvERK10Quaternion,__ZN18HingeJointRotation16setPreInvComposeERK10Quaternion,__ZN18HingeJointRotation11setBendAxisERK6Vector,__ZN18HingeJointRotation12setSplayAxisERK6Vector,__ZN18HingeJointRotation13setLongitAxisERK6Vector,__ZN18HingeJointRotation7setFromERKS_,__ZNK19TurretJointRotation12toQuaternionER10Quaternion,__ZN19TurretJointRotation11setFromQuatERK10Quaternion,__ZN19TurretJointRotation10setComposeERK10Quaternion,__ZN19TurretJointRotation13setComposeInvERK10Quaternion,__ZN19TurretJointRotation16setPreInvComposeERK10Quaternion
,__ZN19TurretJointRotation11setBendAxisERK6Vector,__ZN19TurretJointRotation12setSplayAxisERK6Vector,__ZN19TurretJointRotation13setLongitAxisERK6Vector,__ZN19TurretJointRotation7setFromERKS_,__ZNK23FingerBaseJointRotation12toQuaternionER10Quaternion,__ZN23FingerBaseJointRotation11setFromQuatERK10Quaternion,__ZN23FingerBaseJointRotation10setComposeERK10Quaternion,__ZN23FingerBaseJointRotation13setComposeInvERK10Quaternion,__ZN23FingerBaseJointRotation16setPreInvComposeERK10Quaternion,__ZN23FingerBaseJointRotation11setBendAxisERK6Vector,__ZN23FingerBaseJointRotation12setSplayAxisERK6Vector,__ZN23FingerBaseJointRotation13setLongitAxisERK6Vector,__ZN23FingerBaseJointRotation7setFromERKS_,__ZNK22ThumbBaseJointRotation12toQuaternionER10Quaternion,__ZN22ThumbBaseJointRotation11setFromQuatERK10Quaternion,__ZN22ThumbBaseJointRotation10setComposeERK10Quaternion,__ZN22ThumbBaseJointRotation13setComposeInvERK10Quaternion,__ZN22ThumbBaseJointRotation16setPreInvComposeERK10Quaternion,__ZN22ThumbBaseJointRotation11setBendAxisERK6Vector,__ZN22ThumbBaseJointRotation12setSplayAxisERK6Vector,__ZN22ThumbBaseJointRotation13setLongitAxisERK6Vector,__ZN22ThumbBaseJointRotation7setFromERKS_,__ZNK17QuatJointRotation12toQuaternionER10Quaternion,__ZN17QuatJointRotation11setFromQuatERK10Quaternion,__ZN17QuatJointRotation10setComposeERK10Quaternion,__ZN17QuatJointRotation13setComposeInvERK10Quaternion,__ZN17QuatJointRotation16setPreInvComposeERK10Quaternion,__ZN17QuatJointRotation11setBendAxisERK6Vector,__ZN17QuatJointRotation12setSplayAxisERK6Vector,__ZN17QuatJointRotation13setLongitAxisERK6Vector
,__ZN17QuatJointRotation7setFromERKS_,__ZNK16AtomicTimedMorph5printEP8_IO_FILE,__ZN18AbstractTimedMorph7rescaleEP7XMLCell,__ZN13BasicMovement11setBodyPartE8Location,__ZN13BasicMovement22setOwnMotionAttributesERK16MotionAttributes,__ZN13BasicMovement17setInitialPostureERK19TwoHConcretePosture,__ZNK13BasicMovement5printEP8_IO_FILE,__ZNK13BasicMovement18printTopLevelSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE,__ZNK17NonmanualMovement5printEP8_IO_FILE,__ZNK17NonmanualMovement10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE,__ZN16DirectedMovement11setBodyPartE8Location,__ZN16DirectedMovement22setOwnMotionAttributesERK16MotionAttributes,__ZNK16DirectedMovement5printEP8_IO_FILE,__ZNK16DirectedMovement10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE,__ZN16CircularMovement11setBodyPartE8Location,__ZN16CircularMovement22setOwnMotionAttributesERK16MotionAttributes,__ZNK16CircularMovement5printEP8_IO_FILE,__ZNK16CircularMovement10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE,__ZN10NoMovement22setOwnMotionAttributesERK16MotionAttributes,__ZN10NoMovement17setInitialPostureERK19TwoHConcretePosture,__ZNK10NoMovement5printEP8_IO_FILE,__ZNK10NoMovement10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE,__ZN13WristMovement22setOwnMotionAttributesERK16MotionAttributes,__ZNK13WristMovement5printEP8_IO_FILE,__ZNK13WristMovement10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE,__ZN18FingerPlayMovement22setOwnMotionAttributesERK16MotionAttributes,__ZNK18FingerPlayMovement5printEP8_IO_FILE,__ZNK18FingerPlayMovement10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE,__ZN14RepeatMovement11setBodyPartE8Location,__ZN14RepeatMovement22setOwnMotionAttributesERK16MotionAttributes
,__ZNK14RepeatMovement5printEP8_IO_FILE,__ZNK14RepeatMovement10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE,__ZN17TargettedMovement11setBodyPartE8Location,__ZN17TargettedMovement22setOwnMotionAttributesERK16MotionAttributes,__ZNK17TargettedMovement5printEP8_IO_FILE,__ZNK17TargettedMovement10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE,__ZN11ParMovement11setBodyPartE8Location,__ZN11ParMovement22setOwnMotionAttributesERK16MotionAttributes,__ZNK11ParMovement5printEP8_IO_FILE,__ZNK11ParMovement10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE,__ZN11SeqMovement11setBodyPartE8Location,__ZN11SeqMovement22setOwnMotionAttributesERK16MotionAttributes,__ZN11SeqMovement17setInitialPostureERK19TwoHConcretePosture,__ZNK11SeqMovement5printEP8_IO_FILE,__ZNK11SeqMovement18printTopLevelSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE,__ZNK11SeqMovement10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE,__ZN13SplitMovement11setBodyPartE8Location,__ZN13SplitMovement17setInitialPostureERK19TwoHConcretePosture,__ZNK13SplitMovement5printEP8_IO_FILE,__ZNK13SplitMovement10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE,__ZNK13ParTimedMorph5printEP8_IO_FILE,__ZNK13SeqTimedMorph5printEP8_IO_FILE,__ZNSt11logic_errorC2EPKc,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_,__ZNKSt3__28ios_base6getlocEv,__ZNSt3__28ios_base5clearEj,__Z7eprintfPKcz,__ZN13DynamicStringC2Ei,__ZN11TokenStreamC2EPKc,__ZN18HandJointRotations7setFromEPKS_
,__ZN18HandJointRotationsC2EPKS_,__ZN6VectorC2ERKS_,__ZN6Vector7setFromERKS_,__ZN18ControlledByScalarI6VectorE13set_referenceES0_,__ZN19OneHConcretePostureC2Eb,__ZN12FaceAnimatorC2EPK11HanimAvatar,__ZN13DynamicArrayPI5JointE6resizeEi,__ZN12DynamicArrayIiLin1EE6resizeEi,__ZNK6SiteID5printEP8_IO_FILE,__ZN16AvatarJointIndexC2EP11HanimAvatar,__ZN19AvatarJointNumIndexC2EPK16AvatarJointIndex,__ZN5Joint13addChildJointEPS_,__ZNK4Site5printEP8_IO_FILE,__ZN13DynamicArrayPI4SiteE6resizeEi,__ZN5Joint7addSiteEP4Site,__ZN4Site16setLocalPositionERK6Vector,__ZNK4Site9printNameEP8_IO_FILE,__ZN11HanimAvatar24createQuincunxCentreSiteE6SiteID,__ZN13DynamicArrayPI7SegmentE6resizeEi,__ZN17AvatarConstraints10initialiseEP11HanimAvatar,__ZN6VectorC2EPKS_,__ZN4SiteC2EPKc,__ZN10ControllerC2E16ControllerParams,__ZNK16ControllerParams5printEP8_IO_FILE,__ZN10TrajectoryC2ERK16TrajectoryParams,__ZN19TwoHAbstractPostureC2EPK7Gesture,__ZN5Joint10pathToRootER13DynamicArrayPIS_E,__ZL16HandleXMLGesturePvP7XMLCell,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc,__Z14ReportXMLError13XMLResultCodePKc
,__ZL23handle_hamgestural_signPvP7XMLCell,__ZL17handle_gloss_signPvP7XMLCell,__ZL17handle_mocap_signPvP7XMLCell,__ZL26handle_bonesanimation_signPvP7XMLCell,__ZN13DynamicArray1I15AtomicNonmanualE6resizeEi,__ZN13DynamicArray1IPS_I15AtomicNonmanualEE6resizeEi,__ZN12ThumbBending6setAddERKS_,__ZN12ThumbBending21ModifyByFingerBendingERK13FingerBending,__Z12SprintIndentRNSt3__213basic_ostreamIcNS_11char_traitsIcEEEEi,__ZNK13FingerBending10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE,__ZNK12ThumbBending10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE,__ZNK15AtomicNonmanual10printSiGMLERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEE,__ZN16DirectedMovementC2EPKS_,__ZN16CircularMovementC2EPKS_,__ZN14RepeatMovementC2EPKS_,__ZN11ParMovementC2EPKS_,__ZN20ArmHandConstellation10updateFromERKS_,__ZNK19TwoHConcretePosture5printEP8_IO_FILE,__ZN13DynamicArrayPI13BasicMovementE6resizeEi,__ZN16CompoundMovementC2EPKS_,__ZN13DynamicArray0IfE6resizeEi,__ZNK25TwoHConcretePostureChange5printEP8_IO_FILE,__ZN13DynamicArrayPI18AbstractTimedMorphE6resizeEi,__ZN18SiGMLConstellation9mergeFromERKS_,__ZN19OneHAbstractPosture20defaultHandstuffFromERKS_,__ZN11ParMovementC2E12SET_OF_HANDS,__ZN14RepeatMovementC2E12SET_OF_HANDS,__ZN11MannerFlags9setMannerE6Manner,__ZN10Direction3C2EPKc,__ZN10Direction2C2EPKc
,__ZN10Direction216EllipseDirectionEPKc,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_,__Z17appendIntToStringNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi,__ZL9Expat_endPvPKc,_XML_SetUserData,__ZN7XMLCellC2EPc,__ZL21AGIPostMortemCallbackPvP10PostMortem,__ZN7Getopts10printValueEP8_IO_FILE,__ZN11HanimAvatarC2EPK7ASDdata,__ZN7Gesture11InitPostureER19TwoHConcretePosture,__ZNSt3__218__libcpp_refstringC2EPKc,__ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,_abort_message,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18];
var FUNCTION_TABLE_viif = [b19,__ZN7SSMorphC2EPcf,__ZN14OneArmAnimator5resetEP19OneHConcretePosturef,b19];
var FUNCTION_TABLE_viifffffff = [b20,__ZN7SSPRSetC2EPcfffffff];
var FUNCTION_TABLE_viifffi = [b21,__ZN16AtomicTimedMorphC2EifffPKc];
var FUNCTION_TABLE_viifi = [b22,__ZN13BasicMovement17GetCurrentPostureER19TwoHConcretePosturefb,__ZN16DirectedMovement17GetCurrentPostureER19TwoHConcretePosturefb,__ZN16CircularMovement17GetCurrentPostureER19TwoHConcretePosturefb,__ZN13WristMovement17GetCurrentPostureER19TwoHConcretePosturefb,__ZN18FingerPlayMovement17GetCurrentPostureER19TwoHConcretePosturefb,__ZN14RepeatMovement17GetCurrentPostureER19TwoHConcretePosturefb,__ZN17TargettedMovement17GetCurrentPostureER19TwoHConcretePosturefb,__ZN11ParMovement17GetCurrentPostureER19TwoHConcretePosturefb,__ZN11SeqMovement17GetCurrentPostureER19TwoHConcretePosturefb,__ZN13SplitMovement17GetCurrentPostureER19TwoHConcretePosturefb,b22,b22,b22,b22,b22];
var FUNCTION_TABLE_viifii = [b23,__ZNK18HingeJointRotation13printAxesVRMLEP8_IO_FILEfss,__ZNK19TurretJointRotation13printAxesVRMLEP8_IO_FILEfss,__ZNK23FingerBaseJointRotation13printAxesVRMLEP8_IO_FILEfss,__ZNK22ThumbBaseJointRotation13printAxesVRMLEP8_IO_FILEfss,__ZNK17QuatJointRotation13printAxesVRMLEP8_IO_FILEfss,b23,b23];
var FUNCTION_TABLE_viii = [b24,__ZNK18HingeJointRotation5printEP8_IO_FILEs,__ZNK18HingeJointRotation17printRotationVRMLEP8_IO_FILEs,__ZNK19TurretJointRotation5printEP8_IO_FILEs,__ZNK19TurretJointRotation17printRotationVRMLEP8_IO_FILEs,__ZNK23FingerBaseJointRotation5printEP8_IO_FILEs,__ZNK23FingerBaseJointRotation17printRotationVRMLEP8_IO_FILEs,__ZNK22ThumbBaseJointRotation5printEP8_IO_FILEs,__ZNK22ThumbBaseJointRotation17printRotationVRMLEP8_IO_FILEs,__ZNK17QuatJointRotation5printEP8_IO_FILEs,__ZNK17QuatJointRotation17printRotationVRMLEP8_IO_FILEs,__ZNK16AtomicTimedMorph13printIndentedEP8_IO_FILEi,__ZN13BasicMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture,__ZN13BasicMovement18propagateHandStuffER12TwoHandStuffR20ArmHandConstellation,__ZN13BasicMovement20propagateChangeFlagsE18PostureChangeFlagsS0_,__ZN13BasicMovement17setFinalHandStuffERK12TwoHandStuffRK20ArmHandConstellation,__ZN13BasicMovement12set1FinalPosERK6Vectorb,__ZN13BasicMovement11setFinalPosERK6VectorS2_,__ZN13BasicMovement15offset1FinalPosERK6Vectorb,__ZN13BasicMovement14offsetFinalPosERK6VectorS2_,__ZNK13BasicMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb,__ZNK17NonmanualMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb,__ZN16DirectedMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture,__ZN16DirectedMovement18propagateHandStuffER12TwoHandStuffR20ArmHandConstellation,__ZN16DirectedMovement15offset1FinalPosERK6Vectorb,__ZNK16DirectedMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb,__ZN16CircularMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture,__ZN16CircularMovement12set1FinalPosERK6Vectorb,__ZN16CircularMovement15offset1FinalPosERK6Vectorb
,__ZNK16CircularMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb,__ZN10NoMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture,__ZNK10NoMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb,__ZN13WristMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture,__ZN13WristMovement12set1FinalPosERK6Vectorb,__ZN13WristMovement15offset1FinalPosERK6Vectorb,__ZNK13WristMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb,__ZN18FingerPlayMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture,__ZN18FingerPlayMovement12set1FinalPosERK6Vectorb,__ZN18FingerPlayMovement15offset1FinalPosERK6Vectorb,__ZNK18FingerPlayMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb,__ZN14RepeatMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture,__ZN14RepeatMovement18propagateHandStuffER12TwoHandStuffR20ArmHandConstellation,__ZN14RepeatMovement20propagateChangeFlagsE18PostureChangeFlagsS0_,__ZN14RepeatMovement17setFinalHandStuffERK12TwoHandStuffRK20ArmHandConstellation,__ZNK14RepeatMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb,__ZN17TargettedMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture,__ZN17TargettedMovement18propagateHandStuffER12TwoHandStuffR20ArmHandConstellation,__ZN17TargettedMovement17setFinalHandStuffERK12TwoHandStuffRK20ArmHandConstellation,__ZNK17TargettedMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb,__ZN11ParMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture,__ZN11ParMovement18propagateHandStuffER12TwoHandStuffR20ArmHandConstellation,__ZN11ParMovement20propagateChangeFlagsE18PostureChangeFlagsS0_,__ZN11ParMovement17setFinalHandStuffERK12TwoHandStuffRK20ArmHandConstellation,__ZN11ParMovement12set1FinalPosERK6Vectorb,__ZN11ParMovement15offset1FinalPosERK6Vectorb,__ZNK11ParMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb,__ZN11SeqMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture,__ZN11SeqMovement18propagateHandStuffER12TwoHandStuffR20ArmHandConstellation,__ZN11SeqMovement20propagateChangeFlagsE18PostureChangeFlagsS0_
,__ZN11SeqMovement17setFinalHandStuffERK12TwoHandStuffRK20ArmHandConstellation,__ZN11SeqMovement12set1FinalPosERK6Vectorb,__ZN11SeqMovement15offset1FinalPosERK6Vectorb,__ZNK11SeqMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb,__ZN13SplitMovement24setAvatarDependentValuesEPK7GestureP19TwoHAbstractPosture,__ZN13SplitMovement18propagateHandStuffER12TwoHandStuffR20ArmHandConstellation,__ZN13SplitMovement20propagateChangeFlagsE18PostureChangeFlagsS0_,__ZN13SplitMovement17setFinalHandStuffERK12TwoHandStuffRK20ArmHandConstellation,__ZN13SplitMovement12set1FinalPosERK6Vectorb,__ZN13SplitMovement15offset1FinalPosERK6Vectorb,__ZNK13SplitMovement17printSiGMLAttribsERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEEb,__ZNK13ParTimedMorph13printIndentedEP8_IO_FILEi,__ZNK13SeqTimedMorph13printIndentedEP8_IO_FILEi,__ZNKSt3__214error_category23default_error_conditionEi,__ZNKSt3__219__iostream_category7messageEi,__ZN7HashAnyIPKciEC2Eii,___cxa_throw__wrapper,__ZN28InvertibleDynamicStringArrayC2Esb,__ZNK19OneHConcretePosture15computeWristLocEPK11HanimAvatarR6Vector,__ZN14OneArmAnimatorC2EP19OneHConcretePosturePK11HanimAvatar,__ZN14TwoArmAnimatorC2ER19TwoHConcretePosturePK11HanimAvatar,__ZN13DynamicArray1I6VectorE10initialiseEiPS0_,__ZN9Transform7setFromERK6VectorRK10Quaternion,__ZN4SiteC2EPKci,__ZN7SegmentC2EPKci,__ZN11OneHGestureC2EbP7Gesture,__ZN10Quaternion5printEP8_IO_FILEi,__ZN9Transform10setComposeERK6VectorRK10Quaternion,__ZNK9Transform5printEP8_IO_FILEi,__ZN17TargettedMovementC2E12SET_OF_HANDSP7Gesture
,__ZN13BasicMovementC2E12MovementType12SET_OF_HANDS,__ZL21handle_nonmanual_itemR15AtomicNonmanual14NonmanualItemsP7XMLCell,__ZN13DynamicArray1I15AtomicNonmanualE10initialiseEiPS0_,__ZNK25TwoHConcretePostureChange19printFinalUndefinedEP8_IO_FILE12SET_OF_HANDS,__ZN9HandshapeC2EbP7Gesture,__ZN19OneHAbstractPostureC2EbP7Gesture,__ZN11OneHGesture18ConcreteLocateSiteER6Vector6SiteID,__ZN7HashAnyIiiEC2Eii,__ZN13FingerBending16SetFingerBendingEPKcP7HashAnyIS1_S_E,__ZN7HashAnyIPKcPS_IS1_iEEC2ES3_i,_XML_SetElementHandler,__ZL11Expat_startPvPKcPS1_,__ZN7ASDdataC2EPKcb,__ZNSt3__28ios_base7failureC2EPKcRKNS_10error_codeE,__ZNSt3__212system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24];
var FUNCTION_TABLE_viiif = [b25,__ZN18HingeJointRotation11interpolateERKS_S1_f,__ZN19TurretJointRotation11interpolateERKS_S1_f,__ZN23FingerBaseJointRotation11interpolateERKS_S1_f,__ZN22ThumbBaseJointRotation11interpolateERKS_S1_f,__ZN17QuatJointRotation11interpolateERKS_S1_f,__ZN10TorsoCurveC2EPKS_S1_f,__ZN6Vector11setMidPointERKS_S1_f];
var FUNCTION_TABLE_viiii = [b26,_normal_updatePosition,_big2_updatePosition,_little2_updatePosition,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZN7GestureC2EPKcPK11HanimAvatarb,__ZL20AGISignStartCallbackPvPKcii,_initUpdatePosition,b26,b26,b26,b26,b26,b26];
var FUNCTION_TABLE_viiiii = [b27,_latin1_toUtf8,_latin1_toUtf16,_utf8_toUtf8,_utf8_toUtf16,_big2_toUtf8,_big2_toUtf16,_little2_toUtf8,_little2_toUtf16,_ascii_toUtf8,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZN11HanimAvatar17completeQuadSitesEPKcS1_S1_S1_,_unknown_toUtf8,_unknown_toUtf16];
var FUNCTION_TABLE_viiiiii = [b28,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZN5JointC2EPKciPS_P7SegmentP13DynamicArrayPI4SiteE,__ZN10TorsoCurveC2ERK6VectorS2_S2_S2_S2_,__ZN20ArmHandConstellationC2E18SiGMLConstellationPKS_12SET_OF_HANDS9Mirroringb,__ZL17InstallParPostureR6VectorS0_R19OneHConcretePostureRK18PostureChangeFlagsRKS1_RKS_];
var FUNCTION_TABLE_viiiiiiff = [b29,__ZNK11HanimAvatar19computeArmRotationsEPP13JointRotationbRK6VectorRK10QuaternionS8_ff];
var FUNCTION_TABLE_viiiiiii = [b30,__Z10MakeSiteID8Location16AbsoluteBodySide13ExtremitySides9Proximityb];
var FUNCTION_TABLE_viiiiiiiii = [b31];
return { __GLOBAL__sub_I_Humanoid_cpp: __GLOBAL__sub_I_Humanoid_cpp, __GLOBAL__sub_I_SiGML_cpp: __GLOBAL__sub_I_SiGML_cpp, __GLOBAL__sub_I_SkelTopology_cpp: __GLOBAL__sub_I_SkelTopology_cpp, __GLOBAL__sub_I_Tables_cpp: __GLOBAL__sub_I_Tables_cpp, __GLOBAL__sub_I_Vector_cpp: __GLOBAL__sub_I_Vector_cpp, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _animgenAllocate: _animgenAllocate, _animgenDeAllocate: _animgenDeAllocate, _animgenGenerateFrames: _animgenGenerateFrames, _animgenInit: _animgenInit, _animgenSetAvatar: _animgenSetAvatar, _animgenSetOutput: _animgenSetOutput, _animgenSetSequence: _animgenSetSequence, _animgenTerminate: _animgenTerminate, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_replace_memory: _emscripten_replace_memory, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _pthread_cond_broadcast: _pthread_cond_broadcast, _pthread_mutex_lock: _pthread_mutex_lock, _pthread_mutex_unlock: _pthread_mutex_unlock, _sbrk: _sbrk, dynCall_fi: dynCall_fi, dynCall_fii: dynCall_fii, dynCall_fiif: dynCall_fiif, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiid: dynCall_iiiiid, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vif: dynCall_vif, dynCall_vifff: dynCall_vifff, dynCall_vifi: dynCall_vifi, dynCall_vififfi: dynCall_vififfi, dynCall_vifii: dynCall_vifii, dynCall_vii: dynCall_vii, dynCall_viif: dynCall_viif, dynCall_viifffffff: dynCall_viifffffff, dynCall_viifffi: dynCall_viifffi, dynCall_viifi: dynCall_viifi, dynCall_viifii: dynCall_viifii, dynCall_viii: dynCall_viii, dynCall_viiif: dynCall_viiif, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiiff: dynCall_viiiiiiff, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiiiii: dynCall_viiiiiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var __GLOBAL__sub_I_Humanoid_cpp = Module["__GLOBAL__sub_I_Humanoid_cpp"] = asm["__GLOBAL__sub_I_Humanoid_cpp"];
var __GLOBAL__sub_I_SiGML_cpp = Module["__GLOBAL__sub_I_SiGML_cpp"] = asm["__GLOBAL__sub_I_SiGML_cpp"];
var __GLOBAL__sub_I_SkelTopology_cpp = Module["__GLOBAL__sub_I_SkelTopology_cpp"] = asm["__GLOBAL__sub_I_SkelTopology_cpp"];
var __GLOBAL__sub_I_Tables_cpp = Module["__GLOBAL__sub_I_Tables_cpp"] = asm["__GLOBAL__sub_I_Tables_cpp"];
var __GLOBAL__sub_I_Vector_cpp = Module["__GLOBAL__sub_I_Vector_cpp"] = asm["__GLOBAL__sub_I_Vector_cpp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _animgenAllocate = Module["_animgenAllocate"] = asm["_animgenAllocate"];
var _animgenDeAllocate = Module["_animgenDeAllocate"] = asm["_animgenDeAllocate"];
var _animgenGenerateFrames = Module["_animgenGenerateFrames"] = asm["_animgenGenerateFrames"];
var _animgenInit = Module["_animgenInit"] = asm["_animgenInit"];
var _animgenSetAvatar = Module["_animgenSetAvatar"] = asm["_animgenSetAvatar"];
var _animgenSetOutput = Module["_animgenSetOutput"] = asm["_animgenSetOutput"];
var _animgenSetSequence = Module["_animgenSetSequence"] = asm["_animgenSetSequence"];
var _animgenTerminate = Module["_animgenTerminate"] = asm["_animgenTerminate"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _pthread_cond_broadcast = Module["_pthread_cond_broadcast"] = asm["_pthread_cond_broadcast"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_fi = Module["dynCall_fi"] = asm["dynCall_fi"];
var dynCall_fii = Module["dynCall_fii"] = asm["dynCall_fii"];
var dynCall_fiif = Module["dynCall_fiif"] = asm["dynCall_fiif"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vif = Module["dynCall_vif"] = asm["dynCall_vif"];
var dynCall_vifff = Module["dynCall_vifff"] = asm["dynCall_vifff"];
var dynCall_vifi = Module["dynCall_vifi"] = asm["dynCall_vifi"];
var dynCall_vififfi = Module["dynCall_vififfi"] = asm["dynCall_vififfi"];
var dynCall_vifii = Module["dynCall_vifii"] = asm["dynCall_vifii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viif = Module["dynCall_viif"] = asm["dynCall_viif"];
var dynCall_viifffffff = Module["dynCall_viifffffff"] = asm["dynCall_viifffffff"];
var dynCall_viifffi = Module["dynCall_viifffi"] = asm["dynCall_viifffi"];
var dynCall_viifi = Module["dynCall_viifi"] = asm["dynCall_viifi"];
var dynCall_viifii = Module["dynCall_viifii"] = asm["dynCall_viifii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiif = Module["dynCall_viiif"] = asm["dynCall_viiif"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiiff = Module["dynCall_viiiiiiff"] = asm["dynCall_viiiiiiff"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
;
// === Auto-generated postamble setup entry stuff ===
Module['asm'] = asm;
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
Module["Pointer_stringify"] = Pointer_stringify;
if (memoryInitializer) {
if (!isDataURI(memoryInitializer)) {
if (typeof Module['locateFile'] === 'function') {
memoryInitializer = Module['locateFile'](memoryInitializer);
} else if (Module['memoryInitializerPrefixURL']) {
memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
}
}
if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
var data = Module['readBinary'](memoryInitializer);
HEAPU8.set(data, GLOBAL_BASE);
} else {
addRunDependency('memory initializer');
var applyMemoryInitializer = function(data) {
if (data.byteLength) data = new Uint8Array(data);
HEAPU8.set(data, GLOBAL_BASE);
// Delete the typed array that contains the large blob of the memory initializer request response so that
// we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
// its .status field can still be accessed later.
if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
removeRunDependency('memory initializer');
}
function doBrowserLoad() {
Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
throw 'could not load memory initializer ' + memoryInitializer;
});
}
var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
if (memoryInitializerBytes) {
applyMemoryInitializer(memoryInitializerBytes.buffer);
} else
if (Module['memoryInitializerRequest']) {
// a network request has already been created, just use that
function useRequest() {
var request = Module['memoryInitializerRequest'];
var response = request.response;
if (request.status !== 200 && request.status !== 0) {
var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
if (data) {
response = data.buffer;
} else {
// If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
// means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
// Look in your browser's devtools network console to see what's going on.
console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
doBrowserLoad();
return;
}
}
applyMemoryInitializer(response);
}
if (Module['memoryInitializerRequest'].response) {
setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
} else {
Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
}
} else {
// fetch it from the network ourselves
doBrowserLoad();
}
}
}
/**
* @constructor
* @extends {Error}
* @this {ExitStatus}
*/
function ExitStatus(status) {
this.name = "ExitStatus";
this.message = "Program terminated with exit(" + status + ")";
this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;
var initialStackTop;
var calledMain = false;
dependenciesFulfilled = function runCaller() {
// If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
if (!Module['calledRun']) run();
if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}
/** @type {function(Array=)} */
function run(args) {
args = args || Module['arguments'];
if (runDependencies > 0) {
return;
}
preRun();
if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame
function doRun() {
if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
Module['calledRun'] = true;
if (ABORT) return;
ensureInitRuntime();
preMain();
if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();
postRun();
}
if (Module['setStatus']) {
Module['setStatus']('Running...');
setTimeout(function() {
setTimeout(function() {
Module['setStatus']('');
}, 1);
doRun();
}, 1);
} else {
doRun();
}
}
Module['run'] = run;
function exit(status, implicit) {
// if this is just main exit-ing implicitly, and the status is 0, then we
// don't need to do anything here and can just leave. if the status is
// non-zero, though, then we need to report it.
// (we may have warned about this earlier, if a situation justifies doing so)
if (implicit && Module['noExitRuntime'] && status === 0) {
return;
}
if (Module['noExitRuntime']) {
} else {
ABORT = true;
EXITSTATUS = status;
STACKTOP = initialStackTop;
exitRuntime();
if (Module['onExit']) Module['onExit'](status);
}
if (ENVIRONMENT_IS_NODE) {
process['exit'](status);
}
Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;
var abortDecorators = [];
function abort(what) {
if (Module['onAbort']) {
Module['onAbort'](what);
}
if (what !== undefined) {
Module.print(what);
Module.printErr(what);
what = JSON.stringify(what)
} else {
what = '';
}
ABORT = true;
EXITSTATUS = 1;
throw 'abort(' + what + '). Build with -s ASSERTIONS=1 for more info.';
}
Module['abort'] = abort;
// {{PRE_RUN_ADDITIONS}}
if (Module['preInit']) {
if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
while (Module['preInit'].length > 0) {
Module['preInit'].pop()();
}
}
Module["noExitRuntime"] = true;
run();
// {{POST_RUN_ADDITIONS}}
// {{MODULE_ADDITIONS}}
// -------- pretty-data-fix.js --------
/**
* pretty-data - nodejs plugin to pretty-print or minify data in XML, JSON and CSS formats.
*  
* Version - 0.40.0
* Copyright (c) 2012 Vadim Kiryukhin
* vkiryukhin @ gmail.com
* http://www.eslinstructor.net/pretty-data/
* 
* Dual licensed under the MIT and GPL licenses:
*   http://www.opensource.org/licenses/mit-license.php
*   http://www.gnu.org/licenses/gpl.html
*
*	pd.xml(data ) - pretty print XML;
*	pd.json(data) - pretty print JSON;
*	pd.css(data ) - pretty print CSS;
*	pd.sql(data)  - pretty print SQL;
*
*	pd.xmlmin(data [, preserveComments] ) - minify XML; 
*	pd.jsonmin(data)                      - minify JSON; 
*	pd.cssmin(data [, preserveComments] ) - minify CSS; 
*	pd.sqlmin(data)                       - minify SQL; 
*
* PARAMETERS:
*
*	@data  			- String; XML, JSON, CSS or SQL text to beautify;
* 	@preserveComments	- Bool (optional, used in minxml and mincss only); 
*				  Set this flag to true to prevent removing comments from @text; 
*	@Return 		- String;
*	
* USAGE:
*	
*	var pd  = require('pretty-data').pd;
*
*	var xml_pp   = pd.xml(xml_text);
*	var xml_min  = pd.xmlmin(xml_text [,true]);
*	var json_pp  = pd.json(json_text);
*	var json_min = pd.jsonmin(json_text);
*	var css_pp   = pd.css(css_text);
*	var css_min  = pd.cssmin(css_text [, true]);
*	var sql_pp   = pd.sql(sql_text);
*	var sql_min  = pd.sqlmin(sql_text);
*
* TEST:
*	comp-name:pretty-data$ node ./test/test_xml
*	comp-name:pretty-data$ node ./test/test_json
*	comp-name:pretty-data$ node ./test/test_css
*	comp-name:pretty-data$ node ./test/test_sql
*/
function pp() {
this.shift = ['\n']; // array of shifts
this.step = '  '; // 2 spaces
var maxdeep = 100, // nesting level
ix = 0;
// initialize array with shifts //
for(ix=0;ix<maxdeep;ix++){
this.shift.push(this.shift[ix]+this.step); 
}
};	
// ----------------------- XML section ----------------------------------------------------
pp.prototype.xml = function(text, preserveComments) {
var strg = preserveComments ? text
: text.replace(/\<![ \r\n\t]*(--([^\-]|[\r\n]|-[^\-])*--[ \r\n\t]*)\>/g,"");
var ar = strg.replace(/>\s{0,}</g,"><")
.replace(/</g,"~::~<")
.replace(/xmlns\:/g,"~::~xmlns:")
.replace(/xmlns\=/g,"~::~xmlns=")
.split('~::~'),
len = ar.length,
inComment = false,
deep = 0,
str = '',
ix = 0;
for(ix=0;ix<len;ix++) {
// start comment or <![CDATA[...]]> or <!DOCTYPE //
if(ar[ix].search(/<!/) > -1) { 
str += this.shift[deep]+ar[ix];
inComment = true; 
// end comment  or <![CDATA[...]]> //
if(ar[ix].search(/-->/) > -1 || ar[ix].search(/\]>/) > -1 || ar[ix].search(/!DOCTYPE/) > -1 ) { 
inComment = false; 
}
} else 
// end comment  or <![CDATA[...]]> //    find --> or ]>
if(ar[ix].search(/-->/) > -1 || ar[ix].search(/\]>/) > -1) { 
str += ar[ix];
inComment = false; 
} else 
// <elm></elm> //    find prev <tag and this <\tag    but now not prev \>
if( ar[ix-1] != null && ar[ix-1].search(/\/>/) == -1 && /^<\w/.exec(ar[ix-1]) && /^<\/\w/.exec(ar[ix]) &&
/^<[\w:\-\.\,]+/.exec(ar[ix-1]) == /^<\/[\w:\-\.\,]+/.exec(ar[ix])[0].replace('/','')) { 
// Omits indentation
// str += ar[ix];
// No longer omits indentation: For compatibility with Java PP routine
str = !inComment ? str += this.shift[--deep]+ar[ix] : str += ar[ix];
// if(!inComment) deep--;
} else
// <elm> //
//    find <tag but not </ or />
if(ar[ix].search(/<\w/) > -1 && ar[ix].search(/<\//) == -1 && ar[ix].search(/\/>/) == -1 ) {
str = !inComment ? str += this.shift[deep++]+ar[ix] : str += ar[ix];
} else 
// <elm>...</elm> //    find <tag and </    not sure how both can be on one line
if(ar[ix].search(/<\w/) > -1 && ar[ix].search(/<\//) > -1) {
str = !inComment ? str += this.shift[deep]+ar[ix] : str += ar[ix];
} else 
// </elm> //    find </
if(ar[ix].search(/<\//) > -1) { 
str = !inComment ? str += this.shift[--deep]+ar[ix] : str += ar[ix];
} else 
// <elm/> //    find />
if(ar[ix].search(/\/>/) > -1 ) { 
str = !inComment ? str += this.shift[deep]+ar[ix] : str += ar[ix];
} else 
// <? xml ... ?> //
if(ar[ix].search(/<\?/) > -1) { 
str += this.shift[deep]+ar[ix];
} else 
// xmlns //
if( ar[ix].search(/xmlns\:/) > -1  || ar[ix].search(/xmlns\=/) > -1) { 
str += this.shift[deep]+ar[ix];
} 
else {
str += ar[ix];
}
}
return  (str[0] == '\n') ? str.slice(1) : str;
}
// ----------------------- JSON section ----------------------------------------------------
pp.prototype.json = function(text) {
if ( typeof text === "string" ) {
return JSON.stringify(JSON.parse(text), null, this.step);
}
if ( typeof text === "object" ) {
return JSON.stringify(text, null, this.step);
}
return null;
}
// ----------------------- CSS section ----------------------------------------------------
pp.prototype.css = function(text) {
var ar = text.replace(/\s{1,}/g,' ')
.replace(/\{/g,"{~::~")
.replace(/\}/g,"~::~}~::~")
.replace(/\;/g,";~::~")
.replace(/\/\*/g,"~::~/*")
.replace(/\*\//g,"*/~::~")
.replace(/~::~\s{0,}~::~/g,"~::~")
.split('~::~'),
len = ar.length,
deep = 0,
str = '',
ix = 0;
for(ix=0;ix<len;ix++) {
if( /\{/.exec(ar[ix]))  { 
str += this.shift[deep++]+ar[ix];
} else 
if( /\}/.exec(ar[ix]))  { 
str += this.shift[--deep]+ar[ix];
} else
if( /\*\\/.exec(ar[ix]))  { 
str += this.shift[deep]+ar[ix];
}
else {
str += this.shift[deep]+ar[ix];
}
}
return str.replace(/^\n{1,}/,'');
}
// ----------------------- SQL section ----------------------------------------------------
function isSubquery(str, parenthesisLevel) {
return  parenthesisLevel - (str.replace(/\(/g,'').length - str.replace(/\)/g,'').length )
}
function split_sql(str, tab) {
return str.replace(/\s{1,}/g," ")
.replace(/ AND /ig,"~::~"+tab+tab+"AND ")
.replace(/ BETWEEN /ig,"~::~"+tab+"BETWEEN ")
.replace(/ CASE /ig,"~::~"+tab+"CASE ")
.replace(/ ELSE /ig,"~::~"+tab+"ELSE ")
.replace(/ END /ig,"~::~"+tab+"END ")
.replace(/ FROM /ig,"~::~FROM ")
.replace(/ GROUP\s{1,}BY/ig,"~::~GROUP BY ")
.replace(/ HAVING /ig,"~::~HAVING ")
//.replace(/ IN /ig,"~::~"+tab+"IN ")
.replace(/ IN /ig," IN ")
.replace(/ JOIN /ig,"~::~JOIN ")
.replace(/ CROSS~::~{1,}JOIN /ig,"~::~CROSS JOIN ")
.replace(/ INNER~::~{1,}JOIN /ig,"~::~INNER JOIN ")
.replace(/ LEFT~::~{1,}JOIN /ig,"~::~LEFT JOIN ")
.replace(/ RIGHT~::~{1,}JOIN /ig,"~::~RIGHT JOIN ")
.replace(/ ON /ig,"~::~"+tab+"ON ")
.replace(/ OR /ig,"~::~"+tab+tab+"OR ")
.replace(/ ORDER\s{1,}BY/ig,"~::~ORDER BY ")
.replace(/ OVER /ig,"~::~"+tab+"OVER ")
.replace(/\(\s{0,}SELECT /ig,"~::~(SELECT ")
.replace(/\)\s{0,}SELECT /ig,")~::~SELECT ")
.replace(/ THEN /ig," THEN~::~"+tab+"")
.replace(/ UNION /ig,"~::~UNION~::~")
.replace(/ USING /ig,"~::~USING ")
.replace(/ WHEN /ig,"~::~"+tab+"WHEN ")
.replace(/ WHERE /ig,"~::~WHERE ")
.replace(/ WITH /ig,"~::~WITH ")
//.replace(/\,\s{0,}\(/ig,",~::~( ")
//.replace(/\,/ig,",~::~"+tab+tab+"")
.replace(/ ALL /ig," ALL ")
.replace(/ AS /ig," AS ")
.replace(/ ASC /ig," ASC ") 
.replace(/ DESC /ig," DESC ") 
.replace(/ DISTINCT /ig," DISTINCT ")
.replace(/ EXISTS /ig," EXISTS ")
.replace(/ NOT /ig," NOT ")
.replace(/ NULL /ig," NULL ")
.replace(/ LIKE /ig," LIKE ")
.replace(/\s{0,}SELECT /ig,"SELECT ")
.replace(/~::~{1,}/g,"~::~")
.split('~::~');
}
pp.prototype.sql = function(text) {
var ar_by_quote = text.replace(/\s{1,}/g," ")
.replace(/\'/ig,"~::~\'")
.split('~::~'),
len = ar_by_quote.length,
ar = [],
deep = 0,
tab = this.step,//+this.step,
inComment = true,
inQuote = false,
parenthesisLevel = 0,
str = '',
ix = 0;
for(ix=0;ix<len;ix++) {
if(ix%2) {
ar = ar.concat(ar_by_quote[ix]);
} else {
ar = ar.concat(split_sql(ar_by_quote[ix], tab) );
}
}
len = ar.length;
for(ix=0;ix<len;ix++) {
parenthesisLevel = isSubquery(ar[ix], parenthesisLevel);
if( /\s{0,}\s{0,}SELECT\s{0,}/.exec(ar[ix]))  { 
ar[ix] = ar[ix].replace(/\,/g,",\n"+tab+tab+"")
} 
if( /\s{0,}\(\s{0,}SELECT\s{0,}/.exec(ar[ix]))  { 
deep++;
str += this.shift[deep]+ar[ix];
} else 
if( /\'/.exec(ar[ix]) )  { 
if(parenthesisLevel<1 && deep) {
deep--;
}
str += ar[ix];
}
else  { 
str += this.shift[deep]+ar[ix];
if(parenthesisLevel<1 && deep) {
deep--;
}
} 
}
str = str.replace(/^\n{1,}/,'').replace(/\n{1,}/g,"\n");
return str;
}
// ----------------------- min section ----------------------------------------------------
pp.prototype.xmlmin = function(text, preserveComments) {
var str = preserveComments ? text
: text.replace(/\<![ \r\n\t]*(--([^\-]|[\r\n]|-[^\-])*--[ \r\n\t]*)\>/g,"");
return  str.replace(/>\s{0,}</g,"><"); 
}
pp.prototype.jsonmin = function(text) {
return  text.replace(/\s{0,}\{\s{0,}/g,"{")
.replace(/\s{0,}\[$/g,"[")
.replace(/\[\s{0,}/g,"[")
.replace(/:\s{0,}\[/g,':[')
.replace(/\s{0,}\}\s{0,}/g,"}")
.replace(/\s{0,}\]\s{0,}/g,"]")
.replace(/\"\s{0,}\,/g,'",')
.replace(/\,\s{0,}\"/g,',"')
.replace(/\"\s{0,}:/g,'":')
.replace(/:\s{0,}\"/g,':"')
.replace(/:\s{0,}\[/g,':[')
.replace(/\,\s{0,}\[/g,',[')
.replace(/\,\s{2,}/g,', ')
.replace(/\]\s{0,},\s{0,}\[/g,'],[');   
}
pp.prototype.cssmin = function(text, preserveComments) {
var str = preserveComments ? text
: text.replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\//g,"") ;
return str.replace(/\s{1,}/g,' ')
.replace(/\{\s{1,}/g,"{")
.replace(/\}\s{1,}/g,"}")
.replace(/\;\s{1,}/g,";")
.replace(/\/\*\s{1,}/g,"/*")
.replace(/\*\/\s{1,}/g,"*/");
}	
pp.prototype.sqlmin = function(text) {
return text.replace(/\s{1,}/g," ").replace(/\s{1,}\(/,"(").replace(/\s{1,}\)/,")");
}
// --------------------------------------------------------------------------------------------
// this.Pretty = new pp;	
this.getCWAEnv().add(new pp, "Pretty");
// -------- Access.Node.js --------
// Generated by CoffeeScript 2.5.1
(function() {
//   Access.Node.coffee
// Data transfers using node.js fs and xmldom modules
var Access, FS, Logger, Node, XMLSerialize, cwaenv, lggr, xmlDOM;
cwaenv = this.getCWAEnv();
Logger = cwaenv.get("Logger");
lggr = Logger.get("Data");
FS = require("fs");
xmlDOM = require("xmldom");
XMLSerialize = new xmlDOM.XMLSerializer();
Node = {
ELEMENT_NODE: 1,
TEXT_NODE: 3,
PROCESSING_INSTRUCTION_NODE: 7,
COMMENT_NODE: 8,
DOCUMENT_NODE: 9,
DOCUMENT_TYPE_NODE: 10
};
Access = (function() {
class Access {
// Static
static _DOMerr(level, msg) {
if (Access._DOMerrCB) {
return Access._DOMerrCB(level, msg);
} else {
return lggr.warn(`Access.Node: DOM Error (${level}) ${msg}`);
}
}
// Convert XML text to DOM
static toDOM(theXML, errCB = null) {
// Handles DOCTYPE badly
Access._DOMerrCB = errCB;
return Access._DOMParse.parseFromString(theXML, "text/xml");
}
// Get a file or return null. Errors reported via callback.
static fetchURI(theURI, theCB, form = null) {
var doData;
if (typeof lggr.trace === "function") {
lggr.trace(`Access.Node fetchURI: Fetching ${theURI}`);
}
doData = (err, data) => {
var errMsg;
if (err) {
if (err.code === "ENOENT") {
errMsg = `fetchURI: ${theURI} does not exist`;
} else {
errMsg = `fetchURI: Error ${err.code} for ${theURI}`;
}
if (typeof lggr.trace === "function") {
lggr.trace(`Access.Node fetchURI: ${errMsg}`);
}
// Probably return null partial data
return theCB(null, 1, errMsg, data);
} else {
// Deal with potential newline issue but probably should only be for text files
data = (data.replace(/\r\n/g, "\n")).replace(/\r/g, "\n");
if (typeof lggr.trace === "function") {
lggr.trace(`Access.Node fetchURI: Fetched ${theURI}`);
}
return theCB(data, 0, null, data);
}
};
// Read the URI
return FS.readFile(theURI, "utf-8", doData);
}
};
Access._DOMParse = new xmlDOM.DOMParser({
locator: {},
errorHandler: Access._DOMerr
});
return Access;
}).call(this);
// Export
cwaenv.add(Access, "Access");
cwaenv.add(XMLSerialize, "XMLSerialize");
cwaenv.add(Node, "Node");
// Provide console as expected by Coffee code
// @console = console # Now in setup-emcc-node.js JRWG
// (End Access.Node.coffee)
}).call(this);
// -------- Data.js --------
// Generated by CoffeeScript 2.5.1
(function() {
//	Data.coffee
// Common data access and manipulation routines building on Access class
var Access, Data, Logger, Pretty, XMLSerialize, cwaenv, lggr;
cwaenv = this.getCWAEnv();
Access = cwaenv.get("Access");
Pretty = cwaenv.get("Pretty");
XMLSerialize = cwaenv.get("XMLSerialize");
Logger = cwaenv.get("Logger");
lggr = Logger.get("Data");
Data = (function() {
class Data {
// Construct return value
static result(val, errCount, errText, partVal) {
return {
value: val,
errCount: errCount,
errText: errText,
partVal: partVal
};
}
// Parse to JSON safely
static parseJSON(jstr) {
if (typeof lggr.trace === "function") {
lggr.trace(`JSON.parse for \"${jstr}\"`);
}
if ((jstr != null) && jstr.length > 0) {
return JSON.parse(jstr);
} else {
lggr.warn(`JSON.parse failed for \"${jstr}\"`);
return null;
}
}
// Chain callbacks
static tee(cbA, cbB) {
return () => {
cbA();
return cbB();
};
}
// ---------- Pretty Print routines -------------- #
// Pretty Print JSON object or text
static ppJSON(theJSON) {
return Pretty.json(theJSON);
}
// Minimal JSON object or text
static mnJSON(theJSON) {
if (typeof theJSON === "object") {
theJSON = JSON.stringify(theJSON);
}
return Pretty.jsonmin(theJSON);
}
// Pretty Print XML text
static ppXML(theXML, pres = true) {
return Pretty.xml(theXML, pres);
}
// Minimal XML from XML text
static mnXML(theXML, pres = false) {
return Pretty.xmlmin(theXML, pres);
}
// Pretty Print XML from DOM
static ppDOM(theDOM, pres = true) {
return Pretty.xml(XMLSerialize.serializeToString(theDOM), pres);
}
// Minimal XML from DOM
static mnDOM(theDOM, pres = false) {
return Pretty.xmlmin(XMLSerialize.serializeToString(theDOM), pres);
}
// ---------- URI normalisation routines --------- #
// Splits a URI into components
static splitURI(uri) {
var matches, pattern;
// lggr.trace? "Splitting #{uri}"
pattern = RegExp("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?");
matches = uri.match(pattern);
return {
scheme: matches[2],
authority: matches[4],
path: matches[5],
query: matches[7],
fragment: matches[9]
};
}
// Rebuild absolute URI string from components.
// Assumes absolute URI. Ignores fragment element so may need enhancing.
// Omit scheme and authority if not given
static stringURI(uriobj) {
var res;
res = uriobj.path;
if (uriobj != null ? uriobj.authority : void 0) {
res = "//" + uriobj.authority + res;
}
if (uriobj != null ? uriobj.scheme : void 0) {
res = uriobj.scheme + ":" + res;
}
if (uriobj.query != null) {
res += "?" + uriobj.query;
}
return res;
}
// Rebuild URI path string from components.
// Assumes absolute URI. Ignores fragment element so may need enhancing.
static stringURIPath(uriobj) {
var res;
res = uriobj.path;
if (uriobj.query != null) {
res += "?" + uriobj.query;
}
return res;
}
static absoluteSplitURI(uri, base) {
var basedir, baseobj, ref, uriobj;
uriobj = Data.splitURI(uri);
baseobj = Data.splitURI(base);
basedir = baseobj.path.substr(0, (baseobj.path.lastIndexOf("/")) + 1);
return {
scheme: uriobj.scheme || baseobj.scheme,
authority: uriobj.authority || baseobj.authority,
path: ((ref = uriobj.path) != null ? ref.charAt(0) : void 0) === "/" ? uriobj.path : basedir + uriobj.path,
query: uriobj.query || baseobj.query,
fragment: uriobj.fragment || baseobj.fragment
};
}
static absoluteURI(uri, base) {
if (typeof lggr.trace === "function") {
lggr.trace(`uri = ${uri} = ${JSON.stringify(Data.splitURI(uri))}`);
}
if (typeof lggr.trace === "function") {
lggr.trace(`base = ${base} = ${JSON.stringify(Data.splitURI(base))}`);
}
if (typeof lggr.trace === "function") {
lggr.trace(`res = ${Data.stringURI(Data.absoluteSplitURI(uri, base))} ${JSON.stringify(Data.absoluteSplitURI(uri, base))}`);
}
return Data.stringURI(Data.absoluteSplitURI(uri, base));
}
static asDir(uri) {
if (uri.endsWith("/")) {
return uri;
} else {
return uri + "/";
}
}
// Tests whether the given URL is a "data:" URL
static isDataURL(url) {
if (url) {
return (url.substring(0, 5)) === "data:";
} else {
return false;
}
}
// Get a URI as text
static fetchText(theURI, theCB, form) {
var textCB;
textCB = (val, errC, errT, part) => {
if (errC === 0) {
val = (val.replace(/\r\n/g, "\n")).replace(/\r/g, "\n");
}
return theCB(val, errC, errT, part);
};
return Data.fetchURI(theURI, textCB, form);
}
// Get a URI as JSON
static fetchJSON(theURI, theCB, form) {
var JSONCB;
JSONCB = (val, errC, errT, part) => {
var err, newJSON;
if (errC > 0 || val.length === 0) {
return theCB(val, errC, errT, part);
} else if (val.length === 0) {
return theCB(null, 1, "No JSON data found", val);
} else {
try {
newJSON = Data.parseJSON(val);
return theCB(newJSON, 0, null, newJSON);
} catch (error) {
err = error;
return theCB(null, 1, err, val);
}
}
};
return Data.fetchURI(theURI, JSONCB, form);
}
// Return a Promise for a fetched URI
//   Currently Builds on Data.fetchURI
//   Later add JSON extensions
//   Currently eager but later could be lazy
//   Currently uncached
static promiseURI(theURI, form) {
return new Promise((resolve, reject) => {
var theCB;
theCB = (val, errC, errT, part) => {
if (errC > 0) {
if (typeof lggr.trace === "function") {
lggr.trace(`promiseURI ${theURI} rejecting ${errT}`);
}
return reject(new Error(JSON.stringify([errC, errT, part])));
} else {
if (typeof lggr.trace === "function") {
lggr.trace(`promiseURI ${theURI} resolving`);
}
return resolve(val);
}
};
return Data.fetchURI(theURI, theCB, form);
});
}
// Return a Promise for a fetched URI as Text
//   Later combine in cache to keep Text Promise
static promiseURIText(theURI, form) {
return (Data.promiseURI(theURI, form)).then(function(res) {
return (res.replace(/\r\n/g, "\n")).replace(/\r/g, "\n");
});
}
// Identify function for use in then for Promises
static id(arg) {
return arg;
}
};
//---------
// Might need a constructor for some configuration uses
// "Static" members.
// ---------- Utility routines ------------------- #
// Linked to Access for now
Data.toDOM = Access.toDOM;
// ---------- Data fetching routines ------------- #
// Get raw data from URI
Data.fetchURI = Access.fetchURI;
return Data;
}).call(this);
// Export
cwaenv.add(Data, "Data");
// cwaenv.add Sync, "Sync"
// (End Data.coffee)
}).call(this);
// -------- AnimgenInstance.js --------
// Generated by CoffeeScript 2.5.1
(function() {
var AGI, AsyncQueue, AvCache, Config, Data, HtoG, Logger, allg, cwaenv, document, lggr, theConfig;
cwaenv = this.getCWAEnv();
Data = cwaenv.get("Data");
AvCache = cwaenv.get("AvCache");
Config = cwaenv.get("Config");
HtoG = cwaenv.get("HtoG");
AsyncQueue = cwaenv.get("AsyncQueue");
Logger = cwaenv.get("Logger");
lggr = Logger.get("AGI", "debug"); // , "force" # JRWG
allg = Logger.get("AGLite", "debug"); // , "force" # JRWG
document = this.document;
theConfig = Config != null ? Config.theConfig : void 0;
AGI = (function() {
//--------
class AGI {
static Init() {
if (typeof lggr.debug === "function") {
lggr.debug("Init: Called");
}
if (AGI.animInit()) {
// Set up callbacks
Module.CB_SeqStart = function(jagid, status, nframes) {
return (AGI.Get(jagid)).SeqStart(status, nframes);
};
Module.CB_SignStart = function(jagid, gloss, signIx, frameIx) {
return (AGI.Get(jagid)).SignStart(gloss, signIx, frameIx);
};
Module.CB_SeqEnd = (jagid) => {
return (AGI.Get(jagid)).SeqEnd();
};
Module.CB_FrameStart = (jagid, nmorphs, nbones, time, duration) => {
return (AGI.Get(jagid)).FrameStart(nmorphs, nbones, time, duration);
};
Module.CB_Morph = function(jagid, morph) {
return (AGI.Get(jagid)).Morph(morph);
};
Module.CB_Bone = function(jagid, bone) {
return (AGI.Get(jagid)).Bone(bone);
};
// Try without separate callbacks
// Module.RT_Init = (jagid, status) -> (AGI.Get jagid).DoneInit status
// Module.RT_SetAvatar = (jagid, status) -> (AGI.Get jagid).DoneSetAvatar status
// Module.RT_GenerateFrames = (jagid, status) -> (AGI.Get jagid).DoneGenerateFrames status
// Module.RT_DeAlloc = (jagid, status) -> # (AGI.Get jagid).DoneDeAlloc status
Module.Util_Debug = function(msg) {
return typeof allg.debug === "function" ? allg.debug(msg) : void 0;
};
return true;
} else {
lggr.warn("Init: Failed to initialise");
return false;
}
}
static Valid(id) {
return id >= 0 && id < AGI.MAX;
}
static Get(id) {
return AGI.instances[id] || null;
}
static Terminate() {
if (typeof lggr.debug === "function") {
lggr.debug("Terminate: Called");
}
if (AGI.initialised !== AGI.STATE.Running) {
lggr.warn("Terminate: Not running");
return false;
} else {
AGI.initialised = AGI.STATE.Terminated;
if (AGI.animTerm()) {
return true;
} else {
lggr.warn("Terminate: Failed to terminate");
return false;
}
}
}
static Alloc(errPath = null, errAppend = false, errNoErr = true) {
var id, newAGI;
if (typeof lggr.debug === "function") {
lggr.debug("Alloc: Called");
}
// do AGI.Init  unless AGI.initialised is AGI.STATE.Running
newAGI = null;
if (AGI.initialised === AGI.STATE.Running) {
id = 0;
while ((AGI.Valid(id)) && (AGI.Get(id)) !== null) {
id++;
}
if (AGI.Valid(id)) {
if (typeof lggr.debug === "function") {
lggr.debug(`Alloc: Unallocated instance ${id}`);
}
if (AGI.animAlloc(id, errPath, errAppend, errNoErr)) {
newAGI = AGI.instances[id] = new AGI(id);
if (typeof lggr.debug === "function") {
lggr.debug(`Alloc: Allocated instance ${id}`);
}
} else {
lggr.warn(`Alloc: Failed to allocate instance ${id}`);
}
} else {
lggr.warn("Alloc: All Instances already allocated");
}
} else {
lggr.warn("Alloc: Animgen failed to initialise");
}
return newAGI;
}
constructor(jagid1) {
this.jagid = jagid1;
//----------
this.state = AGI.STATE.Alloc;
this.doneProm = null;
this.doneResolve = null;
this.avatar = null;
this.guiPanel = null;
this.fps = theConfig != null ? theConfig.animgenFPS : void 0;
this.sigmlSigns = null; // Not sure this is used (as opposed to a static sigmlSigns)
this.seqFrames = 0;
this.currSigns = null;
this.currFrames = this.currGloss = this.currSignIx = this.currFrameIx = null;
this.frameMorphs = this.frameBones = this.frameTime = this.frameDur = null;
}
// "Instance" members.
SetAvatar(newAv, avXMLs, gui) {
if (typeof lggr.debug === "function") {
lggr.debug(`SetAvatar ${newAv}: Called for instance ${this.jagid} (${this.state}) gui ${gui}`);
}
if (this.state === AGI.STATE.Alloc) {
if (typeof allg.debug === "function") {
allg.debug(`AGI.animSetAvatar(${this.jagid},${newAv}) -> ???`);
}
// Note order of XMLs puts COMMON config second
if (AGI.animSetAvatar(this.jagid, newAv, avXMLs[1], avXMLs[0], avXMLs[2], avXMLs[3])) {
if (typeof allg.debug === "function") {
allg.debug(`AGI.animSetAvatar(${this.jagid},${newAv}) -> true`);
}
this.avatar = newAv;
this.guiPanel = gui;
this.state = AGI.STATE.AvatarSet;
return true;
} else {
if (typeof allg.debug === "function") {
allg.debug(`AGI.animSetAvatar(${this.jagid},${newAv}) -> false`);
}
lggr.warn(`SetAvatar ${newAv}: Failed for instance ${this.jagid}`);
return false;
}
} else {
lggr.warn(`SetAvatar ${newAv}: Wrong state for instance ${this.jagid} (${this.state})`);
return false;
}
}
SetSequence(fps) {
if (typeof lggr.debug === "function") {
lggr.debug(`SetSequence ${fps}: Called for instance ${this.jagid}`);
}
if (this.state === AGI.STATE.AvatarSet || this.state === AGI.STATE.SeqReady) {
if (typeof allg.debug === "function") {
allg.debug(`AGI.animSetSequence(${this.jagid},${fps}) -> ???`);
}
if (AGI.animSetSequence(this.jagid, fps)) {
if (typeof allg.debug === "function") {
allg.debug(`AGI.animSetSequence(${this.jagid},${fps}) -> true`);
}
this.fps = fps;
this.state = AGI.STATE.SeqReady;
return true;
} else {
if (typeof allg.debug === "function") {
allg.debug(`AGI.animSetSequence(${this.jagid},${fps}) -> false`);
}
lggr.warn(`SetSequence ${fps}: Failed for instance ${this.jagid}`);
return false;
}
} else {
lggr.warn(`SetSequence ${fps}: Wrong state for instance ${this.jagid} (${this.state})`);
return false;
}
}
EndSequence() {
if (typeof lggr.debug === "function") {
lggr.debug(`EndSequence: Called for instance ${this.jagid} (${this.state})`);
}
if (this.state === AGI.STATE.AvatarSet || this.state === AGI.STATE.SeqReady) {
this.state = AGI.STATE.AvatarSet;
if (this.doneResolve != null) {
if (typeof lggr.debug === "function") {
lggr.debug("EndSequence: Calling doneResolve");
}
}
if (typeof this.doneResolve === "function") {
this.doneResolve(null);
}
return true;
} else {
lggr.warn(`EndSequence: Wrong state for instance ${this.jagid} (${this.state})`);
return false;
}
}
// Without @casCB callback, signs are accumulated in @currSigns by SignStart and SeqEnd CB via _endSign
GenerateFrames(sigml, casCB = null) {
var res, theSigns;
this.casCB = casCB;
if (typeof lggr.debug === "function") {
lggr.debug(`GenerateFrames: Called for instance ${this.jagid}`);
}
if (this.state === AGI.STATE.SeqReady) {
this.state = AGI.STATE.SeqInProgress;
if (typeof allg.debug === "function") {
allg.debug(`AGI.animGenerateFrames(${this.jagid},sigml) -> ???`);
}
res = AGI.animGenerateFrames(this.jagid, sigml);
if (typeof allg.debug === "function") {
allg.debug(`AGI.animGenerateFrames(${this.jagid},sigml) -> ` + (res ? "true" : "false"));
}
if (!res) {
lggr.warn(`GenerateFrames: Failed for instance ${this.jagid}`);
}
// Assumes only returns when completed
this.state = AGI.STATE.SeqReady;
theSigns = this.currSigns;
this.currSigns = null;
return theSigns;
} else {
lggr.warn(`GenerateFrames: Wrong state for instance ${this.jagid} (${this.state})`);
return null;
}
}
DeAlloc() {
if (typeof lggr.debug === "function") {
lggr.debug(`DeAlloc: Called for instance ${this.jagid} (${this.state})`);
}
// Check in state to be closed down
if (this.state === AGI.STATE.Alloc || this.state === AGI.STATE.AvatarSet) {
// Deallocate instance
this.state = AGI.STATE.Terminated;
AGI.instances[this.jagid] = null;
if (AGI.animDeAlloc(this.jagid)) {
return true;
} else {
lggr.warn(`DeAlloc: Could not release instance ${this.jagid}`);
return false;
}
} else {
if (typeof lggr.debug === "function") {
lggr.debug(`DeAlloc: Wrong state for instance ${this.jagid} (${this.state})`);
}
return false;
}
}
// Callbacks from GenerateFrames
SeqStart(status, nframes) {
if (typeof lggr.debug === "function") {
lggr.debug(`CB SeqStart ${this.jagid}: status ${status}. frames ${nframes}`);
}
this.seqFrames = nframes;
return this.currSigns = [];
}
_endFrame() {
var newFrame;
if (this.frameBones) {
newFrame = {
time: this.frameTime,
duration: this.frameDur,
morphs: this.frameMorphs,
bones: this.frameBones
};
this.currFrames.push(newFrame);
return this.frameMorphs = this.frameBones = null;
}
}
FrameStart(nmorphs, nbones, time, duration) {
this._endFrame();
this.frameTime = time;
this.frameDur = duration;
this.frameMorphs = [];
return this.frameBones = [];
}
Morph(newMorph) {
return this.frameMorphs.push(newMorph);
}
Bone(newBone) {
return this.frameBones.push(newBone);
}
_endSign() {
var newSign;
if (this.currFrames) {
this._endFrame();
newSign = {
type: AGI.CB.Sign,
signIndex: this.currSignIx,
gloss: this.currGloss,
baseFrameIndex: this.currFrameIx,
frames: this.currFrames
};
if (this.casCB) {
this.casCB(newSign);
} else {
this.currSigns.push(newSign);
}
return this.currFrames = this.currGloss = null;
}
}
SignStart(gloss, signIx, frameIx) {
if (typeof lggr.debug === "function") {
lggr.debug(`CB SignStart ${this.jagid}: gloss ${gloss}. signIx ${signIx}. frameIx ${frameIx}`);
}
this._endSign();
this.currGloss = gloss;
this.currSignIx = signIx;
this.currFrameIx = frameIx;
return this.currFrames = [];
}
SeqEnd() {
if (typeof lggr.debug === "function") {
lggr.debug(`Animgen: SeqEnd ${this.jagid}: Called`);
}
return this._endSign();
}
static PrepInstance(av, gui) {
return new Promise((resolve, reject) => {
var makeNewAGI, theAGI, waitAGIDone;
if (typeof lggr.debug === "function") {
lggr.debug(`PrepInstance for ${av}/${gui}`);
}
// Singleton currently
theAGI = AGI.Get(0);
if ((theAGI != null ? theAGI.avatar : void 0) === av && (theAGI != null ? theAGI.guiPanel : void 0) === gui) {
if (typeof lggr.debug === "function") {
lggr.debug(`PrepInstance finds ${av}/${gui}`);
}
return resolve(theAGI);
} else {
if (typeof lggr.debug === "function") {
lggr.debug(`PrepInstance finds ${theAGI != null ? theAGI.avatar : void 0}/${theAGI != null ? theAGI.guiPanel : void 0} but needs new ${av}/${gui}`);
}
makeNewAGI = () => {
var avC, cmC, newAGI;
// Deallocate current Instance
// Was: do (AGI.Get 0)?.DeAlloc
// Fails: do theAGI?.DeAlloc
// Fails: do theAGI.DeAlloc?
// Fails: do theAGI?.DeAlloc?
// Works" theAGI?.DeAlloc "" # Fake argument
if (theAGI != null) {
theAGI.DeAlloc();
}
// No logging for now
newAGI = AGI.Alloc();
cmC = AvCache.get("COMMON");
avC = AvCache.get(av);
if (typeof lggr.debug === "function") {
lggr.debug(`PrepInstance awaits ZIP entries SetAvatar ${av}/${gui}`);
}
return Promise.all([cmC.getZIPEnt("config"), avC.getZIPEnt("config"), avC.getZIPEnt("asd"), avC.getZIPEnt("nonManuals")]).catch(function(err) {
lggr.warn(`Animgen: Configuration unavailable: ${err}`);
return reject(`SetAvatar failed for ${av}/${gui} with ${err}`);
}).then((XMLs) => {
if (typeof lggr.debug === "function") {
lggr.debug(`PrepInstance calls SetAvatar ${av}/${gui}`);
}
if (newAGI.SetAvatar(av, XMLs, gui)) {
return resolve(newAGI);
} else {
newAGI.DeAlloc();
return reject(`SetAvatar failed for ${av}/${gui}`);
}
});
};
waitAGIDone = () => {
theAGI = AGI.Get(0);
if ((theAGI != null) && theAGI.state !== AGI.STATE.AvatarSet) {
if (typeof lggr.debug === "function") {
lggr.debug("waitAGIDone Promise " + (this.doneProm != null ? "exists" : "needed"));
}
if (theAGI.doneProm == null) {
theAGI.doneProm = new Promise((resolveDone, rejectDone) => {
if (typeof lggr.trace === "function") {
lggr.trace("waitAGIDone creating promise");
}
return theAGI.doneResolve = resolveDone;
});
}
return theAGI.doneProm.then(() => {
return waitAGIDone();
});
} else {
if (typeof lggr.debug === "function") {
lggr.debug("waitAGIDone state OK");
}
return makeNewAGI();
}
};
return waitAGIDone();
}
});
}
static delayTime(fps, speed, tag = "") {
var delay, elapsed, target;
elapsed = Date.now() - this.startTime;
// Assumes a playing rate haigher than effective fps
target = this.totFrames * 700 / (fps * speed);
// Minimum delay 20. Maximum delay 500
delay = Math.min(Math.max(20, target - elapsed), 500);
if (typeof lggr.debug === "function") {
lggr.debug(`${tag} Elapsed ${elapsed} Frames ${this.totFrames} Delay ${delay}`);
}
return delay;
}
// Static Driving routine: Omit SetSequence to add more SiGML
static SiGMLToCAS(sigml, av, gui, fps, speedFun, H2G, CB, drainFun) {
if (typeof lggr.info === "function") {
lggr.info(`SiGMLToCAS: Started for ${av} panel ${gui} FPS ${fps}`);
}
(AGI.PrepInstance(av, gui)).then((theAGI) => {
var genFrames, gloss, i, len, nd, nn, okSigns, procHtoGSiGML, ref, ref1, sigDoc;
this.startTime = Date.now();
this.totFrames = 0;
this.sigmlSigns = 0;
if (typeof lggr.info === "function") {
lggr.info("SiGMLToCAS: Break SiGML into signs Started");
}
// Create SiGML Queue
this.sigmlQueue = new AsyncQueue("HorG-SiGML");
sigDoc = Data.toDOM(sigml, function(err, msg) {
return typeof lggr.debug === "function" ? lggr.debug(`Animgen: SiGML malformed: ${err}`) : void 0;
});
ref = (sigDoc != null ? sigDoc.documentElement.childNodes : void 0) || [];
for (i = 0, len = ref.length; i < len; i++) {
nd = ref[i];
nn = nd != null ? nd.nodeName : void 0;
if (nn === "hamgestural_sign" || nn === "hns_sign") {
gloss = (ref1 = nd.attributes.getNamedItem("gloss")) != null ? ref1.value : void 0;
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: SiGML XML has: ${gloss}`);
}
this.sigmlQueue.put({
type: nn,
gloss: gloss,
sigml: "<sigml>" + (Data.mnDOM(nd)) + "</sigml>"
});
}
}
if (this.sigmlQueue.putLen === 0) {
if (typeof lggr.debug === "function") {
lggr.debug("SiGMLToCAS: No valid signs");
}
CB({
type: AGI.CB.Fail,
err: `No valid signs for ${av}`
});
} else {
// Terminate SiGMLQueue
this.sigmlQueue.put(null);
if (typeof lggr.info === "function") {
lggr.info("SiGMLToCAS: Break SiGML into signs Ended");
}
// Create GSiGML Queue after completion of SiGML Queue
this.gSigmlQueue = new AsyncQueue("G-SiGML");
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: SiGMLToCAS ${theAGI.jagid} call SetSequence ${av}/${gui} fps ${fps}`);
}
theAGI.SetSequence(fps);
okSigns = 0;
// Process HtoG Queue
procHtoGSiGML = (sign) => {
var procHtoGSign;
procHtoGSign = () => {
var entry;
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: procHtoGSiGML \"${sign.gloss}\" start`);
}
if (drainFun()) {
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: procHtoGSiGML \"${sign.gloss}\"skipped as draining`);
}
} else {
if (sign.type === "hns_sign") {
entry = new Promise((resolve, reject) => {
var h2gCB;
h2gCB = (res) => {
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: H-SiGML ${sign.gloss}. Applied HtoG`);
}
if (res.errCount > 0 || !res.sigDoc) {
lggr.warn(`SiGMLToCAS: HtoG Errors:\n${res.errText}`);
CB({
type: AGI.CB.Skip,
err: "SiGML invalid HNS sign"
});
return resolve({
gloss: sign.gloss
});
} else {
return resolve({
gloss: sign.gloss,
sigml: Data.mnDOM(res.sigDoc)
});
}
};
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: H-SiGML ${sign.gloss}. Applying HtoG`);
}
// setTimeout (=> H2G.parseHtoGText sign.sigml, h2gCB), 20 # Try without JRWG
return H2G.parseHtoGText(sign.sigml, h2gCB);
});
} else {
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: G-SiGML ${sign.gloss} transferred`);
}
entry = sign;
}
this.gSigmlQueue.put(entry);
}
return this.sigmlQueue.get(procHtoGSiGML);
};
// Delay as appropriate
if (sign != null) {
// No delay if draining
if (drainFun()) {
return procHtoGSign();
} else {
return setTimeout(procHtoGSign, this.delayTime(fps, speedFun(), "HtoG"));
}
} else {
if (typeof lggr.info === "function") {
lggr.info("SiGMLToCAS: Process SiGML to G-SiGML Ended");
}
return this.gSigmlQueue.put(null);
}
};
if (typeof lggr.info === "function") {
lggr.info("SiGMLToCAS: Process SiGML to G-SiGML Started");
}
this.sigmlQueue.get(procHtoGSiGML);
// Process G-SiGML Queue
genFrames = (sign) => {
var nSigns;
if (sign != null) {
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: genFrames ${sign.gloss} start`);
}
if (drainFun()) {
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: genFrames ${sign.gloss} skipped as draining`);
}
} else {
// Check for valid SiGML after H to G
if (sign.sigml != null) {
nSigns = 1;
if (theAGI.GenerateFrames(sign.sigml, CB)) {
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: genFrames ${sign.gloss} generated ${theAGI.seqFrames} frames`);
}
this.totFrames += theAGI.seqFrames;
okSigns += nSigns;
} else {
CB({
type: AGI.CB.Skip,
err: "SiGML invalid sign"
});
}
} else {
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: G-SiGML ${sign.gloss} has no SiGML`);
}
}
}
// Get next sign
return this.gSigmlQueue.get(genFrames); // No delay here JRWG
} else {
if (typeof lggr.info === "function") {
lggr.info("SiGMLToCAS: Process G-SiGML to CAS Ended");
}
// Indicate end by sending CB.Done
if (okSigns > 0) {
theAGI.EndSequence();
CB({
type: AGI.CB.Done
});
} else {
CB({
type: AGI.CB.Fail,
err: "SiGML invalid"
});
}
return typeof lggr.info === "function" ? lggr.info(`SiGMLToCAS: SiGMLToCAS for ${av} panel ${gui} Ended. Signs ${okSigns}. Frames ${this.totFrames}`) : void 0;
}
};
if (typeof lggr.info === "function") {
lggr.info("SiGMLToCAS: Process G-SiGML to CAS Started");
}
this.gSigmlQueue.get(genFrames);
}
return null;
}).catch((msg) => {
if (typeof lggr.debug === "function") {
lggr.debug(`SiGMLToCAS: PrepInstance failed: ${msg}`);
}
return CB({
type: AGI.CB.Fail,
err: `Cannot process SiGML for ${av}`
});
});
return void 0;
}
};
//--------
// "Static" members.
// @static
// Wrap C++ functions
AGI.animInit = Module.cwrap('animgenInit', ['number'], []);
AGI.animAlloc = Module.cwrap('animgenAllocate', ['number'], ['number', 'string', 'number', 'number']);
AGI.animSetOutput = Module.cwrap('animgenSetOutput', ['number'], ['number', 'string']);
AGI.animSetAvatar = Module.cwrap('animgenSetAvatar', ['number'], ['number', 'string', 'string', 'string', 'string', 'string']);
AGI.animSetSequence = Module.cwrap('animgenSetSequence', ['number'], ['number', 'number']);
AGI.animGenerateFrames = Module.cwrap('animgenGenerateFrames', ['number'], ['number', 'string']);
AGI.animDeAlloc = Module.cwrap('animgenDeAllocate', ['number'], ['number']);
AGI.animTerm = Module.cwrap('animgenTerminate', ['number'], []);
// Fully serialise for now
AGI.MAX = 1;
AGI.STATE = {
Failed: 0,
Running: 1,
Alloc: 2,
AvatarSet: 3,
SeqReady: 4,
SeqInProgress: 5,
Terminated: 6
};
AGI.CB = {
Unset: 0,
Sign: 1,
Skip: 2,
Done: 3,
Fail: 4
};
// Initialise during setup
AGI.initialised = AGI.Init() ? AGI.STATE.Running : AGI.STATE.Failed;
AGI.instances = [];
return AGI;
}).call(this);
// Export
cwaenv.add(AGI, "AGI");
// (End AnimgenInstance.coffee)
}).call(this);
// -------- Animgen.main.js --------
// Generated by CoffeeScript 2.5.1
(function() {
//   Driver for Node Animgenlite test applications
var AGI, Data, FS, Logger, argIx, argv, argvLen, avXMLs, avasd, avasdProm, avatardir, avcfg, avcfgProm, avdir, avnmn, avnmnProm, cmcfg, cmcfgProm, cmdir, cwaenv, floatDP, lggr, outFD, outfil, parms, prtArr, prtBone, prtBones, prtFrame, prtFrames, prtMorph, prtMorphs, prtSign, prtSigns, runAnimgen, sigfil, sigflProm, stem, workdir;
cwaenv = this.getCWAEnv();
Data = cwaenv.get("Data");
AGI = cwaenv.get("AGI");
FS = require("fs");
argv = process.argv;
argvLen = argv.length;
Logger = cwaenv.get("Logger");
lggr = Logger.get("Animgan", "trace", "force"); // JRWG
// Utility Functions
outFD = process.stdout.fd;
floatDP = 5;
prtArr = function(arr) {
var el, i, len, res, tag;
tag = "[";
res = "";
for (i = 0, len = arr.length; i < len; i++) {
el = arr[i];
res += tag + (el.toFixed(floatDP));
tag = ",";
}
if (res === "") {
res = "[";
}
return res + "]";
};
prtBone = function(bone) {
return `\{\"id4cc\":\"${bone.id4cc}\",\"trans\":${prtArr(bone.trans)},\"rot\":${prtArr(bone.rot)}\}`;
};
prtBones = function(bones) {
var bone, i, len, res, tag;
tag = "[";
res = "";
for (i = 0, len = bones.length; i < len; i++) {
bone = bones[i];
res += tag + (prtBone(bone));
tag = ",";
}
if (res === "") {
res = "[";
}
return res + "]";
};
prtMorph = function(morph) {
return `\{\"id4cc\":\"${morph.id4cc}\",\"amount\":${morph.amount.toFixed(floatDP)}\}`;
};
prtMorphs = function(morphs) {
var i, len, morph, res, tag;
tag = "[";
res = "";
for (i = 0, len = morphs.length; i < len; i++) {
morph = morphs[i];
res += tag + (prtMorph(morph));
tag = ",";
}
if (res === "") {
res = "[";
}
return res + "]";
};
prtFrame = (tag, frame) => {
var res;
res = `${tag}\n\{\"time\":${frame.time.toFixed(0)},\"duration\":${frame.duration}`;
FS.writeSync(outFD, `${res},\"morphs\":${prtMorphs(frame.morphs)}`);
return FS.writeSync(outFD, `,\"bones\":${prtBones(frame.bones)}\}`);
};
prtFrames = (frames) => {
var frame, i, len, tag;
tag = "[";
for (i = 0, len = frames.length; i < len; i++) {
frame = frames[i];
prtFrame(tag, frame);
tag = ",";
}
return FS.writeSync(outFD, (tag === "[" ? tag : "") + "]");
};
prtSign = (tag, sign) => {
var res;
res = `${tag}{\"signIndex\":${sign.signIndex},\"gloss\":\"${sign.gloss}\",\"baseFrameIndex\":${sign.baseFrameIndex}`;
FS.writeSync(outFD, res + ",\"frames\":");
prtFrames(sign.frames);
return FS.writeSync(outFD, "}");
};
prtSigns = (signs) => {
var i, len, sign, tag;
tag = "[";
for (i = 0, len = signs.length; i < len; i++) {
sign = signs[i];
prtSign(tag, sign);
tag = ",\n";
}
return FS.writeSync(outFD, (tag === "[" ? tag : "") + "]\n");
};
if (typeof lggr.debug === "function") {
lggr.debug(`Args [${argv}] Length ${argvLen}`);
}
stem = argv[1].substr(0, argv[1].lastIndexOf("/"));
if (stem.length > 0) {
stem += "/";
}
if (typeof lggr.debug === "function") {
lggr.debug(`Stem is ${stem}`);
}
if (typeof lggr.debug === "function") {
lggr.debug(`Module: ${Object.keys(Module)}`);
}
argIx = 2;
parms = {};
// Where parameters take arguments check arguments are available
// JRWG List of argumentless parameters is probably incomplete
// JRWG Some parameters can be repeated and should be handled specially
while (argIx < argvLen) {
switch (argv[argIx]) {
case "-noerr":
case "-appenderr":
// Parameters without arguments
parms[argv[argIx].slice(1)] = true;
argIx++;
break;
default:
// Parameters with arguments
if (argIx + 1 < argvLen) {
if (typeof lggr.trace === "function") {
lggr.trace(`Parm: ${argv[argIx]} Value: ${argv[argIx + 1]}`);
}
parms[argv[argIx].slice(1)] = argv[argIx + 1];
argIx += 2;
} else {
if (typeof lggr.debug === "function") {
lggr.debug(`Parm: ${argv[argIx]} has no value and is ignored`);
}
argIx++;
}
}
}
if (typeof lggr.trace === "function") {
lggr.trace(`Parameters: ${JSON.stringify(parms)}`);
}
// JRWG Actually animgenlite seems to specify CAS
if (parms.interface !== "CAS2.1" || parms.filetype !== "JSON") {
lggr.warn("Expecting CAS2.1 format for JSON");
}
// Filenames for configuration data
if ((parms != null ? parms.avatardir : void 0) && (parms != null ? parms.avatar : void 0)) {
avatardir = Data.asDir(Data.absoluteURI(parms.avatardir, stem));
avdir = Data.asDir(Data.absoluteURI(parms.avatar, avatardir));
if (typeof lggr.debug === "function") {
lggr.debug(`Avatar directory: ${avdir}`);
}
cmdir = Data.asDir(Data.absoluteURI("COMMON", avatardir));
if (typeof lggr.debug === "function") {
lggr.debug(`Common directory: ${cmdir}`);
}
avcfg = Data.absoluteURI("config.xml", avdir);
if (typeof lggr.debug === "function") {
lggr.debug(`Avatar config: ${avcfg}`);
}
cmcfg = Data.absoluteURI("config.xml", cmdir);
if (typeof lggr.debug === "function") {
lggr.debug(`Common config: ${cmcfg}`);
}
avasd = Data.absoluteURI("asd.xml", avdir);
if (typeof lggr.debug === "function") {
lggr.debug(`Avatar ASD: ${avasd}`);
}
avnmn = Data.absoluteURI("nonmanuals.xml", avdir);
if (typeof lggr.debug === "function") {
lggr.debug(`Avatar nonmanuals: ${avnmn}`);
}
} else {
lggr.warn("Valid -avatar and -avatardir needed");
}
workdir = Data.asDir(Data.absoluteURI(parms.workdir, stem));
if (typeof lggr.debug === "function") {
lggr.debug(`Work dir: ${workdir}`);
}
sigfil = Data.absoluteURI(`${parms.p}.sigml`, workdir);
if (typeof lggr.debug === "function") {
lggr.debug(`SiGML file: ${sigfil}`);
}
if (parms != null ? parms.floatdp : void 0) {
floatDP = parms.floatdp;
}
if (parms != null ? parms.output : void 0) {
outfil = Data.absoluteURI(`${parms.output}.cas.json`, stem);
outFD = FS.openSync(outfil, "w");
if (typeof lggr.debug === "function") {
lggr.debug(`Output file: ${outfil}`);
}
} else {
outfil = null;
}
avXMLs = {};
runAnimgen = (sigml) => {
var errAppend, errNoErr, errPath, signs, stat, theAGI;
// Needs error checking
errPath = parms.E || parms['errors-to'] || null;
if (typeof lggr.debug === "function") {
lggr.debug(`Error path: ${errPath}`);
}
if (typeof lggr.debug === "function") {
lggr.debug(`Avatar: ${parms.avatar}`);
}
errAppend = parms.appenderr || false;
errNoErr = parms.noerr || false;
// Initialisation now done during loading
if (AGI.initialised !== AGI.STATE.Running) {
lggr.warn("Animgen not Running");
}
if (typeof lggr.trace === "function") {
lggr.trace(`AGI.Alloc ${errPath}, ${errAppend}, ${errNoErr} -> ???`);
}
theAGI = AGI.Alloc(errPath, errAppend, errNoErr);
if (typeof lggr.debug === "function") {
lggr.debug(`AGI.Alloc ${errPath}, ${errAppend}, ${errNoErr} -> ${theAGI} (${theAGI != null ? theAGI.jagid : void 0})`);
}
if (typeof lggr.trace === "function") {
lggr.trace(`theAGI.SetAvatar ${parms.avatar}, ... -> ???`);
}
stat = theAGI.SetAvatar(parms.avatar, avXMLs);
if (typeof lggr.debug === "function") {
lggr.debug(`theAGI.SetAvatar ${parms.avatar}, ... -> ${stat}`);
}
if (typeof lggr.debug === "function") {
lggr.debug(`theAGI.SetSequence ${parms.fps} -> ???`);
}
stat = theAGI.SetSequence(parms.fps);
if (typeof lggr.debug === "function") {
lggr.debug(`theAGI.SetSequence ${parms.fps} -> ${stat}`);
}
if (typeof lggr.debug === "function") {
lggr.debug("theAGI.GenerateFrames [sigml] -> ???");
}
signs = theAGI.GenerateFrames(sigml);
if (typeof lggr.debug === "function") {
lggr.debug("theAGI.GenerateFrames [sigml] -> [signs]");
}
if (typeof lggr.debug === "function") {
lggr.debug("theAGI.EndSequence -> ???");
}
stat = theAGI.EndSequence();
if (typeof lggr.debug === "function") {
lggr.debug(`theAGI.EndSequence -> ${stat}`);
}
prtSigns(signs);
if (outfil) {
FS.closeSync(outFD);
}
if (typeof lggr.debug === "function") {
lggr.debug("theAGI.DeAlloc -> ???");
}
stat = theAGI.DeAlloc();
if (typeof lggr.debug === "function") {
lggr.debug(`theAGI.DeAlloc -> ${stat}`);
}
if (typeof lggr.debug === "function") {
lggr.debug("AGI.Terminate -> ???");
}
stat = AGI.Terminate();
return typeof lggr.debug === "function" ? lggr.debug(`AGI.Terminate -> ${stat}`) : void 0;
};
// Trigger avatar file loading using Promises
cmcfgProm = Data.promiseURIText(cmcfg).catch(function(err) {
var errC, msg, part;
[errC, msg, part] = JSON.parse(err.message);
lggr.warn(`Common config: ${msg}`);
throw err;
});
avcfgProm = Data.promiseURIText(avcfg).catch(function(err) {
var errC, msg, part;
[errC, msg, part] = JSON.parse(err.message);
lggr.warn(`Avatar config: ${msg}`);
throw err;
});
avasdProm = Data.promiseURIText(avasd).catch(function(err) {
var errC, msg, part;
[errC, msg, part] = JSON.parse(err.message);
lggr.warn(`Avatar ASD: ${msg}`);
throw err;
});
avnmnProm = Data.promiseURIText(avnmn).catch(function(err) {
var errC, msg, part;
[errC, msg, part] = JSON.parse(err.message);
lggr.warn(`Avatar nonmanuals: ${msg}`);
throw err;
});
// Fetch SiGML file
sigflProm = Data.promiseURIText(sigfil).catch(function(err) {
var errC, msg, part;
[errC, msg, part] = JSON.parse(err.message);
lggr.warn(`SiGML file: ${msg}`);
throw err;
});
Promise.all([cmcfgProm, avcfgProm, avasdProm, avnmnProm]).catch(function(err) {
lggr.warn(`${err}`);
throw err;
}).then((XMLs) => {
avXMLs = XMLs;
return sigflProm.then((sigmldoc) => {
return runAnimgen(sigmldoc);
});
});
// (End Animgen.main.coffee)
}).call(this);
// --------  END  --------
